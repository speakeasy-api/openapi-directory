/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * This folder contains the requests around API versions.
 */
public class APIVersion {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public APIVersion(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Create API Version
     * This call creates a new API version in the specified API.  
     * 
     * Request body should contain a `version` object which should have fields:
     * 
     * &lt;table&gt;
     * &lt;tr&gt;
     * 	&lt;td&gt;name&lt;/td&gt;
     * 	&lt;td&gt;Required. Name of the API Version&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * 	&lt;td&gt;source&lt;/td&gt;
     * 	&lt;td&gt;
     * 		If specified, it will copy the contents of the specified api version to create a new api verison.
     * 		&lt;table&gt;
     * 			&lt;tr&gt;
     * 				&lt;td&gt;id&lt;/td&gt;
     * 				&lt;td&gt;Required. Id of the apiversion from where the details are to be copied&lt;/td&gt;
     * 			&lt;/tr&gt;
     * 			&lt;tr&gt;
     * 				&lt;td&gt;schema&lt;/td&gt;
     * 				&lt;td&gt;Boolean. If true then copies the schema from the specified api version&lt;/td&gt;
     * 			&lt;/tr&gt;
     * 			&lt;tr&gt;
     * 				&lt;td&gt;relations&lt;/td&gt;
     * 				&lt;td&gt;Object. {"&amp;lt;relationType&amp;gt;": true/false}.  
     * 					Allowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`
     * 				Relation types which should be copied over to the new api verison&lt;/td&gt;
     * 			&lt;/tr&gt;
     * 		&lt;/table&gt;
     * 	&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;/table&gt;
     * 
     * Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateApiVersionResponse createApiVersion(org.openapis.openapi.models.operations.CreateApiVersionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateApiVersionRequest.class, baseUrl, "/apis/{apiId}/versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateApiVersionResponse res = new org.openapis.openapi.models.operations.CreateApiVersionResponse() {{
            createApiVersion200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateApiVersion200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateApiVersion200ApplicationJSON.class);
                res.createApiVersion200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete an API Version
     * This call deletes an existing API Version having the specified id.  
     * 
     * Response contains an `version` object with `id` of the API Version which was deleted.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteAnApiVersionResponse deleteAnApiVersion(org.openapis.openapi.models.operations.DeleteAnApiVersionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAnApiVersionRequest.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAnApiVersionResponse res = new org.openapis.openapi.models.operations.DeleteAnApiVersionResponse() {{
            deleteAnApiVersion200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeleteAnApiVersion200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeleteAnApiVersion200ApplicationJSON.class);
                res.deleteAnApiVersion200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get All API Versions
     * This call fetches details about the all the API Versions in the specified API.
     * 
     * The response will contain an array `versions` object which would be a list of all the API Version along with their details.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAllApiVersionsResponse getAllApiVersions(org.openapis.openapi.models.operations.GetAllApiVersionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetAllApiVersionsRequest.class, baseUrl, "/apis/{apiId}/versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAllApiVersionsResponse res = new org.openapis.openapi.models.operations.GetAllApiVersionsResponse() {{
            getAllApiVersions200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetAllApiVersions200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetAllApiVersions200ApplicationJSON.class);
                res.getAllApiVersions200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get an API Version
     * This call fetches details about the specified API Version.
     * 
     * The response will contain a `version` object which would contain all the details of the API Version.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAnApiVersionResponse getAnApiVersion(org.openapis.openapi.models.operations.GetAnApiVersionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetAnApiVersionRequest.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAnApiVersionResponse res = new org.openapis.openapi.models.operations.GetAnApiVersionResponse() {{
            getAnApiVersion200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetAnApiVersion200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetAnApiVersion200ApplicationJSON.class);
                res.getAnApiVersion200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update an API Version
     * This call updates an existing API Version.  
     * 
     * Request body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.
     * 
     * Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAnApiVersionResponse updateAnApiVersion(org.openapis.openapi.models.operations.UpdateAnApiVersionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAnApiVersionRequest.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAnApiVersionResponse res = new org.openapis.openapi.models.operations.UpdateAnApiVersionResponse() {{
            updateAnApiVersion200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateAnApiVersion200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateAnApiVersion200ApplicationJSON.class);
                res.updateAnApiVersion200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}