/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Certificate - Defines TLS certificate.
 */
public class Certificate {
    /**
     * Output only. The creation timestamp of a Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Certificate withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * One or more paragraphs of text description of a certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Certificate withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Output only. The expiry timestamp of a Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expireTime")
    public String expireTime;
    public Certificate withExpireTime(String expireTime) {
        this.expireTime = expireTime;
        return this;
    }
    
    /**
     * Set of labels associated with a Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Certificate withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managed")
    public ManagedCertificate managed;
    public Certificate withManaged(ManagedCertificate managed) {
        this.managed = managed;
        return this;
    }
    
    /**
     * A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/* /locations/* /certificates/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Certificate withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The PEM-encoded certificate chain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pemCertificate")
    public String pemCertificate;
    public Certificate withPemCertificate(String pemCertificate) {
        this.pemCertificate = pemCertificate;
        return this;
    }
    
    /**
     * Output only. The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sanDnsnames")
    public String[] sanDnsnames;
    public Certificate withSanDnsnames(String[] sanDnsnames) {
        this.sanDnsnames = sanDnsnames;
        return this;
    }
    
    /**
     * Immutable. The scope of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public CertificateScopeEnum scope;
    public Certificate withScope(CertificateScopeEnum scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfManaged")
    public SelfManagedCertificate selfManaged;
    public Certificate withSelfManaged(SelfManagedCertificate selfManaged) {
        this.selfManaged = selfManaged;
        return this;
    }
    
    /**
     * Output only. The last update timestamp of a Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Certificate withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
