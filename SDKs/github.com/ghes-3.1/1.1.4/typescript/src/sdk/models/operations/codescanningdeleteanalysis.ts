/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CodeScanningDeleteAnalysisRequest extends SpeakeasyBase {
  /**
   * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=analysis_id",
  })
  analysisId: number;

  /**
   * Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=confirm_delete",
  })
  confirmDelete?: string;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

/**
 * Service unavailable
 */
export class CodeScanningDeleteAnalysis503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "documentation_url" })
  documentationUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

export class CodeScanningDeleteAnalysisResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  codeScanningAnalysisDeletion?: shared.CodeScanningAnalysisDeletion;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  codeScanningDeleteAnalysis503ApplicationJSONObject?: CodeScanningDeleteAnalysis503ApplicationJSON;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  scimError?: shared.ScimError;
}
