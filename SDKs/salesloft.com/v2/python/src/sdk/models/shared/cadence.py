"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cadencecounts as shared_cadencecounts
from ..shared import embeddedresource as shared_embeddedresource
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class Cadence:
    r"""Success"""
    
    added_stage: Optional[shared_embeddedresource.EmbeddedResource] = dataclasses.field(default=None)  
    archived_at: Optional[datetime] = dataclasses.field(default=None)
    r"""Datetime of when the cadence was archived, if archived"""  
    bounced_stage: Optional[shared_embeddedresource.EmbeddedResource] = dataclasses.field(default=None)  
    cadence_framework_id: Optional[int] = dataclasses.field(default=None)
    r"""ID of the cadence framework used to create steps for the cadence"""  
    cadence_function: Optional[str] = dataclasses.field(default=None)
    r"""The use case of the cadence. Possible values are:
    
    outbound: Denotes an outbound cadence, typically for sales purposes
    
    inbound: Denotes an inbound sales cadence
    
    event: Denotes a cadence used for an upcoming event
    
    other: Denotes a cadence outside of the standard process
    """  
    cadence_priority: Optional[shared_embeddedresource.EmbeddedResource] = dataclasses.field(default=None)  
    counts: Optional[shared_cadencecounts.CadenceCounts] = dataclasses.field(default=None)  
    created_at: Optional[datetime] = dataclasses.field(default=None)
    r"""Datetime of when the cadence was created"""  
    creator: Optional[shared_embeddedresource.EmbeddedResource] = dataclasses.field(default=None)  
    draft: Optional[bool] = dataclasses.field(default=None)
    r"""Whether this cadence is in draft mode"""  
    external_identifier: Optional[str] = dataclasses.field(default=None)
    r"""Cadence External ID"""  
    finished_stage: Optional[shared_embeddedresource.EmbeddedResource] = dataclasses.field(default=None)  
    groups: Optional[list[shared_embeddedresource.EmbeddedResource]] = dataclasses.field(default=None)
    r"""Groups to which this cadence is assigned, if any"""  
    id: Optional[int] = dataclasses.field(default=None)
    r"""ID of cadence"""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Cadence name"""  
    opt_out_link_included: Optional[bool] = dataclasses.field(default=None)
    r"""Whether this cadence is configured to include an opt-out link by default"""  
    owner: Optional[shared_embeddedresource.EmbeddedResource] = dataclasses.field(default=None)  
    remove_bounces_enabled: Optional[bool] = dataclasses.field(default=None)
    r"""Whether this cadence is configured to automatically remove people who have bounced"""  
    remove_replies_enabled: Optional[bool] = dataclasses.field(default=None)
    r"""Whether this cadence is configured to automatically remove people who have replied"""  
    replied_stage: Optional[shared_embeddedresource.EmbeddedResource] = dataclasses.field(default=None)  
    shared: Optional[bool] = dataclasses.field(default=None)
    r"""Whether this cadence is visible to team members (shared)"""  
    tags: Optional[list[str]] = dataclasses.field(default=None)
    r"""All tags applied to this cadence"""  
    team_cadence: Optional[bool] = dataclasses.field(default=None)
    r"""Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None)
    r"""Datetime of when the cadence was last updated"""  
    