/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetOrderSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  fdcAuth: string;
}

export class GetOrderRequest extends SpeakeasyBase {
  /**
   * Adds additional information to the response, uses a CSV format for multiple values.'
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=hydrate",
  })
  hydrate?: shared.HydrateParamEnum[];

  /**
   * The FDC order Id
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * Providing your `merchantId` indicates the `id` is your `merchantOrderId`. Although it is not necessary to provide this it will speed up your results when using your `merchantOrderId` however it will slow your results when using the FDC provided `id`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=merchantId",
  })
  merchantId?: number;
}

/**
 * Responsibility for resolving this issue
 */
export class GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2ActionRequiredBy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Human readable description of responsible party to resolve the issue
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2Stage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2State extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2 extends SpeakeasyBase {
  /**
   * Responsibility for resolving this issue
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actionRequiredBy" })
  @Type(
    () =>
      GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2ActionRequiredBy
  )
  actionRequiredBy?: GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2ActionRequiredBy;

  /**
   * Code, see [status codes](#section/Getting-Started/Status-Codes)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "detailCode" })
  detailCode: string;

  /**
   * Depricated, use code instead
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Depricated, does this status event close the order
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isClosed" })
  isClosed?: boolean;

  /**
   * Depricated, use stage/state instead
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Depricated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "stage" })
  @Type(
    () =>
      GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2Stage
  )
  stage: GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2Stage;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  @Type(
    () =>
      GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2State
  )
  state: GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2State;
}

export class GetOrder200ApplicationJSONOrderResponseV2StatusEventV2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  @Type(
    () =>
      shared.OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy
  )
  createdBy?: shared.OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy;

  /**
   * DateTime of Status Event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Explanation for status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(
    () => GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2
  )
  status?: GetOrder200ApplicationJSONOrderResponseV2StatusEventV2StatusTypeV2;
}

export class GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2InventoryDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "expirationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lotNum" })
  lotNum?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "serialNum" })
  serialNum?: string;
}

export class GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2LineDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "externalSku" })
  externalSku?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "totalQuantity" })
  totalQuantity?: number;
}

export class GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2RequestedSkuData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "declaredValue" })
  declaredValue?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku?: string;
}

export class GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata({
    elemType:
      GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2InventoryDetails,
  })
  @Expose({ name: "inventoryDetails" })
  @Type(
    () =>
      GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2InventoryDetails
  )
  inventoryDetails?: GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2InventoryDetails[];

  @SpeakeasyMetadata()
  @Expose({ name: "lineDetails" })
  @Type(
    () =>
      GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2LineDetails
  )
  lineDetails?: GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2LineDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "requestedSkuData" })
  @Type(
    () =>
      GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2RequestedSkuData
  )
  requestedSkuData?: GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2RequestedSkuData;
}

export class GetOrder200ApplicationJSONOrderResponseV2MerchantV2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Merchant Company Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class GetOrder200ApplicationJSONOrderResponseV2ConsigneeV2IsoCountryV2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Two character ISO code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iso2" })
  iso2?: string;

  /**
   * Country Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class GetOrder200ApplicationJSONOrderResponseV2ConsigneeV2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address1" })
  address1: string;

  @SpeakeasyMetadata()
  @Expose({ name: "address2" })
  address2?: string;

  /**
   * City
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addressLocality" })
  addressLocality: string;

  /**
   * Province / State
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addressRegion" })
  addressRegion: string;

  @SpeakeasyMetadata()
  @Expose({ name: "companyName" })
  companyName?: string;

  /**
   * Ideally provide the two character ISO code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "firstName" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "iso" })
  @Type(() => GetOrder200ApplicationJSONOrderResponseV2ConsigneeV2IsoCountryV2)
  iso?: GetOrder200ApplicationJSONOrderResponseV2ConsigneeV2IsoCountryV2;

  @SpeakeasyMetadata()
  @Expose({ name: "lastName" })
  lastName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phone" })
  phone?: string;

  /**
   * Postal Code / Zip
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postalCode" })
  postalCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  @Type(
    () =>
      shared.OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy
  )
  updatedBy?: shared.OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy;
}

export class GetOrder200ApplicationJSONOrderResponseV2ParentOrder extends SpeakeasyBase {
  /**
   * Reference to parent `id` if order was grouped
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;
}

export class GetOrder200ApplicationJSONOrderResponseV2TrackingNumbersCarrierHydratedV2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "canReprintPostage" })
  canReprintPostage?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "includePeripherals" })
  includePeripherals?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "internalRatesOnly" })
  internalRatesOnly?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "requiresDimensions" })
  requiresDimensions?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "symbol" })
  symbol: string;
}

export class GetOrder200ApplicationJSONOrderResponseV2TrackingNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "carrier" })
  @Type(
    () =>
      GetOrder200ApplicationJSONOrderResponseV2TrackingNumbersCarrierHydratedV2
  )
  carrier?: GetOrder200ApplicationJSONOrderResponseV2TrackingNumbersCarrierHydratedV2;
}

export class GetOrder200ApplicationJSONOrderResponseV2WarehouseV2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;
}

/**
 * Requires hydrate to be set in the request and the corresponding node will be filled.
 */
export class GetOrder200ApplicationJSONOrderResponseV2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "currentStatus" })
  @Type(() => GetOrder200ApplicationJSONOrderResponseV2StatusEventV2)
  currentStatus: GetOrder200ApplicationJSONOrderResponseV2StatusEventV2;

  /**
   * DateTime order departed an FDC warehouse
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  departDate?: Date;

  /**
   * DateTime order was dispatched for fulfillment by FDC
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dispatchDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dispatchDate?: Date;

  /**
   * FDC ID for this order
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "integrator" })
  integrator?: string;

  @SpeakeasyMetadata({
    elemType: GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2,
  })
  @Expose({ name: "lineItems" })
  @Type(() => GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2)
  lineItems?: GetOrder200ApplicationJSONOrderResponseV2LineItemsResponseV2[];

  @SpeakeasyMetadata()
  @Expose({ name: "merchant" })
  @Type(() => GetOrder200ApplicationJSONOrderResponseV2MerchantV2)
  merchant: GetOrder200ApplicationJSONOrderResponseV2MerchantV2;

  /**
   * Merchant provided ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantOrderId" })
  merchantOrderId: string;

  /**
   * Requested ship method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantShippingMethod" })
  merchantShippingMethod: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originalConsignee" })
  @Type(() => GetOrder200ApplicationJSONOrderResponseV2ConsigneeV2)
  originalConsignee: GetOrder200ApplicationJSONOrderResponseV2ConsigneeV2;

  @SpeakeasyMetadata()
  @Expose({ name: "parentOrder" })
  @Type(() => GetOrder200ApplicationJSONOrderResponseV2ParentOrder)
  parentOrder?: GetOrder200ApplicationJSONOrderResponseV2ParentOrder;

  /**
   * Merchant provided PO#
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchaseOrderNum" })
  purchaseOrderNum?: string;

  /**
   * DateTime order was recorded by FDC
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recordedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  recordedOn: Date;

  @SpeakeasyMetadata({
    elemType: GetOrder200ApplicationJSONOrderResponseV2TrackingNumbers,
  })
  @Expose({ name: "trackingNumbers" })
  @Type(() => GetOrder200ApplicationJSONOrderResponseV2TrackingNumbers)
  trackingNumbers?: GetOrder200ApplicationJSONOrderResponseV2TrackingNumbers[];

  @SpeakeasyMetadata()
  @Expose({ name: "validatedConsignee" })
  @Type(
    () =>
      shared.OneordersPostResponses201ContentApplication1jsonSchemaPropertiesOriginalConsignee
  )
  validatedConsignee: shared.OneordersPostResponses201ContentApplication1jsonSchemaPropertiesOriginalConsignee;

  @SpeakeasyMetadata()
  @Expose({ name: "warehouse" })
  @Type(() => GetOrder200ApplicationJSONOrderResponseV2WarehouseV2)
  warehouse?: GetOrder200ApplicationJSONOrderResponseV2WarehouseV2;
}

export class GetOrderResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Order Found
   */
  @SpeakeasyMetadata()
  oneordersGetResponses200ContentApplication1jsonSchema?: any;
}
