"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://azure-api.sportsdata.io/v3/lol/projections",
    "https://azure-api.sportsdata.io/v3/lol/projections",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""LoL v3 Projections"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def dfs_slates_by_date(self, request: operations.DfsSlatesByDateRequest) -> operations.DfsSlatesByDateResponse:
        r"""Dfs Slates By Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfsSlatesByDateRequest, base_url, '/{format}/DfsSlatesByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfsSlatesByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DfsSlate]])
                res.dfs_slates = out

        return res

    def projected_player_game_stats_by_date(self, request: operations.ProjectedPlayerGameStatsByDateRequest) -> operations.ProjectedPlayerGameStatsByDateResponse:
        r"""Projected Player Game Stats by Date
        Projected Player Game Stats by Date
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedPlayerGameStatsByDateRequest, base_url, '/{format}/PlayerGameProjectionStatsByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedPlayerGameStatsByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGameProjection]])
                res.player_game_projections = out

        return res

    def projected_player_game_stats_by_player(self, request: operations.ProjectedPlayerGameStatsByPlayerRequest) -> operations.ProjectedPlayerGameStatsByPlayerResponse:
        r"""Projected Player Game Stats by Player
        Projected Player Game Stats by Date
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedPlayerGameStatsByPlayerRequest, base_url, '/{format}/PlayerGameProjectionStatsByPlayer/{date}/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedPlayerGameStatsByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGameProjection]])
                res.player_game_projections = out

        return res

    