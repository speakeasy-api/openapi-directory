"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import status as shared_status
from ..shared import trace as shared_trace
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReachabilityDetailsResultEnum(str, Enum):
    r"""The overall result of the test's configuration analysis."""
    RESULT_UNSPECIFIED = 'RESULT_UNSPECIFIED'
    REACHABLE = 'REACHABLE'
    UNREACHABLE = 'UNREACHABLE'
    AMBIGUOUS = 'AMBIGUOUS'
    UNDETERMINED = 'UNDETERMINED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReachabilityDetails:
    r"""Results of the configuration analysis from the last run of the test."""
    
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    result: Optional[ReachabilityDetailsResultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""The overall result of the test's configuration analysis."""  
    traces: Optional[list[shared_trace.Trace]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('traces'), 'exclude': lambda f: f is None }})
    r"""Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends."""  
    verify_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifyTime'), 'exclude': lambda f: f is None }})
    r"""The time of the configuration analysis."""  
    