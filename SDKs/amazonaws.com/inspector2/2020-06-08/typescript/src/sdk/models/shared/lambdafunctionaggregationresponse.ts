/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SeverityCounts } from "./severitycounts";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A response that contains the results of an AWS Lambda function finding aggregation.
 */
export class LambdaFunctionAggregationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "functionName" })
  functionName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lambdaTags" })
  lambdaTags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "resourceId" })
  resourceId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "runtime" })
  runtime?: string;

  /**
   * An object that contains the counts of aggregated finding per severity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "severityCounts" })
  @Type(() => SeverityCounts)
  severityCounts?: SeverityCounts;
}
