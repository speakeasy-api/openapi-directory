"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Manage:
    r"""Manage Restv 2 Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def copy_snapshot_to_existing_game_using_post(self, request: operations.CopySnapshotToExistingGameUsingPOSTRequest) -> operations.CopySnapshotToExistingGameUsingPOSTResponse:
        r"""copySnapshotToExistingGame"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CopySnapshotToExistingGameUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/copy/to/{targetApiKey}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CopySnapshotToExistingGameUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageResult])
                res.manage_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def create_query_using_post(self, request: operations.CreateQueryUsingPOSTRequest) -> operations.CreateQueryUsingPOSTResponse:
        r"""createQuery"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateQueryUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/queries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "manage_query", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateQueryUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageQuery])
                res.manage_query = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def create_screen_using_post(self, request: operations.CreateScreenUsingPOSTRequest) -> operations.CreateScreenUsingPOSTResponse:
        r"""createScreen"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateScreenUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/screens', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "manage_screen", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateScreenUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageScreen])
                res.manage_screen = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def create_snapshot_using_post(self, request: operations.CreateSnapshotUsingPOSTRequest) -> operations.CreateSnapshotUsingPOSTResponse:
        r"""createSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateSnapshotUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/snapshots', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snapshot_creation_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSnapshotUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageSnapshot])
                res.manage_snapshot = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def create_snippet_using_post(self, request: operations.CreateSnippetUsingPOSTRequest) -> operations.CreateSnippetUsingPOSTResponse:
        r"""createSnippet"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateSnippetUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/snippets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "manage_snippet", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSnippetUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageSnippet])
                res.manage_snippet = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def delete_query_using_delete(self, request: operations.DELETEQueryUsingDELETERequest) -> operations.DELETEQueryUsingDELETEResponse:
        r"""deleteQuery"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DELETEQueryUsingDELETERequest, base_url, '/restv2/game/{apiKey}/manage/queries/{shortCode}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DELETEQueryUsingDELETEResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageResult])
                res.manage_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def delete_screen_using_delete(self, request: operations.DELETEScreenUsingDELETERequest) -> operations.DELETEScreenUsingDELETEResponse:
        r"""deleteScreen"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DELETEScreenUsingDELETERequest, base_url, '/restv2/game/{apiKey}/manage/screens/{shortCode}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DELETEScreenUsingDELETEResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageResult])
                res.manage_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def delete_snapshot_using_delete(self, request: operations.DELETESnapshotUsingDELETERequest) -> operations.DELETESnapshotUsingDELETEResponse:
        r"""deleteSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DELETESnapshotUsingDELETERequest, base_url, '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DELETESnapshotUsingDELETEResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 403, 404]:
            pass
        elif http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageResult])
                res.manage_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out

        return res

    def delete_snippet_using_delete(self, request: operations.DELETESnippetUsingDELETERequest) -> operations.DELETESnippetUsingDELETEResponse:
        r"""deleteSnippet"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DELETESnippetUsingDELETERequest, base_url, '/restv2/game/{apiKey}/manage/snippets/{shortCode}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DELETESnippetUsingDELETEResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageResult])
                res.manage_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_query_using_get(self, request: operations.GETQueryUsingGETRequest) -> operations.GETQueryUsingGETResponse:
        r"""getQuery"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETQueryUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/queries/{shortCode}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETQueryUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageQuery])
                res.manage_query = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_screen_using_get(self, request: operations.GETScreenUsingGETRequest) -> operations.GETScreenUsingGETResponse:
        r"""getScreen"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETScreenUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/screens/{shortCode}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETScreenUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageScreen])
                res.manage_screen = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_snippet_using_get(self, request: operations.GETSnippetUsingGETRequest) -> operations.GETSnippetUsingGETResponse:
        r"""getSnippet"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETSnippetUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/snippets/{shortCode}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETSnippetUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageSnippet])
                res.manage_snippet = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def list_executable_screens_using_get(self, request: operations.ListExecutableScreensUsingGETRequest) -> operations.ListExecutableScreensUsingGETResponse:
        r"""listExecutableScreens"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListExecutableScreensUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/screens/executable', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListExecutableScreensUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ManageItemSummary]])
                res.manage_item_summaries = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def list_queries_using_get(self, request: operations.ListQueriesUsingGETRequest) -> operations.ListQueriesUsingGETResponse:
        r"""listQueries"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListQueriesUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/queries', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListQueriesUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ManageItemSummary]])
                res.manage_item_summaries = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def list_screens_using_get(self, request: operations.ListScreensUsingGETRequest) -> operations.ListScreensUsingGETResponse:
        r"""listScreens"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListScreensUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/screens', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListScreensUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ManageItemSummary]])
                res.manage_item_summaries = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def list_snapshots_using_get(self, request: operations.ListSnapshotsUsingGETRequest) -> operations.ListSnapshotsUsingGETResponse:
        r"""listSnapshots"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListSnapshotsUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/snapshots', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSnapshotsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ManageSnapshot]])
                res.manage_snapshots = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def list_snippets_using_get(self, request: operations.ListSnippetsUsingGETRequest) -> operations.ListSnippetsUsingGETResponse:
        r"""listSnippets"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListSnippetsUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/snippets', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSnippetsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ManageItemSummary]])
                res.manage_item_summaries = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def publish_snapshot_using_post(self, request: operations.PublishSnapshotUsingPOSTRequest) -> operations.PublishSnapshotUsingPOSTResponse:
        r"""publishSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PublishSnapshotUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/publish', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishSnapshotUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageResult])
                res.manage_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def revert_snapshot_using_post(self, request: operations.RevertSnapshotUsingPOSTRequest) -> operations.RevertSnapshotUsingPOSTResponse:
        r"""revertSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RevertSnapshotUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/revert', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RevertSnapshotUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageResult])
                res.manage_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def update_query_using_put(self, request: operations.UpdateQueryUsingPUTRequest) -> operations.UpdateQueryUsingPUTResponse:
        r"""updateQuery"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateQueryUsingPUTRequest, base_url, '/restv2/game/{apiKey}/manage/queries/{shortCode}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "manage_query", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateQueryUsingPUTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageQuery])
                res.manage_query = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def update_screen_using_put(self, request: operations.UpdateScreenUsingPUTRequest) -> operations.UpdateScreenUsingPUTResponse:
        r"""updateScreen"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateScreenUsingPUTRequest, base_url, '/restv2/game/{apiKey}/manage/screens/{shortCode}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "manage_screen", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateScreenUsingPUTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageScreen])
                res.manage_screen = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def update_snippet_using_put(self, request: operations.UpdateSnippetUsingPUTRequest) -> operations.UpdateSnippetUsingPUTResponse:
        r"""updateSnippet"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSnippetUsingPUTRequest, base_url, '/restv2/game/{apiKey}/manage/snippets/{shortCode}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "manage_snippet", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSnippetUsingPUTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManageSnippet])
                res.manage_snippet = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    