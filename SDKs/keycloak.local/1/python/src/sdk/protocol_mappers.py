"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProtocolMappers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_client_scopes_id1_protocol_mappers_models_id2_(self, request: operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Request) -> operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Response:
        r"""Delete the mapper"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Request, base_url, '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_clients_id1_protocol_mappers_models_id2_(self, request: operations.DeleteRealmClientsId1ProtocolMappersModelsId2Request) -> operations.DeleteRealmClientsId1ProtocolMappersModelsId2Response:
        r"""Delete the mapper"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsId1ProtocolMappersModelsId2Request, base_url, '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsId1ProtocolMappersModelsId2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_client_scopes_id1_protocol_mappers_models_id2_(self, request: operations.GetRealmClientScopesId1ProtocolMappersModelsId2Request) -> operations.GetRealmClientScopesId1ProtocolMappersModelsId2Response:
        r"""Get mapper by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesId1ProtocolMappersModelsId2Request, base_url, '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesId1ProtocolMappersModelsId2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProtocolMapperRepresentation])
                res.protocol_mapper_representation = out

        return res

    def get_realm_client_scopes_id_protocol_mappers_models(self, request: operations.GetRealmClientScopesIDProtocolMappersModelsRequest) -> operations.GetRealmClientScopesIDProtocolMappersModelsResponse:
        r"""Get mappers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDProtocolMappersModelsRequest, base_url, '/{realm}/client-scopes/{id}/protocol-mappers/models', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDProtocolMappersModelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProtocolMapperRepresentation]])
                res.protocol_mapper_representations = out

        return res

    def get_realm_client_scopes_id_protocol_mappers_protocol_protocol_(self, request: operations.GetRealmClientScopesIDProtocolMappersProtocolProtocolRequest) -> operations.GetRealmClientScopesIDProtocolMappersProtocolProtocolResponse:
        r"""Get mappers by name for a specific protocol"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDProtocolMappersProtocolProtocolRequest, base_url, '/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDProtocolMappersProtocolProtocolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProtocolMapperRepresentation]])
                res.protocol_mapper_representations = out

        return res

    def get_realm_clients_id1_protocol_mappers_models_id2_(self, request: operations.GetRealmClientsId1ProtocolMappersModelsId2Request) -> operations.GetRealmClientsId1ProtocolMappersModelsId2Response:
        r"""Get mapper by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsId1ProtocolMappersModelsId2Request, base_url, '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsId1ProtocolMappersModelsId2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProtocolMapperRepresentation])
                res.protocol_mapper_representation = out

        return res

    def get_realm_clients_id_protocol_mappers_models(self, request: operations.GetRealmClientsIDProtocolMappersModelsRequest) -> operations.GetRealmClientsIDProtocolMappersModelsResponse:
        r"""Get mappers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDProtocolMappersModelsRequest, base_url, '/{realm}/clients/{id}/protocol-mappers/models', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDProtocolMappersModelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProtocolMapperRepresentation]])
                res.protocol_mapper_representations = out

        return res

    def get_realm_clients_id_protocol_mappers_protocol_protocol_(self, request: operations.GetRealmClientsIDProtocolMappersProtocolProtocolRequest) -> operations.GetRealmClientsIDProtocolMappersProtocolProtocolResponse:
        r"""Get mappers by name for a specific protocol"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDProtocolMappersProtocolProtocolRequest, base_url, '/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDProtocolMappersProtocolProtocolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProtocolMapperRepresentation]])
                res.protocol_mapper_representations = out

        return res

    def post_realm_client_scopes_id_protocol_mappers_add_models(self, request: operations.PostRealmClientScopesIDProtocolMappersAddModelsRequest) -> operations.PostRealmClientScopesIDProtocolMappersAddModelsResponse:
        r"""Create multiple mappers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientScopesIDProtocolMappersAddModelsRequest, base_url, '/{realm}/client-scopes/{id}/protocol-mappers/add-models', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientScopesIDProtocolMappersAddModelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_client_scopes_id_protocol_mappers_models(self, request: operations.PostRealmClientScopesIDProtocolMappersModelsRequest) -> operations.PostRealmClientScopesIDProtocolMappersModelsResponse:
        r"""Create a mapper"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientScopesIDProtocolMappersModelsRequest, base_url, '/{realm}/client-scopes/{id}/protocol-mappers/models', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "protocol_mapper_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientScopesIDProtocolMappersModelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_clients_id_protocol_mappers_add_models(self, request: operations.PostRealmClientsIDProtocolMappersAddModelsRequest) -> operations.PostRealmClientsIDProtocolMappersAddModelsResponse:
        r"""Create multiple mappers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDProtocolMappersAddModelsRequest, base_url, '/{realm}/clients/{id}/protocol-mappers/add-models', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDProtocolMappersAddModelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_clients_id_protocol_mappers_models(self, request: operations.PostRealmClientsIDProtocolMappersModelsRequest) -> operations.PostRealmClientsIDProtocolMappersModelsResponse:
        r"""Create a mapper"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDProtocolMappersModelsRequest, base_url, '/{realm}/clients/{id}/protocol-mappers/models', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "protocol_mapper_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDProtocolMappersModelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_client_scopes_id1_protocol_mappers_models_id2_(self, request: operations.PutRealmClientScopesId1ProtocolMappersModelsId2Request) -> operations.PutRealmClientScopesId1ProtocolMappersModelsId2Response:
        r"""Update the mapper"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientScopesId1ProtocolMappersModelsId2Request, base_url, '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "protocol_mapper_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientScopesId1ProtocolMappersModelsId2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_clients_id1_protocol_mappers_models_id2_(self, request: operations.PutRealmClientsId1ProtocolMappersModelsId2Request) -> operations.PutRealmClientsId1ProtocolMappersModelsId2Response:
        r"""Update the mapper"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientsId1ProtocolMappersModelsId2Request, base_url, '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "protocol_mapper_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientsId1ProtocolMappersModelsId2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    