/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Position - Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
 */
public class Position {
    /**
     * Position is a byte offset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("byteOffset")
    public String byteOffset;
    public Position withByteOffset(String byteOffset) {
        this.byteOffset = byteOffset;
        return this;
    }
    
    /**
     * A position that encapsulates an inner position and an index for the inner position. A ConcatPosition can be used by a reader of a source that encapsulates a set of other sources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concatPosition")
    public ConcatPosition concatPosition;
    public Position withConcatPosition(ConcatPosition concatPosition) {
        this.concatPosition = concatPosition;
        return this;
    }
    
    /**
     * Position is past all other positions. Also useful for the end position of an unbounded range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end")
    public Boolean end;
    public Position withEnd(Boolean end) {
        this.end = end;
        return this;
    }
    
    /**
     * Position is a string key, ordered lexicographically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;
    public Position withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Position is a record index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordIndex")
    public String recordIndex;
    public Position withRecordIndex(String recordIndex) {
        this.recordIndex = recordIndex;
        return this;
    }
    
    /**
     * CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shufflePosition")
    public String shufflePosition;
    public Position withShufflePosition(String shufflePosition) {
        this.shufflePosition = shufflePosition;
        return this;
    }
    
}
