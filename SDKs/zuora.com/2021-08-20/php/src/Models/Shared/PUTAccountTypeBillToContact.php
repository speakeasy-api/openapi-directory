<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PUTAccountTypeBillToContact - Container for custom fields of a Contact object.
 * 
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PUTAccountTypeBillToContact
{
    /**
     * First address line, 255 characters or less.
     * 
     * 
     * 
     * @var ?string $address1
     */
	#[\JMS\Serializer\Annotation\SerializedName('address1')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $address1 = null;
    
    /**
     * Second address line, 255 characters or less.
     * 
     * 
     * 
     * @var ?string $address2
     */
	#[\JMS\Serializer\Annotation\SerializedName('address2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $address2 = null;
    
    /**
     * City, 40 characters or less.
     * 
     * 
     * 
     * @var ?string $city
     */
	#[\JMS\Serializer\Annotation\SerializedName('city')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $city = null;
    
    /**
     * Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.
     * 
     * 
     * 
     * @var ?string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $country = null;
    
    /**
     * County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.
     * 
     * 
     * 
     * @var ?string $county
     */
	#[\JMS\Serializer\Annotation\SerializedName('county')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $county = null;
    
    /**
     * Fax phone number, 40 characters or less.
     * 
     * 
     * 
     * @var ?string $fax
     */
	#[\JMS\Serializer\Annotation\SerializedName('fax')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fax = null;
    
    /**
     * First name, 100 characters or less.
     * 
     * 
     * 
     * @var string $firstName
     */
	#[\JMS\Serializer\Annotation\SerializedName('firstName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $firstName;
    
    /**
     * Home phone number, 40 characters or less.
     * 
     * 
     * 
     * @var ?string $homePhone
     */
	#[\JMS\Serializer\Annotation\SerializedName('homePhone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $homePhone = null;
    
    /**
     * Last name, 100 characters or less.
     * 
     * 
     * 
     * @var string $lastName
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $lastName;
    
    /**
     * Mobile phone number, 40 characters or less.
     * 
     * 
     * 
     * @var ?string $mobilePhone
     */
	#[\JMS\Serializer\Annotation\SerializedName('mobilePhone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $mobilePhone = null;
    
    /**
     * Nickname for this contact
     * 
     * 
     * 
     * @var ?string $nickname
     */
	#[\JMS\Serializer\Annotation\SerializedName('nickname')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $nickname = null;
    
    /**
     * Other phone number, 40 characters or less.
     * 
     * 
     * 
     * @var ?string $otherPhone
     */
	#[\JMS\Serializer\Annotation\SerializedName('otherPhone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $otherPhone = null;
    
    /**
     * Possible values are: `Work`, `Mobile`, `Home`, `Other`.
     * 
     * 
     * 
     * @var ?string $otherPhoneType
     */
	#[\JMS\Serializer\Annotation\SerializedName('otherPhoneType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $otherPhoneType = null;
    
    /**
     * Personal email address, 80 characters or less.
     * 
     * 
     * 
     * @var ?string $personalEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('personalEmail')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $personalEmail = null;
    
    /**
     * State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora Tax requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.
     * 
     * 
     * 
     * @var ?string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $state = null;
    
    /**
     * If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
     * 
     * 
     * 
     * @var ?string $taxRegion
     */
	#[\JMS\Serializer\Annotation\SerializedName('taxRegion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $taxRegion = null;
    
    /**
     * Work email address, 80 characters or less.
     * 
     * 
     * 
     * @var ?string $workEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('workEmail')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $workEmail = null;
    
    /**
     * Work phone number, 40 characters or less.
     * 
     * 
     * 
     * @var ?string $workPhone
     */
	#[\JMS\Serializer\Annotation\SerializedName('workPhone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $workPhone = null;
    
    /**
     * Zip code, 20 characters or less.
     * 
     * 
     * 
     * @var ?string $zipCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('zipCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $zipCode = null;
    
	public function __construct()
	{
		$this->address1 = null;
		$this->address2 = null;
		$this->city = null;
		$this->country = null;
		$this->county = null;
		$this->fax = null;
		$this->firstName = "";
		$this->homePhone = null;
		$this->lastName = "";
		$this->mobilePhone = null;
		$this->nickname = null;
		$this->otherPhone = null;
		$this->otherPhoneType = null;
		$this->personalEmail = null;
		$this->state = null;
		$this->taxRegion = null;
		$this->workEmail = null;
		$this->workPhone = null;
		$this->zipCode = null;
	}
}
