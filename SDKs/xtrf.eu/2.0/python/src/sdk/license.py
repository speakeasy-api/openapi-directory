"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class License:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_license(self) -> operations.GetLicenseResponse:
        r"""Returns license content.
        Returns license content.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/license'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLicenseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetLicenseResult])
                res.get_license_result = out

        return res

    def refresh(self) -> operations.RefreshResponse:
        r"""Refreshes license content.
        Refreshes license content. This method returns OK immediately and license is refreshed asynchronously. It takes a while (usually a few seconds) for the license to be actually refreshed.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/license/refresh'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RefreshResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    