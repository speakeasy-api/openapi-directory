"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchCorrection:
    r"""Object with information of misspelled terms."""
    
    misspelled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('misspelled'), 'exclude': lambda f: f is None }})
    r"""Whether the term is misspelled (`true`) or not (`false`)."""  
    
class ProductSearchOperatorEnum(str, Enum):
    r"""Indicates how the search-engine dealt with the fullText when there is more than one word.
     * `and` - It means that the products contains all the words in the query.
     * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.
    """
    AND = 'and'
    OR = 'or'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearch:
    r"""List of products for the given query."""
    
    correction: Optional[ProductSearchCorrection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correction'), 'exclude': lambda f: f is None }})
    r"""Object with information of misspelled terms."""  
    fuzzy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fuzzy'), 'exclude': lambda f: f is None }})
    r"""Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string `auto` suggesting that the search-engine should set this value by itself."""  
    operator: Optional[ProductSearchOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operator'), 'exclude': lambda f: f is None }})
    r"""Indicates how the search-engine dealt with the fullText when there is more than one word.
     * `and` - It means that the products contains all the words in the query.
     * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.
    """  
    products: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""List of products"""  
    records_filtered: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordsFiltered'), 'exclude': lambda f: f is None }})
    r"""Total number of products."""  
    translated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translated'), 'exclude': lambda f: f is None }})
    r"""Whether the list of products was translated by the IS (`true`) or not (`false`)."""  
    