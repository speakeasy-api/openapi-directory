"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import pull_request_simple as shared_pull_request_simple
from ..shared import validation_error as shared_validation_error
from enum import Enum
from typing import Optional

class PullsListDirectionEnum(str, Enum):
    r"""The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`."""
    ASC = 'asc'
    DESC = 'desc'

class PullsListSortEnum(str, Enum):
    r"""What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month)."""
    CREATED = 'created'
    UPDATED = 'updated'
    POPULARITY = 'popularity'
    LONG_RUNNING = 'long-running'

class PullsListStateEnum(str, Enum):
    r"""Either `open`, `closed`, or `all` to filter by state."""
    OPEN = 'open'
    CLOSED = 'closed'
    ALL = 'all'


@dataclasses.dataclass
class PullsListRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    base: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'base', 'style': 'form', 'explode': True }})
    r"""Filter pulls by base branch name. Example: `gh-pages`."""  
    direction: Optional[PullsListDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`."""  
    head: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'head', 'style': 'form', 'explode': True }})
    r"""Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    sort: Optional[PullsListSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month)."""  
    state: Optional[PullsListStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Either `open`, `closed`, or `all` to filter by state."""  
    

@dataclasses.dataclass
class PullsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    pull_request_simples: Optional[list[shared_pull_request_simple.PullRequestSimple]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    