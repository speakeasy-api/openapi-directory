/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthorizerStatusEnum } from "./authorizerstatusenum";
import { Expose, Transform } from "class-transformer";

/**
 * The authorizer description.
 */
export class AuthorizerDescription extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerArn" })
  authorizerArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "authorizerFunctionArn" })
  authorizerFunctionArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "authorizerName" })
  authorizerName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "enableCachingForHttp" })
  enableCachingForHttp?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "signingDisabled" })
  signingDisabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: AuthorizerStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tokenKeyName" })
  tokenKeyName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tokenSigningPublicKeys" })
  tokenSigningPublicKeys?: Record<string, string>;
}
