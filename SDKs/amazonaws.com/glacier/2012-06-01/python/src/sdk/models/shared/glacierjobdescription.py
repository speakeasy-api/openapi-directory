"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import actioncode_enum as shared_actioncode_enum
from ..shared import inventoryretrievaljobdescription as shared_inventoryretrievaljobdescription
from ..shared import outputlocation as shared_outputlocation
from ..shared import selectparameters as shared_selectparameters
from ..shared import statuscode_enum as shared_statuscode_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GlacierJobDescription:
    r"""Contains the description of an Amazon S3 Glacier job."""
    
    action: Optional[shared_actioncode_enum.ActionCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Action'), 'exclude': lambda f: f is None }})  
    archive_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchiveId'), 'exclude': lambda f: f is None }})  
    archive_sha256_tree_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchiveSHA256TreeHash'), 'exclude': lambda f: f is None }})  
    archive_size_in_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchiveSizeInBytes'), 'exclude': lambda f: f is None }})  
    completed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Completed'), 'exclude': lambda f: f is None }})  
    completion_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletionDate'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate'), 'exclude': lambda f: f is None }})  
    inventory_retrieval_parameters: Optional[shared_inventoryretrievaljobdescription.InventoryRetrievalJobDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InventoryRetrievalParameters'), 'exclude': lambda f: f is None }})  
    inventory_size_in_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InventorySizeInBytes'), 'exclude': lambda f: f is None }})  
    job_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobDescription'), 'exclude': lambda f: f is None }})  
    job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobId'), 'exclude': lambda f: f is None }})  
    job_output_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobOutputPath'), 'exclude': lambda f: f is None }})  
    output_location: Optional[shared_outputlocation.OutputLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputLocation'), 'exclude': lambda f: f is None }})  
    retrieval_byte_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetrievalByteRange'), 'exclude': lambda f: f is None }})  
    select_parameters: Optional[shared_selectparameters.SelectParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelectParameters'), 'exclude': lambda f: f is None }})  
    sha256_tree_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SHA256TreeHash'), 'exclude': lambda f: f is None }})  
    sns_topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SNSTopic'), 'exclude': lambda f: f is None }})  
    status_code: Optional[shared_statuscode_enum.StatusCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusCode'), 'exclude': lambda f: f is None }})  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusMessage'), 'exclude': lambda f: f is None }})  
    tier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tier'), 'exclude': lambda f: f is None }})  
    vault_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VaultARN'), 'exclude': lambda f: f is None }})  
    