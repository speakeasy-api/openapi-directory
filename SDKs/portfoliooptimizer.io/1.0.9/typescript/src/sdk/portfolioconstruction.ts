/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PortfolioConstruction {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Investable Portfolio
   *
   * @remarks
   * Compute an investable portfolio as close as possible, in terms of assets weights, to a desired portfolio, taking into account:
   * * The desired assets weights
   * * The desired assets groups weights
   * * The desired maximum assets groups weights
   * * The prices of the assets
   * * The portfolio value
   * * The requirement to purchase some assets by round lots or by odd lots
   * * The possibility to purchase some assets by a fractional quantity of shares
   * * The requirement to purchase a minimum number of shares, or a minimum monetary value, for some assets
   *
   * References
   * * [Steiner, Andreas, Accuracy and Rounding in Portfolio Construction](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2261131)
   *
   */
  postPortfolioConstructionInvestable(
    req: operations.PostPortfolioConstructionInvestableRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioConstructionInvestableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPortfolioConstructionInvestableRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/portfolio/construction/investable";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioConstructionInvestableResponse =
        new operations.PostPortfolioConstructionInvestableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioConstructionInvestable200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioConstructionInvestable200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Mimicking Portfolio
   *
   * @remarks
   * Construct a portfolio as close as possible, in terms of returns, to a benchmark, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * References
   * * Konstantinos Benidis, Yiyong Feng, Daniel P. Palomar, Optimization Methods for Financial Index Tracking: From Theory to Practice, now publishers Inc (7 juin 2018)
   *
   */
  postPortfolioConstructionMimicking(
    req: operations.PostPortfolioConstructionMimickingRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioConstructionMimickingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPortfolioConstructionMimickingRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/portfolio/construction/mimicking";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioConstructionMimickingResponse =
        new operations.PostPortfolioConstructionMimickingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioConstructionMimicking200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioConstructionMimicking200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Random Portfolio
   *
   * @remarks
   * Construct one or several random portfolio(s), optionally subject to:
   * * Minimum and maximum weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * > Because of the nature of the endpoint, subsequent calls with the same input data will result in different output data.
   *
   * References
   * * [William Thornton Shaw, Monte Carlo Portfolio Optimization for General Investor Risk-Return Objectives and Arbitrary Return Distributions: A Solution for Long-Only Portfolios](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1680224)
   *
   */
  postPortfolioConstructionRandom(
    req: operations.PostPortfolioConstructionRandomRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioConstructionRandomResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPortfolioConstructionRandomRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/portfolio/construction/random";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioConstructionRandomResponse =
        new operations.PostPortfolioConstructionRandomResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioConstructionRandom200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioConstructionRandom200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
