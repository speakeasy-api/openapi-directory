"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import currency_enum as shared_currency_enum
from ..shared import ecommerceaddress as shared_ecommerceaddress
from ..shared import ecommercediscount as shared_ecommercediscount
from ..shared import ecommerceorderlineitem as shared_ecommerceorderlineitem
from ..shared import ecommerceorderstatus_enum as shared_ecommerceorderstatus_enum
from ..shared import linkedecommercecustomer as shared_linkedecommercecustomer
from ..shared import trackingitem as shared_trackingitem
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class EcommerceOrderFulfillmentStatusEnum(str, Enum):
    r"""Current fulfillment status of the order."""
    PENDING = 'pending'
    SHIPPED = 'shipped'
    PARTIAL = 'partial'
    DELIVERED = 'delivered'
    CANCELLED = 'cancelled'
    RETURNED = 'returned'
    UNKNOWN = 'unknown'

class EcommerceOrderPaymentStatusEnum(str, Enum):
    r"""Current payment status of the order."""
    PENDING = 'pending'
    AUTHORIZED = 'authorized'
    PAID = 'paid'
    PARTIAL = 'partial'
    REFUNDED = 'refunded'
    VOIDED = 'voided'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcommerceOrder:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""A unique identifier for an object."""  
    billing_address: Optional[shared_ecommerceaddress.EcommerceAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_address'), 'exclude': lambda f: f is None }})
    r"""An object representing a shipping or billing address."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the object was created."""  
    currency: Optional[shared_currency_enum.CurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)."""  
    customer: Optional[shared_linkedecommercecustomer.LinkedEcommerceCustomer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer'), 'exclude': lambda f: f is None }})
    r"""The customer this entity is linked to."""  
    discounts: Optional[list[shared_ecommercediscount.EcommerceDiscount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discounts'), 'exclude': lambda f: f is None }})  
    fulfillment_status: Optional[EcommerceOrderFulfillmentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfillment_status'), 'exclude': lambda f: f is None }})
    r"""Current fulfillment status of the order."""  
    line_items: Optional[list[shared_ecommerceorderlineitem.EcommerceOrderLineItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_items'), 'exclude': lambda f: f is None }})  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""Note for the order."""  
    order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_number'), 'exclude': lambda f: f is None }})
    r"""Order number, if any."""  
    payment_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_method'), 'exclude': lambda f: f is None }})
    r"""Payment method used for this order."""  
    payment_status: Optional[EcommerceOrderPaymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_status'), 'exclude': lambda f: f is None }})
    r"""Current payment status of the order."""  
    shipping_address: Optional[shared_ecommerceaddress.EcommerceAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_address'), 'exclude': lambda f: f is None }})
    r"""An object representing a shipping or billing address."""  
    shipping_cost: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_cost'), 'exclude': lambda f: f is None }})
    r"""Shipping cost, if any."""  
    status: Optional[shared_ecommerceorderstatus_enum.EcommerceOrderStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current status of the order."""  
    sub_total: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_total'), 'exclude': lambda f: f is None }})
    r"""Sub-total amount, normally before tax."""  
    total_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_amount'), 'exclude': lambda f: f is None }})
    r"""Total amount due."""  
    total_discount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_discount'), 'exclude': lambda f: f is None }})
    r"""Total discount, if any."""  
    total_tax: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_tax'), 'exclude': lambda f: f is None }})
    r"""Total tax, if any."""  
    tracking: Optional[list[shared_trackingitem.TrackingItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the object was last updated."""  
    