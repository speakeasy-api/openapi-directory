"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import errorhandlingconfig as shared_errorhandlingconfig
from ..shared import successresponsehandlingconfig as shared_successresponsehandlingconfig
from ..shared import writeoperationtype_enum as shared_writeoperationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SAPODataDestinationProperties:
    r"""The properties that are applied when using SAPOData as a flow destination"""
    
    object_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectPath') }})  
    error_handling_config: Optional[shared_errorhandlingconfig.ErrorHandlingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorHandlingConfig'), 'exclude': lambda f: f is None }})
    r"""The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details."""  
    id_field_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idFieldNames'), 'exclude': lambda f: f is None }})
    r"""A list of field names that can be used as an ID field when performing a write operation."""  
    success_response_handling_config: Optional[shared_successresponsehandlingconfig.SuccessResponseHandlingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('successResponseHandlingConfig'), 'exclude': lambda f: f is None }})  
    write_operation_type: Optional[shared_writeoperationtype_enum.WriteOperationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('writeOperationType'), 'exclude': lambda f: f is None }})
    r"""The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation."""  
    