"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudintegrationsv1alphacredential as shared_googlecloudintegrationsv1alphacredential
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudIntegrationsV1alphaAuthConfigCredentialTypeEnum(str, Enum):
    r"""Credential type of the encrypted credential."""
    CREDENTIAL_TYPE_UNSPECIFIED = 'CREDENTIAL_TYPE_UNSPECIFIED'
    USERNAME_AND_PASSWORD = 'USERNAME_AND_PASSWORD'
    API_KEY = 'API_KEY'
    OAUTH2_AUTHORIZATION_CODE = 'OAUTH2_AUTHORIZATION_CODE'
    OAUTH2_IMPLICIT = 'OAUTH2_IMPLICIT'
    OAUTH2_CLIENT_CREDENTIALS = 'OAUTH2_CLIENT_CREDENTIALS'
    OAUTH2_RESOURCE_OWNER_CREDENTIALS = 'OAUTH2_RESOURCE_OWNER_CREDENTIALS'
    JWT = 'JWT'
    AUTH_TOKEN = 'AUTH_TOKEN'
    SERVICE_ACCOUNT = 'SERVICE_ACCOUNT'
    CLIENT_CERTIFICATE_ONLY = 'CLIENT_CERTIFICATE_ONLY'
    OIDC_TOKEN = 'OIDC_TOKEN'

class GoogleCloudIntegrationsV1alphaAuthConfigStateEnum(str, Enum):
    r"""The status of the auth config."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    VALID = 'VALID'
    INVALID = 'INVALID'
    SOFT_DELETED = 'SOFT_DELETED'
    EXPIRED = 'EXPIRED'
    UNAUTHORIZED = 'UNAUTHORIZED'
    UNSUPPORTED = 'UNSUPPORTED'

class GoogleCloudIntegrationsV1alphaAuthConfigVisibilityEnum(str, Enum):
    r"""The visibility of the auth config."""
    AUTH_CONFIG_VISIBILITY_UNSPECIFIED = 'AUTH_CONFIG_VISIBILITY_UNSPECIFIED'
    PRIVATE = 'PRIVATE'
    CLIENT_VISIBLE = 'CLIENT_VISIBLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIntegrationsV1alphaAuthConfig:
    r"""The AuthConfig resource use to hold channels and connection config data."""
    
    certificate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificateId'), 'exclude': lambda f: f is None }})
    r"""Certificate id for client certificate"""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the auth config is created."""  
    creator_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorEmail'), 'exclude': lambda f: f is None }})
    r"""The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call."""  
    credential_type: Optional[GoogleCloudIntegrationsV1alphaAuthConfigCredentialTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentialType'), 'exclude': lambda f: f is None }})
    r"""Credential type of the encrypted credential."""  
    decrypted_credential: Optional[shared_googlecloudintegrationsv1alphacredential.GoogleCloudIntegrationsV1alphaCredential] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decryptedCredential'), 'exclude': lambda f: f is None }})
    r"""Defines parameters for a single, canonical credential."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the auth config."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The name of the auth config."""  
    encrypted_credential: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptedCredential'), 'exclude': lambda f: f is None }})
    r"""Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key."""  
    expiry_notification_duration: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryNotificationDuration'), 'exclude': lambda f: f is None }})
    r"""User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours."""  
    last_modifier_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifierEmail'), 'exclude': lambda f: f is None }})
    r"""The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Resource name of the SFDC instance projects/{project}/locations/{location}/authConfigs/{authConfig}."""  
    override_valid_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overrideValidTime'), 'exclude': lambda f: f is None }})
    r"""User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings."""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The reason / details of the current status."""  
    state: Optional[GoogleCloudIntegrationsV1alphaAuthConfigStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The status of the auth config."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the auth config is modified."""  
    valid_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validTime'), 'exclude': lambda f: f is None }})
    r"""The time until the auth config is valid. Empty or max value is considered the auth config won't expire."""  
    visibility: Optional[GoogleCloudIntegrationsV1alphaAuthConfigVisibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""The visibility of the auth config."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIntegrationsV1alphaAuthConfigInput:
    r"""The AuthConfig resource use to hold channels and connection config data."""
    
    certificate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificateId'), 'exclude': lambda f: f is None }})
    r"""Certificate id for client certificate"""  
    creator_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorEmail'), 'exclude': lambda f: f is None }})
    r"""The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call."""  
    credential_type: Optional[GoogleCloudIntegrationsV1alphaAuthConfigCredentialTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentialType'), 'exclude': lambda f: f is None }})
    r"""Credential type of the encrypted credential."""  
    decrypted_credential: Optional[shared_googlecloudintegrationsv1alphacredential.GoogleCloudIntegrationsV1alphaCredential] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decryptedCredential'), 'exclude': lambda f: f is None }})
    r"""Defines parameters for a single, canonical credential."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the auth config."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The name of the auth config."""  
    encrypted_credential: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptedCredential'), 'exclude': lambda f: f is None }})
    r"""Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key."""  
    expiry_notification_duration: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryNotificationDuration'), 'exclude': lambda f: f is None }})
    r"""User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours."""  
    last_modifier_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifierEmail'), 'exclude': lambda f: f is None }})
    r"""The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Resource name of the SFDC instance projects/{project}/locations/{location}/authConfigs/{authConfig}."""  
    override_valid_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overrideValidTime'), 'exclude': lambda f: f is None }})
    r"""User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings."""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The reason / details of the current status."""  
    state: Optional[GoogleCloudIntegrationsV1alphaAuthConfigStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The status of the auth config."""  
    valid_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validTime'), 'exclude': lambda f: f is None }})
    r"""The time until the auth config is valid. Empty or max value is considered the auth config won't expire."""  
    visibility: Optional[GoogleCloudIntegrationsV1alphaAuthConfigVisibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""The visibility of the auth config."""  
    