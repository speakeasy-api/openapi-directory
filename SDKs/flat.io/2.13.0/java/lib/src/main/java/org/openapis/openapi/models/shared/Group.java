/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Group - A group of users
 */
public class Group {
    /**
     * The creation date of the group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationDate")
    public OffsetDateTime creationDate;

    public Group withCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * The unique identifier of the group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Group withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The display name of the group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Group withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * If the group is related to an organization, this field will contain
     * the unique identifier of the organization
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public String organization;

    public Group withOrganization(String organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * `True` if the group is set in read-only
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readOnly")
    public Boolean readOnly;

    public Group withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }
    
    /**
     * The type of the group:
     * * `generic`: A group created by a Flat user
     * * `classTeachers`: A group created automaticaly by Flat that contains
     *   the teachers of a class
     * * `classStudents`: A group created automaticaly by Flat that contains
     *   the studnets of a class
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public GroupTypeEnum type;

    public Group withType(GroupTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The number of users in this group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usersCount")
    public Double usersCount;

    public Group withUsersCount(Double usersCount) {
        this.usersCount = usersCount;
        return this;
    }
    
    public Group(){}
}
