/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VolumeUserInfo - User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)
 */
public class VolumeUserInfo {
    /**
     * Timestamp when this volume was acquired by the user. (RFC 3339 UTC date-time format) Acquiring includes purchase, user upload, receiving family sharing, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acquiredTime")
    public String acquiredTime;

    public VolumeUserInfo withAcquiredTime(String acquiredTime) {
        this.acquiredTime = acquiredTime;
        return this;
    }
    
    /**
     * How this volume was acquired.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acquisitionType")
    public Integer acquisitionType;

    public VolumeUserInfo withAcquisitionType(Integer acquisitionType) {
        this.acquisitionType = acquisitionType;
        return this;
    }
    
    /**
     * Copy/Paste accounting information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("copy")
    public VolumeUserInfoCopy copy;

    public VolumeUserInfo withCopy(VolumeUserInfoCopy copy) {
        this.copy = copy;
        return this;
    }
    
    /**
     * Whether this volume is purchased, sample, pd download etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entitlementType")
    public Integer entitlementType;

    public VolumeUserInfo withEntitlementType(Integer entitlementType) {
        this.entitlementType = entitlementType;
        return this;
    }
    
    /**
     * Information on the ability to share with the family.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("familySharing")
    public VolumeUserInfoFamilySharing familySharing;

    public VolumeUserInfo withFamilySharing(VolumeUserInfoFamilySharing familySharing) {
        this.familySharing = familySharing;
        return this;
    }
    
    /**
     * Whether or not the user shared this volume with the family.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFamilySharedFromUser")
    public Boolean isFamilySharedFromUser;

    public VolumeUserInfo withIsFamilySharedFromUser(Boolean isFamilySharedFromUser) {
        this.isFamilySharedFromUser = isFamilySharedFromUser;
        return this;
    }
    
    /**
     * Whether or not the user received this volume through family sharing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFamilySharedToUser")
    public Boolean isFamilySharedToUser;

    public VolumeUserInfo withIsFamilySharedToUser(Boolean isFamilySharedToUser) {
        this.isFamilySharedToUser = isFamilySharedToUser;
        return this;
    }
    
    /**
     * Deprecated: Replaced by familySharing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFamilySharingAllowed")
    public Boolean isFamilySharingAllowed;

    public VolumeUserInfo withIsFamilySharingAllowed(Boolean isFamilySharingAllowed) {
        this.isFamilySharingAllowed = isFamilySharingAllowed;
        return this;
    }
    
    /**
     * Deprecated: Replaced by familySharing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFamilySharingDisabledByFop")
    public Boolean isFamilySharingDisabledByFop;

    public VolumeUserInfo withIsFamilySharingDisabledByFop(Boolean isFamilySharingDisabledByFop) {
        this.isFamilySharingDisabledByFop = isFamilySharingDisabledByFop;
        return this;
    }
    
    /**
     * Whether or not this volume is currently in "my books."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isInMyBooks")
    public Boolean isInMyBooks;

    public VolumeUserInfo withIsInMyBooks(Boolean isInMyBooks) {
        this.isInMyBooks = isInMyBooks;
        return this;
    }
    
    /**
     * Whether or not this volume was pre-ordered by the authenticated user making the request. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPreordered")
    public Boolean isPreordered;

    public VolumeUserInfo withIsPreordered(Boolean isPreordered) {
        this.isPreordered = isPreordered;
        return this;
    }
    
    /**
     * Whether or not this volume was purchased by the authenticated user making the request. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPurchased")
    public Boolean isPurchased;

    public VolumeUserInfo withIsPurchased(Boolean isPurchased) {
        this.isPurchased = isPurchased;
        return this;
    }
    
    /**
     * Whether or not this volume was user uploaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isUploaded")
    public Boolean isUploaded;

    public VolumeUserInfo withIsUploaded(Boolean isUploaded) {
        this.isUploaded = isUploaded;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readingPosition")
    public ReadingPosition readingPosition;

    public VolumeUserInfo withReadingPosition(ReadingPosition readingPosition) {
        this.readingPosition = readingPosition;
        return this;
    }
    
    /**
     * Period during this book is/was a valid rental.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rentalPeriod")
    public VolumeUserInfoRentalPeriod rentalPeriod;

    public VolumeUserInfo withRentalPeriod(VolumeUserInfoRentalPeriod rentalPeriod) {
        this.rentalPeriod = rentalPeriod;
        return this;
    }
    
    /**
     * Whether this book is an active or an expired rental.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rentalState")
    public String rentalState;

    public VolumeUserInfo withRentalState(String rentalState) {
        this.rentalState = rentalState;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("review")
    public Review review;

    public VolumeUserInfo withReview(Review review) {
        this.review = review;
        return this;
    }
    
    /**
     * Timestamp when this volume was last modified by a user action, such as a reading position update, volume purchase or writing a review. (RFC 3339 UTC date-time format).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated")
    public String updated;

    public VolumeUserInfo withUpdated(String updated) {
        this.updated = updated;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userUploadedVolumeInfo")
    public VolumeUserInfoUserUploadedVolumeInfo userUploadedVolumeInfo;

    public VolumeUserInfo withUserUploadedVolumeInfo(VolumeUserInfoUserUploadedVolumeInfo userUploadedVolumeInfo) {
        this.userUploadedVolumeInfo = userUploadedVolumeInfo;
        return this;
    }
    
    public VolumeUserInfo(){}
}
