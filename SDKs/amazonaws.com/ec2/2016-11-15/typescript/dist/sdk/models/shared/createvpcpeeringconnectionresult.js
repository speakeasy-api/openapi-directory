"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateVpcPeeringConnectionResult = exports.CreateVpcPeeringConnectionResultVpcPeeringConnection = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionTags = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Describes an IPv4 CIDR block.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet.prototype, "cidrBlock", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet = CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet;
/**
 * Describes an IPv6 CIDR block.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet.prototype, "ipv6CidrBlock", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet = CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet;
/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions.prototype, "allowDnsResolutionFromRemoteVpc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions.prototype, "allowEgressFromLocalClassicLinkToRemoteVpc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions.prototype, "allowEgressFromLocalVpcToRemoteClassicLink", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions = CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions;
/**
 * Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet,
        }),
        __metadata("design:type", Array)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo.prototype, "cidrBlockSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet,
        }),
        __metadata("design:type", Array)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo.prototype, "ipv6CidrBlockSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo.prototype, "peeringOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo.prototype, "vpcId", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo = CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo;
/**
 * Describes an IPv4 CIDR block.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet.prototype, "cidrBlock", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet = CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet;
/**
 * Describes an IPv6 CIDR block.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet.prototype, "ipv6CidrBlock", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet = CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet;
/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions.prototype, "allowDnsResolutionFromRemoteVpc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions.prototype, "allowEgressFromLocalClassicLinkToRemoteVpc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions.prototype, "allowEgressFromLocalVpcToRemoteClassicLink", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions = CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions;
/**
 * Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet,
        }),
        __metadata("design:type", Array)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo.prototype, "cidrBlockSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet,
        }),
        __metadata("design:type", Array)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo.prototype, "ipv6CidrBlockSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo.prototype, "peeringOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo.prototype, "vpcId", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo = CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo;
/**
 * The status of the VPC peering connection.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum;
(function (CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum) {
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["InitiatingRequest"] = "initiating-request";
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["PendingAcceptance"] = "pending-acceptance";
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["Active"] = "active";
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["Deleted"] = "deleted";
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["Rejected"] = "rejected";
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["Failed"] = "failed";
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["Expired"] = "expired";
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["Provisioning"] = "provisioning";
    CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum["Deleting"] = "deleting";
})(CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum || (exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = {}));
/**
 * The status of the VPC peering connection.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus.prototype, "message", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus = CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus;
/**
 * Describes a tag.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnectionTags = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnectionTags, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnectionTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnectionTags.prototype, "value", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnectionTags;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnectionTags = CreateVpcPeeringConnectionResultVpcPeeringConnectionTags;
/**
 * Information about the VPC peering connection.
 */
var CreateVpcPeeringConnectionResultVpcPeeringConnection = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResultVpcPeeringConnection, _super);
    function CreateVpcPeeringConnectionResultVpcPeeringConnection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnection.prototype, "accepterVpcInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnection.prototype, "expirationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnection.prototype, "requesterVpcInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnection.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpcPeeringConnectionResultVpcPeeringConnectionTags,
        }),
        __metadata("design:type", Array)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnection.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpcPeeringConnectionResultVpcPeeringConnection.prototype, "vpcPeeringConnectionId", void 0);
    return CreateVpcPeeringConnectionResultVpcPeeringConnection;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResultVpcPeeringConnection = CreateVpcPeeringConnectionResultVpcPeeringConnection;
/**
 * Success
 */
var CreateVpcPeeringConnectionResult = /** @class */ (function (_super) {
    __extends(CreateVpcPeeringConnectionResult, _super);
    function CreateVpcPeeringConnectionResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpcPeeringConnectionResultVpcPeeringConnection)
    ], CreateVpcPeeringConnectionResult.prototype, "vpcPeeringConnection", void 0);
    return CreateVpcPeeringConnectionResult;
}(utils_1.SpeakeasyBase));
exports.CreateVpcPeeringConnectionResult = CreateVpcPeeringConnectionResult;
