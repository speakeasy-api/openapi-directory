// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchDetectKeyPhrasesXAmzTargetEnum
type BatchDetectKeyPhrasesXAmzTargetEnum string

const (
	BatchDetectKeyPhrasesXAmzTargetEnumComprehend20171127BatchDetectKeyPhrases BatchDetectKeyPhrasesXAmzTargetEnum = "Comprehend_20171127.BatchDetectKeyPhrases"
)

func (e BatchDetectKeyPhrasesXAmzTargetEnum) ToPointer() *BatchDetectKeyPhrasesXAmzTargetEnum {
	return &e
}

func (e *BatchDetectKeyPhrasesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Comprehend_20171127.BatchDetectKeyPhrases":
		*e = BatchDetectKeyPhrasesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchDetectKeyPhrasesXAmzTargetEnum: %v", v)
	}
}

type BatchDetectKeyPhrasesRequest struct {
	BatchDetectKeyPhrasesRequest shared.BatchDetectKeyPhrasesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256            *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential               *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                     *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken            *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders            *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                   BatchDetectKeyPhrasesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchDetectKeyPhrasesResponse struct {
	// Success
	BatchDetectKeyPhrasesResponse *shared.BatchDetectKeyPhrasesResponse
	// BatchSizeLimitExceededException
	BatchSizeLimitExceededException interface{}
	ContentType                     string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// TextSizeLimitExceededException
	TextSizeLimitExceededException interface{}
	// UnsupportedLanguageException
	UnsupportedLanguageException interface{}
}
