/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class AddShareAddShareRequestBody {
    /**
     * An object defining what a not-logged-in visitor can do with the share contents
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessMode")
    public org.openapis.openapi.models.shared.AccessMode accessMode;
    public AddShareAddShareRequestBody withAccessMode(org.openapis.openapi.models.shared.AccessMode accessMode) {
        this.accessMode = accessMode;
        return this;
    }
    
    /**
     * Whether this share can be embedded within a web page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embed")
    public Boolean embed;
    public AddShareAddShareRequestBody withEmbed(Boolean embed) {
        this.embed = embed;
        return this;
    }
    
    /**
     * Expiration date for the share. If someone attempts to use the share after this date, they will receive an error that the share is not available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expiration")
    public OffsetDateTime expiration;
    public AddShareAddShareRequestBody withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }
    
    /**
     * Only used for **receive** shares. If true, uploads will be automatically placed into sub-folders of the folder, named after the chosen field on your form. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileDropCreateFolders")
    public Boolean fileDropCreateFolders;
    public AddShareAddShareRequestBody withFileDropCreateFolders(Boolean fileDropCreateFolders) {
        this.fileDropCreateFolders = fileDropCreateFolders;
        return this;
    }
    
    /**
     * Whether delivery receipts should be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasNotification")
    public Boolean hasNotification;
    public AddShareAddShareRequestBody withHasNotification(Boolean hasNotification) {
        this.hasNotification = hasNotification;
        return this;
    }
    
    /**
     * Whether someone can visit the share without following a personalized recipient link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPublic")
    public Boolean isPublic;
    public AddShareAddShareRequestBody withIsPublic(Boolean isPublic) {
        this.isPublic = isPublic;
        return this;
    }
    
    /**
     * The message to be included in email invitations for your recipients. Ignored if you have not also provided `recipients` and `messageSubject`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageBody")
    public String messageBody;
    public AddShareAddShareRequestBody withMessageBody(String messageBody) {
        this.messageBody = messageBody;
        return this;
    }
    
    /**
     * Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `messageBody`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageSubject")
    public String messageSubject;
    public AddShareAddShareRequestBody withMessageSubject(String messageSubject) {
        this.messageSubject = messageSubject;
        return this;
    }
    
    /**
     * A name for the share. This will be visible on the page that recipients visit. 
     */
    @JsonProperty("name")
    public String name;
    public AddShareAddShareRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Emails that will receive delivery receipts for this share. `hasNotification` must be **true** for delivery receipts will be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationEmails")
    public String[] notificationEmails;
    public AddShareAddShareRequestBody withNotificationEmails(String[] notificationEmails) {
        this.notificationEmails = notificationEmails;
        return this;
    }
    
    /**
     * Set a password for recipients to access the share. All recipients will use the same password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public AddShareAddShareRequestBody withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * People you want to invite to the share. **Note**: unless you also set the `messageSubject` and `messageBody` for the new share, invitation emails will not be sent to these recipients.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipients")
    public AddShareAddShareRequestBodyRecipients[] recipients;
    public AddShareAddShareRequestBody withRecipients(AddShareAddShareRequestBodyRecipients[] recipients) {
        this.recipients = recipients;
        return this;
    }
    
    /**
     * True if recipients must provide their email to view the share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requireEmail")
    public Boolean requireEmail;
    public AddShareAddShareRequestBody withRequireEmail(Boolean requireEmail) {
        this.requireEmail = requireEmail;
        return this;
    }
    
    /**
     * Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.
     * 
     * **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.
     * 
     * **send** shares may have multiple `resource` parameters. You can also leave this parameter null if you are planning to upload files to the send. If you are planning to upload files to the send that are not yet in your account, you will also need to call the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to finish the send operation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    public String[] resources;
    public AddShareAddShareRequestBody withResources(String[] resources) {
        this.resources = resources;
        return this;
    }
    
    /**
     * Use this only for **send** shares. Flag to indicate that you are going to upload additional files from your computer to the share. If this is **true**, you will also need to use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) call to finish setting up your share after the files are uploaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sendingLocalFiles")
    public Boolean sendingLocalFiles;
    public AddShareAddShareRequestBody withSendingLocalFiles(Boolean sendingLocalFiles) {
        this.sendingLocalFiles = sendingLocalFiles;
        return this;
    }
    
    /**
     * The type of share to create. See above for a description of each.
     */
    @JsonProperty("type")
    public AddShareAddShareRequestBodyTypeEnum type;
    public AddShareAddShareRequestBody withType(AddShareAddShareRequestBodyTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
