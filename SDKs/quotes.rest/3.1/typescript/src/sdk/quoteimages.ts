/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Create beatiful quote images or get one of the premade images. You need an API key to access this service.
 *
 * @see {@link https://theysaidso.com/api/quote#image} - Find out more about image
 */
export class QuoteImages {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a quote image. The user needs to be the owner of the quote image to be able to delete it.
   *
   */
  deleteQuoteImage(
    req: operations.DeleteQuoteImageRequest,
    security: operations.DeleteQuoteImageSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteQuoteImageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteQuoteImageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteQuoteImageSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteQuoteImageResponse =
        new operations.DeleteQuoteImageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a background image file. The user needs to be the owner of the background image to be able to delete it.
   *
   */
  deleteQuoteImageBackground(
    req: operations.DeleteQuoteImageBackgroundRequest,
    security: operations.DeleteQuoteImageBackgroundSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteQuoteImageBackgroundResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteQuoteImageBackgroundRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image/background";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteQuoteImageBackgroundSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteQuoteImageBackgroundResponse =
        new operations.DeleteQuoteImageBackgroundResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a font file. The user needs to be the owner of the font to be able to delete it.
   *
   */
  deleteQuoteImageFont(
    req: operations.DeleteQuoteImageFontRequest,
    security: operations.DeleteQuoteImageFontSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteQuoteImageFontResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteQuoteImageFontRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image/font";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteQuoteImageFontSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteQuoteImageFontResponse =
        new operations.DeleteQuoteImageFontResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a Quote image for a given id. Response can be an image file as a binary or a base64 encoded contents wrapped in json. `TODO`
   *
   */
  getQuoteImage(
    req: operations.GetQuoteImageRequest,
    security: operations.GetQuoteImageSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteImageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteImageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteImageSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteImageResponse =
        new operations.GetQuoteImageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Lists background images in your private collection.
   *
   */
  getQuoteImageBackgroundList(
    req: operations.GetQuoteImageBackgroundListRequest,
    security: operations.GetQuoteImageBackgroundListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteImageBackgroundListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteImageBackgroundListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/quote/image/background/list";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteImageBackgroundListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteImageBackgroundListResponse =
        new operations.GetQuoteImageBackgroundListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Searches for a background image with a given tag.
   *
   */
  getQuoteImageBackgroundSearch(
    req: operations.GetQuoteImageBackgroundSearchRequest,
    security: operations.GetQuoteImageBackgroundSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteImageBackgroundSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteImageBackgroundSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/quote/image/background/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteImageBackgroundSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteImageBackgroundSearchResponse =
        new operations.GetQuoteImageBackgroundSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Lists background images in your private collection.
   *
   */
  getQuoteImageFontList(
    req: operations.GetQuoteImageFontListRequest,
    security: operations.GetQuoteImageFontListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteImageFontListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteImageFontListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image/font/list";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteImageFontListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteImageFontListResponse =
        new operations.GetQuoteImageFontListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Searches for a font with a given tag.
   *
   */
  getQuoteImageFontSearch(
    req: operations.GetQuoteImageFontSearchRequest,
    security: operations.GetQuoteImageFontSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteImageFontSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteImageFontSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image/font/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteImageFontSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteImageFontSearchResponse =
        new operations.GetQuoteImageFontSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a Random Quote image. Optional `category` param determines the category of quote used in the image. Optional `author` param gets the quote image of a given author.
   *
   */
  getQuoteImageSearch(
    req: operations.GetQuoteImageSearchRequest,
    security: operations.GetQuoteImageSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteImageSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteImageSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteImageSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteImageSearchResponse =
        new operations.GetQuoteImageSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add an image for use later as a quote background image.
   */
  postQuoteImageBackground(
    req: operations.PostQuoteImageBackgroundRequestBody,
    security: operations.PostQuoteImageBackgroundSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteImageBackgroundResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteImageBackgroundRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image/background";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteImageBackgroundSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteImageBackgroundResponse =
        new operations.PostQuoteImageBackgroundResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add a tag to a given Image.
   */
  postQuoteImageBackgroundTagsAdd(
    req: operations.PostQuoteImageBackgroundTagsAddRequest,
    security: operations.PostQuoteImageBackgroundTagsAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteImageBackgroundTagsAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteImageBackgroundTagsAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/quote/image/background/tags/add";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteImageBackgroundTagsAddSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteImageBackgroundTagsAddResponse =
        new operations.PostQuoteImageBackgroundTagsAddResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove a tag from a given Image.
   */
  postQuoteImageBackgroundTagsRemove(
    req: operations.PostQuoteImageBackgroundTagsRemoveRequest,
    security: operations.PostQuoteImageBackgroundTagsRemoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteImageBackgroundTagsRemoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteImageBackgroundTagsRemoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/quote/image/background/tags/remove";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteImageBackgroundTagsRemoveSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteImageBackgroundTagsRemoveResponse =
        new operations.PostQuoteImageBackgroundTagsRemoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add a font file for use later in creating a quote image. This is essentially a `PUT` but not many clients handle PUT with binary stream i.e. a file, gracefully.
   */
  postQuoteImageFont(
    req: operations.PostQuoteImageFontRequestBody,
    security: operations.PostQuoteImageFontSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteImageFontResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteImageFontRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image/font";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteImageFontSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteImageFontResponse =
        new operations.PostQuoteImageFontResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add a tag to a given font.
   */
  postQuoteImageFontTagsAdd(
    req: operations.PostQuoteImageFontTagsAddRequest,
    security: operations.PostQuoteImageFontTagsAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteImageFontTagsAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteImageFontTagsAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/quote/image/font/tags/add";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteImageFontTagsAddSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteImageFontTagsAddResponse =
        new operations.PostQuoteImageFontTagsAddResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove a tag from a given Font.
   */
  postQuoteImageFontTagsRemove(
    req: operations.PostQuoteImageFontTagsRemoveRequest,
    security: operations.PostQuoteImageFontTagsRemoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteImageFontTagsRemoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteImageFontTagsRemoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/quote/image/font/tags/remove";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteImageFontTagsRemoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteImageFontTagsRemoveResponse =
        new operations.PostQuoteImageFontTagsRemoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new quote image for a given quote. Choose background colors/images , choose different font styles and generate a beautiful quote image. Did you just had a feeling of being a god or what?!
   *
   */
  putQuoteImage(
    req: operations.PutQuoteImageRequest,
    security: operations.PutQuoteImageSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutQuoteImageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutQuoteImageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/image";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutQuoteImageSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutQuoteImageResponse =
        new operations.PutQuoteImageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
