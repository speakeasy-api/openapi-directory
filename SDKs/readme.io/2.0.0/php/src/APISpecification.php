<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class APISpecification 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an API specification in ReadMe
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAPISpecificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAPISpecificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAPISpecificationResponse
     */
	public function deleteAPISpecification(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAPISpecificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAPISpecificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAPISpecificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api-specification/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAPISpecificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAPISpecificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get API specification metadata
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAPISpecificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAPISpecificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAPISpecificationResponse
     */
	public function getAPISpecification(
        \OpenAPI\OpenAPI\Models\Operations\GetAPISpecificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAPISpecificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAPISpecificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api-specification');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAPISpecificationRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAPISpecificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Update an API specification in ReadMe
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAPISpecificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAPISpecificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAPISpecificationResponse
     */
	public function updateAPISpecification(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAPISpecificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAPISpecificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAPISpecificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api-specification/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateAPISpecificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAPISpecificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadAPISpecificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadAPISpecificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadAPISpecificationResponse
     */
	public function uploadAPISpecification(
        \OpenAPI\OpenAPI\Models\Operations\UploadAPISpecificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadAPISpecificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadAPISpecificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api-specification');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadAPISpecificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}