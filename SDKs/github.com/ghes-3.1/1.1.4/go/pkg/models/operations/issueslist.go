// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// IssuesListFilterEnum - Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
type IssuesListFilterEnum string

const (
	IssuesListFilterEnumAssigned   IssuesListFilterEnum = "assigned"
	IssuesListFilterEnumCreated    IssuesListFilterEnum = "created"
	IssuesListFilterEnumMentioned  IssuesListFilterEnum = "mentioned"
	IssuesListFilterEnumSubscribed IssuesListFilterEnum = "subscribed"
	IssuesListFilterEnumRepos      IssuesListFilterEnum = "repos"
	IssuesListFilterEnumAll        IssuesListFilterEnum = "all"
)

func (e IssuesListFilterEnum) ToPointer() *IssuesListFilterEnum {
	return &e
}

func (e *IssuesListFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assigned":
		fallthrough
	case "created":
		fallthrough
	case "mentioned":
		fallthrough
	case "subscribed":
		fallthrough
	case "repos":
		fallthrough
	case "all":
		*e = IssuesListFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListFilterEnum: %v", v)
	}
}

// IssuesListSortEnum - What to sort results by. Can be either `created`, `updated`, `comments`.
type IssuesListSortEnum string

const (
	IssuesListSortEnumCreated  IssuesListSortEnum = "created"
	IssuesListSortEnumUpdated  IssuesListSortEnum = "updated"
	IssuesListSortEnumComments IssuesListSortEnum = "comments"
)

func (e IssuesListSortEnum) ToPointer() *IssuesListSortEnum {
	return &e
}

func (e *IssuesListSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "updated":
		fallthrough
	case "comments":
		*e = IssuesListSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListSortEnum: %v", v)
	}
}

// IssuesListStateEnum - Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
type IssuesListStateEnum string

const (
	IssuesListStateEnumOpen   IssuesListStateEnum = "open"
	IssuesListStateEnumClosed IssuesListStateEnum = "closed"
	IssuesListStateEnumAll    IssuesListStateEnum = "all"
)

func (e IssuesListStateEnum) ToPointer() *IssuesListStateEnum {
	return &e
}

func (e *IssuesListStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "all":
		*e = IssuesListStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListStateEnum: %v", v)
	}
}

type IssuesListRequest struct {
	Collab *bool `queryParam:"style=form,explode=true,name=collab"`
	// The direction to sort the results by.
	Direction *shared.DirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
	Filter *IssuesListFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// A list of comma separated label names. Example: `bug,ui,@high`
	Labels *string `queryParam:"style=form,explode=true,name=labels"`
	Orgs   *bool   `queryParam:"style=form,explode=true,name=orgs"`
	Owned  *bool   `queryParam:"style=form,explode=true,name=owned"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	Pulls   *bool  `queryParam:"style=form,explode=true,name=pulls"`
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *time.Time `queryParam:"style=form,explode=true,name=since"`
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort *IssuesListSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State *IssuesListStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type IssuesListResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	Issues []shared.Issue
	// Validation failed
	ValidationError *shared.ValidationError
}
