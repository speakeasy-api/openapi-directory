// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CountrySpecificationIdentifierSchemeTypeEnum - The scheme type of the identifier. Currently always "iso6523-actorid-upis"
type CountrySpecificationIdentifierSchemeTypeEnum string

const (
	CountrySpecificationIdentifierSchemeTypeEnumIso6523ActoridUpis CountrySpecificationIdentifierSchemeTypeEnum = "iso6523-actorid-upis"
)

func (e *CountrySpecificationIdentifierSchemeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "iso6523-actorid-upis":
		*e = CountrySpecificationIdentifierSchemeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CountrySpecificationIdentifierSchemeTypeEnum: %s", s)
	}
}

type CountrySpecificationIdentifier struct {
	// The centralized identifier to use for routing in test cases, if the "centralized" proprerty is true. May not always be available depending on the country and network.
	CentalizedIdentifierTest *string `json:"centalized_identifier_test,omitempty"`
	// Whether or not the identifier represents a centralized routing identifier. This is used in SG, AT and FR where all government invoices are routed to a central accesspoint with a single identifier. This field can only be present for routing identifiers.
	Centralized *bool `json:"centralized,omitempty"`
	// The centralized identifier to use for routing, if the "centralized" proprerty is true.
	CentralizedIdentifier *string `json:"centralized_identifier,omitempty"`
	// Identifier description.
	Description *string `json:"description,omitempty"`
	// The scheme of the identifier
	Scheme *string `json:"scheme,omitempty"`
	// The numerical version of the scheme of the identifier
	SchemeNumercial *string `json:"scheme_numercial,omitempty"`
	// The scheme type of the identifier. Currently always "iso6523-actorid-upis"
	SchemeType *CountrySpecificationIdentifierSchemeTypeEnum `json:"scheme_type,omitempty"`
}
