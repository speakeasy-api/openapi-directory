// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutFloatingIpsIDUpdateFloatingIPRequest struct {
	// New Description to set
	Description *string `json:"description,omitempty"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// New unique name to set
	Name *string `json:"name,omitempty"`
}

type PutFloatingIpsIDRequest struct {
	RequestBody *PutFloatingIpsIDUpdateFloatingIPRequest `request:"mediaType=application/json"`
	// ID of the Floating IP
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type PutFloatingIpsID200ApplicationJSONFloatingIPDNSPtr struct {
	// DNS pointer for the specific IP address
	DNSPtr string `json:"dns_ptr"`
	// Single IPv4 or IPv6 address
	IP string `json:"ip"`
}

// PutFloatingIpsID200ApplicationJSONFloatingIPHomeLocation - Location the Floating IP was created in. Routing is optimized for this Location.
type PutFloatingIpsID200ApplicationJSONFloatingIPHomeLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// PutFloatingIpsID200ApplicationJSONFloatingIPProtection - Protection configuration for the Resource
type PutFloatingIpsID200ApplicationJSONFloatingIPProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum - Type of the Floating IP
type PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum string

const (
	PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnumIpv4 PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum = "ipv4"
	PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnumIpv6 PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum = "ipv6"
)

func (e PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum) ToPointer() *PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum {
	return &e
}

func (e *PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum: %v", v)
	}
}

type PutFloatingIpsID200ApplicationJSONFloatingIP struct {
	// Whether the IP is blocked
	Blocked bool `json:"blocked"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Description of the Resource
	Description string `json:"description"`
	// Array of reverse DNS entries
	DNSPtr []PutFloatingIpsID200ApplicationJSONFloatingIPDNSPtr `json:"dns_ptr"`
	// Location the Floating IP was created in. Routing is optimized for this Location.
	HomeLocation PutFloatingIpsID200ApplicationJSONFloatingIPHomeLocation `json:"home_location"`
	// ID of the Resource
	ID int64 `json:"id"`
	// IP address
	IP string `json:"ip"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Protection configuration for the Resource
	Protection PutFloatingIpsID200ApplicationJSONFloatingIPProtection `json:"protection"`
	// ID of the Server the Floating IP is assigned to, null if it is not assigned at all
	Server int64 `json:"server"`
	// Type of the Floating IP
	Type PutFloatingIpsID200ApplicationJSONFloatingIPTypeEnum `json:"type"`
}

// PutFloatingIpsID200ApplicationJSON - The `floating_ip` key in the reply contains the modified Floating IP object with the new description
type PutFloatingIpsID200ApplicationJSON struct {
	FloatingIP PutFloatingIpsID200ApplicationJSONFloatingIP `json:"floating_ip"`
}

type PutFloatingIpsIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `floating_ip` key in the reply contains the modified Floating IP object with the new description
	PutFloatingIpsID200ApplicationJSONObject *PutFloatingIpsID200ApplicationJSON
}
