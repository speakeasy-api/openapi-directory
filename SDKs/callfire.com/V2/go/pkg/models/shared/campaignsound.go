// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CampaignSoundStatusEnum - A current status of a sound, available values: UPLOAD - uploading is in progress, RECORDING - recording of sound is in progress, ACTIVE - sound is ready, FAILED, ARCHIVED - sound was archived, SCRUBBED - sound was scrubbed
type CampaignSoundStatusEnum string

const (
	CampaignSoundStatusEnumUpload       CampaignSoundStatusEnum = "UPLOAD"
	CampaignSoundStatusEnumRecording    CampaignSoundStatusEnum = "RECORDING"
	CampaignSoundStatusEnumActive       CampaignSoundStatusEnum = "ACTIVE"
	CampaignSoundStatusEnumActiveSystem CampaignSoundStatusEnum = "ACTIVE_SYSTEM"
	CampaignSoundStatusEnumFailed       CampaignSoundStatusEnum = "FAILED"
	CampaignSoundStatusEnumArchived     CampaignSoundStatusEnum = "ARCHIVED"
	CampaignSoundStatusEnumScrubbed     CampaignSoundStatusEnum = "SCRUBBED"
)

func (e CampaignSoundStatusEnum) ToPointer() *CampaignSoundStatusEnum {
	return &e
}

func (e *CampaignSoundStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UPLOAD":
		fallthrough
	case "RECORDING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "ACTIVE_SYSTEM":
		fallthrough
	case "FAILED":
		fallthrough
	case "ARCHIVED":
		fallthrough
	case "SCRUBBED":
		*e = CampaignSoundStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CampaignSoundStatusEnum: %v", v)
	}
}

// CampaignSound - Represents a sound recording from account's sound library which can be used in different API operations
type CampaignSound struct {
	// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
	Created *int64 `json:"created,omitempty"`
	// True if the same sound file exists in a sound library of account
	Duplicate *bool `json:"duplicate,omitempty"`
	// An id of a sound file
	ID *int64 `json:"id,omitempty"`
	// Length of a sound in seconds
	LengthInSeconds *int `json:"lengthInSeconds,omitempty"`
	// A name of a sound file
	Name *string `json:"name,omitempty"`
	// A current status of a sound, available values: UPLOAD - uploading is in progress, RECORDING - recording of sound is in progress, ACTIVE - sound is ready, FAILED, ARCHIVED - sound was archived, SCRUBBED - sound was scrubbed
	Status *CampaignSoundStatusEnum `json:"status,omitempty"`
}
