/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EnterpriseCrmFrontendsEventbusProtoTaskConfig - The task configuration details. This is not the implementation of Task. There might be multiple TaskConfigs for the same Task.
 */
public class EnterpriseCrmFrontendsEventbusProtoTaskConfig {
    /**
     * Alert configurations on error rate, warning rate, number of runs, durations, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alertConfigs")
    public EnterpriseCrmEventbusProtoTaskAlertConfig[] alertConfigs;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withAlertConfigs(EnterpriseCrmEventbusProtoTaskAlertConfig[] alertConfigs) {
        this.alertConfigs = alertConfigs;
        return this;
    }
    
    /**
     * Auto-generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * The creator's email address. Auto-generated from the user's email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorEmail")
    public String creatorEmail;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withCreatorEmail(String creatorEmail) {
        this.creatorEmail = creatorEmail;
        return this;
    }
    
    /**
     * User-provided description intended to give more business context about the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * If this config contains a TypedTask, allow validation to succeed if an input is read from the output of another TypedTask whose output type is declared as a superclass of the requested input type. For instance, if the previous task declares an output of type Message, any task with this flag enabled will pass validation when attempting to read any proto Message type from the resultant Event parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableStrictTypeValidation")
    public Boolean disableStrictTypeValidation;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withDisableStrictTypeValidation(Boolean disableStrictTypeValidation) {
        this.disableStrictTypeValidation = disableStrictTypeValidation;
        return this;
    }
    
    /**
     * Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorCatcherId")
    public String errorCatcherId;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withErrorCatcherId(String errorCatcherId) {
        this.errorCatcherId = errorCatcherId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalTaskType")
    public EnterpriseCrmFrontendsEventbusProtoTaskConfigExternalTaskTypeEnum externalTaskType;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withExternalTaskType(EnterpriseCrmFrontendsEventbusProtoTaskConfigExternalTaskTypeEnum externalTaskType) {
        this.externalTaskType = externalTaskType;
        return this;
    }
    
    /**
     * Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failurePolicy")
    public EnterpriseCrmEventbusProtoFailurePolicy failurePolicy;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withFailurePolicy(EnterpriseCrmEventbusProtoFailurePolicy failurePolicy) {
        this.failurePolicy = failurePolicy;
        return this;
    }
    
    /**
     * The number of edges leading into this TaskConfig.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incomingEdgeCount")
    public Integer incomingEdgeCount;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withIncomingEdgeCount(Integer incomingEdgeCount) {
        this.incomingEdgeCount = incomingEdgeCount;
        return this;
    }
    
    /**
     * If set, overrides the option configured in the Task implementation class.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jsonValidationOption")
    public EnterpriseCrmFrontendsEventbusProtoTaskConfigJsonValidationOptionEnum jsonValidationOption;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withJsonValidationOption(EnterpriseCrmFrontendsEventbusProtoTaskConfigJsonValidationOptionEnum jsonValidationOption) {
        this.jsonValidationOption = jsonValidationOption;
        return this;
    }
    
    /**
     * User-provided label that is attached to this TaskConfig in the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    public String label;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withLabel(String label) {
        this.label = label;
        return this;
    }
    
    /**
     * Auto-generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModifiedTime")
    public String lastModifiedTime;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withLastModifiedTime(String lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }
    
    /**
     * The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextTasks")
    public EnterpriseCrmEventbusProtoNextTask[] nextTasks;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withNextTasks(EnterpriseCrmEventbusProtoNextTask[] nextTasks) {
        this.nextTasks = nextTasks;
        return this;
    }
    
    /**
     * The policy dictating the execution of the next set of tasks for the current task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextTasksExecutionPolicy")
    public EnterpriseCrmFrontendsEventbusProtoTaskConfigNextTasksExecutionPolicyEnum nextTasksExecutionPolicy;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withNextTasksExecutionPolicy(EnterpriseCrmFrontendsEventbusProtoTaskConfigNextTasksExecutionPolicyEnum nextTasksExecutionPolicy) {
        this.nextTasksExecutionPolicy = nextTasksExecutionPolicy;
        return this;
    }
    
    /**
     * The customized parameters the user can pass to this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    public java.util.Map<String, EnterpriseCrmFrontendsEventbusProtoParameterEntry> parameters;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withParameters(java.util.Map<String, EnterpriseCrmFrontendsEventbusProtoParameterEntry> parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * Represents two-dimensional positions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public EnterpriseCrmEventbusProtoCoordinate position;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withPosition(EnterpriseCrmEventbusProtoCoordinate position) {
        this.position = position;
        return this;
    }
    
    /**
     * Optional. Standard filter expression evaluated before execution. Independent of other conditions and tasks. Can be used to enable rollout. e.g. "rollout(5)" will only allow 5% of incoming traffic to task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("precondition")
    public String precondition;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withPrecondition(String precondition) {
        this.precondition = precondition;
        return this;
    }
    
    /**
     * Optional. User-provided label that is attached to precondition in the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preconditionLabel")
    public String preconditionLabel;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withPreconditionLabel(String preconditionLabel) {
        this.preconditionLabel = preconditionLabel;
        return this;
    }
    
    /**
     * Next available id: 4
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rollbackStrategy")
    public EnterpriseCrmFrontendsEventbusProtoRollbackStrategy rollbackStrategy;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withRollbackStrategy(EnterpriseCrmFrontendsEventbusProtoRollbackStrategy rollbackStrategy) {
        this.rollbackStrategy = rollbackStrategy;
        return this;
    }
    
    /**
     * Policy that dictates the behavior for the task after it completes successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("successPolicy")
    public EnterpriseCrmEventbusProtoSuccessPolicy successPolicy;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withSuccessPolicy(EnterpriseCrmEventbusProtoSuccessPolicy successPolicy) {
        this.successPolicy = successPolicy;
        return this;
    }
    
    /**
     * Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("synchronousCallFailurePolicy")
    public EnterpriseCrmEventbusProtoFailurePolicy synchronousCallFailurePolicy;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withSynchronousCallFailurePolicy(EnterpriseCrmEventbusProtoFailurePolicy synchronousCallFailurePolicy) {
        this.synchronousCallFailurePolicy = synchronousCallFailurePolicy;
        return this;
    }
    
    /**
     * Contains a task's metadata and associated information. Next available id: 7
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskEntity")
    public EnterpriseCrmFrontendsEventbusProtoTaskEntity taskEntity;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withTaskEntity(EnterpriseCrmFrontendsEventbusProtoTaskEntity taskEntity) {
        this.taskEntity = taskEntity;
        return this;
    }
    
    /**
     * The policy dictating the execution strategy of this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskExecutionStrategy")
    public EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskExecutionStrategyEnum taskExecutionStrategy;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withTaskExecutionStrategy(EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskExecutionStrategyEnum taskExecutionStrategy) {
        this.taskExecutionStrategy = taskExecutionStrategy;
        return this;
    }
    
    /**
     * The name for the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskName")
    public String taskName;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withTaskName(String taskName) {
        this.taskName = taskName;
        return this;
    }
    
    /**
     * REQUIRED: the identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_number`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskNumber")
    public String taskNumber;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withTaskNumber(String taskNumber) {
        this.taskNumber = taskNumber;
        return this;
    }
    
    /**
     * A string template that allows user to configure task parameters (with either literal default values or tokens which will be resolved at execution time) for the task. It will eventually replace the old "parameters" field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskSpec")
    public String taskSpec;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withTaskSpec(String taskSpec) {
        this.taskSpec = taskSpec;
        return this;
    }
    
    /**
     * Used to define task-template name if task is of type task-template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskTemplateName")
    public String taskTemplateName;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withTaskTemplateName(String taskTemplateName) {
        this.taskTemplateName = taskTemplateName;
        return this;
    }
    
    /**
     * Defines the type of the task
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskType")
    public EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskTypeEnum taskType;

    public EnterpriseCrmFrontendsEventbusProtoTaskConfig withTaskType(EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskTypeEnum taskType) {
        this.taskType = taskType;
        return this;
    }
    
    public EnterpriseCrmFrontendsEventbusProtoTaskConfig(){}
}
