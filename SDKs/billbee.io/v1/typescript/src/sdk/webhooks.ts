/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Webhooks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes an existing WebHook registration.
   */
  webHookManagementDelete(
    req: operations.WebHookManagementDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.WebHookManagementDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebHookManagementDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/webhooks/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebHookManagementDeleteResponse =
        new operations.WebHookManagementDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webHookManagementDelete200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.webHookManagementDelete200TextJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes all existing WebHook registrations.
   */
  webHookManagementDeleteAll(
    config?: AxiosRequestConfig
  ): Promise<operations.WebHookManagementDeleteAllResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/webhooks";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebHookManagementDeleteAllResponse =
        new operations.WebHookManagementDeleteAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webHookManagementDeleteAll200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.webHookManagementDeleteAll200TextJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets all registered WebHooks for a given user.
   */
  webHookManagementGet(
    config?: AxiosRequestConfig
  ): Promise<operations.WebHookManagementGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/webhooks";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebHookManagementGetResponse =
        new operations.WebHookManagementGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rechnungsdruckWebAppControllersApiWebHookApiModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.rechnungsdruckWebAppControllersApiWebHookApiModels =
              utils.objectToClass(
                httpRes?.data,
                shared.RechnungsdruckWebAppControllersApiWebHookApiModel,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.rechnungsdruckWebAppControllersApiWebHookApiModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.rechnungsdruckWebAppControllersApiWebHookApiModels =
              utils.objectToClass(
                httpRes?.data,
                shared.RechnungsdruckWebAppControllersApiWebHookApiModel,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of all known filters you can use to register webhooks
   */
  webHookManagementGetFilters(
    config?: AxiosRequestConfig
  ): Promise<operations.WebHookManagementGetFiltersResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/webhooks/filters";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebHookManagementGetFiltersResponse =
        new operations.WebHookManagementGetFiltersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webHookManagementGetFilters200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.webHookManagementGetFilters200TextJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Looks up a registered WebHook with the given {id} for a given user.
   */
  webHookManagementLookup(
    req: operations.WebHookManagementLookupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.WebHookManagementLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebHookManagementLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/webhooks/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebHookManagementLookupResponse =
        new operations.WebHookManagementLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rechnungsdruckWebAppControllersApiWebHookApiModel =
              utils.objectToClass(
                httpRes?.data,
                shared.RechnungsdruckWebAppControllersApiWebHookApiModel
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.rechnungsdruckWebAppControllersApiWebHookApiModel =
              utils.objectToClass(
                httpRes?.data,
                shared.RechnungsdruckWebAppControllersApiWebHookApiModel
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Registers a new WebHook for a given user.
   */
  webHookManagementPost(
    req: shared.RechnungsdruckWebAppControllersApiWebHookApiModel,
    config?: AxiosRequestConfig
  ): Promise<operations.WebHookManagementPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.RechnungsdruckWebAppControllersApiWebHookApiModel(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/webhooks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebHookManagementPostResponse =
        new operations.WebHookManagementPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rechnungsdruckWebAppControllersApiWebHookApiModel =
              utils.objectToClass(
                httpRes?.data,
                shared.RechnungsdruckWebAppControllersApiWebHookApiModel
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.rechnungsdruckWebAppControllersApiWebHookApiModel =
              utils.objectToClass(
                httpRes?.data,
                shared.RechnungsdruckWebAppControllersApiWebHookApiModel
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing WebHook registration.
   */
  webHookManagementPut(
    req: operations.WebHookManagementPutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.WebHookManagementPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebHookManagementPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/webhooks/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "rechnungsdruckWebAppControllersApiWebHookApiModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebHookManagementPutResponse =
        new operations.WebHookManagementPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rechnungsdruckWebAppControllersApiWebHookApiModel =
              utils.objectToClass(
                httpRes?.data,
                shared.RechnungsdruckWebAppControllersApiWebHookApiModel
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.rechnungsdruckWebAppControllersApiWebHookApiModel =
              utils.objectToClass(
                httpRes?.data,
                shared.RechnungsdruckWebAppControllersApiWebHookApiModel
              );
          }
          break;
      }

      return res;
    });
  }
}
