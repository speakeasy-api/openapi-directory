// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RevokedCertificateRevocationReasonEnum - The reason the Certificate was revoked.
type RevokedCertificateRevocationReasonEnum string

const (
	RevokedCertificateRevocationReasonEnumRevocationReasonUnspecified    RevokedCertificateRevocationReasonEnum = "REVOCATION_REASON_UNSPECIFIED"
	RevokedCertificateRevocationReasonEnumKeyCompromise                  RevokedCertificateRevocationReasonEnum = "KEY_COMPROMISE"
	RevokedCertificateRevocationReasonEnumCertificateAuthorityCompromise RevokedCertificateRevocationReasonEnum = "CERTIFICATE_AUTHORITY_COMPROMISE"
	RevokedCertificateRevocationReasonEnumAffiliationChanged             RevokedCertificateRevocationReasonEnum = "AFFILIATION_CHANGED"
	RevokedCertificateRevocationReasonEnumSuperseded                     RevokedCertificateRevocationReasonEnum = "SUPERSEDED"
	RevokedCertificateRevocationReasonEnumCessationOfOperation           RevokedCertificateRevocationReasonEnum = "CESSATION_OF_OPERATION"
	RevokedCertificateRevocationReasonEnumCertificateHold                RevokedCertificateRevocationReasonEnum = "CERTIFICATE_HOLD"
	RevokedCertificateRevocationReasonEnumPrivilegeWithdrawn             RevokedCertificateRevocationReasonEnum = "PRIVILEGE_WITHDRAWN"
	RevokedCertificateRevocationReasonEnumAttributeAuthorityCompromise   RevokedCertificateRevocationReasonEnum = "ATTRIBUTE_AUTHORITY_COMPROMISE"
)

func (e RevokedCertificateRevocationReasonEnum) ToPointer() *RevokedCertificateRevocationReasonEnum {
	return &e
}

func (e *RevokedCertificateRevocationReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REVOCATION_REASON_UNSPECIFIED":
		fallthrough
	case "KEY_COMPROMISE":
		fallthrough
	case "CERTIFICATE_AUTHORITY_COMPROMISE":
		fallthrough
	case "AFFILIATION_CHANGED":
		fallthrough
	case "SUPERSEDED":
		fallthrough
	case "CESSATION_OF_OPERATION":
		fallthrough
	case "CERTIFICATE_HOLD":
		fallthrough
	case "PRIVILEGE_WITHDRAWN":
		fallthrough
	case "ATTRIBUTE_AUTHORITY_COMPROMISE":
		*e = RevokedCertificateRevocationReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RevokedCertificateRevocationReasonEnum: %v", v)
	}
}

// RevokedCertificate - Describes a revoked Certificate.
type RevokedCertificate struct {
	// The resource name for the Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.
	Certificate *string `json:"certificate,omitempty"`
	// The serial number of the Certificate.
	HexSerialNumber *string `json:"hexSerialNumber,omitempty"`
	// The reason the Certificate was revoked.
	RevocationReason *RevokedCertificateRevocationReasonEnum `json:"revocationReason,omitempty"`
}
