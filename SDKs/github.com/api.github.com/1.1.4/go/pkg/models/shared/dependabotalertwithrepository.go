// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DependabotAlertWithRepositoryDependencyScopeEnum - The execution scope of the vulnerable dependency.
type DependabotAlertWithRepositoryDependencyScopeEnum string

const (
	DependabotAlertWithRepositoryDependencyScopeEnumDevelopment DependabotAlertWithRepositoryDependencyScopeEnum = "development"
	DependabotAlertWithRepositoryDependencyScopeEnumRuntime     DependabotAlertWithRepositoryDependencyScopeEnum = "runtime"
)

func (e *DependabotAlertWithRepositoryDependencyScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "development":
		fallthrough
	case "runtime":
		*e = DependabotAlertWithRepositoryDependencyScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotAlertWithRepositoryDependencyScopeEnum: %s", s)
	}
}

// DependabotAlertWithRepositoryDependency - Details for the vulnerable dependency.
type DependabotAlertWithRepositoryDependency struct {
	// The full path to the dependency manifest file, relative to the root of the repository.
	ManifestPath *string `json:"manifest_path,omitempty"`
	// Details for the vulnerable package.
	Package *DependabotAlertPackage `json:"package,omitempty"`
	// The execution scope of the vulnerable dependency.
	Scope *DependabotAlertWithRepositoryDependencyScopeEnum `json:"scope,omitempty"`
}

// DependabotAlertWithRepositoryDismissedReasonEnum - The reason that the alert was dismissed.
type DependabotAlertWithRepositoryDismissedReasonEnum string

const (
	DependabotAlertWithRepositoryDismissedReasonEnumFixStarted    DependabotAlertWithRepositoryDismissedReasonEnum = "fix_started"
	DependabotAlertWithRepositoryDismissedReasonEnumInaccurate    DependabotAlertWithRepositoryDismissedReasonEnum = "inaccurate"
	DependabotAlertWithRepositoryDismissedReasonEnumNoBandwidth   DependabotAlertWithRepositoryDismissedReasonEnum = "no_bandwidth"
	DependabotAlertWithRepositoryDismissedReasonEnumNotUsed       DependabotAlertWithRepositoryDismissedReasonEnum = "not_used"
	DependabotAlertWithRepositoryDismissedReasonEnumTolerableRisk DependabotAlertWithRepositoryDismissedReasonEnum = "tolerable_risk"
)

func (e *DependabotAlertWithRepositoryDismissedReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fix_started":
		fallthrough
	case "inaccurate":
		fallthrough
	case "no_bandwidth":
		fallthrough
	case "not_used":
		fallthrough
	case "tolerable_risk":
		*e = DependabotAlertWithRepositoryDismissedReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotAlertWithRepositoryDismissedReasonEnum: %s", s)
	}
}

// DependabotAlertWithRepositoryStateEnum - The state of the Dependabot alert.
type DependabotAlertWithRepositoryStateEnum string

const (
	DependabotAlertWithRepositoryStateEnumDismissed DependabotAlertWithRepositoryStateEnum = "dismissed"
	DependabotAlertWithRepositoryStateEnumFixed     DependabotAlertWithRepositoryStateEnum = "fixed"
	DependabotAlertWithRepositoryStateEnumOpen      DependabotAlertWithRepositoryStateEnum = "open"
)

func (e *DependabotAlertWithRepositoryStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dismissed":
		fallthrough
	case "fixed":
		fallthrough
	case "open":
		*e = DependabotAlertWithRepositoryStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotAlertWithRepositoryStateEnum: %s", s)
	}
}

// DependabotAlertWithRepository - A Dependabot alert.
type DependabotAlertWithRepository struct {
	// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	CreatedAt time.Time `json:"created_at"`
	// Details for the vulnerable dependency.
	Dependency DependabotAlertWithRepositoryDependency `json:"dependency"`
	// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	DismissedAt time.Time `json:"dismissed_at"`
	// A GitHub user.
	DismissedBy NullableSimpleUser `json:"dismissed_by"`
	// An optional comment associated with the alert's dismissal.
	DismissedComment string `json:"dismissed_comment"`
	// The reason that the alert was dismissed.
	DismissedReason DependabotAlertWithRepositoryDismissedReasonEnum `json:"dismissed_reason"`
	// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	FixedAt time.Time `json:"fixed_at"`
	// The GitHub URL of the alert resource.
	HTMLURL string `json:"html_url"`
	// The security alert number.
	Number int64 `json:"number"`
	// A GitHub repository.
	Repository SimpleRepository `json:"repository"`
	// Details for the GitHub Security Advisory.
	SecurityAdvisory DependabotAlertSecurityAdvisory `json:"security_advisory"`
	// Details pertaining to one vulnerable version range for the advisory.
	SecurityVulnerability DependabotAlertSecurityVulnerability `json:"security_vulnerability"`
	// The state of the Dependabot alert.
	State DependabotAlertWithRepositoryStateEnum `json:"state"`
	// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	UpdatedAt time.Time `json:"updated_at"`
	// The REST API URL of the alert resource.
	URL string `json:"url"`
}
