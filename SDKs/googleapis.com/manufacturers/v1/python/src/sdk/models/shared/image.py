"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ImageStatusEnum(str, Enum):
    r"""The status of the image. @OutputOnly"""
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    PENDING_PROCESSING = 'PENDING_PROCESSING'
    PENDING_CRAWL = 'PENDING_CRAWL'
    OK = 'OK'
    ROBOTED = 'ROBOTED'
    XROBOTED = 'XROBOTED'
    CRAWL_ERROR = 'CRAWL_ERROR'
    PROCESSING_ERROR = 'PROCESSING_ERROR'
    DECODING_ERROR = 'DECODING_ERROR'
    TOO_BIG = 'TOO_BIG'
    CRAWL_SKIPPED = 'CRAWL_SKIPPED'
    HOSTLOADED = 'HOSTLOADED'
    HTTP_404 = 'HTTP_404'

class ImageTypeEnum(str, Enum):
    r"""The type of the image, i.e., crawled or uploaded. @OutputOnly"""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CRAWLED = 'CRAWLED'
    UPLOADED = 'UPLOADED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Image:
    r"""An image."""
    
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl'), 'exclude': lambda f: f is None }})
    r"""The URL of the image. For crawled images, this is the provided URL. For uploaded images, this is a serving URL from Google if the image has been processed successfully."""  
    status: Optional[ImageStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the image. @OutputOnly"""  
    type: Optional[ImageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the image, i.e., crawled or uploaded. @OutputOnly"""  
    