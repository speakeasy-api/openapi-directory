/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CreateTokenRequestBody extends SpeakeasyBase {
  /**
   * The unique identifier string for each client. This value should come from the persisted result of the <a>RegisterClient</a> API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId: string;

  /**
   * A secret string generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientSecret" })
  clientSecret: string;

  /**
   * The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * Used only when calling this API for the device code grant type. This short-term code is used to identify this authentication attempt. This should come from an in-memory reference to the result of the <a>StartDeviceAuthorization</a> API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceCode" })
  deviceCode?: string;

  /**
   * <p>Supports grant types for the authorization code, refresh token, and device code request. For device code requests, specify the following value:</p> <p> <code>urn:ietf:params:oauth:grant-type:<i>device_code</i> </code> </p> <p>For information about how to obtain the device code, see the <a>StartDeviceAuthorization</a> topic.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "grantType" })
  grantType: string;

  /**
   * The location of the application that will receive the authorization code. Users authorize the service to send the request to this location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirectUri" })
  redirectUri?: string;

  /**
   * <p>Currently, <code>refreshToken</code> is not yet implemented and is not supported. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see <i>Considerations for Using this Guide</i> in the <a href="https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html">IAM Identity Center OIDC API Reference</a>.</p> <p>The token used to obtain an access token in the event that the access token is invalid or expired.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refreshToken" })
  refreshToken?: string;

  /**
   * The list of scopes that is defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: string[];
}

export class CreateTokenRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateTokenRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateTokenResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * AuthorizationPendingException
   */
  @SpeakeasyMetadata()
  authorizationPendingException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createTokenResponse?: shared.CreateTokenResponse;

  /**
   * ExpiredTokenException
   */
  @SpeakeasyMetadata()
  expiredTokenException?: any;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidClientException
   */
  @SpeakeasyMetadata()
  invalidClientException?: any;

  /**
   * InvalidGrantException
   */
  @SpeakeasyMetadata()
  invalidGrantException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * InvalidScopeException
   */
  @SpeakeasyMetadata()
  invalidScopeException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * SlowDownException
   */
  @SpeakeasyMetadata()
  slowDownException?: any;

  /**
   * UnauthorizedClientException
   */
  @SpeakeasyMetadata()
  unauthorizedClientException?: any;

  /**
   * UnsupportedGrantTypeException
   */
  @SpeakeasyMetadata()
  unsupportedGrantTypeException?: any;
}
