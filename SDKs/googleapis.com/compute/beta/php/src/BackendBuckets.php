<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class BackendBuckets 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a key for validating requests with signed URLs for this backend bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeyResponse
     */
	public function computeBackendBucketsAddSignedUrlKey(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "signedUrlKey", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsAddSignedUrlKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified BackendBucket resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteResponse
     */
	public function computeBackendBucketsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{backendBucket}', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a key for validating requests with signed URLs for this backend bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeyResponse
     */
	public function computeBackendBucketsDeleteSignedUrlKey(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsDeleteSignedUrlKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified BackendBucket resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetResponse
     */
	public function computeBackendBucketsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{backendBucket}', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendBucket = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendBucket', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicyResponse
     */
	public function computeBackendBucketsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a BackendBucket resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertResponse
     */
	public function computeBackendBucketsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendBucket", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of BackendBucket resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListResponse
     */
	public function computeBackendBucketsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendBucketList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendBucketList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchResponse
     */
	public function computeBackendBucketsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{backendBucket}', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendBucket1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the edge security policy for the specified backend bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicyResponse
     */
	public function computeBackendBucketsSetEdgeSecurityPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{backendBucket}/setEdgeSecurityPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetEdgeSecurityPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicyResponse
     */
	public function computeBackendBucketsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsResponse
     */
	public function computeBackendBucketsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified BackendBucket resource with the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateResponse
     */
	public function computeBackendBucketsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendBuckets/{backendBucket}', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendBucket1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendBucketsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}