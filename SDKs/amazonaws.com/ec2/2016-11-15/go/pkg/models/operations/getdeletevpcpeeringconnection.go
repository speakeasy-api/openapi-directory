// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteVpcPeeringConnectionActionEnum
type GETDeleteVpcPeeringConnectionActionEnum string

const (
	GETDeleteVpcPeeringConnectionActionEnumDeleteVpcPeeringConnection GETDeleteVpcPeeringConnectionActionEnum = "DeleteVpcPeeringConnection"
)

func (e *GETDeleteVpcPeeringConnectionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteVpcPeeringConnection":
		*e = GETDeleteVpcPeeringConnectionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteVpcPeeringConnectionActionEnum: %s", s)
	}
}

// GETDeleteVpcPeeringConnectionVersionEnum
type GETDeleteVpcPeeringConnectionVersionEnum string

const (
	GETDeleteVpcPeeringConnectionVersionEnumTwoThousandAndSixteen1115 GETDeleteVpcPeeringConnectionVersionEnum = "2016-11-15"
)

func (e *GETDeleteVpcPeeringConnectionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDeleteVpcPeeringConnectionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteVpcPeeringConnectionVersionEnum: %s", s)
	}
}

type GETDeleteVpcPeeringConnectionQueryParams struct {
	Action GETDeleteVpcPeeringConnectionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun  *bool                                    `queryParam:"style=form,explode=true,name=DryRun"`
	Version GETDeleteVpcPeeringConnectionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the VPC peering connection.
	VpcPeeringConnectionID string `queryParam:"style=form,explode=true,name=VpcPeeringConnectionId"`
}

type GETDeleteVpcPeeringConnectionHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteVpcPeeringConnectionRequest struct {
	QueryParams GETDeleteVpcPeeringConnectionQueryParams
	Headers     GETDeleteVpcPeeringConnectionHeaders
}

type GETDeleteVpcPeeringConnectionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
