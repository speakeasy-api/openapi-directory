"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleCloudDialogflowV2SpeechToTextConfig = exports.GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The speech model used in speech to text. `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as `USE_ENHANCED`. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error.
 */
var GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum;
(function (GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum) {
    GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum["SpeechModelVariantUnspecified"] = "SPEECH_MODEL_VARIANT_UNSPECIFIED";
    GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum["UseBestAvailable"] = "USE_BEST_AVAILABLE";
    GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum["UseStandard"] = "USE_STANDARD";
    GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum["UseEnhanced"] = "USE_ENHANCED";
})(GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum = exports.GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum || (exports.GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariantEnum = {}));
/**
 * Configures speech transcription for ConversationProfile.
 */
var GoogleCloudDialogflowV2SpeechToTextConfig = /** @class */ (function (_super) {
    __extends(GoogleCloudDialogflowV2SpeechToTextConfig, _super);
    function GoogleCloudDialogflowV2SpeechToTextConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "model" }),
        __metadata("design:type", String)
    ], GoogleCloudDialogflowV2SpeechToTextConfig.prototype, "model", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "speechModelVariant" }),
        __metadata("design:type", String)
    ], GoogleCloudDialogflowV2SpeechToTextConfig.prototype, "speechModelVariant", void 0);
    return GoogleCloudDialogflowV2SpeechToTextConfig;
}(utils_1.SpeakeasyBase));
exports.GoogleCloudDialogflowV2SpeechToTextConfig = GoogleCloudDialogflowV2SpeechToTextConfig;
