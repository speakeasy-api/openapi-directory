/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CustomerPostalAddress } from "./customerpostaladdress";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Successful response
 */
export class Customer extends SpeakeasyBase {
  /**
   * The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alternateEmail" })
  alternateEmail?: string;

  /**
   * The customer's creation time (Readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customerCreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  customerCreationTime?: Date;

  /**
   * The customer's primary domain name string. Do not include the `www` prefix when creating a new customer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customerDomain" })
  customerDomain?: string;

  /**
   * ETag of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * The unique ID for the customer's Google Workspace account. (Readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Identifies the resource as a customer. Value: `admin#directory#customer`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  /**
   * The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phoneNumber" })
  phoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "postalAddress" })
  @Type(() => CustomerPostalAddress)
  postalAddress?: CustomerPostalAddress;
}
