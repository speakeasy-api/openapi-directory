/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EnterpriseCrmEventbusProtoDoubleArray } from "./enterprisecrmeventbusprotodoublearray";
import { EnterpriseCrmEventbusProtoIntArray } from "./enterprisecrmeventbusprotointarray";
import { EnterpriseCrmEventbusProtoStringArray } from "./enterprisecrmeventbusprotostringarray";
import { Expose, Type } from "class-transformer";

/**
 * Used for define type for values. Currently supported value types include int, string, double, array, and any proto message.
 */
export class EnterpriseCrmEventbusProtoValueType extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "booleanValue" })
  booleanValue?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "doubleArray" })
  @Type(() => EnterpriseCrmEventbusProtoDoubleArray)
  doubleArray?: EnterpriseCrmEventbusProtoDoubleArray;

  @SpeakeasyMetadata()
  @Expose({ name: "doubleValue" })
  doubleValue?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "intArray" })
  @Type(() => EnterpriseCrmEventbusProtoIntArray)
  intArray?: EnterpriseCrmEventbusProtoIntArray;

  @SpeakeasyMetadata()
  @Expose({ name: "intValue" })
  intValue?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "protoValue" })
  protoValue?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "stringArray" })
  @Type(() => EnterpriseCrmEventbusProtoStringArray)
  stringArray?: EnterpriseCrmEventbusProtoStringArray;

  @SpeakeasyMetadata()
  @Expose({ name: "stringValue" })
  stringValue?: string;
}
