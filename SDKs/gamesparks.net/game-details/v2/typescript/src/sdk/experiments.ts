/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Experiment Rest Controller
 */
export class Experiments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * createExperiment
   */
  createExperimentUsingPOST(
    req: operations.CreateExperimentUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateExperimentUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateExperimentUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/manage/experiments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "experimentModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateExperimentUsingPOSTResponse =
        new operations.CreateExperimentUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.experimentModel = utils.objectToClass(
              httpRes?.data,
              shared.ExperimentModel
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * deleteExperiment
   */
  deleteExperimentUsingDELETE(
    req: operations.DELETEExperimentUsingDELETERequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETEExperimentUsingDELETEResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETEExperimentUsingDELETERequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/manage/experiments/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETEExperimentUsingDELETEResponse =
        new operations.DELETEExperimentUsingDELETEResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * doActionExperiment
   */
  doActionExperimentUsingPOST(
    req: operations.DoActionExperimentUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DoActionExperimentUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoActionExperimentUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/manage/experiments/{id}/{action}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoActionExperimentUsingPOSTResponse =
        new operations.DoActionExperimentUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.experimentModel = utils.objectToClass(
              httpRes?.data,
              shared.ExperimentModel
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getExperiment
   */
  getExperimentUsingGET(
    req: operations.GETExperimentUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETExperimentUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETExperimentUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/manage/experiments/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETExperimentUsingGETResponse =
        new operations.GETExperimentUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.experimentModel = utils.objectToClass(
              httpRes?.data,
              shared.ExperimentModel
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getExperiments
   */
  getExperimentsUsingGET(
    req: operations.GETExperimentsUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETExperimentsUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETExperimentsUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/manage/experiments",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETExperimentsUsingGETResponse =
        new operations.GETExperimentsUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.experimentModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.experimentModels = utils.objectToClass(
              httpRes?.data,
              shared.ExperimentModel,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * updateExperiment
   */
  updateExperimentUsingPUT(
    req: operations.UpdateExperimentUsingPUTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateExperimentUsingPUTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateExperimentUsingPUTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/manage/experiments/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "experimentModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateExperimentUsingPUTResponse =
        new operations.UpdateExperimentUsingPUTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.experimentModel = utils.objectToClass(
              httpRes?.data,
              shared.ExperimentModel
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
