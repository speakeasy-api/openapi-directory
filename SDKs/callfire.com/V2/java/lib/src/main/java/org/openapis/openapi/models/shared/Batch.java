/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Batch - A batch represents a group of contacts which can be dialed or texted via call/text broadcast
 */
public class Batch {
    /**
     * An id of broadcast which batch belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("broadcastId")
    public Long broadcastId;

    public Batch withBroadcastId(Long broadcastId) {
        this.broadcastId = broadcastId;
        return this;
    }
    
    /**
     * A date and time when batch was created, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    public Long created;

    public Batch withCreated(Long created) {
        this.created = created;
        return this;
    }
    
    /**
     * An enabled batch. If batch is disabled its contacts remain undialed/untexted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public Batch withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * A id of a batch
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public Batch withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * A batch name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Batch withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A number of contacts remaining undialed/untexted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remaining")
    public Integer remaining;

    public Batch withRemaining(Integer remaining) {
        this.remaining = remaining;
        return this;
    }
    
    /**
     * A total number of contacts in batch
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Integer size;

    public Batch withSize(Integer size) {
        this.size = size;
        return this;
    }
    
    /**
     * A status of batch (NEW, VALIDATING, ERRORS, SOURCE_ERROR, ACTIVE). NEW - batch is queued for validation; VALIDATING - batch is currently validating; ERRORS - batch is processed, some validation errors occurred; SOURCE_ERROR - if contact source is contact list in CallFire system and it has an error; ACTIVE - batch is processed and ready
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public BatchStatusEnum status;

    public Batch withStatus(BatchStatusEnum status) {
        this.status = status;
        return this;
    }
    
    public Batch(){}
}
