/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum SearchEverywhereIncludeEnum {
  Projects = "projects",
  Documents = "documents",
  Strings = "strings",
}

export class SearchEverywhereRequest extends SpeakeasyBase {
  /**
   * Search in these entities. Current oprions are projects, documents, strings. Can be multiple. When not provided, we'll search through all entities.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include[]",
  })
  include?: SearchEverywhereIncludeEnum[];

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Search query term
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query: string;
}

export class SearchEverywhereResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Search result for multiple entities and paging
   */
  @SpeakeasyMetadata()
  searchEverywhereResult?: shared.SearchEverywhereResult;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
