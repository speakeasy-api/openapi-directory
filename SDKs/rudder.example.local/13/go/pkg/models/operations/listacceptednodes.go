// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListAcceptedNodesQueryParams struct {
	// Boolean operator to use between each  `where` criteria.
	Composition *shared.NodeCompositionEnum `queryParam:"style=form,explode=true,name=composition"`
	// Level of information to include from the node inventory. Some base levels are defined (**minimal**, **default**, **full**). You can add fields you want to a base level by adding them to the list, possible values are keys from json answer. If you don't provide a base level, they will be added to `default` level, so if you only want os details, use `minimal,os` as the value for this parameter.
	// * **minimal** includes: `id`, `hostname` and `status`
	// * **default** includes **minimal** plus `architectureDescription`, `description`, `ipAddresses`, `lastRunDate`, `lastInventoryDate`, `machine`, `os`, `managementTechnology`, `policyServerId`, `properties` (be careful! Only node own properties, if you also need inherited properties, look at the dedicated `/nodes/{id}/inheritedProperties` endpoint), `policyMode `, `ram` and `timezone`
	// * **full** includes: **default** plus `accounts`, `bios`, `controllers`, `environmentVariables`, `fileSystems`, `managementTechnologyDetails`, `memories`, `networkInterfaces`, `ports`, `processes`, `processors`, `slots`, `software`, `sound`, `storage`, `videos` and `virtualMachines`
	Include *string `queryParam:"style=form,explode=true,name=include"`
	// The criterion you want to find for your nodes. Replaces the `where`, `composition` and `select` parameters in a single parameter.
	Query *shared.NodeQuery `queryParam:"serialization=json,name=query"`
	// What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.
	Select *string `queryParam:"style=form,explode=true,name=select"`
	// The criterion you want to find for your nodes
	Where []shared.NodeWhere `queryParam:"serialization=json,name=where"`
}

type ListAcceptedNodesRequest struct {
	QueryParams ListAcceptedNodesQueryParams
}

// ListAcceptedNodes200ApplicationJSONActionEnum - The id of the action
type ListAcceptedNodes200ApplicationJSONActionEnum string

const (
	ListAcceptedNodes200ApplicationJSONActionEnumListAcceptedNodes ListAcceptedNodes200ApplicationJSONActionEnum = "listAcceptedNodes"
)

func (e *ListAcceptedNodes200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "listAcceptedNodes":
		*e = ListAcceptedNodes200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAcceptedNodes200ApplicationJSONActionEnum: %s", s)
	}
}

// ListAcceptedNodes200ApplicationJSONData - Information about the nodes
type ListAcceptedNodes200ApplicationJSONData struct {
	Nodes []shared.NodeFull `json:"nodes"`
}

// ListAcceptedNodes200ApplicationJSONResultEnum - Result of the request
type ListAcceptedNodes200ApplicationJSONResultEnum string

const (
	ListAcceptedNodes200ApplicationJSONResultEnumSuccess ListAcceptedNodes200ApplicationJSONResultEnum = "success"
	ListAcceptedNodes200ApplicationJSONResultEnumError   ListAcceptedNodes200ApplicationJSONResultEnum = "error"
)

func (e *ListAcceptedNodes200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ListAcceptedNodes200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAcceptedNodes200ApplicationJSONResultEnum: %s", s)
	}
}

// ListAcceptedNodes200ApplicationJSON - Nodes
type ListAcceptedNodes200ApplicationJSON struct {
	// The id of the action
	Action ListAcceptedNodes200ApplicationJSONActionEnum `json:"action"`
	// Information about the nodes
	Data ListAcceptedNodes200ApplicationJSONData `json:"data"`
	// Result of the request
	Result ListAcceptedNodes200ApplicationJSONResultEnum `json:"result"`
}

type ListAcceptedNodesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Nodes
	ListAcceptedNodes200ApplicationJSONObject *ListAcceptedNodes200ApplicationJSON
}
