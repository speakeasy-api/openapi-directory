<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class WirelessProfiles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new camera wireless profile for this network.
     * 
     * Creates a new camera wireless profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse
     */
	public function createNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing camera wireless profile for this network.
     * 
     * Delete an existing camera wireless profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse
     */
	public function deleteNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns wireless profile assigned to the given camera
     * 
     * Returns wireless profile assigned to the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse
     */
	public function getDeviceCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraWirelessProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single camera wireless profile.
     * 
     * Retrieve a single camera wireless profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse
     */
	public function getNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the camera wireless profiles for this network.
     * 
     * List the camera wireless profiles for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse
     */
	public function getNetworkCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraWirelessProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign wireless profiles to the given camera
     * 
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse
     */
	public function updateDeviceCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraWirelessProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing camera wireless profile in this network.
     * 
     * Update an existing camera wireless profile in this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse
     */
	public function updateNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}