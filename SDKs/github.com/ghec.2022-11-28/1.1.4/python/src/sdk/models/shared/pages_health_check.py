"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PagesHealthCheckAltDomain:
    
    caa_error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caa_error'), 'exclude': lambda f: f is None }})  
    dns_resolves: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_resolves'), 'exclude': lambda f: f is None }})  
    enforces_https: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforces_https'), 'exclude': lambda f: f is None }})  
    has_cname_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_cname_record'), 'exclude': lambda f: f is None }})  
    has_mx_records_present: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_mx_records_present'), 'exclude': lambda f: f is None }})  
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})  
    https_error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('https_error'), 'exclude': lambda f: f is None }})  
    is_a_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_a_record'), 'exclude': lambda f: f is None }})  
    is_apex_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_apex_domain'), 'exclude': lambda f: f is None }})  
    is_cloudflare_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_cloudflare_ip'), 'exclude': lambda f: f is None }})  
    is_cname_to_fastly: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_cname_to_fastly'), 'exclude': lambda f: f is None }})  
    is_cname_to_github_user_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_cname_to_github_user_domain'), 'exclude': lambda f: f is None }})  
    is_cname_to_pages_dot_github_dot_com: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_cname_to_pages_dot_github_dot_com'), 'exclude': lambda f: f is None }})  
    is_fastly_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_fastly_ip'), 'exclude': lambda f: f is None }})  
    is_https_eligible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_https_eligible'), 'exclude': lambda f: f is None }})  
    is_non_github_pages_ip_present: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_non_github_pages_ip_present'), 'exclude': lambda f: f is None }})  
    is_old_ip_address: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_old_ip_address'), 'exclude': lambda f: f is None }})  
    is_pages_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_pages_domain'), 'exclude': lambda f: f is None }})  
    is_pointed_to_github_pages_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_pointed_to_github_pages_ip'), 'exclude': lambda f: f is None }})  
    is_proxied: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_proxied'), 'exclude': lambda f: f is None }})  
    is_served_by_pages: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_served_by_pages'), 'exclude': lambda f: f is None }})  
    is_valid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_valid'), 'exclude': lambda f: f is None }})  
    is_valid_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_valid_domain'), 'exclude': lambda f: f is None }})  
    nameservers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameservers'), 'exclude': lambda f: f is None }})  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})  
    responds_to_https: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responds_to_https'), 'exclude': lambda f: f is None }})  
    should_be_a_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('should_be_a_record'), 'exclude': lambda f: f is None }})  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PagesHealthCheckDomain:
    
    caa_error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caa_error'), 'exclude': lambda f: f is None }})  
    dns_resolves: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_resolves'), 'exclude': lambda f: f is None }})  
    enforces_https: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforces_https'), 'exclude': lambda f: f is None }})  
    has_cname_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_cname_record'), 'exclude': lambda f: f is None }})  
    has_mx_records_present: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_mx_records_present'), 'exclude': lambda f: f is None }})  
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})  
    https_error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('https_error'), 'exclude': lambda f: f is None }})  
    is_a_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_a_record'), 'exclude': lambda f: f is None }})  
    is_apex_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_apex_domain'), 'exclude': lambda f: f is None }})  
    is_cloudflare_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_cloudflare_ip'), 'exclude': lambda f: f is None }})  
    is_cname_to_fastly: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_cname_to_fastly'), 'exclude': lambda f: f is None }})  
    is_cname_to_github_user_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_cname_to_github_user_domain'), 'exclude': lambda f: f is None }})  
    is_cname_to_pages_dot_github_dot_com: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_cname_to_pages_dot_github_dot_com'), 'exclude': lambda f: f is None }})  
    is_fastly_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_fastly_ip'), 'exclude': lambda f: f is None }})  
    is_https_eligible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_https_eligible'), 'exclude': lambda f: f is None }})  
    is_non_github_pages_ip_present: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_non_github_pages_ip_present'), 'exclude': lambda f: f is None }})  
    is_old_ip_address: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_old_ip_address'), 'exclude': lambda f: f is None }})  
    is_pages_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_pages_domain'), 'exclude': lambda f: f is None }})  
    is_pointed_to_github_pages_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_pointed_to_github_pages_ip'), 'exclude': lambda f: f is None }})  
    is_proxied: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_proxied'), 'exclude': lambda f: f is None }})  
    is_served_by_pages: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_served_by_pages'), 'exclude': lambda f: f is None }})  
    is_valid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_valid'), 'exclude': lambda f: f is None }})  
    is_valid_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_valid_domain'), 'exclude': lambda f: f is None }})  
    nameservers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameservers'), 'exclude': lambda f: f is None }})  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})  
    responds_to_https: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responds_to_https'), 'exclude': lambda f: f is None }})  
    should_be_a_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('should_be_a_record'), 'exclude': lambda f: f is None }})  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PagesHealthCheck:
    r"""Pages Health Check Status"""
    
    alt_domain: Optional[PagesHealthCheckAltDomain] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alt_domain'), 'exclude': lambda f: f is None }})  
    domain: Optional[PagesHealthCheckDomain] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})  
    