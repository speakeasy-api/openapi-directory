// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNamesNearEmbedEnum - A flag to indicate whether to embed the corresponding 'feature' into each matching name
type GetNamesNearEmbedEnum int64

const (
	GetNamesNearEmbedEnumZero GetNamesNearEmbedEnum = 0
	GetNamesNearEmbedEnumOne  GetNamesNearEmbedEnum = 1
)

func (e GetNamesNearEmbedEnum) ToPointer() *GetNamesNearEmbedEnum {
	return &e
}

func (e *GetNamesNearEmbedEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetNamesNearEmbedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNearEmbedEnum: %v", v)
	}
}

// GetNamesNearOutputFormatEnum - The format of the output.
type GetNamesNearOutputFormatEnum string

const (
	GetNamesNearOutputFormatEnumJSON GetNamesNearOutputFormatEnum = "json"
	GetNamesNearOutputFormatEnumXML  GetNamesNearOutputFormatEnum = "xml"
	GetNamesNearOutputFormatEnumKml  GetNamesNearOutputFormatEnum = "kml"
	GetNamesNearOutputFormatEnumCsv  GetNamesNearOutputFormatEnum = "csv"
)

func (e GetNamesNearOutputFormatEnum) ToPointer() *GetNamesNearOutputFormatEnum {
	return &e
}

func (e *GetNamesNearOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "csv":
		*e = GetNamesNearOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNearOutputFormatEnum: %v", v)
	}
}

// GetNamesNearOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries.
type GetNamesNearOutputSrsEnum int64

const (
	GetNamesNearOutputSrsEnumFourThousandThreeHundredAndTwentySix   GetNamesNearOutputSrsEnum = 4326
	GetNamesNearOutputSrsEnumFourThousandTwoHundredAndSixtyNine     GetNamesNearOutputSrsEnum = 4269
	GetNamesNearOutputSrsEnumThreeThousandAndFive                   GetNamesNearOutputSrsEnum = 3005
	GetNamesNearOutputSrsEnumThreeThousandEightHundredAndFiftySeven GetNamesNearOutputSrsEnum = 3857
	GetNamesNearOutputSrsEnumTwentySixThousandNineHundredAndSeven   GetNamesNearOutputSrsEnum = 26907
	GetNamesNearOutputSrsEnumTwentySixThousandNineHundredAndEight   GetNamesNearOutputSrsEnum = 26908
	GetNamesNearOutputSrsEnumTwentySixThousandNineHundredAndNine    GetNamesNearOutputSrsEnum = 26909
	GetNamesNearOutputSrsEnumTwentySixThousandNineHundredAndTen     GetNamesNearOutputSrsEnum = 26910
	GetNamesNearOutputSrsEnumTwentySixThousandNineHundredAndEleven  GetNamesNearOutputSrsEnum = 26911
)

func (e GetNamesNearOutputSrsEnum) ToPointer() *GetNamesNearOutputSrsEnum {
	return &e
}

func (e *GetNamesNearOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 4326:
		fallthrough
	case 4269:
		fallthrough
	case 3005:
		fallthrough
	case 3857:
		fallthrough
	case 26907:
		fallthrough
	case 26908:
		fallthrough
	case 26909:
		fallthrough
	case 26910:
		fallthrough
	case 26911:
		*e = GetNamesNearOutputSrsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNearOutputSrsEnum: %v", v)
	}
}

// GetNamesNearOutputStyleEnum - A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
type GetNamesNearOutputStyleEnum string

const (
	GetNamesNearOutputStyleEnumSummary GetNamesNearOutputStyleEnum = "summary"
	GetNamesNearOutputStyleEnumDetail  GetNamesNearOutputStyleEnum = "detail"
)

func (e GetNamesNearOutputStyleEnum) ToPointer() *GetNamesNearOutputStyleEnum {
	return &e
}

func (e *GetNamesNearOutputStyleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "summary":
		fallthrough
	case "detail":
		*e = GetNamesNearOutputStyleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNearOutputStyleEnum: %v", v)
	}
}

// GetNamesNearSortByEnum - The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
type GetNamesNearSortByEnum string

const (
	GetNamesNearSortByEnumName         GetNamesNearSortByEnum = "name"
	GetNamesNearSortByEnumFeatureType  GetNamesNearSortByEnum = "featureType"
	GetNamesNearSortByEnumDecisionDate GetNamesNearSortByEnum = "decisionDate"
)

func (e GetNamesNearSortByEnum) ToPointer() *GetNamesNearSortByEnum {
	return &e
}

func (e *GetNamesNearSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		fallthrough
	case "featureType":
		fallthrough
	case "decisionDate":
		*e = GetNamesNearSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNearSortByEnum: %v", v)
	}
}

type GetNamesNearRequest struct {
	// A radius (in kilometres) around the centre point.
	Distance string `queryParam:"style=form,explode=true,name=distance"`
	// A flag to indicate whether to embed the corresponding 'feature' into each matching name
	Embed *GetNamesNearEmbedEnum `queryParam:"style=form,explode=true,name=embed"`
	// A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
	FeatureCategory *string `queryParam:"style=form,explode=true,name=featureCategory"`
	// A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
	FeatureClass *string `queryParam:"style=form,explode=true,name=featureClass"`
	// A geographic coordinate specifying the centre point of the search area.  Must be specified as a string of the form 'longitude,latitude' (WGS84).  e.g. -120,51
	FeaturePoint string `queryParam:"style=form,explode=true,name=featurePoint"`
	// A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
	FeatureType *string `queryParam:"style=form,explode=true,name=featureType"`
	// The number of search results to return (1-200)
	ItemsPerPage *int64 `queryParam:"style=form,explode=true,name=itemsPerPage"`
	// The format of the output.
	OutputFormat GetNamesNearOutputFormatEnum `queryParam:"style=form,explode=true,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries.
	OutputSRS *GetNamesNearOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
	OutputStyle *GetNamesNearOutputStyleEnum `queryParam:"style=form,explode=true,name=outputStyle"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SortBy *GetNamesNearSortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// The index of the first record to be returned (>= 1)
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
}

type GetNamesNearResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
