// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesAddStoreSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ReleasesAddStoreRequestBody - The release information.
type ReleasesAddStoreRequestBody struct {
	// Unique id of the release destination
	ID string `json:"id"`
}

type ReleasesAddStoreRequest struct {
	// The release information.
	RequestBody ReleasesAddStoreRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release
	ReleaseID int64 `pathParam:"style=simple,explode=false,name=release_id"`
}

type ReleasesAddStore404ApplicationJSONCodeEnum string

const (
	ReleasesAddStore404ApplicationJSONCodeEnumBadRequest          ReleasesAddStore404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesAddStore404ApplicationJSONCodeEnumConflict            ReleasesAddStore404ApplicationJSONCodeEnum = "Conflict"
	ReleasesAddStore404ApplicationJSONCodeEnumNotAcceptable       ReleasesAddStore404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesAddStore404ApplicationJSONCodeEnumNotFound            ReleasesAddStore404ApplicationJSONCodeEnum = "NotFound"
	ReleasesAddStore404ApplicationJSONCodeEnumInternalServerError ReleasesAddStore404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesAddStore404ApplicationJSONCodeEnumUnauthorized        ReleasesAddStore404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesAddStore404ApplicationJSONCodeEnumTooManyRequests     ReleasesAddStore404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesAddStore404ApplicationJSONCodeEnum) ToPointer() *ReleasesAddStore404ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesAddStore404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesAddStore404ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAddStore404ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesAddStore404ApplicationJSON - Release not found
type ReleasesAddStore404ApplicationJSON struct {
	Code    ReleasesAddStore404ApplicationJSONCodeEnum `json:"code"`
	Message string                                     `json:"message"`
}

type ReleasesAddStore400ApplicationJSONCodeEnum string

const (
	ReleasesAddStore400ApplicationJSONCodeEnumBadRequest          ReleasesAddStore400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesAddStore400ApplicationJSONCodeEnumConflict            ReleasesAddStore400ApplicationJSONCodeEnum = "Conflict"
	ReleasesAddStore400ApplicationJSONCodeEnumNotAcceptable       ReleasesAddStore400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesAddStore400ApplicationJSONCodeEnumNotFound            ReleasesAddStore400ApplicationJSONCodeEnum = "NotFound"
	ReleasesAddStore400ApplicationJSONCodeEnumInternalServerError ReleasesAddStore400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesAddStore400ApplicationJSONCodeEnumUnauthorized        ReleasesAddStore400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesAddStore400ApplicationJSONCodeEnumTooManyRequests     ReleasesAddStore400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesAddStore400ApplicationJSONCodeEnum) ToPointer() *ReleasesAddStore400ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesAddStore400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesAddStore400ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAddStore400ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesAddStore400ApplicationJSON - Failure
type ReleasesAddStore400ApplicationJSON struct {
	Code    ReleasesAddStore400ApplicationJSONCodeEnum `json:"code"`
	Message string                                     `json:"message"`
}

// ReleasesAddStore201ApplicationJSON - Created
type ReleasesAddStore201ApplicationJSON struct {
	// Unique id for the release destination
	ID string `json:"id"`
}

type ReleasesAddStoreResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	ReleasesAddStore201ApplicationJSONObject *ReleasesAddStore201ApplicationJSON
	// Failure
	ReleasesAddStore400ApplicationJSONObject *ReleasesAddStore400ApplicationJSON
	// Release not found
	ReleasesAddStore404ApplicationJSONObject *ReleasesAddStore404ApplicationJSON
}
