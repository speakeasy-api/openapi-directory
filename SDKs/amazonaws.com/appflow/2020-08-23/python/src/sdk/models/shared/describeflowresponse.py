"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import destinationflowconfig as shared_destinationflowconfig
from ..shared import executiondetails as shared_executiondetails
from ..shared import flowstatus_enum as shared_flowstatus_enum
from ..shared import metadatacatalogconfig as shared_metadatacatalogconfig
from ..shared import metadatacatalogdetail as shared_metadatacatalogdetail
from ..shared import sourceflowconfig as shared_sourceflowconfig
from ..shared import task as shared_task
from ..shared import triggerconfig as shared_triggerconfig
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeFlowResponse:
    r"""Success"""
    
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    destination_flow_config_list: Optional[list[shared_destinationflowconfig.DestinationFlowConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationFlowConfigList'), 'exclude': lambda f: f is None }})  
    flow_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flowArn'), 'exclude': lambda f: f is None }})  
    flow_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flowName'), 'exclude': lambda f: f is None }})  
    flow_status: Optional[shared_flowstatus_enum.FlowStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flowStatus'), 'exclude': lambda f: f is None }})  
    flow_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flowStatusMessage'), 'exclude': lambda f: f is None }})  
    kms_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsArn'), 'exclude': lambda f: f is None }})  
    last_run_execution_details: Optional[shared_executiondetails.ExecutionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRunExecutionDetails'), 'exclude': lambda f: f is None }})  
    last_run_metadata_catalog_details: Optional[list[shared_metadatacatalogdetail.MetadataCatalogDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRunMetadataCatalogDetails'), 'exclude': lambda f: f is None }})  
    last_updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    last_updated_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdatedBy'), 'exclude': lambda f: f is None }})  
    metadata_catalog_config: Optional[shared_metadatacatalogconfig.MetadataCatalogConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataCatalogConfig'), 'exclude': lambda f: f is None }})  
    schema_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaVersion'), 'exclude': lambda f: f is None }})  
    source_flow_config: Optional[shared_sourceflowconfig.SourceFlowConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceFlowConfig'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tasks: Optional[list[shared_task.Task]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks'), 'exclude': lambda f: f is None }})  
    trigger_config: Optional[shared_triggerconfig.TriggerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerConfig'), 'exclude': lambda f: f is None }})  
    