"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ACL:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def calendar_acl_delete(self, request: operations.CalendarACLDeleteRequest, security: operations.CalendarACLDeleteSecurity) -> operations.CalendarACLDeleteResponse:
        r"""Deletes an access control rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarACLDeleteRequest, base_url, '/calendars/{calendarId}/acl/{ruleId}', request)
        
        query_params = utils.get_query_params(operations.CalendarACLDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarACLDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def calendar_acl_get(self, request: operations.CalendarACLGetRequest, security: operations.CalendarACLGetSecurity) -> operations.CalendarACLGetResponse:
        r"""Returns an access control rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarACLGetRequest, base_url, '/calendars/{calendarId}/acl/{ruleId}', request)
        
        query_params = utils.get_query_params(operations.CalendarACLGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarACLGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ACLRule])
                res.acl_rule = out

        return res

    def calendar_acl_insert(self, request: operations.CalendarACLInsertRequest, security: operations.CalendarACLInsertSecurity) -> operations.CalendarACLInsertResponse:
        r"""Creates an access control rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarACLInsertRequest, base_url, '/calendars/{calendarId}/acl', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "acl_rule", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarACLInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarACLInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ACLRule])
                res.acl_rule = out

        return res

    def calendar_acl_list(self, request: operations.CalendarACLListRequest, security: operations.CalendarACLListSecurity) -> operations.CalendarACLListResponse:
        r"""Returns the rules in the access control list for the calendar."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarACLListRequest, base_url, '/calendars/{calendarId}/acl', request)
        
        query_params = utils.get_query_params(operations.CalendarACLListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarACLListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ACL])
                res.acl = out

        return res

    def calendar_acl_patch(self, request: operations.CalendarACLPatchRequest, security: operations.CalendarACLPatchSecurity) -> operations.CalendarACLPatchResponse:
        r"""Updates an access control rule. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarACLPatchRequest, base_url, '/calendars/{calendarId}/acl/{ruleId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "acl_rule", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarACLPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarACLPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ACLRule])
                res.acl_rule = out

        return res

    def calendar_acl_update(self, request: operations.CalendarACLUpdateRequest, security: operations.CalendarACLUpdateSecurity) -> operations.CalendarACLUpdateResponse:
        r"""Updates an access control rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarACLUpdateRequest, base_url, '/calendars/{calendarId}/acl/{ruleId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "acl_rule", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarACLUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarACLUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ACLRule])
                res.acl_rule = out

        return res

    def calendar_acl_watch(self, request: operations.CalendarACLWatchRequest, security: operations.CalendarACLWatchSecurity) -> operations.CalendarACLWatchResponse:
        r"""Watch for changes to ACL resources."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarACLWatchRequest, base_url, '/calendars/{calendarId}/acl/watch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarACLWatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarACLWatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    