/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class EventDistrictPointsPoints extends SpeakeasyBase {
  /**
   * Points awarded for alliance selection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alliance_points" })
  alliancePoints: number;

  /**
   * Points awarded for event awards.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "award_points" })
  awardPoints: number;

  /**
   * Points awarded for elimination match performance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "elim_points" })
  elimPoints: number;

  /**
   * Points awarded for qualification match performance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "qual_points" })
  qualPoints: number;

  /**
   * Total points awarded at this event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;
}

export class EventDistrictPointsTiebreakers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "highest_qual_scores" })
  highestQualScores?: number[];

  @SpeakeasyMetadata()
  @Expose({ name: "qual_wins" })
  qualWins?: number;
}

/**
 * Successful response
 */
export class EventDistrictPoints extends SpeakeasyBase {
  /**
   * Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.
   */
  @SpeakeasyMetadata({ elemType: EventDistrictPointsPoints })
  @Expose({ name: "points" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, EventDistrictPointsPoints> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], EventDistrictPointsPoints);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  points: Record<string, EventDistrictPointsPoints>;

  /**
   * Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.
   */
  @SpeakeasyMetadata({ elemType: EventDistrictPointsTiebreakers })
  @Expose({ name: "tiebreakers" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, EventDistrictPointsTiebreakers> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], EventDistrictPointsTiebreakers);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  tiebreakers?: Record<string, EventDistrictPointsTiebreakers>;
}
