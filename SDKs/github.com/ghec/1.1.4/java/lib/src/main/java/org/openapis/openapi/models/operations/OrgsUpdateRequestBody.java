/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class OrgsUpdateRequestBody {
    /**
     * Whether GitHub Advanced Security is automatically enabled for new repositories.
     * 
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-cloud@latest//organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * 
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advanced_security_enabled_for_new_repositories")
    public Boolean advancedSecurityEnabledForNewRepositories;
    public OrgsUpdateRequestBody withAdvancedSecurityEnabledForNewRepositories(Boolean advancedSecurityEnabledForNewRepositories) {
        this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
        return this;
    }
    
    /**
     * Billing email address. This address is not publicized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_email")
    public String billingEmail;
    public OrgsUpdateRequestBody withBillingEmail(String billingEmail) {
        this.billingEmail = billingEmail;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blog")
    public String blog;
    public OrgsUpdateRequestBody withBlog(String blog) {
        this.blog = blog;
        return this;
    }
    
    /**
     * The company name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    public String company;
    public OrgsUpdateRequestBody withCompany(String company) {
        this.company = company;
        return this;
    }
    
    /**
     * Default permission level members have for organization repositories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_repository_permission")
    public OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum defaultRepositoryPermission;
    public OrgsUpdateRequestBody withDefaultRepositoryPermission(OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum defaultRepositoryPermission) {
        this.defaultRepositoryPermission = defaultRepositoryPermission;
        return this;
    }
    
    /**
     * Whether Dependabot alerts is automatically enabled for new repositories.
     * 
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-cloud@latest//organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * 
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependabot_alerts_enabled_for_new_repositories")
    public Boolean dependabotAlertsEnabledForNewRepositories;
    public OrgsUpdateRequestBody withDependabotAlertsEnabledForNewRepositories(Boolean dependabotAlertsEnabledForNewRepositories) {
        this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
        return this;
    }
    
    /**
     * Whether Dependabot security updates is automatically enabled for new repositories.
     * 
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-cloud@latest//organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * 
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependabot_security_updates_enabled_for_new_repositories")
    public Boolean dependabotSecurityUpdatesEnabledForNewRepositories;
    public OrgsUpdateRequestBody withDependabotSecurityUpdatesEnabledForNewRepositories(Boolean dependabotSecurityUpdatesEnabledForNewRepositories) {
        this.dependabotSecurityUpdatesEnabledForNewRepositories = dependabotSecurityUpdatesEnabledForNewRepositories;
        return this;
    }
    
    /**
     * Whether dependency graph is automatically enabled for new repositories.
     * 
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-cloud@latest//organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * 
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependency_graph_enabled_for_new_repositories")
    public Boolean dependencyGraphEnabledForNewRepositories;
    public OrgsUpdateRequestBody withDependencyGraphEnabledForNewRepositories(Boolean dependencyGraphEnabledForNewRepositories) {
        this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
        return this;
    }
    
    /**
     * The description of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public OrgsUpdateRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The publicly visible email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public OrgsUpdateRequestBody withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Whether an organization can use organization projects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_organization_projects")
    public Boolean hasOrganizationProjects;
    public OrgsUpdateRequestBody withHasOrganizationProjects(Boolean hasOrganizationProjects) {
        this.hasOrganizationProjects = hasOrganizationProjects;
        return this;
    }
    
    /**
     * Whether repositories that belong to the organization can use repository projects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_repository_projects")
    public Boolean hasRepositoryProjects;
    public OrgsUpdateRequestBody withHasRepositoryProjects(Boolean hasRepositoryProjects) {
        this.hasRepositoryProjects = hasRepositoryProjects;
        return this;
    }
    
    /**
     * The location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public OrgsUpdateRequestBody withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
     * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_allowed_repository_creation_type")
    public OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType;
    public OrgsUpdateRequestBody withMembersAllowedRepositoryCreationType(OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType) {
        this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
        return this;
    }
    
    /**
     * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/enterprise-cloud@latest//github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_internal_repositories")
    public Boolean membersCanCreateInternalRepositories;
    public OrgsUpdateRequestBody withMembersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
        this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
        return this;
    }
    
    /**
     * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_pages")
    public Boolean membersCanCreatePages;
    public OrgsUpdateRequestBody withMembersCanCreatePages(Boolean membersCanCreatePages) {
        this.membersCanCreatePages = membersCanCreatePages;
        return this;
    }
    
    /**
     * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_private_pages")
    public Boolean membersCanCreatePrivatePages;
    public OrgsUpdateRequestBody withMembersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
        this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
        return this;
    }
    
    /**
     * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/enterprise-cloud@latest//github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_private_repositories")
    public Boolean membersCanCreatePrivateRepositories;
    public OrgsUpdateRequestBody withMembersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
        this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
        return this;
    }
    
    /**
     * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_public_pages")
    public Boolean membersCanCreatePublicPages;
    public OrgsUpdateRequestBody withMembersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
        this.membersCanCreatePublicPages = membersCanCreatePublicPages;
        return this;
    }
    
    /**
     * Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/enterprise-cloud@latest//github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_public_repositories")
    public Boolean membersCanCreatePublicRepositories;
    public OrgsUpdateRequestBody withMembersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
        this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
        return this;
    }
    
    /**
     * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_repositories")
    public Boolean membersCanCreateRepositories;
    public OrgsUpdateRequestBody withMembersCanCreateRepositories(Boolean membersCanCreateRepositories) {
        this.membersCanCreateRepositories = membersCanCreateRepositories;
        return this;
    }
    
    /**
     * Whether organization members can fork private organization repositories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_fork_private_repositories")
    public Boolean membersCanForkPrivateRepositories;
    public OrgsUpdateRequestBody withMembersCanForkPrivateRepositories(Boolean membersCanForkPrivateRepositories) {
        this.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
        return this;
    }
    
    /**
     * The shorthand name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public OrgsUpdateRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Whether secret scanning is automatically enabled for new repositories.
     * 
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-cloud@latest//organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * 
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_scanning_enabled_for_new_repositories")
    public Boolean secretScanningEnabledForNewRepositories;
    public OrgsUpdateRequestBody withSecretScanningEnabledForNewRepositories(Boolean secretScanningEnabledForNewRepositories) {
        this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
        return this;
    }
    
    /**
     * If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_scanning_push_protection_custom_link")
    public String secretScanningPushProtectionCustomLink;
    public OrgsUpdateRequestBody withSecretScanningPushProtectionCustomLink(String secretScanningPushProtectionCustomLink) {
        this.secretScanningPushProtectionCustomLink = secretScanningPushProtectionCustomLink;
        return this;
    }
    
    /**
     * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_scanning_push_protection_custom_link_enabled")
    public Boolean secretScanningPushProtectionCustomLinkEnabled;
    public OrgsUpdateRequestBody withSecretScanningPushProtectionCustomLinkEnabled(Boolean secretScanningPushProtectionCustomLinkEnabled) {
        this.secretScanningPushProtectionCustomLinkEnabled = secretScanningPushProtectionCustomLinkEnabled;
        return this;
    }
    
    /**
     * Whether secret scanning push protection is automatically enabled for new repositories.
     * 
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-cloud@latest//organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * 
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_scanning_push_protection_enabled_for_new_repositories")
    public Boolean secretScanningPushProtectionEnabledForNewRepositories;
    public OrgsUpdateRequestBody withSecretScanningPushProtectionEnabledForNewRepositories(Boolean secretScanningPushProtectionEnabledForNewRepositories) {
        this.secretScanningPushProtectionEnabledForNewRepositories = secretScanningPushProtectionEnabledForNewRepositories;
        return this;
    }
    
    /**
     * The Twitter username of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twitter_username")
    public String twitterUsername;
    public OrgsUpdateRequestBody withTwitterUsername(String twitterUsername) {
        this.twitterUsername = twitterUsername;
        return this;
    }
    
    /**
     * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("web_commit_signoff_required")
    public Boolean webCommitSignoffRequired;
    public OrgsUpdateRequestBody withWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
        this.webCommitSignoffRequired = webCommitSignoffRequired;
        return this;
    }
    
}
