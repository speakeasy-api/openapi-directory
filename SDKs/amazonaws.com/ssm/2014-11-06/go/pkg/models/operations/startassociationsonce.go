// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartAssociationsOnceXAmzTargetEnum
type StartAssociationsOnceXAmzTargetEnum string

const (
	StartAssociationsOnceXAmzTargetEnumAmazonSsmStartAssociationsOnce StartAssociationsOnceXAmzTargetEnum = "AmazonSSM.StartAssociationsOnce"
)

func (e *StartAssociationsOnceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonSSM.StartAssociationsOnce":
		*e = StartAssociationsOnceXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartAssociationsOnceXAmzTargetEnum: %s", s)
	}
}

type StartAssociationsOnceHeaders struct {
	XAmzAlgorithm     *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartAssociationsOnceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartAssociationsOnceRequest struct {
	Headers StartAssociationsOnceHeaders
	Request shared.StartAssociationsOnceRequest `request:"mediaType=application/json"`
}

type StartAssociationsOnceResponse struct {
	// AssociationDoesNotExist
	AssociationDoesNotExist interface{}
	ContentType             string
	// InvalidAssociation
	InvalidAssociation interface{}
	// Success
	StartAssociationsOnceResult map[string]interface{}
	StatusCode                  int
	RawResponse                 *http.Response
}
