// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type TopLevelActionsPrimaryType string

const (
	TopLevelActionsPrimaryTypeActionHookActionBody TopLevelActionsPrimaryType = "ActionHookActionBody"
	TopLevelActionsPrimaryTypeIFrameActionBody     TopLevelActionsPrimaryType = "IFrameActionBody"
)

type TopLevelActionsPrimary struct {
	ActionHookActionBody *ActionHookActionBody
	IFrameActionBody     *IFrameActionBody

	Type TopLevelActionsPrimaryType
}

func CreateTopLevelActionsPrimaryActionHookActionBody(actionHookActionBody ActionHookActionBody) TopLevelActionsPrimary {
	typ := TopLevelActionsPrimaryTypeActionHookActionBody

	return TopLevelActionsPrimary{
		ActionHookActionBody: &actionHookActionBody,
		Type:                 typ,
	}
}

func CreateTopLevelActionsPrimaryIFrameActionBody(iFrameActionBody IFrameActionBody) TopLevelActionsPrimary {
	typ := TopLevelActionsPrimaryTypeIFrameActionBody

	return TopLevelActionsPrimary{
		IFrameActionBody: &iFrameActionBody,
		Type:             typ,
	}
}

func (u *TopLevelActionsPrimary) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	actionHookActionBody := new(ActionHookActionBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&actionHookActionBody); err == nil {
		u.ActionHookActionBody = actionHookActionBody
		u.Type = TopLevelActionsPrimaryTypeActionHookActionBody
		return nil
	}

	iFrameActionBody := new(IFrameActionBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&iFrameActionBody); err == nil {
		u.IFrameActionBody = iFrameActionBody
		u.Type = TopLevelActionsPrimaryTypeIFrameActionBody
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TopLevelActionsPrimary) MarshalJSON() ([]byte, error) {
	if u.ActionHookActionBody != nil {
		return json.Marshal(u.ActionHookActionBody)
	}

	if u.IFrameActionBody != nil {
		return json.Marshal(u.IFrameActionBody)
	}

	return nil, nil
}

type TopLevelActionsSecondaryType string

const (
	TopLevelActionsSecondaryTypeActionHookActionBody TopLevelActionsSecondaryType = "ActionHookActionBody"
	TopLevelActionsSecondaryTypeIFrameActionBody     TopLevelActionsSecondaryType = "IFrameActionBody"
)

type TopLevelActionsSecondary struct {
	ActionHookActionBody *ActionHookActionBody
	IFrameActionBody     *IFrameActionBody

	Type TopLevelActionsSecondaryType
}

func CreateTopLevelActionsSecondaryActionHookActionBody(actionHookActionBody ActionHookActionBody) TopLevelActionsSecondary {
	typ := TopLevelActionsSecondaryTypeActionHookActionBody

	return TopLevelActionsSecondary{
		ActionHookActionBody: &actionHookActionBody,
		Type:                 typ,
	}
}

func CreateTopLevelActionsSecondaryIFrameActionBody(iFrameActionBody IFrameActionBody) TopLevelActionsSecondary {
	typ := TopLevelActionsSecondaryTypeIFrameActionBody

	return TopLevelActionsSecondary{
		IFrameActionBody: &iFrameActionBody,
		Type:             typ,
	}
}

func (u *TopLevelActionsSecondary) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	actionHookActionBody := new(ActionHookActionBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&actionHookActionBody); err == nil {
		u.ActionHookActionBody = actionHookActionBody
		u.Type = TopLevelActionsSecondaryTypeActionHookActionBody
		return nil
	}

	iFrameActionBody := new(IFrameActionBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&iFrameActionBody); err == nil {
		u.IFrameActionBody = iFrameActionBody
		u.Type = TopLevelActionsSecondaryTypeIFrameActionBody
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TopLevelActionsSecondary) MarshalJSON() ([]byte, error) {
	if u.ActionHookActionBody != nil {
		return json.Marshal(u.ActionHookActionBody)
	}

	if u.IFrameActionBody != nil {
		return json.Marshal(u.IFrameActionBody)
	}

	return nil, nil
}

type TopLevelActions struct {
	Primary   *TopLevelActionsPrimary    `json:"primary,omitempty"`
	Secondary []TopLevelActionsSecondary `json:"secondary"`
	Settings  *IFrameActionBody          `json:"settings,omitempty"`
}
