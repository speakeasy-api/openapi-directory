/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Achievements {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Increments the steps of the achievement with the given ID for the currently authenticated player.
   */
  gamesAchievementsIncrement(
    req: operations.GamesAchievementsIncrementRequest,
    security: operations.GamesAchievementsIncrementSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesAchievementsIncrementResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesAchievementsIncrementRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/achievements/{achievementId}/increment",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesAchievementsIncrementSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesAchievementsIncrementResponse =
        new operations.GamesAchievementsIncrementResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.achievementIncrementResponse = utils.objectToClass(
              httpRes?.data,
              shared.AchievementIncrementResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the progress for all your application's achievements for the currently authenticated player.
   */
  gamesAchievementsList(
    req: operations.GamesAchievementsListRequest,
    security: operations.GamesAchievementsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesAchievementsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesAchievementsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/players/{playerId}/achievements",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesAchievementsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesAchievementsListResponse =
        new operations.GamesAchievementsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerAchievementListResponse = utils.objectToClass(
              httpRes?.data,
              shared.PlayerAchievementListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player.
   */
  gamesAchievementsReveal(
    req: operations.GamesAchievementsRevealRequest,
    security: operations.GamesAchievementsRevealSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesAchievementsRevealResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesAchievementsRevealRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/achievements/{achievementId}/reveal",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesAchievementsRevealSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesAchievementsRevealResponse =
        new operations.GamesAchievementsRevealResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.achievementRevealResponse = utils.objectToClass(
              httpRes?.data,
              shared.AchievementRevealResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.
   */
  gamesAchievementsSetStepsAtLeast(
    req: operations.GamesAchievementsSetStepsAtLeastRequest,
    security: operations.GamesAchievementsSetStepsAtLeastSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesAchievementsSetStepsAtLeastResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesAchievementsSetStepsAtLeastRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/achievements/{achievementId}/setStepsAtLeast",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesAchievementsSetStepsAtLeastSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesAchievementsSetStepsAtLeastResponse =
        new operations.GamesAchievementsSetStepsAtLeastResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.achievementSetStepsAtLeastResponse = utils.objectToClass(
              httpRes?.data,
              shared.AchievementSetStepsAtLeastResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unlocks this achievement for the currently authenticated player.
   */
  gamesAchievementsUnlock(
    req: operations.GamesAchievementsUnlockRequest,
    security: operations.GamesAchievementsUnlockSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesAchievementsUnlockResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesAchievementsUnlockRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/achievements/{achievementId}/unlock",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesAchievementsUnlockSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesAchievementsUnlockResponse =
        new operations.GamesAchievementsUnlockResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.achievementUnlockResponse = utils.objectToClass(
              httpRes?.data,
              shared.AchievementUnlockResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates multiple achievements for the currently authenticated player.
   */
  gamesAchievementsUpdateMultiple(
    req: operations.GamesAchievementsUpdateMultipleRequest,
    security: operations.GamesAchievementsUpdateMultipleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesAchievementsUpdateMultipleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesAchievementsUpdateMultipleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/games/v1/achievements/updateMultiple";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "achievementUpdateMultipleRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesAchievementsUpdateMultipleSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesAchievementsUpdateMultipleResponse =
        new operations.GamesAchievementsUpdateMultipleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.achievementUpdateMultipleResponse = utils.objectToClass(
              httpRes?.data,
              shared.AchievementUpdateMultipleResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
