<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Offers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * All Fares
     * 
     * Retrieves all available fares for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllFaresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AllFaresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AllFaresResponse
     */
	public function allFares(
        \OpenAPI\OpenAPI\Models\Operations\AllFaresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AllFaresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AllFaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/fares/allfares');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AllFaresRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllFaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->allFares200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Best Fares
     * 
     * Retrieve best fares for the requested journey across multiple days or multiple months.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BestFaresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BestFaresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BestFaresResponse
     */
	public function bestFares(
        \OpenAPI\OpenAPI\Models\Operations\BestFaresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BestFaresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BestFaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/fares/bestfares');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BestFaresRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BestFaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->bestFares200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Deep Links
     * 
     * Returns valid deep links for the provided input parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeepLinksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeepLinksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeepLinksResponse
     */
	public function deepLinks(
        \OpenAPI\OpenAPI\Models\Operations\DeepLinksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeepLinksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeepLinksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/fares/deeplink');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeepLinksRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeepLinksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deepLinks200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fares
     * 
     * Retrieve all available fares per fare family for a specific Origin & Destination on a given date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FaresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FaresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FaresResponse
     */
	public function fares(
        \OpenAPI\OpenAPI\Models\Operations\FaresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FaresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/fares/fares');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FaresRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->fares200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fares Subscriptions
     * 
     * Create a subscription for best price O&D. Receive regular updates on lowest fares
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FaresSubscriptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FaresSubscriptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FaresSubscriptionsResponse
     */
	public function faresSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\FaresSubscriptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FaresSubscriptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FaresSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/fares/subscriptions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FaresSubscriptionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FaresSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->faresSubscriptions200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * LH Deep Links - FFP
     * 
     * Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksFFPRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksFFPSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksFFPResponse
     */
	public function lhDeepLinksFFP(
        \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksFFPRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksFFPSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksFFPResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/fares/deeplink/ffp');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LHDeepLinksFFPRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksFFPResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->lhDeepLinksFFP200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * LH Deep Links - ITCO
     * 
     * Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksITCORequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksITCOSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksITCOResponse
     */
	public function lhDeepLinksITCO(
        \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksITCORequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksITCOSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksITCOResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/fares/deeplink/itco');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LHDeepLinksITCORequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LHDeepLinksITCOResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->lhDeepLinksITCO200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lowest Fares
     * 
     * Retrieve lowest fare for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS & LH
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LowestFaresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LowestFaresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LowestFaresResponse
     */
	public function lowestFares(
        \OpenAPI\OpenAPI\Models\Operations\LowestFaresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LowestFaresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LowestFaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/fares/lowestfares');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LowestFaresRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LowestFaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->lowestFares200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * OND Route
     * 
     * Returns LH route origin & destination information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ONDRouteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ONDRouteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ONDRouteResponse
     */
	public function ondRoute(
        \OpenAPI\OpenAPI\Models\Operations\ONDRouteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ONDRouteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ONDRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/ond/route/{origin}/{destination}', \OpenAPI\OpenAPI\Models\Operations\ONDRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ONDRouteRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ONDRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->ondRoute200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * OND Status
     * 
     * Returns LH network route status information. Search for recently added or retired routes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ONDStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ONDStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ONDStatusResponse
     */
	public function ondStatus(
        \OpenAPI\OpenAPI\Models\Operations\ONDStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ONDStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ONDStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/ond/status');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ONDStatusRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ONDStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->ondStatus200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Top OND
     * 
     * Returns LH Top routes per country or across all countries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TopONDRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TopONDSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TopONDResponse
     */
	public function topOND(
        \OpenAPI\OpenAPI\Models\Operations\TopONDRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TopONDSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TopONDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offers/ond/top');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TopONDRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TopONDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->topOND200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}