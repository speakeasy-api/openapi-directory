// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum - The file format name extension used to represent the geomark download.
type GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum string

const (
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumJSON    GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "json"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumXML     GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "xml"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumKml     GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "kml"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumKmz     GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "kmz"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumShp     GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "shp"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumShpz    GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "shpz"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumGeojson GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "geojson"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumGml     GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "gml"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumGpkg    GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "gpkg"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnumWkt     GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum = "wkt"
)

func (e *GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "kmz":
		fallthrough
	case "shp":
		fallthrough
	case "shpz":
		fallthrough
	case "geojson":
		fallthrough
	case "gml":
		fallthrough
	case "gpkg":
		fallthrough
	case "wkt":
		*e = GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum: %s", s)
	}
}

// GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum - The srid of the coordinate system the geometry should be converted to.
type GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum string

const (
	GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnumFourThousandThreeHundredAndTwentySix   GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum = "4326"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnumThreeThousandAndFive                   GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum = "3005"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnumThreeThousandEightHundredAndFiftySeven GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum = "3857"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnumTwentySixThousandNineHundredAndSeven   GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum = "26907"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnumTwentySixThousandNineHundredAndEight   GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum = "26908"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnumTwentySixThousandNineHundredAndNine    GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum = "26909"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnumTwentySixThousandNineHundredAndTen     GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum = "26910"
	GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnumTwentySixThousandNineHundredAndEleven  GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum = "26911"
)

func (e *GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "3005":
		fallthrough
	case "3857":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum: %s", s)
	}
}

type GetGeomarksGeomarkIDFeatureFileFormatExtensionRequest struct {
	// The file format name extension used to represent the geomark download.
	FileFormatExtension GetGeomarksGeomarkIDFeatureFileFormatExtensionFileFormatExtensionEnum `pathParam:"style=simple,explode=false,name=fileFormatExtension"`
	// The unique identifier for the geomark
	GeomarkID string `pathParam:"style=simple,explode=false,name=geomarkId"`
	// The srid of the coordinate system the geometry should be converted to.
	Srid *GetGeomarksGeomarkIDFeatureFileFormatExtensionSridEnum `queryParam:"style=form,explode=true,name=srid"`
}

type GetGeomarksGeomarkIDFeatureFileFormatExtensionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
