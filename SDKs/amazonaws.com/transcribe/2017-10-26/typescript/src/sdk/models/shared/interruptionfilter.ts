/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AbsoluteTimeRange } from "./absolutetimerange";
import { ParticipantRoleEnum } from "./participantroleenum";
import { RelativeTimeRange } from "./relativetimerange";
import { Expose, Type } from "class-transformer";

/**
 * <p>Flag the presence or absence of interruptions in your Call Analytics transcription output.</p> <p>Rules using <code>InterruptionFilter</code> are designed to match:</p> <ul> <li> <p>Instances where an agent interrupts a customer</p> </li> <li> <p>Instances where a customer interrupts an agent</p> </li> <li> <p>Either participant interrupting the other</p> </li> <li> <p>A lack of interruptions</p> </li> </ul> <p>See <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html#tca-rules-batch">Rule criteria for post-call categories</a> for usage examples.</p>
 */
export class InterruptionFilter extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AbsoluteTimeRange" })
  @Type(() => AbsoluteTimeRange)
  absoluteTimeRange?: AbsoluteTimeRange;

  @SpeakeasyMetadata()
  @Expose({ name: "Negate" })
  negate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ParticipantRole" })
  participantRole?: ParticipantRoleEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "RelativeTimeRange" })
  @Type(() => RelativeTimeRange)
  relativeTimeRange?: RelativeTimeRange;

  @SpeakeasyMetadata()
  @Expose({ name: "Threshold" })
  threshold?: number;
}
