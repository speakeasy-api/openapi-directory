/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * The CloudControlApi multi-region endpoint
   */
  "http://cloudcontrolapi.{region}.amazonaws.com",
  /**
   * The CloudControlApi multi-region endpoint
   */
  "https://cloudcontrolapi.{region}.amazonaws.com",
  /**
   * The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
   */
  "http://cloudcontrolapi.{region}.amazonaws.com.cn",
  /**
   * The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
   */
  "https://cloudcontrolapi.{region}.amazonaws.com.cn",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * For more information about Amazon Web Services Cloud Control API, see the <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/what-is-cloudcontrolapi.html">Amazon Web Services Cloud Control API User Guide</a>.
 *
 * @see {@link https://docs.aws.amazon.com/cloudcontrolapi/} - Amazon Web Services documentation
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * <p>Cancels the specified resource operation request. For more information, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-manage-requests.html#resource-operations-manage-requests-cancel">Canceling resource operation requests</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>Only resource operations requests with a status of <code>PENDING</code> or <code>IN_PROGRESS</code> can be canceled.</p>
   */
  cancelResourceRequest(
    req: operations.CancelResourceRequestRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelResourceRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelResourceRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/#X-Amz-Target=CloudApiService.CancelResourceRequest";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cancelResourceRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelResourceRequestResponse =
        new operations.CancelResourceRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelResourceRequestOutput = utils.objectToClass(
              httpRes?.data,
              shared.CancelResourceRequestOutput
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.concurrentModificationException = httpRes?.data;
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.requestTokenNotFoundException = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Creates the specified resource. For more information, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html">Creating a resource</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>After you have initiated a resource creation request, you can monitor the progress of your request by calling <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html">GetResourceRequestStatus</a> using the <code>RequestToken</code> of the <code>ProgressEvent</code> type returned by <code>CreateResource</code>.</p>
   */
  createResource(
    req: operations.CreateResourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateResourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateResourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/#X-Amz-Target=CloudApiService.CreateResource";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createResourceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateResourceResponse =
        new operations.CreateResourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createResourceOutput = utils.objectToClass(
              httpRes?.data,
              shared.CreateResourceOutput
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alreadyExistsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerInternalFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generalServiceException = httpRes?.data;
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notUpdatableException = httpRes?.data;
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.concurrentOperationException = httpRes?.data;
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRequestException = httpRes?.data;
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.privateTypeException = httpRes?.data;
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsupportedActionException = httpRes?.data;
          }
          break;
        case httpRes?.status == 491:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notStabilizedException = httpRes?.data;
          }
          break;
        case httpRes?.status == 492:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceInternalErrorException = httpRes?.data;
          }
          break;
        case httpRes?.status == 493:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 494:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceLimitExceededException = httpRes?.data;
          }
          break;
        case httpRes?.status == 495:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidCredentialsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 496:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceConflictException = httpRes?.data;
          }
          break;
        case httpRes?.status == 497:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientTokenConflictException = httpRes?.data;
          }
          break;
        case httpRes?.status == 498:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.throttlingException = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Deletes the specified resource. For details, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-delete.html">Deleting a resource</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>After you have initiated a resource deletion request, you can monitor the progress of your request by calling <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html">GetResourceRequestStatus</a> using the <code>RequestToken</code> of the <code>ProgressEvent</code> returned by <code>DeleteResource</code>.</p>
   */
  deleteResource(
    req: operations.DeleteResourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteResourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteResourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/#X-Amz-Target=CloudApiService.DeleteResource";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "deleteResourceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteResourceResponse =
        new operations.DeleteResourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteResourceOutput = utils.objectToClass(
              httpRes?.data,
              shared.DeleteResourceOutput
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alreadyExistsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerInternalFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generalServiceException = httpRes?.data;
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notUpdatableException = httpRes?.data;
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.concurrentOperationException = httpRes?.data;
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRequestException = httpRes?.data;
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.privateTypeException = httpRes?.data;
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsupportedActionException = httpRes?.data;
          }
          break;
        case httpRes?.status == 491:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notStabilizedException = httpRes?.data;
          }
          break;
        case httpRes?.status == 492:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceInternalErrorException = httpRes?.data;
          }
          break;
        case httpRes?.status == 493:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 494:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceLimitExceededException = httpRes?.data;
          }
          break;
        case httpRes?.status == 495:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidCredentialsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 496:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceConflictException = httpRes?.data;
          }
          break;
        case httpRes?.status == 497:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientTokenConflictException = httpRes?.data;
          }
          break;
        case httpRes?.status == 498:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.throttlingException = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Returns information about the current state of the specified resource. For details, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-read.html">Reading a resource's current state</a>.</p> <p>You can use this action to return information about an existing resource in your account and Amazon Web Services Region, whether those resources were provisioned using Cloud Control API.</p>
   */
  getResource(
    req: operations.GetResourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/#X-Amz-Target=CloudApiService.GetResource";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "getResourceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourceResponse =
        new operations.GetResourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResourceOutput = utils.objectToClass(
              httpRes?.data,
              shared.GetResourceOutput
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alreadyExistsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerInternalFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generalServiceException = httpRes?.data;
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notUpdatableException = httpRes?.data;
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRequestException = httpRes?.data;
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.privateTypeException = httpRes?.data;
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsupportedActionException = httpRes?.data;
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notStabilizedException = httpRes?.data;
          }
          break;
        case httpRes?.status == 491:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceInternalErrorException = httpRes?.data;
          }
          break;
        case httpRes?.status == 492:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 493:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceLimitExceededException = httpRes?.data;
          }
          break;
        case httpRes?.status == 494:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidCredentialsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 495:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceConflictException = httpRes?.data;
          }
          break;
        case httpRes?.status == 496:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.throttlingException = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the current status of a resource operation request. For more information, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-manage-requests.html#resource-operations-manage-requests-track">Tracking the progress of resource operation requests</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.
   */
  getResourceRequestStatus(
    req: operations.GetResourceRequestStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourceRequestStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourceRequestStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/#X-Amz-Target=CloudApiService.GetResourceRequestStatus";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "getResourceRequestStatusInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourceRequestStatusResponse =
        new operations.GetResourceRequestStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResourceRequestStatusOutput = utils.objectToClass(
              httpRes?.data,
              shared.GetResourceRequestStatusOutput
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.requestTokenNotFoundException = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Returns existing resource operation requests. This includes requests of all status types. For more information, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-manage-requests.html#resource-operations-manage-requests-list">Listing active resource operation requests</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <note> <p>Resource operation requests expire after 7 days.</p> </note>
   */
  listResourceRequests(
    req: operations.ListResourceRequestsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListResourceRequestsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListResourceRequestsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/#X-Amz-Target=CloudApiService.ListResourceRequests";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "listResourceRequestsInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListResourceRequestsResponse =
        new operations.ListResourceRequestsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listResourceRequestsOutput = utils.objectToClass(
              httpRes?.data,
              shared.ListResourceRequestsOutput
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Returns information about the specified resources. For more information, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-list.html">Discovering resources</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>You can use this action to return information about existing resources in your account and Amazon Web Services Region, whether those resources were provisioned using Cloud Control API.</p>
   */
  listResources(
    req: operations.ListResourcesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListResourcesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListResourcesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/#X-Amz-Target=CloudApiService.ListResources";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "listResourcesInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListResourcesResponse =
        new operations.ListResourcesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listResourcesOutput = utils.objectToClass(
              httpRes?.data,
              shared.ListResourcesOutput
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alreadyExistsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerInternalFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generalServiceException = httpRes?.data;
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notUpdatableException = httpRes?.data;
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRequestException = httpRes?.data;
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.privateTypeException = httpRes?.data;
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsupportedActionException = httpRes?.data;
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notStabilizedException = httpRes?.data;
          }
          break;
        case httpRes?.status == 491:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceInternalErrorException = httpRes?.data;
          }
          break;
        case httpRes?.status == 492:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 493:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceLimitExceededException = httpRes?.data;
          }
          break;
        case httpRes?.status == 494:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidCredentialsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 495:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceConflictException = httpRes?.data;
          }
          break;
        case httpRes?.status == 496:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.throttlingException = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Updates the specified property values in the resource.</p> <p>You specify your resource property updates as a list of patch operations contained in a JSON patch document that adheres to the <a href="https://datatracker.ietf.org/doc/html/rfc6902"> <i>RFC 6902 - JavaScript Object Notation (JSON) Patch</i> </a> standard.</p> <p>For details on how Cloud Control API performs resource update operations, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-update.html">Updating a resource</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>After you have initiated a resource update request, you can monitor the progress of your request by calling <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html">GetResourceRequestStatus</a> using the <code>RequestToken</code> of the <code>ProgressEvent</code> returned by <code>UpdateResource</code>.</p> <p>For more information about the properties of a specific resource, refer to the related topic for the resource in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Resource and property types reference</a> in the <i>CloudFormation Users Guide</i>.</p>
   */
  updateResource(
    req: operations.UpdateResourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateResourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateResourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/#X-Amz-Target=CloudApiService.UpdateResource";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateResourceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateResourceResponse =
        new operations.UpdateResourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateResourceOutput = utils.objectToClass(
              httpRes?.data,
              shared.UpdateResourceOutput
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alreadyExistsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerInternalFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generalServiceException = httpRes?.data;
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notUpdatableException = httpRes?.data;
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.concurrentOperationException = httpRes?.data;
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRequestException = httpRes?.data;
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.privateTypeException = httpRes?.data;
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = httpRes?.data;
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsupportedActionException = httpRes?.data;
          }
          break;
        case httpRes?.status == 491:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notStabilizedException = httpRes?.data;
          }
          break;
        case httpRes?.status == 492:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceInternalErrorException = httpRes?.data;
          }
          break;
        case httpRes?.status == 493:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.handlerFailureException = httpRes?.data;
          }
          break;
        case httpRes?.status == 494:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceLimitExceededException = httpRes?.data;
          }
          break;
        case httpRes?.status == 495:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidCredentialsException = httpRes?.data;
          }
          break;
        case httpRes?.status == 496:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceConflictException = httpRes?.data;
          }
          break;
        case httpRes?.status == 497:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientTokenConflictException = httpRes?.data;
          }
          break;
        case httpRes?.status == 498:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.throttlingException = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }
}
