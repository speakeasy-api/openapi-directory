<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a backup.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateResponse
     */
	public function fileProjectsLocationsBackupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/backups', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all backups in a project for either a specified location or for all locations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListResponse
     */
	public function fileProjectsLocationsBackupsList(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/backups', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsBackupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBackupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBackupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an instance. When creating from a backup, the capacity of the new instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateResponse
     */
	public function fileProjectsLocationsInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all instances in a project for either a specified location or for all locations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListResponse
     */
	public function fileProjectsLocationsInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores an existing instance's file share from a backup. The capacity of the instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreResponse
     */
	public function fileProjectsLocationsInstancesRestore(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:restore', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "restoreInstanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRestoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Revert an existing instance's file system to a specified snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertResponse
     */
	public function fileProjectsLocationsInstancesRevert(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:revert', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "revertInstanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesRevertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a share.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateResponse
     */
	public function fileProjectsLocationsInstancesSharesCreate(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/shares', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shareInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all shares for a specified instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListResponse
     */
	public function fileProjectsLocationsInstancesSharesList(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/shares', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSharesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSharesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSharesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateResponse
     */
	public function fileProjectsLocationsInstancesSnapshotsCreate(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/snapshots', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snapshotInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all snapshots in a project for either a specified location or for all locations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListResponse
     */
	public function fileProjectsLocationsInstancesSnapshotsList(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/snapshots', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSnapshotsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSnapshotsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the settings of a specific snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchResponse
     */
	public function fileProjectsLocationsInstancesSnapshotsPatch(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snapshotInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsInstancesSnapshotsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListResponse
     */
	public function fileProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelResponse
     */
	public function fileProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteResponse
     */
	public function fileProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetResponse
     */
	public function fileProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListResponse
     */
	public function fileProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}