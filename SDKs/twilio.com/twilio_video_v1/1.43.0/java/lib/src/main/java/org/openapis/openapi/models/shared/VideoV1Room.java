/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VideoV1Room - Created
 */
public class VideoV1Room {
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Room resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public VideoV1Room withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_only")
    public Boolean audioOnly;

    public VideoV1Room withAudioOnly(Boolean audioOnly) {
        this.audioOnly = audioOnly;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public VideoV1Room withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;

    public VideoV1Room withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * The duration of the room in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;

    public VideoV1Room withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Specifies how long (in minutes) a room will remain active after last participant leaves. Can be configured when creating a room via REST API. For Ad-Hoc rooms this value cannot be changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("empty_room_timeout")
    public Long emptyRoomTimeout;

    public VideoV1Room withEmptyRoomTimeout(Long emptyRoomTimeout) {
        this.emptyRoomTimeout = emptyRoomTimeout;
        return this;
    }
    
    /**
     * Deprecated, now always considered to be true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enable_turn")
    public Boolean enableTurn;

    public VideoV1Room withEnableTurn(Boolean enableTurn) {
        this.enableTurn = enableTurn;
        return this;
    }
    
    /**
     * The UTC end time of the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_time")
    public OffsetDateTime endTime;

    public VideoV1Room withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Indicates if this is a large room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("large_room")
    public Boolean largeRoom;

    public VideoV1Room withLargeRoom(Boolean largeRoom) {
        this.largeRoom = largeRoom;
        return this;
    }
    
    /**
     * The URLs of related resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public java.util.Map<String, Object> links;

    public VideoV1Room withLinks(java.util.Map<String, Object> links) {
        this.links = links;
        return this;
    }
    
    /**
     * The maximum number of published audio, video, and data tracks all participants combined are allowed to publish in the room at the same time. Check [Programmable Video Limits](https://www.twilio.com/docs/video/programmable-video-limits) for more details. If it is set to 0 it means unconstrained.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_concurrent_published_tracks")
    public Long maxConcurrentPublishedTracks;

    public VideoV1Room withMaxConcurrentPublishedTracks(Long maxConcurrentPublishedTracks) {
        this.maxConcurrentPublishedTracks = maxConcurrentPublishedTracks;
        return this;
    }
    
    /**
     * The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_participant_duration")
    public Long maxParticipantDuration;

    public VideoV1Room withMaxParticipantDuration(Long maxParticipantDuration) {
        this.maxParticipantDuration = maxParticipantDuration;
        return this;
    }
    
    /**
     * The maximum number of concurrent Participants allowed in the room. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_participants")
    public Long maxParticipants;

    public VideoV1Room withMaxParticipants(Long maxParticipants) {
        this.maxParticipants = maxParticipants;
        return this;
    }
    
    /**
     * The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-address-whitelisting#media-servers). ***This feature is not available in `peer-to-peer` rooms.***
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("media_region")
    public String mediaRegion;

    public VideoV1Room withMediaRegion(String mediaRegion) {
        this.mediaRegion = mediaRegion;
        return this;
    }
    
    /**
     * Whether to start recording when Participants connect. ***This feature is not available in `peer-to-peer` rooms.***
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_participants_on_connect")
    public Boolean recordParticipantsOnConnect;

    public VideoV1Room withRecordParticipantsOnConnect(Boolean recordParticipantsOnConnect) {
        this.recordParticipantsOnConnect = recordParticipantsOnConnect;
        return this;
    }
    
    /**
     * The unique string that we created to identify the Room resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public VideoV1Room withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public RoomEnumRoomStatusEnum status;

    public VideoV1Room withStatus(RoomEnumRoomStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The URL we call using the `status_callback_method` to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_callback")
    public String statusCallback;

    public VideoV1Room withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The HTTP method we use to call `status_callback`. Can be `POST` or `GET` and defaults to `POST`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_callback_method")
    public VideoV1RoomStatusCallbackMethodEnum statusCallbackMethod;

    public VideoV1Room withStatusCallbackMethod(VideoV1RoomStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public RoomEnumRoomTypeEnum type;

    public VideoV1Room withType(RoomEnumRoomTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * An application-defined string that uniquely identifies the resource. It can be used as a `room_sid` in place of the resource's `sid` in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for `in-progress` rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is `in-progress`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unique_name")
    public String uniqueName;

    public VideoV1Room withUniqueName(String uniqueName) {
        this.uniqueName = uniqueName;
        return this;
    }
    
    /**
     * Specifies how long (in minutes) a room will remain active if no one joins. Can be configured when creating a room via REST API. For Ad-Hoc rooms this value cannot be changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unused_room_timeout")
    public Long unusedRoomTimeout;

    public VideoV1Room withUnusedRoomTimeout(Long unusedRoomTimeout) {
        this.unusedRoomTimeout = unusedRoomTimeout;
        return this;
    }
    
    /**
     * The absolute URL of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public VideoV1Room withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * An array of the video codecs that are supported when publishing a track in the room.  Can be: `VP8` and `H264`.  ***This feature is not available in `peer-to-peer` rooms***
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video_codecs")
    public RoomEnumVideoCodecEnum[] videoCodecs;

    public VideoV1Room withVideoCodecs(RoomEnumVideoCodecEnum[] videoCodecs) {
        this.videoCodecs = videoCodecs;
        return this;
    }
    
    public VideoV1Room(){}
}
