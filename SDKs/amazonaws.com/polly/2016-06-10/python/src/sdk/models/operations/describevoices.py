"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import describevoicesoutput as shared_describevoicesoutput
from enum import Enum
from typing import Any, Optional

class DescribeVoicesEngineEnum(str, Enum):
    r"""Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly when processing input text for speech synthesis."""
    STANDARD = 'standard'
    NEURAL = 'neural'

class DescribeVoicesLanguageCodeEnum(str, Enum):
    r"""The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned."""
    ARB = 'arb'
    CMN_CN = 'cmn-CN'
    CY_GB = 'cy-GB'
    DA_DK = 'da-DK'
    DE_DE = 'de-DE'
    EN_AU = 'en-AU'
    EN_GB = 'en-GB'
    EN_GB_WLS = 'en-GB-WLS'
    EN_IN = 'en-IN'
    EN_US = 'en-US'
    ES_ES = 'es-ES'
    ES_MX = 'es-MX'
    ES_US = 'es-US'
    FR_CA = 'fr-CA'
    FR_FR = 'fr-FR'
    IS_IS = 'is-IS'
    IT_IT = 'it-IT'
    JA_JP = 'ja-JP'
    HI_IN = 'hi-IN'
    KO_KR = 'ko-KR'
    NB_NO = 'nb-NO'
    NL_NL = 'nl-NL'
    PL_PL = 'pl-PL'
    PT_BR = 'pt-BR'
    PT_PT = 'pt-PT'
    RO_RO = 'ro-RO'
    RU_RU = 'ru-RU'
    SV_SE = 'sv-SE'
    TR_TR = 'tr-TR'
    EN_NZ = 'en-NZ'
    EN_ZA = 'en-ZA'
    CA_ES = 'ca-ES'
    DE_AT = 'de-AT'
    YUE_CN = 'yue-CN'
    AR_AE = 'ar-AE'
    FI_FI = 'fi-FI'


@dataclasses.dataclass
class DescribeVoicesRequest:
    
    engine: Optional[DescribeVoicesEngineEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Engine', 'style': 'form', 'explode': True }})
    r"""Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly when processing input text for speech synthesis."""  
    include_additional_language_codes: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'IncludeAdditionalLanguageCodes', 'style': 'form', 'explode': True }})
    r"""Boolean value indicating whether to return any bilingual voices that use the specified language as an additional language. For instance, if you request all languages that use US English (es-US), and there is an Italian voice that speaks both Italian (it-IT) and US English, that voice will be included if you specify <code>yes</code> but not if you specify <code>no</code>."""  
    language_code: Optional[DescribeVoicesLanguageCodeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LanguageCode', 'style': 'form', 'explode': True }})
    r"""The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""An opaque pagination token returned from the previous <code>DescribeVoices</code> operation. If present, this indicates where to continue the listing."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class DescribeVoicesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    describe_voices_output: Optional[shared_describevoicesoutput.DescribeVoicesOutput] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_next_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidNextTokenException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceFailureException"""  
    