/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CourseWork - Course work created by a teacher for students of the course.
 */
public class CourseWork {
    /**
     * Absolute link to this course work in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternateLink")
    public String alternateLink;

    public CourseWork withAlternateLink(String alternateLink) {
        this.alternateLink = alternateLink;
        return this;
    }
    
    /**
     * Assignee mode of the coursework. If unspecified, the default value is `ALL_STUDENTS`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assigneeMode")
    public CourseWorkAssigneeModeEnum assigneeMode;

    public CourseWork withAssigneeMode(CourseWorkAssigneeModeEnum assigneeMode) {
        this.assigneeMode = assigneeMode;
        return this;
    }
    
    /**
     * Additional details for assignments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignment")
    public Assignment assignment;

    public CourseWork withAssignment(Assignment assignment) {
        this.assignment = assignment;
        return this;
    }
    
    /**
     * Whether this course work item is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("associatedWithDeveloper")
    public Boolean associatedWithDeveloper;

    public CourseWork withAssociatedWithDeveloper(Boolean associatedWithDeveloper) {
        this.associatedWithDeveloper = associatedWithDeveloper;
        return this;
    }
    
    /**
     * Identifier of the course. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("courseId")
    public String courseId;

    public CourseWork withCourseId(String courseId) {
        this.courseId = courseId;
        return this;
    }
    
    /**
     * Timestamp when this course work was created. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTime")
    public String creationTime;

    public CourseWork withCreationTime(String creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * Identifier for the user that created the coursework. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorUserId")
    public String creatorUserId;

    public CourseWork withCreatorUserId(String creatorUserId) {
        this.creatorUserId = creatorUserId;
        return this;
    }
    
    /**
     * Optional description of this course work. If set, the description must be a valid UTF-8 string containing no more than 30,000 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CourseWork withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueDate")
    public Date dueDate;

    public CourseWork withDueDate(Date dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueTime")
    public TimeOfDay dueTime;

    public CourseWork withDueTime(TimeOfDay dueTime) {
        this.dueTime = dueTime;
        return this;
    }
    
    /**
     * Details for a grade category in a course. Coursework may have zero or one grade category, and the category may be used in computing the overall grade. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeCategory")
    public GradeCategory gradeCategory;

    public CourseWork withGradeCategory(GradeCategory gradeCategory) {
        this.gradeCategory = gradeCategory;
        return this;
    }
    
    /**
     * Classroom-assigned identifier of this course work, unique per course. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public CourseWork withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individualStudentsOptions")
    public IndividualStudentsOptions individualStudentsOptions;

    public CourseWork withIndividualStudentsOptions(IndividualStudentsOptions individualStudentsOptions) {
        this.individualStudentsOptions = individualStudentsOptions;
        return this;
    }
    
    /**
     * Additional materials. CourseWork must have no more than 20 material items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("materials")
    public Material[] materials;

    public CourseWork withMaterials(Material[] materials) {
        this.materials = materials;
        return this;
    }
    
    /**
     * Maximum grade for this course work. If zero or unspecified, this assignment is considered ungraded. This must be a non-negative integer value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxPoints")
    public Double maxPoints;

    public CourseWork withMaxPoints(Double maxPoints) {
        this.maxPoints = maxPoints;
        return this;
    }
    
    /**
     * Additional details for multiple-choice questions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multipleChoiceQuestion")
    public MultipleChoiceQuestion multipleChoiceQuestion;

    public CourseWork withMultipleChoiceQuestion(MultipleChoiceQuestion multipleChoiceQuestion) {
        this.multipleChoiceQuestion = multipleChoiceQuestion;
        return this;
    }
    
    /**
     * Optional timestamp when this course work is scheduled to be published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduledTime")
    public String scheduledTime;

    public CourseWork withScheduledTime(String scheduledTime) {
        this.scheduledTime = scheduledTime;
        return this;
    }
    
    /**
     * Status of this course work. If unspecified, the default state is `DRAFT`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CourseWorkStateEnum state;

    public CourseWork withState(CourseWorkStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Setting to determine when students are allowed to modify submissions. If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("submissionModificationMode")
    public CourseWorkSubmissionModificationModeEnum submissionModificationMode;

    public CourseWork withSubmissionModificationMode(CourseWorkSubmissionModificationModeEnum submissionModificationMode) {
        this.submissionModificationMode = submissionModificationMode;
        return this;
    }
    
    /**
     * Title of this course work. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public CourseWork withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Identifier for the topic that this coursework is associated with. Must match an existing topic in the course.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topicId")
    public String topicId;

    public CourseWork withTopicId(String topicId) {
        this.topicId = topicId;
        return this;
    }
    
    /**
     * Timestamp of the most recent change to this course work. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public CourseWork withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Type of this course work. The type is set when the course work is created and cannot be changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workType")
    public CourseWorkWorkTypeEnum workType;

    public CourseWork withWorkType(CourseWorkWorkTypeEnum workType) {
        this.workType = workType;
        return this;
    }
    
    public CourseWork(){}
}
