"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import contenttypeprofileconfig as shared_contenttypeprofileconfig
from ..shared import queryargprofileconfig as shared_queryargprofileconfig
from typing import Optional


@dataclasses.dataclass
class UpdateFieldLevelEncryptionConfig20171030RequestBodyFieldLevelEncryptionConfig:
    r"""A complex data type that includes the profile configurations specified for field-level encryption."""
    
    caller_reference: Optional[str] = dataclasses.field(default=None)  
    comment: Optional[str] = dataclasses.field(default=None)  
    content_type_profile_config: Optional[shared_contenttypeprofileconfig.ContentTypeProfileConfig] = dataclasses.field(default=None)  
    query_arg_profile_config: Optional[shared_queryargprofileconfig.QueryArgProfileConfig] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class UpdateFieldLevelEncryptionConfig20171030RequestBody:
    
    field_level_encryption_config: UpdateFieldLevelEncryptionConfig20171030RequestBodyFieldLevelEncryptionConfig = dataclasses.field()
    r"""A complex data type that includes the profile configurations specified for field-level encryption."""  
    

@dataclasses.dataclass
class UpdateFieldLevelEncryptionConfig20171030Request:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Id', 'style': 'simple', 'explode': False }})
    r"""The ID of the configuration you want to update."""  
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': 'text/xml' }})  
    if_match: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-Match', 'style': 'simple', 'explode': False }})
    r"""The value of the <code>ETag</code> header that you received when retrieving the configuration identity to update. For example: <code>E2QWRUHAPOMQZL</code>."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateFieldLevelEncryptionConfig20171030Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    