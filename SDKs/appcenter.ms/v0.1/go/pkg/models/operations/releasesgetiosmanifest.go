// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesGetIosManifestRequest struct {
	// The ID of the application
	AppID string `pathParam:"style=simple,explode=false,name=app_id"`
	// The release_id
	ReleaseID int64 `pathParam:"style=simple,explode=false,name=release_id"`
	// A hash that authorizes the download if it matches the release info.
	Token string `queryParam:"style=form,explode=true,name=token"`
}

type ReleasesGetIosManifest404ApplicationJSONCodeEnum string

const (
	ReleasesGetIosManifest404ApplicationJSONCodeEnumBadRequest          ReleasesGetIosManifest404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetIosManifest404ApplicationJSONCodeEnumConflict            ReleasesGetIosManifest404ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetIosManifest404ApplicationJSONCodeEnumNotAcceptable       ReleasesGetIosManifest404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetIosManifest404ApplicationJSONCodeEnumNotFound            ReleasesGetIosManifest404ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetIosManifest404ApplicationJSONCodeEnumInternalServerError ReleasesGetIosManifest404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetIosManifest404ApplicationJSONCodeEnumUnauthorized        ReleasesGetIosManifest404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetIosManifest404ApplicationJSONCodeEnumTooManyRequests     ReleasesGetIosManifest404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesGetIosManifest404ApplicationJSONCodeEnum) ToPointer() *ReleasesGetIosManifest404ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesGetIosManifest404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetIosManifest404ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetIosManifest404ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesGetIosManifest404ApplicationJSON - The app or release can't be found.
type ReleasesGetIosManifest404ApplicationJSON struct {
	Code    ReleasesGetIosManifest404ApplicationJSONCodeEnum `json:"code"`
	Message string                                           `json:"message"`
}

type ReleasesGetIosManifest403ApplicationJSONCodeEnum string

const (
	ReleasesGetIosManifest403ApplicationJSONCodeEnumBadRequest          ReleasesGetIosManifest403ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetIosManifest403ApplicationJSONCodeEnumConflict            ReleasesGetIosManifest403ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetIosManifest403ApplicationJSONCodeEnumNotAcceptable       ReleasesGetIosManifest403ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetIosManifest403ApplicationJSONCodeEnumNotFound            ReleasesGetIosManifest403ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetIosManifest403ApplicationJSONCodeEnumInternalServerError ReleasesGetIosManifest403ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetIosManifest403ApplicationJSONCodeEnumUnauthorized        ReleasesGetIosManifest403ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetIosManifest403ApplicationJSONCodeEnumTooManyRequests     ReleasesGetIosManifest403ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesGetIosManifest403ApplicationJSONCodeEnum) ToPointer() *ReleasesGetIosManifest403ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesGetIosManifest403ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetIosManifest403ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetIosManifest403ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesGetIosManifest403ApplicationJSON - Forbidden - The token provided doesn't match the release's token.
type ReleasesGetIosManifest403ApplicationJSON struct {
	Code    ReleasesGetIosManifest403ApplicationJSONCodeEnum `json:"code"`
	Message string                                           `json:"message"`
}

type ReleasesGetIosManifest400ApplicationJSONCodeEnum string

const (
	ReleasesGetIosManifest400ApplicationJSONCodeEnumBadRequest          ReleasesGetIosManifest400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetIosManifest400ApplicationJSONCodeEnumConflict            ReleasesGetIosManifest400ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetIosManifest400ApplicationJSONCodeEnumNotAcceptable       ReleasesGetIosManifest400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetIosManifest400ApplicationJSONCodeEnumNotFound            ReleasesGetIosManifest400ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetIosManifest400ApplicationJSONCodeEnumInternalServerError ReleasesGetIosManifest400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetIosManifest400ApplicationJSONCodeEnumUnauthorized        ReleasesGetIosManifest400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetIosManifest400ApplicationJSONCodeEnumTooManyRequests     ReleasesGetIosManifest400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesGetIosManifest400ApplicationJSONCodeEnum) ToPointer() *ReleasesGetIosManifest400ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesGetIosManifest400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetIosManifest400ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetIosManifest400ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesGetIosManifest400ApplicationJSON - The app's OS is not iOS.
type ReleasesGetIosManifest400ApplicationJSON struct {
	Code    ReleasesGetIosManifest400ApplicationJSONCodeEnum `json:"code"`
	Message string                                           `json:"message"`
}

type ReleasesGetIosManifestResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The app's OS is not iOS.
	ReleasesGetIosManifest400ApplicationJSONObject *ReleasesGetIosManifest400ApplicationJSON
	// Forbidden - The token provided doesn't match the release's token.
	ReleasesGetIosManifest403ApplicationJSONObject *ReleasesGetIosManifest403ApplicationJSON
	// The app or release can't be found.
	ReleasesGetIosManifest404ApplicationJSONObject *ReleasesGetIosManifest404ApplicationJSON
}
