"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cdnsettings as shared_cdnsettings
from ..shared import livestreamcontentdetails as shared_livestreamcontentdetails
from ..shared import livestreamsnippet as shared_livestreamsnippet
from ..shared import livestreamstatus as shared_livestreamstatus
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LiveStream:
    r"""A live stream describes a live ingestion point."""
    
    cdn: Optional[shared_cdnsettings.CdnSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cdn'), 'exclude': lambda f: f is None }})
    r"""Brief description of the live stream cdn settings."""  
    content_details: Optional[shared_livestreamcontentdetails.LiveStreamContentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentDetails'), 'exclude': lambda f: f is None }})
    r"""Detailed settings of a stream."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Etag of this resource."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID that YouTube assigns to uniquely identify the stream."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"youtube#liveStream\\"."""  
    snippet: Optional[shared_livestreamsnippet.LiveStreamSnippet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snippet'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_livestreamstatus.LiveStreamStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Brief description of the live stream status."""  
    