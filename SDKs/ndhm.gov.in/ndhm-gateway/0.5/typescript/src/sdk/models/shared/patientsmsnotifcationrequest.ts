/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class PatientSMSNotifcationRequestNotificationHip extends SpeakeasyBase {
  /**
   * Registered id of the HIP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Name of the HIP(Hospital). Hospital's name will be fetched from registry if not provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class PatientSMSNotifcationRequestNotification extends SpeakeasyBase {
  /**
   * Information about care context or visit for which the SMS is being sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "careContextInfo" })
  careContextInfo: string;

  /**
   * A link pointing to digital health records of the patient. PHR App's deeplink will be sent in SMS if this field is not provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deeplinkUrl" })
  deeplinkUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hip" })
  @Type(() => PatientSMSNotifcationRequestNotificationHip)
  hip: PatientSMSNotifcationRequestNotificationHip;

  /**
   * Phone number of the receiver with country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phoneNo" })
  phoneNo: string;

  /**
   * Name of the reciever/patient. Receiver's name will not be sent if not provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "receiverName" })
  receiverName?: string;
}

export class PatientSMSNotifcationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "notification" })
  @Type(() => PatientSMSNotifcationRequestNotification)
  notification: PatientSMSNotifcationRequestNotification;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
