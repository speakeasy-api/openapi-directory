// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateRulePathParams struct {
	// The unique ID of the retention rule.
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
}

type UpdateRuleHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateRuleRequestBodyResourceTypeEnum - <note> <p>This parameter is currently not supported. You can't update a retention rule's resource type after creation.</p> </note>
type UpdateRuleRequestBodyResourceTypeEnum string

const (
	UpdateRuleRequestBodyResourceTypeEnumEbsSnapshot UpdateRuleRequestBodyResourceTypeEnum = "EBS_SNAPSHOT"
	UpdateRuleRequestBodyResourceTypeEnumEc2Image    UpdateRuleRequestBodyResourceTypeEnum = "EC2_IMAGE"
)

func (e *UpdateRuleRequestBodyResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EBS_SNAPSHOT":
		fallthrough
	case "EC2_IMAGE":
		*e = UpdateRuleRequestBodyResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRuleRequestBodyResourceTypeEnum: %s", s)
	}
}

// UpdateRuleRequestBodyRetentionPeriod - Information about the retention period for which the retention rule is to retain resources.
type UpdateRuleRequestBodyRetentionPeriod struct {
	RetentionPeriodUnit  *shared.RetentionPeriodUnitEnum `json:"RetentionPeriodUnit,omitempty"`
	RetentionPeriodValue *int64                          `json:"RetentionPeriodValue,omitempty"`
}

type UpdateRuleRequestBody struct {
	// The retention rule description.
	Description *string `json:"Description,omitempty"`
	// <p>Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.</p> <p>You can add the same tag key and value pair to a maximum or five retention rules.</p> <p>To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.</p>
	ResourceTags []shared.ResourceTag `json:"ResourceTags,omitempty"`
	// <note> <p>This parameter is currently not supported. You can't update a retention rule's resource type after creation.</p> </note>
	ResourceType *UpdateRuleRequestBodyResourceTypeEnum `json:"ResourceType,omitempty"`
	// Information about the retention period for which the retention rule is to retain resources.
	RetentionPeriod *UpdateRuleRequestBodyRetentionPeriod `json:"RetentionPeriod,omitempty"`
}

type UpdateRuleRequest struct {
	PathParams UpdateRulePathParams
	Headers    UpdateRuleHeaders
	Request    UpdateRuleRequestBody `request:"mediaType=application/json"`
}

type UpdateRuleResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdateRuleResponse *shared.UpdateRuleResponse
	// ValidationException
	ValidationException interface{}
}
