"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_productbasicinfo as shared_beezup_common_productbasicinfo
from ..shared import reportbyproductlinks as shared_reportbyproductlinks
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportByProduct:
    
    channel_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCount') }})
    r"""The channel count where this product can be enabled"""  
    click_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickCount') }})
    r"""The click count for this product"""  
    cost: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost') }})
    r"""The cost for this product"""  
    enabled_on_channel_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabledOnChannelCount') }})
    r"""The count of channel where this product is enabled"""  
    links: shared_reportbyproductlinks.ReportByProductLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})
    r"""Depending if the report concerned multiple channels or one channel."""  
    order_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderCount') }})
    r"""The order count for this product"""  
    performance_indicator: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceIndicator') }})
    r"""The performance indicator based on the performance indicator formula indicated in the request for this product"""  
    product: shared_beezup_common_productbasicinfo.BeezUPCommonProductBasicInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product') }})
    r"""The basic information related to a product"""  
    sold_product_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('soldProductCount') }})
    r"""The product sold count count for this product"""  
    total_sales: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSales') }})
    r"""The total sales for this product"""  
    margin: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('margin'), 'exclude': lambda f: f is None }})
    r"""The margin for this product"""  
    roi: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roi'), 'exclude': lambda f: f is None }})
    r"""The Return On Investment for this product"""  
    