/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { JsonSchema } from "./jsonschema";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Supports the Resumable Media Upload protocol.
 */
export class RestMethodMediaUploadProtocolsResumable extends SpeakeasyBase {
  /**
   * True if this endpoint supports uploading multipart media.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multipart" })
  multipart?: boolean;

  /**
   * The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;
}

/**
 * Supports uploading as a single HTTP request.
 */
export class RestMethodMediaUploadProtocolsSimple extends SpeakeasyBase {
  /**
   * True if this endpoint supports upload multipart media.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multipart" })
  multipart?: boolean;

  /**
   * The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;
}

/**
 * Supported upload protocols.
 */
export class RestMethodMediaUploadProtocols extends SpeakeasyBase {
  /**
   * Supports the Resumable Media Upload protocol.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resumable" })
  @Type(() => RestMethodMediaUploadProtocolsResumable)
  resumable?: RestMethodMediaUploadProtocolsResumable;

  /**
   * Supports uploading as a single HTTP request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "simple" })
  @Type(() => RestMethodMediaUploadProtocolsSimple)
  simple?: RestMethodMediaUploadProtocolsSimple;
}

/**
 * Media upload parameters.
 */
export class RestMethodMediaUpload extends SpeakeasyBase {
  /**
   * MIME Media Ranges for acceptable media uploads to this method.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accept" })
  accept?: string[];

  /**
   * Maximum size of a media upload, such as "1MB", "2GB" or "3TB".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxSize" })
  maxSize?: string;

  /**
   * Supported upload protocols.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocols" })
  @Type(() => RestMethodMediaUploadProtocols)
  protocols?: RestMethodMediaUploadProtocols;
}

/**
 * The schema for the request.
 */
export class RestMethodRequest extends SpeakeasyBase {
  /**
   * Schema ID for the request schema.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "$ref" })
  dollarRef?: string;

  /**
   * parameter name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameterName" })
  parameterName?: string;
}

/**
 * The schema for the response.
 */
export class RestMethodResponse extends SpeakeasyBase {
  /**
   * Schema ID for the response schema.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "$ref" })
  dollarRef?: string;
}

export class RestMethod extends SpeakeasyBase {
  /**
   * Description of this method.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etagRequired" })
  etagRequired?: boolean;

  /**
   * The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flatPath" })
  flatPath?: string;

  /**
   * HTTP method used by this method.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpMethod" })
  httpMethod?: string;

  /**
   * A unique ID for this method. This property can be used to match methods between different versions of Discovery.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Media upload parameters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mediaUpload" })
  @Type(() => RestMethodMediaUpload)
  mediaUpload?: RestMethodMediaUpload;

  /**
   * Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameterOrder" })
  parameterOrder?: string[];

  /**
   * Details for all parameters in this method.
   */
  @SpeakeasyMetadata({ elemType: JsonSchema })
  @Expose({ name: "parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, JsonSchema> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], JsonSchema);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, JsonSchema>;

  /**
   * The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;

  /**
   * The schema for the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request" })
  @Type(() => RestMethodRequest)
  request?: RestMethodRequest;

  /**
   * The schema for the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  @Type(() => RestMethodResponse)
  response?: RestMethodResponse;

  /**
   * OAuth 2.0 scopes applicable to this method.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scopes" })
  scopes?: string[];

  /**
   * Whether this method supports media downloads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supportsMediaDownload" })
  supportsMediaDownload?: boolean;

  /**
   * Whether this method supports media uploads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supportsMediaUpload" })
  supportsMediaUpload?: boolean;

  /**
   * Whether this method supports subscriptions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supportsSubscription" })
  supportsSubscription?: boolean;

  /**
   * Indicates that downloads from this method should use the download service URL (i.e. "/download"). Only applies if the method supports media download.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useMediaDownloadService" })
  useMediaDownloadService?: boolean;
}
