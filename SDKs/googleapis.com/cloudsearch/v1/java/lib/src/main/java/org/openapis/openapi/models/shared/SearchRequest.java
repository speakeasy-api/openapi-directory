/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SearchRequest - The search API request.
 */
public class SearchRequest {
    /**
     * Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contextAttributes")
    public ContextAttribute[] contextAttributes;
    public SearchRequest withContextAttributes(ContextAttribute[] contextAttributes) {
        this.contextAttributes = contextAttributes;
        return this;
    }
    
    /**
     * The sources to use for querying. If not specified, all data sources from the current search application are used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceRestrictions")
    public DataSourceRestriction[] dataSourceRestrictions;
    public SearchRequest withDataSourceRestrictions(DataSourceRestriction[] dataSourceRestrictions) {
        this.dataSourceRestrictions = dataSourceRestrictions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facetOptions")
    public FacetOptions[] facetOptions;
    public SearchRequest withFacetOptions(FacetOptions[] facetOptions) {
        this.facetOptions = facetOptions;
        return this;
    }
    
    /**
     * Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageSize")
    public Integer pageSize;
    public SearchRequest withPageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public String query;
    public SearchRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Options to interpret user query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryInterpretationOptions")
    public QueryInterpretationOptions queryInterpretationOptions;
    public SearchRequest withQueryInterpretationOptions(QueryInterpretationOptions queryInterpretationOptions) {
        this.queryInterpretationOptions = queryInterpretationOptions;
        return this;
    }
    
    /**
     * Shared request options for all RPC methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestOptions")
    public RequestOptions requestOptions;
    public SearchRequest withRequestOptions(RequestOptions requestOptions) {
        this.requestOptions = requestOptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOptions")
    public SortOptions sortOptions;
    public SearchRequest withSortOptions(SortOptions sortOptions) {
        this.sortOptions = sortOptions;
        return this;
    }
    
    /**
     * Starting index of the results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start")
    public Integer start;
    public SearchRequest withStart(Integer start) {
        this.start = start;
        return this;
    }
    
}
