"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import httpcachecontrolresponseheader as shared_httpcachecontrolresponseheader
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOpenIDConfigResponse:
    r"""GetOpenIDConfigResponse is an OIDC discovery document for the cluster. See the OpenID Connect Discovery 1.0 specification for details."""
    
    cache_header: Optional[shared_httpcachecontrolresponseheader.HTTPCacheControlResponseHeader] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheHeader'), 'exclude': lambda f: f is None }})
    r"""RFC-2616: cache control support"""  
    claims_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('claims_supported'), 'exclude': lambda f: f is None }})
    r"""Supported claims."""  
    grant_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_types'), 'exclude': lambda f: f is None }})
    r"""Supported grant types."""  
    id_token_signing_alg_values_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_token_signing_alg_values_supported'), 'exclude': lambda f: f is None }})
    r"""supported ID Token signing Algorithms."""  
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuer'), 'exclude': lambda f: f is None }})
    r"""OIDC Issuer."""  
    jwks_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwks_uri'), 'exclude': lambda f: f is None }})
    r"""JSON Web Key uri."""  
    response_types_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_types_supported'), 'exclude': lambda f: f is None }})
    r"""Supported response types."""  
    subject_types_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject_types_supported'), 'exclude': lambda f: f is None }})
    r"""Supported subject types."""  
    