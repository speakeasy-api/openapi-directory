"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Entities:
    r"""Entities APIs"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_cluster(self, request: operations.GetClusterRequest, security: operations.GetClusterSecurity) -> operations.GetClusterResponse:
        r"""Show cluster details
        Show cluster details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetClusterRequest, base_url, '/entities/clusters/{id}', request)
        
        query_params = utils.get_query_params(operations.GetClusterRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClusterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Cluster])
                res.cluster = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_datacenter(self, request: operations.GetDatacenterRequest, security: operations.GetDatacenterSecurity) -> operations.GetDatacenterResponse:
        r"""Show vCenter datacenter details
        Show vCenter datacenter details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDatacenterRequest, base_url, '/entities/vc-datacenters/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDatacenterRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDatacenterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VCDatacenter])
                res.vc_datacenter = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_datastore(self, request: operations.GetDatastoreRequest, security: operations.GetDatastoreSecurity) -> operations.GetDatastoreResponse:
        r"""Show datastore details
        Show datastore details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDatastoreRequest, base_url, '/entities/datastores/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDatastoreRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDatastoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Datastore])
                res.datastore = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_distributed_virtual_portgroup(self, request: operations.GetDistributedVirtualPortgroupRequest, security: operations.GetDistributedVirtualPortgroupSecurity) -> operations.GetDistributedVirtualPortgroupResponse:
        r"""Show distributed virtual portgroup details
        Show distributed virtual portgroup details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistributedVirtualPortgroupRequest, base_url, '/entities/distributed-virtual-portgroups/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDistributedVirtualPortgroupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistributedVirtualPortgroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DistributedVirtualPortgroup])
                res.distributed_virtual_portgroup = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_distributed_virtual_switch(self, request: operations.GetDistributedVirtualSwitchRequest, security: operations.GetDistributedVirtualSwitchSecurity) -> operations.GetDistributedVirtualSwitchResponse:
        r"""Show distributed virtual switch details
        Show distributed virtual switch details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistributedVirtualSwitchRequest, base_url, '/entities/distributed-virtual-switches/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDistributedVirtualSwitchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistributedVirtualSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DistributedVirtualSwitch])
                res.distributed_virtual_switch = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_firewall(self, request: operations.GetFirewallRequest, security: operations.GetFirewallSecurity) -> operations.GetFirewallResponse:
        r"""Show firewall details
        Show firewall details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFirewallRequest, base_url, '/entities/firewalls/{id}', request)
        
        query_params = utils.get_query_params(operations.GetFirewallRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseFirewallRule])
                res.base_firewall_rule = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_firewall_rule(self, request: operations.GetFirewallRuleRequest, security: operations.GetFirewallRuleSecurity) -> operations.GetFirewallRuleResponse:
        r"""Show firewall rule details
        Show firewall rule details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFirewallRuleRequest, base_url, '/entities/firewall-rules/{id}', request)
        
        query_params = utils.get_query_params(operations.GetFirewallRuleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFirewallRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseFirewallRule])
                res.base_firewall_rule = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_flow(self, request: operations.GetFlowRequest, security: operations.GetFlowSecurity) -> operations.GetFlowResponse:
        r"""Show flow details
        Show flow details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFlowRequest, base_url, '/entities/flows/{id}', request)
        
        query_params = utils.get_query_params(operations.GetFlowRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFlowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Flow])
                res.flow = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_flows(self, request: operations.GetFlowsRequest, security: operations.GetFlowsSecurity) -> operations.GetFlowsResponse:
        r"""List flows
        List flows
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/flows'
        
        query_params = utils.get_query_params(operations.GetFlowsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFlowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def get_folder(self, request: operations.GetFolderRequest, security: operations.GetFolderSecurity) -> operations.GetFolderResponse:
        r"""Show folder details
        Show folder details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFolderRequest, base_url, '/entities/folders/{id}', request)
        
        query_params = utils.get_query_params(operations.GetFolderRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFolderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Folder])
                res.folder = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_host(self, request: operations.GetHostRequest, security: operations.GetHostSecurity) -> operations.GetHostResponse:
        r"""Show host details
        Show host details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHostRequest, base_url, '/entities/hosts/{id}', request)
        
        query_params = utils.get_query_params(operations.GetHostRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Host])
                res.host = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_ip_set(self, request: operations.GetIPSetRequest, security: operations.GetIPSetSecurity) -> operations.GetIPSetResponse:
        r"""Show ip set details
        Show ip set details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIPSetRequest, base_url, '/entities/ip-sets/{id}', request)
        
        query_params = utils.get_query_params(operations.GetIPSetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseIPSet])
                res.base_ip_set = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_layer2_network(self, request: operations.GetLayer2NetworkRequest, security: operations.GetLayer2NetworkSecurity) -> operations.GetLayer2NetworkResponse:
        r"""Show layer2 network details
        Show layer2 network details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLayer2NetworkRequest, base_url, '/entities/layer2-networks/{id}', request)
        
        query_params = utils.get_query_params(operations.GetLayer2NetworkRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLayer2NetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseL2Network])
                res.base_l2_network = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_nsx_manager(self, request: operations.GetNSXManagerRequest, security: operations.GetNSXManagerSecurity) -> operations.GetNSXManagerResponse:
        r"""Show nsx manager details
        Show nsx manager details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNSXManagerRequest, base_url, '/entities/nsx-managers/{id}', request)
        
        query_params = utils.get_query_params(operations.GetNSXManagerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNSXManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseEntity])
                res.base_entity = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_name(self, request: operations.GetNameRequest, security: operations.GetNameSecurity) -> operations.GetNameResponse:
        r"""Get name of an entity
        Get name of an entity
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNameRequest, base_url, '/entities/names/{id}', request)
        
        query_params = utils.get_query_params(operations.GetNameRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityName])
                res.entity_name = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def get_names(self, request: shared.NamesRequest, security: operations.GetNamesSecurity) -> operations.GetNamesResponse:
        r"""Get names for entities
        Get names for entities.Limit of 1000 entities in a single request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/names'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNamesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NamesResponse])
                res.names_response = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def get_problem_event(self, request: operations.GetProblemEventRequest, security: operations.GetProblemEventSecurity) -> operations.GetProblemEventResponse:
        r"""Show problem details
        Show problem event details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProblemEventRequest, base_url, '/entities/problems/{id}', request)
        
        query_params = utils.get_query_params(operations.GetProblemEventRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProblemEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemEvent])
                res.problem_event = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_security_group(self, request: operations.GetSecurityGroupRequest, security: operations.GetSecurityGroupSecurity) -> operations.GetSecurityGroupResponse:
        r"""Show security group details
        Show security group details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSecurityGroupRequest, base_url, '/entities/security-groups/{id}', request)
        
        query_params = utils.get_query_params(operations.GetSecurityGroupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSecurityGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseSecurityGroup])
                res.base_security_group = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_security_tag(self, request: operations.GetSecurityTagRequest, security: operations.GetSecurityTagSecurity) -> operations.GetSecurityTagResponse:
        r"""Show security tag details
        Show security tag details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSecurityTagRequest, base_url, '/entities/security-tags/{id}', request)
        
        query_params = utils.get_query_params(operations.GetSecurityTagRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSecurityTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecurityTag])
                res.security_tag = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_service(self, request: operations.GetServiceRequest, security: operations.GetServiceSecurity) -> operations.GetServiceResponse:
        r"""Show service details
        Show service details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetServiceRequest, base_url, '/entities/services/{id}', request)
        
        query_params = utils.get_query_params(operations.GetServiceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseService])
                res.base_service = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_service_group(self, request: operations.GetServiceGroupRequest, security: operations.GetServiceGroupSecurity) -> operations.GetServiceGroupResponse:
        r"""Show service group details
        Show service group details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetServiceGroupRequest, base_url, '/entities/service-groups/{id}', request)
        
        query_params = utils.get_query_params(operations.GetServiceGroupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetServiceGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_vcenter_manager(self, request: operations.GetVcenterManagerRequest, security: operations.GetVcenterManagerSecurity) -> operations.GetVcenterManagerResponse:
        r"""Show vCenter manager details
        Show vCenter manager details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVcenterManagerRequest, base_url, '/entities/vcenter-managers/{id}', request)
        
        query_params = utils.get_query_params(operations.GetVcenterManagerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVcenterManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VCenterManager])
                res.v_center_manager = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_vm(self, request: operations.GetVMRequest, security: operations.GetVMSecurity) -> operations.GetVMResponse:
        r"""Show vm details
        Show vm details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVMRequest, base_url, '/entities/vms/{id}', request)
        
        query_params = utils.get_query_params(operations.GetVMRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVMResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseVirtualMachine])
                res.base_virtual_machine = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_vmknic(self, request: operations.GetVmknicRequest, security: operations.GetVmknicSecurity) -> operations.GetVmknicResponse:
        r"""Show vmknic details
        Show vmknic details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVmknicRequest, base_url, '/entities/vmknics/{id}', request)
        
        query_params = utils.get_query_params(operations.GetVmknicRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVmknicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Vmknic])
                res.vmknic = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_vnic(self, request: operations.GetVnicRequest, security: operations.GetVnicSecurity) -> operations.GetVnicResponse:
        r"""Show vnic details
        Show vnic details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVnicRequest, base_url, '/entities/vnics/{id}', request)
        
        query_params = utils.get_query_params(operations.GetVnicRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVnicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BaseVnic])
                res.base_vnic = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def list_clusters(self, request: operations.ListClustersRequest, security: operations.ListClustersSecurity) -> operations.ListClustersResponse:
        r"""List clusters
        List clusters
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/clusters'
        
        query_params = utils.get_query_params(operations.ListClustersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListClustersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_datacenters(self, request: operations.ListDatacentersRequest, security: operations.ListDatacentersSecurity) -> operations.ListDatacentersResponse:
        r"""List vCenter datacenters
        List vCenter datacenters
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/vc-datacenters'
        
        query_params = utils.get_query_params(operations.ListDatacentersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDatacentersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_datastores(self, request: operations.ListDatastoresRequest, security: operations.ListDatastoresSecurity) -> operations.ListDatastoresResponse:
        r"""List datastores
        List datastores
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/datastores'
        
        query_params = utils.get_query_params(operations.ListDatastoresRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDatastoresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_distributed_virtual_portgroups(self, request: operations.ListDistributedVirtualPortgroupsRequest, security: operations.ListDistributedVirtualPortgroupsSecurity) -> operations.ListDistributedVirtualPortgroupsResponse:
        r"""List distributed virtual portgroups
        List distributed virtual portgroups
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/distributed-virtual-portgroups'
        
        query_params = utils.get_query_params(operations.ListDistributedVirtualPortgroupsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDistributedVirtualPortgroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_distributed_virtual_switches(self, request: operations.ListDistributedVirtualSwitchesRequest, security: operations.ListDistributedVirtualSwitchesSecurity) -> operations.ListDistributedVirtualSwitchesResponse:
        r"""List distributed virtual switches
        List distributed virtual switches
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/distributed-virtual-switches'
        
        query_params = utils.get_query_params(operations.ListDistributedVirtualSwitchesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDistributedVirtualSwitchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_firewall_rules(self, request: operations.ListFirewallRulesRequest, security: operations.ListFirewallRulesSecurity) -> operations.ListFirewallRulesResponse:
        r"""List firewall rules
        List firewall rules
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/firewall-rules'
        
        query_params = utils.get_query_params(operations.ListFirewallRulesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFirewallRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_firewalls(self, request: operations.ListFirewallsRequest, security: operations.ListFirewallsSecurity) -> operations.ListFirewallsResponse:
        r"""List firewalls
        List firewalls
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/firewalls'
        
        query_params = utils.get_query_params(operations.ListFirewallsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFirewallsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_folders(self, request: operations.ListFoldersRequest, security: operations.ListFoldersSecurity) -> operations.ListFoldersResponse:
        r"""List folders
        List folders
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/folders'
        
        query_params = utils.get_query_params(operations.ListFoldersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_hosts(self, request: operations.ListHostsRequest, security: operations.ListHostsSecurity) -> operations.ListHostsResponse:
        r"""List hosts
        List hosts
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/hosts'
        
        query_params = utils.get_query_params(operations.ListHostsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListHostsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_ip_sets(self, request: operations.ListIPSetsRequest, security: operations.ListIPSetsSecurity) -> operations.ListIPSetsResponse:
        r"""List ip sets
        List ip sets
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/ip-sets'
        
        query_params = utils.get_query_params(operations.ListIPSetsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListIPSetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_layer2_networks(self, request: operations.ListLayer2NetworksRequest, security: operations.ListLayer2NetworksSecurity) -> operations.ListLayer2NetworksResponse:
        r"""List layer2 networks
        List layer2 networks
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/layer2-networks'
        
        query_params = utils.get_query_params(operations.ListLayer2NetworksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListLayer2NetworksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_nsx_managers(self, request: operations.ListNSXManagersRequest, security: operations.ListNSXManagersSecurity) -> operations.ListNSXManagersResponse:
        r"""List nsx managers
        List nsx managers
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/nsx-managers'
        
        query_params = utils.get_query_params(operations.ListNSXManagersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListNSXManagersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_problem_events(self, request: operations.ListProblemEventsRequest, security: operations.ListProblemEventsSecurity) -> operations.ListProblemEventsResponse:
        r"""List problems
        List problem events.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/problems'
        
        query_params = utils.get_query_params(operations.ListProblemEventsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProblemEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_security_groups(self, request: operations.ListSecurityGroupsRequest, security: operations.ListSecurityGroupsSecurity) -> operations.ListSecurityGroupsResponse:
        r"""List security groups
        List security groups
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/security-groups'
        
        query_params = utils.get_query_params(operations.ListSecurityGroupsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSecurityGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_security_tags(self, request: operations.ListSecurityTagsRequest, security: operations.ListSecurityTagsSecurity) -> operations.ListSecurityTagsResponse:
        r"""List security tags
        List security tags
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/security-tags'
        
        query_params = utils.get_query_params(operations.ListSecurityTagsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSecurityTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_service_groups(self, request: operations.ListServiceGroupsRequest, security: operations.ListServiceGroupsSecurity) -> operations.ListServiceGroupsResponse:
        r"""List service groups
        List service groups
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/service-groups'
        
        query_params = utils.get_query_params(operations.ListServiceGroupsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListServiceGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_services(self, request: operations.ListServicesRequest, security: operations.ListServicesSecurity) -> operations.ListServicesResponse:
        r"""List services
        List services
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/services'
        
        query_params = utils.get_query_params(operations.ListServicesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListServicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_vcenter_managers(self, request: operations.ListVcenterManagersRequest, security: operations.ListVcenterManagersSecurity) -> operations.ListVcenterManagersResponse:
        r"""List vCenter managers
        List vCenter managers
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/vcenter-managers'
        
        query_params = utils.get_query_params(operations.ListVcenterManagersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListVcenterManagersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_vmknics(self, request: operations.ListVmknicsRequest, security: operations.ListVmknicsSecurity) -> operations.ListVmknicsResponse:
        r"""List vmknics
        List vmknics
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/vmknics'
        
        query_params = utils.get_query_params(operations.ListVmknicsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListVmknicsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_vms(self, request: operations.ListVmsRequest, security: operations.ListVmsSecurity) -> operations.ListVmsResponse:
        r"""List vms
        List vms
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/vms'
        
        query_params = utils.get_query_params(operations.ListVmsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListVmsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def list_vnics(self, request: operations.ListVnicsRequest, security: operations.ListVnicsSecurity) -> operations.ListVnicsResponse:
        r"""List vnics
        List vnics
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entities/vnics'
        
        query_params = utils.get_query_params(operations.ListVnicsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListVnicsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedListResponseWithTime])
                res.paged_list_response_with_time = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    