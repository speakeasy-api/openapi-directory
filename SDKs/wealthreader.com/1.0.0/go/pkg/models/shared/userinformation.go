// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

type UserInformationGenderEnum string

const (
	UserInformationGenderEnumMale   UserInformationGenderEnum = "male"
	UserInformationGenderEnumFemale UserInformationGenderEnum = "female"
)

func (e *UserInformationGenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		*e = UserInformationGenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserInformationGenderEnum: %s", s)
	}
}

type UserInformationMaritalStatusEnum string

const (
	UserInformationMaritalStatusEnumSingle  UserInformationMaritalStatusEnum = "single"
	UserInformationMaritalStatusEnumMarried UserInformationMaritalStatusEnum = "married"
)

func (e *UserInformationMaritalStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "married":
		*e = UserInformationMaritalStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserInformationMaritalStatusEnum: %s", s)
	}
}

// UserInformation - Información relativa a la persona que hace login
type UserInformation struct {
	ID         string      `json:"ID"`
	Address    *string     `json:"address,omitempty"`
	BirthDate  *types.Date `json:"birth_date,omitempty"`
	BirthPlace *string     `json:"birth_place,omitempty"`
	// Número de teléfono con el prefijo internacional, sin espacios
	CellPhone *string                    `json:"cell_phone,omitempty"`
	City      *string                    `json:"city,omitempty"`
	Country   *string                    `json:"country,omitempty"`
	Email     *string                    `json:"email,omitempty"`
	Gender    *UserInformationGenderEnum `json:"gender,omitempty"`
	// El valor aquí es muy variable de una entidad a otra: de indicar solamente si es cuenta propia o cuenta ajena a indicar el tipo de profesión
	Job           *string                           `json:"job,omitempty"`
	MaritalStatus *UserInformationMaritalStatusEnum `json:"marital_status,omitempty"`
	Name          string                            `json:"name"`
	PostalCode    *string                           `json:"postal_code,omitempty"`
}
