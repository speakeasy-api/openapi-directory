// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ImageCreateResultStatusEnum string

const (
	ImageCreateResultStatusEnumOk                  ImageCreateResultStatusEnum = "OK"
	ImageCreateResultStatusEnumOkDuplicate         ImageCreateResultStatusEnum = "OKDuplicate"
	ImageCreateResultStatusEnumErrorSource         ImageCreateResultStatusEnum = "ErrorSource"
	ImageCreateResultStatusEnumErrorImageFormat    ImageCreateResultStatusEnum = "ErrorImageFormat"
	ImageCreateResultStatusEnumErrorImageSize      ImageCreateResultStatusEnum = "ErrorImageSize"
	ImageCreateResultStatusEnumErrorStorage        ImageCreateResultStatusEnum = "ErrorStorage"
	ImageCreateResultStatusEnumErrorLimitExceed    ImageCreateResultStatusEnum = "ErrorLimitExceed"
	ImageCreateResultStatusEnumErrorTagLimitExceed ImageCreateResultStatusEnum = "ErrorTagLimitExceed"
	ImageCreateResultStatusEnumErrorUnknown        ImageCreateResultStatusEnum = "ErrorUnknown"
)

func (e *ImageCreateResultStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OK":
		fallthrough
	case "OKDuplicate":
		fallthrough
	case "ErrorSource":
		fallthrough
	case "ErrorImageFormat":
		fallthrough
	case "ErrorImageSize":
		fallthrough
	case "ErrorStorage":
		fallthrough
	case "ErrorLimitExceed":
		fallthrough
	case "ErrorTagLimitExceed":
		fallthrough
	case "ErrorUnknown":
		*e = ImageCreateResultStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageCreateResultStatusEnum: %s", s)
	}
}

type ImageCreateResult struct {
	// Image model to be sent as JSON
	Image     *Image                       `json:"Image,omitempty"`
	SourceURL *string                      `json:"SourceUrl,omitempty"`
	Status    *ImageCreateResultStatusEnum `json:"Status,omitempty"`
}
