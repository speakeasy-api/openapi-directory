// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PersonalNameParsedOutNameParserTypeEnum - Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
type PersonalNameParsedOutNameParserTypeEnum string

const (
	PersonalNameParsedOutNameParserTypeEnumFn1Ln1 PersonalNameParsedOutNameParserTypeEnum = "FN1LN1"
	PersonalNameParsedOutNameParserTypeEnumLn1Fn1 PersonalNameParsedOutNameParserTypeEnum = "LN1FN1"
	PersonalNameParsedOutNameParserTypeEnumFn1Ln2 PersonalNameParsedOutNameParserTypeEnum = "FN1LN2"
	PersonalNameParsedOutNameParserTypeEnumLn2Fn1 PersonalNameParsedOutNameParserTypeEnum = "LN2FN1"
	PersonalNameParsedOutNameParserTypeEnumFn1LNx PersonalNameParsedOutNameParserTypeEnum = "FN1LNx"
	PersonalNameParsedOutNameParserTypeEnumLNxFn1 PersonalNameParsedOutNameParserTypeEnum = "LNxFN1"
	PersonalNameParsedOutNameParserTypeEnumFn2Ln1 PersonalNameParsedOutNameParserTypeEnum = "FN2LN1"
	PersonalNameParsedOutNameParserTypeEnumLn1Fn2 PersonalNameParsedOutNameParserTypeEnum = "LN1FN2"
	PersonalNameParsedOutNameParserTypeEnumFn2Ln2 PersonalNameParsedOutNameParserTypeEnum = "FN2LN2"
	PersonalNameParsedOutNameParserTypeEnumLn2Fn2 PersonalNameParsedOutNameParserTypeEnum = "LN2FN2"
	PersonalNameParsedOutNameParserTypeEnumFn2LNx PersonalNameParsedOutNameParserTypeEnum = "FN2LNx"
	PersonalNameParsedOutNameParserTypeEnumLNxFn2 PersonalNameParsedOutNameParserTypeEnum = "LNxFN2"
	PersonalNameParsedOutNameParserTypeEnumFNxLn1 PersonalNameParsedOutNameParserTypeEnum = "FNxLN1"
	PersonalNameParsedOutNameParserTypeEnumLn1FNx PersonalNameParsedOutNameParserTypeEnum = "LN1FNx"
	PersonalNameParsedOutNameParserTypeEnumFNxLn2 PersonalNameParsedOutNameParserTypeEnum = "FNxLN2"
	PersonalNameParsedOutNameParserTypeEnumLn2FNx PersonalNameParsedOutNameParserTypeEnum = "LN2FNx"
	PersonalNameParsedOutNameParserTypeEnumFNxLNx PersonalNameParsedOutNameParserTypeEnum = "FNxLNx"
	PersonalNameParsedOutNameParserTypeEnumLNxFNx PersonalNameParsedOutNameParserTypeEnum = "LNxFNx"
)

func (e PersonalNameParsedOutNameParserTypeEnum) ToPointer() *PersonalNameParsedOutNameParserTypeEnum {
	return &e
}

func (e *PersonalNameParsedOutNameParserTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FN1LN1":
		fallthrough
	case "LN1FN1":
		fallthrough
	case "FN1LN2":
		fallthrough
	case "LN2FN1":
		fallthrough
	case "FN1LNx":
		fallthrough
	case "LNxFN1":
		fallthrough
	case "FN2LN1":
		fallthrough
	case "LN1FN2":
		fallthrough
	case "FN2LN2":
		fallthrough
	case "LN2FN2":
		fallthrough
	case "FN2LNx":
		fallthrough
	case "LNxFN2":
		fallthrough
	case "FNxLN1":
		fallthrough
	case "LN1FNx":
		fallthrough
	case "FNxLN2":
		fallthrough
	case "LN2FNx":
		fallthrough
	case "FNxLNx":
		fallthrough
	case "LNxFNx":
		*e = PersonalNameParsedOutNameParserTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonalNameParsedOutNameParserTypeEnum: %v", v)
	}
}

// PersonalNameParsedOutNameParserTypeAltEnum - Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
type PersonalNameParsedOutNameParserTypeAltEnum string

const (
	PersonalNameParsedOutNameParserTypeAltEnumFn1Ln1 PersonalNameParsedOutNameParserTypeAltEnum = "FN1LN1"
	PersonalNameParsedOutNameParserTypeAltEnumLn1Fn1 PersonalNameParsedOutNameParserTypeAltEnum = "LN1FN1"
	PersonalNameParsedOutNameParserTypeAltEnumFn1Ln2 PersonalNameParsedOutNameParserTypeAltEnum = "FN1LN2"
	PersonalNameParsedOutNameParserTypeAltEnumLn2Fn1 PersonalNameParsedOutNameParserTypeAltEnum = "LN2FN1"
	PersonalNameParsedOutNameParserTypeAltEnumFn1LNx PersonalNameParsedOutNameParserTypeAltEnum = "FN1LNx"
	PersonalNameParsedOutNameParserTypeAltEnumLNxFn1 PersonalNameParsedOutNameParserTypeAltEnum = "LNxFN1"
	PersonalNameParsedOutNameParserTypeAltEnumFn2Ln1 PersonalNameParsedOutNameParserTypeAltEnum = "FN2LN1"
	PersonalNameParsedOutNameParserTypeAltEnumLn1Fn2 PersonalNameParsedOutNameParserTypeAltEnum = "LN1FN2"
	PersonalNameParsedOutNameParserTypeAltEnumFn2Ln2 PersonalNameParsedOutNameParserTypeAltEnum = "FN2LN2"
	PersonalNameParsedOutNameParserTypeAltEnumLn2Fn2 PersonalNameParsedOutNameParserTypeAltEnum = "LN2FN2"
	PersonalNameParsedOutNameParserTypeAltEnumFn2LNx PersonalNameParsedOutNameParserTypeAltEnum = "FN2LNx"
	PersonalNameParsedOutNameParserTypeAltEnumLNxFn2 PersonalNameParsedOutNameParserTypeAltEnum = "LNxFN2"
	PersonalNameParsedOutNameParserTypeAltEnumFNxLn1 PersonalNameParsedOutNameParserTypeAltEnum = "FNxLN1"
	PersonalNameParsedOutNameParserTypeAltEnumLn1FNx PersonalNameParsedOutNameParserTypeAltEnum = "LN1FNx"
	PersonalNameParsedOutNameParserTypeAltEnumFNxLn2 PersonalNameParsedOutNameParserTypeAltEnum = "FNxLN2"
	PersonalNameParsedOutNameParserTypeAltEnumLn2FNx PersonalNameParsedOutNameParserTypeAltEnum = "LN2FNx"
	PersonalNameParsedOutNameParserTypeAltEnumFNxLNx PersonalNameParsedOutNameParserTypeAltEnum = "FNxLNx"
	PersonalNameParsedOutNameParserTypeAltEnumLNxFNx PersonalNameParsedOutNameParserTypeAltEnum = "LNxFNx"
)

func (e PersonalNameParsedOutNameParserTypeAltEnum) ToPointer() *PersonalNameParsedOutNameParserTypeAltEnum {
	return &e
}

func (e *PersonalNameParsedOutNameParserTypeAltEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FN1LN1":
		fallthrough
	case "LN1FN1":
		fallthrough
	case "FN1LN2":
		fallthrough
	case "LN2FN1":
		fallthrough
	case "FN1LNx":
		fallthrough
	case "LNxFN1":
		fallthrough
	case "FN2LN1":
		fallthrough
	case "LN1FN2":
		fallthrough
	case "FN2LN2":
		fallthrough
	case "LN2FN2":
		fallthrough
	case "FN2LNx":
		fallthrough
	case "LNxFN2":
		fallthrough
	case "FNxLN1":
		fallthrough
	case "LN1FNx":
		fallthrough
	case "FNxLN2":
		fallthrough
	case "LN2FNx":
		fallthrough
	case "FNxLNx":
		fallthrough
	case "LNxFNx":
		*e = PersonalNameParsedOutNameParserTypeAltEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonalNameParsedOutNameParserTypeAltEnum: %v", v)
	}
}

// PersonalNameParsedOut - A origined name.
type PersonalNameParsedOut struct {
	// First / last name structure corresponding to the most likely parsing.
	FirstLastName *FirstLastNameOut `json:"firstLastName,omitempty"`
	ID            *string           `json:"id,omitempty"`
	// The input name
	Name *string `json:"name,omitempty"`
	// Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
	NameParserType *PersonalNameParsedOutNameParserTypeEnum `json:"nameParserType,omitempty"`
	// Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
	NameParserTypeAlt *PersonalNameParsedOutNameParserTypeAltEnum `json:"nameParserTypeAlt,omitempty"`
	// Higher score is better, but score is not normalized. Use calibratedProbability if available.
	Score  *float64 `json:"score,omitempty"`
	Script *string  `json:"script,omitempty"`
}
