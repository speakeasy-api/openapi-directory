// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum - Defines the type of the task
type EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum string

const (
	EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnumTask         EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum = "TASK"
	EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnumAsisTemplate EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum = "ASIS_TEMPLATE"
	EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnumIoTemplate   EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum = "IO_TEMPLATE"
)

func (e *EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TASK":
		fallthrough
	case "ASIS_TEMPLATE":
		fallthrough
	case "IO_TEMPLATE":
		*e = EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum: %s", s)
	}
}

// EnterpriseCrmFrontendsEventbusProtoTaskEntity - Contains a task's metadata and associated information. Next available id: 7
type EnterpriseCrmFrontendsEventbusProtoTaskEntity struct {
	// True if the task has conflict with vpcsc
	DisabledForVpcSc *bool `json:"disabledForVpcSc,omitempty"`
	// TaskMetadata are attributes that are associated to every common Task we have.
	Metadata   *EnterpriseCrmEventbusProtoTaskMetadata               `json:"metadata,omitempty"`
	ParamSpecs *EnterpriseCrmFrontendsEventbusProtoParamSpecsMessage `json:"paramSpecs,omitempty"`
	// Stats for the requested dimensions: QPS, duration, and error/warning rate
	Stats *EnterpriseCrmEventbusStats `json:"stats,omitempty"`
	// Defines the type of the task
	TaskType *EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum `json:"taskType,omitempty"`
	// Task authors would use this type to configure the UI for a particular task by specifying what UI config modules should be included to compose the UI. Learn more about config module framework:
	UIConfig *EnterpriseCrmEventbusProtoTaskUIConfig `json:"uiConfig,omitempty"`
}
