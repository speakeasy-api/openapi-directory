// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RecurringVolumePricingOverrideListPriceBaseEnum - Specifies the duration of each recurring period.
type RecurringVolumePricingOverrideListPriceBaseEnum string

const (
	RecurringVolumePricingOverrideListPriceBaseEnumPerBillingPeriod RecurringVolumePricingOverrideListPriceBaseEnum = "Per_Billing_Period"
	RecurringVolumePricingOverrideListPriceBaseEnumPerMonth         RecurringVolumePricingOverrideListPriceBaseEnum = "Per_Month"
	RecurringVolumePricingOverrideListPriceBaseEnumPerWeek          RecurringVolumePricingOverrideListPriceBaseEnum = "Per_Week"
)

func (e *RecurringVolumePricingOverrideListPriceBaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Per_Billing_Period":
		fallthrough
	case "Per_Month":
		fallthrough
	case "Per_Week":
		*e = RecurringVolumePricingOverrideListPriceBaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecurringVolumePricingOverrideListPriceBaseEnum: %s", s)
	}
}

// RecurringVolumePricingOverridePriceChangeOptionEnum - Specifies how Zuora changes the price of the charge each time the subscription renews.
//
// If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
type RecurringVolumePricingOverridePriceChangeOptionEnum string

const (
	RecurringVolumePricingOverridePriceChangeOptionEnumNoChange                       RecurringVolumePricingOverridePriceChangeOptionEnum = "NoChange"
	RecurringVolumePricingOverridePriceChangeOptionEnumSpecificPercentageValue        RecurringVolumePricingOverridePriceChangeOptionEnum = "SpecificPercentageValue"
	RecurringVolumePricingOverridePriceChangeOptionEnumUseLatestProductCatalogPricing RecurringVolumePricingOverridePriceChangeOptionEnum = "UseLatestProductCatalogPricing"
)

func (e *RecurringVolumePricingOverridePriceChangeOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NoChange":
		fallthrough
	case "SpecificPercentageValue":
		fallthrough
	case "UseLatestProductCatalogPricing":
		*e = RecurringVolumePricingOverridePriceChangeOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecurringVolumePricingOverridePriceChangeOptionEnum: %s", s)
	}
}

// RecurringVolumePricingOverride - Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
type RecurringVolumePricingOverride struct {
	// Specifies the duration of each recurring period.
	//
	ListPriceBase *RecurringVolumePricingOverrideListPriceBaseEnum `json:"listPriceBase,omitempty"`
	// Specifies how Zuora changes the price of the charge each time the subscription renews.
	//
	// If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
	//
	PriceChangeOption *RecurringVolumePricingOverridePriceChangeOptionEnum `json:"priceChangeOption,omitempty"`
	// Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`.
	//
	PriceIncreasePercentage *float64 `json:"priceIncreasePercentage,omitempty"`
	// Number of units purchased.
	//
	Quantity *float64 `json:"quantity,omitempty"`
	// List of variable pricing tiers in the charge.
	//
	Tiers []ChargeTier `json:"tiers,omitempty"`
}
