"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import credentials as shared_credentials
from ..shared import location as shared_location
from ..shared import name as shared_name
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StudentEllStatusEnum(str, Enum):
    Y = 'Y'
    N = 'N'
    UNKNOWN = ''

class StudentGenderEnum(str, Enum):
    M = 'M'
    F = 'F'
    UNKNOWN = ''

class StudentGradeEnum(str, Enum):
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'
    NINE = '9'
    TEN = '10'
    ELEVEN = '11'
    TWELVE = '12'
    PRE_KINDERGARTEN = 'PreKindergarten'
    KINDERGARTEN = 'Kindergarten'
    POST_GRADUATE = 'PostGraduate'
    OTHER = 'Other'

class StudentHispanicEthnicityEnum(str, Enum):
    Y = 'Y'
    N = 'N'
    UNKNOWN = ''

class StudentRaceEnum(str, Enum):
    CAUCASIAN = 'Caucasian'
    ASIAN = 'Asian'
    BLACK_OR_AFRICAN_AMERICAN = 'Black or African American'
    AMERICAN_INDIAN = 'American Indian'
    HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER = 'Hawaiian or Other Pacific Islander'
    TWO_OR_MORE_RACES = 'Two or More Races'
    UNKNOWN_MIXED = 'Unknown'
    UNKNOWN_UPPER = ''


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Student:
    
    created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'exclude': lambda f: f is None }})  
    credentials: Optional[shared_credentials.Credentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials'), 'exclude': lambda f: f is None }})  
    district: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('district'), 'exclude': lambda f: f is None }})  
    dob: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dob'), 'exclude': lambda f: f is None }})  
    ell_status: Optional[StudentEllStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ell_status'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    gender: Optional[StudentGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})  
    grade: Optional[StudentGradeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grade'), 'exclude': lambda f: f is None }})  
    graduation_year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('graduation_year'), 'exclude': lambda f: f is None }})  
    hispanic_ethnicity: Optional[StudentHispanicEthnicityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hispanic_ethnicity'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_modified'), 'exclude': lambda f: f is None }})  
    location: Optional[shared_location.Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    name: Optional[shared_name.Name] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    race: Optional[StudentRaceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('race'), 'exclude': lambda f: f is None }})  
    school: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('school'), 'exclude': lambda f: f is None }})  
    schools: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schools'), 'exclude': lambda f: f is None }})  
    sis_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sis_id'), 'exclude': lambda f: f is None }})  
    state_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_id'), 'exclude': lambda f: f is None }})  
    student_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('student_number'), 'exclude': lambda f: f is None }})  
    