"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attribute as shared_attribute
from ..shared import measurement as shared_measurement
from ..shared import metric as shared_metric
from ..shared import transform as shared_transform
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PropertyType:
    r"""Contains a property type, which can be one of <code>attribute</code>, <code>measurement</code>, <code>metric</code>, or <code>transform</code>."""
    
    attribute: Optional[shared_attribute.Attribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute'), 'exclude': lambda f: f is None }})  
    measurement: Optional[shared_measurement.Measurement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurement'), 'exclude': lambda f: f is None }})  
    metric: Optional[shared_metric.Metric] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric'), 'exclude': lambda f: f is None }})  
    transform: Optional[shared_transform.Transform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transform'), 'exclude': lambda f: f is None }})  
    