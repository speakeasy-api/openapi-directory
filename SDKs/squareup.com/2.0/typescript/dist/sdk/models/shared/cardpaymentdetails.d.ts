import { SpeakeasyBase } from "../../../internal/utils";
import { Card } from "./card";
import { CardPaymentTimeline } from "./cardpaymenttimeline";
import { DeviceDetails } from "./devicedetails";
import { ErrorT } from "./error";
/**
 * Reflects the current status of a card payment. Contains only non-confidential information.
 */
export declare class CardPaymentDetails extends SpeakeasyBase {
    /**
     * For EMV payments, the cryptogram generated for the payment.
     */
    applicationCryptogram?: string;
    /**
     * For EMV payments, the application ID identifies the EMV application used for the payment.
     */
    applicationIdentifier?: string;
    /**
     * For EMV payments, the human-readable name of the EMV application used for the payment.
     */
    applicationName?: string;
    /**
     * The status code returned by the card issuer that describes the payment's
     *
     * @remarks
     * authorization status.
     */
    authResultCode?: string;
    /**
     * The status code returned from the Address Verification System (AVS) check. The code can be
     *
     * @remarks
     * `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
     */
    avsStatus?: string;
    /**
     * Represents the payment details of a card to be used for payments. These
     *
     * @remarks
     * details are determined by the payment token generated by Web Payments SDK.
     */
    card?: Card;
    /**
     * The timeline for card payments.
     */
    cardPaymentTimeline?: CardPaymentTimeline;
    /**
     * The status code returned from the Card Verification Value (CVV) check. The code can be
     *
     * @remarks
     * `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
     */
    cvvStatus?: string;
    /**
     * Details about the device that took the payment.
     */
    deviceDetails?: DeviceDetails;
    /**
     * The method used to enter the card's details for the payment. The method can be
     *
     * @remarks
     * `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
     */
    entryMethod?: string;
    /**
     * Information about errors encountered during the request.
     */
    errors?: ErrorT[];
    /**
     * Whether the card must be physically present for the payment to
     *
     * @remarks
     * be refunded.  If set to `true`, the card must be present.
     */
    refundRequiresCardPresence?: boolean;
    /**
     * The statement description sent to the card networks.
     *
     * @remarks
     *
     * Note: The actual statement description varies and is likely to be truncated and appended with
     * additional information on a per issuer basis.
     */
    statementDescription?: string;
    /**
     * The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
     *
     * @remarks
     * FAILED.
     */
    status?: string;
    /**
     * For EMV payments, the method used to verify the cardholder's identity. The method can be
     *
     * @remarks
     * `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
     */
    verificationMethod?: string;
    /**
     * For EMV payments, the results of the cardholder verification. The result can be
     *
     * @remarks
     * `SUCCESS`, `FAILURE`, or `UNKNOWN`.
     */
    verificationResults?: string;
}
