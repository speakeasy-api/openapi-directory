/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetDeparturesByCRSQueryParams {
    /**
     * The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=apiKey")
    public String apiKey;
    public GetDeparturesByCRSQueryParams withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services departing from Paddington that stop at Reading.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filterStation")
    public String filterStation;
    public GetDeparturesByCRSQueryParams withFilterStation(String filterStation) {
        this.filterStation = filterStation;
        return this;
    }
    
    /**
     * The number of departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running from the selected station within the time window specified.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=numServices")
    public Long numServices;
    public GetDeparturesByCRSQueryParams withNumServices(Long numServices) {
        this.numServices = numServices;
        return this;
    }
    
    /**
     * Should the response contain information on the calling points for each service? If set to false, calling points will not be returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=serviceDetails")
    public Boolean serviceDetails;
    public GetDeparturesByCRSQueryParams withServiceDetails(Boolean serviceDetails) {
        this.serviceDetails = serviceDetails;
        return this;
    }
    
    /**
     * The time window in minutes to offset the departure information by. For example, a value of 20 will not show services departing within the next 20 minutes.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeOffset")
    public Long timeOffset;
    public GetDeparturesByCRSQueryParams withTimeOffset(Long timeOffset) {
        this.timeOffset = timeOffset;
        return this;
    }
    
    /**
     * The time window to show services for in minutes. For example, a value of 60 will show services departing the station in the next 60 minutes.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeWindow")
    public Long timeWindow;
    public GetDeparturesByCRSQueryParams withTimeWindow(Long timeWindow) {
        this.timeWindow = timeWindow;
        return this;
    }
    
}
