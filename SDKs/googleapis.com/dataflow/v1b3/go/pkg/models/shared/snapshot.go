// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SnapshotStateEnum - State of the snapshot.
type SnapshotStateEnum string

const (
	SnapshotStateEnumUnknownSnapshotState SnapshotStateEnum = "UNKNOWN_SNAPSHOT_STATE"
	SnapshotStateEnumPending              SnapshotStateEnum = "PENDING"
	SnapshotStateEnumRunning              SnapshotStateEnum = "RUNNING"
	SnapshotStateEnumReady                SnapshotStateEnum = "READY"
	SnapshotStateEnumFailed               SnapshotStateEnum = "FAILED"
	SnapshotStateEnumDeleted              SnapshotStateEnum = "DELETED"
)

func (e SnapshotStateEnum) ToPointer() *SnapshotStateEnum {
	return &e
}

func (e *SnapshotStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN_SNAPSHOT_STATE":
		fallthrough
	case "PENDING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "READY":
		fallthrough
	case "FAILED":
		fallthrough
	case "DELETED":
		*e = SnapshotStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SnapshotStateEnum: %v", v)
	}
}

// Snapshot - Represents a snapshot of a job.
type Snapshot struct {
	// The time this snapshot was created.
	CreationTime *string `json:"creationTime,omitempty"`
	// User specified description of the snapshot. Maybe empty.
	Description *string `json:"description,omitempty"`
	// The disk byte size of the snapshot. Only available for snapshots in READY state.
	DiskSizeBytes *string `json:"diskSizeBytes,omitempty"`
	// The unique ID of this snapshot.
	ID *string `json:"id,omitempty"`
	// The project this snapshot belongs to.
	ProjectID *string `json:"projectId,omitempty"`
	// Pub/Sub snapshot metadata.
	PubsubMetadata []PubsubSnapshotMetadata `json:"pubsubMetadata,omitempty"`
	// Cloud region where this snapshot lives in, e.g., "us-central1".
	Region *string `json:"region,omitempty"`
	// The job this snapshot was created from.
	SourceJobID *string `json:"sourceJobId,omitempty"`
	// State of the snapshot.
	State *SnapshotStateEnum `json:"state,omitempty"`
	// The time after which this snapshot will be automatically deleted.
	TTL *string `json:"ttl,omitempty"`
}
