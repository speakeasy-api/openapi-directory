/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GatewayInput - Gateway represents the configuration for a proxy, typically a load balancer. It captures the ip:port over which the services are exposed by the proxy, along with any policy configurations. Routes have reference to to Gateways to dictate how requests should be routed by this Gateway.
 */
public class GatewayInput {
    /**
     * Optional. Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided, an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'. Gateways of type 'OPEN_MESH' listen on 0.0.0.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    public String[] addresses;

    public GatewayInput withAddresses(String[] addresses) {
        this.addresses = addresses;
        return this;
    }
    
    /**
     * Optional. A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection. This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateUrls")
    public String[] certificateUrls;

    public GatewayInput withCertificateUrls(String[] certificateUrls) {
        this.certificateUrls = certificateUrls;
        return this;
    }
    
    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public GatewayInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Optional. A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections. For example: `projects/* /locations/* /gatewaySecurityPolicies/swg-policy`. This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewaySecurityPolicy")
    public String gatewaySecurityPolicy;

    public GatewayInput withGatewaySecurityPolicy(String gatewaySecurityPolicy) {
        this.gatewaySecurityPolicy = gatewaySecurityPolicy;
        return this;
    }
    
    /**
     * Optional. Set of label tags associated with the Gateway resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public GatewayInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Name of the Gateway resource. It matches pattern `projects/* /locations/* /gateways/`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GatewayInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Optional. The relative resource name identifying the VPC network that is using this configuration. For example: `projects/* /global/networks/network-1`. Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;

    public GatewayInput withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Required. One or more port numbers (1-65535), on which the Gateway will receive traffic. The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ports")
    public Integer[] ports;

    public GatewayInput withPorts(Integer[] ports) {
        this.ports = ports;
        return this;
    }
    
    /**
     * Optional. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;

    public GatewayInput withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverTlsPolicy")
    public String serverTlsPolicy;

    public GatewayInput withServerTlsPolicy(String serverTlsPolicy) {
        this.serverTlsPolicy = serverTlsPolicy;
        return this;
    }
    
    /**
     * Optional. The relative resource name identifying the subnetwork in which this SWG is allocated. For example: `projects/* /regions/us-central1/subnetworks/network-1` Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnetwork")
    public String subnetwork;

    public GatewayInput withSubnetwork(String subnetwork) {
        this.subnetwork = subnetwork;
        return this;
    }
    
    /**
     * Immutable. The type of the customer managed gateway. This field is required. If unspecified, an error is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public GatewayTypeEnum type;

    public GatewayInput withType(GatewayTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public GatewayInput(){}
}
