<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ScopeMappings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove client-level roles from the client’s scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsClientsClientResponse
     */
	public function deleteRealmClientScopesIdScopeMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Remove a set of realm-level roles from the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsRealmResponse
     */
	public function deleteRealmClientScopesIdScopeMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesIdScopeMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Remove client-level roles from the client’s scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsClientsClientResponse
     */
	public function deleteRealmClientsIdScopeMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Remove a set of realm-level roles from the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsRealmResponse
     */
	public function deleteRealmClientsIdScopeMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdScopeMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get all scope mappings for the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsResponse
     */
	public function getRealmClientScopesIdScopeMappings(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mappingsRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MappingsRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the roles associated with a client’s scope   Returns roles for the client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientResponse
     */
	public function getRealmClientScopesIdScopeMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse
     */
	public function getRealmClientScopesIdScopeMappingsClientsClientAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse
     */
	public function getRealmClientScopesIdScopeMappingsClientsClientComposite(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles associated with the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmResponse
     */
	public function getRealmClientScopesIdScopeMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles that are available to attach to this client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmAvailableResponse
     */
	public function getRealmClientScopesIdScopeMappingsRealmAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/realm/available', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmCompositeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmCompositeResponse
     */
	public function getRealmClientScopesIdScopeMappingsRealmComposite(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmCompositeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmCompositeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/realm/composite', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmCompositeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdScopeMappingsRealmCompositeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all scope mappings for the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsResponse
     */
	public function getRealmClientsIdScopeMappings(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mappingsRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MappingsRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the roles associated with a client’s scope   Returns roles for the client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientResponse
     */
	public function getRealmClientsIdScopeMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientAvailableResponse
     */
	public function getRealmClientsIdScopeMappingsClientsClientAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/clients/{client}/available', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientCompositeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientCompositeResponse
     */
	public function getRealmClientsIdScopeMappingsClientsClientComposite(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientCompositeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientCompositeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/clients/{client}/composite', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientCompositeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsClientsClientCompositeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles associated with the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmResponse
     */
	public function getRealmClientsIdScopeMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles that are available to attach to this client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmAvailableResponse
     */
	public function getRealmClientsIdScopeMappingsRealmAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/realm/available', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmCompositeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmCompositeResponse
     */
	public function getRealmClientsIdScopeMappingsRealmComposite(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmCompositeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmCompositeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/realm/composite', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmCompositeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdScopeMappingsRealmCompositeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add client-level roles to the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsClientsClientResponse
     */
	public function postRealmClientScopesIdScopeMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add a set of realm-level roles to the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsRealmResponse
     */
	public function postRealmClientScopesIdScopeMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/scope-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdScopeMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add client-level roles to the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsClientsClientResponse
     */
	public function postRealmClientsIdScopeMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add a set of realm-level roles to the client’s scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsRealmResponse
     */
	public function postRealmClientsIdScopeMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/scope-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdScopeMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
}