/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ArticleIndex - Representation of an article or post returned in a list
 */
public class ArticleIndex {
    @JsonProperty("canonical_url")
    public String canonicalUrl;

    public ArticleIndex withCanonicalUrl(String canonicalUrl) {
        this.canonicalUrl = canonicalUrl;
        return this;
    }
    
    @JsonProperty("cover_image")
    public String coverImage;

    public ArticleIndex withCoverImage(String coverImage) {
        this.coverImage = coverImage;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public ArticleIndex withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("crossposted_at")
    public OffsetDateTime crosspostedAt;

    public ArticleIndex withCrosspostedAt(OffsetDateTime crosspostedAt) {
        this.crosspostedAt = crosspostedAt;
        return this;
    }
    
    @JsonProperty("description")
    public String description;

    public ArticleIndex withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("edited_at")
    public OffsetDateTime editedAt;

    public ArticleIndex withEditedAt(OffsetDateTime editedAt) {
        this.editedAt = editedAt;
        return this;
    }
    
    /**
     * Flare tag of the article
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flare_tag")
    public ArticleFlareTag flareTag;

    public ArticleIndex withFlareTag(ArticleFlareTag flareTag) {
        this.flareTag = flareTag;
        return this;
    }
    
    @JsonProperty("id")
    public Integer id;

    public ArticleIndex withId(Integer id) {
        this.id = id;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_comment_at")
    public OffsetDateTime lastCommentAt;

    public ArticleIndex withLastCommentAt(OffsetDateTime lastCommentAt) {
        this.lastCommentAt = lastCommentAt;
        return this;
    }
    
    /**
     * The organization the resource belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public SharedOrganization organization;

    public ArticleIndex withOrganization(SharedOrganization organization) {
        this.organization = organization;
        return this;
    }
    
    @JsonProperty("path")
    public String path;

    public ArticleIndex withPath(String path) {
        this.path = path;
        return this;
    }
    
    @JsonProperty("positive_reactions_count")
    public Integer positiveReactionsCount;

    public ArticleIndex withPositiveReactionsCount(Integer positiveReactionsCount) {
        this.positiveReactionsCount = positiveReactionsCount;
        return this;
    }
    
    @JsonProperty("public_reactions_count")
    public Integer publicReactionsCount;

    public ArticleIndex withPublicReactionsCount(Integer publicReactionsCount) {
        this.publicReactionsCount = publicReactionsCount;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("published_at")
    public OffsetDateTime publishedAt;

    public ArticleIndex withPublishedAt(OffsetDateTime publishedAt) {
        this.publishedAt = publishedAt;
        return this;
    }
    
    /**
     * Crossposting or published date time
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("published_timestamp")
    public OffsetDateTime publishedTimestamp;

    public ArticleIndex withPublishedTimestamp(OffsetDateTime publishedTimestamp) {
        this.publishedTimestamp = publishedTimestamp;
        return this;
    }
    
    @JsonProperty("readable_publish_date")
    public String readablePublishDate;

    public ArticleIndex withReadablePublishDate(String readablePublishDate) {
        this.readablePublishDate = readablePublishDate;
        return this;
    }
    
    /**
     * Reading time, in minutes
     */
    @JsonProperty("reading_time_minutes")
    public Integer readingTimeMinutes;

    public ArticleIndex withReadingTimeMinutes(Integer readingTimeMinutes) {
        this.readingTimeMinutes = readingTimeMinutes;
        return this;
    }
    
    @JsonProperty("slug")
    public String slug;

    public ArticleIndex withSlug(String slug) {
        this.slug = slug;
        return this;
    }
    
    @JsonProperty("social_image")
    public String socialImage;

    public ArticleIndex withSocialImage(String socialImage) {
        this.socialImage = socialImage;
        return this;
    }
    
    @JsonProperty("tag_list")
    public String[] tagList;

    public ArticleIndex withTagList(String[] tagList) {
        this.tagList = tagList;
        return this;
    }
    
    @JsonProperty("tags")
    public String tags;

    public ArticleIndex withTags(String tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonProperty("title")
    public String title;

    public ArticleIndex withTitle(String title) {
        this.title = title;
        return this;
    }
    
    @JsonProperty("type_of")
    public String typeOf;

    public ArticleIndex withTypeOf(String typeOf) {
        this.typeOf = typeOf;
        return this;
    }
    
    @JsonProperty("url")
    public String url;

    public ArticleIndex withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The resource creator
     */
    @JsonProperty("user")
    public SharedUser user;

    public ArticleIndex withUser(SharedUser user) {
        this.user = user;
        return this;
    }
    
    public ArticleIndex(@JsonProperty("canonical_url") String canonicalUrl, @JsonProperty("cover_image") String coverImage, @JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("crossposted_at") OffsetDateTime crosspostedAt, @JsonProperty("description") String description, @JsonProperty("edited_at") OffsetDateTime editedAt, @JsonProperty("id") Integer id, @JsonProperty("last_comment_at") OffsetDateTime lastCommentAt, @JsonProperty("path") String path, @JsonProperty("positive_reactions_count") Integer positiveReactionsCount, @JsonProperty("public_reactions_count") Integer publicReactionsCount, @JsonProperty("published_at") OffsetDateTime publishedAt, @JsonProperty("published_timestamp") OffsetDateTime publishedTimestamp, @JsonProperty("readable_publish_date") String readablePublishDate, @JsonProperty("reading_time_minutes") Integer readingTimeMinutes, @JsonProperty("slug") String slug, @JsonProperty("social_image") String socialImage, @JsonProperty("tag_list") String[] tagList, @JsonProperty("tags") String tags, @JsonProperty("title") String title, @JsonProperty("type_of") String typeOf, @JsonProperty("url") String url, @JsonProperty("user") SharedUser user) {
        this.canonicalUrl = canonicalUrl;
        this.coverImage = coverImage;
        this.createdAt = createdAt;
        this.crosspostedAt = crosspostedAt;
        this.description = description;
        this.editedAt = editedAt;
        this.id = id;
        this.lastCommentAt = lastCommentAt;
        this.path = path;
        this.positiveReactionsCount = positiveReactionsCount;
        this.publicReactionsCount = publicReactionsCount;
        this.publishedAt = publishedAt;
        this.publishedTimestamp = publishedTimestamp;
        this.readablePublishDate = readablePublishDate;
        this.readingTimeMinutes = readingTimeMinutes;
        this.slug = slug;
        this.socialImage = socialImage;
        this.tagList = tagList;
        this.tags = tags;
        this.title = title;
        this.typeOf = typeOf;
        this.url = url;
        this.user = user;
  }
}
