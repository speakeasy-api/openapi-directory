// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CustomLabelKeyEnum - The key of the label.
type CustomLabelKeyEnum string

const (
	CustomLabelKeyEnumCustomLabelKeyUnspecified CustomLabelKeyEnum = "CUSTOM_LABEL_KEY_UNSPECIFIED"
	CustomLabelKeyEnumCustomLabelKey0           CustomLabelKeyEnum = "CUSTOM_LABEL_KEY_0"
	CustomLabelKeyEnumCustomLabelKey1           CustomLabelKeyEnum = "CUSTOM_LABEL_KEY_1"
	CustomLabelKeyEnumCustomLabelKey2           CustomLabelKeyEnum = "CUSTOM_LABEL_KEY_2"
	CustomLabelKeyEnumCustomLabelKey3           CustomLabelKeyEnum = "CUSTOM_LABEL_KEY_3"
	CustomLabelKeyEnumCustomLabelKey4           CustomLabelKeyEnum = "CUSTOM_LABEL_KEY_4"
)

func (e CustomLabelKeyEnum) ToPointer() *CustomLabelKeyEnum {
	return &e
}

func (e *CustomLabelKeyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CUSTOM_LABEL_KEY_UNSPECIFIED":
		fallthrough
	case "CUSTOM_LABEL_KEY_0":
		fallthrough
	case "CUSTOM_LABEL_KEY_1":
		fallthrough
	case "CUSTOM_LABEL_KEY_2":
		fallthrough
	case "CUSTOM_LABEL_KEY_3":
		fallthrough
	case "CUSTOM_LABEL_KEY_4":
		*e = CustomLabelKeyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomLabelKeyEnum: %v", v)
	}
}

// CustomLabel - The key and value of a custom label.
type CustomLabel struct {
	// The key of the label.
	Key *CustomLabelKeyEnum `json:"key,omitempty"`
	// The value of the label.
	Value *string `json:"value,omitempty"`
}
