"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import encryptiontype_enum as shared_encryptiontype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Record:
    r"""The unit of data of the Kinesis data stream, which is composed of a sequence number, a partition key, and a data blob."""
    
    data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Data') }})  
    partition_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartitionKey') }})  
    sequence_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SequenceNumber') }})  
    approximate_arrival_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApproximateArrivalTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    encryption_type: Optional[shared_encryptiontype_enum.EncryptionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionType'), 'exclude': lambda f: f is None }})  
    