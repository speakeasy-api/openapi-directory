/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Document - A Google Docs document.
 */
public class Document {
    /**
     * The document body. The body typically contains the full document contents except for headers, footers, and footnotes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public Body body;

    public Document withBody(Body body) {
        this.body = body;
        return this;
    }
    
    /**
     * Output only. The ID of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentId")
    public String documentId;

    public Document withDocumentId(String documentId) {
        this.documentId = documentId;
        return this;
    }
    
    /**
     * The style of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentStyle")
    public DocumentStyle documentStyle;

    public Document withDocumentStyle(DocumentStyle documentStyle) {
        this.documentStyle = documentStyle;
        return this;
    }
    
    /**
     * Output only. The footers in the document, keyed by footer ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("footers")
    public java.util.Map<String, Footer> footers;

    public Document withFooters(java.util.Map<String, Footer> footers) {
        this.footers = footers;
        return this;
    }
    
    /**
     * Output only. The footnotes in the document, keyed by footnote ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("footnotes")
    public java.util.Map<String, Footnote> footnotes;

    public Document withFootnotes(java.util.Map<String, Footnote> footnotes) {
        this.footnotes = footnotes;
        return this;
    }
    
    /**
     * Output only. The headers in the document, keyed by header ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    public java.util.Map<String, Header> headers;

    public Document withHeaders(java.util.Map<String, Header> headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * Output only. The inline objects in the document, keyed by object ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inlineObjects")
    public java.util.Map<String, InlineObject> inlineObjects;

    public Document withInlineObjects(java.util.Map<String, InlineObject> inlineObjects) {
        this.inlineObjects = inlineObjects;
        return this;
    }
    
    /**
     * Output only. The lists in the document, keyed by list ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lists")
    public java.util.Map<String, List> lists;

    public Document withLists(java.util.Map<String, List> lists) {
        this.lists = lists;
        return this;
    }
    
    /**
     * Output only. The named ranges in the document, keyed by name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namedRanges")
    public java.util.Map<String, NamedRanges> namedRanges;

    public Document withNamedRanges(java.util.Map<String, NamedRanges> namedRanges) {
        this.namedRanges = namedRanges;
        return this;
    }
    
    /**
     * The named styles. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from these named styles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namedStyles")
    public NamedStyles namedStyles;

    public Document withNamedStyles(NamedStyles namedStyles) {
        this.namedStyles = namedStyles;
        return this;
    }
    
    /**
     * Output only. The positioned objects in the document, keyed by object ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("positionedObjects")
    public java.util.Map<String, PositionedObject> positionedObjects;

    public Document withPositionedObjects(java.util.Map<String, PositionedObject> positionedObjects) {
        this.positionedObjects = positionedObjects;
        return this;
    }
    
    /**
     * Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the document has been edited since that revision. Only populated if the user has edit access to the document. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revisionId")
    public String revisionId;

    public Document withRevisionId(String revisionId) {
        this.revisionId = revisionId;
        return this;
    }
    
    /**
     * Output only. The suggested changes to the style of the document, keyed by suggestion ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suggestedDocumentStyleChanges")
    public java.util.Map<String, SuggestedDocumentStyle> suggestedDocumentStyleChanges;

    public Document withSuggestedDocumentStyleChanges(java.util.Map<String, SuggestedDocumentStyle> suggestedDocumentStyleChanges) {
        this.suggestedDocumentStyleChanges = suggestedDocumentStyleChanges;
        return this;
    }
    
    /**
     * Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suggestedNamedStylesChanges")
    public java.util.Map<String, SuggestedNamedStyles> suggestedNamedStylesChanges;

    public Document withSuggestedNamedStylesChanges(java.util.Map<String, SuggestedNamedStyles> suggestedNamedStylesChanges) {
        this.suggestedNamedStylesChanges = suggestedNamedStylesChanges;
        return this;
    }
    
    /**
     * Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suggestionsViewMode")
    public DocumentSuggestionsViewModeEnum suggestionsViewMode;

    public Document withSuggestionsViewMode(DocumentSuggestionsViewModeEnum suggestionsViewMode) {
        this.suggestionsViewMode = suggestionsViewMode;
        return this;
    }
    
    /**
     * The title of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Document withTitle(String title) {
        this.title = title;
        return this;
    }
    
    public Document(){}
}
