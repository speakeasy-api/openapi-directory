<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class JiraCloudIntegration 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List Jira Projects
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsResponse
     */
	public function getIntegrationsJiraCloudProjects(
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/integrations/jira-cloud/projects/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraProjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JiraProject>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjects401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjects401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjects403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjects403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve project issue types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse
     */
	public function getIntegrationsJiraCloudProjectsProjectIdIssueTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/integrations/jira-cloud/projects/{project_id}/issue_types/', \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraIssueTypes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JiraIssueType>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjectsProjectIdIssueTypes401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypes401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjectsProjectIdIssueTypes403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypes403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjectsProjectIdIssueTypes404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypes404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve issue priorities
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse
     */
	public function getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities(
        \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/priorities/', \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraIssuePriorities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JiraIssuePriority>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve issue statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse
     */
	public function getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/status/', \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraIssueStatuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JiraIssueStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Jira Cloud finding configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse
     */
	public function getTargetsTargetIdFindingsIdIntegrationsJiraCloud(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/findings/{id}/integrations/jira-cloud/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraFinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraFinding', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Jira Cloud Target configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraCloudRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraCloudResponse
     */
	public function getTargetsTargetIdIntegrationsJiraCloud(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraCloudRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraCloudResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/integrations/jira-cloud/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraCloudRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraCloudResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraScope = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraScope', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Jira Cloud finding configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse
     */
	public function patchTargetsTargetIdFindingsIdIntegrationsJiraCloud(
        \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/findings/{id}/integrations/jira-cloud/', \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jiraFinding", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraFinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraFinding', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Jira Cloud target configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloudRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloudResponse
     */
	public function patchTargetsTargetIdIntegrationsJiraCloud(
        \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloudRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloudResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/integrations/jira-cloud/', \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloudRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jiraScope", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloudResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraScope = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraScope', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdIntegrationsJiraCloud404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraCloud404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Jira Cloud finding configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse
     */
	public function putTargetsTargetIdFindingsIdIntegrationsJiraCloud(
        \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/findings/{id}/integrations/jira-cloud/', \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jiraFinding", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraFinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraFinding', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Jira Cloud target configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloudRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloudResponse
     */
	public function putTargetsTargetIdIntegrationsJiraCloud(
        \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloudRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloudResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/integrations/jira-cloud/', \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloudRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jiraScope", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloudResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraScope = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraScope', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdIntegrationsJiraCloud404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraCloud404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}