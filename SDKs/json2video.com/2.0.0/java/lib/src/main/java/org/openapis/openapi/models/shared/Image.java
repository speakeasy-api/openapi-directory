/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Image {
    /**
     * Allows to define a color (or a range of colors) that will be converted to transparent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chroma-key")
    public ImageChromaKey chromaKey;
    public Image withChromaKey(ImageChromaKey chromaKey) {
        this.chromaKey = chromaKey;
        return this;
    }
    
    /**
     * Crops the element
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crop")
    public ImageCrop crop;
    public Image withCrop(ImageCrop crop) {
        this.crop = crop;
        return this;
    }
    
    /**
     * Pans the element to the specified direction. If &lt;code&gt;zoom&lt;/code&gt; property is not specified, the effect is a non-zooming pan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pan")
    public ImagePanEnum pan;
    public Image withPan(ImagePanEnum pan) {
        this.pan = pan;
        return this;
    }
    
    /**
     * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public ImagePositionEnum position;
    public Image withPosition(ImagePositionEnum position) {
        this.position = position;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotate")
    public ImageRotate rotate;
    public Image withRotate(ImageRotate rotate) {
        this.rotate = rotate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scale")
    public ImageScale scale;
    public Image withScale(ImageScale scale) {
        this.scale = scale;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("src")
    public String src;
    public Image withSrc(String src) {
        this.src = src;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public ImageTypeEnum type;
    public Image withType(ImageTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Sets the horizontal position of the element in the scene. The value &lt;code&gt;0&lt;/code&gt; is on the left side
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x")
    public Double x;
    public Image withX(Double x) {
        this.x = x;
        return this;
    }
    
    /**
     * Sets the vertical position of the element in the scene. The value &lt;code&gt;0&lt;/code&gt; is on the top side
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("y")
    public Double y;
    public Image withY(Double y) {
        this.y = y;
        return this;
    }
    
    /**
     * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the &lt;code&gt;pan&lt;/code&gt; property to set the focus point of the zooming
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zoom")
    public Long zoom;
    public Image withZoom(Long zoom) {
        this.zoom = zoom;
        return this;
    }
    
}
