"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetMapVersionNumberTileLayerStyleZoomXYFormatFormatEnum(str, Enum):
    r"""Format of the response."""
    JPG = 'jpg'
    PNG = 'png'

class GetMapVersionNumberTileLayerStyleZoomXYFormatLayerEnum(str, Enum):
    r"""Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format."""
    BASIC = 'basic'
    HYBRID = 'hybrid'
    LABELS = 'labels'

class GetMapVersionNumberTileLayerStyleZoomXYFormatStyleEnum(str, Enum):
    r"""Style of tile to be rendered"""
    MAIN = 'main'
    NIGHT = 'night'

class GetMapVersionNumberTileLayerStyleZoomXYFormatTileSizeEnum(str, Enum):
    r"""Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers."""
    TWO_HUNDRED_AND_FIFTY_SIX = '256'
    FIVE_HUNDRED_AND_TWELVE = '512'

class GetMapVersionNumberTileLayerStyleZoomXYFormatVersionNumberEnum(str, Enum):
    r"""Version of the service to call. The current version is 1."""
    ONE = '1'

class GetMapVersionNumberTileLayerStyleZoomXYFormatViewEnum(str, Enum):
    r"""Geopolitical view. Determines rendering of disputed areas. See the <a href=\\"/maps-sdk-web/functional-examples#geopolitical-views\\">documentation</a> for an explanation of how this works in live services."""
    UNIFIED = 'Unified'
    IN = 'IN'

class GetMapVersionNumberTileLayerStyleZoomXYFormatZoomEnum(str, Enum):
    r"""Zoom level of tile to be rendered"""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'
    NINE = '9'
    TEN = '10'
    ELEVEN = '11'
    TWELVE = '12'
    THIRTEEN = '13'
    FOURTEEN = '14'
    FIFTEEN = '15'
    SIXTEEN = '16'
    SEVENTEEN = '17'
    EIGHTEEN = '18'
    NINETEEN = '19'
    TWENTY = '20'
    TWENTY_ONE = '21'
    TWENTY_TWO = '22'


@dataclasses.dataclass
class GetMapVersionNumberTileLayerStyleZoomXYFormatRequest:
    
    format: GetMapVersionNumberTileLayerStyleZoomXYFormatFormatEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'format', 'style': 'simple', 'explode': False }})
    r"""Format of the response."""  
    layer: GetMapVersionNumberTileLayerStyleZoomXYFormatLayerEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'layer', 'style': 'simple', 'explode': False }})
    r"""Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format."""  
    style: GetMapVersionNumberTileLayerStyleZoomXYFormatStyleEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'style', 'style': 'simple', 'explode': False }})
    r"""Style of tile to be rendered"""  
    version_number: GetMapVersionNumberTileLayerStyleZoomXYFormatVersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})
    r"""Version of the service to call. The current version is 1."""  
    x: int = dataclasses.field(metadata={'path_param': { 'field_name': 'X', 'style': 'simple', 'explode': False }})
    r"""x coordinate of tile on zoom grid"""  
    y: int = dataclasses.field(metadata={'path_param': { 'field_name': 'Y', 'style': 'simple', 'explode': False }})
    r"""y coordinate of tile on zoom grid"""  
    zoom: GetMapVersionNumberTileLayerStyleZoomXYFormatZoomEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'zoom', 'style': 'simple', 'explode': False }})
    r"""Zoom level of tile to be rendered"""  
    tile_size: Optional[GetMapVersionNumberTileLayerStyleZoomXYFormatTileSizeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tileSize', 'style': 'form', 'explode': True }})
    r"""Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers."""  
    view: Optional[GetMapVersionNumberTileLayerStyleZoomXYFormatViewEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'view', 'style': 'form', 'explode': True }})
    r"""Geopolitical view. Determines rendering of disputed areas. See the <a href=\\"/maps-sdk-web/functional-examples#geopolitical-views\\">documentation</a> for an explanation of how this works in live services."""  
    

@dataclasses.dataclass
class GetMapVersionNumberTileLayerStyleZoomXYFormatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    