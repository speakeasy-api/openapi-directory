"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class Changelog:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_changelog(self, request: shared.Changelog, security: operations.CreateChangelogSecurity) -> operations.CreateChangelogResponse:
        r"""Create changelog
        Create a new changelog inside of this project
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/changelogs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateChangelogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_changelog(self, request: operations.DeleteChangelogRequest, security: operations.DeleteChangelogSecurity) -> operations.DeleteChangelogResponse:
        r"""Delete changelog
        Delete the changelog with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteChangelogRequest, base_url, '/changelogs/{slug}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteChangelogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_changelog(self, request: operations.GetChangelogRequest, security: operations.GetChangelogSecurity) -> operations.GetChangelogResponse:
        r"""Get changelog
        Returns the changelog with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChangelogRequest, base_url, '/changelogs/{slug}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChangelogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_changelogs(self, request: operations.GetChangelogsRequest, security: operations.GetChangelogsSecurity) -> operations.GetChangelogsResponse:
        r"""Get changelogs
        Returns a list of changelogs associated with the project API key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/changelogs'
        
        query_params = utils.get_query_params(operations.GetChangelogsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChangelogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            

        return res

    def update_changelog(self, request: operations.UpdateChangelogRequest, security: operations.UpdateChangelogSecurity) -> operations.UpdateChangelogResponse:
        r"""Update changelog
        Update a changelog with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateChangelogRequest, base_url, '/changelogs/{slug}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "changelog", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateChangelogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    