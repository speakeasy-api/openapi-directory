// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet - Describes an IPv4 CIDR block.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet struct {
	CidrBlock *string
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet - Describes an IPv6 CIDR block.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet struct {
	Ipv6CidrBlock *string
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions - Information about the VPC peering connection options for the accepter or requester VPC.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions struct {
	AllowDNSResolutionFromRemoteVpc            *bool
	AllowEgressFromLocalClassicLinkToRemoteVpc *bool
	AllowEgressFromLocalVpcToRemoteClassicLink *bool
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo - Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo struct {
	CidrBlock        *string
	CidrBlockSet     []DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet
	Ipv6CidrBlockSet []DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet
	OwnerID          *string
	PeeringOptions   *DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions
	Region           *string
	VpcID            *string
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet - Describes an IPv4 CIDR block.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet struct {
	CidrBlock *string
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet - Describes an IPv6 CIDR block.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet struct {
	Ipv6CidrBlock *string
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions - Information about the VPC peering connection options for the accepter or requester VPC.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions struct {
	AllowDNSResolutionFromRemoteVpc            *bool
	AllowEgressFromLocalClassicLinkToRemoteVpc *bool
	AllowEgressFromLocalVpcToRemoteClassicLink *bool
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo - Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo struct {
	CidrBlock        *string
	CidrBlockSet     []DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet
	Ipv6CidrBlockSet []DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet
	OwnerID          *string
	PeeringOptions   *DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions
	Region           *string
	VpcID            *string
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum - The status of the VPC peering connection.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum string

const (
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumInitiatingRequest DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "initiating-request"
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumPendingAcceptance DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "pending-acceptance"
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumActive            DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "active"
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumDeleted           DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "deleted"
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumRejected          DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "rejected"
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumFailed            DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "failed"
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumExpired           DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "expired"
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumProvisioning      DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "provisioning"
	DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnumDeleting          DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = "deleting"
)

func (e DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum) ToPointer() *DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum {
	return &e
}

func (e *DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initiating-request":
		fallthrough
	case "pending-acceptance":
		fallthrough
	case "active":
		fallthrough
	case "deleted":
		fallthrough
	case "rejected":
		fallthrough
	case "failed":
		fallthrough
	case "expired":
		fallthrough
	case "provisioning":
		fallthrough
	case "deleting":
		*e = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum: %v", v)
	}
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus - The status of the VPC peering connection.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus struct {
	Code    *DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum
	Message *string
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags - Describes a tag.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags struct {
	Key   *string
	Value *string
}

// DescribeVpcPeeringConnectionsResultVpcPeeringConnections - Describes a VPC peering connection.
type DescribeVpcPeeringConnectionsResultVpcPeeringConnections struct {
	AccepterVpcInfo        *DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo
	ExpirationTime         *time.Time
	RequesterVpcInfo       *DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo
	Status                 *DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus
	Tags                   []DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags
	VpcPeeringConnectionID *string
}

// DescribeVpcPeeringConnectionsResult - Success
type DescribeVpcPeeringConnectionsResult struct {
	NextToken             *string
	VpcPeeringConnections []DescribeVpcPeeringConnectionsResultVpcPeeringConnections
}
