// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSearchRvAutoCompleteFieldEnum - Field name for which you want auto-completion
type GetSearchRvAutoCompleteFieldEnum string

const (
	GetSearchRvAutoCompleteFieldEnumMake          GetSearchRvAutoCompleteFieldEnum = "make"
	GetSearchRvAutoCompleteFieldEnumModel         GetSearchRvAutoCompleteFieldEnum = "model"
	GetSearchRvAutoCompleteFieldEnumTrim          GetSearchRvAutoCompleteFieldEnum = "trim"
	GetSearchRvAutoCompleteFieldEnumClass         GetSearchRvAutoCompleteFieldEnum = "class"
	GetSearchRvAutoCompleteFieldEnumTransmission  GetSearchRvAutoCompleteFieldEnum = "transmission"
	GetSearchRvAutoCompleteFieldEnumFuelType      GetSearchRvAutoCompleteFieldEnum = "fuel_type"
	GetSearchRvAutoCompleteFieldEnumExteriorColor GetSearchRvAutoCompleteFieldEnum = "exterior_color"
	GetSearchRvAutoCompleteFieldEnumInteriorColor GetSearchRvAutoCompleteFieldEnum = "interior_color"
	GetSearchRvAutoCompleteFieldEnumEngine        GetSearchRvAutoCompleteFieldEnum = "engine"
	GetSearchRvAutoCompleteFieldEnumState         GetSearchRvAutoCompleteFieldEnum = "state"
	GetSearchRvAutoCompleteFieldEnumCity          GetSearchRvAutoCompleteFieldEnum = "city"
)

func (e *GetSearchRvAutoCompleteFieldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "make":
		fallthrough
	case "model":
		fallthrough
	case "trim":
		fallthrough
	case "class":
		fallthrough
	case "transmission":
		fallthrough
	case "fuel_type":
		fallthrough
	case "exterior_color":
		fallthrough
	case "interior_color":
		fallthrough
	case "engine":
		fallthrough
	case "state":
		fallthrough
	case "city":
		*e = GetSearchRvAutoCompleteFieldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchRvAutoCompleteFieldEnum: %s", s)
	}
}

// GetSearchRvAutoCompleteSortByEnum - Sort the response, either by index or count(default)
type GetSearchRvAutoCompleteSortByEnum string

const (
	GetSearchRvAutoCompleteSortByEnumIndex GetSearchRvAutoCompleteSortByEnum = "index"
	GetSearchRvAutoCompleteSortByEnumCount GetSearchRvAutoCompleteSortByEnum = "count"
)

func (e *GetSearchRvAutoCompleteSortByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "index":
		fallthrough
	case "count":
		*e = GetSearchRvAutoCompleteSortByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchRvAutoCompleteSortByEnum: %s", s)
	}
}

type GetSearchRvAutoCompleteQueryParams struct {
	// The API Authentication Key. Mandatory with all API calls.
	APIKey *string `queryParam:"style=form,explode=true,name=api_key"`
	// To filter listing on their body type
	BodyType *string `queryParam:"style=form,explode=true,name=body_type"`
	// To filter listing on City in which they are listed
	City *string `queryParam:"style=form,explode=true,name=city"`
	// Color of the vehicle
	Color *string `queryParam:"style=form,explode=true,name=color"`
	// To filter listing on their drivetrain
	Drivetrain *string `queryParam:"style=form,explode=true,name=drivetrain"`
	// To filter listing on their engine
	Engine *string `queryParam:"style=form,explode=true,name=engine"`
	// Provide minimum count value for facets
	FacetMinCount *float64 `queryParam:"style=form,explode=true,name=facet_min_count"`
	// Field name for which you want auto-completion
	Field GetSearchRvAutoCompleteFieldEnum `queryParam:"style=form,explode=true,name=field"`
	// To filter listing on their fuel type
	FuelType *string `queryParam:"style=form,explode=true,name=fuel_type"`
	// Boolean variable to indicate ignore case of current input
	IgnoreCase *bool `queryParam:"style=form,explode=true,name=ignore_case"`
	// Input entered so far
	Input string `queryParam:"style=form,explode=true,name=input"`
	// To filter listing on their condition. Either used or new
	InventoryType *shared.InventoryTypeEnum `queryParam:"style=form,explode=true,name=inventory_type"`
	// To filter listings on their make
	Make *string `queryParam:"style=form,explode=true,name=make"`
	// To filter listings on their model
	Model *string `queryParam:"style=form,explode=true,name=model"`
	// Radius around the search location (Unit - Miles)
	Radius *int `queryParam:"style=form,explode=true,name=radius"`
	// seller type for autocomplete
	SellerType *string `queryParam:"style=form,explode=true,name=seller_type"`
	// Sort the response, either by index or count(default)
	SortBy *GetSearchRvAutoCompleteSortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// To filter listing on State in which they are listed
	State *string `queryParam:"style=form,explode=true,name=state"`
	// Boolean variable to indicate wheather to include term counts as well in response
	TermCounts *bool `queryParam:"style=form,explode=true,name=term_counts"`
	// To filter listing on their transmission
	Transmission *string `queryParam:"style=form,explode=true,name=transmission"`
	// To filter listing on their trim
	Trim *string `queryParam:"style=form,explode=true,name=trim"`
	// To filter listing on their vehicle type
	VehicleType *string `queryParam:"style=form,explode=true,name=vehicle_type"`
	// To filter listing on their year
	Year *string `queryParam:"style=form,explode=true,name=year"`
	// To filter listing on ZIP around which they are listed
	Zip *string `queryParam:"style=form,explode=true,name=zip"`
}

type GetSearchRvAutoCompleteRequest struct {
	QueryParams GetSearchRvAutoCompleteQueryParams
}

type GetSearchRvAutoCompleteResponse struct {
	ContentType string
	// Error
	Error *shared.Error
	// Unique terms available in given field for auto completion
	SearchAutoCompleteResponse *shared.SearchAutoCompleteResponse
	StatusCode                 int
	RawResponse                *http.Response
}
