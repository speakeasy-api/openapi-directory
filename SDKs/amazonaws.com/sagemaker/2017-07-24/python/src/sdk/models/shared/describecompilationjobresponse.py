"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import compilationjobstatus_enum as shared_compilationjobstatus_enum
from ..shared import inputconfig as shared_inputconfig
from ..shared import modelartifacts as shared_modelartifacts
from ..shared import modeldigests as shared_modeldigests
from ..shared import neovpcconfig as shared_neovpcconfig
from ..shared import outputconfig as shared_outputconfig
from ..shared import stoppingcondition as shared_stoppingcondition
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeCompilationJobResponse:
    r"""Success"""
    
    compilation_job_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompilationJobArn') }})  
    compilation_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompilationJobName') }})  
    compilation_job_status: shared_compilationjobstatus_enum.CompilationJobStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompilationJobStatus') }})  
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    failure_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason') }})  
    input_config: shared_inputconfig.InputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputConfig') }})  
    last_modified_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    model_artifacts: shared_modelartifacts.ModelArtifacts = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelArtifacts') }})  
    output_config: shared_outputconfig.OutputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputConfig') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    stopping_condition: shared_stoppingcondition.StoppingCondition = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingCondition') }})  
    compilation_end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompilationEndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    compilation_start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompilationStartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    inference_image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InferenceImage'), 'exclude': lambda f: f is None }})  
    model_digests: Optional[shared_modeldigests.ModelDigests] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelDigests'), 'exclude': lambda f: f is None }})  
    model_package_version_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageVersionArn'), 'exclude': lambda f: f is None }})  
    vpc_config: Optional[shared_neovpcconfig.NeoVpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfig'), 'exclude': lambda f: f is None }})  
    