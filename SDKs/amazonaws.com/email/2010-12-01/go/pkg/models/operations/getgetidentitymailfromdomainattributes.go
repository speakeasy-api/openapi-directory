// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETIdentityMailFromDomainAttributesActionEnum
type GETGETIdentityMailFromDomainAttributesActionEnum string

const (
	GETGETIdentityMailFromDomainAttributesActionEnumGetIdentityMailFromDomainAttributes GETGETIdentityMailFromDomainAttributesActionEnum = "GetIdentityMailFromDomainAttributes"
)

func (e *GETGETIdentityMailFromDomainAttributesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetIdentityMailFromDomainAttributes":
		*e = GETGETIdentityMailFromDomainAttributesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETIdentityMailFromDomainAttributesActionEnum: %s", s)
	}
}

// GETGETIdentityMailFromDomainAttributesVersionEnum
type GETGETIdentityMailFromDomainAttributesVersionEnum string

const (
	GETGETIdentityMailFromDomainAttributesVersionEnumTwoThousandAndTen1201 GETGETIdentityMailFromDomainAttributesVersionEnum = "2010-12-01"
)

func (e *GETGETIdentityMailFromDomainAttributesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-12-01":
		*e = GETGETIdentityMailFromDomainAttributesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETIdentityMailFromDomainAttributesVersionEnum: %s", s)
	}
}

type GETGETIdentityMailFromDomainAttributesQueryParams struct {
	Action GETGETIdentityMailFromDomainAttributesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// A list of one or more identities.
	Identities []string                                          `queryParam:"style=form,explode=true,name=Identities"`
	Version    GETGETIdentityMailFromDomainAttributesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETGETIdentityMailFromDomainAttributesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETIdentityMailFromDomainAttributesRequest struct {
	QueryParams GETGETIdentityMailFromDomainAttributesQueryParams
	Headers     GETGETIdentityMailFromDomainAttributesHeaders
}

type GETGETIdentityMailFromDomainAttributesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
