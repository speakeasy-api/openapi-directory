// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum - The current modification state. The modification state is null for unmodified volumes.
type DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum string

const (
	DescribeVolumesModificationsResultVolumesModificationsModificationStateEnumModifying  DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum = "modifying"
	DescribeVolumesModificationsResultVolumesModificationsModificationStateEnumOptimizing DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum = "optimizing"
	DescribeVolumesModificationsResultVolumesModificationsModificationStateEnumCompleted  DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum = "completed"
	DescribeVolumesModificationsResultVolumesModificationsModificationStateEnumFailed     DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum = "failed"
)

func (e DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum) ToPointer() *DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum {
	return &e
}

func (e *DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "modifying":
		fallthrough
	case "optimizing":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum: %v", v)
	}
}

// DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum - The original EBS volume type of the volume.
type DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum string

const (
	DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnumStandard DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum = "standard"
	DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnumIo1      DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum = "io1"
	DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnumIo2      DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum = "io2"
	DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnumGp2      DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum = "gp2"
	DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnumSc1      DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum = "sc1"
	DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnumSt1      DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum = "st1"
	DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnumGp3      DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum = "gp3"
)

func (e DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum) ToPointer() *DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum {
	return &e
}

func (e *DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "io1":
		fallthrough
	case "io2":
		fallthrough
	case "gp2":
		fallthrough
	case "sc1":
		fallthrough
	case "st1":
		fallthrough
	case "gp3":
		*e = DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum: %v", v)
	}
}

// DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum - The target EBS volume type of the volume.
type DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum string

const (
	DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnumStandard DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum = "standard"
	DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnumIo1      DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum = "io1"
	DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnumIo2      DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum = "io2"
	DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnumGp2      DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum = "gp2"
	DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnumSc1      DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum = "sc1"
	DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnumSt1      DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum = "st1"
	DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnumGp3      DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum = "gp3"
)

func (e DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum) ToPointer() *DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum {
	return &e
}

func (e *DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "io1":
		fallthrough
	case "io2":
		fallthrough
	case "gp2":
		fallthrough
	case "sc1":
		fallthrough
	case "st1":
		fallthrough
	case "gp3":
		*e = DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum: %v", v)
	}
}

// DescribeVolumesModificationsResultVolumesModifications - <p>Describes the modification status of an EBS volume.</p> <p>If the volume has never been modified, some element values will be null.</p>
type DescribeVolumesModificationsResultVolumesModifications struct {
	EndTime                    *time.Time
	ModificationState          *DescribeVolumesModificationsResultVolumesModificationsModificationStateEnum
	OriginalIops               *int64
	OriginalMultiAttachEnabled *bool
	OriginalSize               *int64
	OriginalThroughput         *int64
	OriginalVolumeType         *DescribeVolumesModificationsResultVolumesModificationsOriginalVolumeTypeEnum
	Progress                   *int64
	StartTime                  *time.Time
	StatusMessage              *string
	TargetIops                 *int64
	TargetMultiAttachEnabled   *bool
	TargetSize                 *int64
	TargetThroughput           *int64
	TargetVolumeType           *DescribeVolumesModificationsResultVolumesModificationsTargetVolumeTypeEnum
	VolumeID                   *string
}

// DescribeVolumesModificationsResult - Success
type DescribeVolumesModificationsResult struct {
	NextToken            *string
	VolumesModifications []DescribeVolumesModificationsResultVolumesModifications
}
