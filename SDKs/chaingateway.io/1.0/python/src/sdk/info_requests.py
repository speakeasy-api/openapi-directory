"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class InfoRequests:
    r"""Requests that return information on balances, transactions, gas price, exchange rates, ..."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_block(self, request: operations.GetBlockRequest) -> operations.GetBlockResponse:
        r"""getBlock
        Returns information of an ethereum block with or without transactions
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getBlock'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "get_block_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBlockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetBlock])
                res.get_block = out

        return res

    def get_ethereum_balance(self, request: operations.GetEthereumBalanceRequest) -> operations.GetEthereumBalanceResponse:
        r"""getEthereumBalance
        Returns the ethereum balance of a given address.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getEthereumBalance'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "get_ethereum_balance_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEthereumBalanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetEthereumBalance])
                res.get_ethereum_balance = out

        return res

    def get_exchange_rate(self, request: operations.GetExchangeRateRequest) -> operations.GetExchangeRateResponse:
        r"""getExchangeRate
        Returns the current Ethereum price in Euro or US Dollar.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getExchangeRate'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "get_exchange_rate_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExchangeRateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetExchangeRate])
                res.get_exchange_rate = out

        return res

    def get_gas_price(self, request: operations.GetGasPriceRequest) -> operations.GetGasPriceResponse:
        r"""getGasPrice
        Returns the current gas price in GWEI.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getGasPrice'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGasPriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetGasPrice])
                res.get_gas_price = out

        return res

    def get_last_block_number(self, request: operations.GetLastBlockNumberRequest) -> operations.GetLastBlockNumberResponse:
        r"""getLastBlockNumber
        Returns the block number of the last mined ethereum block.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getLastBlockNumber'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLastBlockNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetLastBlockNumber])
                res.get_last_block_number = out

        return res

    def get_token(self, request: operations.GetTokenRequest) -> operations.GetTokenResponse:
        r"""getToken
        Returns information about a specific ERC20 token like name, symbol, decimal places and total supply.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getToken'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "get_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetToken])
                res.get_token = out

        return res

    def get_token_balance(self, request: operations.GetTokenBalanceRequest) -> operations.GetTokenBalanceResponse:
        r"""getTokenBalance
        Returns the token balance of a given address.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getTokenBalance'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "get_token_balance_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTokenBalanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTokenBalance])
                res.get_token_balance = out

        return res

    def get_transactions(self, request: operations.GetTransactionsRequest) -> operations.GetTransactionsResponse:
        r"""getTransactions
        Returns information like confirmations, token contract address, amount, gas price and more of a given transaction.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getTransactions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "get_transactions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTransactions])
                res.get_transactions = out

        return res

    