// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServiceMeshControlPlaneManagementStateEnum - LifecycleState of control plane management.
type ServiceMeshControlPlaneManagementStateEnum string

const (
	ServiceMeshControlPlaneManagementStateEnumLifecycleStateUnspecified ServiceMeshControlPlaneManagementStateEnum = "LIFECYCLE_STATE_UNSPECIFIED"
	ServiceMeshControlPlaneManagementStateEnumDisabled                  ServiceMeshControlPlaneManagementStateEnum = "DISABLED"
	ServiceMeshControlPlaneManagementStateEnumFailedPrecondition        ServiceMeshControlPlaneManagementStateEnum = "FAILED_PRECONDITION"
	ServiceMeshControlPlaneManagementStateEnumProvisioning              ServiceMeshControlPlaneManagementStateEnum = "PROVISIONING"
	ServiceMeshControlPlaneManagementStateEnumActive                    ServiceMeshControlPlaneManagementStateEnum = "ACTIVE"
	ServiceMeshControlPlaneManagementStateEnumStalled                   ServiceMeshControlPlaneManagementStateEnum = "STALLED"
	ServiceMeshControlPlaneManagementStateEnumNeedsAttention            ServiceMeshControlPlaneManagementStateEnum = "NEEDS_ATTENTION"
	ServiceMeshControlPlaneManagementStateEnumDegraded                  ServiceMeshControlPlaneManagementStateEnum = "DEGRADED"
)

func (e ServiceMeshControlPlaneManagementStateEnum) ToPointer() *ServiceMeshControlPlaneManagementStateEnum {
	return &e
}

func (e *ServiceMeshControlPlaneManagementStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIFECYCLE_STATE_UNSPECIFIED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "FAILED_PRECONDITION":
		fallthrough
	case "PROVISIONING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "STALLED":
		fallthrough
	case "NEEDS_ATTENTION":
		fallthrough
	case "DEGRADED":
		*e = ServiceMeshControlPlaneManagementStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceMeshControlPlaneManagementStateEnum: %v", v)
	}
}

// ServiceMeshControlPlaneManagement - Status of control plane management.
type ServiceMeshControlPlaneManagement struct {
	// Explanation of state.
	Details []ServiceMeshStatusDetails `json:"details,omitempty"`
	// LifecycleState of control plane management.
	State *ServiceMeshControlPlaneManagementStateEnum `json:"state,omitempty"`
}
