"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DomainNameConfigurationDomainNameStatusEnum(str, Enum):
    r"""The status of the domain name migration. The valid values are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated."""
    AVAILABLE = 'AVAILABLE'
    UPDATING = 'UPDATING'
    PENDING_CERTIFICATE_REIMPORT = 'PENDING_CERTIFICATE_REIMPORT'
    PENDING_OWNERSHIP_VERIFICATION = 'PENDING_OWNERSHIP_VERIFICATION'

class DomainNameConfigurationEndpointTypeEnum(str, Enum):
    r"""The endpoint type."""
    REGIONAL = 'REGIONAL'
    EDGE = 'EDGE'

class DomainNameConfigurationSecurityPolicyEnum(str, Enum):
    r"""The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2."""
    TLS_1_0 = 'TLS_1_0'
    TLS_1_2 = 'TLS_1_2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DomainNameConfiguration:
    r"""The domain name configuration."""
    
    api_gateway_domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiGatewayDomainName'), 'exclude': lambda f: f is None }})  
    certificate_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateArn'), 'exclude': lambda f: f is None }})  
    certificate_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateName'), 'exclude': lambda f: f is None }})  
    certificate_upload_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateUploadDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    domain_name_status: Optional[DomainNameConfigurationDomainNameStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainNameStatus'), 'exclude': lambda f: f is None }})  
    domain_name_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainNameStatusMessage'), 'exclude': lambda f: f is None }})  
    endpoint_type: Optional[DomainNameConfigurationEndpointTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointType'), 'exclude': lambda f: f is None }})  
    hosted_zone_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HostedZoneId'), 'exclude': lambda f: f is None }})  
    ownership_verification_certificate_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnershipVerificationCertificateArn'), 'exclude': lambda f: f is None }})  
    security_policy: Optional[DomainNameConfigurationSecurityPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityPolicy'), 'exclude': lambda f: f is None }})  
    