/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ConnectionSettingsUpdateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey: string;
}

export class ConnectionSettingsUpdateRequest extends SpeakeasyBase {
  /**
   * Fields that need to be updated on the resource
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  connectionInput: shared.ConnectionInput;

  /**
   * Resource Name
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=resource",
  })
  resource: string;

  /**
   * Service ID of the resource to return
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=service_id",
  })
  serviceId: string;

  /**
   * Unified API
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=unified_api",
  })
  unifiedApi: string;

  /**
   * The ID of your Unify application
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-apideck-app-id",
  })
  xApideckAppId: string;

  /**
   * ID of the consumer which you want to get or push data from
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-apideck-consumer-id",
  })
  xApideckConsumerId: string;
}

export class ConnectionSettingsUpdateResponse extends SpeakeasyBase {
  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  badRequestResponse?: shared.BadRequestResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The specified resource was not found
   */
  @SpeakeasyMetadata()
  notFoundResponse?: shared.NotFoundResponse;

  /**
   * Payment Required
   */
  @SpeakeasyMetadata()
  paymentRequiredResponse?: shared.PaymentRequiredResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  unauthorizedResponse?: shared.UnauthorizedResponse;

  /**
   * Unexpected error
   */
  @SpeakeasyMetadata()
  unexpectedErrorResponse?: shared.UnexpectedErrorResponse;

  /**
   * Unprocessable
   */
  @SpeakeasyMetadata()
  unprocessableResponse?: shared.UnprocessableResponse;

  /**
   * Connection updated
   */
  @SpeakeasyMetadata()
  updateConnectionResponse?: shared.UpdateConnectionResponse;
}
