"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ext_enum as shared_ext_enum
from ..shared import versionnumber_enum as shared_versionnumber_enum
from ..shared import view_enum as shared_view_enum
from typing import Optional


@dataclasses.dataclass
class GetSearchVersionNumberNearbySearchExtRequest:
    
    ext: shared_ext_enum.ExtEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'ext', 'style': 'simple', 'explode': False }})
    r"""Expected response format."""  
    lat: float = dataclasses.field(metadata={'query_param': { 'field_name': 'lat', 'style': 'form', 'explode': True }})
    r"""Latitude where results should be biased.
    NOTE: supplying a lat/lon without a radius will return search results biased to that point.
    """  
    lon: float = dataclasses.field(metadata={'query_param': { 'field_name': 'lon', 'style': 'form', 'explode': True }})
    r"""Longitude where results should be biased
    NOTE: supplying a lat/lon without a radius will return search results biased to that point.
    """  
    version_number: shared_versionnumber_enum.VersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})
    r"""Service version number. The current value is 2."""  
    btm_right: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'btmRight', 'style': 'form', 'explode': True }})
    r"""Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon."""  
    country_set: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'countrySet', 'style': 'form', 'explode': True }})
    r"""Comma separated string of country codes. This will limit the search to the specified countries."""  
    extended_postal_codes_for: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'extendedPostalCodesFor', 'style': 'form', 'explode': True }})
    r"""Indexes for which extended postal codes should be included in the results. Available indexes are:
      - <b>Addr</b> = Address ranges
      - <b>Geo</b> = Geographies
      - <b>PAD</b> = Point Addresses
      - <b>POI</b> = Points of Interest
      - <b>Str</b> = Streets
      - <b>XStr</b> = Cross Streets (intersections)
    """  
    idx_set: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'idxSet', 'style': 'form', 'explode': True }})
    r"""A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
      - <b>Addr</b> = Address range interpolation (when there is no PAD)
      - <b>Geo</b> = Geographies
      - <b>PAD</b> = Point Addresses
      - <b>POI</b> = Points of interest
      - <b>Str</b> = Streets
      - <b>Xstr</b> = Cross Streets (intersections)
    """  
    language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""Language in which search results should be returned. Should be one of <a href=\\"/search-api/search-api-documentation/supported-languages\\">supported IETF language tags</a>, case insensitive."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of search results that will be returned."""  
    max_fuzzy_level: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxFuzzyLevel', 'style': 'form', 'explode': True }})
    r"""Maximum fuzziness level to be used."""  
    min_fuzzy_level: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minFuzzyLevel', 'style': 'form', 'explode': True }})
    r"""Minimum fuzziness level to be used."""  
    ofs: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ofs', 'style': 'form', 'explode': True }})
    r"""Starting offset of the returned results within the full result set."""  
    radius: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})
    r"""If radius and position are set, the results will be constrained to the defined area. The radius parameter is specified in meters."""  
    top_left: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'topLeft', 'style': 'form', 'explode': True }})
    r"""Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon."""  
    view: Optional[shared_view_enum.ViewEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'view', 'style': 'form', 'explode': True }})
    r"""Geopolitical View."""  
    

@dataclasses.dataclass
class GetSearchVersionNumberNearbySearchExtResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    