<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Quota 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve organization and space specific quota
     * 
     * Retrieve the quota that is assigned to the organization and space.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContainersQuotaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContainersQuotaResponse
     */
	public function getContainersQuota(
        \OpenAPI\OpenAPI\Models\Operations\GetContainersQuotaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContainersQuotaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/containers/quota');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContainersQuotaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containersQuotaInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainersQuotaInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List container sizes and quota limits
     * 
     * This endpoint returns a list of available container sizes and the quota limit and usage for the space. 
     * 
     * - Container sizes: A list of available container sizes indicating the amount of container memory, disk space and virtual CPUs that can be assigned to the container.
     * - Quota limit: Lists the number of containers, public IP addresses, available container memory, and virtual CPUS that are allocated to a space. 
     * - Quota usage: Lists the current number of containers, images, and public IP addresses in a space that is counted towards your quota limit. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContainersUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContainersUsageResponse
     */
	public function getContainersUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetContainersUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContainersUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/containers/usage');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContainersUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containersUsageInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainersUsageInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update space quota
     * 
     * This endpoint updates the quota that is allocated to a Bluemix space. 
     * 
     *  **Note**: Only paid accounts are eligbile to update the space quota. If you are using a free-trial account, upgrade to a paid account first.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutContainersQuotaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutContainersQuotaResponse
     */
	public function putContainersQuota(
        \OpenAPI\OpenAPI\Models\Operations\PutContainersQuotaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutContainersQuotaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/containers/quota');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "containersQuotaList", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutContainersQuotaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}