// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SignalPaymentMethodEnum - The payment method to complete the transaction after the risk assessment. It may be different from the default payment method.
//
// `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
//
// `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
//
// `STANDARD_ACH`: standard ACH by NACHA
//
// `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
//
// `DEBIT_CARD`: if the default payment is over debit card networks
//
// `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
//
// Possible values: `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
type SignalPaymentMethodEnum string

const (
	SignalPaymentMethodEnumSameDayAch             SignalPaymentMethodEnum = "SAME_DAY_ACH"
	SignalPaymentMethodEnumNextDayAch             SignalPaymentMethodEnum = "NEXT_DAY_ACH"
	SignalPaymentMethodEnumStandardAch            SignalPaymentMethodEnum = "STANDARD_ACH"
	SignalPaymentMethodEnumRealTimePayments       SignalPaymentMethodEnum = "REAL_TIME_PAYMENTS"
	SignalPaymentMethodEnumDebitCard              SignalPaymentMethodEnum = "DEBIT_CARD"
	SignalPaymentMethodEnumMultiplePaymentMethods SignalPaymentMethodEnum = "MULTIPLE_PAYMENT_METHODS"
)

func (e *SignalPaymentMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SAME_DAY_ACH":
		fallthrough
	case "NEXT_DAY_ACH":
		fallthrough
	case "STANDARD_ACH":
		fallthrough
	case "REAL_TIME_PAYMENTS":
		fallthrough
	case "DEBIT_CARD":
		fallthrough
	case "MULTIPLE_PAYMENT_METHODS":
		*e = SignalPaymentMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SignalPaymentMethodEnum: %s", s)
	}
}
