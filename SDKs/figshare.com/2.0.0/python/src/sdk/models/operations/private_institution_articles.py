"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import article as shared_article
from ..shared import errormessage as shared_errormessage
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class PrivateInstitutionArticlesSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PrivateInstitutionArticlesOrderEnum(str, Enum):
    r"""The field by which to order. Default varies by endpoint/resource."""
    PUBLISHED_DATE = 'published_date'
    MODIFIED_DATE = 'modified_date'
    VIEWS = 'views'
    SHARES = 'shares'
    DOWNLOADS = 'downloads'
    CITES = 'cites'

class PrivateInstitutionArticlesOrderDirectionEnum(str, Enum):
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class PrivateInstitutionArticlesRequest:
    
    item_type: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'item_type', 'style': 'form', 'explode': True }})
    r"""Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of results included on a page. Used for pagination with query"""  
    modified_since: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'modified_since', 'style': 'form', 'explode': True }})
    r"""Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Where to start the listing(the offset of the first result). Used for pagination with limit"""  
    order: Optional[PrivateInstitutionArticlesOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""The field by which to order. Default varies by endpoint/resource."""  
    order_direction: Optional[PrivateInstitutionArticlesOrderDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_direction', 'style': 'form', 'explode': True }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number. Used for pagination with page_size"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of results included on a page. Used for pagination with page"""  
    published_since: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'published_since', 'style': 'form', 'explode': True }})
    r"""Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD"""  
    resource_doi: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resource_doi', 'style': 'form', 'explode': True }})
    r"""only return collections with this resource_doi"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""only return collections with this status"""  
    

@dataclasses.dataclass
class PrivateInstitutionArticlesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    articles: Optional[list[shared_article.Article]] = dataclasses.field(default=None)
    r"""OK. An array of articles belonging to the institution"""  
    error_message: Optional[shared_errormessage.ErrorMessage] = dataclasses.field(default=None)
    r"""Forbidden"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    