<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ExportMssqlDbJobConfig - Configuration for the export.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ExportMssqlDbJobConfig
{
    /**
     * A Boolean value that determines whether an existing database can be overwritten by a database this is exported from a backup. Set to false to prevent overwrites. This is the default. Set to true to allow overwrites.
     * 
     * @var ?bool $allowOverwrite
     */
	#[\JMS\Serializer\Annotation\SerializedName('allowOverwrite')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowOverwrite = null;
    
    /**
     * A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
     * 
     * @var ?bool $finishRecovery
     */
	#[\JMS\Serializer\Annotation\SerializedName('finishRecovery')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $finishRecovery = null;
    
    /**
     * Maximum number of parallel data streams that can be used to copy data to the target system.
     * 
     * @var ?int $maxDataStreams
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxDataStreams')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxDataStreams = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('recoveryPoint')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MssqlRecoveryPoint')]
    public MssqlRecoveryPoint $recoveryPoint;
    
    /**
     * The target path to store all data files.
     * 
     * @var ?string $targetDataFilePath
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetDataFilePath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetDataFilePath = null;
    
    /**
     * Name of the new database.
     * 
     * @var string $targetDatabaseName
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetDatabaseName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $targetDatabaseName;
    
    /**
     * One target path for each individual database file. Overrides targetDataFilePath and targetLogFilePath.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\MssqlDbFileExportPath> $targetFilePaths
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetFilePaths')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\MssqlDbFileExportPath>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $targetFilePaths = null;
    
    /**
     * ID of the Microsoft SQL instance for the new database.
     * 
     * @var string $targetInstanceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetInstanceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $targetInstanceId;
    
    /**
     * The target path to store all log files.
     * 
     * @var ?string $targetLogFilePath
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetLogFilePath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetLogFilePath = null;
    
	public function __construct()
	{
		$this->allowOverwrite = null;
		$this->finishRecovery = null;
		$this->maxDataStreams = null;
		$this->recoveryPoint = new \OpenAPI\OpenAPI\Models\Shared\MssqlRecoveryPoint();
		$this->targetDataFilePath = null;
		$this->targetDatabaseName = "";
		$this->targetFilePaths = null;
		$this->targetInstanceId = "";
		$this->targetLogFilePath = null;
	}
}
