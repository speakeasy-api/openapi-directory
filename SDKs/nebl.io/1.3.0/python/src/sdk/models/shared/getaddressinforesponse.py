"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAddressInfoResponseUtxosTokens:
    
    aggregation_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregationPolicy'), 'exclude': lambda f: f is None }})
    r"""Whether the tokens can be aggregated together"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Number of Tokens"""  
    divisibility: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('divisibility'), 'exclude': lambda f: f is None }})
    r"""Decimal places the token is divisible to"""  
    issue_txid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueTxid'), 'exclude': lambda f: f is None }})
    r"""TXID the token originally was issued in"""  
    lock_status: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockStatus'), 'exclude': lambda f: f is None }})
    r"""Whether the token is locked, preventing more from being issued"""  
    token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenId'), 'exclude': lambda f: f is None }})
    r"""Unique NTP1 identifier for this token"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAddressInfoResponseUtxos:
    
    blockheight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockheight'), 'exclude': lambda f: f is None }})
    r"""Blockheight of the UTXO"""  
    blocktime: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocktime'), 'exclude': lambda f: f is None }})
    r"""Blocktime of the UTXO"""  
    index: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index'), 'exclude': lambda f: f is None }})
    r"""Index of the UTXO at this address"""  
    script_pub_key: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptPubKey'), 'exclude': lambda f: f is None }})
    r"""Object representing the scruptPubKey of the UTXO"""  
    tokens: Optional[list[GetAddressInfoResponseUtxosTokens]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokens'), 'exclude': lambda f: f is None }})
    r"""Array of NTP1 tokens in this UTXO."""  
    txid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txid'), 'exclude': lambda f: f is None }})
    r"""Txid of this UTXO"""  
    used: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used'), 'exclude': lambda f: f is None }})
    r"""Whether the UTXO has been used"""  
    value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the UTXO in NEBL satoshi"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAddressInfoResponse:
    r"""An object with an array of UTXOs for this address"""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""The Neblio Address"""  
    utxos: Optional[list[GetAddressInfoResponseUtxos]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utxos'), 'exclude': lambda f: f is None }})
    r"""Array of UTXOs held at this address."""  
    