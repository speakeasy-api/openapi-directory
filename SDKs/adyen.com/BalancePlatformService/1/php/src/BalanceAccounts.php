<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class BalanceAccounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a balance account
     * 
     * Returns a balance account and its balances for the default currency and other currencies with a non-zero balance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdResponse
     */
	public function getBalanceAccountsId(
        \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/balanceAccounts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->balanceAccount = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BalanceAccount', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all payment instruments for a balance account
     * 
     * Returns a paginated list of the payment instruments associated with a balance account. 
     * 
     * To fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments and to skip the first 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsResponse
     */
	public function getBalanceAccountsIdPaymentInstruments(
        \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/balanceAccounts/{id}/paymentInstruments', \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBalanceAccountsIdPaymentInstrumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedPaymentInstrumentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedPaymentInstrumentsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a balance account
     * 
     * Updates a balance account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchBalanceAccountsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchBalanceAccountsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchBalanceAccountsIdResponse
     */
	public function patchBalanceAccountsId(
        \OpenAPI\OpenAPI\Models\Operations\PatchBalanceAccountsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchBalanceAccountsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchBalanceAccountsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/balanceAccounts/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchBalanceAccountsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "balanceAccountUpdateRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchBalanceAccountsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->balanceAccount = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BalanceAccount', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a balance account
     * 
     * Creates a balance account that holds the funds of the associated account holder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BalanceAccountInfoInput $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostBalanceAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostBalanceAccountsResponse
     */
	public function postBalanceAccounts(
        \OpenAPI\OpenAPI\Models\Shared\BalanceAccountInfoInput $request,
        \OpenAPI\OpenAPI\Models\Operations\PostBalanceAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostBalanceAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/balanceAccounts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostBalanceAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->balanceAccount = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BalanceAccount', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}