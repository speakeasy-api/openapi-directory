"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Catalogs:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudprivatecatalogproducer_catalogs_associations_create(self, request: operations.CloudprivatecatalogproducerCatalogsAssociationsCreateRequest, security: operations.CloudprivatecatalogproducerCatalogsAssociationsCreateSecurity) -> operations.CloudprivatecatalogproducerCatalogsAssociationsCreateResponse:
        r"""Creates an Association instance under a given Catalog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsAssociationsCreateRequest, base_url, '/v1beta1/{parent}/associations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_privatecatalogproducer_v1beta1_create_association_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsAssociationsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsAssociationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_associations_list(self, request: operations.CloudprivatecatalogproducerCatalogsAssociationsListRequest, security: operations.CloudprivatecatalogproducerCatalogsAssociationsListSecurity) -> operations.CloudprivatecatalogproducerCatalogsAssociationsListResponse:
        r"""Lists all Association resources under a catalog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsAssociationsListRequest, base_url, '/v1beta1/{parent}/associations', request)
        
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsAssociationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsAssociationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_create(self, request: operations.CloudprivatecatalogproducerCatalogsCreateRequest, security: operations.CloudprivatecatalogproducerCatalogsCreateSecurity) -> operations.CloudprivatecatalogproducerCatalogsCreateResponse:
        r"""Creates a new Catalog resource."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1beta1/catalogs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_privatecatalogproducer_v1beta1_catalog", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_get_iam_policy(self, request: operations.CloudprivatecatalogproducerCatalogsGetIamPolicyRequest, security: operations.CloudprivatecatalogproducerCatalogsGetIamPolicySecurity) -> operations.CloudprivatecatalogproducerCatalogsGetIamPolicyResponse:
        r"""Gets IAM policy for the specified Catalog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsGetIamPolicyRequest, base_url, '/v1beta1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_list(self, request: operations.CloudprivatecatalogproducerCatalogsListRequest, security: operations.CloudprivatecatalogproducerCatalogsListSecurity) -> operations.CloudprivatecatalogproducerCatalogsListResponse:
        r"""Lists Catalog resources that the producer has access to, within the
        scope of the parent resource.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1beta1/catalogs'
        
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_copy(self, request: operations.CloudprivatecatalogproducerCatalogsProductsCopyRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsCopySecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsCopyResponse:
        r"""Copies a Product under another Catalog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsCopyRequest, base_url, '/v1beta1/{name}:copy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_privatecatalogproducer_v1beta1_copy_product_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsCopyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsCopyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_create(self, request: operations.CloudprivatecatalogproducerCatalogsProductsCreateRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsCreateSecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsCreateResponse:
        r"""Creates a Product instance under a given Catalog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsCreateRequest, base_url, '/v1beta1/{parent}/products', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_privatecatalogproducer_v1beta1_product", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_icons_upload(self, request: operations.CloudprivatecatalogproducerCatalogsProductsIconsUploadRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsIconsUploadSecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsIconsUploadResponse:
        r"""Creates an Icon instance under a given Product.
        If Product only has a default icon, a new Icon
        instance is created and associated with the given Product.
        If Product already has a non-default icon, the action creates
        a new Icon instance, associates the newly created
        Icon with the given Product and deletes the old icon.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsIconsUploadRequest, base_url, '/v1beta1/{product}/icons:upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_privatecatalogproducer_v1beta1_upload_icon_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsIconsUploadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsIconsUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_list(self, request: operations.CloudprivatecatalogproducerCatalogsProductsListRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsListSecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsListResponse:
        r"""Lists Product resources that the producer has access to, within the
        scope of the parent catalog.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsListRequest, base_url, '/v1beta1/{parent}/products', request)
        
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_versions_create(self, request: operations.CloudprivatecatalogproducerCatalogsProductsVersionsCreateRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsVersionsCreateSecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsVersionsCreateResponse:
        r"""Creates a Version instance under a given Product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsVersionsCreateRequest, base_url, '/v1beta1/{parent}/versions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_privatecatalogproducer_v1beta1_version", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsVersionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsVersionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_versions_delete(self, request: operations.CloudprivatecatalogproducerCatalogsProductsVersionsDeleteRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsVersionsDeleteSecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsVersionsDeleteResponse:
        r"""Hard deletes a Version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsVersionsDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsVersionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsVersionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_versions_get(self, request: operations.CloudprivatecatalogproducerCatalogsProductsVersionsGetRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsVersionsGetSecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsVersionsGetResponse:
        r"""Returns the requested Version resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsVersionsGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsVersionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsVersionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_versions_list(self, request: operations.CloudprivatecatalogproducerCatalogsProductsVersionsListRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsVersionsListSecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsVersionsListResponse:
        r"""Lists Version resources that the producer has access to, within the
        scope of the parent Product.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsVersionsListRequest, base_url, '/v1beta1/{parent}/versions', request)
        
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsVersionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsVersionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_products_versions_patch(self, request: operations.CloudprivatecatalogproducerCatalogsProductsVersionsPatchRequest, security: operations.CloudprivatecatalogproducerCatalogsProductsVersionsPatchSecurity) -> operations.CloudprivatecatalogproducerCatalogsProductsVersionsPatchResponse:
        r"""Updates a specific Version resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsProductsVersionsPatchRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_privatecatalogproducer_v1beta1_version", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsProductsVersionsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsProductsVersionsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_set_iam_policy(self, request: operations.CloudprivatecatalogproducerCatalogsSetIamPolicyRequest, security: operations.CloudprivatecatalogproducerCatalogsSetIamPolicySecurity) -> operations.CloudprivatecatalogproducerCatalogsSetIamPolicyResponse:
        r"""Sets the IAM policy for the specified Catalog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsSetIamPolicyRequest, base_url, '/v1beta1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_test_iam_permissions(self, request: operations.CloudprivatecatalogproducerCatalogsTestIamPermissionsRequest, security: operations.CloudprivatecatalogproducerCatalogsTestIamPermissionsSecurity) -> operations.CloudprivatecatalogproducerCatalogsTestIamPermissionsResponse:
        r"""Tests the IAM permissions for the specified Catalog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsTestIamPermissionsRequest, base_url, '/v1beta1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def cloudprivatecatalogproducer_catalogs_undelete(self, request: operations.CloudprivatecatalogproducerCatalogsUndeleteRequest, security: operations.CloudprivatecatalogproducerCatalogsUndeleteSecurity) -> operations.CloudprivatecatalogproducerCatalogsUndeleteResponse:
        r"""Undeletes a deleted Catalog and all resources under it."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudprivatecatalogproducerCatalogsUndeleteRequest, base_url, '/v1beta1/{name}:undelete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudprivatecatalogproducerCatalogsUndeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudprivatecatalogproducerCatalogsUndeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    