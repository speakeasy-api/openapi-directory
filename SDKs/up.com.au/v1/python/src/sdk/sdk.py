"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .accounts import Accounts
from .categories import Categories
from .tags import Tags
from .transactions import Transactions
from .utility_endpoints import UtilityEndpoints
from .webhooks import Webhooks
from sdk.models import shared

SERVERS = [
    "https://api.up.com.au/api/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Up API gives you programmatic access to your balances and
    transaction data. You can request past transactions or set up
    webhooks to receive real-time events when new transactions hit your
    account. It’s new, it’s exciting and it’s just the beginning.
    """
    accounts: Accounts
    r"""Accounts represent the underlying store used to track balances
    and the transactions that have occurred to modify those balances
    over time. Up currently has two types of account: `SAVER`—used to
    earn interest and to hit savings goals, and `TRANSACTIONAL`—used
    for everyday spending.
    """
    categories: Categories
    r"""Categories enable understanding where your money goes by driving
    powerful insights in Up. All categories in Up are pre-defined
    and are automatically assigned to new purchases in most cases. A
    parent-child relationship is used to represent categories,
    however parent categories cannot be directly assigned to
    transactions.
    """
    tags: Tags
    r"""Tags are custom labels that can be associated with transactions
    on Up. Within the Up application, tags provide additional insight
    into spending. For example, you could have a \"Take Away\" tag that
    you apply to purchases from food delivery services. The Up API
    allows you to manage the tags associated with transactions. Each
    transaction may have up to 6 tags.
    
    Tags are identified by their labels, which are unique strings,
    so the tag \"Holiday\" has also the `id` `\"Holiday\"`.
    """
    transactions: Transactions
    r"""Transactions represent the movement of money into and out of an
    account. They have many characteristics that vary depending on
    the kind of transaction. Transactions may be temporarily `HELD`
    (pending) or `SETTLED`, typically depending on which payment
    method was used at the point of sale.
    """
    utility_endpoints: UtilityEndpoints
    r"""Some endpoints exist not to expose data, but to test the API
    itself. Currently there is only one endpoint in this group: ping!
    """
    webhooks: Webhooks
    r"""Webhooks provide a mechanism for a configured URL to receive
    events when transaction activity occurs on Up. You can think of
    webhooks as being like push notifications for your server-side
    application.
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.accounts = Accounts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.categories = Categories(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tags = Tags(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.transactions = Transactions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.utility_endpoints = UtilityEndpoints(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.webhooks = Webhooks(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    