"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TransactionRequests:
    r"""Requests to send Tokens, Ethereum and clear addresses"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def clear_address(self, request: operations.ClearAddressRequest) -> operations.ClearAddressResponse:
        r"""clearAddress
        Sends all available ethereum funds of an address to a specified receiver address.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/clearAddress'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "clear_address_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClearAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClearAddress])
                res.clear_address = out

        return res

    def send_ethereum(self, request: operations.SendEthereumRequest) -> operations.SendEthereumResponse:
        r"""sendEthereum
        Sends ethereum from an address controlled by the account to a specified receiver address.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sendEthereum'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "send_ethereum_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendEthereumResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SendEthereum])
                res.send_ethereum = out

        return res

    def send_token(self, request: operations.SendTokenRequest) -> operations.SendTokenResponse:
        r"""sendToken
        Sends ERC20 tokens from an address controlled by the account to a specified receiver address. The token contract address is needed to specify the token. The use of the identifier parameter is recommend and awaits an unique string. Whenever a transaction is beeing sent, the identifier is checked and the transaction gets dropped if there is one with that identifier already.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sendToken'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "send_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SendToken])
                res.send_token = out

        return res

    