<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EnterpriseAdmin 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a self-hosted runner to a group for an enterprise
     * 
     * Adds a self-hosted runner to a runner group configured in an enterprise.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise`
     * scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise
     */
	public function enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create a global webhook
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-global-webhook
     */
	public function enterpriseAdminCreateGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GlobalHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an impersonation OAuth token
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-impersonation-oauth-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-impersonation-oauth-token
     */
	public function enterpriseAdminCreateImpersonationOAuthToken(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{username}/authorizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Authorization', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an organization
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-organization
     */
	public function enterpriseAdminCreateOrg(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/organizations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrganizationSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a pre-receive environment
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-pre-receive-environment
     */
	public function enterpriseAdminCreatePreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a registration token for an enterprise
     * 
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * 
     * #### Example using registration token
     * 
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     * 
     * ```
     * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
     * ```
     * https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-registration-token-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-registration-token-for-an-enterprise
     */
	public function enterpriseAdminCreateRegistrationTokenForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/registration-token', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authenticationToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthenticationToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a remove token for an enterprise
     * 
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * 
     * #### Example using remove token
     * 
     * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
     * endpoint.
     * 
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     * https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-remove-token-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-remove-token-for-an-enterprise
     */
	public function enterpriseAdminCreateRemoveTokenForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/remove-token', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authenticationToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthenticationToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a self-hosted runner group for an enterprise
     * 
     * Creates a new self-hosted runner group for an enterprise.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise
     */
	public function enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runnerGroupsEnterprise = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunnerGroupsEnterprise', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a global webhook
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-global-webhook
     */
	public function enterpriseAdminDeleteGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks/{hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an impersonation OAuth token
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token
     */
	public function enterpriseAdminDeleteImpersonationOAuthToken(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{username}/authorizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a personal access token
     * 
     * Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-personal-access-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-personal-access-token
     */
	public function enterpriseAdminDeletePersonalAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/tokens/{token_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a pre-receive environment
     * 
     * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
     * 
     * The possible error messages are:
     * 
     * *   _Cannot modify or delete the default environment_
     * *   _Cannot delete environment that has hooks_
     * *   _Cannot delete environment when download is in progress_
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-pre-receive-environment
     */
	public function enterpriseAdminDeletePreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminDeletePreReceiveEnvironment422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironment422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a public key
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-public-key - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-public-key
     */
	public function enterpriseAdminDeletePublicKey(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/keys/{key_ids}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a self-hosted runner from an enterprise
     * 
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise
     */
	public function enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/{runner_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a self-hosted runner group from an enterprise
     * 
     * Deletes a self-hosted runner group for an enterprise.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise
     */
	public function enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a user
     * 
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
     * 
     * You can delete any user account except your own.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-user
     */
	public function enterpriseAdminDeleteUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{username}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Disable a selected organization for GitHub Actions in an enterprise
     * 
     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise
     */
	public function enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Enable a selected organization for GitHub Actions in an enterprise
     * 
     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise
     */
	public function enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-statistics
     */
	public function enterpriseAdminGetAllStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/all');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get allowed actions for an enterprise
     * 
     * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#get-allowed-actions-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#get-allowed-actions-for-an-enterprise
     */
	public function enterpriseAdminGetAllowedActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/selected-actions', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->selectedActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SelectedActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the global announcement banner
     * 
     * Gets the current message and expiration date of the global announcement banner in your enterprise.
     * https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#get-the-global-announcement-banner - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAnnouncementResponse
     * @see https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#get-the-global-announcement-banner
     */
	public function enterpriseAdminGetAnnouncement(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAnnouncementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/announcement');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAnnouncementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->announcement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Announcement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the audit log for an enterprise
     * 
     * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAuditLogRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAuditLogResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise
     */
	public function enterpriseAdminGetAuditLog(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAuditLogRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAuditLogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/audit-log', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAuditLogRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAuditLogRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAuditLogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->auditLogEvents = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AuditLogEvent>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get comment statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-comment-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetCommentStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-comment-statistics
     */
	public function enterpriseAdminGetCommentStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetCommentStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/comments');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetCommentStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseCommentOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseCommentOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the download status for a pre-receive environment
     * 
     * In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment
     */
	public function enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironmentDownloadStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironmentDownloadStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get gist statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-gist-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGistStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-gist-statistics
     */
	public function enterpriseAdminGetGistStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGistStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/gists');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGistStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseGistOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseGistOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get GitHub Actions permissions for an enterprise
     * 
     * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#get-github-actions-permissions-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#get-github-actions-permissions-for-an-enterprise
     */
	public function enterpriseAdminGetGithubActionsPermissionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsEnterprisePermissions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActionsEnterprisePermissions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a global webhook
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-global-webhook
     */
	public function enterpriseAdminGetGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks/{hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GlobalHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get hooks statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-hooks-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetHooksStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-hooks-statistics
     */
	public function enterpriseAdminGetHooksStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetHooksStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/hooks');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetHooksStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseHookOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseHookOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get issue statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-issues-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetIssueStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-issues-statistics
     */
	public function enterpriseAdminGetIssueStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetIssueStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/issues');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetIssueStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseIssueOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseIssueOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get license information
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-license-information - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetLicenseInformationResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-license-information
     */
	public function enterpriseAdminGetLicenseInformation(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetLicenseInformationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/settings/license');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetLicenseInformationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseInfo', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get milestone statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-milestone-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMilestoneStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-milestone-statistics
     */
	public function enterpriseAdminGetMilestoneStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMilestoneStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/milestones');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMilestoneStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseMilestoneOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseMilestoneOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get organization statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-organization-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetOrgStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-organization-statistics
     */
	public function enterpriseAdminGetOrgStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetOrgStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/orgs');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetOrgStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseOrganizationOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseOrganizationOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get pages statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pages-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPagesStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pages-statistics
     */
	public function enterpriseAdminGetPagesStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPagesStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/pages');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPagesStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterprisePageOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterprisePageOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pre-receive environment
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-pre-receive-environment
     */
	public function enterpriseAdminGetPreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get pull request statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pull-requests-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPullRequestStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pull-requests-statistics
     */
	public function enterpriseAdminGetPullRequestStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPullRequestStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/pulls');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPullRequestStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterprisePullRequestOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterprisePullRequestOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get repository statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-repository-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetRepoStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-repository-statistics
     */
	public function enterpriseAdminGetRepoStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetRepoStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/repos');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetRepoStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseRepositoryOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseRepositoryOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a self-hosted runner for an enterprise
     * 
     * Gets a specific self-hosted runner configured in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise
     */
	public function enterpriseAdminGetSelfHostedRunnerForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/{runner_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runner = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Runner', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a self-hosted runner group for an enterprise
     * 
     * Gets a specific self-hosted runner group for an enterprise.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise
     */
	public function enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runnerGroupsEnterprise = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunnerGroupsEnterprise', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get users statistics
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-users-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetUserStatsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-users-statistics
     */
	public function enterpriseAdminGetUserStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetUserStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/users');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetUserStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseUserOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseUserOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List global webhooks
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-global-webhooks - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-global-webhooks
     */
	public function enterpriseAdminListGlobalWebhooks(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalHooks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GlobalHook>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List personal access tokens
     * 
     * Lists personal access tokens for all users, including admin users.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-personal-access-tokens - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-personal-access-tokens
     */
	public function enterpriseAdminListPersonalAccessTokens(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/tokens');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorizations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Authorization>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List pre-receive environments
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-pre-receive-environments - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-pre-receive-environments
     */
	public function enterpriseAdminListPreReceiveEnvironments(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironment>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public keys
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-public-keys - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-public-keys
     */
	public function enterpriseAdminListPublicKeys(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/keys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicKeyFulls = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PublicKeyFull>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List runner applications for an enterprise
     * 
     * Lists binaries for the runner application that you can download and run.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#list-runner-applications-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#list-runner-applications-for-an-enterprise
     */
	public function enterpriseAdminListRunnerApplicationsForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/downloads', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runnerApplications = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RunnerApplication>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List selected organizations enabled for GitHub Actions in an enterprise
     * 
     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise
     */
	public function enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/organizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List self-hosted runner groups for an enterprise
     * 
     * Lists all self-hosted runner groups for an enterprise.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise
     */
	public function enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List self-hosted runners for an enterprise
     * 
     * Lists all self-hosted runners configured for an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-for-an-enterprise
     */
	public function enterpriseAdminListSelfHostedRunnersForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List self-hosted runners in a group for an enterprise
     * 
     * Lists the self-hosted runners that are in a specific enterprise group.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise
     */
	public function enterpriseAdminListSelfHostedRunnersInGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Ping a global webhook
     * 
     * This will trigger a [ping event](https://docs.github.com/github-ae@latest/webhooks/#ping-event) to be sent to the webhook.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#ping-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#ping-a-global-webhook
     */
	public function enterpriseAdminPingGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks/{hook_id}/pings', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove the global announcement banner
     * 
     * Removes the global announcement banner in your enterprise.
     * https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#remove-the-global-announcement-banner - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAnnouncementResponse
     * @see https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#remove-the-global-announcement-banner
     */
	public function enterpriseAdminRemoveAnnouncement(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAnnouncementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/announcement');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAnnouncementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a self-hosted runner from a group for an enterprise
     * 
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise
     */
	public function enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set allowed actions for an enterprise
     * 
     * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#set-allowed-actions-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#set-allowed-actions-for-an-enterprise
     */
	public function enterpriseAdminSetAllowedActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/selected-actions', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "selectedActions", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set the global announcement banner
     * 
     * Sets the message and expiration time for the global announcement banner in your enterprise.
     * https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#set-the-global-announcement-banner - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Announcement $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAnnouncementResponse
     * @see https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#set-the-global-announcement-banner
     */
	public function enterpriseAdminSetAnnouncement(
        \OpenAPI\OpenAPI\Models\Shared\Announcement $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAnnouncementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/announcement');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAnnouncementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->announcement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Announcement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set GitHub Actions permissions for an enterprise
     * 
     * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#set-github-actions-permissions-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#set-github-actions-permissions-for-an-enterprise
     */
	public function enterpriseAdminSetGithubActionsPermissionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set selected organizations enabled for GitHub Actions in an enterprise
     * 
     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise
     */
	public function enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/organizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set self-hosted runners in a group for an enterprise
     * 
     * Replaces the list of self-hosted runners that are part of an enterprise runner group.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise
     */
	public function enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Start a pre-receive environment download
     * 
     * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
     * 
     * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
     * 
     * The possible error messages are:
     * 
     * * _Cannot modify or delete the default environment_
     * * _Can not start a new download when a download is in progress_
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#start-a-pre-receive-environment-download - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#start-a-pre-receive-environment-download
     */
	public function enterpriseAdminStartPreReceiveEnvironmentDownload(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironmentDownloadStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironmentDownloadStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Suspend a user
     * 
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/github-ae@latest/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
     * 
     * You can suspend any user account except your own.
     * 
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs)."
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user
     */
	public function enterpriseAdminSuspendUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/suspended', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Unsuspend a user
     * 
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/github-ae@latest/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#unsuspend-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#unsuspend-a-user
     */
	public function enterpriseAdminUnsuspendUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/suspended', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Update a global webhook
     * 
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-global-webhook
     */
	public function enterpriseAdminUpdateGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks/{hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalHook2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GlobalHook2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an organization name
     * 
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-an-organization-name - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-an-organization-name
     */
	public function enterpriseAdminUpdateOrgName(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/organizations/{org}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminUpdateOrgName202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgName202ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a pre-receive environment
     * 
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
     * https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-pre-receive-environment
     */
	public function enterpriseAdminUpdatePreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a self-hosted runner group for an enterprise
     * 
     * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
     * 
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * https://docs.github.com/github-ae@latest/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse
     * @see https://docs.github.com/github-ae@latest/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise
     */
	public function enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runnerGroupsEnterprise = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunnerGroupsEnterprise', 'json');
            }
        }

        return $response;
    }
}