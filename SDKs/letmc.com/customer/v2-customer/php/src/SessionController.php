<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SessionController 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Change the password of a customer given their existing and new password.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SessionControllerChangePasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SessionControllerChangePasswordResponse
     */
	public function sessionControllerChangePassword(
        \OpenAPI\OpenAPI\Models\Operations\SessionControllerChangePasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SessionControllerChangePasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/session/password', \OpenAPI\OpenAPI\Models\Operations\SessionControllerChangePasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SessionControllerChangePasswordRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SessionControllerChangePasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Send a request to the in-tray to create a landlord login.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SessionControllerCreateLandlordLoginRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SessionControllerCreateLandlordLoginResponse
     */
	public function sessionControllerCreateLandlordLogin(
        \OpenAPI\OpenAPI\Models\Operations\SessionControllerCreateLandlordLoginRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SessionControllerCreateLandlordLoginResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/session/createlandlordlogin', \OpenAPI\OpenAPI\Models\Operations\SessionControllerCreateLandlordLoginRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SessionControllerCreateLandlordLoginRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SessionControllerCreateLandlordLoginResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Gets information about the currently logged on customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SessionControllerGetSessionInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SessionControllerGetSessionInfoResponse
     */
	public function sessionControllerGetSessionInfo(
        \OpenAPI\OpenAPI\Models\Operations\SessionControllerGetSessionInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SessionControllerGetSessionInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/session', \OpenAPI\OpenAPI\Models\Operations\SessionControllerGetSessionInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SessionControllerGetSessionInfoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SessionControllerGetSessionInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->sessionControllerGetSessionInfo200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->sessionControllerGetSessionInfo200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->sessionControllerGetSessionInfo200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->sessionControllerGetSessionInfo200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Login as a customer given their username and password.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SessionControllerLoginRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SessionControllerLoginResponse
     */
	public function sessionControllerLogin(
        \OpenAPI\OpenAPI\Models\Operations\SessionControllerLoginRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SessionControllerLoginResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/session', \OpenAPI\OpenAPI\Models\Operations\SessionControllerLoginRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SessionControllerLoginRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SessionControllerLoginResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->sessionControllerLogin200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->sessionControllerLogin200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->sessionControllerLogin200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->sessionControllerLogin200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Logout a customer previously logged in via the Login endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SessionControllerLogoutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SessionControllerLogoutResponse
     */
	public function sessionControllerLogout(
        \OpenAPI\OpenAPI\Models\Operations\SessionControllerLogoutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SessionControllerLogoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/session', \OpenAPI\OpenAPI\Models\Operations\SessionControllerLogoutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SessionControllerLogoutRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SessionControllerLogoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Reset the customer's password. An email will be sent out to reset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SessionControllerResetPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SessionControllerResetPasswordResponse
     */
	public function sessionControllerResetPassword(
        \OpenAPI\OpenAPI\Models\Operations\SessionControllerResetPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SessionControllerResetPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/session/resetpassword', \OpenAPI\OpenAPI\Models\Operations\SessionControllerResetPasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SessionControllerResetPasswordRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SessionControllerResetPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}