// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FileMigrationEntityOperationEnum - The type of operation
type FileMigrationEntityOperationEnum string

const (
	FileMigrationEntityOperationEnumDelete            FileMigrationEntityOperationEnum = "delete"
	FileMigrationEntityOperationEnumMove              FileMigrationEntityOperationEnum = "move"
	FileMigrationEntityOperationEnumCopy              FileMigrationEntityOperationEnum = "copy"
	FileMigrationEntityOperationEnumRegionalMigration FileMigrationEntityOperationEnum = "regional_migration"
)

func (e *FileMigrationEntityOperationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "delete":
		fallthrough
	case "move":
		fallthrough
	case "copy":
		fallthrough
	case "regional_migration":
		*e = FileMigrationEntityOperationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FileMigrationEntityOperationEnum: %s", s)
	}
}

// FileMigrationEntityStatusEnum - Status
type FileMigrationEntityStatusEnum string

const (
	FileMigrationEntityStatusEnumPending                      FileMigrationEntityStatusEnum = "pending"
	FileMigrationEntityStatusEnumCounting                     FileMigrationEntityStatusEnum = "counting"
	FileMigrationEntityStatusEnumProcessing                   FileMigrationEntityStatusEnum = "processing"
	FileMigrationEntityStatusEnumCompleted                    FileMigrationEntityStatusEnum = "completed"
	FileMigrationEntityStatusEnumProcessingSubfolders         FileMigrationEntityStatusEnum = "processing_subfolders"
	FileMigrationEntityStatusEnumFinishing                    FileMigrationEntityStatusEnum = "finishing"
	FileMigrationEntityStatusEnumCreatingDestFolder           FileMigrationEntityStatusEnum = "creating_dest_folder"
	FileMigrationEntityStatusEnumWaitingForOtherJobs          FileMigrationEntityStatusEnum = "waiting_for_other_jobs"
	FileMigrationEntityStatusEnumWaitingForAllFiles           FileMigrationEntityStatusEnum = "waiting_for_all_files"
	FileMigrationEntityStatusEnumWaitingForPendingSubfolders  FileMigrationEntityStatusEnum = "waiting_for_pending_subfolders"
	FileMigrationEntityStatusEnumWaitingForAllSubfolders      FileMigrationEntityStatusEnum = "waiting_for_all_subfolders"
	FileMigrationEntityStatusEnumFailed                       FileMigrationEntityStatusEnum = "failed"
	FileMigrationEntityStatusEnumWaitingForEnqueuedOperations FileMigrationEntityStatusEnum = "waiting_for_enqueued_operations"
	FileMigrationEntityStatusEnumUnused                       FileMigrationEntityStatusEnum = "unused"
	FileMigrationEntityStatusEnumProcessingRecursively        FileMigrationEntityStatusEnum = "processing_recursively"
	FileMigrationEntityStatusEnumRemovingDeferredFolders      FileMigrationEntityStatusEnum = "removing_deferred_folders"
)

func (e *FileMigrationEntityStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "counting":
		fallthrough
	case "processing":
		fallthrough
	case "completed":
		fallthrough
	case "processing_subfolders":
		fallthrough
	case "finishing":
		fallthrough
	case "creating_dest_folder":
		fallthrough
	case "waiting_for_other_jobs":
		fallthrough
	case "waiting_for_all_files":
		fallthrough
	case "waiting_for_pending_subfolders":
		fallthrough
	case "waiting_for_all_subfolders":
		fallthrough
	case "failed":
		fallthrough
	case "waiting_for_enqueued_operations":
		fallthrough
	case "unused":
		fallthrough
	case "processing_recursively":
		fallthrough
	case "removing_deferred_folders":
		*e = FileMigrationEntityStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FileMigrationEntityStatusEnum: %s", s)
	}
}

// FileMigrationEntity - Show File Migration
type FileMigrationEntity struct {
	// Destination path
	DestPath *string `json:"dest_path,omitempty"`
	// Number of files processed
	FilesMoved *int `json:"files_moved,omitempty"`
	// Deprecated: used to return a count of the applicable files.  Currently returns 0 always.  On remote servers, it is not possible to reliably determine the number of affected files for every migration operation.
	FilesTotal *int `json:"files_total,omitempty"`
	// File migration ID
	ID *int `json:"id,omitempty"`
	// Link to download the log file for this migration.
	LogURL *string `json:"log_url,omitempty"`
	// The type of operation
	Operation *FileMigrationEntityOperationEnum `json:"operation,omitempty"`
	// Source path
	Path *string `json:"path,omitempty"`
	// Region
	Region *string `json:"region,omitempty"`
	// Status
	Status *FileMigrationEntityStatusEnum `json:"status,omitempty"`
}
