// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type EventDataType string

const (
	EventDataTypeAccountEventPayload EventDataType = "AccountEventPayload"
	EventDataTypeMessageEventPayload EventDataType = "MessageEventPayload"
)

type EventData struct {
	AccountEventPayload *AccountEventPayload
	MessageEventPayload *MessageEventPayload

	Type EventDataType
}

func CreateEventDataAccountEventPayload(accountEventPayload AccountEventPayload) EventData {
	typ := EventDataTypeAccountEventPayload

	return EventData{
		AccountEventPayload: &accountEventPayload,
		Type:                typ,
	}
}

func CreateEventDataMessageEventPayload(messageEventPayload MessageEventPayload) EventData {
	typ := EventDataTypeMessageEventPayload

	return EventData{
		MessageEventPayload: &messageEventPayload,
		Type:                typ,
	}
}

func (u *EventData) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	accountEventPayload := new(AccountEventPayload)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountEventPayload); err == nil {
		u.AccountEventPayload = accountEventPayload
		u.Type = EventDataTypeAccountEventPayload
		return nil
	}

	messageEventPayload := new(MessageEventPayload)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&messageEventPayload); err == nil {
		u.MessageEventPayload = messageEventPayload
		u.Type = EventDataTypeMessageEventPayload
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventData) MarshalJSON() ([]byte, error) {
	if u.AccountEventPayload != nil {
		return json.Marshal(u.AccountEventPayload)
	}

	if u.MessageEventPayload != nil {
		return json.Marshal(u.MessageEventPayload)
	}

	return nil, nil
}

type Event struct {
	AccountID *string        `json:"accountId,omitempty"`
	Data      *EventData     `json:"data,omitempty"`
	EventID   *string        `json:"eventId,omitempty"`
	Type      *EventTypeEnum `json:"type,omitempty"`
}
