"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import flowdefinitionoutputconfig as shared_flowdefinitionoutputconfig
from ..shared import humanloopactivationconfig as shared_humanloopactivationconfig
from ..shared import humanloopconfig as shared_humanloopconfig
from ..shared import humanlooprequestsource as shared_humanlooprequestsource
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateFlowDefinitionRequest:
    
    flow_definition_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FlowDefinitionName') }})  
    human_loop_config: shared_humanloopconfig.HumanLoopConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanLoopConfig') }})  
    output_config: shared_flowdefinitionoutputconfig.FlowDefinitionOutputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputConfig') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    human_loop_activation_config: Optional[shared_humanloopactivationconfig.HumanLoopActivationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanLoopActivationConfig'), 'exclude': lambda f: f is None }})  
    human_loop_request_source: Optional[shared_humanlooprequestsource.HumanLoopRequestSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanLoopRequestSource'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    