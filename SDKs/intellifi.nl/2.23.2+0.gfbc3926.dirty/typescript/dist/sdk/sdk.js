"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var authinfo_1 = require("./authinfo");
var blobs_1 = require("./blobs");
var events_1 = require("./events");
var items_1 = require("./items");
var keys_1 = require("./keys");
var kvpairs_1 = require("./kvpairs");
var locationrules_1 = require("./locationrules");
var locations_1 = require("./locations");
var shared = __importStar(require("./models/shared"));
var presences_1 = require("./presences");
var services_1 = require("./services");
var sets_1 = require("./sets");
var spots_1 = require("./spots");
var spotsets_1 = require("./spotsets");
var subscriptions_1 = require("./subscriptions");
var users_1 = require("./users");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * Cloud hosted Brain API endpoint.
     */
    "https://{protocol}://{customer}.intellifi.{tld}/api",
];
/**
 * This document describes the [Intellifi Brain](https://intellifi.zendesk.com/hc/en-us/categories/360000685454)
 *
 * @remarks
 * Web API specification using the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification).
 *
 * The Brain Web API is a RESTful API that allows you to interact with the
 * [Intellifi devices](https://intellifi.zendesk.com/hc/en-us/categories/360000685434) and
 * services in a powerful and simple way. Our end-to-end solution allows you to
 * localize your items/assets based on technologies such as RFID and Bluetooth.
 *
 * # Try it out!
 *
 * The API can be tried out and tested using the ['api-doc/tryitout' endpoint on this site](./tryitout/).
 * This UI allows anyone to visualize and interact with the API’s resources without having any of the implementation logic in place.
 * It’s automatically generated from this Specification, with the visual documentation making it easy for back end implementation and client side consumption.
 *
 * # Authentication
 *
 * Applications are required to provide some form of authentication to the API
 * for every secured endpoint. The Brain offers two forms of authentication.
 *
 * - API key (Via an HTTP request header or URL parameter)
 * - Session cookie
 *
 * <!-- ReDoc-Inject: <security-definitions> -->
 *
 * # See also
 *
 * - About Intellifi and what we do: [intellifi.nl](https://intellifi.nl)
 * - Technical and background information: [intellifi.zendesk.com](https://intellifi.zendesk.com)
 *
 *
 * @see {@link https://intellifi.zendesk.com} - Find out more
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.authinfo = new authinfo_1.Authinfo(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.blobs = new blobs_1.Blobs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.events = new events_1.Events(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.items = new items_1.Items(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.keys = new keys_1.Keys(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.kvpairs = new kvpairs_1.Kvpairs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.locationrules = new locationrules_1.Locationrules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.locations = new locations_1.Locations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.presences = new presences_1.Presences(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.services = new services_1.Services(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sets = new sets_1.Sets(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.spots = new spots_1.Spots(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.spotsets = new spotsets_1.Spotsets(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.subscriptions = new subscriptions_1.Subscriptions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.users = new users_1.Users(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
