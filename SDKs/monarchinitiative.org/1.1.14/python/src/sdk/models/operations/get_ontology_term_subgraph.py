"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetOntologyTermSubgraphRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""CURIE identifier of a GO term, e.g. GO:0007275"""  
    cnode: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cnode', 'style': 'form', 'explode': True }})
    r"""Additional classes"""  
    include_ancestors: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_ancestors', 'style': 'form', 'explode': True }})
    r"""Include Ancestors"""  
    include_descendants: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_descendants', 'style': 'form', 'explode': True }})
    r"""Include Descendants"""  
    include_meta: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_meta', 'style': 'form', 'explode': True }})
    r"""Include metadata in response"""  
    relation: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relation', 'style': 'form', 'explode': True }})
    r"""Additional classes"""  
    

@dataclasses.dataclass
class GetOntologyTermSubgraphResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    