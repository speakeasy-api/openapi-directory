"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nodepermissions as shared_nodepermissions
from ..shared import userinfo as shared_userinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class RoomDataTypeEnum(str, Enum):
    r"""Node type"""
    ROOM = 'room'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RoomData:
    r"""Room information"""
    
    has_recycle_bin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasRecycleBin') }})
    r"""&#128679; Deprecated since v4.10.0
    
    Is recycle bin active (for rooms only)
    
    Recycle bin is always on (disabling is not possible).
    """  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Room ID"""  
    is_encrypted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEncrypted') }})
    r"""Encryption state"""  
    is_granted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isGranted') }})
    r"""Is user granted room permissions"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name"""  
    recycle_bin_retention_period: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recycleBinRetentionPeriod') }})
    r"""Retention period for deleted nodes in days"""  
    children: Optional[list[RoomData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('children'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.10.0
    
    List of rooms, where this room is a parent (if exist)
    """  
    cnt_download_shares: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntDownloadShares'), 'exclude': lambda f: f is None }})
    r"""Returns the number of Download Shares of this node."""  
    cnt_upload_shares: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntUploadShares'), 'exclude': lambda f: f is None }})
    r"""Returns the number of Upload Shares of this node."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expiration date"""  
    created_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    is_favorite: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFavorite'), 'exclude': lambda f: f is None }})
    r"""Node is marked as favorite (for rooms / folders only)"""  
    parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentId'), 'exclude': lambda f: f is None }})
    r"""Parent node ID (room or folder)"""  
    permissions: Optional[shared_nodepermissions.NodePermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""Node permissions"""  
    quota: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota'), 'exclude': lambda f: f is None }})
    r"""Quota in byte"""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Room size"""  
    type: Optional[RoomDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Node type"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Modification date"""  
    updated_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    