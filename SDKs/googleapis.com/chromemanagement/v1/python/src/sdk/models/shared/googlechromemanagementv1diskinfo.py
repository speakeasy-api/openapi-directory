"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1DiskInfo:
    r"""Status of the single storage device."""
    
    bytes_read_this_session: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bytesReadThisSession'), 'exclude': lambda f: f is None }})
    r"""Output only. Number of bytes read since last boot."""  
    bytes_written_this_session: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bytesWrittenThisSession'), 'exclude': lambda f: f is None }})
    r"""Output only. Number of bytes written since last boot."""  
    discard_time_this_session: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discardTimeThisSession'), 'exclude': lambda f: f is None }})
    r"""Output only. Time spent discarding since last boot. Discarding is writing to clear blocks which are no longer in use. Supported on kernels 4.18+."""  
    health: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('health'), 'exclude': lambda f: f is None }})
    r"""Output only. Disk health."""  
    io_time_this_session: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ioTimeThisSession'), 'exclude': lambda f: f is None }})
    r"""Output only. Counts the time the disk and queue were busy, so unlike the fields above, parallel requests are not counted multiple times."""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})
    r"""Output only. Disk manufacturer."""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Output only. Disk model."""  
    read_time_this_session: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readTimeThisSession'), 'exclude': lambda f: f is None }})
    r"""Output only. Time spent reading from disk since last boot."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""Output only. Disk serial number."""  
    size_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeBytes'), 'exclude': lambda f: f is None }})
    r"""Output only. Disk size."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Output only. Disk type: eMMC / NVMe / ATA / SCSI."""  
    volume_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeIds'), 'exclude': lambda f: f is None }})
    r"""Output only. Disk volumes."""  
    write_time_this_session: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('writeTimeThisSession'), 'exclude': lambda f: f is None }})
    r"""Output only. Time spent writing to disk since last boot."""  
    