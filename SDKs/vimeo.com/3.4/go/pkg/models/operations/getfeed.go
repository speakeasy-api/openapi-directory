// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetFeedSecurity struct {
	Oauth2 shared.SchemeOauth2 `security:"scheme,type=oauth2"`
}

type GetFeedPathParams struct {
	// The ID of the user.
	UserID float64 `pathParam:"style=simple,explode=false,name=user_id"`
}

// GetFeedTypeEnum - The feed type.
type GetFeedTypeEnum string

const (
	GetFeedTypeEnumAppears          GetFeedTypeEnum = "appears"
	GetFeedTypeEnumCategoryFeatured GetFeedTypeEnum = "category_featured"
	GetFeedTypeEnumChannel          GetFeedTypeEnum = "channel"
	GetFeedTypeEnumFacebookFeed     GetFeedTypeEnum = "facebook_feed"
	GetFeedTypeEnumFollowing        GetFeedTypeEnum = "following"
	GetFeedTypeEnumGroup            GetFeedTypeEnum = "group"
	GetFeedTypeEnumLikes            GetFeedTypeEnum = "likes"
	GetFeedTypeEnumOndemandPublish  GetFeedTypeEnum = "ondemand_publish"
	GetFeedTypeEnumShare            GetFeedTypeEnum = "share"
	GetFeedTypeEnumTaggedWith       GetFeedTypeEnum = "tagged_with"
	GetFeedTypeEnumTwitterTimeline  GetFeedTypeEnum = "twitter_timeline"
	GetFeedTypeEnumUploads          GetFeedTypeEnum = "uploads"
)

func (e *GetFeedTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appears":
		fallthrough
	case "category_featured":
		fallthrough
	case "channel":
		fallthrough
	case "facebook_feed":
		fallthrough
	case "following":
		fallthrough
	case "group":
		fallthrough
	case "likes":
		fallthrough
	case "ondemand_publish":
		fallthrough
	case "share":
		fallthrough
	case "tagged_with":
		fallthrough
	case "twitter_timeline":
		fallthrough
	case "uploads":
		*e = GetFeedTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFeedTypeEnum: %s", s)
	}
}

type GetFeedQueryParams struct {
	// Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information.
	Offset *string `queryParam:"style=form,explode=true,name=offset"`
	// The page number of the results to show.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items to show on each page of results, up to a maximum of 100.
	PerPage *float64 `queryParam:"style=form,explode=true,name=per_page"`
	// The feed type.
	Type *GetFeedTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetFeedRequest struct {
	PathParams  GetFeedPathParams
	QueryParams GetFeedQueryParams
	Security    GetFeedSecurity
}

type GetFeedResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The videos were returned.
	Activity31s []shared.Activity31
}
