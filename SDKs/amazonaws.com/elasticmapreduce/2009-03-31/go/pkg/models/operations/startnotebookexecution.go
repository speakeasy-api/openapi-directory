// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartNotebookExecutionXAmzTargetEnum
type StartNotebookExecutionXAmzTargetEnum string

const (
	StartNotebookExecutionXAmzTargetEnumElasticMapReduceStartNotebookExecution StartNotebookExecutionXAmzTargetEnum = "ElasticMapReduce.StartNotebookExecution"
)

func (e *StartNotebookExecutionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ElasticMapReduce.StartNotebookExecution":
		*e = StartNotebookExecutionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartNotebookExecutionXAmzTargetEnum: %s", s)
	}
}

type StartNotebookExecutionRequest struct {
	StartNotebookExecutionInput shared.StartNotebookExecutionInput   `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  StartNotebookExecutionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartNotebookExecutionResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	StartNotebookExecutionOutput *shared.StartNotebookExecutionOutput
	StatusCode                   int
	RawResponse                  *http.Response
}
