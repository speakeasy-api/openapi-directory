// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DgcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DgcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Registration No
	RegistrationNo string `json:"RegistrationNo"`
}

// DgcerRequestBodyFormatEnum - The format of the certificate in response.
type DgcerRequestBodyFormatEnum string

const (
	DgcerRequestBodyFormatEnumPdf DgcerRequestBodyFormatEnum = "pdf"
)

func (e *DgcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = DgcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DgcerRequestBodyFormatEnum: %s", s)
	}
}

// DgcerRequestBody - Request format
type DgcerRequestBody struct {
	CertificateParameters *DgcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DgcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dgcer504ApplicationJSONErrorEnum string

const (
	Dgcer504ApplicationJSONErrorEnumGatewayTimeout Dgcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Dgcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Dgcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Dgcer504ApplicationJSONErrorDescriptionEnum string

const (
	Dgcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dgcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Dgcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Dgcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dgcer504ApplicationJSON - Gateway timeout
type Dgcer504ApplicationJSON struct {
	Error            *Dgcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgcer503ApplicationJSONErrorEnum string

const (
	Dgcer503ApplicationJSONErrorEnumServiceUnavailable Dgcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Dgcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Dgcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Dgcer503ApplicationJSONErrorDescriptionEnum string

const (
	Dgcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dgcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Dgcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Dgcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dgcer503ApplicationJSON - Service unavailable
type Dgcer503ApplicationJSON struct {
	Error            *Dgcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgcer502ApplicationJSONErrorEnum string

const (
	Dgcer502ApplicationJSONErrorEnumBadGatewy Dgcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Dgcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Dgcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Dgcer502ApplicationJSONErrorDescriptionEnum string

const (
	Dgcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dgcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Dgcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Dgcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dgcer502ApplicationJSON - Bad gateway
type Dgcer502ApplicationJSON struct {
	Error            *Dgcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgcer500ApplicationJSONErrorEnum string

const (
	Dgcer500ApplicationJSONErrorEnumInternalServerError Dgcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Dgcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Dgcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Dgcer500ApplicationJSONErrorDescriptionEnum string

const (
	Dgcer500ApplicationJSONErrorDescriptionEnumInternalServerError Dgcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Dgcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Dgcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dgcer500ApplicationJSON - Internal server error
type Dgcer500ApplicationJSON struct {
	Error            *Dgcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgcer404ApplicationJSONErrorEnum string

const (
	Dgcer404ApplicationJSONErrorEnumRecordNotFound Dgcer404ApplicationJSONErrorEnum = "record_not_found"
	Dgcer404ApplicationJSONErrorEnumURLNotFound    Dgcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Dgcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dgcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Dgcer404ApplicationJSONErrorDescriptionEnum string

const (
	Dgcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dgcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dgcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dgcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Dgcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dgcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dgcer404ApplicationJSON - No record found
type Dgcer404ApplicationJSON struct {
	Error            *Dgcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgcer401ApplicationJSONErrorEnum string

const (
	Dgcer401ApplicationJSONErrorEnumInvalidAuthentication Dgcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Dgcer401ApplicationJSONErrorEnumInvalidAuthorization  Dgcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Dgcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dgcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Dgcer401ApplicationJSONErrorDescriptionEnum string

const (
	Dgcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dgcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dgcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dgcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Dgcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dgcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dgcer401ApplicationJSON - Unauthorized access
type Dgcer401ApplicationJSON struct {
	Error            *Dgcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgcer400ApplicationJSONErrorEnum string

const (
	Dgcer400ApplicationJSONErrorEnumMissingParameter Dgcer400ApplicationJSONErrorEnum = "missing_parameter"
	Dgcer400ApplicationJSONErrorEnumInvalidParameter Dgcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Dgcer400ApplicationJSONErrorEnumInvalidFormat    Dgcer400ApplicationJSONErrorEnum = "invalid_format"
	Dgcer400ApplicationJSONErrorEnumInvalidTxnid     Dgcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Dgcer400ApplicationJSONErrorEnumInvalidConsentid Dgcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Dgcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dgcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Dgcer400ApplicationJSONErrorDescriptionEnum string

const (
	Dgcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dgcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dgcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Dgcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dgcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dgcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dgcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dgcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dgcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dgcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Dgcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dgcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dgcer400ApplicationJSON - Bad request
type Dgcer400ApplicationJSON struct {
	Error            *Dgcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DgcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dgcer400ApplicationJSONObject *Dgcer400ApplicationJSON
	// Unauthorized access
	Dgcer401ApplicationJSONObject *Dgcer401ApplicationJSON
	// No record found
	Dgcer404ApplicationJSONObject *Dgcer404ApplicationJSON
	// Internal server error
	Dgcer500ApplicationJSONObject *Dgcer500ApplicationJSON
	// Bad gateway
	Dgcer502ApplicationJSONObject *Dgcer502ApplicationJSON
	// Service unavailable
	Dgcer503ApplicationJSONObject *Dgcer503ApplicationJSON
	// Gateway timeout
	Dgcer504ApplicationJSONObject *Dgcer504ApplicationJSON
}
