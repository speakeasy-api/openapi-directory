"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import inputinformation as shared_inputinformation
from ..shared import outputinformation as shared_outputinformation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeterFolderInformation:
    r"""Container Class for the Web API"""
    
    communication_module_firmware_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CommunicationModuleFirmwareVersion'), 'exclude': lambda f: f is None }})
    r"""The Version of the Communication Module (if exists)"""  
    communication_module_hardware_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CommunicationModuleHardwareVersion'), 'exclude': lambda f: f is None }})
    r"""The Version of the Communication Module (if exists)"""  
    firmware_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirmwareVersion'), 'exclude': lambda f: f is None }})
    r"""The Firmware Version of a Meter"""  
    hardware_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HardwareVersion'), 'exclude': lambda f: f is None }})
    r"""The Hardware Version of a Meter."""  
    input_informations: Optional[list[shared_inputinformation.InputInformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputInformations'), 'exclude': lambda f: f is None }})
    r"""Informations about the available Inputs"""  
    is_folder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsFolder'), 'exclude': lambda f: f is None }})
    r"""Flag if it's a Folder or a Meter"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name of the Meter or Folder"""  
    output_informations: Optional[list[shared_outputinformation.OutputInformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputInformations'), 'exclude': lambda f: f is None }})
    r"""Informations about the available Outputs"""  
    