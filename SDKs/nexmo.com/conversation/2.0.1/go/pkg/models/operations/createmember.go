// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateMemberPathParams struct {
	// Conversation ID
	ConversationID string `pathParam:"style=simple,explode=false,name=conversation_id"`
}

// CreateMemberRequestBody - Create a Member in invite state
type CreateMemberRequestBody struct {
	// Invite or join a member to a conversation
	Action *shared.MemberActionEnum `json:"action,omitempty"`
	// A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
	Channel shared.Channel `json:"channel"`
	// Knocker ID. A knocker is a pre-member of a conversation who does not exist yet
	KnockingID *string `json:"knocking_id,omitempty"`
	// Media Object
	Media map[string]interface{} `json:"media,omitempty"`
	// Member ID
	MemberID *string `json:"member_id,omitempty"`
	// Member ID of the member that sends the invitation
	MemberIDInviting *string `json:"member_id_inviting,omitempty"`
	// User ID
	UserID string `json:"user_id"`
}

type CreateMemberRequest struct {
	PathParams CreateMemberPathParams
	Request    *CreateMemberRequestBody `request:"mediaType=application/json"`
}

// CreateMember201ApplicationJSON - Create or invite Member in invite state
type CreateMember201ApplicationJSON struct {
	// A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
	Channel *shared.Channel `json:"channel,omitempty"`
	// A link towards a member included in Conversation API
	Href *string `json:"href,omitempty"`
	// Member ID
	ID        *string           `json:"id,omitempty"`
	Initiator *shared.Initiator `json:"initiator,omitempty"`
	// The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
	State     *shared.MemberStateEnum    `json:"state,omitempty"`
	Timestamp *shared.TimestampResMember `json:"timestamp,omitempty"`
	// User ID
	UserID *string `json:"user_id,omitempty"`
}

type CreateMemberResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Create or invite Member in invite state
	CreateMember201ApplicationJSONObject *CreateMember201ApplicationJSON
}
