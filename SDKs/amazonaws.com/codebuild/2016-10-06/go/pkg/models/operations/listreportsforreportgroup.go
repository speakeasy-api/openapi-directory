// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListReportsForReportGroupQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListReportsForReportGroupXAmzTargetEnum
type ListReportsForReportGroupXAmzTargetEnum string

const (
	ListReportsForReportGroupXAmzTargetEnumCodeBuild20161006ListReportsForReportGroup ListReportsForReportGroupXAmzTargetEnum = "CodeBuild_20161006.ListReportsForReportGroup"
)

func (e *ListReportsForReportGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeBuild_20161006.ListReportsForReportGroup":
		*e = ListReportsForReportGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsForReportGroupXAmzTargetEnum: %s", s)
	}
}

type ListReportsForReportGroupHeaders struct {
	XAmzAlgorithm     *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListReportsForReportGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListReportsForReportGroupRequest struct {
	QueryParams ListReportsForReportGroupQueryParams
	Headers     ListReportsForReportGroupHeaders
	Request     shared.ListReportsForReportGroupInput `request:"mediaType=application/json"`
}

type ListReportsForReportGroupResponse struct {
	ContentType string
	// InvalidInputException
	InvalidInputException interface{}
	// Success
	ListReportsForReportGroupOutput *shared.ListReportsForReportGroupOutput
	StatusCode                      int
	RawResponse                     *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
