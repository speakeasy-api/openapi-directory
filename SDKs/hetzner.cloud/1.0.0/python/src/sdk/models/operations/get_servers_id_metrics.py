"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GetServersIDMetricsTypeEnum(str, Enum):
    r"""Type of metrics to get"""
    CPU = 'cpu'
    DISK = 'disk'
    NETWORK = 'network'


@dataclasses.dataclass
class GetServersIDMetricsRequest:
    
    end: str = dataclasses.field(metadata={'query_param': { 'field_name': 'end', 'style': 'form', 'explode': True }})
    r"""End of period to get Metrics for (in ISO-8601 format)"""  
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the Server"""  
    start: str = dataclasses.field(metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""Start of period to get Metrics for (in ISO-8601 format)"""  
    type: GetServersIDMetricsTypeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Type of metrics to get"""  
    step: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'step', 'style': 'form', 'explode': True }})
    r"""Resolution of results in seconds"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetServersIDMetrics200ApplicationJSONMetricsTimeSeries:
    
    values: list[list[Any]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values') }})
    r"""Metrics Timestamps with values"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetServersIDMetrics200ApplicationJSONMetrics:
    
    end: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end') }})
    r"""End of period of metrics reported (in ISO-8601 format)"""  
    start: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start') }})
    r"""Start of period of metrics reported (in ISO-8601 format)"""  
    step: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('step') }})
    r"""Resolution of results in seconds."""  
    time_series: dict[str, GetServersIDMetrics200ApplicationJSONMetricsTimeSeries] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_series') }})
    r"""Hash with timeseries information, containing the name of timeseries as key"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetServersIDMetrics200ApplicationJSON:
    r"""The `metrics` key in the reply contains a metrics object with this structure"""
    
    metrics: GetServersIDMetrics200ApplicationJSONMetrics = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics') }})  
    

@dataclasses.dataclass
class GetServersIDMetricsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_servers_id_metrics_200_application_json_object: Optional[GetServersIDMetrics200ApplicationJSON] = dataclasses.field(default=None)
    r"""The `metrics` key in the reply contains a metrics object with this structure"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    