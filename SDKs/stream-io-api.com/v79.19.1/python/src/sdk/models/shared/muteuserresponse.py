"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import usermute as shared_usermute
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MuteUserResponse:
    r"""Successful response"""
    
    duration: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})  
    mute: Optional[shared_usermute.UserMute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mute'), 'exclude': lambda f: f is None }})  
    mutes: Optional[list[shared_usermute.UserMute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mutes'), 'exclude': lambda f: f is None }})
    r"""Object with mutes (if multiple users were muted)"""  
    own_user: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('own_user'), 'exclude': lambda f: f is None }})  
    