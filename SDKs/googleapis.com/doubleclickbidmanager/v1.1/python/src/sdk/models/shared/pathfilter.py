"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import eventfilter as shared_eventfilter
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PathFilterPathMatchPositionEnum(str, Enum):
    r"""Indicates the position of the path the filter should match to (first, last, or any event in path)."""
    ANY = 'ANY'
    FIRST = 'FIRST'
    LAST = 'LAST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PathFilter:
    r"""Path filters specify which paths to include in a report. A path is the result of combining DV360 events based on User ID to create a workflow of users' actions. When a path filter is set, the resulting report will only include paths that match the specified event at the specified position. All other paths will be excluded."""
    
    event_filters: Optional[list[shared_eventfilter.EventFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventFilters'), 'exclude': lambda f: f is None }})
    r"""Filter on an event to be applied to some part of the path."""  
    path_match_position: Optional[PathFilterPathMatchPositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pathMatchPosition'), 'exclude': lambda f: f is None }})
    r"""Indicates the position of the path the filter should match to (first, last, or any event in path)."""  
    