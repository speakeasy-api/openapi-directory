"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import batchpolicy as shared_batchpolicy
from ..shared import failedcreatesimulationjobrequest as shared_failedcreatesimulationjobrequest
from ..shared import simulationjobbatcherrorcode_enum as shared_simulationjobbatcherrorcode_enum
from ..shared import simulationjobbatchstatus_enum as shared_simulationjobbatchstatus_enum
from ..shared import simulationjobrequest as shared_simulationjobrequest
from ..shared import simulationjobsummary as shared_simulationjobsummary
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartSimulationJobBatchResponse:
    r"""Success"""
    
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    batch_policy: Optional[shared_batchpolicy.BatchPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchPolicy'), 'exclude': lambda f: f is None }})  
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientRequestToken'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    created_requests: Optional[list[shared_simulationjobsummary.SimulationJobSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdRequests'), 'exclude': lambda f: f is None }})  
    failed_requests: Optional[list[shared_failedcreatesimulationjobrequest.FailedCreateSimulationJobRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failedRequests'), 'exclude': lambda f: f is None }})  
    failure_code: Optional[shared_simulationjobbatcherrorcode_enum.SimulationJobBatchErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureCode'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureReason'), 'exclude': lambda f: f is None }})  
    pending_requests: Optional[list[shared_simulationjobrequest.SimulationJobRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingRequests'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_simulationjobbatchstatus_enum.SimulationJobBatchStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    