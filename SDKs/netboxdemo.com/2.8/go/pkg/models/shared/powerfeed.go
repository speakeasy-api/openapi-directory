// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type PowerFeedPhaseLabelEnum string

const (
	PowerFeedPhaseLabelEnumSinglePhase PowerFeedPhaseLabelEnum = "Single phase"
	PowerFeedPhaseLabelEnumThreePhase  PowerFeedPhaseLabelEnum = "Three-phase"
)

func (e *PowerFeedPhaseLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Single phase":
		fallthrough
	case "Three-phase":
		*e = PowerFeedPhaseLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PowerFeedPhaseLabelEnum: %s", s)
	}
}

type PowerFeedPhaseValueEnum string

const (
	PowerFeedPhaseValueEnumSinglePhase PowerFeedPhaseValueEnum = "single-phase"
	PowerFeedPhaseValueEnumThreePhase  PowerFeedPhaseValueEnum = "three-phase"
)

func (e *PowerFeedPhaseValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single-phase":
		fallthrough
	case "three-phase":
		*e = PowerFeedPhaseValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PowerFeedPhaseValueEnum: %s", s)
	}
}

type PowerFeedPhase struct {
	Label PowerFeedPhaseLabelEnum `json:"label"`
	Value PowerFeedPhaseValueEnum `json:"value"`
}

type PowerFeedStatusLabelEnum string

const (
	PowerFeedStatusLabelEnumOffline PowerFeedStatusLabelEnum = "Offline"
	PowerFeedStatusLabelEnumActive  PowerFeedStatusLabelEnum = "Active"
	PowerFeedStatusLabelEnumPlanned PowerFeedStatusLabelEnum = "Planned"
	PowerFeedStatusLabelEnumFailed  PowerFeedStatusLabelEnum = "Failed"
)

func (e *PowerFeedStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Offline":
		fallthrough
	case "Active":
		fallthrough
	case "Planned":
		fallthrough
	case "Failed":
		*e = PowerFeedStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PowerFeedStatusLabelEnum: %s", s)
	}
}

type PowerFeedStatusValueEnum string

const (
	PowerFeedStatusValueEnumOffline PowerFeedStatusValueEnum = "offline"
	PowerFeedStatusValueEnumActive  PowerFeedStatusValueEnum = "active"
	PowerFeedStatusValueEnumPlanned PowerFeedStatusValueEnum = "planned"
	PowerFeedStatusValueEnumFailed  PowerFeedStatusValueEnum = "failed"
)

func (e *PowerFeedStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "offline":
		fallthrough
	case "active":
		fallthrough
	case "planned":
		fallthrough
	case "failed":
		*e = PowerFeedStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PowerFeedStatusValueEnum: %s", s)
	}
}

type PowerFeedStatus struct {
	Label PowerFeedStatusLabelEnum `json:"label"`
	Value PowerFeedStatusValueEnum `json:"value"`
}

type PowerFeedSupplyLabelEnum string

const (
	PowerFeedSupplyLabelEnumAc PowerFeedSupplyLabelEnum = "AC"
	PowerFeedSupplyLabelEnumDc PowerFeedSupplyLabelEnum = "DC"
)

func (e *PowerFeedSupplyLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AC":
		fallthrough
	case "DC":
		*e = PowerFeedSupplyLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PowerFeedSupplyLabelEnum: %s", s)
	}
}

type PowerFeedSupplyValueEnum string

const (
	PowerFeedSupplyValueEnumAc PowerFeedSupplyValueEnum = "ac"
	PowerFeedSupplyValueEnumDc PowerFeedSupplyValueEnum = "dc"
)

func (e *PowerFeedSupplyValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ac":
		fallthrough
	case "dc":
		*e = PowerFeedSupplyValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PowerFeedSupplyValueEnum: %s", s)
	}
}

type PowerFeedSupply struct {
	Label PowerFeedSupplyLabelEnum `json:"label"`
	Value PowerFeedSupplyValueEnum `json:"value"`
}

type PowerFeedTypeLabelEnum string

const (
	PowerFeedTypeLabelEnumPrimary   PowerFeedTypeLabelEnum = "Primary"
	PowerFeedTypeLabelEnumRedundant PowerFeedTypeLabelEnum = "Redundant"
)

func (e *PowerFeedTypeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Primary":
		fallthrough
	case "Redundant":
		*e = PowerFeedTypeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PowerFeedTypeLabelEnum: %s", s)
	}
}

type PowerFeedTypeValueEnum string

const (
	PowerFeedTypeValueEnumPrimary   PowerFeedTypeValueEnum = "primary"
	PowerFeedTypeValueEnumRedundant PowerFeedTypeValueEnum = "redundant"
)

func (e *PowerFeedTypeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "primary":
		fallthrough
	case "redundant":
		*e = PowerFeedTypeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PowerFeedTypeValueEnum: %s", s)
	}
}

type PowerFeedType struct {
	Label PowerFeedTypeLabelEnum `json:"label"`
	Value PowerFeedTypeValueEnum `json:"value"`
}

type PowerFeed struct {
	Amperage     *int64                 `json:"amperage,omitempty"`
	Comments     *string                `json:"comments,omitempty"`
	Created      *types.Date            `json:"created,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	ID           *int64                 `json:"id,omitempty"`
	LastUpdated  *time.Time             `json:"last_updated,omitempty"`
	// Maximum permissible draw (percentage)
	MaxUtilization *int64           `json:"max_utilization,omitempty"`
	Name           string           `json:"name"`
	Phase          *PowerFeedPhase  `json:"phase,omitempty"`
	PowerPanel     NestedPowerPanel `json:"power_panel"`
	Rack           *NestedRack      `json:"rack,omitempty"`
	Status         *PowerFeedStatus `json:"status,omitempty"`
	Supply         *PowerFeedSupply `json:"supply,omitempty"`
	Tags           []string         `json:"tags,omitempty"`
	Type           *PowerFeedType   `json:"type,omitempty"`
	Voltage        *int64           `json:"voltage,omitempty"`
}
