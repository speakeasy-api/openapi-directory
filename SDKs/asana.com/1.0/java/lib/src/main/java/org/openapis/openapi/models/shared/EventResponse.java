/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * EventResponse - An *event* is an object representing a change to a resource that was
 * observed by an event subscription or delivered asynchronously to
 * the target location of an active webhook.
 * 
 * The event may be triggered by a different `user` than the
 * subscriber. For example, if user A subscribes to a task and user B
 * modified it, the event\u2019s user will be user B. Note: Some events
 * are generated by the system, and will have `null` as the user. API
 * consumers should make sure to handle this case.
 * 
 * The `resource` that triggered the event may be different from the one
 * that the events were requested for or the webhook is subscribed to. For
 * example, a subscription to a project will contain events for tasks
 * contained within the project.
 * 
 * **Note:** pay close attention to the relationship between the fields
 * `Event.action` and `Event.change.action`.
 * `Event.action` represents the action taken on the resource
 * itself, and `Event.change.action` represents how the information
 * within the resource's fields have been modified.
 * 
 * For instance, consider these scenarios:
 * 
 * 
 * * When at task is added to a project, `Event.action` will be
 * `added`, `Event.parent` will be an object with the `id` and
 * `type` of the project, and there will be no `change` field.
 * 
 * 
 * * When an assignee is set on the task, `Event.parent` will be
 * `null`, `Event.action` will be `changed`,
 * `Event.change.action` will be `changed`, and `new_value` will
 * be an object with the user's `id` and `type`.
 * 
 * 
 * * When a collaborator is added to the task, `Event.parent` will
 * be `null`, `Event.action` will be `changed`,
 * `Event.change.action` will be `added`, and `added_value` will be
 * an object with the user's `id` and `type`.
 */
public class EventResponse {
    /**
     * The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    public String action;

    public EventResponse withAction(String action) {
        this.action = action;
        return this;
    }
    
    /**
     * Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("change")
    public EventResponseChange change;

    public EventResponse withChange(EventResponseChange change) {
        this.change = change;
        return this;
    }
    
    /**
     * The timestamp when the event occurred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public EventResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent")
    public AsanaNamedResource parent;

    public EventResponse withParent(AsanaNamedResource parent) {
        this.parent = parent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    public AsanaNamedResource resource;

    public EventResponse withResource(AsanaNamedResource resource) {
        this.resource = resource;
        return this;
    }
    
    /**
     * *Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public EventResponse withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public UserCompact user;

    public EventResponse withUser(UserCompact user) {
        this.user = user;
        return this;
    }
    
    public EventResponse(){}
}
