/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class DriveFilesCopyRequest {
    @SpeakeasyMetadata("request:mediaType=application/json")
    public org.openapis.openapi.models.shared.FileInput fileInput;

    public DriveFilesCopyRequest withFileInput(org.openapis.openapi.models.shared.FileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }
    
    /**
     * Data format for the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public DriveFilesCopyRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * Whether to convert this file to the corresponding Docs Editors format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=convert")
    public Boolean convert;

    public DriveFilesCopyRequest withConvert(Boolean convert) {
        this.convert = convert;
        return this;
    }
    
    /**
     * Deprecated. Copying files into multiple folders is no longer supported. Use shortcuts instead.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=enforceSingleParent")
    public Boolean enforceSingleParent;

    public DriveFilesCopyRequest withEnforceSingleParent(Boolean enforceSingleParent) {
        this.enforceSingleParent = enforceSingleParent;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public DriveFilesCopyRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * The ID of the file to copy.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=fileId")
    public String fileId;

    public DriveFilesCopyRequest withFileId(String fileId) {
        this.fileId = fileId;
        return this;
    }
    
    /**
     * A comma-separated list of IDs of labels to include in the labelInfo part of the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeLabels")
    public String includeLabels;

    public DriveFilesCopyRequest withIncludeLabels(String includeLabels) {
        this.includeLabels = includeLabels;
        return this;
    }
    
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includePermissionsForView")
    public String includePermissionsForView;

    public DriveFilesCopyRequest withIncludePermissionsForView(String includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public DriveFilesCopyRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public DriveFilesCopyRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ocr")
    public Boolean ocr;

    public DriveFilesCopyRequest withOcr(Boolean ocr) {
        this.ocr = ocr;
        return this;
    }
    
    /**
     * If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ocrLanguage")
    public String ocrLanguage;

    public DriveFilesCopyRequest withOcrLanguage(String ocrLanguage) {
        this.ocrLanguage = ocrLanguage;
        return this;
    }
    
    /**
     * Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pinned")
    public Boolean pinned;

    public DriveFilesCopyRequest withPinned(Boolean pinned) {
        this.pinned = pinned;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public DriveFilesCopyRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public DriveFilesCopyRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=supportsAllDrives")
    public Boolean supportsAllDrives;

    public DriveFilesCopyRequest withSupportsAllDrives(Boolean supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        return this;
    }
    
    /**
     * Deprecated use supportsAllDrives instead.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=supportsTeamDrives")
    public Boolean supportsTeamDrives;

    public DriveFilesCopyRequest withSupportsTeamDrives(Boolean supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        return this;
    }
    
    /**
     * The language of the timed text.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timedTextLanguage")
    public String timedTextLanguage;

    public DriveFilesCopyRequest withTimedTextLanguage(String timedTextLanguage) {
        this.timedTextLanguage = timedTextLanguage;
        return this;
    }
    
    /**
     * The timed text track name.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timedTextTrackName")
    public String timedTextTrackName;

    public DriveFilesCopyRequest withTimedTextTrackName(String timedTextTrackName) {
        this.timedTextTrackName = timedTextTrackName;
        return this;
    }
    
    /**
     * Deprecated. Please use quotaUser instead.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userIp")
    public String userIp;

    public DriveFilesCopyRequest withUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }
    
    /**
     * The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert=false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=visibility")
    public DriveFilesCopyVisibilityEnum visibility;

    public DriveFilesCopyRequest withVisibility(DriveFilesCopyVisibilityEnum visibility) {
        this.visibility = visibility;
        return this;
    }
    
    public DriveFilesCopyRequest(@JsonProperty("fileId") String fileId) {
        this.fileId = fileId;
  }
}
