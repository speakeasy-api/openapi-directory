/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class OrganizationSecretScanningAlert {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public OrganizationSecretScanningAlert withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The GitHub URL of the alert resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_url")
    public String htmlUrl;
    public OrganizationSecretScanningAlert withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * The REST API URL of the code locations for this alert.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations_url")
    public String locationsUrl;
    public OrganizationSecretScanningAlert withLocationsUrl(String locationsUrl) {
        this.locationsUrl = locationsUrl;
        return this;
    }
    
    /**
     * The security alert number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public Long number;
    public OrganizationSecretScanningAlert withNumber(Long number) {
        this.number = number;
        return this;
    }
    
    /**
     * Whether push protection was bypassed for the detected secret.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("push_protection_bypassed")
    public Boolean pushProtectionBypassed;
    public OrganizationSecretScanningAlert withPushProtectionBypassed(Boolean pushProtectionBypassed) {
        this.pushProtectionBypassed = pushProtectionBypassed;
        return this;
    }
    
    /**
     * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("push_protection_bypassed_at")
    public OffsetDateTime pushProtectionBypassedAt;
    public OrganizationSecretScanningAlert withPushProtectionBypassedAt(OffsetDateTime pushProtectionBypassedAt) {
        this.pushProtectionBypassedAt = pushProtectionBypassedAt;
        return this;
    }
    
    /**
     * A GitHub user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("push_protection_bypassed_by")
    public NullableSimpleUser pushProtectionBypassedBy;
    public OrganizationSecretScanningAlert withPushProtectionBypassedBy(NullableSimpleUser pushProtectionBypassedBy) {
        this.pushProtectionBypassedBy = pushProtectionBypassedBy;
        return this;
    }
    
    /**
     * A GitHub repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repository")
    public SimpleRepository repository;
    public OrganizationSecretScanningAlert withRepository(SimpleRepository repository) {
        this.repository = repository;
        return this;
    }
    
    /**
     * **Required when the `state` is `resolved`.** The reason for resolving the alert.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolution")
    public SecretScanningAlertResolutionEnum resolution;
    public OrganizationSecretScanningAlert withResolution(SecretScanningAlertResolutionEnum resolution) {
        this.resolution = resolution;
        return this;
    }
    
    /**
     * The comment that was optionally added when this alert was closed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolution_comment")
    public String resolutionComment;
    public OrganizationSecretScanningAlert withResolutionComment(String resolutionComment) {
        this.resolutionComment = resolutionComment;
        return this;
    }
    
    /**
     * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("resolved_at")
    public OffsetDateTime resolvedAt;
    public OrganizationSecretScanningAlert withResolvedAt(OffsetDateTime resolvedAt) {
        this.resolvedAt = resolvedAt;
        return this;
    }
    
    /**
     * A GitHub user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolved_by")
    public NullableSimpleUser resolvedBy;
    public OrganizationSecretScanningAlert withResolvedBy(NullableSimpleUser resolvedBy) {
        this.resolvedBy = resolvedBy;
        return this;
    }
    
    /**
     * The secret that was detected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;
    public OrganizationSecretScanningAlert withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * The type of secret that secret scanning detected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_type")
    public String secretType;
    public OrganizationSecretScanningAlert withSecretType(String secretType) {
        this.secretType = secretType;
        return this;
    }
    
    /**
     * User-friendly name for the detected secret, matching the `secret_type`.
     * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/github-ae@latest/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_type_display_name")
    public String secretTypeDisplayName;
    public OrganizationSecretScanningAlert withSecretTypeDisplayName(String secretTypeDisplayName) {
        this.secretTypeDisplayName = secretTypeDisplayName;
        return this;
    }
    
    /**
     * Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public SchemassecretScanningAlertStateEnum state;
    public OrganizationSecretScanningAlert withState(SchemassecretScanningAlertStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public OrganizationSecretScanningAlert withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The REST API URL of the alert resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public OrganizationSecretScanningAlert withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
