// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateUserXAmzTargetEnum
type CreateUserXAmzTargetEnum string

const (
	CreateUserXAmzTargetEnumPhotonAdminProxyServiceCreateUser CreateUserXAmzTargetEnum = "PhotonAdminProxyService.CreateUser"
)

func (e *CreateUserXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PhotonAdminProxyService.CreateUser":
		*e = CreateUserXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserXAmzTargetEnum: %s", s)
	}
}

type CreateUserRequest struct {
	CreateUserRequest shared.CreateUserRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateUserXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateUserResponse struct {
	ContentType string
	// Success
	CreateUserResult map[string]interface{}
	// InvalidAccountStatusException
	InvalidAccountStatusException interface{}
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
}
