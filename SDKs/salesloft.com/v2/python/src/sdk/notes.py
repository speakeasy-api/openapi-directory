"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Notes:
    r"""Note Management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_v2_notes_id_json(self, request: operations.DeleteV2NotesIDJSONRequest) -> operations.DeleteV2NotesIDJSONResponse:
        r"""Delete a note
        Deletes a note owned by authorized account.
        This operation is not reversible without contacting support.
        This operation can be called multiple times successfully.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteV2NotesIDJSONRequest, base_url, '/v2/notes/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteV2NotesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_v2_notes_json(self, request: operations.GetV2NotesJSONRequest) -> operations.GetV2NotesJSONResponse:
        r"""List notes
        Fetches multiple note records. The records can be filtered, paged, and sorted according to
        the respective parameters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/notes.json'
        
        query_params = utils.get_query_params(operations.GetV2NotesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2NotesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_v2_notes_id_json(self, request: operations.GetV2NotesIDJSONRequest) -> operations.GetV2NotesIDJSONResponse:
        r"""Fetch a note
        Fetches a note, by ID only.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2NotesIDJSONRequest, base_url, '/v2/notes/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2NotesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_v2_notes_json(self, request: operations.PostV2NotesJSONRequestBody) -> operations.PostV2NotesJSONResponse:
        r"""Create a note
        Creates a note.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/notes.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2NotesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_v2_notes_id_json(self, request: operations.PutV2NotesIDJSONRequest) -> operations.PutV2NotesIDJSONResponse:
        r"""Update a note
        Updates a note. Any changes to the note or associated records will not reflect in your CRM.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2NotesIDJSONRequest, base_url, '/v2/notes/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2NotesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    