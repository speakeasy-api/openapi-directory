// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AcceptChangeRequestPathParams struct {
	ChangeRequestID int64 `pathParam:"style=simple,explode=false,name=changeRequestId"`
}

// AcceptChangeRequestRequestBodyStatusEnum - New status of the change request
type AcceptChangeRequestRequestBodyStatusEnum string

const (
	AcceptChangeRequestRequestBodyStatusEnumPendingDeployment AcceptChangeRequestRequestBodyStatusEnum = "pending deployment"
	AcceptChangeRequestRequestBodyStatusEnumDeployed          AcceptChangeRequestRequestBodyStatusEnum = "deployed"
)

func (e *AcceptChangeRequestRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending deployment":
		fallthrough
	case "deployed":
		*e = AcceptChangeRequestRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AcceptChangeRequestRequestBodyStatusEnum: %s", s)
	}
}

type AcceptChangeRequestRequestBody struct {
	// New status of the change request
	Status *AcceptChangeRequestRequestBodyStatusEnum `json:"status,omitempty"`
}

type AcceptChangeRequestRequest struct {
	PathParams AcceptChangeRequestPathParams
	Request    AcceptChangeRequestRequestBody `request:"mediaType=application/json"`
}

// AcceptChangeRequest200ApplicationJSONActionEnum - The id of the action
type AcceptChangeRequest200ApplicationJSONActionEnum string

const (
	AcceptChangeRequest200ApplicationJSONActionEnumAcceptChangeRequest AcceptChangeRequest200ApplicationJSONActionEnum = "acceptChangeRequest"
)

func (e *AcceptChangeRequest200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "acceptChangeRequest":
		*e = AcceptChangeRequest200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AcceptChangeRequest200ApplicationJSONActionEnum: %s", s)
	}
}

type AcceptChangeRequest200ApplicationJSONData struct {
	Rules []shared.ChangeRequest `json:"rules"`
}

// AcceptChangeRequest200ApplicationJSONResultEnum - Result of the request
type AcceptChangeRequest200ApplicationJSONResultEnum string

const (
	AcceptChangeRequest200ApplicationJSONResultEnumSuccess AcceptChangeRequest200ApplicationJSONResultEnum = "success"
	AcceptChangeRequest200ApplicationJSONResultEnumError   AcceptChangeRequest200ApplicationJSONResultEnum = "error"
)

func (e *AcceptChangeRequest200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = AcceptChangeRequest200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AcceptChangeRequest200ApplicationJSONResultEnum: %s", s)
	}
}

// AcceptChangeRequest200ApplicationJSON - Change requests information
type AcceptChangeRequest200ApplicationJSON struct {
	// The id of the action
	Action AcceptChangeRequest200ApplicationJSONActionEnum `json:"action"`
	Data   AcceptChangeRequest200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result AcceptChangeRequest200ApplicationJSONResultEnum `json:"result"`
}

type AcceptChangeRequestResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Change requests information
	AcceptChangeRequest200ApplicationJSONObject *AcceptChangeRequest200ApplicationJSON
}
