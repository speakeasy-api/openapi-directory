/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SubscriptionInput - A JSON object containing sibscription information
 */
public class SubscriptionInput {
    /**
     * The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom")
    public Object custom;

    public SubscriptionInput withCustom(Object custom) {
        this.custom = custom;
        return this;
    }
    
    /**
     * The number of hours this event is retained in the database. *Only use larger numbers if you know what you are doing.* A couple of hours is enough for most use cases.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("database_hold_time_h")
    public Long databaseHoldTimeH;

    public SubscriptionInput withDatabaseHoldTimeH(Long databaseHoldTimeH) {
        this.databaseHoldTimeH = databaseHoldTimeH;
        return this;
    }
    
    /**
     * Additional field to add some notes about this subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public SubscriptionInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * If set to `true`, resource references in an event (e.g. the location an item moved to) are resolved and populated with data instead of giving just an ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("populate_events")
    public Boolean populateEvents;

    public SubscriptionInput withPopulateEvents(Boolean populateEvents) {
        this.populateEvents = populateEvents;
        return this;
    }
    
    /**
     * Set to `true` if you want our server to retry if `target_url` is not giving back a `2xx` success code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_retry")
    public Boolean targetRetry;

    public SubscriptionInput withTargetRetry(Boolean targetRetry) {
        this.targetRetry = targetRetry;
        return this;
    }
    
    /**
     * Url to an external service that all applicable events are pushed to (webhook). Configure to `null` if you don't wish to use this (default).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_url")
    public String targetUrl;

    public SubscriptionInput withTargetUrl(String targetUrl) {
        this.targetUrl = targetUrl;
        return this;
    }
    
    /**
     * MQTT filter that is applied to all events. Allows you to select and filter events. See [Event filtering](https://intellifi.zendesk.com/hc/en-us/articles/360008791494) for more information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic_filter")
    public String topicFilter;

    public SubscriptionInput withTopicFilter(String topicFilter) {
        this.topicFilter = topicFilter;
        return this;
    }
    
    /**
     * Whether or not the `target_url` endpoint TLS certificate is verified to be valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verify_target_certificate")
    public Boolean verifyTargetCertificate;

    public SubscriptionInput withVerifyTargetCertificate(Boolean verifyTargetCertificate) {
        this.verifyTargetCertificate = verifyTargetCertificate;
        return this;
    }
    
    public SubscriptionInput(){}
}
