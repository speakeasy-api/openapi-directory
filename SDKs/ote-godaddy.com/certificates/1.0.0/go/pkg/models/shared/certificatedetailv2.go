// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateDetailV2RootTypeEnum - Root type:
//   - `GODADDY_SHA_1` - GoDaddy (Secure Hash Algorithm 1) SHA-1 root type
//   - `GODADDY_SHA_2` - GoDaddy (Secure Hash Algorithm 2) SHA-2 root type
//   - `STARFIELD_SHA_1` - Starfield SHA-1 root type
//   - `STARFIELD_SHA_2` - Starfield SHA-2 root type
type CertificateDetailV2RootTypeEnum string

const (
	CertificateDetailV2RootTypeEnumGodaddySha1   CertificateDetailV2RootTypeEnum = "GODADDY_SHA_1"
	CertificateDetailV2RootTypeEnumGodaddySha2   CertificateDetailV2RootTypeEnum = "GODADDY_SHA_2"
	CertificateDetailV2RootTypeEnumStarfieldSha1 CertificateDetailV2RootTypeEnum = "STARFIELD_SHA_1"
	CertificateDetailV2RootTypeEnumStarfieldSha2 CertificateDetailV2RootTypeEnum = "STARFIELD_SHA_2"
)

func (e CertificateDetailV2RootTypeEnum) ToPointer() *CertificateDetailV2RootTypeEnum {
	return &e
}

func (e *CertificateDetailV2RootTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GODADDY_SHA_1":
		fallthrough
	case "GODADDY_SHA_2":
		fallthrough
	case "STARFIELD_SHA_1":
		fallthrough
	case "STARFIELD_SHA_2":
		*e = CertificateDetailV2RootTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateDetailV2RootTypeEnum: %v", v)
	}
}

// CertificateDetailV2SlotSizeEnum - Number of subject alternative names (SAN) to be included in certificate (if UCC):
//   - `FIVE` - Five slot UCC request
//   - `TEN` - Ten slot UCC request
//   - `FIFTEEN` - Fifteen slot UCC request
//   - `TWENTY` - Twenty slot UCC request
//   - `THIRTY` - Thirty slot UCC request
//   - `FOURTY` - Fourty slot UCC request
//   - `FIFTY` - Fifty slot UCC request
//   - `ONE_HUNDRED` - One hundred slot UCC request
type CertificateDetailV2SlotSizeEnum string

const (
	CertificateDetailV2SlotSizeEnumFive       CertificateDetailV2SlotSizeEnum = "FIVE"
	CertificateDetailV2SlotSizeEnumTen        CertificateDetailV2SlotSizeEnum = "TEN"
	CertificateDetailV2SlotSizeEnumFifteen    CertificateDetailV2SlotSizeEnum = "FIFTEEN"
	CertificateDetailV2SlotSizeEnumTwenty     CertificateDetailV2SlotSizeEnum = "TWENTY"
	CertificateDetailV2SlotSizeEnumThirty     CertificateDetailV2SlotSizeEnum = "THIRTY"
	CertificateDetailV2SlotSizeEnumFourty     CertificateDetailV2SlotSizeEnum = "FOURTY"
	CertificateDetailV2SlotSizeEnumFifty      CertificateDetailV2SlotSizeEnum = "FIFTY"
	CertificateDetailV2SlotSizeEnumOneHundred CertificateDetailV2SlotSizeEnum = "ONE_HUNDRED"
)

func (e CertificateDetailV2SlotSizeEnum) ToPointer() *CertificateDetailV2SlotSizeEnum {
	return &e
}

func (e *CertificateDetailV2SlotSizeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIVE":
		fallthrough
	case "TEN":
		fallthrough
	case "FIFTEEN":
		fallthrough
	case "TWENTY":
		fallthrough
	case "THIRTY":
		fallthrough
	case "FOURTY":
		fallthrough
	case "FIFTY":
		fallthrough
	case "ONE_HUNDRED":
		*e = CertificateDetailV2SlotSizeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateDetailV2SlotSizeEnum: %v", v)
	}
}

// CertificateDetailV2StatusEnum - Certificate status (if issued or revoked):
//   - `CANCELED` - Certificate request was canceled by customer
//   - `DENIED` - Certificate request was denied by customer\n  * `EXPIRED` - Issued certificate has exceeded the valid end date
//   - `ISSUED` - Certificate has been issued and is within validity period
//   - `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued
//   - `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued
//   - `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked
//   - `REVOKED` - Issued certificate has been revoked\n  * `UNUSED` - Certificate in an error state
type CertificateDetailV2StatusEnum string

const (
	CertificateDetailV2StatusEnumPendingIssuance   CertificateDetailV2StatusEnum = "PENDING_ISSUANCE"
	CertificateDetailV2StatusEnumIssued            CertificateDetailV2StatusEnum = "ISSUED"
	CertificateDetailV2StatusEnumRevoked           CertificateDetailV2StatusEnum = "REVOKED"
	CertificateDetailV2StatusEnumCanceled          CertificateDetailV2StatusEnum = "CANCELED"
	CertificateDetailV2StatusEnumDenied            CertificateDetailV2StatusEnum = "DENIED"
	CertificateDetailV2StatusEnumPendingRevocation CertificateDetailV2StatusEnum = "PENDING_REVOCATION"
	CertificateDetailV2StatusEnumPendingRekey      CertificateDetailV2StatusEnum = "PENDING_REKEY"
	CertificateDetailV2StatusEnumUnused            CertificateDetailV2StatusEnum = "UNUSED"
	CertificateDetailV2StatusEnumExpired           CertificateDetailV2StatusEnum = "EXPIRED"
)

func (e CertificateDetailV2StatusEnum) ToPointer() *CertificateDetailV2StatusEnum {
	return &e
}

func (e *CertificateDetailV2StatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING_ISSUANCE":
		fallthrough
	case "ISSUED":
		fallthrough
	case "REVOKED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "DENIED":
		fallthrough
	case "PENDING_REVOCATION":
		fallthrough
	case "PENDING_REKEY":
		fallthrough
	case "UNUSED":
		fallthrough
	case "EXPIRED":
		*e = CertificateDetailV2StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateDetailV2StatusEnum: %v", v)
	}
}

// CertificateDetailV2TypeEnum - Certificate type:
//   - `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only
//   - `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only
//   - `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors
//   - `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information
//   - `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information
//   - `OV_SSL` - SSL certificate validated using organization information and domain name
//   - `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name
//   - `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only
//   - `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors
//   - `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name
type CertificateDetailV2TypeEnum string

const (
	CertificateDetailV2TypeEnumDvSsl           CertificateDetailV2TypeEnum = "DV_SSL"
	CertificateDetailV2TypeEnumDvWildcardSsl   CertificateDetailV2TypeEnum = "DV_WILDCARD_SSL"
	CertificateDetailV2TypeEnumEvSsl           CertificateDetailV2TypeEnum = "EV_SSL"
	CertificateDetailV2TypeEnumOvCodeSigning   CertificateDetailV2TypeEnum = "OV_CODE_SIGNING"
	CertificateDetailV2TypeEnumOvDriverSigning CertificateDetailV2TypeEnum = "OV_DRIVER_SIGNING"
	CertificateDetailV2TypeEnumOvSsl           CertificateDetailV2TypeEnum = "OV_SSL"
	CertificateDetailV2TypeEnumOvWildcardSsl   CertificateDetailV2TypeEnum = "OV_WILDCARD_SSL"
	CertificateDetailV2TypeEnumUccDvSsl        CertificateDetailV2TypeEnum = "UCC_DV_SSL"
	CertificateDetailV2TypeEnumUccEvSsl        CertificateDetailV2TypeEnum = "UCC_EV_SSL"
	CertificateDetailV2TypeEnumUccOvSsl        CertificateDetailV2TypeEnum = "UCC_OV_SSL"
)

func (e CertificateDetailV2TypeEnum) ToPointer() *CertificateDetailV2TypeEnum {
	return &e
}

func (e *CertificateDetailV2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DV_SSL":
		fallthrough
	case "DV_WILDCARD_SSL":
		fallthrough
	case "EV_SSL":
		fallthrough
	case "OV_CODE_SIGNING":
		fallthrough
	case "OV_DRIVER_SIGNING":
		fallthrough
	case "OV_SSL":
		fallthrough
	case "OV_WILDCARD_SSL":
		fallthrough
	case "UCC_DV_SSL":
		fallthrough
	case "UCC_EV_SSL":
		fallthrough
	case "UCC_OV_SSL":
		*e = CertificateDetailV2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateDetailV2TypeEnum: %v", v)
	}
}

// CertificateDetailV2 - Certificate details retrieved
type CertificateDetailV2 struct {
	// The unique identifier of the certificate request. Only present if no errors returned
	CertificateID string `json:"certificateId"`
	// Common name of certificate
	CommonName string `json:"commonName"`
	// The date the certificate request completed processing.
	CompletedAt *string            `json:"completedAt,omitempty"`
	Contact     CertificateContact `json:"contact"`
	// The date the certificate was ordered.
	CreatedAt string `json:"createdAt"`
	// Certificate signing request (if present) in PEM format
	Csr *string `json:"csr,omitempty"`
	// Only present if certificate order has been denied
	DeniedReason *string                  `json:"deniedReason,omitempty"`
	Organization *CertificateOrganization `json:"organization,omitempty"`
	// Validity period of order. Specified in years
	Period int64 `json:"period"`
	// Percentage of completion for certificate vetting
	Progress *int64 `json:"progress,omitempty"`
	// Only returned when a renewal is available.
	RenewalAvailable *bool `json:"renewalAvailable,omitempty"`
	// The revocation date of certificate (if revoked).
	RevokedAt *string `json:"revokedAt,omitempty"`
	// Root type:
	//   * `GODADDY_SHA_1` - GoDaddy (Secure Hash Algorithm 1) SHA-1 root type
	//   * `GODADDY_SHA_2` - GoDaddy (Secure Hash Algorithm 2) SHA-2 root type
	//   * `STARFIELD_SHA_1` - Starfield SHA-1 root type
	//   * `STARFIELD_SHA_2` - Starfield SHA-2 root type
	//
	RootType *CertificateDetailV2RootTypeEnum `json:"rootType,omitempty"`
	// Serial number of certificate (if issued or revoked)
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Hexadecmial format for Serial number of certificate(if issued or revoked)
	SerialNumberHex *string `json:"serialNumberHex,omitempty"`
	// Number of subject alternative names (SAN) to be included in certificate (if UCC):
	//   * `FIVE` - Five slot UCC request
	//   * `TEN` - Ten slot UCC request
	//   * `FIFTEEN` - Fifteen slot UCC request
	//   * `TWENTY` - Twenty slot UCC request
	//   * `THIRTY` - Thirty slot UCC request
	//   * `FOURTY` - Fourty slot UCC request
	//   * `FIFTY` - Fifty slot UCC request
	//   * `ONE_HUNDRED` - One hundred slot UCC request
	//
	SlotSize *CertificateDetailV2SlotSizeEnum `json:"slotSize,omitempty"`
	// Certificate status (if issued or revoked):
	//   * `CANCELED` - Certificate request was canceled by customer
	//   * `DENIED` - Certificate request was denied by customer\n  * `EXPIRED` - Issued certificate has exceeded the valid end date
	//   * `ISSUED` - Certificate has been issued and is within validity period
	//   * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued
	//   * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued
	//   * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked
	//   * `REVOKED` - Issued certificate has been revoked\n  * `UNUSED` - Certificate in an error state
	//
	Status CertificateDetailV2StatusEnum `json:"status"`
	// Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.
	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty"`
	// Certificate type:
	//   * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only
	//   * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only
	//   * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors
	//   * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information
	//   * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information
	//   * `OV_SSL` - SSL certificate validated using organization information and domain name
	//   * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name
	//   * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only
	//   * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors
	//   * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name
	//
	Type CertificateDetailV2TypeEnum `json:"type"`
	// The end date of the certificate's validity (if issued or revoked).
	ValidEndAt *string `json:"validEndAt,omitempty"`
	// The start date of the certificate's validity (if issued or revoked).
	ValidStartAt *string `json:"validStartAt,omitempty"`
}
