<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateResponse
     */
	public function discoveryengineProjectsLocationsDataStoresBranchesDocumentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/documents', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDiscoveryengineV1alphaDocument", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDiscoveryengineV1alphaDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDiscoveryengineV1alphaDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteResponse
     */
	public function discoveryengineProjectsLocationsDataStoresBranchesDocumentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk import of multiple Documents. Request processing may be synchronous. Non-existing items will be created. Note: It is possible for a subset of the Documents to be successfully updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportResponse
     */
	public function discoveryengineProjectsLocationsDataStoresBranchesDocumentsImport(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/documents:import', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDiscoveryengineV1alphaImportDocumentsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of Documents.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListResponse
     */
	public function discoveryengineProjectsLocationsDataStoresBranchesDocumentsList(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/documents', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDiscoveryengineV1alphaListDocumentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDiscoveryengineV1alphaListDocumentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchResponse
     */
	public function discoveryengineProjectsLocationsDataStoresBranchesDocumentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDiscoveryengineV1alphaDocument", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDiscoveryengineV1alphaDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDiscoveryengineV1alphaDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Permanently deletes all selected Documents under a branch. This process is asynchronous. If the request is valid, the removal will be enquired and processed offlines. Depending on the number of Documents, this operation could take hours to complete. Before the operation completes, some Documents may still be returned by DocumentService.GetDocument or DocumentService.ListDocuments. To get a sample of Documents that would be deleted, set PurgeDocumentsRequest.force to false.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeResponse
     */
	public function discoveryengineProjectsLocationsDataStoresBranchesDocumentsPurge(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/documents:purge', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDiscoveryengineV1alphaPurgeDocumentsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Makes a recommendation, which requires a contextual user event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendResponse
     */
	public function discoveryengineProjectsLocationsDataStoresServingConfigsRecommend(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{servingConfig}:recommend', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDiscoveryengineV1alphaRecommendRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDiscoveryengineV1alphaRecommendResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDiscoveryengineV1alphaRecommendResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectResponse
     */
	public function discoveryengineProjectsLocationsDataStoresUserEventsCollect(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userEvents:collect', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsCollectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleApiHttpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleApiHttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportResponse
     */
	public function discoveryengineProjectsLocationsDataStoresUserEventsImport(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userEvents:import', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDiscoveryengineV1alphaImportUserEventsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Writes a single user event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteResponse
     */
	public function discoveryengineProjectsLocationsDataStoresUserEventsWrite(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userEvents:write', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDiscoveryengineV1alphaUserEvent", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsLocationsDataStoresUserEventsWriteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDiscoveryengineV1alphaUserEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDiscoveryengineV1alphaUserEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetResponse
     */
	public function discoveryengineProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListResponse
     */
	public function discoveryengineProjectsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiscoveryengineProjectsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}