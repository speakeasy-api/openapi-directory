"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdateFreightValuesCreateUpdateFreightValuesRequest:
    
    absolute_money_cost: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('absoluteMoneyCost') }})
    r"""Fixed shipping cost to be charged in a decimal number."""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Three letter ISO code for the country where the delivery will take place."""  
    max_volume: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxVolume') }})
    r"""Maximum volume that can be transported by the carrier in cmÂ³."""  
    operation_type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationType') }})
    r"""Indicates desired action for the object. Possible values are `1` (Insert), `2` (Update) or `3`(Delete)."""  
    polygon: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polygon') }})
    r"""Polygon ID, according to the [geolocation](https://help.vtex.com/en/tutorial/registering-geolocation/) feature."""  
    price_percent: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricePercent') }})
    r"""[Price-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total price of the order, in decimal number. You must fill in this field with a percentage value. For example, for an additional charge of 10%, fill in the table with 10."""  
    price_percent_by_weight: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricePercentByWeight') }})
    r"""[Weight-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total weight of the order."""  
    time_cost: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeCost') }})
    r"""Delivery time frame informed by the carrier, in the format DD.HH:MM:SS."""  
    weight_end: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weightEnd') }})
    r"""Maximum weight allowed."""  
    weight_start: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weightStart') }})
    r"""Minimum weight allowed"""  
    zip_code_end: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipCodeEnd') }})
    r"""End of postal code interval."""  
    zip_code_start: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipCodeStart') }})
    r"""Start of postal code interval."""  
    

@dataclasses.dataclass
class CreateUpdateFreightValuesRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand"""  
    carrier_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'carrierId', 'style': 'simple', 'explode': False }})  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent"""  
    request_body: list[CreateUpdateFreightValuesCreateUpdateFreightValuesRequest] = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateUpdateFreightValuesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    