"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import agerangetargetingoptiondetails as shared_agerangetargetingoptiondetails
from ..shared import appcategorytargetingoptiondetails as shared_appcategorytargetingoptiondetails
from ..shared import audiocontenttypetargetingoptiondetails as shared_audiocontenttypetargetingoptiondetails
from ..shared import authorizedsellerstatustargetingoptiondetails as shared_authorizedsellerstatustargetingoptiondetails
from ..shared import browsertargetingoptiondetails as shared_browsertargetingoptiondetails
from ..shared import businesschaintargetingoptiondetails as shared_businesschaintargetingoptiondetails
from ..shared import carrierandisptargetingoptiondetails as shared_carrierandisptargetingoptiondetails
from ..shared import categorytargetingoptiondetails as shared_categorytargetingoptiondetails
from ..shared import contentdurationtargetingoptiondetails as shared_contentdurationtargetingoptiondetails
from ..shared import contentgenretargetingoptiondetails as shared_contentgenretargetingoptiondetails
from ..shared import contentinstreampositiontargetingoptiondetails as shared_contentinstreampositiontargetingoptiondetails
from ..shared import contentoutstreampositiontargetingoptiondetails as shared_contentoutstreampositiontargetingoptiondetails
from ..shared import contentstreamtypetargetingoptiondetails as shared_contentstreamtypetargetingoptiondetails
from ..shared import devicemakemodeltargetingoptiondetails as shared_devicemakemodeltargetingoptiondetails
from ..shared import devicetypetargetingoptiondetails as shared_devicetypetargetingoptiondetails
from ..shared import digitalcontentlabeltargetingoptiondetails as shared_digitalcontentlabeltargetingoptiondetails
from ..shared import environmenttargetingoptiondetails as shared_environmenttargetingoptiondetails
from ..shared import exchangetargetingoptiondetails as shared_exchangetargetingoptiondetails
from ..shared import gendertargetingoptiondetails as shared_gendertargetingoptiondetails
from ..shared import georegiontargetingoptiondetails as shared_georegiontargetingoptiondetails
from ..shared import householdincometargetingoptiondetails as shared_householdincometargetingoptiondetails
from ..shared import languagetargetingoptiondetails as shared_languagetargetingoptiondetails
from ..shared import nativecontentpositiontargetingoptiondetails as shared_nativecontentpositiontargetingoptiondetails
from ..shared import omidtargetingoptiondetails as shared_omidtargetingoptiondetails
from ..shared import onscreenpositiontargetingoptiondetails as shared_onscreenpositiontargetingoptiondetails
from ..shared import operatingsystemtargetingoptiondetails as shared_operatingsystemtargetingoptiondetails
from ..shared import parentalstatustargetingoptiondetails as shared_parentalstatustargetingoptiondetails
from ..shared import poitargetingoptiondetails as shared_poitargetingoptiondetails
from ..shared import sensitivecategorytargetingoptiondetails as shared_sensitivecategorytargetingoptiondetails
from ..shared import subexchangetargetingoptiondetails as shared_subexchangetargetingoptiondetails
from ..shared import userrewardedcontenttargetingoptiondetails as shared_userrewardedcontenttargetingoptiondetails
from ..shared import videoplayersizetargetingoptiondetails as shared_videoplayersizetargetingoptiondetails
from ..shared import viewabilitytargetingoptiondetails as shared_viewabilitytargetingoptiondetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TargetingOptionTargetingTypeEnum(str, Enum):
    r"""Output only. The type of this targeting option."""
    TARGETING_TYPE_UNSPECIFIED = 'TARGETING_TYPE_UNSPECIFIED'
    TARGETING_TYPE_CHANNEL = 'TARGETING_TYPE_CHANNEL'
    TARGETING_TYPE_APP_CATEGORY = 'TARGETING_TYPE_APP_CATEGORY'
    TARGETING_TYPE_APP = 'TARGETING_TYPE_APP'
    TARGETING_TYPE_URL = 'TARGETING_TYPE_URL'
    TARGETING_TYPE_DAY_AND_TIME = 'TARGETING_TYPE_DAY_AND_TIME'
    TARGETING_TYPE_AGE_RANGE = 'TARGETING_TYPE_AGE_RANGE'
    TARGETING_TYPE_REGIONAL_LOCATION_LIST = 'TARGETING_TYPE_REGIONAL_LOCATION_LIST'
    TARGETING_TYPE_PROXIMITY_LOCATION_LIST = 'TARGETING_TYPE_PROXIMITY_LOCATION_LIST'
    TARGETING_TYPE_GENDER = 'TARGETING_TYPE_GENDER'
    TARGETING_TYPE_VIDEO_PLAYER_SIZE = 'TARGETING_TYPE_VIDEO_PLAYER_SIZE'
    TARGETING_TYPE_USER_REWARDED_CONTENT = 'TARGETING_TYPE_USER_REWARDED_CONTENT'
    TARGETING_TYPE_PARENTAL_STATUS = 'TARGETING_TYPE_PARENTAL_STATUS'
    TARGETING_TYPE_CONTENT_INSTREAM_POSITION = 'TARGETING_TYPE_CONTENT_INSTREAM_POSITION'
    TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION = 'TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION'
    TARGETING_TYPE_DEVICE_TYPE = 'TARGETING_TYPE_DEVICE_TYPE'
    TARGETING_TYPE_AUDIENCE_GROUP = 'TARGETING_TYPE_AUDIENCE_GROUP'
    TARGETING_TYPE_BROWSER = 'TARGETING_TYPE_BROWSER'
    TARGETING_TYPE_HOUSEHOLD_INCOME = 'TARGETING_TYPE_HOUSEHOLD_INCOME'
    TARGETING_TYPE_ON_SCREEN_POSITION = 'TARGETING_TYPE_ON_SCREEN_POSITION'
    TARGETING_TYPE_THIRD_PARTY_VERIFIER = 'TARGETING_TYPE_THIRD_PARTY_VERIFIER'
    TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION = 'TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION'
    TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION = 'TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION'
    TARGETING_TYPE_ENVIRONMENT = 'TARGETING_TYPE_ENVIRONMENT'
    TARGETING_TYPE_CARRIER_AND_ISP = 'TARGETING_TYPE_CARRIER_AND_ISP'
    TARGETING_TYPE_OPERATING_SYSTEM = 'TARGETING_TYPE_OPERATING_SYSTEM'
    TARGETING_TYPE_DEVICE_MAKE_MODEL = 'TARGETING_TYPE_DEVICE_MAKE_MODEL'
    TARGETING_TYPE_KEYWORD = 'TARGETING_TYPE_KEYWORD'
    TARGETING_TYPE_NEGATIVE_KEYWORD_LIST = 'TARGETING_TYPE_NEGATIVE_KEYWORD_LIST'
    TARGETING_TYPE_VIEWABILITY = 'TARGETING_TYPE_VIEWABILITY'
    TARGETING_TYPE_CATEGORY = 'TARGETING_TYPE_CATEGORY'
    TARGETING_TYPE_INVENTORY_SOURCE = 'TARGETING_TYPE_INVENTORY_SOURCE'
    TARGETING_TYPE_LANGUAGE = 'TARGETING_TYPE_LANGUAGE'
    TARGETING_TYPE_AUTHORIZED_SELLER_STATUS = 'TARGETING_TYPE_AUTHORIZED_SELLER_STATUS'
    TARGETING_TYPE_GEO_REGION = 'TARGETING_TYPE_GEO_REGION'
    TARGETING_TYPE_INVENTORY_SOURCE_GROUP = 'TARGETING_TYPE_INVENTORY_SOURCE_GROUP'
    TARGETING_TYPE_EXCHANGE = 'TARGETING_TYPE_EXCHANGE'
    TARGETING_TYPE_SUB_EXCHANGE = 'TARGETING_TYPE_SUB_EXCHANGE'
    TARGETING_TYPE_POI = 'TARGETING_TYPE_POI'
    TARGETING_TYPE_BUSINESS_CHAIN = 'TARGETING_TYPE_BUSINESS_CHAIN'
    TARGETING_TYPE_CONTENT_DURATION = 'TARGETING_TYPE_CONTENT_DURATION'
    TARGETING_TYPE_CONTENT_STREAM_TYPE = 'TARGETING_TYPE_CONTENT_STREAM_TYPE'
    TARGETING_TYPE_NATIVE_CONTENT_POSITION = 'TARGETING_TYPE_NATIVE_CONTENT_POSITION'
    TARGETING_TYPE_OMID = 'TARGETING_TYPE_OMID'
    TARGETING_TYPE_AUDIO_CONTENT_TYPE = 'TARGETING_TYPE_AUDIO_CONTENT_TYPE'
    TARGETING_TYPE_CONTENT_GENRE = 'TARGETING_TYPE_CONTENT_GENRE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TargetingOption:
    r"""Represents a single targeting option, which is a targetable concept in DV360."""
    
    age_range_details: Optional[shared_agerangetargetingoptiondetails.AgeRangeTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageRangeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable age range. This will be populated in the age_range_details field when targeting_type is `TARGETING_TYPE_AGE_RANGE`."""  
    app_category_details: Optional[shared_appcategorytargetingoptiondetails.AppCategoryTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appCategoryDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable collection of apps. A collection lets you target dynamic groups of related apps that are maintained by the platform, for example `All Apps/Google Play/Games`. This will be populated in the app_category_details field when targeting_type is `TARGETING_TYPE_APP_CATEGORY`."""  
    audio_content_type_details: Optional[shared_audiocontenttypetargetingoptiondetails.AudioContentTypeTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioContentTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable audio content type. This will be populated in the audio_content_type_details field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`."""  
    authorized_seller_status_details: Optional[shared_authorizedsellerstatustargetingoptiondetails.AuthorizedSellerStatusTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizedSellerStatusDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable authorized seller status. This will be populated in the authorized_seller_status_details field when targeting_type is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`."""  
    browser_details: Optional[shared_browsertargetingoptiondetails.BrowserTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable browser. This will be populated in the browser_details field when targeting_type is `TARGETING_TYPE_BROWSER`."""  
    business_chain_details: Optional[shared_businesschaintargetingoptiondetails.BusinessChainTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessChainDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable business chain within a geo region. This will be populated in the business_chain_details field when targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`."""  
    carrier_and_isp_details: Optional[shared_carrierandisptargetingoptiondetails.CarrierAndIspTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrierAndIspDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable carrier or ISP. This will be populated in the carrier_and_isp_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`."""  
    category_details: Optional[shared_categorytargetingoptiondetails.CategoryTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable category. This will be populated in the category_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_CATEGORY`."""  
    content_duration_details: Optional[shared_contentdurationtargetingoptiondetails.ContentDurationTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentDurationDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable content duration. This will be populated in the content_duration_details field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`."""  
    content_genre_details: Optional[shared_contentgenretargetingoptiondetails.ContentGenreTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentGenreDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable content genre. This will be populated in the content_genre_details field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`."""  
    content_instream_position_details: Optional[shared_contentinstreampositiontargetingoptiondetails.ContentInstreamPositionTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentInstreamPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable content instream position, which could be used by video and audio ads. This will be populated in the content_instream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`."""  
    content_outstream_position_details: Optional[shared_contentoutstreampositiontargetingoptiondetails.ContentOutstreamPositionTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentOutstreamPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable content outstream position, which could be used by display and video ads. This will be populated in the content_outstream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`."""  
    content_stream_type_details: Optional[shared_contentstreamtypetargetingoptiondetails.ContentStreamTypeTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentStreamTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable content stream type. This will be populated in the content_stream_type_details field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`."""  
    device_make_model_details: Optional[shared_devicemakemodeltargetingoptiondetails.DeviceMakeModelTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceMakeModelDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable device make and model. This will be populated in the device_make_model_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`."""  
    device_type_details: Optional[shared_devicetypetargetingoptiondetails.DeviceTypeTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable device type. This will be populated in the device_type_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_TYPE`."""  
    digital_content_label_details: Optional[shared_digitalcontentlabeltargetingoptiondetails.DigitalContentLabelTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digitalContentLabelDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable digital content label rating tier. This will be populated in the digital_content_label_details field of the TargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`."""  
    environment_details: Optional[shared_environmenttargetingoptiondetails.EnvironmentTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable environment. This will be populated in the environment_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_ENVIRONMENT`."""  
    exchange_details: Optional[shared_exchangetargetingoptiondetails.ExchangeTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchangeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable exchange. This will be populated in the exchange_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_EXCHANGE`."""  
    gender_details: Optional[shared_gendertargetingoptiondetails.GenderTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genderDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable gender. This will be populated in the gender_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_GENDER`."""  
    geo_region_details: Optional[shared_georegiontargetingoptiondetails.GeoRegionTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoRegionDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable geographic region. This will be populated in the geo_region_details field when targeting_type is `TARGETING_TYPE_GEO_REGION`."""  
    household_income_details: Optional[shared_householdincometargetingoptiondetails.HouseholdIncomeTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('householdIncomeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable household income. This will be populated in the household_income_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_HOUSEHOLD_INCOME`."""  
    language_details: Optional[shared_languagetargetingoptiondetails.LanguageTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable language. This will be populated in the language_details field when targeting_type is `TARGETING_TYPE_LANGUAGE`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name for this targeting option."""  
    native_content_position_details: Optional[shared_nativecontentpositiontargetingoptiondetails.NativeContentPositionTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nativeContentPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable native content position. This will be populated in the native_content_position_details field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`."""  
    omid_details: Optional[shared_omidtargetingoptiondetails.OmidTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('omidDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable Open Measurement enabled inventory type. This will be populated in the omid_details field when targeting_type is `TARGETING_TYPE_OMID`."""  
    on_screen_position_details: Optional[shared_onscreenpositiontargetingoptiondetails.OnScreenPositionTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onScreenPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable on screen position, which could be used by display and video ads. This will be populated in the on_screen_position_details field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`."""  
    operating_system_details: Optional[shared_operatingsystemtargetingoptiondetails.OperatingSystemTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operatingSystemDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable operating system. This will be populated in the operating_system_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`."""  
    parental_status_details: Optional[shared_parentalstatustargetingoptiondetails.ParentalStatusTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentalStatusDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable parental status. This will be populated in the parental_status_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_PARENTAL_STATUS`."""  
    poi_details: Optional[shared_poitargetingoptiondetails.PoiTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poiDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable point of interest(POI). This will be populated in the poi_details field when targeting_type is `TARGETING_TYPE_POI`."""  
    sensitive_category_details: Optional[shared_sensitivecategorytargetingoptiondetails.SensitiveCategoryTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensitiveCategoryDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable sensitive category. This will be populated in the sensitive_category_details field of the TargetingOption when targeting_type is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`."""  
    sub_exchange_details: Optional[shared_subexchangetargetingoptiondetails.SubExchangeTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subExchangeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable sub-exchange. This will be populated in the sub_exchange_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_SUB_EXCHANGE`."""  
    targeting_option_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingOptionId'), 'exclude': lambda f: f is None }})
    r"""Output only. A unique identifier for this targeting option. The tuple {`targeting_type`, `targeting_option_id`} will be unique."""  
    targeting_type: Optional[TargetingOptionTargetingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingType'), 'exclude': lambda f: f is None }})
    r"""Output only. The type of this targeting option."""  
    user_rewarded_content_details: Optional[shared_userrewardedcontenttargetingoptiondetails.UserRewardedContentTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRewardedContentDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable user rewarded content status for video ads only. This will be populated in the user_rewarded_content_details field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`."""  
    video_player_size_details: Optional[shared_videoplayersizetargetingoptiondetails.VideoPlayerSizeTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoPlayerSizeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable video player size. This will be populated in the video_player_size_details field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`."""  
    viewability_details: Optional[shared_viewabilitytargetingoptiondetails.ViewabilityTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewabilityDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable viewability. This will be populated in the viewability_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_VIEWABILITY`."""  
    