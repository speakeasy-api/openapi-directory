"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import playlistitem as shared_playlistitem
from ..shared import playlistvisibilityfield_enum as shared_playlistvisibilityfield_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PlaylistResponseTypeEnum(str, Enum):
    r"""The type of this playlist, which should be either **episode_list** or **podcast_list**."""
    EPISODE_LIST = 'episode_list'
    PODCAST_LIST = 'podcast_list'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlaylistResponse:
    r"""OK"""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Playlist description."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A 11-character playlist id, which can be used to further fetch detailed playlist metadata via `GET /playlists/{id}`."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""High resolution image url of the playlist."""  
    items: Optional[list[shared_playlistitem.PlaylistItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""A list of playlist items."""  
    last_timestamp_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_timestamp_ms'), 'exclude': lambda f: f is None }})
    r"""Passed to the **last_timestamp_ms** parameter of `GET /playlists/{id}` to paginate through items of that playlist."""  
    listennotes_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listennotes_url'), 'exclude': lambda f: f is None }})
    r"""The url of this playlist on ListenNotes.com."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Playlist name."""  
    thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail'), 'exclude': lambda f: f is None }})
    r"""Low resolution image url of the playlist."""  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total number of items in this playlist."""  
    total_audio_length_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_audio_length_sec'), 'exclude': lambda f: f is None }})
    r"""Total audio length of all episodes in this playlist, in seconds. It will have a valid value only when type is **episode_list**. In other words, it will be 0 if type is **podcast_list**."""  
    type: Optional[PlaylistResponseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of this playlist, which should be either **episode_list** or **podcast_list**."""  
    visibility: Optional[shared_playlistvisibilityfield_enum.PlaylistVisibilityFieldEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""Visibility of this playlist."""  
    