// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UsersGetUserMetadataSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type UsersGetUserMetadataRequest struct {
	Security UsersGetUserMetadataSecurity
}

type UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum string

const (
	UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnumBadRequest          UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnumConflict            UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum = "Conflict"
	UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnumNotAcceptable       UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnumNotFound            UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum = "NotFound"
	UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnumInternalServerError UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnumUnauthorized        UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
)

func (e *UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		*e = UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type UsersGetUserMetadataDefaultApplicationJSONError struct {
	Code    UsersGetUserMetadataDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                  `json:"message"`
}

// UsersGetUserMetadataDefaultApplicationJSON - Error
type UsersGetUserMetadataDefaultApplicationJSON struct {
	Error UsersGetUserMetadataDefaultApplicationJSONError `json:"error"`
}

// UsersGetUserMetadata200ApplicationJSON - Success
type UsersGetUserMetadata200ApplicationJSON struct {
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	UserID   *string                `json:"userId,omitempty"`
}

type UsersGetUserMetadataResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UsersGetUserMetadata200ApplicationJSONObject *UsersGetUserMetadata200ApplicationJSON
	// Error
	UsersGetUserMetadataDefaultApplicationJSONObject *UsersGetUserMetadataDefaultApplicationJSON
}
