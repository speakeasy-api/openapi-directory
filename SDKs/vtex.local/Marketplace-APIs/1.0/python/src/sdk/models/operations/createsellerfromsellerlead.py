"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class CreateSellerFromSellerLeadRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    account_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'accountName', 'style': 'form', 'explode': True }})
    r"""Marketplace's account name, the same one inputted on the endpoint's path."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    environment: str = dataclasses.field(metadata={'query_param': { 'field_name': 'environment', 'style': 'form', 'explode': True }})
    r"""Environment to use. Used as part of the URL."""  
    is_active: bool = dataclasses.field(metadata={'query_param': { 'field_name': 'isActive', 'style': 'form', 'explode': True }})
    r"""Whether the Seller Lead is `active` or not in Seller Portal. This request only supports the value `false` in this field. If thatÂ´s not the case, the request will respond with an internal error."""  
    seller_lead_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'sellerLeadId', 'style': 'simple', 'explode': False }})
    r"""ID of the Seller Lead invited to the marketplace."""  
    

@dataclasses.dataclass
class CreateSellerFromSellerLeadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    