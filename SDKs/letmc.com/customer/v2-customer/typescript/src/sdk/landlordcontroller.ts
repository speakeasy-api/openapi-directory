/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class LandlordController {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Post tenancy maintenance preferences:-
   */
  landlordControllerCreateMaintenancePreference(
    req: operations.LandlordControllerCreateMaintenancePreferenceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerCreateMaintenancePreferenceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerCreateMaintenancePreferenceRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/tenancy/maintenance/preference",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerCreateMaintenancePreferenceResponse =
        new operations.LandlordControllerCreateMaintenancePreferenceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordControllerCreateMaintenancePreference200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.landlordControllerCreateMaintenancePreference200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordControllerCreateMaintenancePreference200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.landlordControllerCreateMaintenancePreference200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the accounting details for the landlord.
   */
  landlordControllerGetAccounts(
    req: operations.LandlordControllerGetAccountsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetAccountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetAccountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/accounting",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetAccountsResponse =
        new operations.LandlordControllerGetAccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordAccountingModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordAccountingModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordAccountingModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordAccountingModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Download a Document
   */
  landlordControllerGetDocument(
    req: operations.LandlordControllerGetDocumentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetDocumentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/document",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetDocumentResponse =
        new operations.LandlordControllerGetDocumentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate a Inventory PDF for a tenancy
   */
  landlordControllerGetInvetoryReport(
    req: operations.LandlordControllerGetInvetoryReportRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetInvetoryReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetInvetoryReportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/inventory",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetInvetoryReportResponse =
        new operations.LandlordControllerGetInvetoryReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an invoice pdf belonging to the landlord.
   */
  landlordControllerGetInvoice(
    req: operations.LandlordControllerGetInvoiceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetInvoiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetInvoiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/invoice",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetInvoiceResponse =
        new operations.LandlordControllerGetInvoiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve landlord's CRM ID
   */
  landlordControllerGetLandlordCrmEntries(
    req: operations.LandlordControllerGetLandlordCrmEntriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetLandlordCrmEntriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetLandlordCrmEntriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/landlordcrmentries",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetLandlordCrmEntriesResponse =
        new operations.LandlordControllerGetLandlordCrmEntriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordCrmEntries = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.landlordCrmEntries = utils.objectToClass(
              httpRes?.data,
              shared.LandlordCrmEntry,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordCrmEntries = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.landlordCrmEntries = utils.objectToClass(
              httpRes?.data,
              shared.LandlordCrmEntry,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Active maintenance jobs.
   */
  landlordControllerGetMaintenanceJobs(
    req: operations.LandlordControllerGetMaintenanceJobsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetMaintenanceJobsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetMaintenanceJobsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/maintenance",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetMaintenanceJobsResponse =
        new operations.LandlordControllerGetMaintenanceJobsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordMaintenanceModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordMaintenanceModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordMaintenanceModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordMaintenanceModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate a Profit and Loss Report
   */
  landlordControllerGetProfitLossReport(
    req: operations.LandlordControllerGetProfitLossReportRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetProfitLossReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetProfitLossReportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/profitloss",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetProfitLossReportResponse =
        new operations.LandlordControllerGetProfitLossReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordProfitLossModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordProfitLossModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordProfitLossModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordProfitLossModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rent Arrears
   */
  landlordControllerGetRentArrears(
    req: operations.LandlordControllerGetRentArrearsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetRentArrearsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetRentArrearsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/rentarrears",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetRentArrearsResponse =
        new operations.LandlordControllerGetRentArrearsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordRentArrearsModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordRentArrearsModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordRentArrearsModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordRentArrearsModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate a Self Assessment Tax Report
   */
  landlordControllerGetSASReport(
    req: operations.LandlordControllerGetSASReportRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetSASReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetSASReportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/sas",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetSASReportResponse =
        new operations.LandlordControllerGetSASReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get contact details of all linked landlords.
   */
  landlordControllerGetSettings(
    req: operations.LandlordControllerGetSettingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/settings",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetSettingsResponse =
        new operations.LandlordControllerGetSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordSettingsModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordSettingsModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordSettingsModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordSettingsModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the summary details for the landlord.
   */
  landlordControllerGetSummaryDetails(
    req: operations.LandlordControllerGetSummaryDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetSummaryDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetSummaryDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/summary",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetSummaryDetailsResponse =
        new operations.LandlordControllerGetSummaryDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordSummaryModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordSummaryModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordSummaryModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordSummaryModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get tenancy details.
   */
  landlordControllerGetTenancy(
    req: operations.LandlordControllerGetTenancyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetTenancyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetTenancyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/tenancy",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetTenancyResponse =
        new operations.LandlordControllerGetTenancyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.landlordTenancyModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordTenancyModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.landlordTenancyModel = utils.objectToClass(
              httpRes?.data,
              shared.LandlordTenancyModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate a Tenancy Agreement Copy (PDF)
   */
  landlordControllerGetTenancyAgreementReport(
    req: operations.LandlordControllerGetTenancyAgreementReportRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LandlordControllerGetTenancyAgreementReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LandlordControllerGetTenancyAgreementReportRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/landlord/tenancyagreement",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LandlordControllerGetTenancyAgreementReportResponse =
        new operations.LandlordControllerGetTenancyAgreementReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.object = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
