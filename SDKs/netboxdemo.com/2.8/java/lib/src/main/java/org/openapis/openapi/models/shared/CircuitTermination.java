/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CircuitTermination {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cable")
    public NestedCable cable;
    public CircuitTermination withCable(NestedCable cable) {
        this.cable = cable;
        return this;
    }
    
    @JsonProperty("circuit")
    public NestedCircuit circuit;
    public CircuitTermination withCircuit(NestedCircuit circuit) {
        this.circuit = circuit;
        return this;
    }
    
    /**
     * Return the appropriate serializer for the type of connected object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connected_endpoint")
    public java.util.Map<String, String> connectedEndpoint;
    public CircuitTermination withConnectedEndpoint(java.util.Map<String, String> connectedEndpoint) {
        this.connectedEndpoint = connectedEndpoint;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connected_endpoint_type")
    public String connectedEndpointType;
    public CircuitTermination withConnectedEndpointType(String connectedEndpointType) {
        this.connectedEndpointType = connectedEndpointType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_status")
    public CircuitTerminationConnectionStatus connectionStatus;
    public CircuitTermination withConnectionStatus(CircuitTerminationConnectionStatus connectionStatus) {
        this.connectionStatus = connectionStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public CircuitTermination withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public CircuitTermination withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("port_speed")
    public Long portSpeed;
    public CircuitTermination withPortSpeed(Long portSpeed) {
        this.portSpeed = portSpeed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pp_info")
    public String ppInfo;
    public CircuitTermination withPpInfo(String ppInfo) {
        this.ppInfo = ppInfo;
        return this;
    }
    
    @JsonProperty("site")
    public NestedSite site;
    public CircuitTermination withSite(NestedSite site) {
        this.site = site;
        return this;
    }
    
    @JsonProperty("term_side")
    public CircuitTerminationTerminationEnum termSide;
    public CircuitTermination withTermSide(CircuitTerminationTerminationEnum termSide) {
        this.termSide = termSide;
        return this;
    }
    
    /**
     * Upstream speed, if different from port speed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upstream_speed")
    public Long upstreamSpeed;
    public CircuitTermination withUpstreamSpeed(Long upstreamSpeed) {
        this.upstreamSpeed = upstreamSpeed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xconnect_id")
    public String xconnectId;
    public CircuitTermination withXconnectId(String xconnectId) {
        this.xconnectId = xconnectId;
        return this;
    }
    
}
