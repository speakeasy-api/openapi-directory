"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImageCreateImageRequestLabels:
    r"""User-defined labels (key-value pairs)"""
    
    labelkey: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labelkey'), 'exclude': lambda f: f is None }})
    r"""New label"""  
    
class PostServersIDActionsCreateImageCreateImageRequestTypeEnum(str, Enum):
    r"""Type of Image to create (default: `snapshot`)"""
    SNAPSHOT = 'snapshot'
    BACKUP = 'backup'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImageCreateImageRequest:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Image, will be auto-generated if not set"""  
    labels: Optional[PostServersIDActionsCreateImageCreateImageRequestLabels] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    type: Optional[PostServersIDActionsCreateImageCreateImageRequestTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of Image to create (default: `snapshot`)"""  
    

@dataclasses.dataclass
class PostServersIDActionsCreateImageRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the Server"""  
    request_body: Optional[PostServersIDActionsCreateImageCreateImageRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImage201ApplicationJSONActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImage201ApplicationJSONActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImage201ApplicationJSONAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostServersIDActionsCreateImage201ApplicationJSONActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostServersIDActionsCreateImage201ApplicationJSONActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImage201ApplicationJSONImageCreatedFrom:
    r"""Information about the Server the Image was created from"""
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Server the Image was created from"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Server name at the time the Image was created"""  
    
class PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum(str, Enum):
    r"""Flavor of operating system contained in the Image"""
    UBUNTU = 'ubuntu'
    CENTOS = 'centos'
    DEBIAN = 'debian'
    FEDORA = 'fedora'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImage201ApplicationJSONImageProtection:
    r"""Protection configuration for the Resource"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Resource from being deleted"""  
    
class PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum(str, Enum):
    r"""Whether the Image can be used or if it's still being created or unavailable"""
    AVAILABLE = 'available'
    CREATING = 'creating'
    UNAVAILABLE = 'unavailable'

class PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum(str, Enum):
    r"""Type of the Image"""
    SYSTEM = 'system'
    APP = 'app'
    SNAPSHOT = 'snapshot'
    BACKUP = 'backup'
    TEMPORARY = 'temporary'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImage201ApplicationJSONImage:
    
    bound_to: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bound_to') }})
    r"""ID of Server the Image is bound to. Only set for Images of type `backup`."""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    created_from: PostServersIDActionsCreateImage201ApplicationJSONImageCreatedFrom = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_from') }})
    r"""Information about the Server the Image was created from"""  
    deleted: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted') }})
    r"""Point in time where the Image was deleted (in ISO-8601 format)"""  
    deprecated: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deprecated') }})
    r"""Point in time when the Image is considered to be deprecated (in ISO-8601 format)"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Image"""  
    disk_size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disk_size') }})
    r"""Size of the disk contained in the Image in GB"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    image_size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_size') }})
    r"""Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image."""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Image. This value is only set for system Images."""  
    os_flavor: PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_flavor') }})
    r"""Flavor of operating system contained in the Image"""  
    os_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_version') }})
    r"""Operating system version"""  
    protection: PostServersIDActionsCreateImage201ApplicationJSONImageProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Resource"""  
    status: PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Whether the Image can be used or if it's still being created or unavailable"""  
    type: PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the Image"""  
    rapid_deploy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rapid_deploy'), 'exclude': lambda f: f is None }})
    r"""Indicates that rapid deploy of the Image is available"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostServersIDActionsCreateImage201ApplicationJSON:
    r"""The `image` key in the reply contains an the created Image, which is an object with this structure
    
    The `action` key in the reply contains an Action object with this structure
    """
    
    action: Optional[PostServersIDActionsCreateImage201ApplicationJSONAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    image: Optional[PostServersIDActionsCreateImage201ApplicationJSONImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostServersIDActionsCreateImageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_servers_id_actions_create_image_201_application_json_object: Optional[PostServersIDActionsCreateImage201ApplicationJSON] = dataclasses.field(default=None)
    r"""The `image` key in the reply contains an the created Image, which is an object with this structure
    
    The `action` key in the reply contains an Action object with this structure
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    