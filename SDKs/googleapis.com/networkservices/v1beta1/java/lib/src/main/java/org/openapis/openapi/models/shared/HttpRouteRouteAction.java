/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HttpRouteRouteAction - The specifications for routing traffic and applying associated policies.
 */
public class HttpRouteRouteAction {
    /**
     * The Specification for allowing client side cross-origin requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corsPolicy")
    public HttpRouteCorsPolicy corsPolicy;

    public HttpRouteRouteAction withCorsPolicy(HttpRouteCorsPolicy corsPolicy) {
        this.corsPolicy = corsPolicy;
        return this;
    }
    
    /**
     * The destination to which traffic should be forwarded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinations")
    public HttpRouteDestination[] destinations;

    public HttpRouteRouteAction withDestinations(HttpRouteDestination[] destinations) {
        this.destinations = destinations;
        return this;
    }
    
    /**
     * The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("faultInjectionPolicy")
    public HttpRouteFaultInjectionPolicy faultInjectionPolicy;

    public HttpRouteRouteAction withFaultInjectionPolicy(HttpRouteFaultInjectionPolicy faultInjectionPolicy) {
        this.faultInjectionPolicy = faultInjectionPolicy;
        return this;
    }
    
    /**
     * The specification for redirecting traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect")
    public HttpRouteRedirect redirect;

    public HttpRouteRouteAction withRedirect(HttpRouteRedirect redirect) {
        this.redirect = redirect;
        return this;
    }
    
    /**
     * The specification for modifying HTTP header in HTTP request and HTTP response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestHeaderModifier")
    public HttpRouteHeaderModifier requestHeaderModifier;

    public HttpRouteRouteAction withRequestHeaderModifier(HttpRouteHeaderModifier requestHeaderModifier) {
        this.requestHeaderModifier = requestHeaderModifier;
        return this;
    }
    
    /**
     * Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestMirrorPolicy")
    public HttpRouteRequestMirrorPolicy requestMirrorPolicy;

    public HttpRouteRouteAction withRequestMirrorPolicy(HttpRouteRequestMirrorPolicy requestMirrorPolicy) {
        this.requestMirrorPolicy = requestMirrorPolicy;
        return this;
    }
    
    /**
     * The specification for modifying HTTP header in HTTP request and HTTP response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseHeaderModifier")
    public HttpRouteHeaderModifier responseHeaderModifier;

    public HttpRouteRouteAction withResponseHeaderModifier(HttpRouteHeaderModifier responseHeaderModifier) {
        this.responseHeaderModifier = responseHeaderModifier;
        return this;
    }
    
    /**
     * The specifications for retries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retryPolicy")
    public HttpRouteRetryPolicy retryPolicy;

    public HttpRouteRouteAction withRetryPolicy(HttpRouteRetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }
    
    /**
     * Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public String timeout;

    public HttpRouteRouteAction withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }
    
    /**
     * The specification for modifying the URL of the request, prior to forwarding the request to the destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlRewrite")
    public HttpRouteURLRewrite urlRewrite;

    public HttpRouteRouteAction withUrlRewrite(HttpRouteURLRewrite urlRewrite) {
        this.urlRewrite = urlRewrite;
        return this;
    }
    
    public HttpRouteRouteAction(){}
}
