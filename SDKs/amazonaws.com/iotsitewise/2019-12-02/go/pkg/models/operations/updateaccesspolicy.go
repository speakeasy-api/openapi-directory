// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateAccessPolicyPathParams struct {
	// The ID of the access policy.
	AccessPolicyID string `pathParam:"style=simple,explode=false,name=accessPolicyId"`
}

type UpdateAccessPolicyHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateAccessPolicyRequestBodyAccessPolicyIdentity - <p>Contains an identity that can access an IoT SiteWise Monitor resource.</p> <note> <p>Currently, you can't use Amazon Web Services APIs to retrieve IAM Identity Center identity IDs. You can find the IAM Identity Center identity IDs in the URL of user and group pages in the <a href="https://console.aws.amazon.com/singlesignon">IAM Identity Center console</a>.</p> </note>
type UpdateAccessPolicyRequestBodyAccessPolicyIdentity struct {
	Group   *shared.GroupIdentity   `json:"group,omitempty"`
	IamRole *shared.IAMRoleIdentity `json:"iamRole,omitempty"`
	IamUser *shared.IAMUserIdentity `json:"iamUser,omitempty"`
	User    *shared.UserIdentity    `json:"user,omitempty"`
}

// UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnum - The permission level for this access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.
type UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnum string

const (
	UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnumAdministrator UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnum = "ADMINISTRATOR"
	UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnumViewer        UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnum = "VIEWER"
)

func (e *UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ADMINISTRATOR":
		fallthrough
	case "VIEWER":
		*e = UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnum: %s", s)
	}
}

// UpdateAccessPolicyRequestBodyAccessPolicyResource - Contains an IoT SiteWise Monitor resource ID for a portal or project.
type UpdateAccessPolicyRequestBodyAccessPolicyResource struct {
	Portal  *shared.PortalResource  `json:"portal,omitempty"`
	Project *shared.ProjectResource `json:"project,omitempty"`
}

type UpdateAccessPolicyRequestBody struct {
	// <p>Contains an identity that can access an IoT SiteWise Monitor resource.</p> <note> <p>Currently, you can't use Amazon Web Services APIs to retrieve IAM Identity Center identity IDs. You can find the IAM Identity Center identity IDs in the URL of user and group pages in the <a href="https://console.aws.amazon.com/singlesignon">IAM Identity Center console</a>.</p> </note>
	AccessPolicyIdentity UpdateAccessPolicyRequestBodyAccessPolicyIdentity `json:"accessPolicyIdentity"`
	// The permission level for this access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.
	AccessPolicyPermission UpdateAccessPolicyRequestBodyAccessPolicyPermissionEnum `json:"accessPolicyPermission"`
	// Contains an IoT SiteWise Monitor resource ID for a portal or project.
	AccessPolicyResource UpdateAccessPolicyRequestBodyAccessPolicyResource `json:"accessPolicyResource"`
	// A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
	ClientToken *string `json:"clientToken,omitempty"`
}

type UpdateAccessPolicyRequest struct {
	PathParams UpdateAccessPolicyPathParams
	Headers    UpdateAccessPolicyHeaders
	Request    UpdateAccessPolicyRequestBody `request:"mediaType=application/json"`
}

type UpdateAccessPolicyResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateAccessPolicyResponse map[string]interface{}
}
