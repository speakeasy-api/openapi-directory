/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The direction to sort the result country states by.
 */
export enum GetCountryOrderEnum {
  Ascending = "ascending",
  Descending = "descending",
}

/**
 * The term to sort the result country states by.
 */
export enum GetCountrySortEnum {
  Key = "key",
  Label = "label",
}

export class GetCountryRequest extends SpeakeasyBase {
  /**
   * The country key
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=countryKey",
  })
  countryKey: string;

  /**
   * MarketId in which the request is being made, and for which responses should be localized
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=marketId",
  })
  marketId: string;

  /**
   * The direction to sort the result country states by.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: GetCountryOrderEnum;

  /**
   * The term to sort the result country states by.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetCountrySortEnum;
}

export class GetCountryResponse extends SpeakeasyBase {
  /**
   * Request was successful
   */
  @SpeakeasyMetadata({ elemType: shared.Country })
  arrayOfCountry?: shared.Country[];

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Country not found
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * Too many requests received within interval
   */
  @SpeakeasyMetadata()
  errorLimit?: shared.ErrorLimit;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
