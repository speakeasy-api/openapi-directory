"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://api.vonage.com/t/vbc.prod/provisioning",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Vonage Business Cloud Account API enables you to retrieve information about accounts.
    
    Your application must subscribe to the Provisioning API suite to use this API.
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def account_ctrl_get_account_services_by_account_id(self, request: operations.AccountCtrlGetAccountServicesByAccountIDRequest, security: operations.AccountCtrlGetAccountServicesByAccountIDSecurity) -> operations.AccountCtrlGetAccountServicesByAccountIDResponse:
        r"""Get account data by ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountCtrlGetAccountServicesByAccountIDRequest, base_url, '/api/accounts/{account_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountCtrlGetAccountServicesByAccountIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountHalResponse])
                res.account_hal_response = out
        elif http_res.status_code == 404:
            pass

        return res

    def account_ctrl_get_location_by_id(self, request: operations.AccountCtrlGetLocationByIDRequest, security: operations.AccountCtrlGetLocationByIDSecurity) -> operations.AccountCtrlGetLocationByIDResponse:
        r"""Get location data by account ID and location ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountCtrlGetLocationByIDRequest, base_url, '/api/accounts/{account_id}/locations/{location_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountCtrlGetLocationByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LocationHalResponse])
                res.location_hal_response = out
        elif http_res.status_code == 404:
            pass

        return res

    def account_ctrl_get_locations_by_account_id(self, request: operations.AccountCtrlGetLocationsByAccountIDRequest, security: operations.AccountCtrlGetLocationsByAccountIDSecurity) -> operations.AccountCtrlGetLocationsByAccountIDResponse:
        r"""Get account locations data by account ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountCtrlGetLocationsByAccountIDRequest, base_url, '/api/accounts/{account_id}/locations', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountCtrlGetLocationsByAccountIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LocationsHalResponse])
                res.locations_hal_response = out

        return res

    