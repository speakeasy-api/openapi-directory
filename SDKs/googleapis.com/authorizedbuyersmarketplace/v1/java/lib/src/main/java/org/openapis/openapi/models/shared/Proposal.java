/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Proposal - Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer.
 */
public class Proposal {
    /**
     * Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billedBuyer")
    public String billedBuyer;

    public Proposal withBilledBuyer(String billedBuyer) {
        this.billedBuyer = billedBuyer;
        return this;
    }
    
    /**
     * Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    public String buyer;

    public Proposal withBuyer(String buyer) {
        this.buyer = buyer;
        return this;
    }
    
    /**
     * Contact information for the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyerContacts")
    public Contact[] buyerContacts;

    public Proposal withBuyerContacts(Contact[] buyerContacts) {
        this.buyerContacts = buyerContacts;
        return this;
    }
    
    /**
     * Buyers are allowed to store certain types of private data in a proposal or deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyerPrivateData")
    public PrivateData buyerPrivateData;

    public Proposal withBuyerPrivateData(PrivateData buyerPrivateData) {
        this.buyerPrivateData = buyerPrivateData;
        return this;
    }
    
    /**
     * Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client")
    public String client;

    public Proposal withClient(String client) {
        this.client = client;
        return this;
    }
    
    /**
     * Output only. Type of deal the proposal contains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dealType")
    public ProposalDealTypeEnum dealType;

    public Proposal withDealType(ProposalDealTypeEnum dealType) {
        this.dealType = dealType;
        return this;
    }
    
    /**
     * Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Proposal withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Output only. True if the proposal was previously finalized and is now being renegotiated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRenegotiating")
    public Boolean isRenegotiating;

    public Proposal withIsRenegotiating(Boolean isRenegotiating) {
        this.isRenegotiating = isRenegotiating;
        return this;
    }
    
    /**
     * Output only. The role of the last user that either updated the proposal or left a comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdaterOrCommentorRole")
    public ProposalLastUpdaterOrCommentorRoleEnum lastUpdaterOrCommentorRole;

    public Proposal withLastUpdaterOrCommentorRole(ProposalLastUpdaterOrCommentorRoleEnum lastUpdaterOrCommentorRole) {
        this.lastUpdaterOrCommentorRole = lastUpdaterOrCommentorRole;
        return this;
    }
    
    /**
     * Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Proposal withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A list of notes from the buyer and the seller attached to this proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public Note[] notes;

    public Proposal withNotes(Note[] notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Output only. Indicates whether the buyer/seller created the proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originatorRole")
    public ProposalOriginatorRoleEnum originatorRole;

    public Proposal withOriginatorRole(ProposalOriginatorRoleEnum originatorRole) {
        this.originatorRole = originatorRole;
        return this;
    }
    
    /**
     * Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pausingConsented")
    public Boolean pausingConsented;

    public Proposal withPausingConsented(Boolean pausingConsented) {
        this.pausingConsented = pausingConsented;
        return this;
    }
    
    /**
     * Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proposalRevision")
    public String proposalRevision;

    public Proposal withProposalRevision(String proposalRevision) {
        this.proposalRevision = proposalRevision;
        return this;
    }
    
    /**
     * Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisherProfile")
    public String publisherProfile;

    public Proposal withPublisherProfile(String publisherProfile) {
        this.publisherProfile = publisherProfile;
        return this;
    }
    
    /**
     * Output only. Contact information for the seller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellerContacts")
    public Contact[] sellerContacts;

    public Proposal withSellerContacts(Contact[] sellerContacts) {
        this.sellerContacts = sellerContacts;
        return this;
    }
    
    /**
     * Output only. Indicates the state of the proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ProposalStateEnum state;

    public Proposal withState(ProposalStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termsAndConditions")
    public String termsAndConditions;

    public Proposal withTermsAndConditions(String termsAndConditions) {
        this.termsAndConditions = termsAndConditions;
        return this;
    }
    
    /**
     * Output only. The time when the proposal was last revised.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Proposal withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public Proposal(){}
}
