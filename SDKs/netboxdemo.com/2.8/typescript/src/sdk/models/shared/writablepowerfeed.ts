/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export enum WritablePowerFeedPhaseEnum {
  SinglePhase = "single-phase",
  ThreePhase = "three-phase",
}

export enum WritablePowerFeedStatusEnum {
  Offline = "offline",
  Active = "active",
  Planned = "planned",
  Failed = "failed",
}

export enum WritablePowerFeedSupplyEnum {
  Ac = "ac",
  Dc = "dc",
}

export enum WritablePowerFeedTypeEnum {
  Primary = "primary",
  Redundant = "redundant",
}

export class WritablePowerFeedInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amperage" })
  amperage?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "custom_fields" })
  customFields?: Record<string, any>;

  /**
   * Maximum permissible draw (percentage)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max_utilization" })
  maxUtilization?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phase" })
  phase?: WritablePowerFeedPhaseEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "power_panel" })
  powerPanel: number;

  @SpeakeasyMetadata()
  @Expose({ name: "rack" })
  rack?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: WritablePowerFeedStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "supply" })
  supply?: WritablePowerFeedSupplyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: WritablePowerFeedTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "voltage" })
  voltage?: number;
}
