/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Service - A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible.
 */
public class Service {
    /**
     * App Engine service. Learn more at https://cloud.google.com/appengine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appEngine")
    public AppEngine appEngine;
    public Service withAppEngine(AppEngine appEngine) {
        this.appEngine = appEngine;
        return this;
    }
    
    /**
     * A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("basicService")
    public BasicService basicService;
    public Service withBasicService(BasicService basicService) {
        this.basicService = basicService;
        return this;
    }
    
    /**
     * Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudEndpoints")
    public CloudEndpoints cloudEndpoints;
    public Service withCloudEndpoints(CloudEndpoints cloudEndpoints) {
        this.cloudEndpoints = cloudEndpoints;
        return this;
    }
    
    /**
     * Cloud Run service. Learn more at https://cloud.google.com/run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudRun")
    public CloudRun cloudRun;
    public Service withCloudRun(CloudRun cloudRun) {
        this.cloudRun = cloudRun;
        return this;
    }
    
    /**
     * Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterIstio")
    public ClusterIstio clusterIstio;
    public Service withClusterIstio(ClusterIstio clusterIstio) {
        this.clusterIstio = clusterIstio;
        return this;
    }
    
    /**
     * Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom")
    public java.util.Map<String, Object> custom;
    public Service withCustom(java.util.Map<String, Object> custom) {
        this.custom = custom;
        return this;
    }
    
    /**
     * Name used for UI elements listing this Service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Service withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gkeNamespace")
    public GkeNamespace gkeNamespace;
    public Service withGkeNamespace(GkeNamespace gkeNamespace) {
        this.gkeNamespace = gkeNamespace;
        return this;
    }
    
    /**
     * GKE Service. The "service" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gkeService")
    public GkeService gkeService;
    public Service withGkeService(GkeService gkeService) {
        this.gkeService = gkeService;
        return this;
    }
    
    /**
     * A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gkeWorkload")
    public GkeWorkload gkeWorkload;
    public Service withGkeWorkload(GkeWorkload gkeWorkload) {
        this.gkeWorkload = gkeWorkload;
        return this;
    }
    
    /**
     * Canonical service scoped to an Istio mesh. Anthos clusters running ASM &gt;= 1.6.8 will have their services ingested as this type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("istioCanonicalService")
    public IstioCanonicalService istioCanonicalService;
    public Service withIstioCanonicalService(IstioCanonicalService istioCanonicalService) {
        this.istioCanonicalService = istioCanonicalService;
        return this;
    }
    
    /**
     * Istio service scoped to an Istio mesh. Anthos clusters running ASM &lt; 1.6.8 will have their services ingested as this type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meshIstio")
    public MeshIstio meshIstio;
    public Service withMeshIstio(MeshIstio meshIstio) {
        this.meshIstio = meshIstio;
        return this;
    }
    
    /**
     * Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Service withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Configuration for how to query telemetry on a Service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telemetry")
    public Telemetry telemetry;
    public Service withTelemetry(Telemetry telemetry) {
        this.telemetry = telemetry;
        return this;
    }
    
    /**
     * Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userLabels")
    public java.util.Map<String, String> userLabels;
    public Service withUserLabels(java.util.Map<String, String> userLabels) {
        this.userLabels = userLabels;
        return this;
    }
    
}
