/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * JobSpecification - Specifies details of the jobs to be created on a schedule.
 */
public class JobSpecification {
    /**
     * A list of common environment variable settings. These environment variables are set for all tasks in jobs created under this schedule (including the Job Manager, Job Preparation and Job Release tasks).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonEnvironmentSettings")
    public EnvironmentSetting[] commonEnvironmentSettings;

    public JobSpecification withCommonEnvironmentSettings(EnvironmentSetting[] commonEnvironmentSettings) {
        this.commonEnvironmentSettings = commonEnvironmentSettings;
        return this;
    }
    
    /**
     * Specifies the execution constraints for jobs created on a schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraints")
    public JobConstraints constraints;

    public JobSpecification withConstraints(JobConstraints constraints) {
        this.constraints = constraints;
        return this;
    }
    
    /**
     * The display name for jobs created under this schedule. It need not be unique and can contain any Unicode characters up to a maximum length of 1024.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public JobSpecification withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Specifies details of a Job Manager task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobManagerTask")
    public JobManagerTask jobManagerTask;

    public JobSpecification withJobManagerTask(JobManagerTask jobManagerTask) {
        this.jobManagerTask = jobManagerTask;
        return this;
    }
    
    /**
     * A Job Preparation task to run before any tasks of the job on any given compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobPreparationTask")
    public JobPreparationTask jobPreparationTask;

    public JobSpecification withJobPreparationTask(JobPreparationTask jobPreparationTask) {
        this.jobPreparationTask = jobPreparationTask;
        return this;
    }
    
    /**
     * A Job Release task to run on job completion on any compute node where the job has run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobReleaseTask")
    public JobReleaseTask jobReleaseTask;

    public JobSpecification withJobReleaseTask(JobReleaseTask jobReleaseTask) {
        this.jobReleaseTask = jobReleaseTask;
        return this;
    }
    
    /**
     * A list of name-value pairs associated with each job created under this schedule as metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public MetadataItem[] metadata;

    public JobSpecification withMetadata(MetadataItem[] metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Specifies how a job should be assigned to a pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poolInfo")
    public PoolInformation poolInfo;

    public JobSpecification withPoolInfo(PoolInformation poolInfo) {
        this.poolInfo = poolInfo;
        return this;
    }
    
    /**
     * The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Integer priority;

    public JobSpecification withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * The flag that determines if this job will use tasks with dependencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usesTaskDependencies")
    public Boolean usesTaskDependencies;

    public JobSpecification withUsesTaskDependencies(Boolean usesTaskDependencies) {
        this.usesTaskDependencies = usesTaskDependencies;
        return this;
    }
    
    public JobSpecification(){}
}
