"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import artifactsource as shared_artifactsource
from ..shared import metadataproperties as shared_metadataproperties
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateArtifactRequest:
    
    artifact_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArtifactType') }})  
    source: shared_artifactsource.ArtifactSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Source') }})  
    artifact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArtifactName'), 'exclude': lambda f: f is None }})  
    metadata_properties: Optional[shared_metadataproperties.MetadataProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetadataProperties'), 'exclude': lambda f: f is None }})
    r"""Metadata properties of the tracking entity, trial, or trial component."""  
    properties: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Properties'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    