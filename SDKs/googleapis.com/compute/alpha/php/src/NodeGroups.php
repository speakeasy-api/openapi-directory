<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class NodeGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds specified number of nodes to the node group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesResponse
     */
	public function computeNodeGroupsAddNodes(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeGroupsAddNodesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAddNodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListResponse
     */
	public function computeNodeGroupsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/nodeGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeGroupAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeGroupAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified NodeGroup resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteResponse
     */
	public function computeNodeGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes specified nodes from the node group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesResponse
     */
	public function computeNodeGroupsDeleteNodes(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeGroupsDeleteNodesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsDeleteNodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetResponse
     */
	public function computeNodeGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicyResponse
     */
	public function computeNodeGroupsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a NodeGroup resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertResponse
     */
	public function computeNodeGroupsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeGroup", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListResponse
     */
	public function computeNodeGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeGroupList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists nodes in the node group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesResponse
     */
	public function computeNodeGroupsListNodes(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsListNodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeGroupsListNodes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeGroupsListNodes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified node group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchResponse
     */
	public function computeNodeGroupsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeGroup1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Perform maintenance on a subset of nodes in the node group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceResponse
     */
	public function computeNodeGroupsPerformMaintenance(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/performMaintenance', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeGroupsPerformMaintenanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsPerformMaintenanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicyResponse
     */
	public function computeNodeGroupsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the node template of the node group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateResponse
     */
	public function computeNodeGroupsSetNodeTemplate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeGroupsSetNodeTemplateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSetNodeTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Simulates maintenance event on specified nodes from the node group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventResponse
     */
	public function computeNodeGroupsSimulateMaintenanceEvent(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/simulateMaintenanceEvent', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeGroupsSimulateMaintenanceEventRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsSimulateMaintenanceEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsResponse
     */
	public function computeNodeGroupsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGroupsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}