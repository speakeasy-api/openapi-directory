/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Api - An Api is a top-level description of an API. Apis are produced by producers and are commitments to provide services.
 */
public class Api {
    /**
     * Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public java.util.Map<String, String> annotations;
    public Api withAnnotations(java.util.Map<String, String> annotations) {
        this.annotations = annotations;
        return this;
    }
    
    /**
     * A user-definable description of the availability of this service. Format: free-form, but we expect single words that describe availability, e.g. "NONE", "TESTING", "PREVIEW", "GENERAL", "DEPRECATED", "SHUTDOWN".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availability")
    public String availability;
    public Api withAvailability(String availability) {
        this.availability = availability;
        return this;
    }
    
    /**
     * Output only. Creation timestamp.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createTime")
    public OffsetDateTime createTime;
    public Api withCreateTime(OffsetDateTime createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * A detailed description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Api withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Human-meaningful name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Api withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "apigeeregistry.googleapis.com/" and cannot be changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Api withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Resource name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Api withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The recommended deployment of the API. Format: apis/{api}/deployments/{deployment}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recommendedDeployment")
    public String recommendedDeployment;
    public Api withRecommendedDeployment(String recommendedDeployment) {
        this.recommendedDeployment = recommendedDeployment;
        return this;
    }
    
    /**
     * The recommended version of the API. Format: apis/{api}/versions/{version}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recommendedVersion")
    public String recommendedVersion;
    public Api withRecommendedVersion(String recommendedVersion) {
        this.recommendedVersion = recommendedVersion;
        return this;
    }
    
    /**
     * Output only. Last update timestamp.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updateTime")
    public OffsetDateTime updateTime;
    public Api withUpdateTime(OffsetDateTime updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
