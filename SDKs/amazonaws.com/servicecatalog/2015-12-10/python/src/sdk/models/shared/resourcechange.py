"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import changeaction_enum as shared_changeaction_enum
from ..shared import replacement_enum as shared_replacement_enum
from ..shared import resourceattribute_enum as shared_resourceattribute_enum
from ..shared import resourcechangedetail as shared_resourcechangedetail
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceChange:
    r"""Information about a resource change that will occur when a plan is executed."""
    
    action: Optional[shared_changeaction_enum.ChangeActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Action'), 'exclude': lambda f: f is None }})  
    details: Optional[list[shared_resourcechangedetail.ResourceChangeDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Details'), 'exclude': lambda f: f is None }})  
    logical_resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogicalResourceId'), 'exclude': lambda f: f is None }})  
    physical_resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PhysicalResourceId'), 'exclude': lambda f: f is None }})  
    replacement: Optional[shared_replacement_enum.ReplacementEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Replacement'), 'exclude': lambda f: f is None }})  
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceType'), 'exclude': lambda f: f is None }})  
    scope: Optional[list[shared_resourceattribute_enum.ResourceAttributeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Scope'), 'exclude': lambda f: f is None }})  
    