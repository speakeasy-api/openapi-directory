// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostSpacesSpaceIDFoldersIDOtherTaxesJSONSecurity struct {
	GmaAuth shared.SchemeGmaAuth `security:"scheme,type=oauth2"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesJSONPathParams struct {
	// Id of the folder tax contract
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2Accounting struct {
	AccountedOn *string                                                                     `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                     `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2 struct {
	Accounting      *PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Amount          *float32                                                        `json:"Amount,omitempty"`
	Author          *string                                                         `json:"Author,omitempty"`
	Code            *string                                                         `json:"Code,omitempty"`
	Comment         *string                                                         `json:"Comment,omitempty"`
	Date            *string                                                         `json:"Date,omitempty"`
	DeclarationDate *string                                                         `json:"DeclarationDate,omitempty"`
	File            PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2File        `json:"File"`
	Reference       *string                                                         `json:"Reference,omitempty"`
	Title           string                                                          `json:"Title"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1 struct {
	Amount          *float32 `json:"Amount,omitempty"`
	DeclarationDate *string  `json:"DeclarationDate,omitempty"`
	DocumentID      string   `json:"DocumentId"`
	Reference       *string  `json:"Reference,omitempty"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONTypePostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1 PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/other-taxes_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONTypePostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2 PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/other-taxes_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1 *PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1
	PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2 *PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONPostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1(postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1 PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1) PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONTypePostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1

	return PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON{
		PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1: &postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONPostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2(postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2 PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2) PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONTypePostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2

	return PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON{
		PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2: &postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1 = postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONTypePostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2 = postSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSONTypePostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDOtherTaxesJSONRequest struct {
	PathParams PostSpacesSpaceIDFoldersIDOtherTaxesJSONPathParams
	// Other tax declaration to add (either (Reference,DocumentId) either (File,Name,Content64Encoded,Title,Reference) is mandatory)
	Request  PostSpacesSpaceIDFoldersIDOtherTaxesApplicationJSON `request:"mediaType=application/json"`
	Security PostSpacesSpaceIDFoldersIDOtherTaxesJSONSecurity
}

// PostSpacesSpaceIDFoldersIDOtherTaxesJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDOtherTaxesJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDOtherTaxesJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDOtherTaxesJSON201ApplicationJSON
}
