/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DeliveryTime } from "./deliverytime";
import { MinimumOrderValueTable } from "./minimumordervaluetable";
import { PickupCarrierService } from "./pickupcarrierservice";
import { Price } from "./price";
import { RateGroup } from "./rategroup";
import { Expose, Type } from "class-transformer";

export class Service extends SpeakeasyBase {
  /**
   * A boolean exposing the active status of the shipping service. Required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: string;

  /**
   * The CLDR territory code of the country to which the service applies. Required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deliveryCountry" })
  deliveryCountry?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deliveryTime" })
  @Type(() => DeliveryTime)
  deliveryTime?: DeliveryTime;

  /**
   * Eligibility for this service. Acceptable values are: - "`All scenarios`" - "`All scenarios except Shopping Actions`" - "`Shopping Actions`"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eligibility" })
  eligibility?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "minimumOrderValue" })
  @Type(() => Price)
  minimumOrderValue?: Price;

  @SpeakeasyMetadata()
  @Expose({ name: "minimumOrderValueTable" })
  @Type(() => MinimumOrderValueTable)
  minimumOrderValueTable?: MinimumOrderValueTable;

  /**
   * Free-form name of the service. Must be unique within target account. Required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pickupService" })
  @Type(() => PickupCarrierService)
  pickupService?: PickupCarrierService;

  /**
   * Shipping rate group definitions. Only the last one is allowed to have an empty `applicableShippingLabels`, which means "everything else". The other `applicableShippingLabels` must not overlap.
   */
  @SpeakeasyMetadata({ elemType: RateGroup })
  @Expose({ name: "rateGroups" })
  @Type(() => RateGroup)
  rateGroups?: RateGroup[];

  /**
   * Type of locations this service ships orders to. Acceptable values are: - "`delivery`" - "`pickup`"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shipmentType" })
  shipmentType?: string;
}
