/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateCreate - The certificate order information
 */
public class CertificateCreate {
    /**
     * Required if client would like to receive stateful actions via callback during certificate lifecyle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackUrl")
    public String callbackUrl;
    public CertificateCreate withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * Name to be secured in certificate. If provided, CN field in CSR will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonName")
    public String commonName;
    public CertificateCreate withCommonName(String commonName) {
        this.commonName = commonName;
        return this;
    }
    
    @JsonProperty("contact")
    public CertificateContact contact;
    public CertificateCreate withContact(CertificateContact contact) {
        this.contact = contact;
        return this;
    }
    
    /**
     * Certificate Signing Request
     */
    @JsonProperty("csr")
    public String csr;
    public CertificateCreate withCsr(String csr) {
        this.csr = csr;
        return this;
    }
    
    /**
     * Only used for OV
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intelVPro")
    public Boolean intelVPro;
    public CertificateCreate withIntelVPro(Boolean intelVPro) {
        this.intelVPro = intelVPro;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public CertificateOrganizationCreate organization;
    public CertificateCreate withOrganization(CertificateOrganizationCreate organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * Number of years for certificate validity period
     */
    @JsonProperty("period")
    public Long period;
    public CertificateCreate withPeriod(Long period) {
        this.period = period;
        return this;
    }
    
    /**
     * Type of product requesting a certificate. Only required non-renewal
     */
    @JsonProperty("productType")
    public CertificateCreateProductTypeEnum productType;
    public CertificateCreate withProductType(CertificateCreateProductTypeEnum productType) {
        this.productType = productType;
        return this;
    }
    
    /**
     * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rootType")
    public CertificateCreateRootTypeEnum rootType;
    public CertificateCreate withRootType(CertificateCreateRootTypeEnum rootType) {
        this.rootType = rootType;
        return this;
    }
    
    /**
     * Number of subject alternative names(SAN) to be included in certificate 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slotSize")
    public CertificateCreateSlotSizeEnum slotSize;
    public CertificateCreate withSlotSize(CertificateCreateSlotSizeEnum slotSize) {
        this.slotSize = slotSize;
        return this;
    }
    
    /**
     * Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectAlternativeNames")
    public String[] subjectAlternativeNames;
    public CertificateCreate withSubjectAlternativeNames(String[] subjectAlternativeNames) {
        this.subjectAlternativeNames = subjectAlternativeNames;
        return this;
    }
    
}
