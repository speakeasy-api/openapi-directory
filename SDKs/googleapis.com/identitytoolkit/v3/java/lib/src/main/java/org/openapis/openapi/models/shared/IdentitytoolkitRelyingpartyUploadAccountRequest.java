/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IdentitytoolkitRelyingpartyUploadAccountRequest - Request to upload user account in batch.
 */
public class IdentitytoolkitRelyingpartyUploadAccountRequest {
    /**
     * Whether allow overwrite existing account when user local_id exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowOverwrite")
    public Boolean allowOverwrite;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withAllowOverwrite(Boolean allowOverwrite) {
        this.allowOverwrite = allowOverwrite;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockSize")
    public Integer blockSize;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withBlockSize(Integer blockSize) {
        this.blockSize = blockSize;
        return this;
    }
    
    /**
     * The following 4 fields are for standard scrypt algorithm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuMemCost")
    public Integer cpuMemCost;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withCpuMemCost(Integer cpuMemCost) {
        this.cpuMemCost = cpuMemCost;
        return this;
    }
    
    /**
     * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delegatedProjectNumber")
    public String delegatedProjectNumber;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withDelegatedProjectNumber(String delegatedProjectNumber) {
        this.delegatedProjectNumber = delegatedProjectNumber;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dkLen")
    public Integer dkLen;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withDkLen(Integer dkLen) {
        this.dkLen = dkLen;
        return this;
    }
    
    /**
     * The password hash algorithm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hashAlgorithm")
    public String hashAlgorithm;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withHashAlgorithm(String hashAlgorithm) {
        this.hashAlgorithm = hashAlgorithm;
        return this;
    }
    
    /**
     * Memory cost for hash calculation. Used by scrypt similar algorithms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryCost")
    public Integer memoryCost;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withMemoryCost(Integer memoryCost) {
        this.memoryCost = memoryCost;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parallelization")
    public Integer parallelization;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withParallelization(Integer parallelization) {
        this.parallelization = parallelization;
        return this;
    }
    
    /**
     * Rounds for hash calculation. Used by scrypt and similar algorithms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rounds")
    public Integer rounds;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withRounds(Integer rounds) {
        this.rounds = rounds;
        return this;
    }
    
    /**
     * The salt separator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("saltSeparator")
    public String saltSeparator;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withSaltSeparator(String saltSeparator) {
        this.saltSeparator = saltSeparator;
        return this;
    }
    
    /**
     * If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sanityCheck")
    public Boolean sanityCheck;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withSanityCheck(Boolean sanityCheck) {
        this.sanityCheck = sanityCheck;
        return this;
    }
    
    /**
     * The key for to hash the password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signerKey")
    public String signerKey;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withSignerKey(String signerKey) {
        this.signerKey = signerKey;
        return this;
    }
    
    /**
     * Specify which project (field value is actually project id) to operate. Only used when provided credential.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetProjectId")
    public String targetProjectId;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withTargetProjectId(String targetProjectId) {
        this.targetProjectId = targetProjectId;
        return this;
    }
    
    /**
     * The account info to be stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    public UserInfo[] users;

    public IdentitytoolkitRelyingpartyUploadAccountRequest withUsers(UserInfo[] users) {
        this.users = users;
        return this;
    }
    
    public IdentitytoolkitRelyingpartyUploadAccountRequest(){}
}
