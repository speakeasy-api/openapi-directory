"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import data as shared_data
from ..shared import type_enum1 as shared_type_enum1
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateCalendarEventResponseRequestDataAttributesResponseStatusEnum(str, Enum):
    r"""The response status for the attendee."""
    ACCEPTED = 'accepted'
    DECLINED = 'declined'
    TENTATIVE = 'tentative'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventResponseRequestDataAttributes:
    
    attendee: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attendee') }})
    r"""The attendee in the attendees list of the calendar event."""  
    response_status: CreateCalendarEventResponseRequestDataAttributesResponseStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_status') }})
    r"""The response status for the attendee."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventResponseRequestDataRelationshipsCalendarEvent:
    
    data: shared_data.Data = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventResponseRequestDataRelationshipsUser:
    
    data: shared_data.Data = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventResponseRequestDataRelationships:
    
    calendar_event: Optional[CreateCalendarEventResponseRequestDataRelationshipsCalendarEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendar_event'), 'exclude': lambda f: f is None }})  
    user: Optional[CreateCalendarEventResponseRequestDataRelationshipsUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventResponseRequestData:
    
    attributes: CreateCalendarEventResponseRequestDataAttributes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})  
    relationships: CreateCalendarEventResponseRequestDataRelationships = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships') }})  
    type: shared_type_enum1.TypeEnum1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventResponseRequest:
    
    data: CreateCalendarEventResponseRequestData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    