"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Products:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def products_delete(self, request: operations.ProductsDeleteRequest) -> operations.ProductsDeleteResponse:
        r"""Removes an existing Product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductsDeleteRequest, base_url, '/v1/products/{id}', request)
        
        query_params = utils.get_query_params(operations.ProductsDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.products_delete_200_application_json_object = out

        return res

    def products_get(self) -> operations.ProductsGetResponse:
        r"""Returns a list of company's Products. Supports OData querying protocol.
        Filtering is forbidden.
        Ordering is allowed by \\"id\\" and \\"stockCode\\" fields.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/products'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageResultProductDto])
                res.page_result_product_dto = out

        return res

    def products_post(self, request: shared.ProductDto) -> operations.ProductsPostResponse:
        r"""Creates a new Product."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/products'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductsPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.products_post_200_application_json_object = out

        return res

    def products_process_batch(self, request: list[shared.BatchItemProductDto]) -> operations.ProductsProcessBatchResponse:
        r"""Processes a batch of Products."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/products/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductsProcessBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.products_process_batch_200_application_json_object = out

        return res

    def products_put(self, request: operations.ProductsPutRequest) -> operations.ProductsPutResponse:
        r"""Updates an existing Product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductsPutRequest, base_url, '/v1/products/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "product_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductsPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.products_put_200_application_json_object = out

        return res

    def get_v1_products_id_(self, request: operations.GetV1ProductsIDRequest) -> operations.GetV1ProductsIDResponse:
        r"""Returns information about a single Product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV1ProductsIDRequest, base_url, '/v1/products/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV1ProductsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductDto])
                res.product_dto = out

        return res

    