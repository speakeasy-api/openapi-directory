/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ArtifactOutput - Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e. not for display in primary views of the resource but perhaps displayed or downloaded upon request. The ListArtifacts method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents.
 */
public class ArtifactOutput {
    /**
     * Output only. Creation timestamp.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createTime")
    public OffsetDateTime createTime;

    public ArtifactOutput withCreateTime(OffsetDateTime createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hash")
    public String hash;

    public ArtifactOutput withHash(String hash) {
        this.hash = hash;
        return this;
    }
    
    /**
     * A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    public String mimeType;

    public ArtifactOutput withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * Resource name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ArtifactOutput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sizeBytes")
    public Integer sizeBytes;

    public ArtifactOutput withSizeBytes(Integer sizeBytes) {
        this.sizeBytes = sizeBytes;
        return this;
    }
    
    /**
     * Output only. Last update timestamp.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updateTime")
    public OffsetDateTime updateTime;

    public ArtifactOutput withUpdateTime(OffsetDateTime updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public ArtifactOutput(){}
}
