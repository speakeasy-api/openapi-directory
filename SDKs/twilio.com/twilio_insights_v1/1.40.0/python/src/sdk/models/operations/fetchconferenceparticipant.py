"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import insights_v1_conference_conference_participant as shared_insights_v1_conference_conference_participant
from typing import Optional

FETCH_CONFERENCE_PARTICIPANT_SERVERS = [
	"https://insights.twilio.com",
]


@dataclasses.dataclass
class FetchConferenceParticipantSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class FetchConferenceParticipantRequest:
    
    conference_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ConferenceSid', 'style': 'simple', 'explode': False }})
    r"""The unique SID identifier of the Conference."""  
    participant_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ParticipantSid', 'style': 'simple', 'explode': False }})
    r"""The unique SID identifier of the Participant."""  
    events: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Events', 'style': 'form', 'explode': True }})
    r"""Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc."""  
    metrics: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Metrics', 'style': 'form', 'explode': True }})
    r"""Object. Contains participant call quality metrics."""  
    

@dataclasses.dataclass
class FetchConferenceParticipantResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    insights_v1_conference_conference_participant: Optional[shared_insights_v1_conference_conference_participant.InsightsV1ConferenceConferenceParticipant] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    