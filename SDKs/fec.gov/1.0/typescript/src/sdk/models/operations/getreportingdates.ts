/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetReportingDatesRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey: string;

  /**
   *
   * @remarks
   * The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_create_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxCreateDate?: Date;

  /**
   *
   * @remarks
   * The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_due_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxDueDate?: Date;

  /**
   *
   * @remarks
   * The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_update_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxUpdateDate?: Date;

  /**
   *
   * @remarks
   * The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_create_date;dateTimeFormat=YYYY-MM-DD",
  })
  minCreateDate?: Date;

  /**
   *
   * @remarks
   * The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_due_date;dateTimeFormat=YYYY-MM-DD",
  })
  minDueDate?: Date;

  /**
   *
   * @remarks
   * The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_update_date;dateTimeFormat=YYYY-MM-DD",
  })
  minUpdateDate?: Date;

  /**
   * For paginating through results, starting at page 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results returned per page. Defaults to 20.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Name of report where the underlying data comes from:
   *
   * @remarks
   *     - 10D Pre-Election
   *     - 10G Pre-General
   *     - 10P Pre-Primary
   *     - 10R Pre-Run-Off
   *     - 10S Pre-Special
   *     - 12C Pre-Convention
   *     - 12G Pre-General
   *     - 12P Pre-Primary
   *     - 12R Pre-Run-Off
   *     - 12S Pre-Special
   *     - 30D Post-Election
   *     - 30G Post-General
   *     - 30P Post-Primary
   *     - 30R Post-Run-Off
   *     - 30S Post-Special
   *     - 60D Post-Convention
   *     - M1  January Monthly
   *     - M10 October Monthly
   *     - M11 November Monthly
   *     - M12 December Monthly
   *     - M2  February Monthly
   *     - M3  March Monthly
   *     - M4  April Monthly
   *     - M5  May Monthly
   *     - M6  June Monthly
   *     - M7  July Monthly
   *     - M8  August Monthly
   *     - M9  September Monthly
   *     - MY  Mid-Year Report
   *     - Q1  April Quarterly
   *     - Q2  July Quarterly
   *     - Q3  October Quarterly
   *     - TER Termination Report
   *     - YE  Year-End
   *     - ADJ COMP ADJUST AMEND
   *     - CA  COMPREHENSIVE AMEND
   *     - 90S Post Inaugural Supplement
   *     - 90D Post Inaugural
   *     - 48  48 Hour Notification
   *     - 24  24 Hour Notification
   *     - M7S July Monthly/Semi-Annual
   *     - MSA Monthly Semi-Annual (MY)
   *     - MYS Monthly Year End/Semi-Annual
   *     - Q2S July Quarterly/Semi-Annual
   *     - QSA Quarterly Semi-Annual (MY)
   *     - QYS Quarterly Year End/Semi-Annual
   *     - QYE Quarterly Semi-Annual (YE)
   *     - QMS Quarterly Mid-Year/ Semi-Annual
   *     - MSY Monthly Semi-Annual (YE)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=report_type",
  })
  reportType?: string[];

  /**
   *
   * @remarks
   * Forms with coverage date -
   *     year from the coverage ending date.
   * Forms without coverage date -
   *     year from the receipt date.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=report_year",
  })
  reportYear?: number[];

  /**
   * Provide a field to sort by. Use `-` for descending order.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Hide null values on sorted column(s).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_hide_null",
  })
  sortHideNull?: boolean;

  /**
   * Toggle that filters out all rows having sort column that is non-null
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_null_only",
  })
  sortNullOnly?: boolean;

  /**
   * Toggle that sorts null values last
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_nulls_last",
  })
  sortNullsLast?: boolean;
}

export class GetReportingDatesDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => shared.OffsetInfo)
  pagination?: shared.OffsetInfo;

  @SpeakeasyMetadata({ elemType: shared.ReportDate })
  @Expose({ name: "results" })
  @Type(() => shared.ReportDate)
  results?: shared.ReportDate[];
}

export class GetReportingDatesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  @SpeakeasyMetadata()
  getReportingDatesDefaultApplicationJSONObject?: GetReportingDatesDefaultApplicationJSON;
}
