<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PrivateT 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Browse API documentation
     * 
     * Access api docs as served by Redoc
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiDocsResponse
     */
	public function getApiDocs(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiDocsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/docs');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiDocsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Browse interactive API documentation
     * 
     * Interactive API docs using swagger-ui
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiSwaggerUIResponse
     */
	public function getApiSwaggerUI(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiSwaggerUIResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/docs/swagger-ui');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiSwaggerUIResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get `autocomplete` objects.
     * 
     * Search for the closest term to autocomplete in the search box.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAutocompleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAutocompleteResponse
     */
	public function getAutocomplete(
        \OpenAPI\OpenAPI\Models\Operations\GetAutocompleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAutocompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/autocomplete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAutocompleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAutocompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find information about a disease
     * 
     * Get `disease` objects.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseaseByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseaseByIdResponse
     */
	public function getDiseaseById(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseaseByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseaseByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/disease/{disease}', \OpenAPI\OpenAPI\Models\Operations\GetDiseaseByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseaseByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get drug by ID
     * 
     * Get `drug` objects.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDrugByIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDrugByIDResponse
     */
	public function getDrugByID(
        \OpenAPI\OpenAPI\Models\Operations\GetDrugByIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDrugByIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/drug/{DRUG_ID}', \OpenAPI\OpenAPI\Models\Operations\GetDrugByIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDrugByIDRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDrugByIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get evidence code by ID
     * 
     * Get `ECO` objects.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetECObyIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetECObyIDResponse
     */
	public function getECObyID(
        \OpenAPI\OpenAPI\Models\Operations\GetECObyIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetECObyIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/eco/{ECO_ID}', \OpenAPI\OpenAPI\Models\Operations\GetECObyIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetECObyIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Search most relevant results
     * 
     * Get `search-result` objects. Enables search bar functionality.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuickSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuickSearchResponse
     */
	public function getQuickSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetQuickSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuickSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/quicksearch');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuickSearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuickSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find related entities by disease
     * 
     * Get `relation` objects starting from diseases.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRelationByEFOIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRelationByEFOIDResponse
     */
	public function getRelationByEFOID(
        \OpenAPI\OpenAPI\Models\Operations\GetRelationByEFOIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRelationByEFOIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/relation/disease/{disease}', \OpenAPI\OpenAPI\Models\Operations\GetRelationByEFOIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRelationByEFOIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find related entities by target
     * 
     * Get `relation` objects starting from diseases.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRelationByENSGIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRelationByENSGIDResponse
     */
	public function getRelationByENSGID(
        \OpenAPI\OpenAPI\Models\Operations\GetRelationByENSGIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRelationByENSGIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/relation/target/{target}', \OpenAPI\OpenAPI\Models\Operations\GetRelationByENSGIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRelationByENSGIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get OpenAPI schema
     * 
     * Get swagger.yaml specs for the API
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSwaggerResponse
     */
	public function getSwagger(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSwaggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/swagger');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSwaggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find information about a target
     * 
     * Get `target` objects.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetByENSGIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetByENSGIDResponse
     */
	public function getTargetByENSGID(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetByENSGIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetByENSGIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/target/{target}', \OpenAPI\OpenAPI\Models\Operations\GetTargetByENSGIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetByENSGIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Query expression levels
     * 
     * Get `gene-expression` objects.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetExpressionByENSGIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetExpressionByENSGIDResponse
     */
	public function getTargetExpressionByENSGID(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetExpressionByENSGIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetExpressionByENSGIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/target/expression');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTargetExpressionByENSGIDRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetExpressionByENSGIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find the best hit
     * 
     * Fire the search method for multiple strings
     * 
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostBestHitSearchResponse
     */
	public function postBestHitSearch(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostBestHitSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/besthitsearch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostBestHitSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find information about a list of diseases
     * 
     * Get `disease` objects.
     * 
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostDiseaseByIdResponse
     */
	public function postDiseaseById(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostDiseaseByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/disease');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostDiseaseByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Enrichment analysis
     * 
     * Returns an enrichment analysis for a list of targets passed in the body
     * 
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostEnrichmentTargetResponse
     */
	public function postEnrichmentTarget(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostEnrichmentTargetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/enrichment/targets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostEnrichmentTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find related entities
     * 
     * Get `relation` objects.
     * 
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRelationResponse
     */
	public function postRelation(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRelationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/relation');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRelationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find information about a list of targets
     * 
     * Get `target` objects. Used for the target profile page.
     * 
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTargetByENSGIDResponse
     */
	public function postTargetByENSGID(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTargetByENSGIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/target');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTargetByENSGIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Batch query expression levels
     * 
     * Get `gene-expression` objects.
     * 
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTargetExpressionByENSGIDResponse
     */
	public function postTargetExpressionByENSGID(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTargetExpressionByENSGIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/platform/private/target/expression');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTargetExpressionByENSGIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}