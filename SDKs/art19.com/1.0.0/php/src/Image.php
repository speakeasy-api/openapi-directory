<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Image 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a list of images
     * 
     * An image represents a piece of artwork attached to some entity like a series, season, or episode,
     * and is _owned_ by an entity called the `bucket`.
     * An image is also a container for several `MediaAssets` representing the physical files for various
     * styles used.
     * 
     * ## Media Asset Styles for Images
     * 
     * Most media assets use square images. You may upload and use a square image, or upload an image of any
     * shape and crop it to a square by specifying the cropping area. This area – identified by a coordinate
     * `x, y` and a `width` & `height` – is the portion of the image used for all cover art. If an image has
     * cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media
     * asset. If the original file is rectangular and does not have cropping, then the system will use a squared
     * version of the original file with the smaller of width or height as the square size.
     * 
     * The original image as uploaded into the system is always retained unmodified and available through
     * the style `original`. All media asset styles except `stripped-original` consist of the cropped image.
     * 
     * An image has media assets with the following styles:
     * 
     * - `original`: This is the original file provided. May not be available, depending on permissions
     *   and file type.
     * - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.
     *   This should be used for any application needing the original, uncropped, image.
     * - `regular`: If the image has cropping defined, this is the cropped image.
     *   If not, this is a square version of the original.
     * - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.
     * - `square-400`: A square version of the image with a size of `400x400` pixels.
     * - `square-640`: A square version of the image with a size of `640x640` pixels.
     * - `square-888`: A square version of the image with a size of `888x888` pixels.
     * - `square-3000`: A square version of the image with a size of `3000x3000` pixels.
     *   This variant is only created if the cropped width & height are each at least 3000.
     * - `itunes`: A square version of the image with a size of `1400x1400` pixels.
     * 
     * ### Preferred image used in feeds
     * 
     * For the main series image used in feeds, it is ideal to use the `square-3000` version.
     * If that is not available, the `itunes` version should be used instead.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImagesResponse
     */
	public function getImages(
        \OpenAPI\OpenAPI\Models\Operations\GetImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/images');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getImages200ApplicationVndApiPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetImages200ApplicationVndApiPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getImages400ApplicationVndApiPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetImages400ApplicationVndApiPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get a specific image
     * 
     * An image represents a piece of artwork attached to some entity like a series, season, or episode,
     * and is _owned_ by an entity called the `bucket`.
     * An image is also a container for several `MediaAssets` representing the physical files for various
     * styles used.
     * 
     * ## Media Asset Styles for Images
     * 
     * Most media assets use square images. You may upload and use a square image, or upload an image of any
     * shape and crop it to a square by specifying the cropping area. This area – identified by a coordinate
     * `x, y` and a `width` & `height` – is the portion of the image used for all cover art. If an image has
     * cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media
     * asset. If the original file is rectangular and does not have cropping, then the system will use a squared
     * version of the original file with the smaller of width or height as the square size.
     * 
     * The original image as uploaded into the system is always retained unmodified and available through
     * the style `original`. All media asset styles except `stripped-original` consist of the cropped image.
     * 
     * An image has media assets with the following styles:
     * 
     * - `original`: This is the original file provided. May not be available, depending on permissions
     *   and file type.
     * - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.
     *   This should be used for any application needing the original, uncropped, image.
     * - `regular`: If the image has cropping defined, this is the cropped image.
     *   If not, this is a square version of the original.
     * - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.
     * - `square-400`: A square version of the image with a size of `400x400` pixels.
     * - `square-640`: A square version of the image with a size of `640x640` pixels.
     * - `square-888`: A square version of the image with a size of `888x888` pixels.
     * - `square-3000`: A square version of the image with a size of `3000x3000` pixels.
     *   This variant is only created if the cropped width & height are each at least 3000.
     * - `itunes`: A square version of the image with a size of `1400x1400` pixels.
     * 
     * ### Preferred image used in feeds
     * 
     * For the main series image used in feeds, it is ideal to use the `square-3000` version.
     * If that is not available, the `itunes` version should be used instead.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImagesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImagesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImagesIdResponse
     */
	public function getImagesId(
        \OpenAPI\OpenAPI\Models\Operations\GetImagesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImagesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImagesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/images/{id}', \OpenAPI\OpenAPI\Models\Operations\GetImagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImagesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getImagesId200ApplicationVndApiPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetImagesId200ApplicationVndApiPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
}