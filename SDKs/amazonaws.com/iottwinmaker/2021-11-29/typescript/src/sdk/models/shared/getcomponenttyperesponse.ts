/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { FunctionResponse } from "./functionresponse";
import { PropertyDefinitionResponse } from "./propertydefinitionresponse";
import { PropertyGroupResponse } from "./propertygroupresponse";
import { Status } from "./status";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class GetComponentTypeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "componentTypeId" })
  componentTypeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "componentTypeName" })
  componentTypeName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "creationDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDateTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "extendsFrom" })
  extendsFrom?: string[];

  @SpeakeasyMetadata({ elemType: FunctionResponse })
  @Expose({ name: "functions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, FunctionResponse> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], FunctionResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  functions?: Record<string, FunctionResponse>;

  @SpeakeasyMetadata()
  @Expose({ name: "isAbstract" })
  isAbstract?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "isSchemaInitialized" })
  isSchemaInitialized?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "isSingleton" })
  isSingleton?: boolean;

  @SpeakeasyMetadata({ elemType: PropertyDefinitionResponse })
  @Expose({ name: "propertyDefinitions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PropertyDefinitionResponse> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PropertyDefinitionResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  propertyDefinitions?: Record<string, PropertyDefinitionResponse>;

  @SpeakeasyMetadata({ elemType: PropertyGroupResponse })
  @Expose({ name: "propertyGroups" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PropertyGroupResponse> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PropertyGroupResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  propertyGroups?: Record<string, PropertyGroupResponse>;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => Status)
  status?: Status;

  @SpeakeasyMetadata()
  @Expose({ name: "syncSource" })
  syncSource?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updateDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updateDateTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "workspaceId" })
  workspaceId: string;
}
