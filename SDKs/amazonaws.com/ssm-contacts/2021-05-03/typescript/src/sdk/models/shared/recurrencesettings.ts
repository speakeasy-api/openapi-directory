/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { CoverageTime } from "./coveragetime";
import { HandOffTime } from "./handofftime";
import { MonthlySetting } from "./monthlysetting";
import { WeeklySetting } from "./weeklysetting";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about when an on-call rotation is in effect and how long the rotation period lasts.
 */
export class RecurrenceSettings extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: HandOffTime })
  @Expose({ name: "DailySettings" })
  @Type(() => HandOffTime)
  dailySettings?: HandOffTime[];

  @SpeakeasyMetadata({ elemType: MonthlySetting })
  @Expose({ name: "MonthlySettings" })
  @Type(() => MonthlySetting)
  monthlySettings?: MonthlySetting[];

  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfOnCalls" })
  numberOfOnCalls: number;

  @SpeakeasyMetadata()
  @Expose({ name: "RecurrenceMultiplier" })
  recurrenceMultiplier: number;

  @SpeakeasyMetadata({ elemType: CoverageTime, elemDepth: 2 })
  @Expose({ name: "ShiftCoverages" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, CoverageTime[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], CoverageTime);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  shiftCoverages?: Record<string, CoverageTime[]>;

  @SpeakeasyMetadata({ elemType: WeeklySetting })
  @Expose({ name: "WeeklySettings" })
  @Type(() => WeeklySetting)
  weeklySettings?: WeeklySetting[];
}
