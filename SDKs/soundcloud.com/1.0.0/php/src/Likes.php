<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Likes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Unlikes a playlist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteLikesPlaylistsPlaylistIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteLikesPlaylistsPlaylistIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteLikesPlaylistsPlaylistIdResponse
     */
	public function deleteLikesPlaylistsPlaylistId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteLikesPlaylistsPlaylistIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteLikesPlaylistsPlaylistIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteLikesPlaylistsPlaylistIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/likes/playlists/{playlist_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteLikesPlaylistsPlaylistIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteLikesPlaylistsPlaylistIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unlikes a track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteLikesTracksTrackIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteLikesTracksTrackIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteLikesTracksTrackIdResponse
     */
	public function deleteLikesTracksTrackId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteLikesTracksTrackIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteLikesTracksTrackIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteLikesTracksTrackIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/likes/tracks/{track_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteLikesTracksTrackIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteLikesTracksTrackIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Likes a playlist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLikesPlaylistsPlaylistIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLikesPlaylistsPlaylistIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLikesPlaylistsPlaylistIdResponse
     */
	public function postLikesPlaylistsPlaylistId(
        \OpenAPI\OpenAPI\Models\Operations\PostLikesPlaylistsPlaylistIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostLikesPlaylistsPlaylistIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLikesPlaylistsPlaylistIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/likes/playlists/{playlist_id}', \OpenAPI\OpenAPI\Models\Operations\PostLikesPlaylistsPlaylistIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLikesPlaylistsPlaylistIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tooManyRequests = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TooManyRequests', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Likes a track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLikesTracksTrackIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLikesTracksTrackIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLikesTracksTrackIdResponse
     */
	public function postLikesTracksTrackId(
        \OpenAPI\OpenAPI\Models\Operations\PostLikesTracksTrackIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostLikesTracksTrackIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLikesTracksTrackIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/likes/tracks/{track_id}', \OpenAPI\OpenAPI\Models\Operations\PostLikesTracksTrackIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLikesTracksTrackIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tooManyRequests = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TooManyRequests', 'json');
            }
        }

        return $response;
    }
}