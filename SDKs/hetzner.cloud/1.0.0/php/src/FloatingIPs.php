<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FloatingIPs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a Floating IP
     * 
     * Deletes a Floating IP. If it is currently assigned to a Server it will automatically get unassigned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFloatingIpsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFloatingIpsIdResponse
     */
	public function deleteFloatingIpsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFloatingIpsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFloatingIpsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/floating_ips/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteFloatingIpsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFloatingIpsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all Floating IPs
     * 
     * Returns all Floating IP objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsResponse
     */
	public function getFloatingIps(
        \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/floating_ips');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getFloatingIps200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetFloatingIps200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Floating IP
     * 
     * Returns a specific Floating IP object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsIdResponse
     */
	public function getFloatingIpsId(
        \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/floating_ips/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getFloatingIpsId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetFloatingIpsId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Floating IP
     * 
     * Creates a new Floating IP assigned to a Server. If you want to create a Floating IP that is not bound to a Server, you need to provide the `home_location` key instead of `server`. This can be either the ID or the name of the Location this IP shall be created in. Note that a Floating IP can be assigned to a Server in any Location later on. For optimal routing it is advised to use the Floating IP in the same Location it was created in.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostFloatingIpsCreateFloatingIPRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostFloatingIpsResponse
     */
	public function postFloatingIps(
        \OpenAPI\OpenAPI\Models\Operations\PostFloatingIpsCreateFloatingIPRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostFloatingIpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/floating_ips');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostFloatingIpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postFloatingIps201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostFloatingIps201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Floating IP
     * 
     * Updates the description or labels of a Floating IP.
     * Also note that when updating labels, the Floating IPâ€™s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutFloatingIpsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutFloatingIpsIdResponse
     */
	public function putFloatingIpsId(
        \OpenAPI\OpenAPI\Models\Operations\PutFloatingIpsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutFloatingIpsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/floating_ips/{id}', \OpenAPI\OpenAPI\Models\Operations\PutFloatingIpsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutFloatingIpsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putFloatingIpsId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutFloatingIpsId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}