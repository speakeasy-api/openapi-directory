<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MarketingEventsExternal 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * deleteMarketingV3MarketingEventsEventsExternalEventIdArchive
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveResponse
     */
	public function deleteMarketingV3MarketingEventsEventsExternalEventIdArchive(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/{externalEventId}', \OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getMarketingV3MarketingEventsEventsExternalEventIdGetById
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdResponse
     */
	public function getMarketingV3MarketingEventsEventsExternalEventIdGetById(
        \OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/{externalEventId}', \OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->marketingEventPublicReadResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarketingEventPublicReadResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * patchMarketingV3MarketingEventsEventsExternalEventIdUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateResponse
     */
	public function patchMarketingV3MarketingEventsEventsExternalEventIdUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/{externalEventId}', \OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "marketingEventUpdateRequestParams", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->marketingEventPublicDefaultResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarketingEventPublicDefaultResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postMarketingV3MarketingEventsEventsDeleteArchiveBatch
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchInputMarketingEventExternalUniqueIdentifier $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsDeleteArchiveBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsDeleteArchiveBatchResponse
     */
	public function postMarketingV3MarketingEventsEventsDeleteArchiveBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchInputMarketingEventExternalUniqueIdentifier $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsDeleteArchiveBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsDeleteArchiveBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsDeleteArchiveBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postMarketingV3MarketingEventsEventsUpsertDoUpsert
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchInputMarketingEventCreateRequestParams $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsUpsertDoUpsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsUpsertDoUpsertResponse
     */
	public function postMarketingV3MarketingEventsEventsUpsertDoUpsert(
        \OpenAPI\OpenAPI\Models\Shared\BatchInputMarketingEventCreateRequestParams $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsUpsertDoUpsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsUpsertDoUpsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/upsert');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsUpsertDoUpsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchResponseMarketingEventPublicDefaultResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchResponseMarketingEventPublicDefaultResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelResponse
     */
	public function postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/{externalEventId}/cancel', \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->marketingEventDefaultResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarketingEventDefaultResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteResponse
     */
	public function postMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete(
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/{externalEventId}/complete', \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "marketingEventCompleteRequestParams", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->marketingEventDefaultResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarketingEventDefaultResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdResponse
     */
	public function postMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById(
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/email-upsert', \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchInputMarketingEventEmailSubscriber", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdResponse
     */
	public function postMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById(
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/upsert', \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchInputMarketingEventSubscriber", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postMarketingV3MarketingEventsEventsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\MarketingEventCreateRequestParams $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsCreateResponse
     */
	public function postMarketingV3MarketingEventsEventsCreate(
        \OpenAPI\OpenAPI\Models\Shared\MarketingEventCreateRequestParams $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMarketingV3MarketingEventsEventsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->marketingEventDefaultResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarketingEventDefaultResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * putMarketingV3MarketingEventsEventsExternalEventIdReplace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutMarketingV3MarketingEventsEventsExternalEventIdReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutMarketingV3MarketingEventsEventsExternalEventIdReplaceResponse
     */
	public function putMarketingV3MarketingEventsEventsExternalEventIdReplace(
        \OpenAPI\OpenAPI\Models\Operations\PutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutMarketingV3MarketingEventsEventsExternalEventIdReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutMarketingV3MarketingEventsEventsExternalEventIdReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/marketing/v3/marketing-events/events/{externalEventId}', \OpenAPI\OpenAPI\Models\Operations\PutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "marketingEventCreateRequestParams", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutMarketingV3MarketingEventsEventsExternalEventIdReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->marketingEventPublicDefaultResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarketingEventPublicDefaultResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}