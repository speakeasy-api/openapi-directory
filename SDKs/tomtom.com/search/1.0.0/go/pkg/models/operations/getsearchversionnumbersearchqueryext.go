// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetSearchVersionNumberSearchQueryExtPathParams struct {
	// Expected response format.
	Ext shared.ExtEnum `pathParam:"style=simple,explode=false,name=ext"`
	// Query string. Must be properly URL encoded.
	//
	// To perform a reverse geocode, the user can provide latitude and longitude coordinates directly in the query. More information can be found <a href="/search-api/search-api-documentation-search/fuzzy-search#AdditionalInfo">here</a>.
	Query string `pathParam:"style=simple,explode=false,name=query"`
	// Service version number. The current value is 2.
	VersionNumber shared.VersionNumberEnum `pathParam:"style=simple,explode=false,name=versionNumber"`
}

type GetSearchVersionNumberSearchQueryExtQueryParams struct {
	// Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
	BtmRight *string `queryParam:"style=form,explode=true,name=btmRight"`
	// Comma separated string of country codes. This will limit the search to the specified countries.
	CountrySet *string `queryParam:"style=form,explode=true,name=countrySet"`
	// Indexes for which extended postal codes should be included in the results. Available indexes are:
	//   - <b>Addr</b> = Address ranges
	//   - <b>Geo</b> = Geographies
	//   - <b>PAD</b> = Point Addresses
	//   - <b>POI</b> = Points of Interest
	//   - <b>Str</b> = Streets
	//   - <b>XStr</b> = Cross Streets (intersections)
	ExtendedPostalCodesFor *string `queryParam:"style=form,explode=true,name=extendedPostalCodesFor"`
	// A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
	//   - <b>Addr</b> = Address range interpolation (when there is no PAD)
	//   - <b>Geo</b> = Geographies
	//   - <b>PAD</b> = Point Addresses
	//   - <b>POI</b> = Points of interest
	//   - <b>Str</b> = Streets
	//   - <b>Xstr</b> = Cross Streets (intersections)
	IdxSet *string `queryParam:"style=form,explode=true,name=idxSet"`
	// Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.
	Language *string `queryParam:"style=form,explode=true,name=language"`
	// Latitude where results should be biased.
	// NOTE: supplying a lat/lon without a radius will return search results biased to that point.
	Lat *float32 `queryParam:"style=form,explode=true,name=lat"`
	// Maximum number of search results that will be returned.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Longitude where results should be biased
	// NOTE: supplying a lat/lon without a radius will return search results biased to that point.
	Lon *float32 `queryParam:"style=form,explode=true,name=lon"`
	// Maximum fuzziness level to be used.
	MaxFuzzyLevel *int64 `queryParam:"style=form,explode=true,name=maxFuzzyLevel"`
	// Minimum fuzziness level to be used.
	MinFuzzyLevel *int64 `queryParam:"style=form,explode=true,name=minFuzzyLevel"`
	// Starting offset of the returned results within the full result set.
	Ofs *int64 `queryParam:"style=form,explode=true,name=ofs"`
	// If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
	Radius *int64 `queryParam:"style=form,explode=true,name=radius"`
	// Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
	TopLeft *string `queryParam:"style=form,explode=true,name=topLeft"`
	// If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.
	Typeahead *bool `queryParam:"style=form,explode=true,name=typeahead"`
	// Geopolitical View.
	View *shared.ViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type GetSearchVersionNumberSearchQueryExtRequest struct {
	PathParams  GetSearchVersionNumberSearchQueryExtPathParams
	QueryParams GetSearchVersionNumberSearchQueryExtQueryParams
}

type GetSearchVersionNumberSearchQueryExtResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
