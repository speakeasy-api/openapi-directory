/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Customers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates multiple print servers.
   */
  adminCustomersChromePrintServersBatchCreatePrintServers(
    req: operations.AdminCustomersChromePrintServersBatchCreatePrintServersRequest,
    security: operations.AdminCustomersChromePrintServersBatchCreatePrintServersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintServersBatchCreatePrintServersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AdminCustomersChromePrintServersBatchCreatePrintServersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printServers:batchCreatePrintServers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchCreatePrintServersRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AdminCustomersChromePrintServersBatchCreatePrintServersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintServersBatchCreatePrintServersResponse =
        new operations.AdminCustomersChromePrintServersBatchCreatePrintServersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchCreatePrintServersResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchCreatePrintServersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes multiple print servers.
   */
  adminCustomersChromePrintServersBatchDeletePrintServers(
    req: operations.AdminCustomersChromePrintServersBatchDeletePrintServersRequest,
    security: operations.AdminCustomersChromePrintServersBatchDeletePrintServersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintServersBatchDeletePrintServersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AdminCustomersChromePrintServersBatchDeletePrintServersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printServers:batchDeletePrintServers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchDeletePrintServersRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AdminCustomersChromePrintServersBatchDeletePrintServersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintServersBatchDeletePrintServersResponse =
        new operations.AdminCustomersChromePrintServersBatchDeletePrintServersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchDeletePrintServersResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchDeletePrintServersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a print server.
   */
  adminCustomersChromePrintServersCreate(
    req: operations.AdminCustomersChromePrintServersCreateRequest,
    security: operations.AdminCustomersChromePrintServersCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintServersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminCustomersChromePrintServersCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printServers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "printServerInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminCustomersChromePrintServersCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintServersCreateResponse =
        new operations.AdminCustomersChromePrintServersCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.printServer = utils.objectToClass(
              httpRes?.data,
              shared.PrintServer
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a print server.
   */
  adminCustomersChromePrintServersDelete(
    req: operations.AdminCustomersChromePrintServersDeleteRequest,
    security: operations.AdminCustomersChromePrintServersDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintServersDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminCustomersChromePrintServersDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminCustomersChromePrintServersDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintServersDeleteResponse =
        new operations.AdminCustomersChromePrintServersDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a print server's configuration.
   */
  adminCustomersChromePrintServersGet(
    req: operations.AdminCustomersChromePrintServersGetRequest,
    security: operations.AdminCustomersChromePrintServersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintServersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminCustomersChromePrintServersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminCustomersChromePrintServersGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintServersGetResponse =
        new operations.AdminCustomersChromePrintServersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.printServer = utils.objectToClass(
              httpRes?.data,
              shared.PrintServer
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists print server configurations.
   */
  adminCustomersChromePrintServersList(
    req: operations.AdminCustomersChromePrintServersListRequest,
    security: operations.AdminCustomersChromePrintServersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintServersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminCustomersChromePrintServersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printServers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminCustomersChromePrintServersListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintServersListResponse =
        new operations.AdminCustomersChromePrintServersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPrintServersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPrintServersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a print server's configuration.
   */
  adminCustomersChromePrintServersPatch(
    req: operations.AdminCustomersChromePrintServersPatchRequest,
    security: operations.AdminCustomersChromePrintServersPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintServersPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminCustomersChromePrintServersPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{name}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "printServerInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminCustomersChromePrintServersPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintServersPatchResponse =
        new operations.AdminCustomersChromePrintServersPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.printServer = utils.objectToClass(
              httpRes?.data,
              shared.PrintServer
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates printers under given Organization Unit.
   */
  adminCustomersChromePrintersBatchCreatePrinters(
    req: operations.AdminCustomersChromePrintersBatchCreatePrintersRequest,
    security: operations.AdminCustomersChromePrintersBatchCreatePrintersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintersBatchCreatePrintersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AdminCustomersChromePrintersBatchCreatePrintersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printers:batchCreatePrinters",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchCreatePrintersRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AdminCustomersChromePrintersBatchCreatePrintersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintersBatchCreatePrintersResponse =
        new operations.AdminCustomersChromePrintersBatchCreatePrintersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchCreatePrintersResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchCreatePrintersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes printers in batch.
   */
  adminCustomersChromePrintersBatchDeletePrinters(
    req: operations.AdminCustomersChromePrintersBatchDeletePrintersRequest,
    security: operations.AdminCustomersChromePrintersBatchDeletePrintersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintersBatchDeletePrintersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AdminCustomersChromePrintersBatchDeletePrintersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printers:batchDeletePrinters",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchDeletePrintersRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AdminCustomersChromePrintersBatchDeletePrintersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintersBatchDeletePrintersResponse =
        new operations.AdminCustomersChromePrintersBatchDeletePrintersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchDeletePrintersResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchDeletePrintersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a printer under given Organization Unit.
   */
  adminCustomersChromePrintersCreate(
    req: operations.AdminCustomersChromePrintersCreateRequest,
    security: operations.AdminCustomersChromePrintersCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminCustomersChromePrintersCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "printerInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminCustomersChromePrintersCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintersCreateResponse =
        new operations.AdminCustomersChromePrintersCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.printer = utils.objectToClass(httpRes?.data, shared.Printer);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List printers configs.
   */
  adminCustomersChromePrintersList(
    req: operations.AdminCustomersChromePrintersListRequest,
    security: operations.AdminCustomersChromePrintersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminCustomersChromePrintersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminCustomersChromePrintersListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintersListResponse =
        new operations.AdminCustomersChromePrintersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPrintersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPrintersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the supported printer models.
   */
  adminCustomersChromePrintersListPrinterModels(
    req: operations.AdminCustomersChromePrintersListPrinterModelsRequest,
    security: operations.AdminCustomersChromePrintersListPrinterModelsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminCustomersChromePrintersListPrinterModelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminCustomersChromePrintersListPrinterModelsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/{parent}/chrome/printers:listPrinterModels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AdminCustomersChromePrintersListPrinterModelsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdminCustomersChromePrintersListPrinterModelsResponse =
        new operations.AdminCustomersChromePrintersListPrinterModelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPrinterModelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPrinterModelsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a customer.
   */
  directoryCustomersGet(
    req: operations.DirectoryCustomersGetRequest,
    security: operations.DirectoryCustomersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectoryCustomersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectoryCustomersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customers/{customerKey}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectoryCustomersGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectoryCustomersGetResponse =
        new operations.DirectoryCustomersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customer = utils.objectToClass(httpRes?.data, shared.Customer);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a customer.
   */
  directoryCustomersPatch(
    req: operations.DirectoryCustomersPatchRequest,
    security: operations.DirectoryCustomersPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectoryCustomersPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectoryCustomersPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customers/{customerKey}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customer",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectoryCustomersPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectoryCustomersPatchResponse =
        new operations.DirectoryCustomersPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customer = utils.objectToClass(httpRes?.data, shared.Customer);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a customer.
   */
  directoryCustomersUpdate(
    req: operations.DirectoryCustomersUpdateRequest,
    security: operations.DirectoryCustomersUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectoryCustomersUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectoryCustomersUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customers/{customerKey}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customer",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectoryCustomersUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectoryCustomersUpdateResponse =
        new operations.DirectoryCustomersUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customer = utils.objectToClass(httpRes?.data, shared.Customer);
          }
          break;
      }

      return res;
    });
  }
}
