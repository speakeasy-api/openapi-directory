/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TableFieldSchema {
    /**
     * [Optional] The categories attached to this field, used for field-level access control.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public TableFieldSchemaCategories categories;
    public TableFieldSchema withCategories(TableFieldSchemaCategories categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * Optional. Collation specification of the field. It only can be set on string type field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collation")
    public String collation;
    public TableFieldSchema withCollation(String collation) {
        this.collation = collation;
        return this;
    }
    
    /**
     * Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE '2020-01-01']
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultValueExpression")
    public String defaultValueExpression;
    public TableFieldSchema withDefaultValueExpression(String defaultValueExpression) {
        this.defaultValueExpression = defaultValueExpression;
        return this;
    }
    
    /**
     * [Optional] The field description. The maximum length is 1,024 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public TableFieldSchema withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * [Optional] Describes the nested schema fields if the type property is set to RECORD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public TableFieldSchema[] fields;
    public TableFieldSchema withFields(TableFieldSchema[] fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type \u2260 "STRING" and \u2260 "BYTES".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxLength")
    public String maxLength;
    public TableFieldSchema withMaxLength(String maxLength) {
        this.maxLength = maxLength;
        return this;
    }
    
    /**
     * [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    public String mode;
    public TableFieldSchema withMode(String mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public TableFieldSchema withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policyTags")
    public TableFieldSchemaPolicyTags policyTags;
    public TableFieldSchema withPolicyTags(TableFieldSchemaPolicyTags policyTags) {
        this.policyTags = policyTags;
        return this;
    }
    
    /**
     * [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type \u2260 "NUMERIC" and \u2260 "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 \u2264 precision - scale \u2264 29 and 0 \u2264 scale \u2264 9. - If type = "BIGNUMERIC": 1 \u2264 precision - scale \u2264 38 and 0 \u2264 scale \u2264 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 \u2264 precision \u2264 29. - If type = "BIGNUMERIC": 1 \u2264 precision \u2264 38. If scale is specified but not precision, then it is invalid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("precision")
    public String precision;
    public TableFieldSchema withPrecision(String precision) {
        this.precision = precision;
        return this;
    }
    
    /**
     * Optional. Rounding Mode specification of the field. It only can be set on NUMERIC or BIGNUMERIC type fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roundingMode")
    public String roundingMode;
    public TableFieldSchema withRoundingMode(String roundingMode) {
        this.roundingMode = roundingMode;
        return this;
    }
    
    /**
     * [Optional] See documentation for precision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scale")
    public String scale;
    public TableFieldSchema withScale(String scale) {
        this.scale = scale;
        return this;
    }
    
    /**
     * [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public TableFieldSchema withType(String type) {
        this.type = type;
        return this;
    }
    
}
