/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Partners {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a customer for zero-touch enrollment. After the method returns successfully, admin and owner roles can manage devices and EMM configs by calling API methods or using their zero-touch enrollment portal. The customer receives an email that welcomes them to zero-touch enrollment and explains how to sign into the portal.
   */
  androiddeviceprovisioningPartnersCustomersCreate(
    req: operations.AndroiddeviceprovisioningPartnersCustomersCreateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersCustomersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersCustomersCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/customers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createCustomerRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersCustomersCreateResponse =
        new operations.AndroiddeviceprovisioningPartnersCustomersCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.company = utils.objectToClass(httpRes?.data, shared.Company);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the customers that are enrolled to the reseller identified by the `partnerId` argument. This list includes customers that the reseller created and customers that enrolled themselves using the portal.
   */
  androiddeviceprovisioningPartnersCustomersList(
    req: operations.AndroiddeviceprovisioningPartnersCustomersListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersCustomersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersCustomersListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{partnerId}/customers",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersCustomersListResponse =
        new operations.AndroiddeviceprovisioningPartnersCustomersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCustomersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCustomersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Claims a device for a customer and adds it to zero-touch enrollment. If the device is already claimed by another customer, the call returns an error.
   */
  androiddeviceprovisioningPartnersDevicesClaim(
    req: operations.AndroiddeviceprovisioningPartnersDevicesClaimRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesClaimResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroiddeviceprovisioningPartnersDevicesClaimRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{partnerId}/devices:claim",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "claimDeviceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesClaimResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesClaimResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.claimDeviceResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClaimDeviceResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Claims a batch of devices for a customer asynchronously. Adds the devices to zero-touch enrollment. To learn more, read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations).
   */
  androiddeviceprovisioningPartnersDevicesClaimAsync(
    req: operations.AndroiddeviceprovisioningPartnersDevicesClaimAsyncRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesClaimAsyncResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersDevicesClaimAsyncRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{partnerId}/devices:claimAsync",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "claimDevicesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesClaimAsyncResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesClaimAsyncResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Finds devices by hardware identifiers, such as IMEI.
   */
  androiddeviceprovisioningPartnersDevicesFindByIdentifier(
    req: operations.AndroiddeviceprovisioningPartnersDevicesFindByIdentifierRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesFindByIdentifierResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersDevicesFindByIdentifierRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{partnerId}/devices:findByIdentifier",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "findDevicesByDeviceIdentifierRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesFindByIdentifierResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesFindByIdentifierResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.findDevicesByDeviceIdentifierResponse = utils.objectToClass(
              httpRes?.data,
              shared.FindDevicesByDeviceIdentifierResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Finds devices claimed for customers. The results only contain devices registered to the reseller that's identified by the `partnerId` argument. The customer's devices purchased from other resellers don't appear in the results.
   */
  androiddeviceprovisioningPartnersDevicesFindByOwner(
    req: operations.AndroiddeviceprovisioningPartnersDevicesFindByOwnerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesFindByOwnerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersDevicesFindByOwnerRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{partnerId}/devices:findByOwner",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "findDevicesByOwnerRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesFindByOwnerResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesFindByOwnerResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.findDevicesByOwnerResponse = utils.objectToClass(
              httpRes?.data,
              shared.FindDevicesByOwnerResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a device.
   */
  androiddeviceprovisioningPartnersDevicesGet(
    req: operations.AndroiddeviceprovisioningPartnersDevicesGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroiddeviceprovisioningPartnersDevicesGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesGetResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.device = utils.objectToClass(httpRes?.data, shared.Device);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates reseller metadata associated with the device. Android devices only.
   */
  androiddeviceprovisioningPartnersDevicesMetadata(
    req: operations.AndroiddeviceprovisioningPartnersDevicesMetadataRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesMetadataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersDevicesMetadataRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{metadataOwnerId}/devices/{deviceId}/metadata",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateDeviceMetadataRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesMetadataResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesMetadataResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deviceMetadata = utils.objectToClass(
              httpRes?.data,
              shared.DeviceMetadata
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unclaims a device from a customer and removes it from zero-touch enrollment.
   */
  androiddeviceprovisioningPartnersDevicesUnclaim(
    req: operations.AndroiddeviceprovisioningPartnersDevicesUnclaimRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesUnclaimResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersDevicesUnclaimRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{partnerId}/devices:unclaim",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "unclaimDeviceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesUnclaimResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesUnclaimResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unclaims a batch of devices for a customer asynchronously. Removes the devices from zero-touch enrollment. To learn more, read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations).
   */
  androiddeviceprovisioningPartnersDevicesUnclaimAsync(
    req: operations.AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{partnerId}/devices:unclaimAsync",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "unclaimDevicesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the reseller metadata attached to a batch of devices. This method updates devices asynchronously and returns an `Operation` that can be used to track progress. Read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations). Android Devices only.
   */
  androiddeviceprovisioningPartnersDevicesUpdateMetadataAsync(
    req: operations.AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/partners/{partnerId}/devices:updateMetadataAsync",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateDeviceMetadataInBatchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncResponse =
        new operations.AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the customers of the vendor.
   */
  androiddeviceprovisioningPartnersVendorsCustomersList(
    req: operations.AndroiddeviceprovisioningPartnersVendorsCustomersListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersVendorsCustomersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningPartnersVendorsCustomersListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/customers",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersVendorsCustomersListResponse =
        new operations.AndroiddeviceprovisioningPartnersVendorsCustomersListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVendorCustomersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVendorCustomersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the vendors of the partner.
   */
  androiddeviceprovisioningPartnersVendorsList(
    req: operations.AndroiddeviceprovisioningPartnersVendorsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningPartnersVendorsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroiddeviceprovisioningPartnersVendorsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/vendors", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningPartnersVendorsListResponse =
        new operations.AndroiddeviceprovisioningPartnersVendorsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVendorsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVendorsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
