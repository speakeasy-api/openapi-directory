/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * KerberosConfig - Specifies Kerberos related configuration.
 */
public class KerberosConfig {
    /**
     * Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crossRealmTrustAdminServer")
    public String crossRealmTrustAdminServer;
    public KerberosConfig withCrossRealmTrustAdminServer(String crossRealmTrustAdminServer) {
        this.crossRealmTrustAdminServer = crossRealmTrustAdminServer;
        return this;
    }
    
    /**
     * Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crossRealmTrustKdc")
    public String crossRealmTrustKdc;
    public KerberosConfig withCrossRealmTrustKdc(String crossRealmTrustKdc) {
        this.crossRealmTrustKdc = crossRealmTrustKdc;
        return this;
    }
    
    /**
     * Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crossRealmTrustRealm")
    public String crossRealmTrustRealm;
    public KerberosConfig withCrossRealmTrustRealm(String crossRealmTrustRealm) {
        this.crossRealmTrustRealm = crossRealmTrustRealm;
        return this;
    }
    
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crossRealmTrustSharedPasswordUri")
    public String crossRealmTrustSharedPasswordUri;
    public KerberosConfig withCrossRealmTrustSharedPasswordUri(String crossRealmTrustSharedPasswordUri) {
        this.crossRealmTrustSharedPasswordUri = crossRealmTrustSharedPasswordUri;
        return this;
    }
    
    /**
     * Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableKerberos")
    public Boolean enableKerberos;
    public KerberosConfig withEnableKerberos(Boolean enableKerberos) {
        this.enableKerberos = enableKerberos;
        return this;
    }
    
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kdcDbKeyUri")
    public String kdcDbKeyUri;
    public KerberosConfig withKdcDbKeyUri(String kdcDbKeyUri) {
        this.kdcDbKeyUri = kdcDbKeyUri;
        return this;
    }
    
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyPasswordUri")
    public String keyPasswordUri;
    public KerberosConfig withKeyPasswordUri(String keyPasswordUri) {
        this.keyPasswordUri = keyPasswordUri;
        return this;
    }
    
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keystorePasswordUri")
    public String keystorePasswordUri;
    public KerberosConfig withKeystorePasswordUri(String keystorePasswordUri) {
        this.keystorePasswordUri = keystorePasswordUri;
        return this;
    }
    
    /**
     * Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keystoreUri")
    public String keystoreUri;
    public KerberosConfig withKeystoreUri(String keystoreUri) {
        this.keystoreUri = keystoreUri;
        return this;
    }
    
    /**
     * Optional. The uri of the KMS key used to encrypt various sensitive files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyUri")
    public String kmsKeyUri;
    public KerberosConfig withKmsKeyUri(String kmsKeyUri) {
        this.kmsKeyUri = kmsKeyUri;
        return this;
    }
    
    /**
     * Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("realm")
    public String realm;
    public KerberosConfig withRealm(String realm) {
        this.realm = realm;
        return this;
    }
    
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rootPrincipalPasswordUri")
    public String rootPrincipalPasswordUri;
    public KerberosConfig withRootPrincipalPasswordUri(String rootPrincipalPasswordUri) {
        this.rootPrincipalPasswordUri = rootPrincipalPasswordUri;
        return this;
    }
    
    /**
     * Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tgtLifetimeHours")
    public Integer tgtLifetimeHours;
    public KerberosConfig withTgtLifetimeHours(Integer tgtLifetimeHours) {
        this.tgtLifetimeHours = tgtLifetimeHours;
        return this;
    }
    
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("truststorePasswordUri")
    public String truststorePasswordUri;
    public KerberosConfig withTruststorePasswordUri(String truststorePasswordUri) {
        this.truststorePasswordUri = truststorePasswordUri;
        return this;
    }
    
    /**
     * Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("truststoreUri")
    public String truststoreUri;
    public KerberosConfig withTruststoreUri(String truststoreUri) {
        this.truststoreUri = truststoreUri;
        return this;
    }
    
}
