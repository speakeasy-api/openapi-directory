"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ScoreTrackPointTypeEnum(str, Enum):
    r"""The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`"""
    MEASURE = 'measure'
    END = 'end'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScoreTrackPoint:
    r"""A track synchronization point"""
    
    time: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time') }})
    r"""The corresponding time in seconds"""  
    type: ScoreTrackPointTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`"""  
    measure_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measureUuid'), 'exclude': lambda f: f is None }})
    r"""The measure unique identifier"""  
    