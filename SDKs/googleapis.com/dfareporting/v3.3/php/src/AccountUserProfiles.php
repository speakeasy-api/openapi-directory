<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AccountUserProfiles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets one account user profile by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetResponse
     */
	public function dfareportingAccountUserProfilesGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/accountUserProfiles/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountUserProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountUserProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new account user profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertResponse
     */
	public function dfareportingAccountUserProfilesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/accountUserProfiles', \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountUserProfile", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountUserProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountUserProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of account user profiles, possibly filtered. This method supports paging.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListResponse
     */
	public function dfareportingAccountUserProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/accountUserProfiles', \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountUserProfilesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountUserProfilesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing account user profile. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchResponse
     */
	public function dfareportingAccountUserProfilesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/accountUserProfiles', \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountUserProfile", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountUserProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountUserProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing account user profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateResponse
     */
	public function dfareportingAccountUserProfilesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/accountUserProfiles', \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountUserProfile", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingAccountUserProfilesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountUserProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountUserProfile', 'json');
            }
        }

        return $response;
    }
}