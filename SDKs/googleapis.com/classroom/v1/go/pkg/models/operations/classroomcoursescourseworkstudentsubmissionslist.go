// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption4 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption5 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption6 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ClassroomCoursesCourseWorkStudentSubmissionsListSecurity struct {
	Option1 *ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption1 `security:"option"`
	Option2 *ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption2 `security:"option"`
	Option3 *ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption3 `security:"option"`
	Option4 *ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption4 `security:"option"`
	Option5 *ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption5 `security:"option"`
	Option6 *ClassroomCoursesCourseWorkStudentSubmissionsListSecurityOption6 `security:"option"`
}

type ClassroomCoursesCourseWorkStudentSubmissionsListPathParams struct {
	// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
	CourseID string `pathParam:"style=simple,explode=false,name=courseId"`
	// Identifier of the student work to request. This may be set to the string literal `"-"` to request student work for all course work in the specified course.
	CourseWorkID string `pathParam:"style=simple,explode=false,name=courseWorkId"`
}

// ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum - Requested lateness value. If specified, returned student submissions are restricted by the requested value. If unspecified, submissions are returned regardless of `late` value.
type ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum string

const (
	ClassroomCoursesCourseWorkStudentSubmissionsListLateEnumLateValuesUnspecified ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum = "LATE_VALUES_UNSPECIFIED"
	ClassroomCoursesCourseWorkStudentSubmissionsListLateEnumLateOnly              ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum = "LATE_ONLY"
	ClassroomCoursesCourseWorkStudentSubmissionsListLateEnumNotLateOnly           ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum = "NOT_LATE_ONLY"
)

func (e *ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LATE_VALUES_UNSPECIFIED":
		fallthrough
	case "LATE_ONLY":
		fallthrough
	case "NOT_LATE_ONLY":
		*e = ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum: %s", s)
	}
}

type ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum string

const (
	ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnumSubmissionStateUnspecified ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum = "SUBMISSION_STATE_UNSPECIFIED"
	ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnumNew                        ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum = "NEW"
	ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnumCreated                    ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum = "CREATED"
	ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnumTurnedIn                   ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum = "TURNED_IN"
	ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnumReturned                   ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum = "RETURNED"
	ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnumReclaimedByStudent         ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum = "RECLAIMED_BY_STUDENT"
)

func (e *ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUBMISSION_STATE_UNSPECIFIED":
		fallthrough
	case "NEW":
		fallthrough
	case "CREATED":
		fallthrough
	case "TURNED_IN":
		fallthrough
	case "RETURNED":
		fallthrough
	case "RECLAIMED_BY_STUDENT":
		*e = ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum: %s", s)
	}
}

type ClassroomCoursesCourseWorkStudentSubmissionsListQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Requested lateness value. If specified, returned student submissions are restricted by the requested value. If unspecified, submissions are returned regardless of `late` value.
	Late *ClassroomCoursesCourseWorkStudentSubmissionsListLateEnum `queryParam:"style=form,explode=true,name=late"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Requested submission states. If specified, returned student submissions match one of the specified submission states.
	States []ClassroomCoursesCourseWorkStudentSubmissionsListStatesEnum `queryParam:"style=form,explode=true,name=states"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Optional argument to restrict returned student work to those owned by the student with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
	UserID *string `queryParam:"style=form,explode=true,name=userId"`
}

type ClassroomCoursesCourseWorkStudentSubmissionsListRequest struct {
	PathParams  ClassroomCoursesCourseWorkStudentSubmissionsListPathParams
	QueryParams ClassroomCoursesCourseWorkStudentSubmissionsListQueryParams
	Security    ClassroomCoursesCourseWorkStudentSubmissionsListSecurity
}

type ClassroomCoursesCourseWorkStudentSubmissionsListResponse struct {
	ContentType string
	// Successful response
	ListStudentSubmissionsResponse *shared.ListStudentSubmissionsResponse
	StatusCode                     int
	RawResponse                    *http.Response
}
