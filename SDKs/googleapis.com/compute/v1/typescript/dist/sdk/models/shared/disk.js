"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Disk = exports.DiskStatusEnum = exports.DiskArchitectureEnum = void 0;
var utils_1 = require("../../../internal/utils");
var customerencryptionkey_1 = require("./customerencryptionkey");
var diskparams_1 = require("./diskparams");
var guestosfeature_1 = require("./guestosfeature");
var class_transformer_1 = require("class-transformer");
/**
 * The architecture of the disk. Valid values are ARM64 or X86_64.
 */
var DiskArchitectureEnum;
(function (DiskArchitectureEnum) {
    DiskArchitectureEnum["ArchitectureUnspecified"] = "ARCHITECTURE_UNSPECIFIED";
    DiskArchitectureEnum["Arm64"] = "ARM64";
    DiskArchitectureEnum["X8664"] = "X86_64";
})(DiskArchitectureEnum = exports.DiskArchitectureEnum || (exports.DiskArchitectureEnum = {}));
/**
 * [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting.
 */
var DiskStatusEnum;
(function (DiskStatusEnum) {
    DiskStatusEnum["Creating"] = "CREATING";
    DiskStatusEnum["Deleting"] = "DELETING";
    DiskStatusEnum["Failed"] = "FAILED";
    DiskStatusEnum["Ready"] = "READY";
    DiskStatusEnum["Restoring"] = "RESTORING";
})(DiskStatusEnum = exports.DiskStatusEnum || (exports.DiskStatusEnum = {}));
/**
 * Represents a Persistent Disk resource. Google Compute Engine has two Disk resources: * [Zonal](/compute/docs/reference/rest/v1/disks) * [Regional](/compute/docs/reference/rest/v1/regionDisks) Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options. The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks. The regionDisks resource represents a regional persistent disk. For more information, read Regional resources.
 */
var Disk = /** @class */ (function (_super) {
    __extends(Disk, _super);
    function Disk() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "architecture" }),
        __metadata("design:type", String)
    ], Disk.prototype, "architecture", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], Disk.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], Disk.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskEncryptionKey" }),
        (0, class_transformer_1.Type)(function () { return customerencryptionkey_1.CustomerEncryptionKey; }),
        __metadata("design:type", customerencryptionkey_1.CustomerEncryptionKey)
    ], Disk.prototype, "diskEncryptionKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: guestosfeature_1.GuestOsFeature }),
        (0, class_transformer_1.Expose)({ name: "guestOsFeatures" }),
        (0, class_transformer_1.Type)(function () { return guestosfeature_1.GuestOsFeature; }),
        __metadata("design:type", Array)
    ], Disk.prototype, "guestOsFeatures", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Disk.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], Disk.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labelFingerprint" }),
        __metadata("design:type", String)
    ], Disk.prototype, "labelFingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], Disk.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastAttachTimestamp" }),
        __metadata("design:type", String)
    ], Disk.prototype, "lastAttachTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastDetachTimestamp" }),
        __metadata("design:type", String)
    ], Disk.prototype, "lastDetachTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "licenseCodes" }),
        __metadata("design:type", Array)
    ], Disk.prototype, "licenseCodes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "licenses" }),
        __metadata("design:type", Array)
    ], Disk.prototype, "licenses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "locationHint" }),
        __metadata("design:type", String)
    ], Disk.prototype, "locationHint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Disk.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "options" }),
        __metadata("design:type", String)
    ], Disk.prototype, "options", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "params" }),
        (0, class_transformer_1.Type)(function () { return diskparams_1.DiskParams; }),
        __metadata("design:type", diskparams_1.DiskParams)
    ], Disk.prototype, "params", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "physicalBlockSizeBytes" }),
        __metadata("design:type", String)
    ], Disk.prototype, "physicalBlockSizeBytes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "provisionedIops" }),
        __metadata("design:type", String)
    ], Disk.prototype, "provisionedIops", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], Disk.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "replicaZones" }),
        __metadata("design:type", Array)
    ], Disk.prototype, "replicaZones", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "resourcePolicies" }),
        __metadata("design:type", Array)
    ], Disk.prototype, "resourcePolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "satisfiesPzs" }),
        __metadata("design:type", Boolean)
    ], Disk.prototype, "satisfiesPzs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], Disk.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sizeGb" }),
        __metadata("design:type", String)
    ], Disk.prototype, "sizeGb", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceDisk" }),
        __metadata("design:type", String)
    ], Disk.prototype, "sourceDisk", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceDiskId" }),
        __metadata("design:type", String)
    ], Disk.prototype, "sourceDiskId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceImage" }),
        __metadata("design:type", String)
    ], Disk.prototype, "sourceImage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceImageEncryptionKey" }),
        (0, class_transformer_1.Type)(function () { return customerencryptionkey_1.CustomerEncryptionKey; }),
        __metadata("design:type", customerencryptionkey_1.CustomerEncryptionKey)
    ], Disk.prototype, "sourceImageEncryptionKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceImageId" }),
        __metadata("design:type", String)
    ], Disk.prototype, "sourceImageId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceSnapshot" }),
        __metadata("design:type", String)
    ], Disk.prototype, "sourceSnapshot", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceSnapshotEncryptionKey" }),
        (0, class_transformer_1.Type)(function () { return customerencryptionkey_1.CustomerEncryptionKey; }),
        __metadata("design:type", customerencryptionkey_1.CustomerEncryptionKey)
    ], Disk.prototype, "sourceSnapshotEncryptionKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceSnapshotId" }),
        __metadata("design:type", String)
    ], Disk.prototype, "sourceSnapshotId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceStorageObject" }),
        __metadata("design:type", String)
    ], Disk.prototype, "sourceStorageObject", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], Disk.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Disk.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "users" }),
        __metadata("design:type", Array)
    ], Disk.prototype, "users", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zone" }),
        __metadata("design:type", String)
    ], Disk.prototype, "zone", void 0);
    return Disk;
}(utils_1.SpeakeasyBase));
exports.Disk = Disk;
