// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ExtensionActionDefinitionInputFieldDependenciesType string

const (
	ExtensionActionDefinitionInputFieldDependenciesTypeSingleFieldDependency            ExtensionActionDefinitionInputFieldDependenciesType = "SingleFieldDependency"
	ExtensionActionDefinitionInputFieldDependenciesTypeConditionalSingleFieldDependency ExtensionActionDefinitionInputFieldDependenciesType = "ConditionalSingleFieldDependency"
)

type ExtensionActionDefinitionInputFieldDependencies struct {
	SingleFieldDependency            *SingleFieldDependency
	ConditionalSingleFieldDependency *ConditionalSingleFieldDependency

	Type ExtensionActionDefinitionInputFieldDependenciesType
}

func CreateExtensionActionDefinitionInputFieldDependenciesSingleFieldDependency(singleFieldDependency SingleFieldDependency) ExtensionActionDefinitionInputFieldDependencies {
	typ := ExtensionActionDefinitionInputFieldDependenciesTypeSingleFieldDependency

	return ExtensionActionDefinitionInputFieldDependencies{
		SingleFieldDependency: &singleFieldDependency,
		Type:                  typ,
	}
}

func CreateExtensionActionDefinitionInputFieldDependenciesConditionalSingleFieldDependency(conditionalSingleFieldDependency ConditionalSingleFieldDependency) ExtensionActionDefinitionInputFieldDependencies {
	typ := ExtensionActionDefinitionInputFieldDependenciesTypeConditionalSingleFieldDependency

	return ExtensionActionDefinitionInputFieldDependencies{
		ConditionalSingleFieldDependency: &conditionalSingleFieldDependency,
		Type:                             typ,
	}
}

func (u *ExtensionActionDefinitionInputFieldDependencies) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	singleFieldDependency := new(SingleFieldDependency)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&singleFieldDependency); err == nil {
		u.SingleFieldDependency = singleFieldDependency
		u.Type = ExtensionActionDefinitionInputFieldDependenciesTypeSingleFieldDependency
		return nil
	}

	conditionalSingleFieldDependency := new(ConditionalSingleFieldDependency)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&conditionalSingleFieldDependency); err == nil {
		u.ConditionalSingleFieldDependency = conditionalSingleFieldDependency
		u.Type = ExtensionActionDefinitionInputFieldDependenciesTypeConditionalSingleFieldDependency
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExtensionActionDefinitionInputFieldDependencies) MarshalJSON() ([]byte, error) {
	if u.SingleFieldDependency != nil {
		return json.Marshal(u.SingleFieldDependency)
	}

	if u.ConditionalSingleFieldDependency != nil {
		return json.Marshal(u.ConditionalSingleFieldDependency)
	}

	return nil, nil
}

// ExtensionActionDefinition - Configuration for custom workflow action.
type ExtensionActionDefinition struct {
	// The URL that will accept an HTTPS request each time workflows executes the custom action.
	ActionURL string `json:"actionUrl"`
	// The date that this custom action was archived, if the custom action is archived.
	ArchivedAt *int64 `json:"archivedAt,omitempty"`
	// A list of functions associated with the custom workflow action.
	Functions []ActionFunctionIdentifier `json:"functions"`
	// The ID of the custom action.
	ID string `json:"id"`
	// A list of dependencies between the input fields. These configure when the input fields should be visible.
	InputFieldDependencies []ExtensionActionDefinitionInputFieldDependencies `json:"inputFieldDependencies,omitempty"`
	// The list of input fields to display in this custom action.
	InputFields []InputFieldDefinition `json:"inputFields"`
	// The user-facing labels for the custom action.
	Labels map[string]ActionLabels `json:"labels"`
	// Configures what properties of the enrolled CRM object are included in the action execution request
	ObjectRequestOptions *ObjectRequestOptions `json:"objectRequestOptions,omitempty"`
	// The object types that this custom action supports.
	ObjectTypes []string `json:"objectTypes"`
	// Whether this custom action is published to customers.
	Published  bool   `json:"published"`
	RevisionID string `json:"revisionId"`
}
