// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

// CreateNetworkMqttBrokerRequestBodySecuritySecurity - TLS settings of the MQTT broker.
type CreateNetworkMqttBrokerRequestBodySecuritySecurity struct {
	// CA Certificate of the MQTT broker.
	CaCertificate *string `json:"caCertificate,omitempty"`
	// Whether the TLS hostname verification is enabled for the MQTT broker.
	VerifyHostnames *bool `json:"verifyHostnames,omitempty"`
}

// CreateNetworkMqttBrokerRequestBodySecurity - Security settings of the MQTT broker.
type CreateNetworkMqttBrokerRequestBodySecurity struct {
	// Security protocol of the MQTT broker.
	Mode *string `json:"mode,omitempty"`
	// TLS settings of the MQTT broker.
	Security *CreateNetworkMqttBrokerRequestBodySecuritySecurity `json:"security,omitempty"`
}

type CreateNetworkMqttBrokerRequestBody struct {
	// Authentication settings of the MQTT broker
	Authentication map[string]interface{} `json:"authentication,omitempty"`
	// Host name/IP address where the MQTT broker runs.
	Host string `json:"host"`
	// Name of the MQTT broker.
	Name string `json:"name"`
	// Host port though which the MQTT broker can be reached.
	Port int64 `json:"port"`
	// Security settings of the MQTT broker.
	Security *CreateNetworkMqttBrokerRequestBodySecurity `json:"security,omitempty"`
}

type CreateNetworkMqttBrokerRequest struct {
	RequestBody CreateNetworkMqttBrokerRequestBody `request:"mediaType=application/json"`
	NetworkID   string                             `pathParam:"style=simple,explode=false,name=networkId"`
}

type CreateNetworkMqttBrokerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateNetworkMqttBroker201ApplicationJSONObject map[string]interface{}
}
