/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { RuntimeHintValue } from "./runtimehintvalue";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Provides an array of phrases that should be given preference when resolving values for a slot.
 */
export class RuntimeHintDetails extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: RuntimeHintValue })
  @Expose({ name: "runtimeHintValues" })
  @Type(() => RuntimeHintValue)
  runtimeHintValues?: RuntimeHintValue[];

  @SpeakeasyMetadata({ elemType: RuntimeHintDetails })
  @Expose({ name: "subSlotHints" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RuntimeHintDetails> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RuntimeHintDetails);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  subSlotHints?: Record<string, RuntimeHintDetails>;
}
