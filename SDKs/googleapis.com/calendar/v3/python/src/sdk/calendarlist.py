"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CalendarList:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def calendar_calendar_list_delete(self, request: operations.CalendarCalendarListDeleteRequest, security: operations.CalendarCalendarListDeleteSecurity) -> operations.CalendarCalendarListDeleteResponse:
        r"""Removes a calendar from the user's calendar list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarListDeleteRequest, base_url, '/users/me/calendarList/{calendarId}', request)
        
        query_params = utils.get_query_params(operations.CalendarCalendarListDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarListDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def calendar_calendar_list_get(self, request: operations.CalendarCalendarListGetRequest, security: operations.CalendarCalendarListGetSecurity) -> operations.CalendarCalendarListGetResponse:
        r"""Returns a calendar from the user's calendar list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarListGetRequest, base_url, '/users/me/calendarList/{calendarId}', request)
        
        query_params = utils.get_query_params(operations.CalendarCalendarListGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarListGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarListEntry])
                res.calendar_list_entry = out

        return res

    def calendar_calendar_list_insert(self, request: operations.CalendarCalendarListInsertRequest, security: operations.CalendarCalendarListInsertSecurity) -> operations.CalendarCalendarListInsertResponse:
        r"""Inserts an existing calendar into the user's calendar list."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/me/calendarList'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calendar_list_entry", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarCalendarListInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarListInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarListEntry])
                res.calendar_list_entry = out

        return res

    def calendar_calendar_list_list(self, request: operations.CalendarCalendarListListRequest, security: operations.CalendarCalendarListListSecurity) -> operations.CalendarCalendarListListResponse:
        r"""Returns the calendars on the user's calendar list."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/me/calendarList'
        
        query_params = utils.get_query_params(operations.CalendarCalendarListListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarListListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarList])
                res.calendar_list = out

        return res

    def calendar_calendar_list_patch(self, request: operations.CalendarCalendarListPatchRequest, security: operations.CalendarCalendarListPatchSecurity) -> operations.CalendarCalendarListPatchResponse:
        r"""Updates an existing calendar on the user's calendar list. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarListPatchRequest, base_url, '/users/me/calendarList/{calendarId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calendar_list_entry", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarCalendarListPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarListPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarListEntry])
                res.calendar_list_entry = out

        return res

    def calendar_calendar_list_update(self, request: operations.CalendarCalendarListUpdateRequest, security: operations.CalendarCalendarListUpdateSecurity) -> operations.CalendarCalendarListUpdateResponse:
        r"""Updates an existing calendar on the user's calendar list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarListUpdateRequest, base_url, '/users/me/calendarList/{calendarId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calendar_list_entry", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarCalendarListUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarListUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarListEntry])
                res.calendar_list_entry = out

        return res

    def calendar_calendar_list_watch(self, request: operations.CalendarCalendarListWatchRequest, security: operations.CalendarCalendarListWatchSecurity) -> operations.CalendarCalendarListWatchResponse:
        r"""Watch for changes to CalendarList resources."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/me/calendarList/watch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarCalendarListWatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarListWatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    