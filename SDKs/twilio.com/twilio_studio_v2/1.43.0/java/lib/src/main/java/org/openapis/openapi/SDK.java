/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://studio.twilio.com",
	};
    /**
	 * CREATE_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * CREATE_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_FLOW_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * DELETE_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * DELETE_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FLOW_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_EXECUTION_CONTEXT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EXECUTION_CONTEXT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_EXECUTION_STEP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EXECUTION_STEP_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_EXECUTION_STEP_CONTEXT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EXECUTION_STEP_CONTEXT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FLOW_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_FLOW_REVISION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FLOW_REVISION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_TEST_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TEST_USER_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_EXECUTION_STEP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EXECUTION_STEP_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FLOW_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_FLOW_REVISION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FLOW_REVISION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * UPDATE_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * UPDATE_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_FLOW_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * UPDATE_FLOW_VALIDATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_FLOW_VALIDATE_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * UPDATE_TEST_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TEST_USER_SERVERS = {
        "https://studio.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    /**
     * Triggers a new Execution for the Flow
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateExecutionResponse createExecution(org.openapis.openapi.models.operations.CreateExecutionRequest request, org.openapis.openapi.models.operations.CreateExecutionSecurity security) throws Exception {
        return this.createExecution(request, security, null);
    }

    /**
     * Triggers a new Execution for the Flow
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateExecutionResponse createExecution(org.openapis.openapi.models.operations.CreateExecutionRequest request, org.openapis.openapi.models.operations.CreateExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateExecutionRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateExecutionResponse res = new org.openapis.openapi.models.operations.CreateExecutionResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowExecution = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowExecution out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowExecution.class);
                res.studioV2FlowExecution = out;
            }
        }

        return res;
    }

    /**
     * Create a Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateFlowResponse createFlow(org.openapis.openapi.models.operations.CreateFlowCreateFlowRequest request, org.openapis.openapi.models.operations.CreateFlowSecurity security) throws Exception {
        return this.createFlow(request, security, null);
    }

    /**
     * Create a Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateFlowResponse createFlow(org.openapis.openapi.models.operations.CreateFlowCreateFlowRequest request, org.openapis.openapi.models.operations.CreateFlowSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_FLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Flows");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFlowResponse res = new org.openapis.openapi.models.operations.CreateFlowResponse(contentType, httpRes.statusCode()) {{
            studioV2Flow = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2Flow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2Flow.class);
                res.studioV2Flow = out;
            }
        }

        return res;
    }

    /**
     * Delete the Execution and all Steps relating to it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteExecutionResponse deleteExecution(org.openapis.openapi.models.operations.DeleteExecutionRequest request, org.openapis.openapi.models.operations.DeleteExecutionSecurity security) throws Exception {
        return this.deleteExecution(request, security, null);
    }

    /**
     * Delete the Execution and all Steps relating to it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteExecutionResponse deleteExecution(org.openapis.openapi.models.operations.DeleteExecutionRequest request, org.openapis.openapi.models.operations.DeleteExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteExecutionRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteExecutionResponse res = new org.openapis.openapi.models.operations.DeleteExecutionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFlowResponse deleteFlow(org.openapis.openapi.models.operations.DeleteFlowRequest request, org.openapis.openapi.models.operations.DeleteFlowSecurity security) throws Exception {
        return this.deleteFlow(request, security, null);
    }

    /**
     * Delete a specific Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFlowResponse deleteFlow(org.openapis.openapi.models.operations.DeleteFlowRequest request, org.openapis.openapi.models.operations.DeleteFlowSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_FLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFlowRequest.class, baseUrl, "/v2/Flows/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFlowResponse res = new org.openapis.openapi.models.operations.DeleteFlowResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Retrieve an Execution
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionResponse fetchExecution(org.openapis.openapi.models.operations.FetchExecutionRequest request, org.openapis.openapi.models.operations.FetchExecutionSecurity security) throws Exception {
        return this.fetchExecution(request, security, null);
    }

    /**
     * Retrieve an Execution
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionResponse fetchExecution(org.openapis.openapi.models.operations.FetchExecutionRequest request, org.openapis.openapi.models.operations.FetchExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchExecutionRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchExecutionResponse res = new org.openapis.openapi.models.operations.FetchExecutionResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowExecution = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowExecution out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowExecution.class);
                res.studioV2FlowExecution = out;
            }
        }

        return res;
    }

    /**
     * Retrieve the most recent context for an Execution.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionContextResponse fetchExecutionContext(org.openapis.openapi.models.operations.FetchExecutionContextRequest request, org.openapis.openapi.models.operations.FetchExecutionContextSecurity security) throws Exception {
        return this.fetchExecutionContext(request, security, null);
    }

    /**
     * Retrieve the most recent context for an Execution.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionContextResponse fetchExecutionContext(org.openapis.openapi.models.operations.FetchExecutionContextRequest request, org.openapis.openapi.models.operations.FetchExecutionContextSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EXECUTION_CONTEXT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchExecutionContextRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Context", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchExecutionContextResponse res = new org.openapis.openapi.models.operations.FetchExecutionContextResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowExecutionExecutionContext = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowExecutionExecutionContext out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowExecutionExecutionContext.class);
                res.studioV2FlowExecutionExecutionContext = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionStepResponse fetchExecutionStep(org.openapis.openapi.models.operations.FetchExecutionStepRequest request, org.openapis.openapi.models.operations.FetchExecutionStepSecurity security) throws Exception {
        return this.fetchExecutionStep(request, security, null);
    }

    /**
     * Retrieve a Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionStepResponse fetchExecutionStep(org.openapis.openapi.models.operations.FetchExecutionStepRequest request, org.openapis.openapi.models.operations.FetchExecutionStepSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EXECUTION_STEP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchExecutionStepRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchExecutionStepResponse res = new org.openapis.openapi.models.operations.FetchExecutionStepResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowExecutionExecutionStep = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowExecutionExecutionStep out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowExecutionExecutionStep.class);
                res.studioV2FlowExecutionExecutionStep = out;
            }
        }

        return res;
    }

    /**
     * Retrieve the context for an Execution Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionStepContextResponse fetchExecutionStepContext(org.openapis.openapi.models.operations.FetchExecutionStepContextRequest request, org.openapis.openapi.models.operations.FetchExecutionStepContextSecurity security) throws Exception {
        return this.fetchExecutionStepContext(request, security, null);
    }

    /**
     * Retrieve the context for an Execution Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionStepContextResponse fetchExecutionStepContext(org.openapis.openapi.models.operations.FetchExecutionStepContextRequest request, org.openapis.openapi.models.operations.FetchExecutionStepContextSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EXECUTION_STEP_CONTEXT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchExecutionStepContextRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchExecutionStepContextResponse res = new org.openapis.openapi.models.operations.FetchExecutionStepContextResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowExecutionExecutionStepExecutionStepContext = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowExecutionExecutionStepExecutionStepContext out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowExecutionExecutionStepExecutionStepContext.class);
                res.studioV2FlowExecutionExecutionStepExecutionStepContext = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFlowResponse fetchFlow(org.openapis.openapi.models.operations.FetchFlowRequest request, org.openapis.openapi.models.operations.FetchFlowSecurity security) throws Exception {
        return this.fetchFlow(request, security, null);
    }

    /**
     * Retrieve a specific Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFlowResponse fetchFlow(org.openapis.openapi.models.operations.FetchFlowRequest request, org.openapis.openapi.models.operations.FetchFlowSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFlowRequest.class, baseUrl, "/v2/Flows/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFlowResponse res = new org.openapis.openapi.models.operations.FetchFlowResponse(contentType, httpRes.statusCode()) {{
            studioV2Flow = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2Flow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2Flow.class);
                res.studioV2Flow = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Flow revision.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFlowRevisionResponse fetchFlowRevision(org.openapis.openapi.models.operations.FetchFlowRevisionRequest request, org.openapis.openapi.models.operations.FetchFlowRevisionSecurity security) throws Exception {
        return this.fetchFlowRevision(request, security, null);
    }

    /**
     * Retrieve a specific Flow revision.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFlowRevisionResponse fetchFlowRevision(org.openapis.openapi.models.operations.FetchFlowRevisionRequest request, org.openapis.openapi.models.operations.FetchFlowRevisionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FLOW_REVISION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFlowRevisionRequest.class, baseUrl, "/v2/Flows/{Sid}/Revisions/{Revision}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFlowRevisionResponse res = new org.openapis.openapi.models.operations.FetchFlowRevisionResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowFlowRevision = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowFlowRevision out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowFlowRevision.class);
                res.studioV2FlowFlowRevision = out;
            }
        }

        return res;
    }

    /**
     * Fetch flow test users
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchTestUserResponse fetchTestUser(org.openapis.openapi.models.operations.FetchTestUserRequest request, org.openapis.openapi.models.operations.FetchTestUserSecurity security) throws Exception {
        return this.fetchTestUser(request, security, null);
    }

    /**
     * Fetch flow test users
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchTestUserResponse fetchTestUser(org.openapis.openapi.models.operations.FetchTestUserRequest request, org.openapis.openapi.models.operations.FetchTestUserSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TEST_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTestUserRequest.class, baseUrl, "/v2/Flows/{Sid}/TestUsers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTestUserResponse res = new org.openapis.openapi.models.operations.FetchTestUserResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowTestUser = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowTestUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowTestUser.class);
                res.studioV2FlowTestUser = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Executions for the Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListExecutionResponse listExecution(org.openapis.openapi.models.operations.ListExecutionRequest request, org.openapis.openapi.models.operations.ListExecutionSecurity security) throws Exception {
        return this.listExecution(request, security, null);
    }

    /**
     * Retrieve a list of all Executions for the Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListExecutionResponse listExecution(org.openapis.openapi.models.operations.ListExecutionRequest request, org.openapis.openapi.models.operations.ListExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListExecutionRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListExecutionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListExecutionResponse res = new org.openapis.openapi.models.operations.ListExecutionResponse(contentType, httpRes.statusCode()) {{
            listExecutionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListExecutionListExecutionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListExecutionListExecutionResponse.class);
                res.listExecutionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Steps for an Execution.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListExecutionStepResponse listExecutionStep(org.openapis.openapi.models.operations.ListExecutionStepRequest request, org.openapis.openapi.models.operations.ListExecutionStepSecurity security) throws Exception {
        return this.listExecutionStep(request, security, null);
    }

    /**
     * Retrieve a list of all Steps for an Execution.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListExecutionStepResponse listExecutionStep(org.openapis.openapi.models.operations.ListExecutionStepRequest request, org.openapis.openapi.models.operations.ListExecutionStepSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_EXECUTION_STEP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListExecutionStepRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListExecutionStepRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListExecutionStepResponse res = new org.openapis.openapi.models.operations.ListExecutionStepResponse(contentType, httpRes.statusCode()) {{
            listExecutionStepResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListExecutionStepListExecutionStepResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListExecutionStepListExecutionStepResponse.class);
                res.listExecutionStepResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Flows.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFlowResponse listFlow(org.openapis.openapi.models.operations.ListFlowRequest request, org.openapis.openapi.models.operations.ListFlowSecurity security) throws Exception {
        return this.listFlow(request, security, null);
    }

    /**
     * Retrieve a list of all Flows.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFlowResponse listFlow(org.openapis.openapi.models.operations.ListFlowRequest request, org.openapis.openapi.models.operations.ListFlowSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Flows");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFlowRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFlowResponse res = new org.openapis.openapi.models.operations.ListFlowResponse(contentType, httpRes.statusCode()) {{
            listFlowResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFlowListFlowResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFlowListFlowResponse.class);
                res.listFlowResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Flows revisions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFlowRevisionResponse listFlowRevision(org.openapis.openapi.models.operations.ListFlowRevisionRequest request, org.openapis.openapi.models.operations.ListFlowRevisionSecurity security) throws Exception {
        return this.listFlowRevision(request, security, null);
    }

    /**
     * Retrieve a list of all Flows revisions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFlowRevisionResponse listFlowRevision(org.openapis.openapi.models.operations.ListFlowRevisionRequest request, org.openapis.openapi.models.operations.ListFlowRevisionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FLOW_REVISION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFlowRevisionRequest.class, baseUrl, "/v2/Flows/{Sid}/Revisions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFlowRevisionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFlowRevisionResponse res = new org.openapis.openapi.models.operations.ListFlowRevisionResponse(contentType, httpRes.statusCode()) {{
            listFlowRevisionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFlowRevisionListFlowRevisionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFlowRevisionListFlowRevisionResponse.class);
                res.listFlowRevisionResponse = out;
            }
        }

        return res;
    }

    /**
     * Update the status of an Execution to `ended`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateExecutionResponse updateExecution(org.openapis.openapi.models.operations.UpdateExecutionRequest request, org.openapis.openapi.models.operations.UpdateExecutionSecurity security) throws Exception {
        return this.updateExecution(request, security, null);
    }

    /**
     * Update the status of an Execution to `ended`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateExecutionResponse updateExecution(org.openapis.openapi.models.operations.UpdateExecutionRequest request, org.openapis.openapi.models.operations.UpdateExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateExecutionRequest.class, baseUrl, "/v2/Flows/{FlowSid}/Executions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateExecutionResponse res = new org.openapis.openapi.models.operations.UpdateExecutionResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowExecution = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowExecution out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowExecution.class);
                res.studioV2FlowExecution = out;
            }
        }

        return res;
    }

    /**
     * Update a Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFlowResponse updateFlow(org.openapis.openapi.models.operations.UpdateFlowRequest request, org.openapis.openapi.models.operations.UpdateFlowSecurity security) throws Exception {
        return this.updateFlow(request, security, null);
    }

    /**
     * Update a Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFlowResponse updateFlow(org.openapis.openapi.models.operations.UpdateFlowRequest request, org.openapis.openapi.models.operations.UpdateFlowSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_FLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateFlowRequest.class, baseUrl, "/v2/Flows/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFlowResponse res = new org.openapis.openapi.models.operations.UpdateFlowResponse(contentType, httpRes.statusCode()) {{
            studioV2Flow = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2Flow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2Flow.class);
                res.studioV2Flow = out;
            }
        }

        return res;
    }

    /**
     * Validate flow JSON definition
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFlowValidateResponse updateFlowValidate(org.openapis.openapi.models.operations.UpdateFlowValidateUpdateFlowValidateRequest request, org.openapis.openapi.models.operations.UpdateFlowValidateSecurity security) throws Exception {
        return this.updateFlowValidate(request, security, null);
    }

    /**
     * Validate flow JSON definition
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFlowValidateResponse updateFlowValidate(org.openapis.openapi.models.operations.UpdateFlowValidateUpdateFlowValidateRequest request, org.openapis.openapi.models.operations.UpdateFlowValidateSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_FLOW_VALIDATE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Flows/Validate");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFlowValidateResponse res = new org.openapis.openapi.models.operations.UpdateFlowValidateResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowValidate = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowValidate out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowValidate.class);
                res.studioV2FlowValidate = out;
            }
        }

        return res;
    }

    /**
     * Update flow test users
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateTestUserResponse updateTestUser(org.openapis.openapi.models.operations.UpdateTestUserRequest request, org.openapis.openapi.models.operations.UpdateTestUserSecurity security) throws Exception {
        return this.updateTestUser(request, security, null);
    }

    /**
     * Update flow test users
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateTestUserResponse updateTestUser(org.openapis.openapi.models.operations.UpdateTestUserRequest request, org.openapis.openapi.models.operations.UpdateTestUserSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_TEST_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTestUserRequest.class, baseUrl, "/v2/Flows/{Sid}/TestUsers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTestUserResponse res = new org.openapis.openapi.models.operations.UpdateTestUserResponse(contentType, httpRes.statusCode()) {{
            studioV2FlowTestUser = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV2FlowTestUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV2FlowTestUser.class);
                res.studioV2FlowTestUser = out;
            }
        }

        return res;
    }
}