"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import option as shared_option
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MethodSyntaxEnum(str, Enum):
    r"""The source syntax of this method."""
    SYNTAX_PROTO2 = 'SYNTAX_PROTO2'
    SYNTAX_PROTO3 = 'SYNTAX_PROTO3'
    SYNTAX_EDITIONS = 'SYNTAX_EDITIONS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Method:
    r"""Method represents a method of an API interface."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The simple name of this method."""  
    options: Optional[list[shared_option.Option]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Any metadata attached to the method."""  
    request_streaming: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestStreaming'), 'exclude': lambda f: f is None }})
    r"""If true, the request is streamed."""  
    request_type_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestTypeUrl'), 'exclude': lambda f: f is None }})
    r"""A URL of the input message type."""  
    response_streaming: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseStreaming'), 'exclude': lambda f: f is None }})
    r"""If true, the response is streamed."""  
    response_type_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseTypeUrl'), 'exclude': lambda f: f is None }})
    r"""The URL of the output message type."""  
    syntax: Optional[MethodSyntaxEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syntax'), 'exclude': lambda f: f is None }})
    r"""The source syntax of this method."""  
    