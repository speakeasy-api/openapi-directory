"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class APIDimensionFilterDimensionEnum(str, Enum):
    QUERY = 'QUERY'
    PAGE = 'PAGE'
    COUNTRY = 'COUNTRY'
    DEVICE = 'DEVICE'
    SEARCH_APPEARANCE = 'SEARCH_APPEARANCE'

class APIDimensionFilterOperatorEnum(str, Enum):
    EQUALS = 'EQUALS'
    NOT_EQUALS = 'NOT_EQUALS'
    CONTAINS = 'CONTAINS'
    NOT_CONTAINS = 'NOT_CONTAINS'
    INCLUDING_REGEX = 'INCLUDING_REGEX'
    EXCLUDING_REGEX = 'EXCLUDING_REGEX'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APIDimensionFilter:
    r"""A filter test to be applied to each row in the data set, where a match can return the row. Filters are string comparisons, and values and dimension names are not case-sensitive. Individual filters are either AND'ed or OR'ed within their parent filter group, according to the group's group type. You do not need to group by a specified dimension to filter against it."""
    
    dimension: Optional[APIDimensionFilterDimensionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension'), 'exclude': lambda f: f is None }})  
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expression'), 'exclude': lambda f: f is None }})  
    operator: Optional[APIDimensionFilterOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operator'), 'exclude': lambda f: f is None }})  
    