/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * StreamSession - Object that captures the Amazon IVS configuration that the customer provisioned, the ingest configurations that the broadcaster used, and the most recent Amazon IVS stream events it encountered.
 */
public class StreamSession {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    public Channel channel;
    public StreamSession withChannel(Channel channel) {
        this.channel = channel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;
    public StreamSession withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ingestConfiguration")
    public IngestConfiguration ingestConfiguration;
    public StreamSession withIngestConfiguration(IngestConfiguration ingestConfiguration) {
        this.ingestConfiguration = ingestConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordingConfiguration")
    public RecordingConfiguration recordingConfiguration;
    public StreamSession withRecordingConfiguration(RecordingConfiguration recordingConfiguration) {
        this.recordingConfiguration = recordingConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;
    public StreamSession withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamId")
    public String streamId;
    public StreamSession withStreamId(String streamId) {
        this.streamId = streamId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("truncatedEvents")
    public StreamEvent[] truncatedEvents;
    public StreamSession withTruncatedEvents(StreamEvent[] truncatedEvents) {
        this.truncatedEvents = truncatedEvents;
        return this;
    }
    
}
