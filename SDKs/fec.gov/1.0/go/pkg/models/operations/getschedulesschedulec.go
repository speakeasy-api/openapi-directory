// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
	"time"
)

type GetSchedulesScheduleCQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// Name of candidate running for office
	CandidateName []string `queryParam:"style=form,explode=true,name=candidate_name"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// An unique identifier for each page where the electronic or paper filing is reported.
	//
	ImageNumber []string `queryParam:"style=form,explode=true,name=image_number"`
	// Index of last result from previous page
	LastIndex *int `queryParam:"style=form,explode=true,name=last_index"`
	// Filter for form and line number using the following format:
	// `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter
	// down to all entries from form `F3X` line number `16`.
	//
	LineNumber *string `queryParam:"style=form,explode=true,name=line_number"`
	// Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,               other line of credit, or personal funds of the candidate
	LoanSourceName []string `queryParam:"style=form,explode=true,name=loan_source_name"`
	// Filter for all amounts less than a value.
	//
	MaxAmount      *string `queryParam:"style=form,explode=true,name=max_amount"`
	MaxImageNumber *string `queryParam:"style=form,explode=true,name=max_image_number"`
	// Maximum incurred date
	//
	MaxIncurredDate *types.Date `queryParam:"style=form,explode=true,name=max_incurred_date"`
	// Maximum payment to date
	//
	MaxPaymentToDate *int `queryParam:"style=form,explode=true,name=max_payment_to_date"`
	// Filter for all amounts greater than a value.
	//
	MinAmount      *string `queryParam:"style=form,explode=true,name=min_amount"`
	MinImageNumber *string `queryParam:"style=form,explode=true,name=min_image_number"`
	// Minimum incurred date
	//
	MinIncurredDate *types.Date `queryParam:"style=form,explode=true,name=min_incurred_date"`
	// Minimum payment to date
	//
	MinPaymentToDate *int `queryParam:"style=form,explode=true,name=min_payment_to_date"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
}

type GetSchedulesScheduleCRequest struct {
	QueryParams GetSchedulesScheduleCQueryParams
}

type GetSchedulesScheduleCDefaultApplicationJSONResults struct {
	ActionCode         *string `json:"action_code,omitempty"`
	ActionCodeFull     *string `json:"action_code_full,omitempty"`
	CandidateFirstName *string `json:"candidate_first_name,omitempty"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID         *string `json:"candidate_id,omitempty"`
	CandidateLastName   *string `json:"candidate_last_name,omitempty"`
	CandidateMiddleName *string `json:"candidate_middle_name,omitempty"`
	// Name of candidate running for office
	CandidateName   *string `json:"candidate_name,omitempty"`
	CandidateOffice *string `json:"candidate_office,omitempty"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	CandidateOfficeDistrict  *string                  `json:"candidate_office_district,omitempty"`
	CandidateOfficeFull      *string                  `json:"candidate_office_full,omitempty"`
	CandidateOfficeState     *string                  `json:"candidate_office_state,omitempty"`
	CandidateOfficeStateFull *string                  `json:"candidate_office_state_full,omitempty"`
	CandidatePrefix          *string                  `json:"candidate_prefix,omitempty"`
	CandidateSuffix          *string                  `json:"candidate_suffix,omitempty"`
	Committee                *shared.CommitteeHistory `json:"committee,omitempty"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID         *string `json:"committee_id,omitempty"`
	Cycle               *int    `json:"cycle,omitempty"`
	DueDateTerms        *string `json:"due_date_terms,omitempty"`
	ElectionType        *string `json:"election_type,omitempty"`
	ElectionTypeFull    *string `json:"election_type_full,omitempty"`
	EntityType          *string `json:"entity_type,omitempty"`
	EntityTypeFull      *string `json:"entity_type_full,omitempty"`
	FecCommitteeID      *string `json:"fec_committee_id,omitempty"`
	FecElectionTypeFull *string `json:"fec_election_type_full,omitempty"`
	FecElectionTypeYear *string `json:"fec_election_type_year,omitempty"`
	FileNumber          *int    `json:"file_number,omitempty"`
	FilingForm          *string `json:"filing_form,omitempty"`
	// An unique identifier for each page where the electronic or paper filing is reported.
	//
	ImageNumber          *string     `json:"image_number,omitempty"`
	IncurredDate         *types.Date `json:"incurred_date,omitempty"`
	InterestRateTerms    *string     `json:"interest_rate_terms,omitempty"`
	LineNumber           *string     `json:"line_number,omitempty"`
	LinkID               *int        `json:"link_id,omitempty"`
	LoadDate             *time.Time  `json:"load_date,omitempty"`
	LoanBalance          *float32    `json:"loan_balance,omitempty"`
	LoanSourceCity       *string     `json:"loan_source_city,omitempty"`
	LoanSourceFirstName  *string     `json:"loan_source_first_name,omitempty"`
	LoanSourceLastName   *string     `json:"loan_source_last_name,omitempty"`
	LoanSourceMiddleName *string     `json:"loan_source_middle_name,omitempty"`
	// Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,               other line of credit, or personal funds of the candidate
	LoanSourceName     *string  `json:"loan_source_name,omitempty"`
	LoanSourcePrefix   *string  `json:"loan_source_prefix,omitempty"`
	LoanSourceState    *string  `json:"loan_source_state,omitempty"`
	LoanSourceStreet1  *string  `json:"loan_source_street_1,omitempty"`
	LoanSourceStreet2  *string  `json:"loan_source_street_2,omitempty"`
	LoanSourceSuffix   *string  `json:"loan_source_suffix,omitempty"`
	LoanSourceZip      *int     `json:"loan_source_zip,omitempty"`
	MemoCode           *string  `json:"memo_code,omitempty"`
	MemoText           *string  `json:"memo_text,omitempty"`
	OriginalLoanAmount *float32 `json:"original_loan_amount,omitempty"`
	OriginalSubID      *int     `json:"original_sub_id,omitempty"`
	PaymentToDate      *float32 `json:"payment_to_date,omitempty"`
	PdfURL             *string  `json:"pdf_url,omitempty"`
	PersonallyFunded   *string  `json:"personally_funded,omitempty"`
	// Name of report where the underlying data comes from:
	//     - 10D Pre-Election
	//     - 10G Pre-General
	//     - 10P Pre-Primary
	//     - 10R Pre-Run-Off
	//     - 10S Pre-Special
	//     - 12C Pre-Convention
	//     - 12G Pre-General
	//     - 12P Pre-Primary
	//     - 12R Pre-Run-Off
	//     - 12S Pre-Special
	//     - 30D Post-Election
	//     - 30G Post-General
	//     - 30P Post-Primary
	//     - 30R Post-Run-Off
	//     - 30S Post-Special
	//     - 60D Post-Convention
	//     - M1  January Monthly
	//     - M10 October Monthly
	//     - M11 November Monthly
	//     - M12 December Monthly
	//     - M2  February Monthly
	//     - M3  March Monthly
	//     - M4  April Monthly
	//     - M5  May Monthly
	//     - M6  June Monthly
	//     - M7  July Monthly
	//     - M8  August Monthly
	//     - M9  September Monthly
	//     - MY  Mid-Year Report
	//     - Q1  April Quarterly
	//     - Q2  July Quarterly
	//     - Q3  October Quarterly
	//     - TER Termination Report
	//     - YE  Year-End
	//     - ADJ COMP ADJUST AMEND
	//     - CA  COMPREHENSIVE AMEND
	//     - 90S Post Inaugural Supplement
	//     - 90D Post Inaugural
	//     - 48  48 Hour Notification
	//     - 24  24 Hour Notification
	//     - M7S July Monthly/Semi-Annual
	//     - MSA Monthly Semi-Annual (MY)
	//     - MYS Monthly Year End/Semi-Annual
	//     - Q2S July Quarterly/Semi-Annual
	//     - QSA Quarterly Semi-Annual (MY)
	//     - QYS Quarterly Year End/Semi-Annual
	//     - QYE Quarterly Semi-Annual (YE)
	//     - QMS Quarterly Mid-Year/ Semi-Annual
	//     - MSY Monthly Semi-Annual (YE)
	//
	ReportType *string `json:"report_type,omitempty"`
	// Forms with coverage date -
	//     year from the coverage ending date.
	// Forms without coverage date -
	//     year from the receipt date.
	//
	ReportYear          *int    `json:"report_year,omitempty"`
	ScheduleALineNumber *int    `json:"schedule_a_line_number,omitempty"`
	ScheduleType        *string `json:"schedule_type,omitempty"`
	ScheduleTypeFull    *string `json:"schedule_type_full,omitempty"`
	SecuredInd          *string `json:"secured_ind,omitempty"`
	SubID               *string `json:"sub_id,omitempty"`
	TransactionID       *string `json:"transaction_id,omitempty"`
}

type GetSchedulesScheduleCDefaultApplicationJSON struct {
	Pagination *shared.OffsetInfo                                   `json:"pagination,omitempty"`
	Results    []GetSchedulesScheduleCDefaultApplicationJSONResults `json:"results,omitempty"`
}

type GetSchedulesScheduleCResponse struct {
	ContentType                                       string
	StatusCode                                        int
	RawResponse                                       *http.Response
	GetSchedulesScheduleCDefaultApplicationJSONObject *GetSchedulesScheduleCDefaultApplicationJSON
}
