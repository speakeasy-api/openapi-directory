// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PredictionQueryTokenOrderByEnum string

const (
	PredictionQueryTokenOrderByEnumNewest    PredictionQueryTokenOrderByEnum = "Newest"
	PredictionQueryTokenOrderByEnumOldest    PredictionQueryTokenOrderByEnum = "Oldest"
	PredictionQueryTokenOrderByEnumSuggested PredictionQueryTokenOrderByEnum = "Suggested"
)

func (e *PredictionQueryTokenOrderByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Newest":
		fallthrough
	case "Oldest":
		fallthrough
	case "Suggested":
		*e = PredictionQueryTokenOrderByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PredictionQueryTokenOrderByEnum: %s", s)
	}
}

// PredictionQueryToken - Parameters used to query the predictions. Limited to combining 2 tags.
type PredictionQueryToken struct {
	Application  *string                          `json:"application,omitempty" form:"name=application"`
	Continuation *string                          `json:"continuation,omitempty" form:"name=continuation"`
	EndTime      *time.Time                       `json:"endTime,omitempty" form:"name=endTime"`
	IterationID  *string                          `json:"iterationId,omitempty" form:"name=iterationId"`
	MaxCount     *int                             `json:"maxCount,omitempty" form:"name=maxCount"`
	OrderBy      *PredictionQueryTokenOrderByEnum `json:"orderBy,omitempty" form:"name=orderBy"`
	Session      *string                          `json:"session,omitempty" form:"name=session"`
	StartTime    *time.Time                       `json:"startTime,omitempty" form:"name=startTime"`
	Tags         []PredictionQueryTag             `json:"tags,omitempty" form:"name=tags,json"`
}
