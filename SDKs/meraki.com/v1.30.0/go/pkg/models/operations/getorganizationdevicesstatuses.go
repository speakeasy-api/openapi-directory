// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationDevicesStatusesPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

type GetOrganizationDevicesStatusesProductTypesEnum string

const (
	GetOrganizationDevicesStatusesProductTypesEnumAppliance       GetOrganizationDevicesStatusesProductTypesEnum = "appliance"
	GetOrganizationDevicesStatusesProductTypesEnumCamera          GetOrganizationDevicesStatusesProductTypesEnum = "camera"
	GetOrganizationDevicesStatusesProductTypesEnumCellularGateway GetOrganizationDevicesStatusesProductTypesEnum = "cellularGateway"
	GetOrganizationDevicesStatusesProductTypesEnumSensor          GetOrganizationDevicesStatusesProductTypesEnum = "sensor"
	GetOrganizationDevicesStatusesProductTypesEnumSwitch          GetOrganizationDevicesStatusesProductTypesEnum = "switch"
	GetOrganizationDevicesStatusesProductTypesEnumSystemsManager  GetOrganizationDevicesStatusesProductTypesEnum = "systemsManager"
	GetOrganizationDevicesStatusesProductTypesEnumWireless        GetOrganizationDevicesStatusesProductTypesEnum = "wireless"
)

func (e *GetOrganizationDevicesStatusesProductTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "sensor":
		fallthrough
	case "switch":
		fallthrough
	case "systemsManager":
		fallthrough
	case "wireless":
		*e = GetOrganizationDevicesStatusesProductTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesStatusesProductTypesEnum: %s", s)
	}
}

type GetOrganizationDevicesStatusesStatusesEnum string

const (
	GetOrganizationDevicesStatusesStatusesEnumAlerting GetOrganizationDevicesStatusesStatusesEnum = "alerting"
	GetOrganizationDevicesStatusesStatusesEnumDormant  GetOrganizationDevicesStatusesStatusesEnum = "dormant"
	GetOrganizationDevicesStatusesStatusesEnumOffline  GetOrganizationDevicesStatusesStatusesEnum = "offline"
	GetOrganizationDevicesStatusesStatusesEnumOnline   GetOrganizationDevicesStatusesStatusesEnum = "online"
)

func (e *GetOrganizationDevicesStatusesStatusesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alerting":
		fallthrough
	case "dormant":
		fallthrough
	case "offline":
		fallthrough
	case "online":
		*e = GetOrganizationDevicesStatusesStatusesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesStatusesStatusesEnum: %s", s)
	}
}

// GetOrganizationDevicesStatusesTagsFilterTypeEnum - An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
type GetOrganizationDevicesStatusesTagsFilterTypeEnum string

const (
	GetOrganizationDevicesStatusesTagsFilterTypeEnumWithAllTags GetOrganizationDevicesStatusesTagsFilterTypeEnum = "withAllTags"
	GetOrganizationDevicesStatusesTagsFilterTypeEnumWithAnyTags GetOrganizationDevicesStatusesTagsFilterTypeEnum = "withAnyTags"
)

func (e *GetOrganizationDevicesStatusesTagsFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "withAllTags":
		fallthrough
	case "withAnyTags":
		*e = GetOrganizationDevicesStatusesTagsFilterTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesStatusesTagsFilterTypeEnum: %s", s)
	}
}

type GetOrganizationDevicesStatusesQueryParams struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Optional parameter to filter devices by models.
	Models []string `queryParam:"style=form,explode=false,name=models"`
	// Optional parameter to filter devices by network ids.
	NetworkIds []string `queryParam:"style=form,explode=false,name=networkIds"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
	ProductTypes []GetOrganizationDevicesStatusesProductTypesEnum `queryParam:"style=form,explode=false,name=productTypes"`
	// Optional parameter to filter devices by serials.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// Optional parameter to filter devices by statuses. Valid statuses are ["online", "alerting", "offline", "dormant"].
	Statuses []GetOrganizationDevicesStatusesStatusesEnum `queryParam:"style=form,explode=false,name=statuses"`
	// An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
	Tags []string `queryParam:"style=form,explode=false,name=tags"`
	// An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
	TagsFilterType *GetOrganizationDevicesStatusesTagsFilterTypeEnum `queryParam:"style=form,explode=true,name=tagsFilterType"`
}

type GetOrganizationDevicesStatusesRequest struct {
	PathParams  GetOrganizationDevicesStatusesPathParams
	QueryParams GetOrganizationDevicesStatusesQueryParams
}

// GetOrganizationDevicesStatuses200ApplicationJSONComponents - Components
type GetOrganizationDevicesStatuses200ApplicationJSONComponents struct {
	// Power Supplies
	PowerSupplies []string `json:"powerSupplies,omitempty"`
}

// GetOrganizationDevicesStatuses200ApplicationJSON - Successful operation
type GetOrganizationDevicesStatuses200ApplicationJSON struct {
	// Components
	Components *GetOrganizationDevicesStatuses200ApplicationJSONComponents `json:"components,omitempty"`
	// IP Gateway
	Gateway *string `json:"gateway,omitempty"`
	// IP Type
	IPType *string `json:"ipType,omitempty"`
	// LAN IP Address
	LanIP *string `json:"lanIp,omitempty"`
	// Device Last Reported Location
	LastReportedAt *string `json:"lastReportedAt,omitempty"`
	// MAC Address
	Mac *string `json:"mac,omitempty"`
	// Model
	Model *string `json:"model,omitempty"`
	// Device Name
	Name *string `json:"name,omitempty"`
	// Network ID
	NetworkID *string `json:"networkId,omitempty"`
	// Primary DNS
	PrimaryDNS *string `json:"primaryDns,omitempty"`
	// Product Type
	ProductType *string `json:"productType,omitempty"`
	// Public IP Address
	PublicIP *string `json:"publicIp,omitempty"`
	// Secondary DNS
	SecondaryDNS *string `json:"secondaryDns,omitempty"`
	// Device Serial Number
	Serial *string `json:"serial,omitempty"`
	// Device Status
	Status *string `json:"status,omitempty"`
	// Tags
	Tags []string `json:"tags,omitempty"`
}

type GetOrganizationDevicesStatusesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationDevicesStatuses200ApplicationJSONObject *GetOrganizationDevicesStatuses200ApplicationJSON
}
