"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ProxyGetPaymentTransactionLogGatewayStateEnum(str, Enum):
    r"""The state of the transaction at the payment gateway."""
    MARKED_FOR_SUBMISSION = 'MarkedForSubmission'
    SUBMITTED = 'Submitted'
    SETTLED = 'Settled'
    NOT_SUBMITTED = 'NotSubmitted'
    FAILED_TO_SETTLE = 'FailedToSettle'

class ProxyGetPaymentTransactionLogGatewayTransactionTypeEnum(str, Enum):
    r"""The type of the transaction, either making a payment, or canceling a payment."""
    AUTHORIZATION = 'Authorization'
    SALE = 'Sale'
    VOID = 'Void'
    INQUIRY = 'Inquiry'
    VOID_AUTH = 'VoidAuth'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyGetPaymentTransactionLog:
    
    avs_response_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AVSResponseCode'), 'exclude': lambda f: f is None }})
    r"""The response code returned by the payment gateway referring to the AVS international response of the payment transaction."""  
    batch_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BatchId'), 'exclude': lambda f: f is None }})
    r"""The ID of the batch used to send the transaction if the request was sent in a batch."""  
    cvv_response_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CVVResponseCode'), 'exclude': lambda f: f is None }})
    r"""The response code returned by the payment gateway referring to the CVV international response of the payment transaction."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Gateway'), 'exclude': lambda f: f is None }})
    r"""The name of the payment gateway used to transact the current payment transaction log."""  
    gateway_reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayReasonCode'), 'exclude': lambda f: f is None }})
    r"""The code returned by the payment gateway for the payment. This code is gateway-dependent."""  
    gateway_reason_code_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayReasonCodeDescription'), 'exclude': lambda f: f is None }})
    r"""The message returned by the payment gateway for the payment. This message is gateway-dependent."""  
    gateway_state: Optional[ProxyGetPaymentTransactionLogGatewayStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayState'), 'exclude': lambda f: f is None }})
    r"""The state of the transaction at the payment gateway."""  
    gateway_transaction_type: Optional[ProxyGetPaymentTransactionLogGatewayTransactionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayTransactionType'), 'exclude': lambda f: f is None }})
    r"""The type of the transaction, either making a payment, or canceling a payment."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""The ID of the payment transaction log."""  
    payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentId'), 'exclude': lambda f: f is None }})
    r"""The ID of the payment wherein the payment transaction log was recorded."""  
    request_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestString'), 'exclude': lambda f: f is None }})
    r"""The payment transaction request string sent to the payment gateway."""  
    response_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResponseString'), 'exclude': lambda f: f is None }})
    r"""The payment transaction response string returned by the payment gateway."""  
    transaction_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransactionDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The transaction date when the payment was performed."""  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransactionId'), 'exclude': lambda f: f is None }})
    r"""The transaction ID returned by the payment gateway. This field is used to reconcile payment transactions between the payment gateway and records in Zuora."""  
    