/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ScoreCommentContext } from "./scorecommentcontext";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The type of the comment
 */
export enum ScoreCommentTypeEnum {
  Document = "document",
  Inline = "inline",
}

/**
 * Comment added on a sheet music
 */
export class ScoreComment extends SpeakeasyBase {
  /**
   * The comment text that can includes mentions using the following
   *
   * @remarks
   * format: `@[id:username]`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "context" })
  @Type(() => ScoreCommentContext)
  context?: ScoreCommentContext;

  /**
   * The date when the comment was posted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date?: Date;

  /**
   * The comment unique identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The list of user identifier mentioned on the score
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mentions" })
  mentions?: string[];

  /**
   * The date of the last comment modification
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modificationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modificationDate?: Date;

  /**
   * A raw version of the comment, that can be displayed without parsing
   *
   * @remarks
   * the mentions.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rawComment" })
  rawComment?: string;

  /**
   * When the comment is a reply to another comment, the unique identifier of the parent comment
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replyTo" })
  replyTo?: string;

  /**
   * For inline comments, the comment can be marked as resolved and will be hidden in the future responses
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resolved" })
  resolved?: boolean;

  /**
   * If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resolvedBy" })
  resolvedBy?: string;

  /**
   * The unique identifier of revision the comment was posted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revision" })
  revision?: string;

  /**
   * The unique identifier of the score where the comment was posted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "score" })
  score?: string;

  /**
   * `true  if the message has been detected as spam and hidden from other users
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spam" })
  spam?: boolean;

  /**
   * The type of the comment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ScoreCommentTypeEnum;

  /**
   * The author unique identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: string;
}
