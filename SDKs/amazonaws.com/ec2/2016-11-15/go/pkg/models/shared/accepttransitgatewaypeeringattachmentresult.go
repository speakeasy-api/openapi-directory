// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentAccepterTgwInfo - Information about the accepter transit gateway.
type AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentAccepterTgwInfo struct {
	CoreNetworkID    *string
	OwnerID          *string
	Region           *string
	TransitGatewayID *string
}

// AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum - Describes whether dynamic routing is enabled or disabled for the transit gateway peering attachment.
type AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum string

const (
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnumEnable  AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum = "enable"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnumDisable AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum = "disable"
)

func (e *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enable":
		fallthrough
	case "disable":
		*e = AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum: %s", s)
	}
}

// AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptions - Details about the transit gateway peering attachment.
type AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptions struct {
	DynamicRouting *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum
}

// AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentRequesterTgwInfo - Information about the requester transit gateway.
type AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentRequesterTgwInfo struct {
	CoreNetworkID    *string
	OwnerID          *string
	Region           *string
	TransitGatewayID *string
}

// AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum - The state of the transit gateway peering attachment. Note that the <code>initiating</code> state has been deprecated.
type AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum string

const (
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumInitiating        AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "initiating"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumInitiatingRequest AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "initiatingRequest"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumPendingAcceptance AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "pendingAcceptance"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumRollingBack       AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "rollingBack"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumPending           AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "pending"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumAvailable         AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "available"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumModifying         AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "modifying"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumDeleting          AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "deleting"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumDeleted           AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "deleted"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumFailed            AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "failed"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumRejected          AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "rejected"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumRejecting         AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "rejecting"
	AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumFailing           AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "failing"
)

func (e *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "initiating":
		fallthrough
	case "initiatingRequest":
		fallthrough
	case "pendingAcceptance":
		fallthrough
	case "rollingBack":
		fallthrough
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "modifying":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		fallthrough
	case "failed":
		fallthrough
	case "rejected":
		fallthrough
	case "rejecting":
		fallthrough
	case "failing":
		*e = AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum: %s", s)
	}
}

// AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStatus - The status of the transit gateway peering attachment.
type AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStatus struct {
	Code    *string
	Message *string
}

// AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentTags - Describes a tag.
type AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentTags struct {
	Key   *string
	Value *string
}

// AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachment - The transit gateway peering attachment.
type AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachment struct {
	AccepterTgwInfo                    *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentAccepterTgwInfo
	AccepterTransitGatewayAttachmentID *string
	CreationTime                       *time.Time
	Options                            *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptions
	RequesterTgwInfo                   *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentRequesterTgwInfo
	State                              *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum
	Status                             *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStatus
	Tags                               []AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentTags
	TransitGatewayAttachmentID         *string
}

// AcceptTransitGatewayPeeringAttachmentResult - Success
type AcceptTransitGatewayPeeringAttachmentResult struct {
	TransitGatewayPeeringAttachment *AcceptTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachment
}
