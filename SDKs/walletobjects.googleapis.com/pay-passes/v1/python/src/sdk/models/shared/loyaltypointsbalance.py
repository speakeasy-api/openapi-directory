"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoyaltyPointsBalance:
    
    double: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('double'), 'exclude': lambda f: f is None }})
    r"""The double form of a balance. Only one of these subtypes (string, int, double, money) should be populated."""  
    int: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('int'), 'exclude': lambda f: f is None }})
    r"""The integer form of a balance. Only one of these subtypes (string, int, double, money) should be populated."""  
    money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('money'), 'exclude': lambda f: f is None }})  
    string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('string'), 'exclude': lambda f: f is None }})
    r"""The string form of a balance. Only one of these subtypes (string, int, double, money) should be populated."""  
    