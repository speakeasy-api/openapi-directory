<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Translates a large volume of document in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentResponse
     */
	public function translateProjectsLocationsBatchTranslateDocument(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}:batchTranslateDocument', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchTranslateDocumentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Translates a large volume of text in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextResponse
     */
	public function translateProjectsLocationsBatchTranslateText(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}:batchTranslateText', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchTranslateTextRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsBatchTranslateTextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Detects the language of text within a request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageResponse
     */
	public function translateProjectsLocationsDetectLanguage(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}:detectLanguage', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "detectLanguageRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsDetectLanguageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->detectLanguageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DetectLanguageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of supported languages for translation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesResponse
     */
	public function translateProjectsLocationsGetSupportedLanguages(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/supportedLanguages', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGetSupportedLanguagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supportedLanguages = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupportedLanguages', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a glossary and returns the long-running operation. Returns NOT_FOUND, if the project doesn't exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateResponse
     */
	public function translateProjectsLocationsGlossariesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/glossaries', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "glossaryInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListResponse
     */
	public function translateProjectsLocationsGlossariesList(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/glossaries', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsGlossariesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGlossariesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGlossariesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListResponse
     */
	public function translateProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelResponse
     */
	public function translateProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteResponse
     */
	public function translateProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetResponse
     */
	public function translateProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListResponse
     */
	public function translateProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitResponse
     */
	public function translateProjectsLocationsOperationsWait(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:wait', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "waitOperationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsOperationsWaitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Translates documents in synchronous mode.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentResponse
     */
	public function translateProjectsLocationsTranslateDocument(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}:translateDocument', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "translateDocumentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->translateDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TranslateDocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Translates input text and returns translated text.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextResponse
     */
	public function translateProjectsLocationsTranslateText(
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}:translateText', \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "translateTextRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateProjectsLocationsTranslateTextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->translateTextResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TranslateTextResponse', 'json');
            }
        }

        return $response;
    }
}