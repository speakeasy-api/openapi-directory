"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PubsubLocation:
    r"""Identifies a pubsub location to use for transferring data into or out of a streaming Dataflow job."""
    
    drop_late_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dropLateData'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the pipeline allows late-arriving data."""  
    id_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idLabel'), 'exclude': lambda f: f is None }})
    r"""If set, contains a pubsub label from which to extract record ids. If left empty, record deduplication will be strictly best effort."""  
    subscription: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription'), 'exclude': lambda f: f is None }})
    r"""A pubsub subscription, in the form of \\"pubsub.googleapis.com/subscriptions//\\" """  
    timestamp_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampLabel'), 'exclude': lambda f: f is None }})
    r"""If set, contains a pubsub label from which to extract record timestamps. If left empty, record timestamps will be generated upon arrival."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""A pubsub topic, in the form of \\"pubsub.googleapis.com/topics//\\" """  
    tracking_subscription: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingSubscription'), 'exclude': lambda f: f is None }})
    r"""If set, specifies the pubsub subscription that will be used for tracking custom time timestamps for watermark estimation."""  
    with_attributes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withAttributes'), 'exclude': lambda f: f is None }})
    r"""If true, then the client has requested to get pubsub attributes."""  
    