/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Subscription - A subscription to events on a collection.
 */
public class Subscription {
    /**
     * The URL where notifications should be delivered (must start with https://).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackUrl")
    public String callbackUrl;
    public Subscription withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * The collection to subscribe to. Allowed values are:  
     * - timeline - Changes in the timeline including insertion, deletion, and updates. 
     * - locations - Location updates. 
     * - settings - Settings updates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    public String collection;
    public Subscription withCollection(String collection) {
        this.collection = collection;
        return this;
    }
    
    /**
     * The ID of the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Subscription withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The type of resource. This is always mirror#subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Subscription withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * A notification delivered by the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notification")
    public Notification notification;
    public Subscription withNotification(Notification notification) {
        this.notification = notification;
        return this;
    }
    
    /**
     * A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:  
     * - UPDATE - The item has been updated. 
     * - INSERT - A new item has been inserted. 
     * - DELETE - The item has been deleted. 
     * - MENU_ACTION - A custom menu item has been triggered by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operation")
    public String[] operation;
    public Subscription withOperation(String[] operation) {
        this.operation = operation;
        return this;
    }
    
    /**
     * The time at which this subscription was last modified, formatted according to RFC 3339.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated")
    public OffsetDateTime updated;
    public Subscription withUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }
    
    /**
     * An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userToken")
    public String userToken;
    public Subscription withUserToken(String userToken) {
        this.userToken = userToken;
        return this;
    }
    
    /**
     * A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verifyToken")
    public String verifyToken;
    public Subscription withVerifyToken(String verifyToken) {
        this.verifyToken = verifyToken;
        return this;
    }
    
}
