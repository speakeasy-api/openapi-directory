<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PartialGroupByKeyInstruction - An instruction that does a partial group-by-key. One input and one output.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PartialGroupByKeyInstruction
{
    /**
     * An input of an instruction, as a reference to an output of a producer instruction.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\InstructionInput $input
     */
	#[\JMS\Serializer\Annotation\SerializedName('input')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\InstructionInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?InstructionInput $input = null;
    
    /**
     * The codec to use for interpreting an element in the input PTable.
     * 
     * @var ?array<string, mixed> $inputElementCodec
     */
	#[\JMS\Serializer\Annotation\SerializedName('inputElementCodec')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $inputElementCodec = null;
    
    /**
     * If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues.
     * 
     * @var ?string $originalCombineValuesInputStoreName
     */
	#[\JMS\Serializer\Annotation\SerializedName('originalCombineValuesInputStoreName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $originalCombineValuesInputStoreName = null;
    
    /**
     * If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction.
     * 
     * @var ?string $originalCombineValuesStepName
     */
	#[\JMS\Serializer\Annotation\SerializedName('originalCombineValuesStepName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $originalCombineValuesStepName = null;
    
    /**
     * Zero or more side inputs.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SideInputInfo> $sideInputs
     */
	#[\JMS\Serializer\Annotation\SerializedName('sideInputs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SideInputInfo>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $sideInputs = null;
    
    /**
     * The value combining function to invoke.
     * 
     * @var ?array<string, mixed> $valueCombiningFn
     */
	#[\JMS\Serializer\Annotation\SerializedName('valueCombiningFn')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $valueCombiningFn = null;
    
	public function __construct()
	{
		$this->input = null;
		$this->inputElementCodec = null;
		$this->originalCombineValuesInputStoreName = null;
		$this->originalCombineValuesStepName = null;
		$this->sideInputs = null;
		$this->valueCombiningFn = null;
	}
}
