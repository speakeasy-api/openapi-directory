<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class NetworkAttachments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all NetworkAttachment resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListResponse
     */
	public function computeNetworkAttachmentsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/networkAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkAttachmentAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkAttachmentAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified NetworkAttachment in the given scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteResponse
     */
	public function computeNetworkAttachmentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified NetworkAttachment resource in the given scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetResponse
     */
	public function computeNetworkAttachmentsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkAttachment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkAttachment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicyResponse
     */
	public function computeNetworkAttachmentsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a NetworkAttachment in the specified project in the given scope using the parameters that are included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertResponse
     */
	public function computeNetworkAttachmentsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkAttachment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the NetworkAttachments for a project in the given scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListResponse
     */
	public function computeNetworkAttachmentsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkAttachmentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkAttachmentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified NetworkAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchResponse
     */
	public function computeNetworkAttachmentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkAttachment1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicyResponse
     */
	public function computeNetworkAttachmentsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkAttachments/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsResponse
     */
	public function computeNetworkAttachmentsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkAttachments/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkAttachmentsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}