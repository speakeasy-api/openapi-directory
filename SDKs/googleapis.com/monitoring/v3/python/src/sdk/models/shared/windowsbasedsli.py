"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import metricrange as shared_metricrange
from ..shared import performancethreshold as shared_performancethreshold
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WindowsBasedSli:
    r"""A WindowsBasedSli defines good_service as the count of time windows for which the provided service was of good quality. Criteria for determining if service was good are embedded in the window_criterion."""
    
    good_bad_metric_filter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('goodBadMetricFilter'), 'exclude': lambda f: f is None }})
    r"""A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries with ValueType = BOOL. The window is good if any true values appear in the window."""  
    good_total_ratio_threshold: Optional[shared_performancethreshold.PerformanceThreshold] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('goodTotalRatioThreshold'), 'exclude': lambda f: f is None }})
    r"""A PerformanceThreshold is used when each window is good when that window has a sufficiently high performance."""  
    metric_mean_in_range: Optional[shared_metricrange.MetricRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricMeanInRange'), 'exclude': lambda f: f is None }})
    r"""A MetricRange is used when each window is good when the value x of a single TimeSeries satisfies range.min <= x <= range.max. The provided TimeSeries must have ValueType = INT64 or ValueType = DOUBLE and MetricKind = GAUGE."""  
    metric_sum_in_range: Optional[shared_metricrange.MetricRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricSumInRange'), 'exclude': lambda f: f is None }})
    r"""A MetricRange is used when each window is good when the value x of a single TimeSeries satisfies range.min <= x <= range.max. The provided TimeSeries must have ValueType = INT64 or ValueType = DOUBLE and MetricKind = GAUGE."""  
    window_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windowPeriod'), 'exclude': lambda f: f is None }})
    r"""Duration over which window quality is evaluated. Must be an integer fraction of a day and at least 60s."""  
    