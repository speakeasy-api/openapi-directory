/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ProductModel } from "./productmodel";
import { RolloutRuleComparatorEnum } from "./rolloutrulecomparatorenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * When the creation was successful.
 */
export class SegmentModel extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "comparator" })
  comparator?: RolloutRuleComparatorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "comparisonAttribute" })
  comparisonAttribute?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comparisonValue" })
  comparisonValue?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "creatorEmail" })
  creatorEmail?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "creatorFullName" })
  creatorFullName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdaterEmail" })
  lastUpdaterEmail?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdaterFullName" })
  lastUpdaterFullName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "product" })
  @Type(() => ProductModel)
  product?: ProductModel;

  @SpeakeasyMetadata()
  @Expose({ name: "segmentId" })
  segmentId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;
}
