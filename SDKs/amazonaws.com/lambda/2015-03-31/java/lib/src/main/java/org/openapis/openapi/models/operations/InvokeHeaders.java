/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class InvokeHeaders {
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;
    public InvokeHeaders withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    /**
     * Up to 3,583 bytes of base64-encoded data about the invoking client to pass to the function in the context object.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Client-Context")
    public String xAmzClientContext;
    public InvokeHeaders withXAmzClientContext(String xAmzClientContext) {
        this.xAmzClientContext = xAmzClientContext;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;
    public InvokeHeaders withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;
    public InvokeHeaders withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;
    public InvokeHeaders withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    /**
     * &lt;p&gt;Choose from the following options.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestResponse&lt;/code&gt; (default) \u2013 Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API response includes the function response and additional data.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Event&lt;/code&gt; \u2013 Invoke the function asynchronously. Send events that fail multiple times to the function's dead-letter queue (if one is configured). The API response only includes a status code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DryRun&lt;/code&gt; \u2013 Validate parameter values and verify that the user or role has permission to invoke the function.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Invocation-Type")
    public InvokeXAmzInvocationTypeEnum xAmzInvocationType;
    public InvokeHeaders withXAmzInvocationType(InvokeXAmzInvocationTypeEnum xAmzInvocationType) {
        this.xAmzInvocationType = xAmzInvocationType;
        return this;
    }
    
    /**
     * Set to &lt;code&gt;Tail&lt;/code&gt; to include the execution log in the response. Applies to synchronously invoked functions only.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Log-Type")
    public InvokeXAmzLogTypeEnum xAmzLogType;
    public InvokeHeaders withXAmzLogType(InvokeXAmzLogTypeEnum xAmzLogType) {
        this.xAmzLogType = xAmzLogType;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;
    public InvokeHeaders withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;
    public InvokeHeaders withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;
    public InvokeHeaders withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
}
