<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Platforms 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an idea activity entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeaActivitiesCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeaActivitiesCreateResponse
     */
	public function ideahubPlatformsPropertiesIdeaActivitiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeaActivitiesCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeaActivitiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/ideaActivities', \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeaActivitiesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleSearchIdeahubV1betaIdeaActivity", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeaActivitiesCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeaActivitiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleSearchIdeahubV1betaIdeaActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleSearchIdeahubV1betaIdeaActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List ideas for a given Creator and filter and sort options.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeasListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeasListResponse
     */
	public function ideahubPlatformsPropertiesIdeasList(
        \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeasListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/ideas', \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeasListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesIdeasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleSearchIdeahubV1betaListIdeasResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleSearchIdeahubV1betaListIdeasResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns which locales ideas are available in for a given Creator.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesLocalesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesLocalesListResponse
     */
	public function ideahubPlatformsPropertiesLocalesList(
        \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesLocalesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesLocalesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/locales', \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesLocalesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesLocalesListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesLocalesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleSearchIdeahubV1betaListAvailableLocalesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleSearchIdeahubV1betaListAvailableLocalesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a topic state resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesTopicStatesPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesTopicStatesPatchResponse
     */
	public function ideahubPlatformsPropertiesTopicStatesPatch(
        \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesTopicStatesPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesTopicStatesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesTopicStatesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleSearchIdeahubV1betaTopicState", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesTopicStatesPatchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdeahubPlatformsPropertiesTopicStatesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleSearchIdeahubV1betaTopicState = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleSearchIdeahubV1betaTopicState', 'json');
            }
        }

        return $response;
    }
}