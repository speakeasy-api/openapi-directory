/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UspsAddress - Standard USA Address
 */
public class UspsAddress {
    /**
     * A descriptive code used to identify the type of address secondary range information in the Address Secondary Range field. 
     * This code may be useful in address matching, e.g., the secondary address numbers may indicate apartment, suite, or trailer numbers.
     */
    @JsonProperty("address_secondary_abbreviation")
    public String addressSecondaryAbbreviation;
    public UspsAddress withAddressSecondaryAbbreviation(String addressSecondaryAbbreviation) {
        this.addressSecondaryAbbreviation = addressSecondaryAbbreviation;
        return this;
    }
    
    /**
     * Code that specifies whether a record is a base (preferred) or alternate record. 
     * Base records (represented as "B") can represent a range of addresses or an individual address, such as a firm record, while alternate records (represented as "A") are individual delivery points. Base records are generally preferred over alternate records.
     * Government deliveries will only be listed on alternate records with the appropriate government building indicator (federal, state, or city) set.
     */
    @JsonProperty("base_alternate_code")
    public BaseAlternateCodeEnum baseAlternateCode;
    public UspsAddress withBaseAlternateCode(BaseAlternateCodeEnum baseAlternateCode) {
        this.baseAlternateCode = baseAlternateCode;
        return this;
    }
    
    /**
     * The name of a company, building, apartment complex, shopping center, or other distinguishing secondary address information.
     * This field is normally used with firm and highrise records but may also contain literals such as \u201cPostmaster\u201d or \u201cUnited States Postal Service.\u201d
     */
    @JsonProperty("building_or_firm_name")
    public String buildingOrFirmName;
    public UspsAddress withBuildingOrFirmName(String buildingOrFirmName) {
        this.buildingOrFirmName = buildingOrFirmName;
        return this;
    }
    
    /**
     * A 4 character ID identifying the postal route for the address.
     * The first character indicates the route type. Specifically:
     * - "B" indicates PO Box
     * - "H" indicates highway
     * - "C" indicates city
     * - "G" indicates general
     * - "R" indicates rural
     */
    @JsonProperty("carrier_route_id")
    public String carrierRouteId;
    public UspsAddress withCarrierRouteId(String carrierRouteId) {
        this.carrierRouteId = carrierRouteId;
        return this;
    }
    
    /**
     * Identifies where automation Carrier Route rates are available and where the commingling of automation and non-automation mail, including Enhanced Carrier Routes and 5-digit presort, on the same pallet or in the same container is allowed.
     */
    @JsonProperty("carrier_route_rate_sortation")
    public String carrierRouteRateSortation;
    public UspsAddress withCarrierRouteRateSortation(String carrierRouteRateSortation) {
        this.carrierRouteRateSortation = carrierRouteRateSortation;
        return this;
    }
    
    /**
     * A valid city name for mailing purposes; appears in the last line of an address on a mail piece.
     */
    @JsonProperty("city")
    public String city;
    public UspsAddress withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * A standard 13-character abbreviation for a city/state name. This field is only used for names that are greater than 13 characters in length and have a city/state mailing name indicator of "Y." If the field is longer than 13 characters and the city/state mailing name indicator is "N," the field will be blank.
     */
    @JsonProperty("city_abbreviation")
    public String cityAbbreviation;
    public UspsAddress withCityAbbreviation(String cityAbbreviation) {
        this.cityAbbreviation = cityAbbreviation;
        return this;
    }
    
    /**
     * Specifies whether or not the city state name can be used as a last line of address on a mail piece.
     * - "Y = City/state name is a USPS-approved mailing name."
     * - "N = City/state name is not approved for mailing purposes."
     */
    @JsonProperty("city_state_mailing_name_indicator")
    public String cityStateMailingNameIndicator;
    public UspsAddress withCityStateMailingNameIndicator(String cityStateMailingNameIndicator) {
        this.cityStateMailingNameIndicator = cityStateMailingNameIndicator;
        return this;
    }
    
    /**
     * The type of locale identified in the city/state name. The facility may be a USPS facility, such as a post office, station, or branch, or it may be a non-postal place name. City/state name facility codes include the following:
     * - B = Branch
     * - C = Community post office (CPO)
     * - N = Non-postal community name, former USPS facility, or place name
     * - P = Post Office
     * - S = Station
     * - U = Urbanization
     */
    @JsonProperty("city_state_name_facility_code")
    public CityStateNameFacilityCodeEnum cityStateNameFacilityCode;
    public UspsAddress withCityStateNameFacilityCode(CityStateNameFacilityCodeEnum cityStateNameFacilityCode) {
        this.cityStateNameFacilityCode = cityStateNameFacilityCode;
        return this;
    }
    
    /**
     * A standard value identifying a geographic area within the United States served by a member of the U.S. House of Representatives. If Army/Air Force (APO), Fleet Post Office (FPO), or Diplomatic/Defense Post Office (DPO), this field will be blank. If there is only one member of Congress within a state, the code will be "AL" (at large).
     */
    @JsonProperty("congressional_district_number")
    public Object congressionalDistrictNumber;
    public UspsAddress withCongressionalDistrictNumber(Object congressionalDistrictNumber) {
        this.congressionalDistrictNumber = congressionalDistrictNumber;
        return this;
    }
    
    /**
     *   Full country names (ISO 3166)
     * 
     */
    @JsonProperty("country")
    public UspsCountryEnum country;
    public UspsAddress withCountry(UspsCountryEnum country) {
        this.country = country;
        return this;
    }
    
    /**
     *   3 letter country code (ISO 3166-1)
     * 
     */
    @JsonProperty("country_iso")
    public UspsCountryIsoEnum countryIso;
    public UspsAddress withCountryIso(UspsCountryIsoEnum countryIso) {
        this.countryIso = countryIso;
        return this;
    }
    
    /**
     *  2 letter country code (ISO 3166-1)
     * 
     */
    @JsonProperty("country_iso_2")
    public UspsCountryIso2Enum countryIso2;
    public UspsAddress withCountryIso2(UspsCountryIso2Enum countryIso2) {
        this.countryIso2 = countryIso2;
        return this;
    }
    
    /**
     * The name of the county or parish in which the 5-digit ZIP Code resides. If APO/FPO/DPO, then the county name will be blank.
     */
    @JsonProperty("county")
    public String county;
    public UspsAddress withCounty(String county) {
        this.county = county;
        return this;
    }
    
    /**
     * The Federal Information Processing Standard (FIPS) code assigned to a given county or parish within a state. In Alaska, it identifies a region within the state. If APO/FPO/DPO, and the record type is \u201cS,\u201d \u201cH,\u201d or \u201cF,\u201d the county number will be blank.
     */
    @JsonProperty("county_number")
    public Object countyNumber;
    public UspsAddress withCountyNumber(Object countyNumber) {
        this.countyNumber = countyNumber;
        return this;
    }
    
    /**
     * Identifies the address as sourced from USPS
     */
    @JsonProperty("dataset")
    public UspsDatasetEnum dataset;
    public UspsAddress withDataset(UspsDatasetEnum dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * A code assigned to Postal Service facilities (primarily Post Offices) to collect cost and statistical data and compile revenue and expense data.
     */
    @JsonProperty("finance_number")
    public Object financeNumber;
    public UspsAddress withFinanceNumber(Object financeNumber) {
        this.financeNumber = financeNumber;
        return this;
    }
    
    /**
     * An alphabetic value that identifies the type of government agency at the delivery point and/or whether a firm is the only delivery at an address. For this purpose, "address" is defined as the complete delivery line (e.g., complete street address and, if included as part of the firm record, the secondary abbreviation and/or address secondary number).
     * - A = City government building\u2014alternates only
     * - B = Federal government building\u2014alternates only
     * - C = State government building\u2014alternates only
     * - D = Firm only\u2014base and alternates
     * - E = City government building and firm only\u2014alternates only
     * - F = Federal government building and firm only\u2014alternates only
     * - G = State government building and firm only\u2014alternates only
     */
    @JsonProperty("government_building_indicator")
    public GovernmentBuildingIndicatorEnum governmentBuildingIndicator;
    public UspsAddress withGovernmentBuildingIndicator(GovernmentBuildingIndicatorEnum governmentBuildingIndicator) {
        this.governmentBuildingIndicator = governmentBuildingIndicator;
        return this;
    }
    
    /**
     * Global unique internally generated identifier for an address
     */
    @JsonProperty("id")
    public String id;
    public UspsAddress withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The Locatable Address Conversion Service (LACS) indicator describes records that have been converted to the LACS system (a product/system in a different USPS\u00ae product line that allows mailers to identify and convert a rural route address to a city-style address). Rural route and some city addresses are being modified to city-style addresses so that emergency services (e.g., ambulances, police) can find these addresses more efficiently.
     * - L = LACS address: The old (usually rural-route) address that has been converted for the LACS system.
     * - Blank = Not applicable
     */
    @JsonProperty("lacs_status_indicator")
    public LacsStatusIndicatorEnum lacsStatusIndicator;
    public UspsAddress withLacsStatusIndicator(LacsStatusIndicatorEnum lacsStatusIndicator) {
        this.lacsStatusIndicator = lacsStatusIndicator;
        return this;
    }
    
    /**
     * Language represented by 2 letter ISO Code (639-1)
     * 
     */
    @JsonProperty("language")
    public UspsLanguageEnum language;
    public UspsAddress withLanguage(UspsLanguageEnum language) {
        this.language = language;
        return this;
    }
    
    /**
     * Last line of the address comprising of city, state, zip code and zip+4
     */
    @JsonProperty("last_line")
    public String lastLine;
    public UspsAddress withLastLine(String lastLine) {
        this.lastLine = lastLine;
        return this;
    }
    
    /**
     * The primary delivery line (usually the street address) of the address.
     */
    @JsonProperty("line_1")
    public String line1;
    public UspsAddress withLine1(String line1) {
        this.line1 = line1;
        return this;
    }
    
    /**
     * Secondary delivery line of the address. Typically populated if the first line is the firm or building name.
     */
    @JsonProperty("line_2")
    public String line2;
    public UspsAddress withLine2(String line2) {
        this.line2 = line2;
        return this;
    }
    
    /**
     * Municipality City State Key. Currently blank.
     */
    @JsonProperty("municipality_city_state_key")
    public String municipalityCityStateKey;
    public UspsAddress withMunicipalityCityStateKey(String municipalityCityStateKey) {
        this.municipalityCityStateKey = municipalityCityStateKey;
        return this;
    }
    
    /**
     * 4 digit ZIP add-on code.
     */
    @JsonProperty("plus_4_code")
    public String plus4Code;
    public UspsAddress withPlus4Code(String plus4Code) {
        this.plus4Code = plus4Code;
        return this;
    }
    
    /**
     * Field that contains the default preferred or alternate preferred last-line name for a ZIP Code.
     */
    @JsonProperty("preferred_city")
    public String preferredCity;
    public UspsAddress withPreferredCity(String preferredCity) {
        this.preferredCity = preferredCity;
        return this;
    }
    
    /**
     * In the Carrier Route, Five-Digit ZIP Code, Delivery Statistics, and ZIP + 4 products, an index to the City State product record that provides the preferred last-line name for this address range. In the City State product, the preferred last line city/state key contains the key value of a City State product record that has the default preferred or alternate preferred last-line key for a given ZIP Code.
     */
    @JsonProperty("preferred_last_line_city_state_key")
    public String preferredLastLineCityStateKey;
    public UspsAddress withPreferredLastLineCityStateKey(String preferredLastLineCityStateKey) {
        this.preferredLastLineCityStateKey = preferredLastLineCityStateKey;
        return this;
    }
    
    /**
     * A house, rural route, contract box, or Post Office Box number. The numeric or alphanumeric component of an address preceding the street name. Often referred to as house number.
     */
    @JsonProperty("primary_number")
    public String primaryNumber;
    public UspsAddress withPrimaryNumber(String primaryNumber) {
        this.primaryNumber = primaryNumber;
        return this;
    }
    
    /**
     * An alphabetic value that identifies the type of data in the record. - G = General delivery (5-Digit ZIP, ZIP + 4, and Carrier Route products) - H = High-rise (ZIP + 4 only) - F = Firm (ZIP + 4 only) - S = Street (5-Digit ZIP, ZIP + 4, and Carrier Route products) - P = PO Box (5-Digit ZIP, ZIP + 4, and Carrier Route products) - R = Rural route/contract (5-Digit ZIP, ZIP + 4, and Carrier Route products) - M = Multi-carrier (Carrier Route product only)
     */
    @JsonProperty("record_type_code")
    public RecordTypeCodeEnum recordTypeCode;
    public UspsAddress withRecordTypeCode(RecordTypeCodeEnum recordTypeCode) {
        this.recordTypeCode = recordTypeCode;
        return this;
    }
    
    /**
     * Number of the sub unit, apartment, suite etc
     */
    @JsonProperty("secondary_number")
    public String secondaryNumber;
    public UspsAddress withSecondaryNumber(String secondaryNumber) {
        this.secondaryNumber = secondaryNumber;
        return this;
    }
    
    /**
     * Full name of a state, U.S. territory, or armed forces ZIP Code designation.
     */
    @JsonProperty("state")
    public String state;
    public UspsAddress withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * A 2-character abbreviation for the name of a state, U.S. territory, or armed forces ZIP Code designation. If APO/FPO/DPO, then the state abbreviation will be \u201cAA,\u201d \u201cAE,\u201d or \u201cAP.\u201d
     */
    @JsonProperty("state_abbreviation")
    public String stateAbbreviation;
    public UspsAddress withStateAbbreviation(String stateAbbreviation) {
        this.stateAbbreviation = stateAbbreviation;
        return this;
    }
    
    /**
     * The official name of a street as assigned by a local governing authority. The Street Name field contains only the street name and does not include directionals (EAST, WEST, etc.) or suffixes (ST, DR, BLVD, etc.). This element may also contain literals, such as PO BOX, GENERAL DELIVERY, USS, PSC, or UNIT.
     */
    @JsonProperty("street_name")
    public String streetName;
    public UspsAddress withStreetName(String streetName) {
        this.streetName = streetName;
        return this;
    }
    
    /**
     * A geographic direction that follows the street name.
     */
    @JsonProperty("street_post_directional_abbreviation")
    public String streetPostDirectionalAbbreviation;
    public UspsAddress withStreetPostDirectionalAbbreviation(String streetPostDirectionalAbbreviation) {
        this.streetPostDirectionalAbbreviation = streetPostDirectionalAbbreviation;
        return this;
    }
    
    /**
     * A geographic direction that precedes the street name.
     */
    @JsonProperty("street_pre_directional_abbreviation")
    public String streetPreDirectionalAbbreviation;
    public UspsAddress withStreetPreDirectionalAbbreviation(String streetPreDirectionalAbbreviation) {
        this.streetPreDirectionalAbbreviation = streetPreDirectionalAbbreviation;
        return this;
    }
    
    /**
     * Code that is the standard USPS abbreviation for the trailing designator in a street address. 
     */
    @JsonProperty("street_suffix_abbreviation")
    public String streetSuffixAbbreviation;
    public UspsAddress withStreetSuffixAbbreviation(String streetSuffixAbbreviation) {
        this.streetSuffixAbbreviation = streetSuffixAbbreviation;
        return this;
    }
    
    /**
     * Field that contains a number that uniquely identifies a record; used to identify the base record to which an add or delete transaction is being directed. The Update Key Number field is used only when applying transactions to the base file; it is not used in address matching and remains fixed for the life of the record. The field is alphanumeric and consists of the database segment code (V1, V2, W1, W2, X1, X2, Y1, Y2, Z1, or Z2) and eight characters containing an alphanumeric value ranging from 00000001 to AAAAAAAA.
     */
    @JsonProperty("update_key_number")
    public String updateKeyNumber;
    public UspsAddress withUpdateKeyNumber(String updateKeyNumber) {
        this.updateKeyNumber = updateKeyNumber;
        return this;
    }
    
    /**
     * An index to the City State file that provides the urbanization name for this delivery range.
     */
    @JsonProperty("urbanization_city_state_key")
    public String urbanizationCityStateKey;
    public UspsAddress withUrbanizationCityStateKey(String urbanizationCityStateKey) {
        this.urbanizationCityStateKey = urbanizationCityStateKey;
        return this;
    }
    
    /**
     * A field that describes the type of ZIP area that a 5-digit ZIP Code serves, e.g., a single educational institution, post office boxes only, or a single address that has unusually high mail volume or many different addresses.
     *  - M = Military ZIP Code
     *  - P = ZIP Code having only Post Office Boxes
     *  - U = Unique ZIP Code (ZIP assigned to a single organization)
     *  - Blank = Standard ZIP with many addresses assigned to it
     */
    @JsonProperty("zip_classification_code")
    public ZipClassificationCodeEnum zipClassificationCode;
    public UspsAddress withZipClassificationCode(ZipClassificationCodeEnum zipClassificationCode) {
        this.zipClassificationCode = zipClassificationCode;
        return this;
    }
    
    /**
     * A 5-digit code that identifies a specific geographic delivery area. ZIP Codes can represent an area within a state, or a single building or company that has a very high mail volume. 
     */
    @JsonProperty("zip_code")
    public String zipCode;
    public UspsAddress withZipCode(String zipCode) {
        this.zipCode = zipCode;
        return this;
    }
    
    /**
     * Nine-digit code that identifies a small geographic delivery area that is serviceable by a single carrier; appears in the last line of the address on a mail piece.
     */
    @JsonProperty("zip_plus_4_code")
    public String zipPlus4Code;
    public UspsAddress withZipPlus4Code(String zipPlus4Code) {
        this.zipPlus4Code = zipPlus4Code;
        return this;
    }
    
}
