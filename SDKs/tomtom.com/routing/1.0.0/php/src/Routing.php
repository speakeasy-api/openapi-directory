<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Routing 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Reachable Range
     * 
     * Calculates a set of locations that can be reached from the origin point.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse
     */
	public function getRoutingVersionNumberCalculateReachableRangeOriginContentType(
        \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}', \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 408 or $httpResponse->getStatusCode() === 414 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 596) {
        }

        return $response;
    }
	
    /**
     * Calculate Route
     * 
     * Calculates a route between an origin and a destination.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse
     */
	public function getRoutingVersionNumberCalculateRouteLocationsContentType(
        \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}', \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 408 or $httpResponse->getStatusCode() === 414 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 596) {
        }

        return $response;
    }
	
    /**
     * Reachable Range
     * 
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse
     */
	public function postRoutingVersionNumberCalculateReachableRangeOriginContentTypeJson(
        \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}', \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calculateReachableRangePostDataParameters", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 408 or $httpResponse->getStatusCode() === 414 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 596) {
        }

        return $response;
    }
	
    /**
     * Reachable Range
     * 
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse
     */
	public function postRoutingVersionNumberCalculateReachableRangeOriginContentTypeRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}', \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 408 or $httpResponse->getStatusCode() === 414 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 596) {
        }

        return $response;
    }
	
    /**
     * Calculate Route
     * 
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse
     */
	public function postRoutingVersionNumberCalculateRouteLocationsContentTypeJson(
        \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}', \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calculateRoutePostDataParameters", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 408 or $httpResponse->getStatusCode() === 414 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 596) {
        }

        return $response;
    }
	
    /**
     * Calculate Route
     * 
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse
     */
	public function postRoutingVersionNumberCalculateRouteLocationsContentTypeRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}', \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 408 or $httpResponse->getStatusCode() === 414 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 596) {
        }

        return $response;
    }
}