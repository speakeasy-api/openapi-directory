// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type AssumeDecoratedRoleWithSAMLHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type AssumeDecoratedRoleWithSAMLRequestBody struct {
	// The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.
	DurationSeconds *int64 `json:"DurationSeconds,omitempty"`
	// The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.
	PrincipalArn string `json:"PrincipalArn"`
	// The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as <code>GetTemporaryTableCredentials</code>. The caller must also have iam:PassRole permission on this role.
	RoleArn string `json:"RoleArn"`
	// A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.
	SAMLAssertion string `json:"SAMLAssertion"`
}

type AssumeDecoratedRoleWithSAMLRequest struct {
	Headers AssumeDecoratedRoleWithSAMLHeaders
	Request AssumeDecoratedRoleWithSAMLRequestBody `request:"mediaType=application/json"`
}

type AssumeDecoratedRoleWithSAMLResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// Success
	AssumeDecoratedRoleWithSAMLResponse *shared.AssumeDecoratedRoleWithSAMLResponse
	ContentType                         string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
