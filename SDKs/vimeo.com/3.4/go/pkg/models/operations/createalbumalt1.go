// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateAlbumAlt1Security struct {
	Oauth2 shared.SchemeOauth2 `security:"scheme,type=oauth2"`
}

// CreateAlbumAlt1RequestBodyLayoutEnum - The type of layout for presenting the album.
type CreateAlbumAlt1RequestBodyLayoutEnum string

const (
	CreateAlbumAlt1RequestBodyLayoutEnumGrid   CreateAlbumAlt1RequestBodyLayoutEnum = "grid"
	CreateAlbumAlt1RequestBodyLayoutEnumPlayer CreateAlbumAlt1RequestBodyLayoutEnum = "player"
)

func (e *CreateAlbumAlt1RequestBodyLayoutEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "grid":
		fallthrough
	case "player":
		*e = CreateAlbumAlt1RequestBodyLayoutEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlbumAlt1RequestBodyLayoutEnum: %s", s)
	}
}

// CreateAlbumAlt1RequestBodyPrivacyEnum - The privacy level of the album.
type CreateAlbumAlt1RequestBodyPrivacyEnum string

const (
	CreateAlbumAlt1RequestBodyPrivacyEnumAnybody   CreateAlbumAlt1RequestBodyPrivacyEnum = "anybody"
	CreateAlbumAlt1RequestBodyPrivacyEnumEmbedOnly CreateAlbumAlt1RequestBodyPrivacyEnum = "embed_only"
	CreateAlbumAlt1RequestBodyPrivacyEnumPassword  CreateAlbumAlt1RequestBodyPrivacyEnum = "password"
)

func (e *CreateAlbumAlt1RequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "embed_only":
		fallthrough
	case "password":
		*e = CreateAlbumAlt1RequestBodyPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlbumAlt1RequestBodyPrivacyEnum: %s", s)
	}
}

// CreateAlbumAlt1RequestBodySortEnum - The default sort order of the album's videos.
type CreateAlbumAlt1RequestBodySortEnum string

const (
	CreateAlbumAlt1RequestBodySortEnumAddedFirst   CreateAlbumAlt1RequestBodySortEnum = "added_first"
	CreateAlbumAlt1RequestBodySortEnumAddedLast    CreateAlbumAlt1RequestBodySortEnum = "added_last"
	CreateAlbumAlt1RequestBodySortEnumAlphabetical CreateAlbumAlt1RequestBodySortEnum = "alphabetical"
	CreateAlbumAlt1RequestBodySortEnumArranged     CreateAlbumAlt1RequestBodySortEnum = "arranged"
	CreateAlbumAlt1RequestBodySortEnumComments     CreateAlbumAlt1RequestBodySortEnum = "comments"
	CreateAlbumAlt1RequestBodySortEnumLikes        CreateAlbumAlt1RequestBodySortEnum = "likes"
	CreateAlbumAlt1RequestBodySortEnumNewest       CreateAlbumAlt1RequestBodySortEnum = "newest"
	CreateAlbumAlt1RequestBodySortEnumOldest       CreateAlbumAlt1RequestBodySortEnum = "oldest"
	CreateAlbumAlt1RequestBodySortEnumPlays        CreateAlbumAlt1RequestBodySortEnum = "plays"
)

func (e *CreateAlbumAlt1RequestBodySortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "added_first":
		fallthrough
	case "added_last":
		fallthrough
	case "alphabetical":
		fallthrough
	case "arranged":
		fallthrough
	case "comments":
		fallthrough
	case "likes":
		fallthrough
	case "newest":
		fallthrough
	case "oldest":
		fallthrough
	case "plays":
		*e = CreateAlbumAlt1RequestBodySortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlbumAlt1RequestBodySortEnum: %s", s)
	}
}

// CreateAlbumAlt1RequestBodyThemeEnum - The color theme of the album.
type CreateAlbumAlt1RequestBodyThemeEnum string

const (
	CreateAlbumAlt1RequestBodyThemeEnumDark     CreateAlbumAlt1RequestBodyThemeEnum = "dark"
	CreateAlbumAlt1RequestBodyThemeEnumStandard CreateAlbumAlt1RequestBodyThemeEnum = "standard"
)

func (e *CreateAlbumAlt1RequestBodyThemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dark":
		fallthrough
	case "standard":
		*e = CreateAlbumAlt1RequestBodyThemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlbumAlt1RequestBodyThemeEnum: %s", s)
	}
}

type CreateAlbumAlt1RequestBody struct {
	// The hexadecimal code for the color of the player buttons.
	BrandColor *string `json:"brand_color,omitempty"`
	// The description of the album.
	Description *string `json:"description,omitempty"`
	// Whether to hide Vimeo navigation when displaying the album.
	HideNav *bool `json:"hide_nav,omitempty"`
	// The type of layout for presenting the album.
	Layout *CreateAlbumAlt1RequestBodyLayoutEnum `json:"layout,omitempty"`
	// The name of the album.
	Name string `json:"name"`
	// The album's password. Required only if **privacy** is `password`.
	Password *string `json:"password,omitempty"`
	// The privacy level of the album.
	Privacy *CreateAlbumAlt1RequestBodyPrivacyEnum `json:"privacy,omitempty"`
	// Whether album videos should use the review mode URL.
	ReviewMode *bool `json:"review_mode,omitempty"`
	// The default sort order of the album's videos.
	Sort *CreateAlbumAlt1RequestBodySortEnum `json:"sort,omitempty"`
	// The color theme of the album.
	Theme *CreateAlbumAlt1RequestBodyThemeEnum `json:"theme,omitempty"`
}

type CreateAlbumAlt1Request struct {
	Request  CreateAlbumAlt1RequestBody `request:"mediaType=application/vnd.vimeo.album+json"`
	Security CreateAlbumAlt1Security
}

type CreateAlbumAlt1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The album was created.
	Album *shared.Album
	// A parameter is invalid.
	LegacyError *shared.LegacyError
}
