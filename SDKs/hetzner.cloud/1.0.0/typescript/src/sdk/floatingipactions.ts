/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class FloatingIPActions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all Actions for a Floating IP
   *
   * @remarks
   * Returns all Action objects for a Floating IP. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
   */
  getFloatingIpsIdActions(
    req: operations.GetFloatingIpsIdActionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFloatingIpsIdActionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFloatingIpsIdActionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/floating_ips/{id}/actions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFloatingIpsIdActionsResponse =
        new operations.GetFloatingIpsIdActionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getFloatingIpsIdActions200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetFloatingIpsIdActions200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an Action for a Floating IP
   *
   * @remarks
   * Returns a specific Action object for a Floating IP.
   */
  getFloatingIpsIdActionsActionId(
    req: operations.GetFloatingIpsIdActionsActionIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFloatingIpsIdActionsActionIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFloatingIpsIdActionsActionIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/floating_ips/{id}/actions/{action_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFloatingIpsIdActionsActionIdResponse =
        new operations.GetFloatingIpsIdActionsActionIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetFloatingIpsIdActionsActionIdActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Assign a Floating IP to a Server
   *
   * @remarks
   * Assigns a Floating IP to a Server.
   */
  postFloatingIpsIdActionsAssign(
    req: operations.PostFloatingIpsIdActionsAssignRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostFloatingIpsIdActionsAssignResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostFloatingIpsIdActionsAssignRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/floating_ips/{id}/actions/assign",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostFloatingIpsIdActionsAssignResponse =
        new operations.PostFloatingIpsIdActionsAssignResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostFloatingIpsIdActionsAssignActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change reverse DNS entry for a Floating IP
   *
   * @remarks
   * Changes the hostname that will appear when getting the hostname belonging to this Floating IP.
   */
  postFloatingIpsIdActionsChangeDnsPtr(
    req: operations.PostFloatingIpsIdActionsChangeDnsPtrRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostFloatingIpsIdActionsChangeDnsPtrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostFloatingIpsIdActionsChangeDnsPtrRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/floating_ips/{id}/actions/change_dns_ptr",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostFloatingIpsIdActionsChangeDnsPtrResponse =
        new operations.PostFloatingIpsIdActionsChangeDnsPtrResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostFloatingIpsIdActionsChangeDnsPtrActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change Floating IP Protection
   *
   * @remarks
   * Changes the protection configuration of the Floating IP.
   */
  postFloatingIpsIdActionsChangeProtection(
    req: operations.PostFloatingIpsIdActionsChangeProtectionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostFloatingIpsIdActionsChangeProtectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostFloatingIpsIdActionsChangeProtectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/floating_ips/{id}/actions/change_protection",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostFloatingIpsIdActionsChangeProtectionResponse =
        new operations.PostFloatingIpsIdActionsChangeProtectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostFloatingIpsIdActionsChangeProtectionActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unassign a Floating IP
   *
   * @remarks
   * Unassigns a Floating IP, resulting in it being unreachable. You may assign it to a Server again at a later time.
   */
  postFloatingIpsIdActionsUnassign(
    req: operations.PostFloatingIpsIdActionsUnassignRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostFloatingIpsIdActionsUnassignResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostFloatingIpsIdActionsUnassignRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/floating_ips/{id}/actions/unassign",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostFloatingIpsIdActionsUnassignResponse =
        new operations.PostFloatingIpsIdActionsUnassignResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostFloatingIpsIdActionsUnassignActionResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
