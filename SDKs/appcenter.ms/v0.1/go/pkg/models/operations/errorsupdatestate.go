// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsUpdateStateSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsUpdateStateRequestBodyStateEnum string

const (
	ErrorsUpdateStateRequestBodyStateEnumOpen    ErrorsUpdateStateRequestBodyStateEnum = "open"
	ErrorsUpdateStateRequestBodyStateEnumClosed  ErrorsUpdateStateRequestBodyStateEnum = "closed"
	ErrorsUpdateStateRequestBodyStateEnumIgnored ErrorsUpdateStateRequestBodyStateEnum = "ignored"
)

func (e ErrorsUpdateStateRequestBodyStateEnum) ToPointer() *ErrorsUpdateStateRequestBodyStateEnum {
	return &e
}

func (e *ErrorsUpdateStateRequestBodyStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "ignored":
		*e = ErrorsUpdateStateRequestBodyStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsUpdateStateRequestBodyStateEnum: %v", v)
	}
}

// ErrorsUpdateStateRequestBody - The state of the error group
type ErrorsUpdateStateRequestBody struct {
	Annotation *string                               `json:"annotation,omitempty"`
	State      ErrorsUpdateStateRequestBodyStateEnum `json:"state"`
}

type ErrorsUpdateStateRequest struct {
	// The state of the error group
	RequestBody ErrorsUpdateStateRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnumConflict            ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum) ToPointer() *ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type ErrorsUpdateStateDefaultApplicationJSONError struct {
	Code    ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                               `json:"message"`
}

// ErrorsUpdateStateDefaultApplicationJSON - Error code with reason
type ErrorsUpdateStateDefaultApplicationJSON struct {
	Error ErrorsUpdateStateDefaultApplicationJSONError `json:"error"`
}

// ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum - programming language of the frame
type ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum string

const (
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumJavaScript   ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "JavaScript"
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumCSharp       ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "CSharp"
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumObjectiveC   ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "Objective-C"
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumObjectiveCpp ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "Objective-Cpp"
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumCpp          ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "Cpp"
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumC            ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "C"
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumSwift        ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "Swift"
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumJava         ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "Java"
	ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnumUnknown      ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum = "Unknown"
)

func (e ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum) ToPointer() *ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum {
	return &e
}

func (e *ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum: %v", v)
	}
}

type ErrorsUpdateState200ApplicationJSONReasonFrames struct {
	// this line isn't from any framework
	AppCode *bool `json:"appCode,omitempty"`
	// is a class method
	ClassMethod *bool `json:"classMethod,omitempty"`
	// name of the class
	ClassName *string `json:"className,omitempty"`
	// Formatted frame string
	CodeFormatted *string `json:"codeFormatted,omitempty"`
	// Unformatted Frame string
	CodeRaw *string `json:"codeRaw,omitempty"`
	// Exception type.
	ExceptionType *string `json:"exceptionType,omitempty"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"frameworkName,omitempty"`
	// programming language of the frame
	Language *ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"methodParams,omitempty"`
	// OS exception type. (aka. SIGNAL)
	OsExceptionType *string `json:"osExceptionType,omitempty"`
}

type ErrorsUpdateState200ApplicationJSONStateEnum string

const (
	ErrorsUpdateState200ApplicationJSONStateEnumOpen    ErrorsUpdateState200ApplicationJSONStateEnum = "open"
	ErrorsUpdateState200ApplicationJSONStateEnumClosed  ErrorsUpdateState200ApplicationJSONStateEnum = "closed"
	ErrorsUpdateState200ApplicationJSONStateEnumIgnored ErrorsUpdateState200ApplicationJSONStateEnum = "ignored"
)

func (e ErrorsUpdateState200ApplicationJSONStateEnum) ToPointer() *ErrorsUpdateState200ApplicationJSONStateEnum {
	return &e
}

func (e *ErrorsUpdateState200ApplicationJSONStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "ignored":
		*e = ErrorsUpdateState200ApplicationJSONStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsUpdateState200ApplicationJSONStateEnum: %v", v)
	}
}

// ErrorsUpdateState200ApplicationJSON - Error group details
type ErrorsUpdateState200ApplicationJSON struct {
	Annotation           *string                                           `json:"annotation,omitempty"`
	AppBuild             *string                                           `json:"appBuild,omitempty"`
	AppVersion           string                                            `json:"appVersion"`
	CodeRaw              *string                                           `json:"codeRaw,omitempty"`
	Count                int64                                             `json:"count"`
	DeviceCount          int64                                             `json:"deviceCount"`
	ErrorGroupID         string                                            `json:"errorGroupId"`
	ExceptionAppCode     *bool                                             `json:"exceptionAppCode,omitempty"`
	ExceptionClassMethod *bool                                             `json:"exceptionClassMethod,omitempty"`
	ExceptionClassName   *string                                           `json:"exceptionClassName,omitempty"`
	ExceptionFile        *string                                           `json:"exceptionFile,omitempty"`
	ExceptionLine        *string                                           `json:"exceptionLine,omitempty"`
	ExceptionMessage     *string                                           `json:"exceptionMessage,omitempty"`
	ExceptionMethod      *string                                           `json:"exceptionMethod,omitempty"`
	ExceptionType        *string                                           `json:"exceptionType,omitempty"`
	FirstOccurrence      time.Time                                         `json:"firstOccurrence"`
	Hidden               *bool                                             `json:"hidden,omitempty"`
	LastOccurrence       time.Time                                         `json:"lastOccurrence"`
	ReasonFrames         []ErrorsUpdateState200ApplicationJSONReasonFrames `json:"reasonFrames,omitempty"`
	State                ErrorsUpdateState200ApplicationJSONStateEnum      `json:"state"`
}

type ErrorsUpdateStateResponse struct {
	ContentType string
	// Error group details
	ErrorsUpdateState200ApplicationJSONObject *ErrorsUpdateState200ApplicationJSON
	// Error code with reason
	ErrorsUpdateStateDefaultApplicationJSONObject *ErrorsUpdateStateDefaultApplicationJSON
	StatusCode                                    int
	RawResponse                                   *http.Response
}
