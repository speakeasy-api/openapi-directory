"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import metricvalue as shared_metricvalue
from ..shared import rowdimensions as shared_rowdimensions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BidMetricsRow:
    r"""The set of metrics that are measured in numbers of bids, representing how many bids with the specified dimension values were considered eligible at each stage of the bidding funnel;"""
    
    bids: Optional[shared_metricvalue.MetricValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bids'), 'exclude': lambda f: f is None }})
    r"""A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled)."""  
    bids_in_auction: Optional[shared_metricvalue.MetricValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidsInAuction'), 'exclude': lambda f: f is None }})
    r"""A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled)."""  
    billed_impressions: Optional[shared_metricvalue.MetricValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billedImpressions'), 'exclude': lambda f: f is None }})
    r"""A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled)."""  
    impressions_won: Optional[shared_metricvalue.MetricValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impressionsWon'), 'exclude': lambda f: f is None }})
    r"""A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled)."""  
    measurable_impressions: Optional[shared_metricvalue.MetricValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurableImpressions'), 'exclude': lambda f: f is None }})
    r"""A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled)."""  
    reached_queries: Optional[shared_metricvalue.MetricValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reachedQueries'), 'exclude': lambda f: f is None }})
    r"""A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled)."""  
    row_dimensions: Optional[shared_rowdimensions.RowDimensions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowDimensions'), 'exclude': lambda f: f is None }})
    r"""A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row."""  
    viewable_impressions: Optional[shared_metricvalue.MetricValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewableImpressions'), 'exclude': lambda f: f is None }})
    r"""A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled)."""  
    