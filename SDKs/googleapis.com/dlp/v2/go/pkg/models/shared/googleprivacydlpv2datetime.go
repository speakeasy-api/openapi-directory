// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GooglePrivacyDlpV2DateTimeDayOfWeekEnum - Day of week
type GooglePrivacyDlpV2DateTimeDayOfWeekEnum string

const (
	GooglePrivacyDlpV2DateTimeDayOfWeekEnumDayOfWeekUnspecified GooglePrivacyDlpV2DateTimeDayOfWeekEnum = "DAY_OF_WEEK_UNSPECIFIED"
	GooglePrivacyDlpV2DateTimeDayOfWeekEnumMonday               GooglePrivacyDlpV2DateTimeDayOfWeekEnum = "MONDAY"
	GooglePrivacyDlpV2DateTimeDayOfWeekEnumTuesday              GooglePrivacyDlpV2DateTimeDayOfWeekEnum = "TUESDAY"
	GooglePrivacyDlpV2DateTimeDayOfWeekEnumWednesday            GooglePrivacyDlpV2DateTimeDayOfWeekEnum = "WEDNESDAY"
	GooglePrivacyDlpV2DateTimeDayOfWeekEnumThursday             GooglePrivacyDlpV2DateTimeDayOfWeekEnum = "THURSDAY"
	GooglePrivacyDlpV2DateTimeDayOfWeekEnumFriday               GooglePrivacyDlpV2DateTimeDayOfWeekEnum = "FRIDAY"
	GooglePrivacyDlpV2DateTimeDayOfWeekEnumSaturday             GooglePrivacyDlpV2DateTimeDayOfWeekEnum = "SATURDAY"
	GooglePrivacyDlpV2DateTimeDayOfWeekEnumSunday               GooglePrivacyDlpV2DateTimeDayOfWeekEnum = "SUNDAY"
)

func (e *GooglePrivacyDlpV2DateTimeDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DAY_OF_WEEK_UNSPECIFIED":
		fallthrough
	case "MONDAY":
		fallthrough
	case "TUESDAY":
		fallthrough
	case "WEDNESDAY":
		fallthrough
	case "THURSDAY":
		fallthrough
	case "FRIDAY":
		fallthrough
	case "SATURDAY":
		fallthrough
	case "SUNDAY":
		*e = GooglePrivacyDlpV2DateTimeDayOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePrivacyDlpV2DateTimeDayOfWeekEnum: %s", s)
	}
}

// GooglePrivacyDlpV2DateTime - Message for a date time object. e.g. 2018-01-01, 5th August.
type GooglePrivacyDlpV2DateTime struct {
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	Date *GoogleTypeDate `json:"date,omitempty"`
	// Day of week
	DayOfWeek *GooglePrivacyDlpV2DateTimeDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	Time *GoogleTypeTimeOfDay `json:"time,omitempty"`
	// Time zone of the date time object.
	TimeZone *GooglePrivacyDlpV2TimeZone `json:"timeZone,omitempty"`
}
