/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export enum TokenErrorAccountStatusEnum {
  Registered = "registered",
  EmailConfirmed = "email_confirmed",
  Deleted = "deleted",
  Suspended = "suspended",
  Rejected = "rejected",
  Approved = "approved",
  Resume = "resume",
  Webinar = "webinar",
  Course = "course",
}

/**
 * Authentication error - for vendor auth, it will also fail if their account is not approved yet. In that case, the error response will include "account_status" key.
 */
export class TokenError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account_status" })
  accountStatus?: TokenErrorAccountStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "help" })
  help?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "http_code" })
  httpCode?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}
