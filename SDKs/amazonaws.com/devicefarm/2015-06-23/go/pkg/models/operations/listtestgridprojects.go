// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListTestGridProjectsXAmzTargetEnum
type ListTestGridProjectsXAmzTargetEnum string

const (
	ListTestGridProjectsXAmzTargetEnumDeviceFarm20150623ListTestGridProjects ListTestGridProjectsXAmzTargetEnum = "DeviceFarm_20150623.ListTestGridProjects"
)

func (e ListTestGridProjectsXAmzTargetEnum) ToPointer() *ListTestGridProjectsXAmzTargetEnum {
	return &e
}

func (e *ListTestGridProjectsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeviceFarm_20150623.ListTestGridProjects":
		*e = ListTestGridProjectsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTestGridProjectsXAmzTargetEnum: %v", v)
	}
}

type ListTestGridProjectsRequest struct {
	ListTestGridProjectsRequest shared.ListTestGridProjectsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  ListTestGridProjectsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResult *string `queryParam:"style=form,explode=true,name=maxResult"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListTestGridProjectsResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// InternalServiceException
	InternalServiceException interface{}
	// Success
	ListTestGridProjectsResult *shared.ListTestGridProjectsResult
	StatusCode                 int
	RawResponse                *http.Response
}
