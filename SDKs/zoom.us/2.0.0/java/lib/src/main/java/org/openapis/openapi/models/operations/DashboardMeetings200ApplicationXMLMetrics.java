/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;

/**
 * DashboardMeetings200ApplicationXMLMetrics - Meeting metric details.
 */
public class DashboardMeetings200ApplicationXMLMetrics {
    /**
     * Custom keys and values assigned to the meeting.
     */
    
    public DashboardMeetings200ApplicationXMLMetricsCustomKeys[] customKeys;
    public DashboardMeetings200ApplicationXMLMetrics withCustomKeys(DashboardMeetings200ApplicationXMLMetricsCustomKeys[] customKeys) {
        this.customKeys = customKeys;
        return this;
    }
    
    /**
     * Department of the host.
     */
    
    public String dept;
    public DashboardMeetings200ApplicationXMLMetrics withDept(String dept) {
        this.dept = dept;
        return this;
    }
    
    /**
     * Meeting duration. Formatted as hh:mm:ss, for example: `16:08` for 16 minutes and 8 seconds.
     */
    
    public String duration;
    public DashboardMeetings200ApplicationXMLMetrics withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Email address of the host.
     */
    
    public String email;
    public DashboardMeetings200ApplicationXMLMetrics withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Meeting end time.
     */
    
    public OffsetDateTime endTime;
    public DashboardMeetings200ApplicationXMLMetrics withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
     */
    
    public Boolean has3rdPartyAudio;
    public DashboardMeetings200ApplicationXMLMetrics withHas3rdPartyAudio(Boolean has3rdPartyAudio) {
        this.has3rdPartyAudio = has3rdPartyAudio;
        return this;
    }
    
    /**
     * Indicates whether or not the PSTN was used in the meeting.
     */
    
    public Boolean hasPstn;
    public DashboardMeetings200ApplicationXMLMetrics withHasPstn(Boolean hasPstn) {
        this.hasPstn = hasPstn;
        return this;
    }
    
    /**
     * Indicates whether or not the recording feature was used in the meeting. 
     */
    
    public Boolean hasRecording;
    public DashboardMeetings200ApplicationXMLMetrics withHasRecording(Boolean hasRecording) {
        this.hasRecording = hasRecording;
        return this;
    }
    
    /**
     * Indicates whether or not screenshare feature was used in the meeting.
     */
    
    public Boolean hasScreenShare;
    public DashboardMeetings200ApplicationXMLMetrics withHasScreenShare(Boolean hasScreenShare) {
        this.hasScreenShare = hasScreenShare;
        return this;
    }
    
    /**
     * Indicates whether or not someone joined the meeting using SIP.
     */
    
    public Boolean hasSip;
    public DashboardMeetings200ApplicationXMLMetrics withHasSip(Boolean hasSip) {
        this.hasSip = hasSip;
        return this;
    }
    
    /**
     * Indicates whether or not video was used in the meeting.
     */
    
    public Boolean hasVideo;
    public DashboardMeetings200ApplicationXMLMetrics withHasVideo(Boolean hasVideo) {
        this.hasVideo = hasVideo;
        return this;
    }
    
    /**
     * Indicates whether or not VoIP was used in the meeting.
     */
    
    public Boolean hasVoip;
    public DashboardMeetings200ApplicationXMLMetrics withHasVoip(Boolean hasVoip) {
        this.hasVoip = hasVoip;
        return this;
    }
    
    /**
     * Host display name.
     */
    
    public String host;
    public DashboardMeetings200ApplicationXMLMetrics withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    
    public Long id;
    public DashboardMeetings200ApplicationXMLMetrics withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The number of Zoom Room participants in the meeting.
     */
    
    public Long inRoomParticipants;
    public DashboardMeetings200ApplicationXMLMetrics withInRoomParticipants(Long inRoomParticipants) {
        this.inRoomParticipants = inRoomParticipants;
        return this;
    }
    
    /**
     * Meeting participant count.
     */
    
    public Long participants;
    public DashboardMeetings200ApplicationXMLMetrics withParticipants(Long participants) {
        this.participants = participants;
        return this;
    }
    
    /**
     * Meeting start time.
     */
    
    public OffsetDateTime startTime;
    public DashboardMeetings200ApplicationXMLMetrics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Meeting topic.
     */
    
    public String topic;
    public DashboardMeetings200ApplicationXMLMetrics withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Tracking fields and values assigned to the meeting.
     */
    
    public DashboardMeetings200ApplicationXMLMetricsTrackingFields[] trackingFields;
    public DashboardMeetings200ApplicationXMLMetrics withTrackingFields(DashboardMeetings200ApplicationXMLMetricsTrackingFields[] trackingFields) {
        this.trackingFields = trackingFields;
        return this;
    }
    
    /**
     * License type of the user.
     */
    
    public String userType;
    public DashboardMeetings200ApplicationXMLMetrics withUserType(String userType) {
        this.userType = userType;
        return this;
    }
    
    /**
     * Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
     */
    
    public String uuid;
    public DashboardMeetings200ApplicationXMLMetrics withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
