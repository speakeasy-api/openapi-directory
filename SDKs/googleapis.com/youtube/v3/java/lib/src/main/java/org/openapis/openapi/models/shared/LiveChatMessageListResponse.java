/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * LiveChatMessageListResponse - Successful response
 */
public class LiveChatMessageListResponse {
    /**
     * Etag of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public LiveChatMessageListResponse withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Serialized EventId of the request which produced this response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventId")
    public String eventId;

    public LiveChatMessageListResponse withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    public LiveChatMessage[] items;

    public LiveChatMessageListResponse withItems(LiveChatMessage[] items) {
        this.items = items;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessageListResponse".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public LiveChatMessageListResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextPageToken")
    public String nextPageToken;

    public LiveChatMessageListResponse withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
    /**
     * The date and time when the underlying stream went offline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("offlineAt")
    public OffsetDateTime offlineAt;

    public LiveChatMessageListResponse withOfflineAt(OffsetDateTime offlineAt) {
        this.offlineAt = offlineAt;
        return this;
    }
    
    /**
     * Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageInfo")
    public PageInfo pageInfo;

    public LiveChatMessageListResponse withPageInfo(PageInfo pageInfo) {
        this.pageInfo = pageInfo;
        return this;
    }
    
    /**
     * The amount of time the client should wait before polling again.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pollingIntervalMillis")
    public Long pollingIntervalMillis;

    public LiveChatMessageListResponse withPollingIntervalMillis(Long pollingIntervalMillis) {
        this.pollingIntervalMillis = pollingIntervalMillis;
        return this;
    }
    
    /**
     * Stub token pagination template to suppress results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenPagination")
    public java.util.Map<String, Object> tokenPagination;

    public LiveChatMessageListResponse withTokenPagination(java.util.Map<String, Object> tokenPagination) {
        this.tokenPagination = tokenPagination;
        return this;
    }
    
    /**
     * The visitorId identifies the visitor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitorId")
    public String visitorId;

    public LiveChatMessageListResponse withVisitorId(String visitorId) {
        this.visitorId = visitorId;
        return this;
    }
    
    public LiveChatMessageListResponse(){}
}
