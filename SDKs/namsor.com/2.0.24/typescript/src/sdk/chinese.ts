/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * CHINESE special features
 */
export class Chinese {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
   */
  chineseNameCandidates(
    req: operations.ChineseNameCandidatesRequest,
    security: operations.ChineseNameCandidatesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChineseNameCandidatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChineseNameCandidatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChineseNameCandidatesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChineseNameCandidatesResponse =
        new operations.ChineseNameCandidatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nameMatchCandidatesOut = utils.objectToClass(
              httpRes?.data,
              shared.NameMatchCandidatesOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
   */
  chineseNameCandidatesBatch(
    req: shared.BatchFirstLastNameIn,
    security: operations.ChineseNameCandidatesBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChineseNameCandidatesBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/chineseNameCandidatesBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChineseNameCandidatesBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChineseNameCandidatesBatchResponse =
        new operations.ChineseNameCandidatesBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchNameMatchCandidatesOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchNameMatchCandidatesOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.
   */
  chineseNameCandidatesGenderBatch(
    req: shared.BatchFirstLastNameGenderIn,
    security: operations.ChineseNameCandidatesGenderBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChineseNameCandidatesGenderBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameGenderIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/api2/json/chineseNameCandidatesGenderBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChineseNameCandidatesGenderBatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChineseNameCandidatesGenderBatchResponse =
        new operations.ChineseNameCandidatesGenderBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchNameMatchCandidatesOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchNameMatchCandidatesOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')
   */
  chineseNameGenderCandidates(
    req: operations.ChineseNameGenderCandidatesRequest,
    security: operations.ChineseNameGenderCandidatesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChineseNameGenderCandidatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChineseNameGenderCandidatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChineseNameGenderCandidatesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChineseNameGenderCandidatesResponse =
        new operations.ChineseNameGenderCandidatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nameMatchCandidatesOut = utils.objectToClass(
              httpRes?.data,
              shared.NameMatchCandidatesOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
   */
  chineseNameMatch(
    req: operations.ChineseNameMatchRequest,
    security: operations.ChineseNameMatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChineseNameMatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChineseNameMatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChineseNameMatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChineseNameMatchResponse =
        new operations.ChineseNameMatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nameMatchedOut = utils.objectToClass(
              httpRes?.data,
              shared.NameMatchedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
   */
  chineseNameMatchBatch(
    req: shared.BatchMatchPersonalFirstLastNameIn,
    security: operations.ChineseNameMatchBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChineseNameMatchBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchMatchPersonalFirstLastNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/chineseNameMatchBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChineseNameMatchBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChineseNameMatchBatchResponse =
        new operations.ChineseNameMatchBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchNameMatchedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchNameMatchedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of a Chinese full name ex. 王晓明
   */
  genderChineseName(
    req: operations.GenderChineseNameRequest,
    security: operations.GenderChineseNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderChineseNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenderChineseNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/genderChineseName/{chineseName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderChineseNameSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderChineseNameResponse =
        new operations.GenderChineseNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameGenderedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of up to 100 full names ex. 王晓明
   */
  genderChineseNameBatch(
    req: shared.BatchPersonalNameIn,
    security: operations.GenderChineseNameBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderChineseNameBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/genderChineseNameBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderChineseNameBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderChineseNameBatchResponse =
        new operations.GenderChineseNameBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameGenderedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of a Chinese name in LATIN (Pinyin).
   */
  genderChineseNamePinyin(
    req: operations.GenderChineseNamePinyinRequest,
    security: operations.GenderChineseNamePinyinSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderChineseNamePinyinResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenderChineseNamePinyinRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderChineseNamePinyinSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderChineseNamePinyinResponse =
        new operations.GenderChineseNamePinyinResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameGenderedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
   */
  genderChineseNamePinyinBatch(
    req: shared.BatchFirstLastNameIn,
    security: operations.GenderChineseNamePinyinBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderChineseNamePinyinBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/genderChineseNamePinyinBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderChineseNamePinyinBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderChineseNamePinyinBatchResponse =
        new operations.GenderChineseNamePinyinBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameGenderedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)
   */
  parseChineseName(
    req: operations.ParseChineseNameRequest,
    security: operations.ParseChineseNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ParseChineseNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ParseChineseNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/parseChineseName/{chineseName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ParseChineseNameSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ParseChineseNameResponse =
        new operations.ParseChineseNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameParsedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameParsedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name).
   */
  parseChineseNameBatch(
    req: shared.BatchPersonalNameIn,
    security: operations.ParseChineseNameBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ParseChineseNameBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/parseChineseNameBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ParseChineseNameBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ParseChineseNameBatchResponse =
        new operations.ParseChineseNameBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameParsedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameParsedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)
   */
  pinyinChineseName(
    req: operations.PinyinChineseNameRequest,
    security: operations.PinyinChineseNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PinyinChineseNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PinyinChineseNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/pinyinChineseName/{chineseName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PinyinChineseNameSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PinyinChineseNameResponse =
        new operations.PinyinChineseNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameParsedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameParsedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name).
   */
  pinyinChineseNameBatch(
    req: shared.BatchPersonalNameIn,
    security: operations.PinyinChineseNameBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PinyinChineseNameBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/pinyinChineseNameBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PinyinChineseNameBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PinyinChineseNameBatchResponse =
        new operations.PinyinChineseNameBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameParsedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameParsedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
