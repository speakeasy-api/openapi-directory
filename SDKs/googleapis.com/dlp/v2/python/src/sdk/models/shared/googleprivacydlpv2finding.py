"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2infotype as shared_googleprivacydlpv2infotype
from ..shared import googleprivacydlpv2location as shared_googleprivacydlpv2location
from ..shared import googleprivacydlpv2quoteinfo as shared_googleprivacydlpv2quoteinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GooglePrivacyDlpV2FindingLikelihoodEnum(str, Enum):
    r"""Confidence of how likely it is that the `info_type` is correct."""
    LIKELIHOOD_UNSPECIFIED = 'LIKELIHOOD_UNSPECIFIED'
    VERY_UNLIKELY = 'VERY_UNLIKELY'
    UNLIKELY = 'UNLIKELY'
    POSSIBLE = 'POSSIBLE'
    LIKELY = 'LIKELY'
    VERY_LIKELY = 'VERY_LIKELY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2Finding:
    r"""Represents a piece of potentially sensitive content."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp when finding was detected."""  
    finding_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingId'), 'exclude': lambda f: f is None }})
    r"""The unique finding id."""  
    info_type: Optional[shared_googleprivacydlpv2infotype.GooglePrivacyDlpV2InfoType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infoType'), 'exclude': lambda f: f is None }})
    r"""Type of information detected by the API."""  
    job_create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobCreateTime'), 'exclude': lambda f: f is None }})
    r"""Time the job started that produced this finding."""  
    job_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobName'), 'exclude': lambda f: f is None }})
    r"""The job that stored the finding."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""The labels associated with this `Finding`. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `\\"environment\\" : \\"production\\"` * `\\"pipeline\\" : \\"etl\\"`"""  
    likelihood: Optional[GooglePrivacyDlpV2FindingLikelihoodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likelihood'), 'exclude': lambda f: f is None }})
    r"""Confidence of how likely it is that the `info_type` is correct."""  
    location: Optional[shared_googleprivacydlpv2location.GooglePrivacyDlpV2Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Specifies the location of the finding."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Resource name in format projects/{project}/locations/{location}/findings/{finding} Populated only when viewing persisted findings."""  
    quote: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quote'), 'exclude': lambda f: f is None }})
    r"""The content that was found. Even if the content is not textual, it may be converted to a textual representation here. Provided if `include_quote` is true and the finding is less than or equal to 4096 bytes long. If the finding exceeds 4096 bytes in length, the quote may be omitted."""  
    quote_info: Optional[shared_googleprivacydlpv2quoteinfo.GooglePrivacyDlpV2QuoteInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quoteInfo'), 'exclude': lambda f: f is None }})
    r"""Message for infoType-dependent details parsed from quote."""  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName'), 'exclude': lambda f: f is None }})
    r"""The job that stored the finding."""  
    trigger_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerName'), 'exclude': lambda f: f is None }})
    r"""Job trigger name, if applicable, for this finding."""  
    