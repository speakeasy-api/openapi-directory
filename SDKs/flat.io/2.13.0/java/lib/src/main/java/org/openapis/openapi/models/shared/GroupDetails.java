/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * GroupDetails - The details of a group
 */
public class GroupDetails {
    /**
     * The date when the group was create
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationDate")
    public OffsetDateTime creationDate;

    public GroupDetails withCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * The unique identifier of the group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public GroupDetails withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The displayable name of the group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GroupDetails withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The unique identifier of the Organization owning the group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public String organization;

    public GroupDetails withOrganization(String organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * `true` if the properties and members of this group are in in read-only
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readOnly")
    public Boolean readOnly;

    public GroupDetails withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }
    
    /**
     * The type of the group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public GroupTypeEnum type;

    public GroupDetails withType(GroupTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The number of students in this group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usersCount")
    public Double usersCount;

    public GroupDetails withUsersCount(Double usersCount) {
        this.usersCount = usersCount;
        return this;
    }
    
    public GroupDetails(){}
}
