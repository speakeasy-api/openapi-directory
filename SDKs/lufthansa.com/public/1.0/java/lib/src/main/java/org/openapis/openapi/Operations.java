/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

public class Operations {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Operations(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Flight Status at Arrival Airport
     * Status of all arrivals at a given airport up to 4 hours from the provided date time.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetResponse operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(org.openapis.openapi.models.operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetRequest request, org.openapis.openapi.models.operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetRequest.class, baseUrl, "/operations/flightstatus/arrivals/{airportCode}/{fromDateTime}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetResponse res = new org.openapis.openapi.models.operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetResponse(contentType, httpRes.statusCode()) {{
            operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Flight Status
     * Status of a particular flight (boarding, delayed, etc.).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OperationsFlightstatusByFlightNumberAndDateGetResponse operationsFlightstatusByFlightNumberAndDateGet(org.openapis.openapi.models.operations.OperationsFlightstatusByFlightNumberAndDateGetRequest request, org.openapis.openapi.models.operations.OperationsFlightstatusByFlightNumberAndDateGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OperationsFlightstatusByFlightNumberAndDateGetRequest.class, baseUrl, "/operations/flightstatus/{flightNumber}/{date}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OperationsFlightstatusByFlightNumberAndDateGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OperationsFlightstatusByFlightNumberAndDateGetResponse res = new org.openapis.openapi.models.operations.OperationsFlightstatusByFlightNumberAndDateGetResponse(contentType, httpRes.statusCode()) {{
            operationsFlightstatusByFlightNumberAndDateGet200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.operationsFlightstatusByFlightNumberAndDateGet200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Flight Status at Departure Airport
     * Status of all departures from a given airport up to 4 hours from the provided date time.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetResponse operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(org.openapis.openapi.models.operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetRequest request, org.openapis.openapi.models.operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetRequest.class, baseUrl, "/operations/flightstatus/departures/{airportCode}/{fromDateTime}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetResponse res = new org.openapis.openapi.models.operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetResponse(contentType, httpRes.statusCode()) {{
            operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Flight Status by Route
     * Status of flights between a given origin and destination on a given date.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetResponse operationsFlightstatusRouteDateByOriginAndDestinationGet(org.openapis.openapi.models.operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetRequest request, org.openapis.openapi.models.operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetRequest.class, baseUrl, "/operations/flightstatus/route/{origin}/{destination}/{date}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetResponse res = new org.openapis.openapi.models.operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetResponse(contentType, httpRes.statusCode()) {{
            operationsFlightstatusRouteDateByOriginAndDestinationGet200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.operationsFlightstatusRouteDateByOriginAndDestinationGet200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Flight Schedules
     * Scheduled flights between given airports on a given date.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetResponse operationsSchedulesFromDateTimeByOriginAndDestinationGet(org.openapis.openapi.models.operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetRequest request, org.openapis.openapi.models.operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetRequest.class, baseUrl, "/operations/schedules/{origin}/{destination}/{fromDateTime}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetResponse res = new org.openapis.openapi.models.operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetResponse(contentType, httpRes.statusCode()) {{
            operationsSchedulesFromDateTimeByOriginAndDestinationGet200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.operationsSchedulesFromDateTimeByOriginAndDestinationGet200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}