"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import sim_enum_reset_status_enum as shared_sim_enum_reset_status_enum
from ..shared import sim_enum_status_enum as shared_sim_enum_status_enum
from ..shared import wireless_v1_sim as shared_wireless_v1_sim
from enum import Enum
from typing import Optional

UPDATE_SIM_SERVERS = [
	"https://wireless.twilio.com",
]


@dataclasses.dataclass
class UpdateSimSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class UpdateSimUpdateSimRequestCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `callback_url`. Can be: `POST` or `GET`. The default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateSimUpdateSimRequestCommandsCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `commands_callback_url`. Can be: `POST` or `GET`. The default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateSimUpdateSimRequestSmsFallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. Default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateSimUpdateSimRequestSmsMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. Default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateSimUpdateSimRequestVoiceFallbackMethodEnum(str, Enum):
    r"""Deprecated."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateSimUpdateSimRequestVoiceMethodEnum(str, Enum):
    r"""Deprecated."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class UpdateSimUpdateSimRequest:
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AccountSid' }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource's status is `new`. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/wireless/api/sim-resource#move-sims-between-subaccounts)."""  
    callback_method: Optional[UpdateSimUpdateSimRequestCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallbackMethod' }})
    r"""The HTTP method we should use to call `callback_url`. Can be: `POST` or `GET`. The default is `POST`."""  
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallbackUrl' }})
    r"""The URL we should call using the `callback_url` when the SIM has finished updating. When the SIM transitions from `new` to `ready` or from any status to `deactivated`, we call this URL when the status changes to an intermediate status (`ready` or `deactivated`) and again when the status changes to its final status (`active` or `canceled`)."""  
    commands_callback_method: Optional[UpdateSimUpdateSimRequestCommandsCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CommandsCallbackMethod' }})
    r"""The HTTP method we should use to call `commands_callback_url`. Can be: `POST` or `GET`. The default is `POST`."""  
    commands_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CommandsCallbackUrl' }})
    r"""The URL we should call using the `commands_callback_method` when the SIM sends a [Command](https://www.twilio.com/docs/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the Sim resource. It does not need to be unique."""  
    rate_plan: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RatePlan' }})
    r"""The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource) to which the Sim resource should be assigned."""  
    reset_status: Optional[shared_sim_enum_reset_status_enum.SimEnumResetStatusEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ResetStatus' }})  
    sms_fallback_method: Optional[UpdateSimUpdateSimRequestSmsFallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmsFallbackMethod' }})
    r"""The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. Default is `POST`."""  
    sms_fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmsFallbackUrl' }})
    r"""The URL we should call using the `sms_fallback_method` when an error occurs while retrieving or executing the TwiML requested from `sms_url`."""  
    sms_method: Optional[UpdateSimUpdateSimRequestSmsMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmsMethod' }})
    r"""The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. Default is `POST`."""  
    sms_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmsUrl' }})
    r"""The URL we should call using the `sms_method` when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/wireless/api/command-resource)."""  
    status: Optional[shared_sim_enum_status_enum.SimEnumStatusEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Status' }})  
    unique_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'UniqueName' }})
    r"""An application-defined string that uniquely identifies the resource. It can be used in place of the `sid` in the URL path to address the resource."""  
    voice_fallback_method: Optional[UpdateSimUpdateSimRequestVoiceFallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceFallbackMethod' }})
    r"""Deprecated."""  
    voice_fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceFallbackUrl' }})
    r"""Deprecated."""  
    voice_method: Optional[UpdateSimUpdateSimRequestVoiceMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceMethod' }})
    r"""Deprecated."""  
    voice_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceUrl' }})
    r"""Deprecated."""  
    

@dataclasses.dataclass
class UpdateSimRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID or the `unique_name` of the Sim resource to update."""  
    request_body: Optional[UpdateSimUpdateSimRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateSimResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    wireless_v1_sim: Optional[shared_wireless_v1_sim.WirelessV1Sim] = dataclasses.field(default=None)
    r"""OK"""  
    