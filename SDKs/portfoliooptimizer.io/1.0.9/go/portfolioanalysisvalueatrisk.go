// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
	"strings"
)

type portfolioAnalysisValueAtRisk struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newPortfolioAnalysisValueAtRisk(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *portfolioAnalysisValueAtRisk {
	return &portfolioAnalysisValueAtRisk{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// PostPortfolioAnalysisValueAtRiskCornishFisher - Cornish-Fisher Value At Risk
// Compute the Cornish-Fisher value at risk of one or several portfolio(s) from portfolio values.
//
// References
// * [Laurent Favre and José-Antonio Galeano, Mean-Modified Value-at-Risk Optimization with Hedge Funds, The Journal of Alternative Investments Fall 2002, 5 (2) 21-25](https://jai.pm-research.com/content/5/2/21)
// * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish–fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
func (s *portfolioAnalysisValueAtRisk) PostPortfolioAnalysisValueAtRiskCornishFisher(ctx context.Context, request operations.PostPortfolioAnalysisValueAtRiskCornishFisherRequestBody) (*operations.PostPortfolioAnalysisValueAtRiskCornishFisherResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/portfolio/analysis/value-at-risk/cornish-fisher"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostPortfolioAnalysisValueAtRiskCornishFisherResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostPortfolioAnalysisValueAtRiskCornishFisher200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PostPortfolioAnalysisValueAtRiskCornishFisher200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// PostPortfolioAnalysisValueAtRiskCornishFisherCorrected - Corrected Cornish-Fisher Value At Risk
// Compute the corrected Cornish-Fisher value at risk of one or several portfolio(s) from portfolio values.
//
// References
// * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish–fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
func (s *portfolioAnalysisValueAtRisk) PostPortfolioAnalysisValueAtRiskCornishFisherCorrected(ctx context.Context, request operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrectedRequestBody) (*operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrectedResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/portfolio/analysis/value-at-risk/cornish-fisher/corrected"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrectedResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrected200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PostPortfolioAnalysisValueAtRiskCornishFisherCorrected200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// PostPortfolioAnalysisValueAtRiskGaussian - Gaussian Value At Risk
// Compute the Gaussian value at risk of one or several portfolio(s) from portfolio values.
//
// References
// * [Ballotta, Laura and Fusai, Gianluca, A Gentle Introduction to Value at Risk](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2942138)
func (s *portfolioAnalysisValueAtRisk) PostPortfolioAnalysisValueAtRiskGaussian(ctx context.Context, request operations.PostPortfolioAnalysisValueAtRiskGaussianRequestBody) (*operations.PostPortfolioAnalysisValueAtRiskGaussianResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/portfolio/analysis/value-at-risk/gaussian"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostPortfolioAnalysisValueAtRiskGaussianResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostPortfolioAnalysisValueAtRiskGaussian200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PostPortfolioAnalysisValueAtRiskGaussian200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// PostPortfolioAnalysisValueAtRiskHistorical - Historical Value At Risk
// Compute the historical value at risk of one or several portfolio(s) from portfolio values.
//
// References
// * [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)
// * [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)
func (s *portfolioAnalysisValueAtRisk) PostPortfolioAnalysisValueAtRiskHistorical(ctx context.Context, request operations.PostPortfolioAnalysisValueAtRiskHistoricalRequestBody) (*operations.PostPortfolioAnalysisValueAtRiskHistoricalResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/portfolio/analysis/value-at-risk/historical"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostPortfolioAnalysisValueAtRiskHistoricalResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostPortfolioAnalysisValueAtRiskHistorical200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PostPortfolioAnalysisValueAtRiskHistorical200ApplicationJSONObject = out
		}
	}

	return res, nil
}
