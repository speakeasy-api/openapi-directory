"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class GoalRelationships:
    r"""A goal relationship is an object representing the relationship between a goal and another goal, a project, or a portfolio."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_supporting_relationship(self, request: operations.AddSupportingRelationshipRequest) -> operations.AddSupportingRelationshipResponse:
        r"""Add a supporting goal relationship
        Creates a goal relationship by adding a supporting resource to a given goal.
        
        Returns the newly created goal relationship record.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddSupportingRelationshipRequest, base_url, '/goals/{goal_gid}/addSupportingRelationship', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.AddSupportingRelationshipRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddSupportingRelationshipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddSupportingRelationship200ApplicationJSON])
                res.add_supporting_relationship_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_goal_relationship(self, request: operations.GetGoalRelationshipRequest) -> operations.GetGoalRelationshipResponse:
        r"""Get a goal relationship
        Returns the complete updated goal relationship record for a single goal relationship.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGoalRelationshipRequest, base_url, '/goal_relationships/{goal_relationship_gid}', request)
        
        query_params = utils.get_query_params(operations.GetGoalRelationshipRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGoalRelationshipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetGoalRelationship200ApplicationJSON])
                res.get_goal_relationship_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_goal_relationships(self, request: operations.GetGoalRelationshipsRequest) -> operations.GetGoalRelationshipsResponse:
        r"""Get goal relationships
        Returns compact goal relationship records.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/goal_relationships'
        
        query_params = utils.get_query_params(operations.GetGoalRelationshipsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGoalRelationshipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetGoalRelationships200ApplicationJSON])
                res.get_goal_relationships_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def remove_supporting_relationship(self, request: operations.RemoveSupportingRelationshipRequest) -> operations.RemoveSupportingRelationshipResponse:
        r"""Removes a supporting goal relationship
        Removes a goal relationship for a given parent goal.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveSupportingRelationshipRequest, base_url, '/goals/{goal_gid}/removeSupportingRelationship', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RemoveSupportingRelationshipRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveSupportingRelationshipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveSupportingRelationship200ApplicationJSON])
                res.remove_supporting_relationship_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_goal_relationship(self, request: operations.UpdateGoalRelationshipRequest) -> operations.UpdateGoalRelationshipResponse:
        r"""Update a goal relationship
        An existing goal relationship can be updated by making a PUT request on the URL for
        that goal relationship. Only the fields provided in the `data` block will be updated;
        any unspecified fields will remain unchanged.
        
        Returns the complete updated goal relationship record.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateGoalRelationshipRequest, base_url, '/goal_relationships/{goal_relationship_gid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpdateGoalRelationshipRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGoalRelationshipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateGoalRelationship200ApplicationJSON])
                res.update_goal_relationship_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    