// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PetsCatsAllowedExceptionEnum - Cats allowed exception.
type PetsCatsAllowedExceptionEnum string

const (
	PetsCatsAllowedExceptionEnumExceptionUnspecified PetsCatsAllowedExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PetsCatsAllowedExceptionEnumUnderConstruction    PetsCatsAllowedExceptionEnum = "UNDER_CONSTRUCTION"
	PetsCatsAllowedExceptionEnumDependentOnSeason    PetsCatsAllowedExceptionEnum = "DEPENDENT_ON_SEASON"
	PetsCatsAllowedExceptionEnumDependentOnDayOfWeek PetsCatsAllowedExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *PetsCatsAllowedExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PetsCatsAllowedExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PetsCatsAllowedExceptionEnum: %s", s)
	}
}

// PetsDogsAllowedExceptionEnum - Dogs allowed exception.
type PetsDogsAllowedExceptionEnum string

const (
	PetsDogsAllowedExceptionEnumExceptionUnspecified PetsDogsAllowedExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PetsDogsAllowedExceptionEnumUnderConstruction    PetsDogsAllowedExceptionEnum = "UNDER_CONSTRUCTION"
	PetsDogsAllowedExceptionEnumDependentOnSeason    PetsDogsAllowedExceptionEnum = "DEPENDENT_ON_SEASON"
	PetsDogsAllowedExceptionEnumDependentOnDayOfWeek PetsDogsAllowedExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *PetsDogsAllowedExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PetsDogsAllowedExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PetsDogsAllowedExceptionEnum: %s", s)
	}
}

// PetsPetsAllowedExceptionEnum - Pets allowed exception.
type PetsPetsAllowedExceptionEnum string

const (
	PetsPetsAllowedExceptionEnumExceptionUnspecified PetsPetsAllowedExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PetsPetsAllowedExceptionEnumUnderConstruction    PetsPetsAllowedExceptionEnum = "UNDER_CONSTRUCTION"
	PetsPetsAllowedExceptionEnumDependentOnSeason    PetsPetsAllowedExceptionEnum = "DEPENDENT_ON_SEASON"
	PetsPetsAllowedExceptionEnumDependentOnDayOfWeek PetsPetsAllowedExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *PetsPetsAllowedExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PetsPetsAllowedExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PetsPetsAllowedExceptionEnum: %s", s)
	}
}

// PetsPetsAllowedFreeExceptionEnum - Pets allowed free exception.
type PetsPetsAllowedFreeExceptionEnum string

const (
	PetsPetsAllowedFreeExceptionEnumExceptionUnspecified PetsPetsAllowedFreeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PetsPetsAllowedFreeExceptionEnumUnderConstruction    PetsPetsAllowedFreeExceptionEnum = "UNDER_CONSTRUCTION"
	PetsPetsAllowedFreeExceptionEnumDependentOnSeason    PetsPetsAllowedFreeExceptionEnum = "DEPENDENT_ON_SEASON"
	PetsPetsAllowedFreeExceptionEnumDependentOnDayOfWeek PetsPetsAllowedFreeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *PetsPetsAllowedFreeExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PetsPetsAllowedFreeExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PetsPetsAllowedFreeExceptionEnum: %s", s)
	}
}

// Pets - Policies regarding guest-owned animals.
type Pets struct {
	// Cats allowed. Domesticated felines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.
	CatsAllowed *bool `json:"catsAllowed,omitempty"`
	// Cats allowed exception.
	CatsAllowedException *PetsCatsAllowedExceptionEnum `json:"catsAllowedException,omitempty"`
	// Dogs allowed. Domesticated canines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.
	DogsAllowed *bool `json:"dogsAllowed,omitempty"`
	// Dogs allowed exception.
	DogsAllowedException *PetsDogsAllowedExceptionEnum `json:"dogsAllowedException,omitempty"`
	// Pets allowed. Household animals are allowed at the property and in the specific guest room of their owner. May or may not include dogs, cats, reptiles and/or fish. May or may not require a fee. Service animals are not considered to be pets, so not governed by this policy.
	PetsAllowed *bool `json:"petsAllowed,omitempty"`
	// Pets allowed exception.
	PetsAllowedException *PetsPetsAllowedExceptionEnum `json:"petsAllowedException,omitempty"`
	// Pets allowed free. Household animals are allowed at the property and in the specific guest room of their owner for free. May or may not include dogs, cats, reptiles, and/or fish.
	PetsAllowedFree *bool `json:"petsAllowedFree,omitempty"`
	// Pets allowed free exception.
	PetsAllowedFreeException *PetsPetsAllowedFreeExceptionEnum `json:"petsAllowedFreeException,omitempty"`
}
