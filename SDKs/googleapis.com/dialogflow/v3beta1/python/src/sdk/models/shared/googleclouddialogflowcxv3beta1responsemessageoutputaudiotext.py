"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioText:
    r"""A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message."""
    
    allow_playback_interruption: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowPlaybackInterruption'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request."""  
    ssml: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssml'), 'exclude': lambda f: f is None }})
    r"""The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml)."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The raw text to be synthesized."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioTextInput:
    r"""A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message."""
    
    ssml: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssml'), 'exclude': lambda f: f is None }})
    r"""The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml)."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The raw text to be synthesized."""  
    