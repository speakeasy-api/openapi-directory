// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProjectCompletePrivateRoleEnum - Role inside this project
type ProjectCompletePrivateRoleEnum string

const (
	ProjectCompletePrivateRoleEnumOwner        ProjectCompletePrivateRoleEnum = "Owner"
	ProjectCompletePrivateRoleEnumCollaborator ProjectCompletePrivateRoleEnum = "Collaborator"
	ProjectCompletePrivateRoleEnumViewer       ProjectCompletePrivateRoleEnum = "Viewer"
)

func (e *ProjectCompletePrivateRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Owner":
		fallthrough
	case "Collaborator":
		fallthrough
	case "Viewer":
		*e = ProjectCompletePrivateRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectCompletePrivateRoleEnum: %s", s)
	}
}

// ProjectCompletePrivateStorageEnum - Project storage type
type ProjectCompletePrivateStorageEnum string

const (
	ProjectCompletePrivateStorageEnumIndividual ProjectCompletePrivateStorageEnum = "individual"
	ProjectCompletePrivateStorageEnumGroup      ProjectCompletePrivateStorageEnum = "group"
)

func (e *ProjectCompletePrivateStorageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "individual":
		fallthrough
	case "group":
		*e = ProjectCompletePrivateStorageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectCompletePrivateStorageEnum: %s", s)
	}
}

// ProjectCompletePrivate - OK. Project representation
type ProjectCompletePrivate struct {
	// List of project collaborators
	Collaborators []Collaborator `json:"collaborators,omitempty"`
	// Date when project was created
	CreatedDate *string `json:"created_date,omitempty"`
	// Project description
	Description *string `json:"description,omitempty"`
	// Project public url
	FigshareURL *string `json:"figshare_url,omitempty"`
	// Project funding
	Funding *string `json:"funding,omitempty"`
	// Full Project funding information
	FundingList []FundingInformation `json:"funding_list,omitempty"`
	// Group of project if any
	GroupID *int64 `json:"group_id,omitempty"`
	// Project id
	ID *int64 `json:"id,omitempty"`
	// Date when project was last modified
	ModifiedDate *string `json:"modified_date,omitempty"`
	// Date when project was published
	PublishedDate *string `json:"published_date,omitempty"`
	// Project quota
	Quota *int64 `json:"quota,omitempty"`
	// Role inside this project
	Role *ProjectCompletePrivateRoleEnum `json:"role,omitempty"`
	// Project storage type
	Storage *ProjectCompletePrivateStorageEnum `json:"storage,omitempty"`
	// Project title
	Title *string `json:"title,omitempty"`
	// Api endpoint
	URL *string `json:"url,omitempty"`
	// Project used quota
	UsedQuota *int64 `json:"used_quota,omitempty"`
	// Project private quota used
	UsedQuotaPrivate *int64 `json:"used_quota_private,omitempty"`
	// Project public quota used
	UsedQuotaPublic *int64 `json:"used_quota_public,omitempty"`
}
