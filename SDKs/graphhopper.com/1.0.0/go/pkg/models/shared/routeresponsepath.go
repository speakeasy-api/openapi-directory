// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type RouteResponsePathInstructions struct {
	// The distance for this instruction, in meters.
	//
	Distance *float64 `json:"distance,omitempty"`
	// Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout.
	//
	ExitNumber *int `json:"exit_number,omitempty"`
	// Two indices into `points`, referring to the beginning and the end of the segment of the route
	// this instruction refers to.
	//
	Interval []int `json:"interval,omitempty"`
	// A number which specifies the sign to show:
	//
	// | sign | description  |
	// |---|---|
	// |-98| an U-turn without the knowledge if it is a right or left U-turn |
	// | -8| a left U-turn |
	// | -7| keep left |
	// | -6| **not yet used**: leave roundabout |
	// | -3| turn sharp left |
	// | -2| turn left |
	// | -1| turn slight left |
	// |  0| continue on street |
	// |  1| turn slight right |
	// |  2| turn right |
	// |  3| turn sharp right |
	// |  4| the finish instruction before the last point |
	// |  5| the instruction before a via point |
	// |  6| the instruction before entering a roundabout |
	// |  7| keep right |
	// |  8| a right U-turn |
	// |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers
	//
	Sign *int `json:"sign,omitempty"`
	// The name of the street to turn onto in order to follow the route.
	//
	StreetName *string `json:"street_name,omitempty"`
	// A description what the user has to do in order to follow the route. The language depends on the locale parameter.
	//
	Text *string `json:"text,omitempty"`
	// The duration for this instruction, in milliseconds.
	//
	Time *int `json:"time,omitempty"`
	// Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and
	// `-2*PI < r < 0` for counterclockwise turns.
	//
	TurnAngle *float64 `json:"turn_angle,omitempty"`
}

type RouteResponsePath struct {
	// The total ascent, in meters.
	//
	Ascend *float64 `json:"ascend,omitempty"`
	// The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`.
	//
	Bbox []float64 `json:"bbox,omitempty"`
	// The total descent, in meters.
	//
	Descend *float64 `json:"descend,omitempty"`
	// Details, as requested with the `details` parameter. Consider the value `{"street_name": [[0,2,"Frankfurter Straße"],[2,6,"Zollweg"]]}`.
	// In this example, the route uses two streets: The first, Frankfurter Straße, is
	// used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`.
	// See [here](https://discuss.graphhopper.com/t/2539) for discussion.
	//
	Details map[string]interface{} `json:"details,omitempty"`
	// The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
	//
	Distance *float64 `json:"distance,omitempty"`
	// The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading,
	// so be mindful when using them for navigation.
	//
	Instructions []RouteResponsePathInstructions `json:"instructions,omitempty"`
	Points       interface{}                     `json:"points,omitempty"`
	// Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays
	// of coordinates. See the field description for more information on the two formats.
	//
	PointsEncoded *bool `json:"points_encoded,omitempty"`
	// An array of indices (zero-based), specifiying the order in which the input points are visited.
	// Only present if the `optimize` parameter was used.
	//
	PointsOrder      []int64     `json:"points_order,omitempty"`
	SnappedWaypoints interface{} `json:"snapped_waypoints,omitempty"`
	// The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
	//
	Time *int64 `json:"time,omitempty"`
}
