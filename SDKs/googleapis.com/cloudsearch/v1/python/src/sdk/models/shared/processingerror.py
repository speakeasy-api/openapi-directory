"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fieldviolation as shared_fieldviolation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProcessingErrorCodeEnum(str, Enum):
    r"""Error code indicating the nature of the error."""
    PROCESSING_ERROR_CODE_UNSPECIFIED = 'PROCESSING_ERROR_CODE_UNSPECIFIED'
    MALFORMED_REQUEST = 'MALFORMED_REQUEST'
    UNSUPPORTED_CONTENT_FORMAT = 'UNSUPPORTED_CONTENT_FORMAT'
    INDIRECT_BROKEN_ACL = 'INDIRECT_BROKEN_ACL'
    ACL_CYCLE = 'ACL_CYCLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProcessingError:
    
    code: Optional[ProcessingErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Error code indicating the nature of the error."""  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""The description of the error."""  
    field_violations: Optional[list[shared_fieldviolation.FieldViolation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldViolations'), 'exclude': lambda f: f is None }})
    r"""In case the item fields are invalid, this field contains the details about the validation errors."""  
    