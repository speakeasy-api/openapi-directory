/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TimelineCommentEvent - Timeline Comment Event
 */
public class TimelineCommentEvent {
    /**
     * Simple User
     */
    @JsonProperty("actor")
    public SimpleUser actor;
    public TimelineCommentEvent withActor(SimpleUser actor) {
        this.actor = actor;
        return this;
    }
    
    /**
     * How the author is associated with the repository.
     */
    @JsonProperty("author_association")
    public AuthorAssociationEnum authorAssociation;
    public TimelineCommentEvent withAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
        return this;
    }
    
    /**
     * Contents of the issue comment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;
    public TimelineCommentEvent withBody(String body) {
        this.body = body;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_html")
    public String bodyHtml;
    public TimelineCommentEvent withBodyHtml(String bodyHtml) {
        this.bodyHtml = bodyHtml;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_text")
    public String bodyText;
    public TimelineCommentEvent withBodyText(String bodyText) {
        this.bodyText = bodyText;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public TimelineCommentEvent withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("event")
    public String event;
    public TimelineCommentEvent withEvent(String event) {
        this.event = event;
        return this;
    }
    
    @JsonProperty("html_url")
    public String htmlUrl;
    public TimelineCommentEvent withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * Unique identifier of the issue comment
     */
    @JsonProperty("id")
    public Long id;
    public TimelineCommentEvent withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("issue_url")
    public String issueUrl;
    public TimelineCommentEvent withIssueUrl(String issueUrl) {
        this.issueUrl = issueUrl;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;
    public TimelineCommentEvent withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("performed_via_github_app")
    public NullableIntegration performedViaGithubApp;
    public TimelineCommentEvent withPerformedViaGithubApp(NullableIntegration performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reactions")
    public ReactionRollup reactions;
    public TimelineCommentEvent withReactions(ReactionRollup reactions) {
        this.reactions = reactions;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public TimelineCommentEvent withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * URL for the issue comment
     */
    @JsonProperty("url")
    public String url;
    public TimelineCommentEvent withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Simple User
     */
    @JsonProperty("user")
    public SimpleUser user;
    public TimelineCommentEvent withUser(SimpleUser user) {
        this.user = user;
        return this;
    }
    
}
