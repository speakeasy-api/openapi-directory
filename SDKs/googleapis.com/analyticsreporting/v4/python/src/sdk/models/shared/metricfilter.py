"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MetricFilterOperatorEnum(str, Enum):
    r"""Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the comparisonValue, the default is `EQUAL`. If the operator is `IS_MISSING`, checks if the metric is missing and would ignore the comparisonValue."""
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    EQUAL = 'EQUAL'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    IS_MISSING = 'IS_MISSING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MetricFilter:
    r"""MetricFilter specifies the filter on a metric."""
    
    comparison_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comparisonValue'), 'exclude': lambda f: f is None }})
    r"""The value to compare against."""  
    metric_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricName'), 'exclude': lambda f: f is None }})
    r"""The metric that will be filtered on. A metricFilter must contain a metric name. A metric name can be an alias earlier defined as a metric or it can also be a metric expression."""  
    not_: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not'), 'exclude': lambda f: f is None }})
    r"""Logical `NOT` operator. If this boolean is set to true, then the matching metric values will be excluded in the report. The default is false."""  
    operator: Optional[MetricFilterOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operator'), 'exclude': lambda f: f is None }})
    r"""Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the comparisonValue, the default is `EQUAL`. If the operator is `IS_MISSING`, checks if the metric is missing and would ignore the comparisonValue."""  
    