// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GETPaymentRunDataElementResponseDocumentTypeEnum - The billing document type specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
type GETPaymentRunDataElementResponseDocumentTypeEnum string

const (
	GETPaymentRunDataElementResponseDocumentTypeEnumInvoice   GETPaymentRunDataElementResponseDocumentTypeEnum = "Invoice"
	GETPaymentRunDataElementResponseDocumentTypeEnumDebitMemo GETPaymentRunDataElementResponseDocumentTypeEnum = "DebitMemo"
)

func (e *GETPaymentRunDataElementResponseDocumentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Invoice":
		fallthrough
	case "DebitMemo":
		*e = GETPaymentRunDataElementResponseDocumentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPaymentRunDataElementResponseDocumentTypeEnum: %s", s)
	}
}

// GETPaymentRunDataElementResponseResultEnum - Indicates whether the data is processed successfully or not.
type GETPaymentRunDataElementResponseResultEnum string

const (
	GETPaymentRunDataElementResponseResultEnumProcessed GETPaymentRunDataElementResponseResultEnum = "Processed"
	GETPaymentRunDataElementResponseResultEnumError     GETPaymentRunDataElementResponseResultEnum = "Error"
)

func (e *GETPaymentRunDataElementResponseResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processed":
		fallthrough
	case "Error":
		*e = GETPaymentRunDataElementResponseResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPaymentRunDataElementResponseResultEnum: %s", s)
	}
}

type GETPaymentRunDataElementResponse struct {
	// The customer account ID specified in the `data` field when creating the payment run.
	//
	AccountID *string `json:"accountId,omitempty"`
	// The amount specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
	//
	Amount *float64 `json:"amount,omitempty"`
	// The amount that is collected.
	//
	AmountCollected *float64 `json:"amountCollected,omitempty"`
	// The amount to be collected.
	//
	AmountToCollect *float64 `json:"amountToCollect,omitempty"`
	// The comment specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
	//
	Comment *string `json:"comment,omitempty"`
	// The billing document ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
	//
	DocumentID *string `json:"documentId,omitempty"`
	// The billing document type specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
	//
	DocumentType *GETPaymentRunDataElementResponseDocumentTypeEnum `json:"documentType,omitempty"`
	// The error code of the response.
	//
	ErrorCode *string `json:"errorCode,omitempty"`
	// The detailed information of the error response.
	//
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// The payment gateway ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
	//
	PaymentGatewayID *string `json:"paymentGatewayId,omitempty"`
	// The payment method ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
	//
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
	// Indicates whether the data is processed successfully or not.
	//
	Result *GETPaymentRunDataElementResponseResultEnum `json:"result,omitempty"`
	// Container for transactions that apply to the current request. Each element contains an array of the settlement/payment applied to the record.
	//
	Transactions []GETPaymentRunDataTransactionElementResponse `json:"transactions,omitempty"`
}
