// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DisruptionsGetAllDisruptionsDisruptionModesEnum int

const (
	DisruptionsGetAllDisruptionsDisruptionModesEnumOne        DisruptionsGetAllDisruptionsDisruptionModesEnum = 1
	DisruptionsGetAllDisruptionsDisruptionModesEnumTwo        DisruptionsGetAllDisruptionsDisruptionModesEnum = 2
	DisruptionsGetAllDisruptionsDisruptionModesEnumThree      DisruptionsGetAllDisruptionsDisruptionModesEnum = 3
	DisruptionsGetAllDisruptionsDisruptionModesEnumFour       DisruptionsGetAllDisruptionsDisruptionModesEnum = 4
	DisruptionsGetAllDisruptionsDisruptionModesEnumFive       DisruptionsGetAllDisruptionsDisruptionModesEnum = 5
	DisruptionsGetAllDisruptionsDisruptionModesEnumSeven      DisruptionsGetAllDisruptionsDisruptionModesEnum = 7
	DisruptionsGetAllDisruptionsDisruptionModesEnumEight      DisruptionsGetAllDisruptionsDisruptionModesEnum = 8
	DisruptionsGetAllDisruptionsDisruptionModesEnumNine       DisruptionsGetAllDisruptionsDisruptionModesEnum = 9
	DisruptionsGetAllDisruptionsDisruptionModesEnumTen        DisruptionsGetAllDisruptionsDisruptionModesEnum = 10
	DisruptionsGetAllDisruptionsDisruptionModesEnumEleven     DisruptionsGetAllDisruptionsDisruptionModesEnum = 11
	DisruptionsGetAllDisruptionsDisruptionModesEnumTwelve     DisruptionsGetAllDisruptionsDisruptionModesEnum = 12
	DisruptionsGetAllDisruptionsDisruptionModesEnumThirteen   DisruptionsGetAllDisruptionsDisruptionModesEnum = 13
	DisruptionsGetAllDisruptionsDisruptionModesEnumFourteen   DisruptionsGetAllDisruptionsDisruptionModesEnum = 14
	DisruptionsGetAllDisruptionsDisruptionModesEnumOneHundred DisruptionsGetAllDisruptionsDisruptionModesEnum = 100
)

func (e DisruptionsGetAllDisruptionsDisruptionModesEnum) ToPointer() *DisruptionsGetAllDisruptionsDisruptionModesEnum {
	return &e
}

func (e *DisruptionsGetAllDisruptionsDisruptionModesEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 11:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 100:
		*e = DisruptionsGetAllDisruptionsDisruptionModesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisruptionsGetAllDisruptionsDisruptionModesEnum: %v", v)
	}
}

// DisruptionsGetAllDisruptionsDisruptionStatusEnum - Filter by status of disruption
type DisruptionsGetAllDisruptionsDisruptionStatusEnum string

const (
	DisruptionsGetAllDisruptionsDisruptionStatusEnumCurrent DisruptionsGetAllDisruptionsDisruptionStatusEnum = "current"
	DisruptionsGetAllDisruptionsDisruptionStatusEnumPlanned DisruptionsGetAllDisruptionsDisruptionStatusEnum = "planned"
)

func (e DisruptionsGetAllDisruptionsDisruptionStatusEnum) ToPointer() *DisruptionsGetAllDisruptionsDisruptionStatusEnum {
	return &e
}

func (e *DisruptionsGetAllDisruptionsDisruptionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "current":
		fallthrough
	case "planned":
		*e = DisruptionsGetAllDisruptionsDisruptionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisruptionsGetAllDisruptionsDisruptionStatusEnum: %v", v)
	}
}

type DisruptionsGetAllDisruptionsRouteTypesEnum int

const (
	DisruptionsGetAllDisruptionsRouteTypesEnumZero  DisruptionsGetAllDisruptionsRouteTypesEnum = 0
	DisruptionsGetAllDisruptionsRouteTypesEnumOne   DisruptionsGetAllDisruptionsRouteTypesEnum = 1
	DisruptionsGetAllDisruptionsRouteTypesEnumTwo   DisruptionsGetAllDisruptionsRouteTypesEnum = 2
	DisruptionsGetAllDisruptionsRouteTypesEnumThree DisruptionsGetAllDisruptionsRouteTypesEnum = 3
	DisruptionsGetAllDisruptionsRouteTypesEnumFour  DisruptionsGetAllDisruptionsRouteTypesEnum = 4
)

func (e DisruptionsGetAllDisruptionsRouteTypesEnum) ToPointer() *DisruptionsGetAllDisruptionsRouteTypesEnum {
	return &e
}

func (e *DisruptionsGetAllDisruptionsRouteTypesEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = DisruptionsGetAllDisruptionsRouteTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisruptionsGetAllDisruptionsRouteTypesEnum: %v", v)
	}
}

type DisruptionsGetAllDisruptionsRequest struct {
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// Filter by disruption_mode; values returned via v3/disruptions/modes API
	DisruptionModes []DisruptionsGetAllDisruptionsDisruptionModesEnum `queryParam:"style=form,explode=true,name=disruption_modes"`
	// Filter by status of disruption
	DisruptionStatus *DisruptionsGetAllDisruptionsDisruptionStatusEnum `queryParam:"style=form,explode=true,name=disruption_status"`
	// Filter by route_type; values returned via RouteTypes API
	RouteTypes []DisruptionsGetAllDisruptionsRouteTypesEnum `queryParam:"style=form,explode=true,name=route_types"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type DisruptionsGetAllDisruptionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// All disruption information for all route types.
	V3DisruptionsResponse *shared.V3DisruptionsResponse
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
}
