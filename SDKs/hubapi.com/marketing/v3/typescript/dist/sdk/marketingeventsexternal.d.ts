import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig } from "axios";
export declare class MarketingEventsExternal {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;
    constructor(defaultClient: AxiosInstance, securityClient: AxiosInstance, serverURL: string, language: string, sdkVersion: string, genVersion: string);
    deleteMarketingV3MarketingEventsEventsExternalEventIdArchive(req: operations.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest, security: operations.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveSecurity, config?: AxiosRequestConfig): Promise<operations.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveResponse>;
    getMarketingV3MarketingEventsEventsExternalEventIdGetById(req: operations.GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest, security: operations.GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdSecurity, config?: AxiosRequestConfig): Promise<operations.GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdResponse>;
    patchMarketingV3MarketingEventsEventsExternalEventIdUpdate(req: operations.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest, security: operations.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateSecurity, config?: AxiosRequestConfig): Promise<operations.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateResponse>;
    postMarketingV3MarketingEventsEventsDeleteArchiveBatch(req: shared.BatchInputMarketingEventExternalUniqueIdentifier, security: operations.PostMarketingV3MarketingEventsEventsDeleteArchiveBatchSecurity, config?: AxiosRequestConfig): Promise<operations.PostMarketingV3MarketingEventsEventsDeleteArchiveBatchResponse>;
    postMarketingV3MarketingEventsEventsUpsertDoUpsert(req: shared.BatchInputMarketingEventCreateRequestParams, security: operations.PostMarketingV3MarketingEventsEventsUpsertDoUpsertSecurity, config?: AxiosRequestConfig): Promise<operations.PostMarketingV3MarketingEventsEventsUpsertDoUpsertResponse>;
    postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(req: operations.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest, security: operations.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelSecurity, config?: AxiosRequestConfig): Promise<operations.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelResponse>;
    postMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete(req: operations.PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteRequest, security: operations.PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteSecurity, config?: AxiosRequestConfig): Promise<operations.PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteResponse>;
    postMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById(req: operations.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdRequest, security: operations.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdSecurity, config?: AxiosRequestConfig): Promise<operations.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdResponse>;
    postMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById(req: operations.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdRequest, security: operations.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdSecurity, config?: AxiosRequestConfig): Promise<operations.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdResponse>;
    postMarketingV3MarketingEventsEventsCreate(req: shared.MarketingEventCreateRequestParams, security: operations.PostMarketingV3MarketingEventsEventsCreateSecurity, config?: AxiosRequestConfig): Promise<operations.PostMarketingV3MarketingEventsEventsCreateResponse>;
    putMarketingV3MarketingEventsEventsExternalEventIdReplace(req: operations.PutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest, security: operations.PutMarketingV3MarketingEventsEventsExternalEventIdReplaceSecurity, config?: AxiosRequestConfig): Promise<operations.PutMarketingV3MarketingEventsEventsExternalEventIdReplaceResponse>;
}
