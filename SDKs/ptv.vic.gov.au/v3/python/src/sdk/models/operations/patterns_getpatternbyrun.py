"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import v3_errorresponse as shared_v3_errorresponse
from ..shared import v3_stoppingpattern as shared_v3_stoppingpattern
from datetime import datetime
from enum import Enum
from typing import Optional

class PatternsGetPatternByRunExpandEnum(str, Enum):
    ALL = 'All'
    STOP = 'Stop'
    ROUTE = 'Route'
    RUN = 'Run'
    DIRECTION = 'Direction'
    DISRUPTION = 'Disruption'
    VEHICLE_DESCRIPTOR = 'VehicleDescriptor'
    VEHICLE_POSITION = 'VehiclePosition'
    NONE = 'None'

class PatternsGetPatternByRunRouteTypeEnum(str, Enum):
    r"""Number identifying transport mode; values returned via RouteTypes API"""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'


@dataclasses.dataclass
class PatternsGetPatternByRunRequest:
    
    expand: list[PatternsGetPatternByRunExpandEnum] = dataclasses.field(metadata={'query_param': { 'field_name': 'expand', 'style': 'form', 'explode': True }})
    r"""List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information."""  
    route_type: PatternsGetPatternByRunRouteTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'route_type', 'style': 'simple', 'explode': False }})
    r"""Number identifying transport mode; values returned via RouteTypes API"""  
    run_ref: str = dataclasses.field(metadata={'path_param': { 'field_name': 'run_ref', 'style': 'simple', 'explode': False }})
    r"""The run_ref is the identifier of a run as returned by the departures/* and runs/* endpoints. WARNING, run_id is deprecated. Use run_ref instead."""  
    date_utc: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_utc', 'style': 'form', 'explode': True }})
    r"""Filter by the date and time of the request (ISO 8601 UTC format)"""  
    devid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'devid', 'style': 'form', 'explode': True }})
    r"""Your developer id"""  
    include_geopath: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_geopath', 'style': 'form', 'explode': True }})
    r"""Indicates if geopath data will be returned (default = false)"""  
    include_skipped_stops: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_skipped_stops', 'style': 'form', 'explode': True }})
    r"""Include any skipped stops in a stopping pattern. Defaults to false."""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'signature', 'style': 'form', 'explode': True }})
    r"""Authentication signature for request"""  
    stop_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stop_id', 'style': 'form', 'explode': True }})
    r"""Filter by stop_id; values returned by Stops API"""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Please ignore"""  
    

@dataclasses.dataclass
class PatternsGetPatternByRunResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    v3_error_response: Optional[shared_v3_errorresponse.V3ErrorResponse] = dataclasses.field(default=None)
    r"""Invalid Request"""  
    v3_stopping_pattern: Optional[shared_v3_stoppingpattern.V3StoppingPattern] = dataclasses.field(default=None)
    r"""The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)"""  
    