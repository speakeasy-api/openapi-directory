// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsCountsPerDaySecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ErrorsCountsPerDayErrorTypeEnum - Type of error (handled vs unhandled), excluding All
type ErrorsCountsPerDayErrorTypeEnum string

const (
	ErrorsCountsPerDayErrorTypeEnumUnhandledError ErrorsCountsPerDayErrorTypeEnum = "unhandledError"
	ErrorsCountsPerDayErrorTypeEnumHandledError   ErrorsCountsPerDayErrorTypeEnum = "handledError"
)

func (e ErrorsCountsPerDayErrorTypeEnum) ToPointer() *ErrorsCountsPerDayErrorTypeEnum {
	return &e
}

func (e *ErrorsCountsPerDayErrorTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unhandledError":
		fallthrough
	case "handledError":
		*e = ErrorsCountsPerDayErrorTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsCountsPerDayErrorTypeEnum: %v", v)
	}
}

type ErrorsCountsPerDayRequest struct {
	// app build
	AppBuild *string `queryParam:"style=form,explode=true,name=app_build"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// Type of error (handled vs unhandled), excluding All
	ErrorType *ErrorsCountsPerDayErrorTypeEnum `queryParam:"style=form,explode=true,name=errorType"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format
	Start   time.Time `queryParam:"style=form,explode=true,name=start"`
	Version *string   `queryParam:"style=form,explode=true,name=version"`
}

type ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnumConflict            ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum) ToPointer() *ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type ErrorsCountsPerDayDefaultApplicationJSONError struct {
	Code    ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                `json:"message"`
}

// ErrorsCountsPerDayDefaultApplicationJSON - Error code with reason
type ErrorsCountsPerDayDefaultApplicationJSON struct {
	Error ErrorsCountsPerDayDefaultApplicationJSONError `json:"error"`
}

type ErrorsCountsPerDay200ApplicationJSONErrors struct {
	// count of the object
	Count *int64 `json:"count,omitempty"`
	// the ISO 8601 datetime
	Datetime *string `json:"datetime,omitempty"`
}

// ErrorsCountsPerDay200ApplicationJSON - Count of crashes or errors by day in the time range, and total over the entire time range.
type ErrorsCountsPerDay200ApplicationJSON struct {
	// total error count
	Count *int64 `json:"count,omitempty"`
	// the total error count for day
	Errors []ErrorsCountsPerDay200ApplicationJSONErrors `json:"errors,omitempty"`
}

type ErrorsCountsPerDayResponse struct {
	ContentType string
	// Count of crashes or errors by day in the time range, and total over the entire time range.
	ErrorsCountsPerDay200ApplicationJSONObject *ErrorsCountsPerDay200ApplicationJSON
	// Error code with reason
	ErrorsCountsPerDayDefaultApplicationJSONObject *ErrorsCountsPerDayDefaultApplicationJSON
	StatusCode                                     int
	RawResponse                                    *http.Response
}
