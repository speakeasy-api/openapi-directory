// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ExportIterationFlavorEnum - The flavor of the target platform (Windows, Linux, ARM, or GPU)
type ExportIterationFlavorEnum string

const (
	ExportIterationFlavorEnumLinux   ExportIterationFlavorEnum = "Linux"
	ExportIterationFlavorEnumWindows ExportIterationFlavorEnum = "Windows"
)

func (e *ExportIterationFlavorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Linux":
		fallthrough
	case "Windows":
		*e = ExportIterationFlavorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportIterationFlavorEnum: %s", s)
	}
}

// ExportIterationPlatformEnum - The target platform (coreml or tensorflow)
type ExportIterationPlatformEnum string

const (
	ExportIterationPlatformEnumCoreMl     ExportIterationPlatformEnum = "CoreML"
	ExportIterationPlatformEnumTensorFlow ExportIterationPlatformEnum = "TensorFlow"
	ExportIterationPlatformEnumDockerFile ExportIterationPlatformEnum = "DockerFile"
	ExportIterationPlatformEnumOnnx       ExportIterationPlatformEnum = "ONNX"
)

func (e *ExportIterationPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CoreML":
		fallthrough
	case "TensorFlow":
		fallthrough
	case "DockerFile":
		fallthrough
	case "ONNX":
		*e = ExportIterationPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportIterationPlatformEnum: %s", s)
	}
}

type ExportIterationRequest struct {
	TrainingKey string `header:"style=simple,explode=false,name=Training-Key"`
	// The flavor of the target platform (Windows, Linux, ARM, or GPU)
	Flavor *ExportIterationFlavorEnum `queryParam:"style=form,explode=true,name=flavor"`
	// The iteration id
	IterationID string `pathParam:"style=simple,explode=false,name=iterationId"`
	// The target platform (coreml or tensorflow)
	Platform ExportIterationPlatformEnum `queryParam:"style=form,explode=true,name=platform"`
	// The project id
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
}

type ExportIterationResponse struct {
	Body        []byte
	ContentType string
	// OK
	Export      *shared.Export
	StatusCode  int
	RawResponse *http.Response
}
