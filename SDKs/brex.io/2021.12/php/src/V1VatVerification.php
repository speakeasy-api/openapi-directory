<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class V1VatVerification 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns a verification result
     * 
     * Basic verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VatBasicRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VatBasicSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VatBasicResponse
     */
	public function vatBasic(
        \OpenAPI\OpenAPI\Models\Operations\VatBasicRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VatBasicSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VatBasicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/vat-verification/basic-check/{country}', \OpenAPI\OpenAPI\Models\Operations\VatBasicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VatBasicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vatBasic200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VatBasic200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vatBasicDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VatBasicDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a verification result and company data
     * 
     * Extended verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VatComprehensiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VatComprehensiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VatComprehensiveResponse
     */
	public function vatComprehensive(
        \OpenAPI\OpenAPI\Models\Operations\VatComprehensiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VatComprehensiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VatComprehensiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/vat-verification/comprehensive-check/{country}', \OpenAPI\OpenAPI\Models\Operations\VatComprehensiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VatComprehensiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vatComprehensive200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VatComprehensive200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vatComprehensiveDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VatComprehensiveDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a level two verification result
     * 
     * Second Level Verification of VAT number against BMF Austria. Optional confirmation parameter can be provided to order a Confirmation Report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VatLevelTwoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VatLevelTwoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VatLevelTwoResponse
     */
	public function vatLevelTwo(
        \OpenAPI\OpenAPI\Models\Operations\VatLevelTwoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VatLevelTwoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VatLevelTwoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/vat-verification/leveltwo-check/{country}', \OpenAPI\OpenAPI\Models\Operations\VatLevelTwoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VatLevelTwoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vatLevelTwo200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VatLevelTwo200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vatLevelTwoDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VatLevelTwoDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of vat numbers with additional data
     * 
     * Reverse VAT Lookup: Search for companies and their VAT numbers by company name. Search is forwarded to a provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VatLookupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VatLookupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VatLookupResponse
     */
	public function vatLookup(
        \OpenAPI\OpenAPI\Models\Operations\VatLookupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VatLookupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VatLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/vat-verification/lookup/{country}', \OpenAPI\OpenAPI\Models\Operations\VatLookupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VatLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vatLookup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VatLookup200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vatLookupDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VatLookupDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}