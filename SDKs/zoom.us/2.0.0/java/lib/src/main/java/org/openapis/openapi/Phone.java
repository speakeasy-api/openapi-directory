/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Phone {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Phone(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Unassign phone number
     * Unassign [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6) of a Zoom phone user. &lt;br&gt;
     * 
     * After assigning a phone number, you can remove it if you don't want it to be assigned to anyone.
     * 
     * **Scopes**: `phone:write` `phone:write:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 3. User must have been previously assigned a Zoom Phone number.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UnassignPhoneNumberResponse unassignPhoneNumber(org.openapis.openapi.models.operations.UnassignPhoneNumberRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UnassignPhoneNumberPathParams.class, baseUrl, "/phone/users/{userId}/phone_numbers/{phoneNumberId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UnassignPhoneNumberResponse res = new org.openapis.openapi.models.operations.UnassignPhoneNumberResponse() {{
            unassignPhoneNumber204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.unassignPhoneNumber204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get account's call logs
     * Retrieve [call logs](https://support.zoom.us/hc/en-us/articles/360021114452-Viewing-Call-Logs) for an account. 
     * 
     * **Scopes**: `phone:read:admin`&lt;br&gt;
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`&lt;br&gt;
     * **Prerequisite:**&lt;br&gt;
     * 1. Business or Enterprise account&lt;br&gt;
     * 2. A Zoom Phone license&lt;br&gt;
     * 3. Account Owner and a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) with Zoom Phone Management&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AccountCallLogsResponse accountCallLogs(org.openapis.openapi.models.operations.AccountCallLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/call_logs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AccountCallLogsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AccountCallLogsResponse res = new org.openapis.openapi.models.operations.AccountCallLogsResponse() {{
            accountCallLogs200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AccountCallLogs200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AccountCallLogs200ApplicationJSON.class);
                res.accountCallLogs200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Add BYOC phone numbers
     * Use this API to add BYOC phone numbers(provided to you by your carrier) to Zoom.
     * 
     * **Scope:** `phone:write:admin` or `phone:write` or `phone:master`
     * 
     * **Prerequisites:**&lt;br&gt;
     * * The account must hold a business or enterprise plan and Zoom Phone license.
     * 
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddBYOCNumberResponse addBYOCNumber(org.openapis.openapi.models.operations.AddBYOCNumberRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/byoc_numbers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddBYOCNumberResponse res = new org.openapis.openapi.models.operations.AddBYOCNumberResponse() {{
            addBYOCNumber201ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddBYOCNumber201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddBYOCNumber201ApplicationJSON.class);
                res.addBYOCNumber201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 429) {
        }

        return res;
    }

    /**
     * Add a setting template
     * This API lets you create a Zoom Phone setting template for an account. Template type includes **User**, **Auto Receptionist**, or **Call Queue**. Settings include profile, policy and user settings. After creating a phone template, the settings defined via this request will become the default settings for an account.
     * &lt;br&gt;&lt;br&gt;
     * **Scope**: 
     * * `phone:write:admin` `phone:write`
     * 
     * 
     * **Prerequisites**:
     * 1. Business or enterprise Zoom account
     * 2. A Zoom Phone license
     * 
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * &lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddSettingTemplateResponse addSettingTemplate(org.openapis.openapi.models.operations.AddSettingTemplateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/setting_templates");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddSettingTemplateResponse res = new org.openapis.openapi.models.operations.AddSettingTemplateResponse() {{
            addSettingTemplate201ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddSettingTemplate201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddSettingTemplate201ApplicationJSON.class);
                res.addSettingTemplate201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Set up shared access
     * Phone users can access [shared voicemail inboxes](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) in the Zoom desktop client, web portal, or provisioned desk phone. Use this API to define the voicemail access permissions of a user.
     * 
     * To view these settings in the Zoom web portal, navigate to **Admin &gt;Phone System Management&gt; Users &amp; Rooms**. Click the **Users** tab and select **User Settings**. Scroll down to **Voicemail &amp; Call Recordings**.&lt;br&gt;
     * 
     * **Scope**:`phone:write:admin`&lt;br&gt;
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * 
     * **Prerequisites**: &lt;br&gt;
     * Business or Enterprise Account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddUserSettingResponse addUserSetting(org.openapis.openapi.models.operations.AddUserSettingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AddUserSettingPathParams.class, baseUrl, "/phone/users/{userId}/settings/{settingType}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddUserSettingResponse res = new org.openapis.openapi.models.operations.AddUserSettingResponse() {{
            addUserSetting201ApplicationJSONObject = null;
            body = null;
            body = null;
            addUserSetting400ApplicationJSONAny = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddUserSetting201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddUserSetting201ApplicationJSON.class);
                res.addUserSetting201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.addUserSetting400ApplicationJSONAny = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Assign calling plan to a user
     * Assign [calling plan](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) to a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051-Zoom-Phone) user.
     * 
     * **Scopes**: `phone:write` `phone:write:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AssignCallingPlanResponse assignCallingPlan(org.openapis.openapi.models.operations.AssignCallingPlanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AssignCallingPlanPathParams.class, baseUrl, "/phone/users/{userId}/calling_plans", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AssignCallingPlanResponse res = new org.openapis.openapi.models.operations.AssignCallingPlanResponse() {{
            assignCallingPlan200ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.assignCallingPlan200ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Assign phone number to user
     * Assign a [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers) to a user who has already enabled Zoom Phone. 
     * 
     * **Scopes**: `phone:write` `phone:write:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AssignPhoneNumberResponse assignPhoneNumber(org.openapis.openapi.models.operations.AssignPhoneNumberRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AssignPhoneNumberPathParams.class, baseUrl, "/phone/users/{userId}/phone_numbers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AssignPhoneNumberResponse res = new org.openapis.openapi.models.operations.AssignPhoneNumberResponse() {{
            assignPhoneNumber200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AssignPhoneNumber200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AssignPhoneNumber200ApplicationJSON.class);
                res.assignPhoneNumber200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Change main company number
     * The [main company number](https://support.zoom.us/hc/en-us/articles/360028553691) can be used by external callers to reach your phone users (by dialing the main company number and the user's extension). It can also be used by phone users in your account as their caller ID while making calls.&lt;br&gt;&lt;br&gt; Use this API to [change the main company number](https://support.zoom.us/hc/en-us/articles/360028553691#h_82414c34-9df2-428a-85a4-efcf7f9e0d72) of an account.&lt;br&gt;&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or higher account plan.
     * * Account owner or admin permissions&lt;br&gt;
     * **Scopes:** `phone:write:admin`&lt;br&gt; 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangeMainCompanyNumberResponse changeMainCompanyNumber(org.openapis.openapi.models.operations.ChangeMainCompanyNumberRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/company_number");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChangeMainCompanyNumberResponse res = new org.openapis.openapi.models.operations.ChangeMainCompanyNumberResponse() {{
            changeMainCompanyNumber204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.changeMainCompanyNumber204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Delete a user's call log
     * Delete a user's [call log](https://support.zoom.us/hc/en-us/articles/360021114452-Viewing-and-identifying-logs).
     * 
     * **Scopes:** `phone:write`, `phone:write:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * **Prerequisites:** 
     * 1. User must belong to a Business or an Enterprise account.
     * 2. User must hold a Zoom Phone license.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCallLogResponse deleteCallLog(org.openapis.openapi.models.operations.DeleteCallLogRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCallLogPathParams.class, baseUrl, "/phone/users/{userId}/call_logs/{callLogId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCallLogResponse res = new org.openapis.openapi.models.operations.DeleteCallLogResponse() {{
            deleteCallLog204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.deleteCallLog204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Remove shared access
     * Remove the shared voicemail access settings that were previously assigned to a user. 
     * 
     * To view these settings in your Zoom web portal, navigate to **Admin &gt;Phone System Management&gt; Users &amp; Rooms**. Click the **Users** tab and select **User Settings**. Scroll down to **Voicemail &amp; Call Recordings**.&lt;br&gt;
     * 
     * **Scope**: `phone:write:admin`&lt;br&gt;&lt;br&gt;
     * **Prerequisites**:&lt;br&gt;
     * * Business or enterprise Account&lt;br&gt;
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUserSettingResponse deleteUserSetting(org.openapis.openapi.models.operations.DeleteUserSettingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserSettingPathParams.class, baseUrl, "/phone/users/{userId}/settings/{settingType}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteUserSettingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserSettingResponse res = new org.openapis.openapi.models.operations.DeleteUserSettingResponse() {{
            deleteUserSetting204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.deleteUserSetting204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Delete a voicemail
     * Delete a [voicemail message](https://support.zoom.us/hc/en-us/articles/360021400211-Managing-voicemail-messages) from a Zoom account.
     * 
     * **Scope:** `phone:write:admin` or `phone:write`
     * 
     * 
     * **Prerequisite**:
     * * The account must have activted Zoom Phone license.
     * 
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteVoicemailResponse deleteVoicemail(org.openapis.openapi.models.operations.DeleteVoicemailRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteVoicemailPathParams.class, baseUrl, "/phone/voice_mails/{voicemailId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteVoicemailResponse res = new org.openapis.openapi.models.operations.DeleteVoicemailResponse() {{
            deleteVoicemail204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.deleteVoicemail204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get phone number details
     * A Zoom account owner or admin can purchase phone numbers and assign them to Zoom phone users. Use this API to get details on a specific Phone number in a Zoom account.&lt;br&gt;&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or higher plan with Zoom phone license&lt;br&gt;
     * **Scope:** `phone:read:admin`&lt;br&gt; 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetPhoneNumberDetailsResponse getPhoneNumberDetails(org.openapis.openapi.models.operations.GetPhoneNumberDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetPhoneNumberDetailsPathParams.class, baseUrl, "/phone/numbers/{numberId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetPhoneNumberDetailsResponse res = new org.openapis.openapi.models.operations.GetPhoneNumberDetailsResponse() {{
            getPhoneNumberDetails200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetPhoneNumberDetails200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetPhoneNumberDetails200ApplicationJSON.class);
                res.getPhoneNumberDetails200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Get call recordings
     * List [call recordings](https://support.zoom.us/hc/en-us/articles/360038521091-Accessing-and-sharing-call-recordings) of an account.&lt;br&gt;
     * 
     * **Scopes:**&lt;br&gt;
     * * `phone:read:admin` `phone:write:admin`
     * 
     * **Prerequisties:** &lt;br&gt;
     * * Pro or higher account with Zoom Phone license.
     * * Account owner or admin privileges.
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetPhoneRecordingsResponse getPhoneRecordings(org.openapis.openapi.models.operations.GetPhoneRecordingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/recordings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetPhoneRecordingsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetPhoneRecordingsResponse res = new org.openapis.openapi.models.operations.GetPhoneRecordingsResponse() {{
            getPhoneRecordings200ApplicationJSONObject = null;
            body = null;
            body = null;
            getPhoneRecordings400ApplicationJSONAny = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetPhoneRecordings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetPhoneRecordings200ApplicationJSON.class);
                res.getPhoneRecordings200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.getPhoneRecordings400ApplicationJSONAny = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Get setting template details
     * This API lets you retrieve a specific account phone template previously created. &lt;br&gt;
     * 
     * **Scope**: &lt;br&gt;
     * * `phone:write:admin` or `phone:write`
     * 
     * **Prerequisites**: &lt;br&gt;
     * 1. Business or Enterprise Account
     * 2. A Zoom Phone license
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSettingTemplateResponse getSettingTemplate(org.openapis.openapi.models.operations.GetSettingTemplateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSettingTemplatePathParams.class, baseUrl, "/phone/setting_templates/{templateId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSettingTemplateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSettingTemplateResponse res = new org.openapis.openapi.models.operations.GetSettingTemplateResponse() {{
            getSettingTemplate200ApplicationJSONObject = null;
            body = null;
            body = null;
            getSettingTemplate404ApplicationJSONAny = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSettingTemplate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSettingTemplate200ApplicationJSON.class);
                res.getSettingTemplate200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.getSettingTemplate404ApplicationJSONAny = out;
            }
        }

        return res;
    }

    /**
     * List phone numbers
     * A Zoom account owner or admin can purchase phone numbers and assign them to Zoom phone users. Use this API to list all Zoom Phone numbers in a Zoom account. You can filter the response based on your needs by using query parameters.
     * 
     * **Prerequisites:**&lt;br&gt;
     * * Pro or higher plan with Zoom phone license&lt;br&gt;
     * **Scope:** `phone:read:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAccountPhoneNumbersResponse listAccountPhoneNumbers(org.openapis.openapi.models.operations.ListAccountPhoneNumbersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/numbers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAccountPhoneNumbersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAccountPhoneNumbersResponse res = new org.openapis.openapi.models.operations.ListAccountPhoneNumbersResponse() {{
            listAccountPhoneNumbers200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAccountPhoneNumbers200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAccountPhoneNumbers200ApplicationJSON.class);
                res.listAccountPhoneNumbers200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * List BYOC SIP trunks
     * List [BYOC SIP trunks](https://zoom.us/docs/doc/Zoom-Bring%20Your%20Own%20Carrier.pdf) that are assigned to an account. 
     * 
     * **Scopes**:&lt;br&gt;
     * * `phone:write:admin` or `phone:master`&lt;br&gt;
     * 
     * **Prerequisites**:&lt;br&gt;
     * * Business or Enterprise Account
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBYOCSIPTrunkResponse listBYOCSIPTrunk(org.openapis.openapi.models.operations.ListBYOCSIPTrunkRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/sip_trunk/trunks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBYOCSIPTrunkQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBYOCSIPTrunkResponse res = new org.openapis.openapi.models.operations.ListBYOCSIPTrunkResponse() {{
            listBYOCSIPTrunk200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBYOCSIPTrunk200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBYOCSIPTrunk200ApplicationJSON.class);
                res.listBYOCSIPTrunk200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * List calling plans
     * List all Zoom Phone [calling plans](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) that are enabled for a Zoom account.&lt;br&gt;&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or a higher account with Zoom phone license. &lt;br&gt;
     * **Scope:** `phone:read:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCallingPlansResponse listCallingPlans(org.openapis.openapi.models.operations.ListCallingPlansRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/calling_plans");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCallingPlansResponse res = new org.openapis.openapi.models.operations.ListCallingPlansResponse() {{
            listCallingPlans200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCallingPlans200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCallingPlans200ApplicationJSON.class);
                res.listCallingPlans200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * List phone users
     * List all the users on an account who have been assigned Zoom Phone licenses.&lt;br&gt;&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or higher plan with Zoom phone license&lt;br&gt;
     * **Scope:** `phone:read:admin`&lt;br&gt;
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListPhoneUsersResponse listPhoneUsers(org.openapis.openapi.models.operations.ListPhoneUsersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListPhoneUsersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListPhoneUsersResponse res = new org.openapis.openapi.models.operations.ListPhoneUsersResponse() {{
            listPhoneUsers200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListPhoneUsers200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListPhoneUsers200ApplicationJSON.class);
                res.listPhoneUsers200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * List setting templates
     * This API lets you retrieve a list of all the phone template settings previously created. 
     * &lt;br&gt;
     * **Scope**:&lt;br&gt;
     * * `phone:read:admin` or `phone:read`
     * &lt;br&gt;**Prerequisites**: &lt;br&gt;
     * 1. Business or enterprise Account
     * 2. A Zoom Phone license
     * 
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSettingTemplatesResponse listSettingTemplates(org.openapis.openapi.models.operations.ListSettingTemplatesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/phone/setting_templates");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSettingTemplatesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSettingTemplatesResponse res = new org.openapis.openapi.models.operations.ListSettingTemplatesResponse() {{
            listSettingTemplates200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSettingTemplates200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSettingTemplates200ApplicationJSON.class);
                res.listSettingTemplates200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get user's profile
     * Retrieve a user's [zoom phone](https://support.zoom.us/hc/en-us/articles/360001297663-Quickstart-Guide-for-Zoom-Phone-Administrators) profile.
     * 
     * **Scopes:** `phone:read`, `phone:read:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * **Prerequisites** :
     * 1. Business or Enterprise account 
     * 2. A Zoom Phone license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PhoneUserResponse phoneUser(org.openapis.openapi.models.operations.PhoneUserRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PhoneUserPathParams.class, baseUrl, "/phone/users/{userId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PhoneUserResponse res = new org.openapis.openapi.models.operations.PhoneUserResponse() {{
            phoneUser200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PhoneUser200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PhoneUser200ApplicationJSON.class);
                res.phoneUser200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get user's call logs
     * Retrieve a [zoom phone](https://support.zoom.us/hc/en-us/articles/360001297663-Quickstart-Guide-for-Zoom-Phone-Administrators) user's call logs.
     * 
     * **Scopes:** `phone:read`, `phone:read:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`&lt;br&gt;
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PhoneUserCallLogsResponse phoneUserCallLogs(org.openapis.openapi.models.operations.PhoneUserCallLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PhoneUserCallLogsPathParams.class, baseUrl, "/phone/users/{userId}/call_logs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PhoneUserCallLogsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PhoneUserCallLogsResponse res = new org.openapis.openapi.models.operations.PhoneUserCallLogsResponse() {{
            phoneUserCallLogs200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PhoneUserCallLogs200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PhoneUserCallLogs200ApplicationJSON.class);
                res.phoneUserCallLogs200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get user's recordings
     * Retrieve a user's zoom [phone recordings](https://support.zoom.us/hc/en-us/articles/360021336671-Viewing-Call-History-and-Recordings).
     * **Scopes:** `phone:read`, `phone:read:admin`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt;
     * **Prerequisite:**
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PhoneUserRecordingsResponse phoneUserRecordings(org.openapis.openapi.models.operations.PhoneUserRecordingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PhoneUserRecordingsPathParams.class, baseUrl, "/phone/users/{userId}/recordings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PhoneUserRecordingsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PhoneUserRecordingsResponse res = new org.openapis.openapi.models.operations.PhoneUserRecordingsResponse() {{
            phoneUserRecordings200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PhoneUserRecordings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PhoneUserRecordings200ApplicationJSON.class);
                res.phoneUserRecordings200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get user's settings
     * Retrieve a user's zoom phone profile [settings](https://support.zoom.us/hc/en-us/articles/360021325712-Configuring-Settings).
     * 
     * **Scopes:** `phone:read`, `phone:read:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisite:**
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PhoneUserSettingsResponse phoneUserSettings(org.openapis.openapi.models.operations.PhoneUserSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PhoneUserSettingsPathParams.class, baseUrl, "/phone/users/{userId}/settings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PhoneUserSettingsResponse res = new org.openapis.openapi.models.operations.PhoneUserSettingsResponse() {{
            phoneUserSettings200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PhoneUserSettings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PhoneUserSettings200ApplicationJSON.class);
                res.phoneUserSettings200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get user's voicemails
     * Retrieve a user's Zoom Phone voicemails. 
     * 
     * **Scopes:** `phone:read`, `phone:read:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt;
     * **Prerequisite:**
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PhoneUserVoiceMailsResponse phoneUserVoiceMails(org.openapis.openapi.models.operations.PhoneUserVoiceMailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PhoneUserVoiceMailsPathParams.class, baseUrl, "/phone/users/{userId}/voice_mails", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PhoneUserVoiceMailsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PhoneUserVoiceMailsResponse res = new org.openapis.openapi.models.operations.PhoneUserVoiceMailsResponse() {{
            phoneUserVoiceMails200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PhoneUserVoiceMails200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PhoneUserVoiceMails200ApplicationJSON.class);
                res.phoneUserVoiceMails200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Assign SIP trunks
     * Using this API, a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) owner can assign SIP trunk(s) to a sub account.&lt;br&gt;
     * 
     * **Scope**:&lt;br&gt;
     * * `phone:master` &lt;br&gt;
     * 
     * **Prerequisites**:&lt;br&gt;
     * * Business or enterprise Account.&lt;br&gt;
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPhoneSIPTrunkResponse postPhoneSIPTrunk(org.openapis.openapi.models.operations.PostPhoneSIPTrunkRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostPhoneSIPTrunkPathParams.class, baseUrl, "/accounts/{accountId}/phone/sip_trunk/trunks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPhoneSIPTrunkResponse res = new org.openapis.openapi.models.operations.PostPhoneSIPTrunkResponse() {{
            postPhoneSIPTrunk201ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPhoneSIPTrunk201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPhoneSIPTrunk201ApplicationJSON.class);
                res.postPhoneSIPTrunk201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Set up a Zoom Phone account
     * After assigning a Zoom phone license to an account, an admin or account owner can proceed with the [initial Zoom phone set up](https://support.zoom.us/hc/en-us/articles/360001297663-Getting-started-with-Zoom-Phone-admin-#h_5ae26a3a-290c-4a8d-b3b0-6384ed267b13) using this API.
     * 
     * **Scope**:&lt;br&gt;
     * * `phone:write:admin` `phone:write`
     * 
     * **Prerequisites**: &lt;br&gt;
     * * Pro or a higher paid account with master account option enabled.
     * 
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SetUpAccountResponse setUpAccount(org.openapis.openapi.models.operations.SetUpAccountRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SetUpAccountPathParams.class, baseUrl, "/accounts/{accountId}/phone/setup", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SetUpAccountResponse res = new org.openapis.openapi.models.operations.SetUpAccountResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201 || httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Unassign user's calling plan
     * Unassign a [calling plan](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) that was previously assigned to a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051) user.
     * 
     * **Scopes**: `phone:write` `phone:write:admin`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UnassignCallingPlanResponse unassignCallingPlan(org.openapis.openapi.models.operations.UnassignCallingPlanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UnassignCallingPlanPathParams.class, baseUrl, "/phone/users/{userId}/calling_plans/{type}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UnassignCallingPlanResponse res = new org.openapis.openapi.models.operations.UnassignCallingPlanResponse() {{
            unassignCallingPlan204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.unassignCallingPlan204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update phone number details
     * Update phone number details.
     * 
     * **Scopes:**
     * * `phone:write` `phone:write:admin`
     * * `phone:master`
     * 
     * **Prerequisite:**
     * * Paid account
     * 
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePhoneNumberDetailsResponse updatePhoneNumberDetails(org.openapis.openapi.models.operations.UpdatePhoneNumberDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdatePhoneNumberDetailsPathParams.class, baseUrl, "/phone/numbers/{numberId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdatePhoneNumberDetailsResponse res = new org.openapis.openapi.models.operations.UpdatePhoneNumberDetailsResponse() {{
            updatePhoneNumberDetails204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.updatePhoneNumberDetails204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update SIP trunk details
     * Update details of a SIP trunk that is assigned to a sub account.&lt;br&gt;
     * 
     * **Scope**:&lt;br&gt;
     * * `phone:master` &lt;br&gt;
     * 
     * **Prerequisites**:&lt;br&gt;
     * Business or Enterprise Account.&lt;br&gt;
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePhoneSIPTrunkResponse updatePhoneSIPTrunk(org.openapis.openapi.models.operations.UpdatePhoneSIPTrunkRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdatePhoneSIPTrunkPathParams.class, baseUrl, "/accounts/{accountId}/phone/sip_trunk/trunks/{sipTrunkId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdatePhoneSIPTrunkResponse res = new org.openapis.openapi.models.operations.UpdatePhoneSIPTrunkResponse() {{
            updatePhoneSIPTrunk204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.updatePhoneSIPTrunk204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update BYOC settings
     * Only [master account owners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) can use this API to enable BYOC(Bring your own carrier) option for a sub account.&lt;br&gt;
     * 
     * **Scope**:&lt;br&gt;
     * * `phone:master` &lt;br&gt;
     * 
     * **Prerequisites**: &lt;br&gt;
     * * Business or enterprise Account.&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePhoneSettingsResponse updatePhoneSettings(org.openapis.openapi.models.operations.UpdatePhoneSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdatePhoneSettingsPathParams.class, baseUrl, "/accounts/{accountId}/phone/settings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdatePhoneSettingsResponse res = new org.openapis.openapi.models.operations.UpdatePhoneSettingsResponse() {{
            updatePhoneSettings204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.updatePhoneSettings204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Update a setting template
     * Use this API to update or modify profile settings for the phone template. Template type includes **User**, **Auto Receptionist**, or **Call Queue**. After you've modified a template, click **User Settings** to set up settings for Call Handling, Desk Phone, and Others. &lt;br&gt;
     * 
     * **Scope**:&lt;br&gt;
     * * `phone:write:admin` or `phone:write`
     * 
     * **Prerequisites**: &lt;br&gt;
     * 1. Business or Enterprise Account
     * 2. A Zoom Phone license
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSettingTemplateResponse updateSettingTemplate(org.openapis.openapi.models.operations.UpdateSettingTemplateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSettingTemplatePathParams.class, baseUrl, "/phone/setting_templates/{templateId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSettingTemplateResponse res = new org.openapis.openapi.models.operations.UpdateSettingTemplateResponse() {{
            updateSettingTemplate204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.updateSettingTemplate204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update user's profile
     * Update a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051-Zoom-Phone) user's profile.
     * 
     * **Scopes:** `phone:write` `phone:write:admin`  &lt;br&gt;
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUserProfileResponse updateUserProfile(org.openapis.openapi.models.operations.UpdateUserProfileRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUserProfilePathParams.class, baseUrl, "/phone/users/{userId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUserProfileResponse res = new org.openapis.openapi.models.operations.UpdateUserProfileResponse() {{
            updateUserProfile204ApplicationJSONAny = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.updateUserProfile204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Update shared access
     * Phone users can access [shared voicemail inboxes](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) in the Zoom desktop client, web portal, or provisioned desk phone. Use this API to update the voicemail access permissions of a user.
     * 
     * To view these settings in the Zoom web portal, navigate to **Admin &gt;Phone System Management&gt; Users &amp; Rooms**. Click the **Users** tab and select **User Settings**. Scroll down to **Voicemail &amp; Call Recordings**.&lt;br&gt;
     * 
     * **Scope**: &lt;br&gt;`phone:write:admin`&lt;br&gt;
     * &lt;br&gt;**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * 
     * **Prerequisites**:&lt;br&gt;
     * Business or Enterprise Account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUserSettingResponse updateUserSetting(org.openapis.openapi.models.operations.UpdateUserSettingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUserSettingPathParams.class, baseUrl, "/phone/users/{userId}/settings/{settingType}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUserSettingResponse res = new org.openapis.openapi.models.operations.UpdateUserSettingResponse() {{
            updateUserSetting204ApplicationJSONAny = null;
            body = null;
            body = null;
            updateUserSetting400ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.updateUserSetting204ApplicationJSONAny = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateUserSetting400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }
}