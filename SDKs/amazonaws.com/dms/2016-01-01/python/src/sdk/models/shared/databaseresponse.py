"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import collectorshortinforesponse as shared_collectorshortinforesponse
from ..shared import databaseinstancesoftwaredetailsresponse as shared_databaseinstancesoftwaredetailsresponse
from ..shared import servershortinforesponse as shared_servershortinforesponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DatabaseResponse:
    r"""Describes a database in a Fleet Advisor collector inventory."""
    
    collectors: Optional[list[shared_collectorshortinforesponse.CollectorShortInfoResponse]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Collectors'), 'exclude': lambda f: f is None }})  
    database_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseId'), 'exclude': lambda f: f is None }})  
    database_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseName'), 'exclude': lambda f: f is None }})  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpAddress'), 'exclude': lambda f: f is None }})  
    number_of_schemas: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfSchemas'), 'exclude': lambda f: f is None }})  
    server: Optional[shared_servershortinforesponse.ServerShortInfoResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Server'), 'exclude': lambda f: f is None }})  
    software_details: Optional[shared_databaseinstancesoftwaredetailsresponse.DatabaseInstanceSoftwareDetailsResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SoftwareDetails'), 'exclude': lambda f: f is None }})  
    