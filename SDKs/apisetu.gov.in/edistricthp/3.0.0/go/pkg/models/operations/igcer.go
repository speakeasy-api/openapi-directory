// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IgcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type IgcerRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// IgcerRequestBodyFormatEnum - The format of the certificate in response.
type IgcerRequestBodyFormatEnum string

const (
	IgcerRequestBodyFormatEnumPdf IgcerRequestBodyFormatEnum = "pdf"
)

func (e IgcerRequestBodyFormatEnum) ToPointer() *IgcerRequestBodyFormatEnum {
	return &e
}

func (e *IgcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = IgcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IgcerRequestBodyFormatEnum: %v", v)
	}
}

// IgcerRequestBody - Request format
type IgcerRequestBody struct {
	CertificateParameters *IgcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format IgcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Igcer504ApplicationJSONErrorEnum string

const (
	Igcer504ApplicationJSONErrorEnumGatewayTimeout Igcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Igcer504ApplicationJSONErrorEnum) ToPointer() *Igcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Igcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Igcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Igcer504ApplicationJSONErrorDescriptionEnum string

const (
	Igcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Igcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Igcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Igcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Igcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Igcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Igcer504ApplicationJSON - Gateway timeout
type Igcer504ApplicationJSON struct {
	Error            *Igcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Igcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Igcer503ApplicationJSONErrorEnum string

const (
	Igcer503ApplicationJSONErrorEnumServiceUnavailable Igcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Igcer503ApplicationJSONErrorEnum) ToPointer() *Igcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Igcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Igcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Igcer503ApplicationJSONErrorDescriptionEnum string

const (
	Igcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Igcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Igcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Igcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Igcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Igcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Igcer503ApplicationJSON - Service unavailable
type Igcer503ApplicationJSON struct {
	Error            *Igcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Igcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Igcer502ApplicationJSONErrorEnum string

const (
	Igcer502ApplicationJSONErrorEnumBadGatewy Igcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Igcer502ApplicationJSONErrorEnum) ToPointer() *Igcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Igcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Igcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Igcer502ApplicationJSONErrorDescriptionEnum string

const (
	Igcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Igcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Igcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Igcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Igcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Igcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Igcer502ApplicationJSON - Bad gateway
type Igcer502ApplicationJSON struct {
	Error            *Igcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Igcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Igcer500ApplicationJSONErrorEnum string

const (
	Igcer500ApplicationJSONErrorEnumInternalServerError Igcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Igcer500ApplicationJSONErrorEnum) ToPointer() *Igcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Igcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Igcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Igcer500ApplicationJSONErrorDescriptionEnum string

const (
	Igcer500ApplicationJSONErrorDescriptionEnumInternalServerError Igcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Igcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Igcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Igcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Igcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Igcer500ApplicationJSON - Internal server error
type Igcer500ApplicationJSON struct {
	Error            *Igcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Igcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Igcer404ApplicationJSONErrorEnum string

const (
	Igcer404ApplicationJSONErrorEnumRecordNotFound Igcer404ApplicationJSONErrorEnum = "record_not_found"
	Igcer404ApplicationJSONErrorEnumURLNotFound    Igcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Igcer404ApplicationJSONErrorEnum) ToPointer() *Igcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Igcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Igcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Igcer404ApplicationJSONErrorDescriptionEnum string

const (
	Igcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Igcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Igcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Igcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Igcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Igcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Igcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Igcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Igcer404ApplicationJSON - No record found
type Igcer404ApplicationJSON struct {
	Error            *Igcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Igcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Igcer401ApplicationJSONErrorEnum string

const (
	Igcer401ApplicationJSONErrorEnumInvalidAuthentication Igcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Igcer401ApplicationJSONErrorEnumInvalidAuthorization  Igcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Igcer401ApplicationJSONErrorEnum) ToPointer() *Igcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Igcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Igcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Igcer401ApplicationJSONErrorDescriptionEnum string

const (
	Igcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Igcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Igcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Igcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Igcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Igcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Igcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Igcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Igcer401ApplicationJSON - Unauthorized access
type Igcer401ApplicationJSON struct {
	Error            *Igcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Igcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Igcer400ApplicationJSONErrorEnum string

const (
	Igcer400ApplicationJSONErrorEnumMissingParameter Igcer400ApplicationJSONErrorEnum = "missing_parameter"
	Igcer400ApplicationJSONErrorEnumInvalidParameter Igcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Igcer400ApplicationJSONErrorEnumInvalidFormat    Igcer400ApplicationJSONErrorEnum = "invalid_format"
	Igcer400ApplicationJSONErrorEnumInvalidTxnid     Igcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Igcer400ApplicationJSONErrorEnumInvalidConsentid Igcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Igcer400ApplicationJSONErrorEnum) ToPointer() *Igcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Igcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Igcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Igcer400ApplicationJSONErrorDescriptionEnum string

const (
	Igcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Igcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Igcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Igcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Igcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Igcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Igcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Igcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Igcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Igcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Igcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Igcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Igcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Igcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Igcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Igcer400ApplicationJSON - Bad request
type Igcer400ApplicationJSON struct {
	Error            *Igcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Igcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type IgcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Igcer400ApplicationJSONObject *Igcer400ApplicationJSON
	// Unauthorized access
	Igcer401ApplicationJSONObject *Igcer401ApplicationJSON
	// No record found
	Igcer404ApplicationJSONObject *Igcer404ApplicationJSON
	// Internal server error
	Igcer500ApplicationJSONObject *Igcer500ApplicationJSON
	// Bad gateway
	Igcer502ApplicationJSONObject *Igcer502ApplicationJSON
	// Service unavailable
	Igcer503ApplicationJSONObject *Igcer503ApplicationJSON
	// Gateway timeout
	Igcer504ApplicationJSONObject *Igcer504ApplicationJSON
}
