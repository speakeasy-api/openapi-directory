// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DataQueryJobQueryStatusEnum - Status of the query job.
//
// * `submitted` - query submitted to query service for processing
// * `accepted` - query accepted by the query service
// * `in_progress` - query executed by the query service
// * `completed` - query execution completed by the query service
// * `failed` - query unable to be processed by the query service
// * `cancelled` - query cancelled by the user
//
// If the value of this field is `completed`, the `dataFile` field contains the location of the query results.
//
// If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/DELETE_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.
type DataQueryJobQueryStatusEnum string

const (
	DataQueryJobQueryStatusEnumSubmitted  DataQueryJobQueryStatusEnum = "submitted"
	DataQueryJobQueryStatusEnumAccepted   DataQueryJobQueryStatusEnum = "accepted"
	DataQueryJobQueryStatusEnumInProgress DataQueryJobQueryStatusEnum = "in_progress"
	DataQueryJobQueryStatusEnumCompleted  DataQueryJobQueryStatusEnum = "completed"
	DataQueryJobQueryStatusEnumFailed     DataQueryJobQueryStatusEnum = "failed"
	DataQueryJobQueryStatusEnumCancelled  DataQueryJobQueryStatusEnum = "cancelled"
)

func (e *DataQueryJobQueryStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "submitted":
		fallthrough
	case "accepted":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		fallthrough
	case "cancelled":
		*e = DataQueryJobQueryStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataQueryJobQueryStatusEnum: %s", s)
	}
}

// DataQueryJob - A data query job.
type DataQueryJob struct {
	// The query job creator's Id.
	//
	CreatedBy *string `json:"createdBy,omitempty"`
	// The URL of the query results. Only applicable if the value of the `queryStatus` field is `completed`.
	//
	DataFile *string `json:"dataFile,omitempty"`
	// Internal identifier of the query job.
	//
	ID *string `json:"id,omitempty"`
	// The number of rows the query results. Only applicable if the value of the `queryStatus` field is `completed`.
	//
	OutputRows *int64 `json:"outputRows,omitempty"`
	// Processing time of the query job, in milliseconds. Only applicable if the value of the `queryStatus` field is `completed`.
	//
	ProcessingTime *int64 `json:"processingTime,omitempty"`
	// The query that was submitted.
	//
	Query *string `json:"query,omitempty"`
	// Status of the query job.
	//
	// * `submitted` - query submitted to query service for processing
	// * `accepted` - query accepted by the query service
	// * `in_progress` - query executed by the query service
	// * `completed` - query execution completed by the query service
	// * `failed` - query unable to be processed by the query service
	// * `cancelled` - query cancelled by the user
	//
	// If the value of this field is `completed`, the `dataFile` field contains the location of the query results.
	//
	// If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/DELETE_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.
	//
	QueryStatus *DataQueryJobQueryStatusEnum `json:"queryStatus,omitempty"`
	// The number of times that Zuora will retry the query if Zuora is unable to perform the query.
	//
	RemainingRetries *int64 `json:"remainingRetries,omitempty"`
	// Date and time when the query job was last updated, in ISO 8601 format.
	//
	UpdatedOn *time.Time `json:"updatedOn,omitempty"`
}
