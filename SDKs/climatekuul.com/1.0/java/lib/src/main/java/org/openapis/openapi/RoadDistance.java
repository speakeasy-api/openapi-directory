/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

public class RoadDistance {
	
    /**
	 * CONFIRM_CARBON_OFFSET5_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_CARBON_OFFSET5_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRM_PAYMENT5_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_PAYMENT5_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRM_PAYMENT_OF_TRANSACTION5_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_PAYMENT_OF_TRANSACTION5_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRMS_PLANTING5_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRMS_PLANTING5_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * ROAD_DISTANCE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] ROAD_DISTANCE_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public RoadDistance(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * confirmCarbonOffset
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmCarbonOffset5Response confirmCarbonOffset5(org.openapis.openapi.models.operations.ConfirmCarbonOffset5RequestBody request) throws Exception {
        return this.confirmCarbonOffset5(request, null);
    }

    /**
     * confirmCarbonOffset
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmCarbonOffset5Response confirmCarbonOffset5(org.openapis.openapi.models.operations.ConfirmCarbonOffset5RequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_CARBON_OFFSET5_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/roadDistance/confirmCarbonOffset");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmCarbonOffset5Response res = new org.openapis.openapi.models.operations.ConfirmCarbonOffset5Response(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmPayment
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPayment5Response confirmPayment5(org.openapis.openapi.models.operations.ConfirmPayment5RequestBody request) throws Exception {
        return this.confirmPayment5(request, null);
    }

    /**
     * confirmPayment
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPayment5Response confirmPayment5(org.openapis.openapi.models.operations.ConfirmPayment5RequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_PAYMENT5_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/roadDistance/confirmPayment");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmPayment5Response res = new org.openapis.openapi.models.operations.ConfirmPayment5Response(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmTransaction
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction5Response confirmPaymentOfTransaction5(org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction5RequestBody request) throws Exception {
        return this.confirmPaymentOfTransaction5(request, null);
    }

    /**
     * confirmTransaction
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction5Response confirmPaymentOfTransaction5(org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction5RequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_PAYMENT_OF_TRANSACTION5_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/roadDistance/confirmTransaction");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction5Response res = new org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction5Response(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmPlanting
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmsPlanting5Response confirmsPlanting5(org.openapis.openapi.models.operations.ConfirmsPlanting5RequestBody request) throws Exception {
        return this.confirmsPlanting5(request, null);
    }

    /**
     * confirmPlanting
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmsPlanting5Response confirmsPlanting5(org.openapis.openapi.models.operations.ConfirmsPlanting5RequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRMS_PLANTING5_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/roadDistance/confirmPlanting");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmsPlanting5Response res = new org.openapis.openapi.models.operations.ConfirmsPlanting5Response(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * RoadDistance
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RoadDistanceResponse roadDistance(org.openapis.openapi.models.operations.RoadDistanceRequestBody request) throws Exception {
        return this.roadDistance(request, null);
    }

    /**
     * RoadDistance
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RoadDistanceResponse roadDistance(org.openapis.openapi.models.operations.RoadDistanceRequestBody request, String serverURL) throws Exception {
        String baseUrl = ROAD_DISTANCE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/roadDistance");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RoadDistanceResponse res = new org.openapis.openapi.models.operations.RoadDistanceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}