/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * **object** containing details about the primary contact (**note**: this contact needn't be a traveller)
 */
export class BookingBookRequestBodyBooker extends SpeakeasyBase {
  /**
   * **telephone number** of the lead traveler
   *
   * @remarks
   *
   * **Note**:
   *
   *   * Must be included to enable CLC communications
   *   * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cellPhone" })
  cellPhone?: string;

  /**
   * **country code** for the telephone number of the lead traveler
   *
   * @remarks
   *
   * **Note**:
   *
   *   * Must be included to enable CLC communications.
   *   * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cellPhoneCountryCode" })
  cellPhoneCountryCode?: string;

  /**
   * **email address** of the primary contact
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * **first name** of the primary contact
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstname" })
  firstname: string;

  /**
   * **phone number** (home) of the primary contact
   */
  @SpeakeasyMetadata()
  @Expose({ name: "homePhone" })
  homePhone?: string;

  /**
   * **surname** of the primary contact
   */
  @SpeakeasyMetadata()
  @Expose({ name: "surname" })
  surname: string;

  /**
   * **title** of the primary contact
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class BookingBookRequestBodyItemsBookingQuestionAnswers extends SpeakeasyBase {
  /**
   * **answer** to the question for the `questionId` listed (recommended length for the answer is 500 characters)
   *
   * @remarks
   *
   * **Note**: To specify answers for each traveler, separate the values with a comma as in the per_person_booking_questions request example
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answer" })
  answer?: string;

  /**
   * **numeric identifier** for the question (**note**: `questionId` can be retrieved from the [/product](#operation/product) service)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "questionId" })
  questionId?: number;
}

/**
 * **object** containing partner details at a per-item level
 */
export class BookingBookRequestBodyItemsPartnerItemDetail extends SpeakeasyBase {
  /**
   * **unique alphanumeric code** for the order ('itinerary') (merchant API partners must pass a `distributorItemRef` into the `partnerItemDetails` object for each item in *this* object
   *
   * @remarks
   * - this code can be any alphanumeric string and is defined by the distributor
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorItemRef" })
  distributorItemRef?: string;
}

export class BookingBookRequestBodyItemsTravellers extends SpeakeasyBase {
  /**
   * **unique numeric identifier** for the age band
   *
   * @remarks
   * - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bandId" })
  bandId?: number;

  /**
   * **first name** of *this* traveller
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstname" })
  firstname?: string;

  /**
   * **indicator**: `true` if this traveler is the lead traveler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadTraveller" })
  leadTraveller?: boolean;

  /**
   * **surname** of *this* traveler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "surname" })
  surname?: string;

  /**
   * **title** of the traveler (e.g `'Mr'`, `'Mrs'`, `'Ms'`, `'Miss'`, `'Mstr'`, `'Dr'`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class BookingBookRequestBodyItems extends SpeakeasyBase {
  /**
   * **array** of objects containing booking questions and the answers provided for them for *this* product
   *
   * @remarks
   * - If a booking question is available in the `bookingQuestions` array in the response from [/product](#operation/product) for *this* product, the matching `bookingQuestionAnswers` must be passed to *this* service.
   * - If a product does not have any booking questions, you can omit the `bookingQuestionAnswers` array in your request.
   * - Any invalid or unrequired booking-question answers that are passed to *this* service will be ignored (and, no exceptions will be raised)
   * - You will need to include this array if [/product](#operation/product) returns any questions in the `bookingQuestions` array.
   *
   */
  @SpeakeasyMetadata({
    elemType: BookingBookRequestBodyItemsBookingQuestionAnswers,
  })
  @Expose({ name: "bookingQuestionAnswers" })
  @Type(() => BookingBookRequestBodyItemsBookingQuestionAnswers)
  bookingQuestionAnswers?: BookingBookRequestBodyItemsBookingQuestionAnswers[];

  /**
   * **specifer** of the hotel
   *
   * @remarks
   * If [/product](#operation/product) returns `hotelPickup`: `true` and a list of hotels is available for *this* product in [/booking/hotels](#operation/bookingHotels), a `hotelId` must be captured (as per the hotel service id field); or, use an alternative `hotelId`, such as:
   *
   *  - `"notBooked"`: the customer has not yet booked their hotel
   *  - `"notListed"`: the customer's hotel is not listed
   *
   *  If the customer chooses one of these options, the product supplier may need to correspond with the user to find out their pick-up location. The best way to do this is by enabling [Closed-Loop-Communication (CLC)](#section/Merchant-APIs/Supplier-communications).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hotelId" })
  hotelId?: string;

  /**
   * **specifier** of language service provided for this product that has been chosen for this booking (usually in the format langcode/Service eg en/SERVICE_GUIDE. If the product details service [/product](#operation/product) for the product returns a langService, this must be provided.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "languageOptionCode" })
  languageOptionCode?: string;

  /**
   * **object** containing partner details at a per-item level
   */
  @SpeakeasyMetadata()
  @Expose({ name: "partnerItemDetail" })
  @Type(() => BookingBookRequestBodyItemsPartnerItemDetail)
  partnerItemDetail?: BookingBookRequestBodyItemsPartnerItemDetail;

  /**
   * **details** about the hotel pick-up point (must be provided if the `hotelId` selected by the user is `'notListed'` or if no hotels are returned for *this* product in [/booking/hotels](#operation/bookingHotels) where `hotelPickup` is `true`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pickupPoint" })
  pickupPoint?: string;

  /**
   * **unique alphanumeric identifier** of the product to be booked
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productCode" })
  productCode?: string;

  /**
   * **text field** to capture any additional requirements for the booking, such as dietary requirements or if a wheelchair is required
   */
  @SpeakeasyMetadata()
  @Expose({ name: "specialRequirements" })
  specialRequirements?: string;

  /**
   * **specifier** of the tour grade to be booked (if tour grades are supplied in [/product](#operation/product), you must allow the customer to select a tour grade code. If no tour grades are available for *this* product, set this to `'DEFAULT'`.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tourGradeCode" })
  tourGradeCode?: string;

  /**
   * **date** of travel for the item in format yyyy-mm-dd
   */
  @SpeakeasyMetadata()
  @Expose({ name: "travelDate" })
  travelDate?: string;

  /**
   * **array** of traveler names, details and whether they are the lead traveller
   */
  @SpeakeasyMetadata({ elemType: BookingBookRequestBodyItemsTravellers })
  @Expose({ name: "travellers" })
  @Type(() => BookingBookRequestBodyItemsTravellers)
  travellers?: BookingBookRequestBodyItemsTravellers[];
}

/**
 * Applicable only for extra partner detail for either partner or merchant partner for sending partner specific information
 *
 * @remarks
 *
 */
export class BookingBookRequestBodyPartnerDetail extends SpeakeasyBase {
  /**
   * **unique alphanumeric reference code** for the distributor
   *
   * @remarks
   * - Merchant API partners must pass a `distributorRef` at the order (A.K.A. 'itinerary') level in the `partnerDetail` object. The `distributorRef` passed must be alphanumeric and unique to bookings made by the merchant.
   * - Passing an existing `distributorRef`: If an existing `distributorRef` is passed, the booking with the matching `distributorRef` will be returned in the response and a new booking will not be made. The fields in the response are identical to the response for a new booking.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorRef" })
  distributorRef?: string;
}

export class BookingBookRequestBody extends SpeakeasyBase {
  /**
   * **object** containing details about the primary contact (**note**: this contact needn't be a traveller)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "booker" })
  @Type(() => BookingBookRequestBodyBooker)
  booker?: BookingBookRequestBodyBooker;

  /**
   * **currency code** for the currency the booking will be submitted in (you will be billed in this currency)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * **specifier**: `true` if this is a *demo* booking only (demos do not send any notifications, are automatically confirmed and OnRequest products become freesale products. Default value is true. Production must have `demo` set to `false`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "demo" })
  demo?: boolean;

  /**
   * **array** of items to be booked
   */
  @SpeakeasyMetadata({ elemType: BookingBookRequestBodyItems })
  @Expose({ name: "items" })
  @Type(() => BookingBookRequestBodyItems)
  items?: BookingBookRequestBodyItems[];

  /**
   * Applicable only for extra partner detail for either partner or merchant partner for sending partner specific information
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "partnerDetail" })
  @Type(() => BookingBookRequestBodyPartnerDetail)
  partnerDetail?: BookingBookRequestBodyPartnerDetail;
}

export class BookingBookRequest extends SpeakeasyBase {
  /**
   * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Accept-Language",
  })
  acceptLanguage: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: BookingBookRequestBody;
}

export class BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate extends SpeakeasyBase {
  /**
   * **number** of days prior to the tour start date that *this* policy window begins. `null` signifies open-endedness
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dayRangeMax" })
  dayRangeMax?: number;

  /**
   * **number** of days prior to the tour start date that *this* policy window ends
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dayRangeMin" })
  dayRangeMin?: number;

  /**
   * **percentage** of total price refundable if cancelled within *this* time window
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentageRefundable" })
  percentageRefundable?: number;

  /**
   * **Unix timestamp** giving the exact time the policy ends
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyEndTimestamp" })
  policyEndTimestamp?: number;

  /**
   * **Unix timestamp** giving the exact time the policy commences
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyStartTimestamp" })
  policyStartTimestamp?: number;
}

export class BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditions extends SpeakeasyBase {
  /**
   * **currency-formatted** amount that will be refunded if the cancellation is processed now.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amountRefundable" })
  amountRefundable?: string;

  /**
   * **array** of cancellation policy objects
   */
  @SpeakeasyMetadata({
    elemType:
      BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate,
  })
  @Expose({ name: "cancellationFromTourDate" })
  @Type(
    () =>
      BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate
  )
  cancellationFromTourDate?: BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate[];

  /**
   * **natural-language description** of the terms and conditions for *this* product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "termsAndConditions" })
  termsAndConditions?: string;
}

export class BookingBook200ApplicationJSONDataItemSummariesTravellerAgeBands extends SpeakeasyBase {
  /**
   * **unique numeric identifier** for the age band
   *
   * @remarks
   * - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ageBandId" })
  ageBandId?: number;

  /**
   * **numeric** number of travelers in *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * **natural-language description** (singular) of *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * **natural-language description** (plural) of *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pluralDescription" })
  pluralDescription?: string;

  /**
   * **sort order** for *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;
}

export class BookingBook200ApplicationJSONDataItemSummaries extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "applePassSupported" })
  applePassSupported?: boolean;

  /**
   * Indicates whether a voucher is required for each passenger; or, whether the requirement is one voucher per group booking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "barcodeOption" })
  barcodeOption?: string;

  /**
   * **alphanumeric code** specifying the type of barcode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "barcodeType" })
  barcodeType?: string;

  /**
   * [booking type indicator](#section/Key-concepts/Booking-concepts) that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
   *
   * @remarks
   *
   * *one of* the following:
   * - `"UF"` (FreesaleBE and UnconditionalBE) – this booking will be confirmed immediately
   * - `"OR"` (DeferredCRMBE) – the booked product is an on-request product, will not be confirmed immediately and will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
   * - `"FO"` (FreesaleOnRequestBE) – the booked product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingEngineId" })
  bookingEngineId?: shared.BookingEngineIdResponseEnum;

  /**
   * **object** containing item booking status information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingStatus" })
  @Type(() => shared.BookingStatusItem)
  bookingStatus?: shared.BookingStatusItem;

  /**
   * **currency code** for the currency in which pricing is displayed for *this* item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * **natural-language description** of *this* item's departure location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departsFrom" })
  departsFrom?: string;

  /**
   * **natural-language description** of *this* item's departure point
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departurePoint" })
  departurePoint?: string;

  /**
   * **HTML-formatted address** of *this* item's departure point
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departurePointAddress" })
  departurePointAddress?: string;

  /**
   * **natural-language description** of directions regarding *this* item's departure point
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departurePointDirections" })
  departurePointDirections?: string;

  /**
   * **unique numeric identifer** of the destination of *this* item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destId" })
  destId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorItemRef" })
  distributorItemRef?: string;

  /**
   * The `hoursConfirmed` field also indicates if the product is freesale or on request. The `hoursConfirmed` value is the approximate window for confirmation in hours, which can be presented to the customer. A value of `0` means that the product is **freesale**, and a value greater than `0` means that the product is **on-request**.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hoursConfirmed" })
  hoursConfirmed?: string;

  /**
   * **numeric identifer** of *this* item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemId" })
  itemId?: number;

  /**
   * Ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryId" })
  itineraryId?: number;

  /**
   * **code** for the language that this product operates in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "languageServicesCode" })
  languageServicesCode?: string;

  /**
   * **numeric merchant net rate** of *this* item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastRetailPrice" })
  lastRetailPrice?: number;

  /**
   * **currency-formatted merchant net rate** of *this* item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastRetailPriceFormatted" })
  lastRetailPriceFormatted?: string;

  /**
   * **first name** of the lead traveler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadTravellerFirstname" })
  leadTravellerFirstname?: string;

  /**
   * **surname** of the lead traveler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadTravellerSurname" })
  leadTravellerSurname?: string;

  /**
   * **title** of the lead traveler's name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadTravellerTitle" })
  leadTravellerTitle?: string;

  /**
   * ignore (Viator only)
   *
   * @remarks
   *
   * For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantCancellable" })
  merchantCancellable?: boolean;

  /**
   * **numeric merchant net rate** for *this* item"
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantNetPrice" })
  merchantNetPrice?: number;

  /**
   * **currency-formatted merchant net rate** for *this* item
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantNetPriceFormatted" })
  merchantNetPriceFormatted?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchantTermsAndConditions" })
  @Type(
    () =>
      BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditions
  )
  merchantTermsAndConditions?: BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditions;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "obfsId" })
  obfsId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passbooks" })
  passbooks?: string;

  /**
   * **identifer** for the pick-up hotel
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pickupHotelId" })
  pickupHotelId?: string;

  /**
   * **natural-language name** of the pick-up hotel
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pickupHotelName" })
  pickupHotelName?: string;

  /**
   * **numeric merchant total price** for *this* item
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price?: number;

  /**
   * **currency-formatted merchant total price** for *this* item
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceFormatted" })
  priceFormatted?: string;

  /**
   * **numeric merchant total price** in USD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceUSD" })
  priceUSD?: number;

  /**
   * **unique alphanumeric identifier** of *this* product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productCode" })
  productCode?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productPulledDown" })
  productPulledDown?: boolean;

  /**
   * **natural-language title** of *this* product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productTitle" })
  productTitle?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productWidgetList" })
  productWidgetList?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rulesApplied" })
  rulesApplied?: string;

  /**
   * Ignore (Viator only)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "savingAmount" })
  savingAmount?: string;

  /**
   * Ignore (Viator only)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "savingAmountFormated" })
  savingAmountFormated?: string;

  /**
   * **sort order** of *this* item summary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;

  /**
   * **starting time** of this product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startingTime" })
  startingTime?: string;

  /**
   * **natural-language name** of *this* product's supplier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplierName" })
  supplierName?: string;

  /**
   * **telephone number** of *this* product's supplier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplierPhoneNumber" })
  supplierPhoneNumber?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "termsAndConditions" })
  termsAndConditions?: Record<string, any>;

  /**
   * **identifer** of *this* tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tourGradeCode" })
  tourGradeCode?: string;

  /**
   * **natural-language description** of *this* tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tourGradeDescription" })
  tourGradeDescription?: string;

  /**
   * **date** of travel
   */
  @SpeakeasyMetadata()
  @Expose({ name: "travelDate" })
  travelDate?: string;

  /**
   * **array** of objects detailing the traveler age bands
   */
  @SpeakeasyMetadata({
    elemType: BookingBook200ApplicationJSONDataItemSummariesTravellerAgeBands,
  })
  @Expose({ name: "travellerAgeBands" })
  @Type(() => BookingBook200ApplicationJSONDataItemSummariesTravellerAgeBands)
  travellerAgeBands?: BookingBook200ApplicationJSONDataItemSummariesTravellerAgeBands[];

  /**
   * Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherKey" })
  voucherKey?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherOption" })
  voucherOption?: string;

  /**
   * **natural-language description** of the requirements pertaining to this voucher
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherRequirements" })
  voucherRequirements?: string;

  /**
   * **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherURL" })
  voucherURL?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vouchers" })
  vouchers?: string;
}

export class BookingBook200ApplicationJSONData extends SpeakeasyBase {
  /**
   * **email address** of the entity that made *this* booking
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookerEmail" })
  bookerEmail?: string;

  /**
   * **date** of *this* booking
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDate" })
  bookingDate?: string;

  /**
   * **object** containing itinerary booking status information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingStatus" })
  @Type(() => shared.BookingStatusItinerary)
  bookingStatus?: shared.BookingStatusItinerary;

  /**
   * **currency code** of the currency in which *this* booking was made
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorRef" })
  distributorRef?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exchangeRate" })
  exchangeRate?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasVoucher" })
  hasVoucher?: boolean;

  /**
   * **array** of item summaries
   */
  @SpeakeasyMetadata({
    elemType: BookingBook200ApplicationJSONDataItemSummaries,
  })
  @Expose({ name: "itemSummaries" })
  @Type(() => BookingBook200ApplicationJSONDataItemSummaries)
  itemSummaries?: BookingBook200ApplicationJSONDataItemSummaries[];

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryId" })
  itineraryId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "omniPreRuleList" })
  omniPreRuleList?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paypalRedirectURL" })
  paypalRedirectURL?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rulesApplied" })
  rulesApplied?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "securityToken" })
  securityToken?: string;

  /**
   * **sort order** for *this* object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;

  /**
   * **numeric merchant total price** for *this* booking
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPrice" })
  totalPrice?: number;

  /**
   * **currency-formatted merchant total price** for *this* booking
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPriceFormatted" })
  totalPriceFormatted?: string;

  /**
   * **numeric merchant total price** of *this* booking in USD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPriceUSD" })
  totalPriceUSD?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userId" })
  userId?: string;

  /**
   * Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherKey" })
  voucherKey?: string;

  /**
   * **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherURL" })
  voucherURL?: string;
}

/**
 * Success
 */
export class BookingBook200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => BookingBook200ApplicationJSONData)
  data?: BookingBook200ApplicationJSONData;

  /**
   * **timestamp** of *this* response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateStamp" })
  dateStamp?: string;

  /**
   * **array** of error codes pertaining to *this* error
   *
   * @remarks
   * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCodes" })
  errorCodes?: string[];

  /**
   * **array** of error message strings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: any[];

  /**
   * **array** of error message strings in plain text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessageText" })
  errorMessageText?: string;

  /**
   * **name** of *this* type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorName" })
  errorName?: string;

  /**
   * **reference number** of *this* error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorReference" })
  errorReference?: string;

  /**
   * **code** specifying the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorType" })
  errorType?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraInfo" })
  extraInfo?: Record<string, any>;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraObject" })
  extraObject?: Record<string, any>;

  /**
   * **boolean indicator** of *this* request's outcome
   *
   * @remarks
   * - `true`: the request was successful with no errors
   * - `false`: an error was encountered
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * **number** of results available for *this* service
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;

  /**
   * **unique numeric id** of the server that processed *this* request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vmid" })
  vmid?: string;
}

export class BookingBookResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  bookingBook200ApplicationJSONObject?: BookingBook200ApplicationJSON;
}
