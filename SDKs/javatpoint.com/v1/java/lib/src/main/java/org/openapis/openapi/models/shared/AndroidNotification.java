/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AndroidNotification - Notification to send to android devices.
 */
public class AndroidNotification {
    /**
     * The notification's body text. If present, it will override google.firebase.fcm.v1.Notification.body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;

    public AndroidNotification withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bodyLocArgs")
    public String[] bodyLocArgs;

    public AndroidNotification withBodyLocArgs(String[] bodyLocArgs) {
        this.bodyLocArgs = bodyLocArgs;
        return this;
    }
    
    /**
     * The key to the body string in the app's string resources to use to localize the body text to the user's current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bodyLocKey")
    public String bodyLocKey;

    public AndroidNotification withBodyLocKey(String bodyLocKey) {
        this.bodyLocKey = bodyLocKey;
        return this;
    }
    
    /**
     * If set, display notifications delivered to the device will be handled by the app instead of the proxy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bypassProxyNotification")
    public Boolean bypassProxyNotification;

    public AndroidNotification withBypassProxyNotification(Boolean bypassProxyNotification) {
        this.bypassProxyNotification = bypassProxyNotification;
        return this;
    }
    
    /**
     * The [notification's channel id](https://developer.android.com/guide/topics/ui/notifiers/notifications#ManageChannels) (new in Android O). The app must create a channel with this channel ID before any notification with this channel ID is received. If you don't send this channel ID in the request, or if the channel ID provided has not yet been created by the app, FCM uses the channel ID specified in the app manifest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelId")
    public String channelId;

    public AndroidNotification withChannelId(String channelId) {
        this.channelId = channelId;
        return this;
    }
    
    /**
     * The action associated with a user click on the notification. If specified, an activity with a matching intent filter is launched when a user clicks on the notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickAction")
    public String clickAction;

    public AndroidNotification withClickAction(String clickAction) {
        this.clickAction = clickAction;
        return this;
    }
    
    /**
     * The notification's icon color, expressed in #rrggbb format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    public String color;

    public AndroidNotification withColor(String color) {
        this.color = color;
        return this;
    }
    
    /**
     * If set to true, use the Android framework's default LED light settings for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If `default_light_settings` is set to true and `light_settings` is also set, the user-specified `light_settings` is used instead of the default value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultLightSettings")
    public Boolean defaultLightSettings;

    public AndroidNotification withDefaultLightSettings(Boolean defaultLightSettings) {
        this.defaultLightSettings = defaultLightSettings;
        return this;
    }
    
    /**
     * If set to true, use the Android framework's default sound for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultSound")
    public Boolean defaultSound;

    public AndroidNotification withDefaultSound(Boolean defaultSound) {
        this.defaultSound = defaultSound;
        return this;
    }
    
    /**
     * If set to true, use the Android framework's default vibrate pattern for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If `default_vibrate_timings` is set to true and `vibrate_timings` is also set, the default value is used instead of the user-specified `vibrate_timings`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultVibrateTimings")
    public Boolean defaultVibrateTimings;

    public AndroidNotification withDefaultVibrateTimings(Boolean defaultVibrateTimings) {
        this.defaultVibrateTimings = defaultVibrateTimings;
        return this;
    }
    
    /**
     * Set the time that the event in the notification occurred. Notifications in the panel are sorted by this time. A point in time is represented using [protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Timestamp).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTime")
    public String eventTime;

    public AndroidNotification withEventTime(String eventTime) {
        this.eventTime = eventTime;
        return this;
    }
    
    /**
     * The notification's icon. Sets the notification icon to myicon for drawable resource myicon. If you don't send this key in the request, FCM displays the launcher icon specified in your app manifest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    public String icon;

    public AndroidNotification withIcon(String icon) {
        this.icon = icon;
        return this;
    }
    
    /**
     * Contains the URL of an image that is going to be displayed in a notification. If present, it will override google.firebase.fcm.v1.Notification.image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;

    public AndroidNotification withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * Settings to control notification LED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lightSettings")
    public LightSettings lightSettings;

    public AndroidNotification withLightSettings(LightSettings lightSettings) {
        this.lightSettings = lightSettings;
        return this;
    }
    
    /**
     * Set whether or not this notification is relevant only to the current device. Some notifications can be bridged to other devices for remote display, such as a Wear OS watch. This hint can be set to recommend this notification not be bridged. See [Wear OS guides](https://developer.android.com/training/wearables/notifications/bridger#existing-method-of-preventing-bridging)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localOnly")
    public Boolean localOnly;

    public AndroidNotification withLocalOnly(Boolean localOnly) {
        this.localOnly = localOnly;
        return this;
    }
    
    /**
     * Sets the number of items this notification represents. May be displayed as a badge count for launchers that support badging.See [Notification Badge](https://developer.android.com/training/notify-user/badges). For example, this might be useful if you're using just one notification to represent multiple new messages but you want the count here to represent the number of total new messages. If zero or unspecified, systems that support badging use the default, which is to increment a number displayed on the long-press menu each time a new notification arrives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationCount")
    public Integer notificationCount;

    public AndroidNotification withNotificationCount(Integer notificationCount) {
        this.notificationCount = notificationCount;
        return this;
    }
    
    /**
     * Set the relative priority for this notification. Priority is an indication of how much of the user's attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The effect of setting the same priorities may differ slightly on different platforms. Note this priority differs from `AndroidMessagePriority`. This priority is processed by the client after the message has been delivered, whereas [AndroidMessagePriority](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#androidmessagepriority) is an FCM concept that controls when the message is delivered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationPriority")
    public AndroidNotificationNotificationPriorityEnum notificationPriority;

    public AndroidNotification withNotificationPriority(AndroidNotificationNotificationPriorityEnum notificationPriority) {
        this.notificationPriority = notificationPriority;
        return this;
    }
    
    /**
     * The sound to play when the device receives the notification. Supports "default" or the filename of a sound resource bundled in the app. Sound files must reside in /res/raw/.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sound")
    public String sound;

    public AndroidNotification withSound(String sound) {
        this.sound = sound;
        return this;
    }
    
    /**
     * When set to false or unset, the notification is automatically dismissed when the user clicks it in the panel. When set to true, the notification persists even when the user clicks it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sticky")
    public Boolean sticky;

    public AndroidNotification withSticky(Boolean sticky) {
        this.sticky = sticky;
        return this;
    }
    
    /**
     * Identifier used to replace existing notifications in the notification drawer. If not specified, each request creates a new notification. If specified and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tag")
    public String tag;

    public AndroidNotification withTag(String tag) {
        this.tag = tag;
        return this;
    }
    
    /**
     * Sets the "ticker" text, which is sent to accessibility services. Prior to API level 21 (`Lollipop`), sets the text that is displayed in the status bar when the notification first arrives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticker")
    public String ticker;

    public AndroidNotification withTicker(String ticker) {
        this.ticker = ticker;
        return this;
    }
    
    /**
     * The notification's title. If present, it will override google.firebase.fcm.v1.Notification.title.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public AndroidNotification withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("titleLocArgs")
    public String[] titleLocArgs;

    public AndroidNotification withTitleLocArgs(String[] titleLocArgs) {
        this.titleLocArgs = titleLocArgs;
        return this;
    }
    
    /**
     * The key to the title string in the app's string resources to use to localize the title text to the user's current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("titleLocKey")
    public String titleLocKey;

    public AndroidNotification withTitleLocKey(String titleLocKey) {
        this.titleLocKey = titleLocKey;
        return this;
    }
    
    /**
     * Set the vibration pattern to use. Pass in an array of [protobuf.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration) to turn on or off the vibrator. The first value indicates the `Duration` to wait before turning the vibrator on. The next value indicates the `Duration` to keep the vibrator on. Subsequent values alternate between `Duration` to turn the vibrator off and to turn the vibrator on. If `vibrate_timings` is set and `default_vibrate_timings` is set to `true`, the default value is used instead of the user-specified `vibrate_timings`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vibrateTimings")
    public String[] vibrateTimings;

    public AndroidNotification withVibrateTimings(String[] vibrateTimings) {
        this.vibrateTimings = vibrateTimings;
        return this;
    }
    
    /**
     * Set the [Notification.visibility](https://developer.android.com/reference/android/app/Notification.html#visibility) of the notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public AndroidNotificationVisibilityEnum visibility;

    public AndroidNotification withVisibility(AndroidNotificationVisibilityEnum visibility) {
        this.visibility = visibility;
        return this;
    }
    
    public AndroidNotification(){}
}
