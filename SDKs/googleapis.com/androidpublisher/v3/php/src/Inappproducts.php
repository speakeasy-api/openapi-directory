<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Inappproducts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an in-app product (i.e. a managed product or a subscriptions).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteResponse
     */
	public function androidpublisherInappproductsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets an in-app product, which can be a managed product or a subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetResponse
     */
	public function androidpublisherInappproductsGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inAppProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InAppProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an in-app product (i.e. a managed product or a subscriptions).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertResponse
     */
	public function androidpublisherInappproductsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/inappproducts', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "inAppProduct", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inAppProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InAppProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all in-app products - both managed products and subscriptions. If an app has a large number of in-app products, the response may be paginated. In this case the response field `tokenPagination.nextPageToken` will be set and the caller should provide its value as a `token` request parameter to retrieve the next page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListResponse
     */
	public function androidpublisherInappproductsList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/inappproducts', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inappproductsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InappproductsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches an in-app product (i.e. a managed product or a subscriptions).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchResponse
     */
	public function androidpublisherInappproductsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "inAppProduct", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inAppProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InAppProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an in-app product (i.e. a managed product or a subscriptions).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateResponse
     */
	public function androidpublisherInappproductsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "inAppProduct", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherInappproductsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inAppProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InAppProduct', 'json');
            }
        }

        return $response;
    }
}