"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import searchfreetextresponse as shared_searchfreetextresponse
from ..shared import sortorder_enum as shared_sortorder_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class SearchFreetextRequestBodySearchTypesEnum(str, Enum):
    PRODUCT = 'PRODUCT'
    DESTINATION = 'DESTINATION'
    ATTRACTION = 'ATTRACTION'
    RECOMMENDATION = 'RECOMMENDATION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchFreetextRequestBody:
    
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** for the currency in which to display product pricing information"""  
    dest_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of the destination to search within
    - `destinationId` can be retrieved from the [/taxonomy/destinations](#operation/taxonomyDestinations) service
    """  
    search_types: Optional[list[SearchFreetextRequestBodySearchTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchTypes'), 'exclude': lambda f: f is None }})
    r"""**array** of search domain specifiers where each item is *one of*:
      - `\"PRODUCT\"`: a tour / activity
      - `\"DESTINATION\"`: continent, country, city, region
      - `\"ATTRACTION\"`: an attraction within a destination (only available to partners with SEO access)
      - `\"RECOMMENDATION\"`: an attraction within a destination (only available to partners with SEO access)
    """  
    sort_order: Optional[shared_sortorder_enum.SortOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** in which to return the results that is *one of*:
    
      - `'TOP_SELLERS'`: the top sellers
      - `'REVIEW_AVG_RATING_A'`: ascending by average traveler rating (low -&gt; high)
      - `'REVIEW_AVG_RATING_D'`: descending by average traveler rating (high -&gt; low)
      - `'PRICE_FROM_A'`: ascending by price (low -&gt; high)
      - `'PRICE_FROM_D'`: descending by price (high -&gt; low)
    """  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""**text** to search for"""  
    top_x: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topX'), 'exclude': lambda f: f is None }})
    r"""**start and end rows** to return in the format {start}-{end}
    - e.g. `'1-10'`, `'11-20'`
    
    **Note**: 
    - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
    - if `topX` is not specified, the default is `'1-100'`
    """  
    

@dataclasses.dataclass
class SearchFreetextRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    request_body: Optional[SearchFreetextRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchFreetext200ApplicationJSON:
    r"""Success"""
    
    data: Optional[list[shared_searchfreetextresponse.SearchFreetextResponse]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""**array** of search results"""  
    date_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateStamp'), 'exclude': lambda f: f is None }})
    r"""**timestamp** of *this* response"""  
    error_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCodes'), 'exclude': lambda f: f is None }})
    r"""**array** of error codes pertaining to *this* error
    - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
    """  
    error_message: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings"""  
    error_message_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessageText'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings in plain text"""  
    error_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorName'), 'exclude': lambda f: f is None }})
    r"""**name** of *this* type of error"""  
    error_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorReference'), 'exclude': lambda f: f is None }})
    r"""**reference number** of *this* error"""  
    error_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""**code** specifying the type of error"""  
    extra_info: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraInfo'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    extra_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraObject'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""**boolean indicator** of *this* request's outcome
    - `true`: the request was successful with no errors
    - `false`: an error was encountered
    """  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""**number** of results available for *this* service"""  
    vmid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmid'), 'exclude': lambda f: f is None }})
    r"""**unique numeric id** of the server that processed *this* request"""  
    

@dataclasses.dataclass
class SearchFreetextResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search_freetext_200_application_json_object: Optional[SearchFreetext200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    