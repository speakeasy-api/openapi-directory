/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * User - Success
 */
public class User {
    /**
     * For internal use only. This field does not comply with our backwards compatability policies.
     */
    
    public java.util.Map<String, Object> privateFields;
    public User withPrivateFields(java.util.Map<String, Object> privateFields) {
        this.privateFields = privateFields;
        return this;
    }
    
    /**
     * Whether an user is currently active in SalesLoft
     */
    
    public Boolean active;
    public User withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * Address that will be BBC'd on all emails from this user
     */
    
    public String bccEmailAddress;
    public User withBccEmailAddress(String bccEmailAddress) {
        this.bccEmailAddress = bccEmailAddress;
        return this;
    }
    
    /**
     * Whether this user has click to call enabled
     */
    
    public Boolean clickToCallEnabled;
    public User withClickToCallEnabled(Boolean clickToCallEnabled) {
        this.clickToCallEnabled = clickToCallEnabled;
        return this;
    }
    
    /**
     * Datetime of when the user was created
     */
    
    public OffsetDateTime createdAt;
    public User withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Whether the user has a crm connected
     */
    
    public Boolean crmConnected;
    public User withCrmConnected(Boolean crmConnected) {
        this.crmConnected = crmConnected;
        return this;
    }
    
    /**
     * Email address provided to accounts.salesloft.com
     */
    
    public String email;
    public User withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Whether this user has a email client configured
     */
    
    public Boolean emailClientConfigured;
    public User withEmailClientConfigured(Boolean emailClientConfigured) {
        this.emailClientConfigured = emailClientConfigured;
        return this;
    }
    
    /**
     * Email address associated with the email client of the user
     */
    
    public String emailClientEmailAddress;
    public User withEmailClientEmailAddress(String emailClientEmailAddress) {
        this.emailClientEmailAddress = emailClientEmailAddress;
        return this;
    }
    
    /**
     * Email signature
     */
    
    public String emailSignature;
    public User withEmailSignature(String emailSignature) {
        this.emailSignature = emailSignature;
        return this;
    }
    
    /**
     * Whether this user has click tracking disabled in email signature
     */
    
    public Boolean emailSignatureClickTrackingDisabled;
    public User withEmailSignatureClickTrackingDisabled(Boolean emailSignatureClickTrackingDisabled) {
        this.emailSignatureClickTrackingDisabled = emailSignatureClickTrackingDisabled;
        return this;
    }
    
    /**
     * Email signature type
     */
    
    public String emailSignatureType;
    public User withEmailSignatureType(String emailSignatureType) {
        this.emailSignatureType = emailSignatureType;
        return this;
    }
    
    /**
     * Feature flags that are for this user. New flags may appear or disappear at any time
     */
    
    public java.util.Map<String, Object> externalFeatureFlags;
    public User withExternalFeatureFlags(java.util.Map<String, Object> externalFeatureFlags) {
        this.externalFeatureFlags = externalFeatureFlags;
        return this;
    }
    
    /**
     * First name of user
     */
    
    public String firstName;
    public User withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * The from address of this user
     */
    
    public String fromAddress;
    public User withFromAddress(String fromAddress) {
        this.fromAddress = fromAddress;
        return this;
    }
    
    /**
     * RFC 5322 compliant email address
     */
    
    public String fullEmailAddress;
    public User withFullEmailAddress(String fullEmailAddress) {
        this.fullEmailAddress = fullEmailAddress;
        return this;
    }
    
    
    public EmbeddedResource group;
    public User withGroup(EmbeddedResource group) {
        this.group = group;
        return this;
    }
    
    /**
     * Globally unique user ID. New endpoints will explicitly accept this over id
     */
    
    public String guid;
    public User withGuid(String guid) {
        this.guid = guid;
        return this;
    }
    
    /**
     * User ID
     */
    
    public Long id;
    public User withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Job role of user
     */
    
    public String jobRole;
    public User withJobRole(String jobRole) {
        this.jobRole = jobRole;
        return this;
    }
    
    /**
     * Last name of user
     */
    
    public String lastName;
    public User withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * Whether this user has Local Dial enabled
     */
    
    public Boolean localDialEnabled;
    public User withLocalDialEnabled(Boolean localDialEnabled) {
        this.localDialEnabled = localDialEnabled;
        return this;
    }
    
    /**
     * Display name of user
     */
    
    public String name;
    public User withName(String name) {
        this.name = name;
        return this;
    }
    
    
    public EmbeddedResource phoneClient;
    public User withPhoneClient(EmbeddedResource phoneClient) {
        this.phoneClient = phoneClient;
        return this;
    }
    
    
    public EmbeddedResource phoneNumberAssignment;
    public User withPhoneNumberAssignment(EmbeddedResource phoneNumberAssignment) {
        this.phoneNumberAssignment = phoneNumberAssignment;
        return this;
    }
    
    
    public EmbeddedResource role;
    public User withRole(EmbeddedResource role) {
        this.role = role;
        return this;
    }
    
    /**
     * The email address that email of the user will be sent from, resolved in the following resolution order: from_user, email_client_email_address, email
     */
    
    public String sendingEmailAddress;
    public User withSendingEmailAddress(String sendingEmailAddress) {
        this.sendingEmailAddress = sendingEmailAddress;
        return this;
    }
    
    /**
     * Slack username
     */
    
    public String slackUsername;
    public User withSlackUsername(String slackUsername) {
        this.slackUsername = slackUsername;
        return this;
    }
    
    
    public EmbeddedResource team;
    public User withTeam(EmbeddedResource team) {
        this.team = team;
        return this;
    }
    
    /**
     * Team Admin
     */
    
    public Boolean teamAdmin;
    public User withTeamAdmin(Boolean teamAdmin) {
        this.teamAdmin = teamAdmin;
        return this;
    }
    
    /**
     * User Time Zone
     */
    
    public String timeZone;
    public User withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * Twitter handle
     */
    
    public String twitterHandle;
    public User withTwitterHandle(String twitterHandle) {
        this.twitterHandle = twitterHandle;
        return this;
    }
    
    /**
     * Datetime of when the user was last updated
     */
    
    public OffsetDateTime updatedAt;
    public User withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Work Country
     */
    
    public String workCountry;
    public User withWorkCountry(String workCountry) {
        this.workCountry = workCountry;
        return this;
    }
    
}
