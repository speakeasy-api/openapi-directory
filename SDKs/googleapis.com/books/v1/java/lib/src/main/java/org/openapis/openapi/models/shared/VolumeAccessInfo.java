/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VolumeAccessInfo - Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).
 */
public class VolumeAccessInfo {
    /**
     * Combines the access and viewability of this volume into a single status field for this user. Values can be FULL_PURCHASED, FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessViewStatus")
    public String accessViewStatus;
    public VolumeAccessInfo withAccessViewStatus(String accessViewStatus) {
        this.accessViewStatus = accessViewStatus;
        return this;
    }
    
    /**
     * The two-letter ISO_3166-1 country code for which this access information is valid. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public VolumeAccessInfo withCountry(String country) {
        this.country = country;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadAccess")
    public DownloadAccessRestriction downloadAccess;
    public VolumeAccessInfo withDownloadAccess(DownloadAccessRestriction downloadAccess) {
        this.downloadAccess = downloadAccess;
        return this;
    }
    
    /**
     * URL to the Google Drive viewer if this volume is uploaded by the user by selecting the file from Google Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("driveImportedContentLink")
    public String driveImportedContentLink;
    public VolumeAccessInfo withDriveImportedContentLink(String driveImportedContentLink) {
        this.driveImportedContentLink = driveImportedContentLink;
        return this;
    }
    
    /**
     * Whether this volume can be embedded in a viewport using the Embedded Viewer API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embeddable")
    public Boolean embeddable;
    public VolumeAccessInfo withEmbeddable(Boolean embeddable) {
        this.embeddable = embeddable;
        return this;
    }
    
    /**
     * Information about epub content. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("epub")
    public VolumeAccessInfoEpub epub;
    public VolumeAccessInfo withEpub(VolumeAccessInfoEpub epub) {
        this.epub = epub;
        return this;
    }
    
    /**
     * Whether this volume requires that the client explicitly request offline download license rather than have it done automatically when loading the content, if the client supports it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("explicitOfflineLicenseManagement")
    public Boolean explicitOfflineLicenseManagement;
    public VolumeAccessInfo withExplicitOfflineLicenseManagement(Boolean explicitOfflineLicenseManagement) {
        this.explicitOfflineLicenseManagement = explicitOfflineLicenseManagement;
        return this;
    }
    
    /**
     * Information about pdf content. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pdf")
    public VolumeAccessInfoPdf pdf;
    public VolumeAccessInfo withPdf(VolumeAccessInfoPdf pdf) {
        this.pdf = pdf;
        return this;
    }
    
    /**
     * Whether or not this book is public domain in the country listed above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicDomain")
    public Boolean publicDomain;
    public VolumeAccessInfo withPublicDomain(Boolean publicDomain) {
        this.publicDomain = publicDomain;
        return this;
    }
    
    /**
     * Whether quote sharing is allowed for this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quoteSharingAllowed")
    public Boolean quoteSharingAllowed;
    public VolumeAccessInfo withQuoteSharingAllowed(Boolean quoteSharingAllowed) {
        this.quoteSharingAllowed = quoteSharingAllowed;
        return this;
    }
    
    /**
     * Whether text-to-speech is permitted for this volume. Values can be ALLOWED, ALLOWED_FOR_ACCESSIBILITY, or NOT_ALLOWED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textToSpeechPermission")
    public String textToSpeechPermission;
    public VolumeAccessInfo withTextToSpeechPermission(String textToSpeechPermission) {
        this.textToSpeechPermission = textToSpeechPermission;
        return this;
    }
    
    /**
     * For ordered but not yet processed orders, we give a URL that can be used to go to the appropriate Google Wallet page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewOrderUrl")
    public String viewOrderUrl;
    public VolumeAccessInfo withViewOrderUrl(String viewOrderUrl) {
        this.viewOrderUrl = viewOrderUrl;
        return this;
    }
    
    /**
     * The read access of a volume. Possible values are PARTIAL, ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed above. A value of PARTIAL means that the publisher has allowed some portion of the volume to be viewed publicly, without purchase. This can apply to eBooks as well as non-eBooks. Public domain books will always have a value of ALL_PAGES.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewability")
    public String viewability;
    public VolumeAccessInfo withViewability(String viewability) {
        this.viewability = viewability;
        return this;
    }
    
    /**
     * URL to read this volume on the Google Books site. Link will not allow users to read non-viewable volumes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webReaderLink")
    public String webReaderLink;
    public VolumeAccessInfo withWebReaderLink(String webReaderLink) {
        this.webReaderLink = webReaderLink;
        return this;
    }
    
}
