// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UtilizationReportStateEnum - Output only. Current state of the report.
type UtilizationReportStateEnum string

const (
	UtilizationReportStateEnumStateUnspecified UtilizationReportStateEnum = "STATE_UNSPECIFIED"
	UtilizationReportStateEnumCreating         UtilizationReportStateEnum = "CREATING"
	UtilizationReportStateEnumSucceeded        UtilizationReportStateEnum = "SUCCEEDED"
	UtilizationReportStateEnumFailed           UtilizationReportStateEnum = "FAILED"
)

func (e *UtilizationReportStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		*e = UtilizationReportStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UtilizationReportStateEnum: %s", s)
	}
}

// UtilizationReportTimeFrameEnum - Time frame of the report.
type UtilizationReportTimeFrameEnum string

const (
	UtilizationReportTimeFrameEnumTimeFrameUnspecified UtilizationReportTimeFrameEnum = "TIME_FRAME_UNSPECIFIED"
	UtilizationReportTimeFrameEnumWeek                 UtilizationReportTimeFrameEnum = "WEEK"
	UtilizationReportTimeFrameEnumMonth                UtilizationReportTimeFrameEnum = "MONTH"
	UtilizationReportTimeFrameEnumYear                 UtilizationReportTimeFrameEnum = "YEAR"
)

func (e *UtilizationReportTimeFrameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TIME_FRAME_UNSPECIFIED":
		fallthrough
	case "WEEK":
		fallthrough
	case "MONTH":
		fallthrough
	case "YEAR":
		*e = UtilizationReportTimeFrameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UtilizationReportTimeFrameEnum: %s", s)
	}
}

// UtilizationReport - Utilization report details the utilization (CPU, memory, etc.) of selected source VMs.
type UtilizationReport struct {
	// Output only. The time the report was created (this refers to the time of the request, not the time the report creation completed).
	CreateTime *string `json:"createTime,omitempty"`
	// The report display name, as assigned by the user.
	DisplayName *string `json:"displayName,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// Output only. The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the "frame_end_time" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.
	FrameEndTime *string `json:"frameEndTime,omitempty"`
	// Output only. The report unique name.
	Name *string `json:"name,omitempty"`
	// Output only. Current state of the report.
	State *UtilizationReportStateEnum `json:"state,omitempty"`
	// Output only. The time the state was last set.
	StateTime *string `json:"stateTime,omitempty"`
	// Time frame of the report.
	TimeFrame *UtilizationReportTimeFrameEnum `json:"timeFrame,omitempty"`
	// Output only. Total number of VMs included in the report.
	VMCount *int `json:"vmCount,omitempty"`
	// List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
	Vms []VMUtilizationInfo `json:"vms,omitempty"`
}

// UtilizationReportInput - Utilization report details the utilization (CPU, memory, etc.) of selected source VMs.
type UtilizationReportInput struct {
	// The report display name, as assigned by the user.
	DisplayName *string `json:"displayName,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// Time frame of the report.
	TimeFrame *UtilizationReportTimeFrameEnum `json:"timeFrame,omitempty"`
	// List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
	Vms []VMUtilizationInfoInput `json:"vms,omitempty"`
}
