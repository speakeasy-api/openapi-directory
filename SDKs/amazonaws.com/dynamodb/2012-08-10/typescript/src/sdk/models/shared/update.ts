/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { ReturnValuesOnConditionCheckFailureEnum } from "./returnvaluesonconditioncheckfailureenum";
import { Expose, Transform } from "class-transformer";

/**
 * Represents a request to perform an <code>UpdateItem</code> operation.
 */
export class Update extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ConditionExpression" })
  conditionExpression?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExpressionAttributeNames" })
  expressionAttributeNames?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "ExpressionAttributeValues" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  expressionAttributeValues?: Record<string, AttributeValue>;

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "Key" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  key: Record<string, AttributeValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "ReturnValuesOnConditionCheckFailure" })
  returnValuesOnConditionCheckFailure?: ReturnValuesOnConditionCheckFailureEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TableName" })
  tableName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "UpdateExpression" })
  updateExpression: string;
}
