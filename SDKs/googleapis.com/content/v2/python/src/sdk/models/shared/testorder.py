"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import orderlegacypromotion as shared_orderlegacypromotion
from ..shared import price as shared_price
from ..shared import testordercustomer as shared_testordercustomer
from ..shared import testorderlineitem as shared_testorderlineitem
from ..shared import testorderpaymentmethod as shared_testorderpaymentmethod
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestOrder:
    
    customer: Optional[shared_testordercustomer.TestOrderCustomer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer'), 'exclude': lambda f: f is None }})  
    enable_orderinvoices: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableOrderinvoices'), 'exclude': lambda f: f is None }})
    r"""Whether the orderinvoices service should support this order."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"`content#testOrder`\\" """  
    line_items: Optional[list[shared_testorderlineitem.TestOrderLineItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineItems'), 'exclude': lambda f: f is None }})
    r"""Required. Line items that are ordered. At least one line item must be provided."""  
    notification_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationMode'), 'exclude': lambda f: f is None }})
    r"""Restricted. Do not use."""  
    payment_method: Optional[shared_testorderpaymentmethod.TestOrderPaymentMethod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethod'), 'exclude': lambda f: f is None }})  
    predefined_delivery_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predefinedDeliveryAddress'), 'exclude': lambda f: f is None }})
    r"""Required. Identifier of one of the predefined delivery addresses for the delivery. Acceptable values are: - \\"`dwight`\\" - \\"`jim`\\" - \\"`pam`\\" """  
    predefined_pickup_details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predefinedPickupDetails'), 'exclude': lambda f: f is None }})
    r"""Identifier of one of the predefined pickup details. Required for orders containing line items with shipping type `pickup`. Acceptable values are: - \\"`dwight`\\" - \\"`jim`\\" - \\"`pam`\\" """  
    promotions: Optional[list[shared_orderlegacypromotion.OrderLegacyPromotion]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promotions'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Ignored if provided."""  
    shipping_cost: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingCost'), 'exclude': lambda f: f is None }})  
    shipping_cost_tax: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingCostTax'), 'exclude': lambda f: f is None }})  
    shipping_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingOption'), 'exclude': lambda f: f is None }})
    r"""Required. The requested shipping option. Acceptable values are: - \\"`economy`\\" - \\"`expedited`\\" - \\"`oneDay`\\" - \\"`sameDay`\\" - \\"`standard`\\" - \\"`twoDay`\\" """  
    