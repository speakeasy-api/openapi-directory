"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Intersections:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_addresses_output_format_(self, request: operations.GetAddressesOutputFormatRequest) -> operations.GetAddressesOutputFormatResponse:
        r"""Geocode an address
        Represents the set of geocoded and standardized sites and intersections whose address best matches a given query address.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAddressesOutputFormatRequest, base_url, '/addresses.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetAddressesOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAddressesOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_intersections_near_output_format_(self, request: operations.GetIntersectionsNearOutputFormatRequest) -> operations.GetIntersectionsNearOutputFormatResponse:
        r"""Find intersections near to a geographic point
        Represents intersections near a given point
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIntersectionsNearOutputFormatRequest, base_url, '/intersections/near.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetIntersectionsNearOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIntersectionsNearOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_intersections_nearest_output_format_(self, request: operations.GetIntersectionsNearestOutputFormatRequest) -> operations.GetIntersectionsNearestOutputFormatResponse:
        r"""Find nearest intersection to a geographic point
        Represents the closest intersection to a given point
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIntersectionsNearestOutputFormatRequest, base_url, '/intersections/nearest.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetIntersectionsNearestOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIntersectionsNearestOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_intersections_within_output_format_(self, request: operations.GetIntersectionsWithinOutputFormatRequest) -> operations.GetIntersectionsWithinOutputFormatResponse:
        r"""Find intersections in a geographic area
        Represents all intersections within a given area
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIntersectionsWithinOutputFormatRequest, base_url, '/intersections/within.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetIntersectionsWithinOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIntersectionsWithinOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_intersections_intersection_id_output_format_(self, request: operations.GetIntersectionsIntersectionIDOutputFormatRequest) -> operations.GetIntersectionsIntersectionIDOutputFormatResponse:
        r"""Get an intersection by its unique ID
        Represents a individual intersection
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIntersectionsIntersectionIDOutputFormatRequest, base_url, '/intersections/{intersectionID}.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetIntersectionsIntersectionIDOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIntersectionsIntersectionIDOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    