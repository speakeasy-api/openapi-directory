"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def vision_projects_locations_files_annotate(self, request: operations.VisionProjectsLocationsFilesAnnotateRequest, security: operations.VisionProjectsLocationsFilesAnnotateSecurity) -> operations.VisionProjectsLocationsFilesAnnotateResponse:
        r"""Service that performs image detection and annotation for a batch of files. Now only \\"application/pdf\\", \\"image/tiff\\" and \\"image/gif\\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VisionProjectsLocationsFilesAnnotateRequest, base_url, '/v1p1beta1/{parent}/files:annotate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_vision_v1p1beta1_batch_annotate_files_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.VisionProjectsLocationsFilesAnnotateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VisionProjectsLocationsFilesAnnotateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudVisionV1p1beta1BatchAnnotateFilesResponse])
                res.google_cloud_vision_v1p1beta1_batch_annotate_files_response = out

        return res

    def vision_projects_locations_files_async_batch_annotate(self, request: operations.VisionProjectsLocationsFilesAsyncBatchAnnotateRequest, security: operations.VisionProjectsLocationsFilesAsyncBatchAnnotateSecurity) -> operations.VisionProjectsLocationsFilesAsyncBatchAnnotateResponse:
        r"""Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VisionProjectsLocationsFilesAsyncBatchAnnotateRequest, base_url, '/v1p1beta1/{parent}/files:asyncBatchAnnotate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_vision_v1p1beta1_async_batch_annotate_files_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.VisionProjectsLocationsFilesAsyncBatchAnnotateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VisionProjectsLocationsFilesAsyncBatchAnnotateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def vision_projects_locations_images_annotate(self, request: operations.VisionProjectsLocationsImagesAnnotateRequest, security: operations.VisionProjectsLocationsImagesAnnotateSecurity) -> operations.VisionProjectsLocationsImagesAnnotateResponse:
        r"""Run image detection and annotation for a batch of images."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VisionProjectsLocationsImagesAnnotateRequest, base_url, '/v1p1beta1/{parent}/images:annotate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_vision_v1p1beta1_batch_annotate_images_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.VisionProjectsLocationsImagesAnnotateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VisionProjectsLocationsImagesAnnotateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudVisionV1p1beta1BatchAnnotateImagesResponse])
                res.google_cloud_vision_v1p1beta1_batch_annotate_images_response = out

        return res

    def vision_projects_locations_images_async_batch_annotate(self, request: operations.VisionProjectsLocationsImagesAsyncBatchAnnotateRequest, security: operations.VisionProjectsLocationsImagesAsyncBatchAnnotateSecurity) -> operations.VisionProjectsLocationsImagesAsyncBatchAnnotateResponse:
        r"""Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VisionProjectsLocationsImagesAsyncBatchAnnotateRequest, base_url, '/v1p1beta1/{parent}/images:asyncBatchAnnotate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_vision_v1p1beta1_async_batch_annotate_images_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.VisionProjectsLocationsImagesAsyncBatchAnnotateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VisionProjectsLocationsImagesAsyncBatchAnnotateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    