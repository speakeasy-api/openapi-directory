// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchUpdateFindingsRequestBodyNote - The updated note.
type BatchUpdateFindingsRequestBodyNote struct {
	Text      *string `json:"Text,omitempty"`
	UpdatedBy *string `json:"UpdatedBy,omitempty"`
}

// BatchUpdateFindingsRequestBodySeverity - Updates to the severity information for a finding.
type BatchUpdateFindingsRequestBodySeverity struct {
	Label      *shared.SeverityLabelEnum `json:"Label,omitempty"`
	Normalized *int64                    `json:"Normalized,omitempty"`
	Product    *float64                  `json:"Product,omitempty"`
}

// BatchUpdateFindingsRequestBodyVerificationStateEnum - <p>Indicates the veracity of a finding.</p> <p>The available values for <code>VerificationState</code> are as follows.</p> <ul> <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li> <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li> <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li> <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li> </ul>
type BatchUpdateFindingsRequestBodyVerificationStateEnum string

const (
	BatchUpdateFindingsRequestBodyVerificationStateEnumUnknown        BatchUpdateFindingsRequestBodyVerificationStateEnum = "UNKNOWN"
	BatchUpdateFindingsRequestBodyVerificationStateEnumTruePositive   BatchUpdateFindingsRequestBodyVerificationStateEnum = "TRUE_POSITIVE"
	BatchUpdateFindingsRequestBodyVerificationStateEnumFalsePositive  BatchUpdateFindingsRequestBodyVerificationStateEnum = "FALSE_POSITIVE"
	BatchUpdateFindingsRequestBodyVerificationStateEnumBenignPositive BatchUpdateFindingsRequestBodyVerificationStateEnum = "BENIGN_POSITIVE"
)

func (e BatchUpdateFindingsRequestBodyVerificationStateEnum) ToPointer() *BatchUpdateFindingsRequestBodyVerificationStateEnum {
	return &e
}

func (e *BatchUpdateFindingsRequestBodyVerificationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "TRUE_POSITIVE":
		fallthrough
	case "FALSE_POSITIVE":
		fallthrough
	case "BENIGN_POSITIVE":
		*e = BatchUpdateFindingsRequestBodyVerificationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchUpdateFindingsRequestBodyVerificationStateEnum: %v", v)
	}
}

// BatchUpdateFindingsRequestBodyWorkflow - Used to update information about the investigation into the finding.
type BatchUpdateFindingsRequestBodyWorkflow struct {
	Status *shared.WorkflowStatusEnum `json:"Status,omitempty"`
}

type BatchUpdateFindingsRequestBody struct {
	// <p>The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p> <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
	Confidence *int64 `json:"Confidence,omitempty"`
	// <p>The updated value for the level of importance assigned to the resources associated with the findings.</p> <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
	Criticality *int64 `json:"Criticality,omitempty"`
	// <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update up to 100 findings at a time.</p> <p>For each finding, the list provides the finding identifier and the ARN of the finding provider.</p>
	FindingIdentifiers []shared.AwsSecurityFindingIdentifier `json:"FindingIdentifiers"`
	// The updated note.
	Note *BatchUpdateFindingsRequestBodyNote `json:"Note,omitempty"`
	// A list of findings that are related to the updated findings.
	RelatedFindings []shared.RelatedFinding `json:"RelatedFindings,omitempty"`
	// Updates to the severity information for a finding.
	Severity *BatchUpdateFindingsRequestBodySeverity `json:"Severity,omitempty"`
	// <p>One or more finding types in the format of namespace/category/classifier that classify a finding.</p> <p>Valid namespace values are as follows.</p> <ul> <li> <p>Software and Configuration Checks</p> </li> <li> <p>TTPs</p> </li> <li> <p>Effects</p> </li> <li> <p>Unusual Behaviors</p> </li> <li> <p>Sensitive Data Identifications </p> </li> </ul>
	Types []string `json:"Types,omitempty"`
	// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.
	UserDefinedFields map[string]string `json:"UserDefinedFields,omitempty"`
	// <p>Indicates the veracity of a finding.</p> <p>The available values for <code>VerificationState</code> are as follows.</p> <ul> <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li> <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li> <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li> <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li> </ul>
	VerificationState *BatchUpdateFindingsRequestBodyVerificationStateEnum `json:"VerificationState,omitempty"`
	// Used to update information about the investigation into the finding.
	Workflow *BatchUpdateFindingsRequestBodyWorkflow `json:"Workflow,omitempty"`
}

type BatchUpdateFindingsRequest struct {
	RequestBody       BatchUpdateFindingsRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type BatchUpdateFindingsResponse struct {
	// Success
	BatchUpdateFindingsResponse *shared.BatchUpdateFindingsResponse
	ContentType                 string
	// InternalException
	InternalException interface{}
	// InvalidAccessException
	InvalidAccessException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
