/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SensorStatisticsSummary -  Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor. 
 */
public class SensorStatisticsSummary {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CategoricalValues")
    public CategoricalValues categoricalValues;

    public SensorStatisticsSummary withCategoricalValues(CategoricalValues categoricalValues) {
        this.categoricalValues = categoricalValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ComponentName")
    public String componentName;

    public SensorStatisticsSummary withComponentName(String componentName) {
        this.componentName = componentName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("DataEndTime")
    public OffsetDateTime dataEndTime;

    public SensorStatisticsSummary withDataEndTime(OffsetDateTime dataEndTime) {
        this.dataEndTime = dataEndTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DataExists")
    public Boolean dataExists;

    public SensorStatisticsSummary withDataExists(Boolean dataExists) {
        this.dataExists = dataExists;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("DataStartTime")
    public OffsetDateTime dataStartTime;

    public SensorStatisticsSummary withDataStartTime(OffsetDateTime dataStartTime) {
        this.dataStartTime = dataStartTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DuplicateTimestamps")
    public CountPercent duplicateTimestamps;

    public SensorStatisticsSummary withDuplicateTimestamps(CountPercent duplicateTimestamps) {
        this.duplicateTimestamps = duplicateTimestamps;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvalidDateEntries")
    public CountPercent invalidDateEntries;

    public SensorStatisticsSummary withInvalidDateEntries(CountPercent invalidDateEntries) {
        this.invalidDateEntries = invalidDateEntries;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvalidValues")
    public CountPercent invalidValues;

    public SensorStatisticsSummary withInvalidValues(CountPercent invalidValues) {
        this.invalidValues = invalidValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LargeTimestampGaps")
    public LargeTimestampGaps largeTimestampGaps;

    public SensorStatisticsSummary withLargeTimestampGaps(LargeTimestampGaps largeTimestampGaps) {
        this.largeTimestampGaps = largeTimestampGaps;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MissingValues")
    public CountPercent missingValues;

    public SensorStatisticsSummary withMissingValues(CountPercent missingValues) {
        this.missingValues = missingValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MonotonicValues")
    public MonotonicValues monotonicValues;

    public SensorStatisticsSummary withMonotonicValues(MonotonicValues monotonicValues) {
        this.monotonicValues = monotonicValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MultipleOperatingModes")
    public MultipleOperatingModes multipleOperatingModes;

    public SensorStatisticsSummary withMultipleOperatingModes(MultipleOperatingModes multipleOperatingModes) {
        this.multipleOperatingModes = multipleOperatingModes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SensorName")
    public String sensorName;

    public SensorStatisticsSummary withSensorName(String sensorName) {
        this.sensorName = sensorName;
        return this;
    }
    
    public SensorStatisticsSummary(){}
}
