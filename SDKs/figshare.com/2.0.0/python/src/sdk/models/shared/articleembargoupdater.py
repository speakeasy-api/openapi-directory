"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ArticleEmbargoUpdaterEmbargoTypeEnum(str, Enum):
    r"""Embargo can be enabled at the article or the file level. Possible values: article, file"""
    ARTICLE = 'article'
    FILE = 'file'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ArticleEmbargoUpdater:
    r"""Embargo description"""
    
    embargo_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_date') }})
    r"""Date when the embargo expires and the article gets published, '0' value will set up permanent embargo"""  
    embargo_type: ArticleEmbargoUpdaterEmbargoTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_type') }})
    r"""Embargo can be enabled at the article or the file level. Possible values: article, file"""  
    is_embargoed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_embargoed') }})
    r"""Embargo status"""  
    embargo_options: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_options'), 'exclude': lambda f: f is None }})
    r"""List of embargo permissions to be associated with the article. The list must contain `id` and can also contain `group_ids`(a field that only applies to 'logged_in' permissions). The new list replaces old options in the database, and an empty list removes all permissions for this article. Administration permission has to be set up alone but logged in and IP range permissions can be set up together."""  
    embargo_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_reason'), 'exclude': lambda f: f is None }})
    r"""Reason for setting embargo"""  
    embargo_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_title'), 'exclude': lambda f: f is None }})
    r"""Title for embargo"""  
    