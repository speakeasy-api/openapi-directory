"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bootmodevalues_enum as shared_bootmodevalues_enum
from ..shared import imdssupportvalues_enum as shared_imdssupportvalues_enum
from ..shared import tpmsupportvalues_enum as shared_tpmsupportvalues_enum
from enum import Enum
from typing import Optional

class RegisterImageRequestArchitectureEnum(str, Enum):
    r"""<p>The architecture of the AMI.</p> <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance store-backed AMIs, the architecture specified in the manifest file.</p>"""
    I386 = 'i386'
    X86_64 = 'x86_64'
    ARM64 = 'arm64'
    X86_64_MAC = 'x86_64_mac'
    ARM64_MAC = 'arm64_mac'

class RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum(str, Enum):
    r"""The volume type. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\\">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports."""
    STANDARD = 'standard'
    IO1 = 'io1'
    IO2 = 'io2'
    GP2 = 'gp2'
    SC1 = 'sc1'
    ST1 = 'st1'
    GP3 = 'gp3'


@dataclasses.dataclass
class RegisterImageRequestBlockDeviceMappingsEbs:
    r"""Parameters used to automatically set up EBS volumes when the instance is launched."""
    
    delete_on_termination: Optional[bool] = dataclasses.field(default=None)  
    encrypted: Optional[bool] = dataclasses.field(default=None)  
    iops: Optional[int] = dataclasses.field(default=None)  
    kms_key_id: Optional[str] = dataclasses.field(default=None)  
    outpost_arn: Optional[str] = dataclasses.field(default=None)  
    snapshot_id: Optional[str] = dataclasses.field(default=None)  
    throughput: Optional[int] = dataclasses.field(default=None)  
    volume_size: Optional[int] = dataclasses.field(default=None)  
    volume_type: Optional[RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RegisterImageRequestBlockDeviceMappings:
    r"""Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch."""
    
    device_name: Optional[str] = dataclasses.field(default=None)  
    ebs: Optional[RegisterImageRequestBlockDeviceMappingsEbs] = dataclasses.field(default=None)  
    no_device: Optional[str] = dataclasses.field(default=None)  
    virtual_name: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RegisterImageRequest:
    r"""Contains the parameters for RegisterImage."""
    
    name: str = dataclasses.field()  
    architecture: Optional[RegisterImageRequestArchitectureEnum] = dataclasses.field(default=None)  
    billing_products: Optional[list[str]] = dataclasses.field(default=None)  
    block_device_mappings: Optional[list[RegisterImageRequestBlockDeviceMappings]] = dataclasses.field(default=None)  
    boot_mode: Optional[shared_bootmodevalues_enum.BootModeValuesEnum] = dataclasses.field(default=None)  
    description: Optional[str] = dataclasses.field(default=None)  
    dry_run: Optional[bool] = dataclasses.field(default=None)  
    ena_support: Optional[bool] = dataclasses.field(default=None)  
    image_location: Optional[str] = dataclasses.field(default=None)  
    imds_support: Optional[shared_imdssupportvalues_enum.ImdsSupportValuesEnum] = dataclasses.field(default=None)  
    kernel_id: Optional[str] = dataclasses.field(default=None)  
    ramdisk_id: Optional[str] = dataclasses.field(default=None)  
    root_device_name: Optional[str] = dataclasses.field(default=None)  
    sriov_net_support: Optional[str] = dataclasses.field(default=None)  
    tpm_support: Optional[shared_tpmsupportvalues_enum.TpmSupportValuesEnum] = dataclasses.field(default=None)  
    uefi_data: Optional[str] = dataclasses.field(default=None)  
    virtualization_type: Optional[str] = dataclasses.field(default=None)  
    