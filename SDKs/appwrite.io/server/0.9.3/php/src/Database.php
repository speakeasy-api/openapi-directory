<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Database 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Collection
     * 
     * Create a new Collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateCollectionRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateCollectionResponse
     */
	public function databaseCreateCollection(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateCollectionRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Document
     * 
     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](/docs/server/database#databaseCreateCollection) API or directly from your database console.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateDocumentResponse
     */
	public function databaseCreateDocument(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections/{collectionId}/documents', \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseCreateDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->document = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Collection
     * 
     * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteCollectionResponse
     */
	public function databaseDeleteCollection(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections/{collectionId}', \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete Document
     * 
     * Delete a document by its unique ID. This endpoint deletes only the parent documents, its attributes and relations to other documents. Child documents **will not** be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteDocumentResponse
     */
	public function databaseDeleteDocument(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections/{collectionId}/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseDeleteDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get Collection
     * 
     * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseGetCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseGetCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseGetCollectionResponse
     */
	public function databaseGetCollection(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseGetCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseGetCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseGetCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections/{collectionId}', \OpenAPI\OpenAPI\Models\Operations\DatabaseGetCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseGetCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Document
     * 
     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseGetDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseGetDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseGetDocumentResponse
     */
	public function databaseGetDocument(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseGetDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseGetDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseGetDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections/{collectionId}/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DatabaseGetDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseGetDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->document = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Collections
     * 
     * Get a list of all the user collections. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's collections. [Learn more about different API modes](/docs/admin).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseListCollectionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseListCollectionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseListCollectionsResponse
     */
	public function databaseListCollections(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseListCollectionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseListCollectionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseListCollectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatabaseListCollectionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseListCollectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Documents
     * 
     * Get a list of all the user documents. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's documents. [Learn more about different API modes](/docs/admin).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsResponse
     */
	public function databaseListDocuments(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections/{collectionId}/documents', \OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseListDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DocumentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Collection
     * 
     * Update a collection by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateCollectionResponse
     */
	public function databaseUpdateCollection(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections/{collectionId}', \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Document
     * 
     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateDocumentResponse
     */
	public function databaseUpdateDocument(
        \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/database/collections/{collectionId}/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatabaseUpdateDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->document = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}