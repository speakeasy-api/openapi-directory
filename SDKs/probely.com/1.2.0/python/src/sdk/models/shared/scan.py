"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import changedby as shared_changedby
from ..shared import createdby as shared_createdby
from ..shared import scanprofile_enum as shared_scanprofile_enum
from ..shared import scanstatus_enum as shared_scanstatus_enum
from ..shared import targetsimple as shared_targetsimple
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ScanCrawlerStateEnum(str, Enum):
    r"""The current state of the crawler"""
    STARTED = 'started'
    ENDED = 'ended'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScanCrawlerStatus:
    r"""The number of crawled URLs and total number of URLs in the queue"""
    
    zero: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('0'), 'exclude': lambda f: f is None }})
    r"""Number of crawled URLs"""  
    one: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1'), 'exclude': lambda f: f is None }})
    r"""Total number of URLs in the queue"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScanCrawler:
    r"""Information on the status of the crawling step of the scanning process"""
    
    error: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""List of possible errors from the crawler"""  
    state: Optional[ScanCrawlerStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current state of the crawler"""  
    status: Optional[ScanCrawlerStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The number of crawled URLs and total number of URLs in the queue"""  
    warning: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warning'), 'exclude': lambda f: f is None }})
    r"""List of possible warnings from the crawler"""  
    
class ScanFingerprinterStateEnum(str, Enum):
    r"""The current state of the fingerprinter"""
    STARTED = 'started'
    ENDED = 'ended'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScanFingerprinter:
    r"""Information on the status of the crawling step of the scanning process"""
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""The number of detected frameworks/software on the target"""  
    error: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""List of possible errors from the fingerprinter"""  
    state: Optional[ScanFingerprinterStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current state of the fingerprinter"""  
    warning: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warning'), 'exclude': lambda f: f is None }})
    r"""List of possible warnings from the fingerprinter"""  
    
class ScanScannerStateEnum(str, Enum):
    r"""The current state of the scanner"""
    STARTED = 'started'
    ENDED = 'ended'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScanScannerStatus:
    r"""The number of scanner tasks completed and total number of tasks in the queue"""
    
    zero: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('0'), 'exclude': lambda f: f is None }})
    r"""Number of completed tasks"""  
    one: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1'), 'exclude': lambda f: f is None }})
    r"""Total number of tasks in the queue"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScanScanner:
    r"""Information on the status of the search for vulnerabilities of the scanning process"""
    
    error: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""List of possible errors from the scanner"""  
    state: Optional[ScanScannerStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current state of the scanner"""  
    status: Optional[ScanScannerStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The number of scanner tasks completed and total number of tasks in the queue"""  
    warning: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warning'), 'exclude': lambda f: f is None }})
    r"""List of possible warnings from the scanner"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Scan:
    r"""Event object."""
    
    changed: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of the last change"""  
    changed_by: Optional[shared_changedby.ChangedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed_by'), 'exclude': lambda f: f is None }})
    r"""User that last modified the object"""  
    completed: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of scan completion"""  
    crawler: Optional[ScanCrawler] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crawler'), 'exclude': lambda f: f is None }})
    r"""Information on the status of the crawling step of the scanning process"""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of creation"""  
    created_by: Optional[shared_createdby.CreatedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by'), 'exclude': lambda f: f is None }})
    r"""User that created the object"""  
    fingerprinter: Optional[ScanFingerprinter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprinter'), 'exclude': lambda f: f is None }})
    r"""Information on the status of the crawling step of the scanning process"""  
    highs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highs'), 'exclude': lambda f: f is None }})
    r"""Number of high severity findings in this scan"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Object id."""  
    lows: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lows'), 'exclude': lambda f: f is None }})
    r"""Number of low severity findings in this scan"""  
    mediums: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediums'), 'exclude': lambda f: f is None }})
    r"""Number of medium severity findings in this scan"""  
    scan_profile: Optional[shared_scanprofile_enum.ScanProfileEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scan_profile'), 'exclude': lambda f: f is None }})
    r"""* lightning - fast simple scan
    * normal - default profile
    * full - does everything the default profile does and adds boolean based
    SQL injection tests
    * safe - doesn't use any content changing methods (no POST, DELETE, etc)
    and tries fewer payloads for SQL injection tests
    """  
    scanner: Optional[ScanScanner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scanner'), 'exclude': lambda f: f is None }})
    r"""Information on the status of the search for vulnerabilities of the scanning process"""  
    started: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of scan start"""  
    status: Optional[shared_scanstatus_enum.ScanStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current scan status:
      * queued - Scan queued to start
      * started - Scan currently running
      * under_review - Scan is complete but we need to verify some findings
      * completed - Scan complete
      * completed_with_errors - Scan complete with error(s) in non essential modules
      * failed - Something went seriously wrong during the scan
      * canceled - Scan was canceled
      * canceling - Stopping scan
    """  
    target: Optional[shared_targetsimple.TargetSimple] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})  
    