"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import client as shared_client
from ..shared import folder as shared_folder
from ..shared import tag as shared_tag
from ..shared import trigger as shared_trigger
from ..shared import variable as shared_variable
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EntityChangeStatusEnum(str, Enum):
    r"""Represents how the entity has been changed in the workspace."""
    CHANGE_STATUS_UNSPECIFIED = 'changeStatusUnspecified'
    NONE = 'none'
    ADDED = 'added'
    DELETED = 'deleted'
    UPDATED = 'updated'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Entity:
    r"""A workspace entity that may represent a tag, trigger, variable, or folder in addition to its status in the workspace."""
    
    change_status: Optional[EntityChangeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changeStatus'), 'exclude': lambda f: f is None }})
    r"""Represents how the entity has been changed in the workspace."""  
    client: Optional[shared_client.Client] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client'), 'exclude': lambda f: f is None }})  
    folder: Optional[shared_folder.Folder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folder'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Folder."""  
    tag: Optional[shared_tag.Tag] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Tag."""  
    trigger: Optional[shared_trigger.Trigger] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trigger'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Trigger"""  
    variable: Optional[shared_variable.Variable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variable'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Variable."""  
    