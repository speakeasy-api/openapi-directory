"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class FilePayments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_file_payment_consents_consent_id_file_json(self, request: operations.CreateFilePaymentConsentsConsentIDFileJSONRequest, security: operations.CreateFilePaymentConsentsConsentIDFileJSONSecurity) -> operations.CreateFilePaymentConsentsConsentIDFileJSONResponse:
        r"""Create File Payment Consents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateFilePaymentConsentsConsentIDFileJSONRequest, base_url, '/file-payment-consents/{ConsentId}/file', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFilePaymentConsentsConsentIDFileJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_file_payment_consents_consent_id_file_raw(self, request: operations.CreateFilePaymentConsentsConsentIDFileRawRequest, security: operations.CreateFilePaymentConsentsConsentIDFileRawSecurity) -> operations.CreateFilePaymentConsentsConsentIDFileRawResponse:
        r"""Create File Payment Consents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateFilePaymentConsentsConsentIDFileRawRequest, base_url, '/file-payment-consents/{ConsentId}/file', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFilePaymentConsentsConsentIDFileRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_file_payment_consents_json(self, request: operations.CreateFilePaymentConsentsJSONRequest, security: operations.CreateFilePaymentConsentsJSONSecurity) -> operations.CreateFilePaymentConsentsJSONResponse:
        r"""Create File Payment Consents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/file-payment-consents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ob_write_file_consent3", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFilePaymentConsentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileConsentResponse4])
                res.ob_write_file_consent_response4 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileConsentResponse4])
                res.ob_write_file_consent_response4 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_file_payment_consents_raw(self, request: operations.CreateFilePaymentConsentsRawRequest, security: operations.CreateFilePaymentConsentsRawSecurity) -> operations.CreateFilePaymentConsentsRawResponse:
        r"""Create File Payment Consents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/file-payment-consents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFilePaymentConsentsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileConsentResponse4])
                res.ob_write_file_consent_response4 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileConsentResponse4])
                res.ob_write_file_consent_response4 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_file_payments_json(self, request: operations.CreateFilePaymentsJSONRequest, security: operations.CreateFilePaymentsJSONSecurity) -> operations.CreateFilePaymentsJSONResponse:
        r"""Create File Payments"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/file-payments'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ob_write_file2", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFilePaymentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileResponse3])
                res.ob_write_file_response3 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileResponse3])
                res.ob_write_file_response3 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_file_payments_raw(self, request: operations.CreateFilePaymentsRawRequest, security: operations.CreateFilePaymentsRawSecurity) -> operations.CreateFilePaymentsRawResponse:
        r"""Create File Payments"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/file-payments'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFilePaymentsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileResponse3])
                res.ob_write_file_response3 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileResponse3])
                res.ob_write_file_response3 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_file_payment_consents_consent_id(self, request: operations.GetFilePaymentConsentsConsentIDRequest, security: operations.GetFilePaymentConsentsConsentIDSecurity) -> operations.GetFilePaymentConsentsConsentIDResponse:
        r"""Get File Payment Consents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFilePaymentConsentsConsentIDRequest, base_url, '/file-payment-consents/{ConsentId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilePaymentConsentsConsentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileConsentResponse4])
                res.ob_write_file_consent_response4 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileConsentResponse4])
                res.ob_write_file_consent_response4 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_file_payment_consents_consent_id_file(self, request: operations.GetFilePaymentConsentsConsentIDFileRequest, security: operations.GetFilePaymentConsentsConsentIDFileSecurity) -> operations.GetFilePaymentConsentsConsentIDFileResponse:
        r"""Get File Payment Consents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFilePaymentConsentsConsentIDFileRequest, base_url, '/file-payment-consents/{ConsentId}/file', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilePaymentConsentsConsentIDFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.file = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.file = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_file_payments_file_payment_id(self, request: operations.GetFilePaymentsFilePaymentIDRequest, security: operations.GetFilePaymentsFilePaymentIDSecurity) -> operations.GetFilePaymentsFilePaymentIDResponse:
        r"""Get File Payments"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFilePaymentsFilePaymentIDRequest, base_url, '/file-payments/{FilePaymentId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilePaymentsFilePaymentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileResponse3])
                res.ob_write_file_response3 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFileResponse3])
                res.ob_write_file_response3 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_file_payments_file_payment_id_report_file(self, request: operations.GetFilePaymentsFilePaymentIDReportFileRequest, security: operations.GetFilePaymentsFilePaymentIDReportFileSecurity) -> operations.GetFilePaymentsFilePaymentIDReportFileResponse:
        r"""Get File Payments"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFilePaymentsFilePaymentIDReportFileRequest, base_url, '/file-payments/{FilePaymentId}/report-file', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilePaymentsFilePaymentIDReportFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.file = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.file = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    