"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class TestGetTestReportSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class TestGetTestReportRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    test_run_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'test_run_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the test run"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSONDeviceLogs:
    
    appium_log: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appium_log'), 'exclude': lambda f: f is None }})  
    device_log: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_log'), 'exclude': lambda f: f is None }})  
    device_snapshot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_snapshot_id'), 'exclude': lambda f: f is None }})  
    test_log: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_log'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSONFeaturesTestsRunsStepsStepExecutions:
    
    device_snapshot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_snapshot_id'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    timestamp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSONFeaturesTestsRunsSteps:
    
    failed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    skipped: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipped'), 'exclude': lambda f: f is None }})  
    step_report_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('step_report_url'), 'exclude': lambda f: f is None }})  
    step_executions: Optional[list[TestGetTestReport200ApplicationJSONFeaturesTestsRunsStepsStepExecutions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepExecutions'), 'exclude': lambda f: f is None }})  
    step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSONFeaturesTestsRuns:
    
    failed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    number: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})  
    report_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_url'), 'exclude': lambda f: f is None }})  
    skipped: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipped'), 'exclude': lambda f: f is None }})  
    steps: Optional[list[TestGetTestReport200ApplicationJSONFeaturesTestsRunsSteps]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steps'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSONFeaturesTests:
    
    peak_duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peakDuration'), 'exclude': lambda f: f is None }})  
    peak_memory: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peakMemory'), 'exclude': lambda f: f is None }})  
    runs: Optional[list[TestGetTestReport200ApplicationJSONFeaturesTestsRuns]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runs'), 'exclude': lambda f: f is None }})  
    test_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSONFeatures:
    
    failed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    peak_duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peakDuration'), 'exclude': lambda f: f is None }})  
    peak_memory: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peakMemory'), 'exclude': lambda f: f is None }})  
    skipped: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipped'), 'exclude': lambda f: f is None }})  
    tests: Optional[list[TestGetTestReport200ApplicationJSONFeaturesTests]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tests'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSONSnapshotFatalErrors:
    
    device_snapshot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_snapshot_id'), 'exclude': lambda f: f is None }})  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_message'), 'exclude': lambda f: f is None }})  
    error_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_title'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSONStats:
    
    devices: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices') }})  
    devices_failed: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices_failed') }})  
    devices_finished: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices_finished') }})  
    devices_not_runned: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices_not_runned') }})  
    devices_skipped: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices_skipped') }})  
    failed: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed') }})  
    filesize: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filesize') }})  
    os: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os') }})  
    passed: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passed') }})  
    skipped: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipped') }})  
    step_count: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('step_count') }})  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})  
    total_device_minutes: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalDeviceMinutes') }})  
    artifacts: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artifacts'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestReport200ApplicationJSON:
    r"""OK"""
    
    app_upload_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_upload_id') }})  
    date_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date') }})  
    date_finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_finished') }})  
    device_logs: list[TestGetTestReport200ApplicationJSONDeviceLogs] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_logs') }})  
    features: list[TestGetTestReport200ApplicationJSONFeatures] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features') }})  
    finished_device_snapshots: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished_device_snapshots') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    platform: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform') }})  
    revision: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision') }})  
    schema_version: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schema_version') }})  
    stats: TestGetTestReport200ApplicationJSONStats = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats') }})  
    test_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testType') }})  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})  
    snapshot_fatal_errors: Optional[list[TestGetTestReport200ApplicationJSONSnapshotFatalErrors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snapshot_fatal_errors'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class TestGetTestReportResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    test_get_test_report_200_application_json_object: Optional[TestGetTestReport200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    