"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchResult:
    r"""Success"""
    
    docs: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('docs'), 'exclude': lambda f: f is None }})
    r"""solr docs"""  
    facet_counts: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('facet_counts'), 'exclude': lambda f: f is None }})
    r"""Mapping between field names and association counts"""  
    highlighting: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlighting'), 'exclude': lambda f: f is None }})
    r"""Mapping between id and solr highlight"""  
    num_found: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numFound'), 'exclude': lambda f: f is None }})
    r"""total number of associations matching query"""  
    