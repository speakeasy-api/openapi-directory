"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import postcommentforcomparedcommitinput as shared_postcommentforcomparedcommitinput
from ..shared import postcommentforcomparedcommitoutput as shared_postcommentforcomparedcommitoutput
from enum import Enum
from typing import Any, Optional

class PostCommentForComparedCommitXAmzTargetEnum(str, Enum):
    CODE_COMMIT_20150413_POST_COMMENT_FOR_COMPARED_COMMIT = 'CodeCommit_20150413.PostCommentForComparedCommit'


@dataclasses.dataclass
class PostCommentForComparedCommitRequest:
    
    post_comment_for_compared_commit_input: shared_postcommentforcomparedcommitinput.PostCommentForComparedCommitInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: PostCommentForComparedCommitXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PostCommentForComparedCommitResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    before_commit_id_and_after_commit_id_are_same_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BeforeCommitIdAndAfterCommitIdAreSameException"""  
    client_request_token_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientRequestTokenRequiredException"""  
    comment_content_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommentContentRequiredException"""  
    comment_content_size_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommentContentSizeLimitExceededException"""  
    commit_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommitDoesNotExistException"""  
    commit_id_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommitIdRequiredException"""  
    encryption_integrity_checks_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionIntegrityChecksFailedException"""  
    encryption_key_access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyAccessDeniedException"""  
    encryption_key_disabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyDisabledException"""  
    encryption_key_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyNotFoundException"""  
    encryption_key_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyUnavailableException"""  
    idempotency_parameter_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IdempotencyParameterMismatchException"""  
    invalid_client_request_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidClientRequestTokenException"""  
    invalid_commit_id_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidCommitIdException"""  
    invalid_file_location_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidFileLocationException"""  
    invalid_file_position_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidFilePositionException"""  
    invalid_path_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidPathException"""  
    invalid_relative_file_version_enum_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRelativeFileVersionEnumException"""  
    invalid_repository_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRepositoryNameException"""  
    path_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PathDoesNotExistException"""  
    path_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PathRequiredException"""  
    post_comment_for_compared_commit_output: Optional[shared_postcommentforcomparedcommitoutput.PostCommentForComparedCommitOutput] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryDoesNotExistException"""  
    repository_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryNameRequiredException"""  
    