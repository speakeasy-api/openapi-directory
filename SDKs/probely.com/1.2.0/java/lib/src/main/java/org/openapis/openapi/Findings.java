/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Findings are security issues found during scans.
 * We try hard to present valid findings only. We give as much information
 * as possible to help you know exactly what to do, without having to
 * resort to outside resources.
 * 
 * Findings come with all the data we gathered during the scan, a
 * suggestion on how to fix it, and a description of the vulnerability.
 * 
 */
public class Findings {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Findings(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * List target findings
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsResponse getTargetsTargetIdFindings(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsRequest.class, baseUrl, "/targets/{target_id}/findings/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsResponse res = new org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsResponse() {{
            getTargetsTargetIdFindings200ApplicationJSONObject = null;
            getTargetsTargetIdFindings401ApplicationJSONObject = null;
            getTargetsTargetIdFindings404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindings200ApplicationJSON.class);
                res.getTargetsTargetIdFindings200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindings401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindings401ApplicationJSON.class);
                res.getTargetsTargetIdFindings401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindings404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindings404ApplicationJSON.class);
                res.getTargetsTargetIdFindings404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Retrieve finding report PDF format
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReportResponse getTargetsTargetIdFindingsReport(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReportRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReportRequest.class, baseUrl, "/targets/{target_id}/findings/report/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReportRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReportResponse res = new org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReportResponse() {{
            getTargetsTargetIdFindingsReport200ApplicationPdfBinaryString = null;
            getTargetsTargetIdFindingsReport400ApplicationJSONObject = null;
            getTargetsTargetIdFindingsReport401ApplicationJSONObject = null;
            getTargetsTargetIdFindingsReport404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.getTargetsTargetIdFindingsReport200ApplicationPdfBinaryString = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReport400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReport400ApplicationJSON.class);
                res.getTargetsTargetIdFindingsReport400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReport401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReport401ApplicationJSON.class);
                res.getTargetsTargetIdFindingsReport401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReport404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsReport404ApplicationJSON.class);
                res.getTargetsTargetIdFindingsReport404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Retrieve finding
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdResponse getTargetsTargetIdFindingsId(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdRequest.class, baseUrl, "/targets/{target_id}/findings/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdResponse res = new org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdResponse() {{
            finding = null;
            getTargetsTargetIdFindingsId401ApplicationJSONObject = null;
            getTargetsTargetIdFindingsId404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Finding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Finding.class);
                res.finding = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsId401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsId401ApplicationJSON.class);
                res.getTargetsTargetIdFindingsId401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsId404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsId404ApplicationJSON.class);
                res.getTargetsTargetIdFindingsId404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Finding activity log.
     * Finding activity log.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLogResponse getTargetsTargetIdFindingsIdLog(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLogRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLogRequest.class, baseUrl, "/targets/{target_id}/findings/{id}/log/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLogResponse res = new org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLogResponse() {{
            activities = null;
            getTargetsTargetIdFindingsIdLog401ApplicationJSONObject = null;
            getTargetsTargetIdFindingsIdLog404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Activity[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Activity[].class);
                res.activities = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLog401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLog401ApplicationJSON.class);
                res.getTargetsTargetIdFindingsIdLog401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLog404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdLog404ApplicationJSON.class);
                res.getTargetsTargetIdFindingsIdLog404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Bulk update findings
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdateResponse patchTargetsTargetIdFindingsBulkUpdate(org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdateRequest.class, baseUrl, "/targets/{target_id}/findings/bulk/update/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "findingBulkUpdateInput", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdateResponse res = new org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdateResponse() {{
            patchTargetsTargetIdFindingsBulkUpdate400ApplicationJSONObject = null;
            patchTargetsTargetIdFindingsBulkUpdate401ApplicationJSONObject = null;
            patchTargetsTargetIdFindingsBulkUpdate404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdate400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdate400ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsBulkUpdate400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdate401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdate401ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsBulkUpdate401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdate404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsBulkUpdate404ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsBulkUpdate404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Partial update finding
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdResponse patchTargetsTargetIdFindingsId(org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdRequest.class, baseUrl, "/targets/{target_id}/findings/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "findingUpdateInput", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdResponse res = new org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdResponse() {{
            finding = null;
            patchTargetsTargetIdFindingsId400ApplicationJSONObject = null;
            patchTargetsTargetIdFindingsId401ApplicationJSONObject = null;
            patchTargetsTargetIdFindingsId403ApplicationJSONObject = null;
            patchTargetsTargetIdFindingsId404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Finding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Finding.class);
                res.finding = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsId400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsId400ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsId400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsId401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsId401ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsId401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsId403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsId403ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsId403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsId404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsId404ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsId404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Finding report
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReportResponse postTargetsTargetIdFindingsBulkReport(org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReportRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReportRequest.class, baseUrl, "/targets/{target_id}/findings/bulk/report/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "findingBulkIds", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReportResponse res = new org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReportResponse() {{
            postTargetsTargetIdFindingsBulkReport400ApplicationJSONObject = null;
            postTargetsTargetIdFindingsBulkReport401ApplicationJSONObject = null;
            postTargetsTargetIdFindingsBulkReport404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReport400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReport400ApplicationJSON.class);
                res.postTargetsTargetIdFindingsBulkReport400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReport401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReport401ApplicationJSON.class);
                res.postTargetsTargetIdFindingsBulkReport401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReport404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkReport404ApplicationJSON.class);
                res.postTargetsTargetIdFindingsBulkReport404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Bulk retest findings
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetestResponse postTargetsTargetIdFindingsBulkRetest(org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetestRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetestRequest.class, baseUrl, "/targets/{target_id}/findings/bulk/retest/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "findingBulkRetest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetestResponse res = new org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetestResponse() {{
            postTargetsTargetIdFindingsBulkRetest400ApplicationJSONObject = null;
            postTargetsTargetIdFindingsBulkRetest401ApplicationJSONObject = null;
            postTargetsTargetIdFindingsBulkRetest404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetest400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetest400ApplicationJSON.class);
                res.postTargetsTargetIdFindingsBulkRetest400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetest401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetest401ApplicationJSON.class);
                res.postTargetsTargetIdFindingsBulkRetest401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetest404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsBulkRetest404ApplicationJSON.class);
                res.postTargetsTargetIdFindingsBulkRetest404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Retest finding
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetestResponse postTargetsTargetIdFindingsIdRetest(org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetestRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetestRequest.class, baseUrl, "/targets/{target_id}/findings/{id}/retest/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetestResponse res = new org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetestResponse() {{
            scan = null;
            postTargetsTargetIdFindingsIdRetest401ApplicationJSONObject = null;
            postTargetsTargetIdFindingsIdRetest403ApplicationJSONObject = null;
            postTargetsTargetIdFindingsIdRetest404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Scan out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Scan.class);
                res.scan = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetest401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetest401ApplicationJSON.class);
                res.postTargetsTargetIdFindingsIdRetest401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetest403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetest403ApplicationJSON.class);
                res.postTargetsTargetIdFindingsIdRetest403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetest404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostTargetsTargetIdFindingsIdRetest404ApplicationJSON.class);
                res.postTargetsTargetIdFindingsIdRetest404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update finding
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdResponse putTargetsTargetIdFindingsId(org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdRequest.class, baseUrl, "/targets/{target_id}/findings/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "findingUpdateInput", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdResponse res = new org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdResponse() {{
            finding = null;
            putTargetsTargetIdFindingsId400ApplicationJSONObject = null;
            putTargetsTargetIdFindingsId401ApplicationJSONObject = null;
            putTargetsTargetIdFindingsId403ApplicationJSONObject = null;
            putTargetsTargetIdFindingsId404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Finding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Finding.class);
                res.finding = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsId400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsId400ApplicationJSON.class);
                res.putTargetsTargetIdFindingsId400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsId401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsId401ApplicationJSON.class);
                res.putTargetsTargetIdFindingsId401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsId403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsId403ApplicationJSON.class);
                res.putTargetsTargetIdFindingsId403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsId404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsId404ApplicationJSON.class);
                res.putTargetsTargetIdFindingsId404ApplicationJSONObject = out;
            }
        }

        return res;
    }
}