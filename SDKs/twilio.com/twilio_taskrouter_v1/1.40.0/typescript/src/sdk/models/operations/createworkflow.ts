/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateWorkflowServerList = [
  "https://taskrouter.twilio.com",
] as const;

export class CreateWorkflowSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateWorkflowCreateWorkflowRequest extends SpeakeasyBase {
  /**
   * The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=AssignmentCallbackUrl" })
  assignmentCallbackUrl?: string;

  /**
   * A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information.
   */
  @SpeakeasyMetadata({ data: "form, name=Configuration" })
  configuration: string;

  /**
   * The URL that we should call when a call to the `assignment_callback_url` fails.
   */
  @SpeakeasyMetadata({ data: "form, name=FallbackAssignmentCallbackUrl" })
  fallbackAssignmentCallbackUrl?: string;

  /**
   * A descriptive string that you create to describe the Workflow resource. For example, `Inbound Call Workflow` or `2014 Outbound Campaign`.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName: string;

  /**
   * How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to `86,400` (24 hours) and the default is `120`.
   */
  @SpeakeasyMetadata({ data: "form, name=TaskReservationTimeout" })
  taskReservationTimeout?: number;
}

export class CreateWorkflowRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateWorkflowCreateWorkflowRequest;

  /**
   * The SID of the Workspace that the new Workflow to create belongs to.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=WorkspaceSid",
  })
  workspaceSid: string;
}

export class CreateWorkflowResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  taskrouterV1WorkspaceWorkflow?: shared.TaskrouterV1WorkspaceWorkflow;
}
