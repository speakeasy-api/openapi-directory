"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certificateoptions as shared_certificateoptions
from ..shared import domainvalidationoption as shared_domainvalidationoption
from ..shared import keyalgorithm_enum as shared_keyalgorithm_enum
from ..shared import tag as shared_tag
from ..shared import validationmethod_enum as shared_validationmethod_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RequestCertificateRequest:
    
    domain_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainName') }})  
    certificate_authority_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateAuthorityArn'), 'exclude': lambda f: f is None }})  
    domain_validation_options: Optional[list[shared_domainvalidationoption.DomainValidationOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainValidationOptions'), 'exclude': lambda f: f is None }})  
    idempotency_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdempotencyToken'), 'exclude': lambda f: f is None }})  
    key_algorithm: Optional[shared_keyalgorithm_enum.KeyAlgorithmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyAlgorithm'), 'exclude': lambda f: f is None }})  
    options: Optional[shared_certificateoptions.CertificateOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Options'), 'exclude': lambda f: f is None }})  
    subject_alternative_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubjectAlternativeNames'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    validation_method: Optional[shared_validationmethod_enum.ValidationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationMethod'), 'exclude': lambda f: f is None }})  
    