// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DocumentSubmissionEvidenceNetworkEnum - The exchange network that was used to send the document
type DocumentSubmissionEvidenceNetworkEnum string

const (
	DocumentSubmissionEvidenceNetworkEnumAs2    DocumentSubmissionEvidenceNetworkEnum = "as2"
	DocumentSubmissionEvidenceNetworkEnumEmail  DocumentSubmissionEvidenceNetworkEnum = "email"
	DocumentSubmissionEvidenceNetworkEnumPeppol DocumentSubmissionEvidenceNetworkEnum = "peppol"
	DocumentSubmissionEvidenceNetworkEnumSdi    DocumentSubmissionEvidenceNetworkEnum = "sdi"
)

func (e *DocumentSubmissionEvidenceNetworkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "as2":
		fallthrough
	case "email":
		fallthrough
	case "peppol":
		fallthrough
	case "sdi":
		*e = DocumentSubmissionEvidenceNetworkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentSubmissionEvidenceNetworkEnum: %s", s)
	}
}

// DocumentSubmissionEvidence - Success
type DocumentSubmissionEvidence struct {
	// An array of documents that were sent. For OpenPeppol, this is always a single document (it may contain a PDF inside). For Email, the number of documents depends on the number of attachments, which in turn depends on the country of the receiver. For email, the raw email in RFC822 format is also included.
	Documents []DocumentSubmissionEvidenceDocument `json:"documents,omitempty"`
	Evidence  *DocumentSubmissionEvidenceEvidence  `json:"evidence,omitempty"`
	// The exchange network that was used to send the document
	Network *DocumentSubmissionEvidenceNetworkEnum `json:"network,omitempty"`
	// The legal identifier of the receiver, or the tax identifier if there is no legal identifier.
	Receiver *string `json:"receiver,omitempty"`
	// The legal identifier of the sender, or the tax identifier if there is no legal identifier.
	Sender *string `json:"sender,omitempty"`
}
