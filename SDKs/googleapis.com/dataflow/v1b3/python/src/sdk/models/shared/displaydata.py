"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DisplayData:
    r"""Data provided with a pipeline or transform to provide descriptive info."""
    
    bool_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boolValue'), 'exclude': lambda f: f is None }})
    r"""Contains value if the data is of a boolean type."""  
    duration_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationValue'), 'exclude': lambda f: f is None }})
    r"""Contains value if the data is of duration type."""  
    float_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floatValue'), 'exclude': lambda f: f is None }})
    r"""Contains value if the data is of float type."""  
    int64_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('int64Value'), 'exclude': lambda f: f is None }})
    r"""Contains value if the data is of int64 type."""  
    java_class_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('javaClassValue'), 'exclude': lambda f: f is None }})
    r"""Contains value if the data is of java class type."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""An optional label to display in a dax UI for the element."""  
    namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespace'), 'exclude': lambda f: f is None }})
    r"""The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering."""  
    short_str_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortStrValue'), 'exclude': lambda f: f is None }})
    r"""A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip."""  
    str_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strValue'), 'exclude': lambda f: f is None }})
    r"""Contains value if the data is of string type."""  
    timestamp_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampValue'), 'exclude': lambda f: f is None }})
    r"""Contains value if the data is of timestamp type."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""An optional full URL."""  
    