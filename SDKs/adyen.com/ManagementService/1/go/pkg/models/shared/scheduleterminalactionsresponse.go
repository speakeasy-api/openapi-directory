// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ScheduleTerminalActionsResponseActionDetailsType string

const (
	ScheduleTerminalActionsResponseActionDetailsTypeInstallAndroidAppDetails           ScheduleTerminalActionsResponseActionDetailsType = "InstallAndroidAppDetails"
	ScheduleTerminalActionsResponseActionDetailsTypeInstallAndroidCertificateDetails   ScheduleTerminalActionsResponseActionDetailsType = "InstallAndroidCertificateDetails"
	ScheduleTerminalActionsResponseActionDetailsTypeReleaseUpdateDetails               ScheduleTerminalActionsResponseActionDetailsType = "ReleaseUpdateDetails"
	ScheduleTerminalActionsResponseActionDetailsTypeUninstallAndroidAppDetails         ScheduleTerminalActionsResponseActionDetailsType = "UninstallAndroidAppDetails"
	ScheduleTerminalActionsResponseActionDetailsTypeUninstallAndroidCertificateDetails ScheduleTerminalActionsResponseActionDetailsType = "UninstallAndroidCertificateDetails"
)

type ScheduleTerminalActionsResponseActionDetails struct {
	InstallAndroidAppDetails           *InstallAndroidAppDetails
	InstallAndroidCertificateDetails   *InstallAndroidCertificateDetails
	ReleaseUpdateDetails               *ReleaseUpdateDetails
	UninstallAndroidAppDetails         *UninstallAndroidAppDetails
	UninstallAndroidCertificateDetails *UninstallAndroidCertificateDetails

	Type ScheduleTerminalActionsResponseActionDetailsType
}

func CreateScheduleTerminalActionsResponseActionDetailsInstallAndroidAppDetails(installAndroidAppDetails InstallAndroidAppDetails) ScheduleTerminalActionsResponseActionDetails {
	typ := ScheduleTerminalActionsResponseActionDetailsTypeInstallAndroidAppDetails

	return ScheduleTerminalActionsResponseActionDetails{
		InstallAndroidAppDetails: &installAndroidAppDetails,
		Type:                     typ,
	}
}

func CreateScheduleTerminalActionsResponseActionDetailsInstallAndroidCertificateDetails(installAndroidCertificateDetails InstallAndroidCertificateDetails) ScheduleTerminalActionsResponseActionDetails {
	typ := ScheduleTerminalActionsResponseActionDetailsTypeInstallAndroidCertificateDetails

	return ScheduleTerminalActionsResponseActionDetails{
		InstallAndroidCertificateDetails: &installAndroidCertificateDetails,
		Type:                             typ,
	}
}

func CreateScheduleTerminalActionsResponseActionDetailsReleaseUpdateDetails(releaseUpdateDetails ReleaseUpdateDetails) ScheduleTerminalActionsResponseActionDetails {
	typ := ScheduleTerminalActionsResponseActionDetailsTypeReleaseUpdateDetails

	return ScheduleTerminalActionsResponseActionDetails{
		ReleaseUpdateDetails: &releaseUpdateDetails,
		Type:                 typ,
	}
}

func CreateScheduleTerminalActionsResponseActionDetailsUninstallAndroidAppDetails(uninstallAndroidAppDetails UninstallAndroidAppDetails) ScheduleTerminalActionsResponseActionDetails {
	typ := ScheduleTerminalActionsResponseActionDetailsTypeUninstallAndroidAppDetails

	return ScheduleTerminalActionsResponseActionDetails{
		UninstallAndroidAppDetails: &uninstallAndroidAppDetails,
		Type:                       typ,
	}
}

func CreateScheduleTerminalActionsResponseActionDetailsUninstallAndroidCertificateDetails(uninstallAndroidCertificateDetails UninstallAndroidCertificateDetails) ScheduleTerminalActionsResponseActionDetails {
	typ := ScheduleTerminalActionsResponseActionDetailsTypeUninstallAndroidCertificateDetails

	return ScheduleTerminalActionsResponseActionDetails{
		UninstallAndroidCertificateDetails: &uninstallAndroidCertificateDetails,
		Type:                               typ,
	}
}

func (u *ScheduleTerminalActionsResponseActionDetails) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	installAndroidAppDetails := new(InstallAndroidAppDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&installAndroidAppDetails); err == nil {
		u.InstallAndroidAppDetails = installAndroidAppDetails
		u.Type = ScheduleTerminalActionsResponseActionDetailsTypeInstallAndroidAppDetails
		return nil
	}

	installAndroidCertificateDetails := new(InstallAndroidCertificateDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&installAndroidCertificateDetails); err == nil {
		u.InstallAndroidCertificateDetails = installAndroidCertificateDetails
		u.Type = ScheduleTerminalActionsResponseActionDetailsTypeInstallAndroidCertificateDetails
		return nil
	}

	releaseUpdateDetails := new(ReleaseUpdateDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&releaseUpdateDetails); err == nil {
		u.ReleaseUpdateDetails = releaseUpdateDetails
		u.Type = ScheduleTerminalActionsResponseActionDetailsTypeReleaseUpdateDetails
		return nil
	}

	uninstallAndroidAppDetails := new(UninstallAndroidAppDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&uninstallAndroidAppDetails); err == nil {
		u.UninstallAndroidAppDetails = uninstallAndroidAppDetails
		u.Type = ScheduleTerminalActionsResponseActionDetailsTypeUninstallAndroidAppDetails
		return nil
	}

	uninstallAndroidCertificateDetails := new(UninstallAndroidCertificateDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&uninstallAndroidCertificateDetails); err == nil {
		u.UninstallAndroidCertificateDetails = uninstallAndroidCertificateDetails
		u.Type = ScheduleTerminalActionsResponseActionDetailsTypeUninstallAndroidCertificateDetails
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ScheduleTerminalActionsResponseActionDetails) MarshalJSON() ([]byte, error) {
	if u.InstallAndroidAppDetails != nil {
		return json.Marshal(u.InstallAndroidAppDetails)
	}

	if u.InstallAndroidCertificateDetails != nil {
		return json.Marshal(u.InstallAndroidCertificateDetails)
	}

	if u.ReleaseUpdateDetails != nil {
		return json.Marshal(u.ReleaseUpdateDetails)
	}

	if u.UninstallAndroidAppDetails != nil {
		return json.Marshal(u.UninstallAndroidAppDetails)
	}

	if u.UninstallAndroidCertificateDetails != nil {
		return json.Marshal(u.UninstallAndroidCertificateDetails)
	}

	return nil, nil
}

// ScheduleTerminalActionsResponse - OK - the request has succeeded.
type ScheduleTerminalActionsResponse struct {
	// Information about the action to take.
	ActionDetails *ScheduleTerminalActionsResponseActionDetails `json:"actionDetails,omitempty"`
	// A list containing a terminal ID and an action ID for each terminal that the action was scheduled for.
	Items []TerminalActionScheduleDetail `json:"items,omitempty"`
	// The date and time when the action should happen.
	// Format: [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339), but without the **Z** before the time offset. For example, **2021-11-15T12:16:21+01:00**
	// The action is sent with the first [maintenance call](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api#when-actions-take-effect) after the specified date and time in the time zone of the terminal.
	// An empty value causes the action to be sent as soon as possible: at the next maintenance call.
	ScheduledAt *string `json:"scheduledAt,omitempty"`
	// The unique ID of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores). If present, all terminals in the `terminalIds` list must be assigned to this store.
	StoreID *string `json:"storeId,omitempty"`
	// A list of unique IDs of the terminals that the action applies to.
	TerminalIds []string `json:"terminalIds,omitempty"`
	// The validation errors that occurred in the list of terminals, and for each error the IDs of the terminals that the error applies to.
	TerminalsWithErrors map[string][]string `json:"terminalsWithErrors,omitempty"`
	// The number of terminals for which scheduling the action failed.
	TotalErrors *int `json:"totalErrors,omitempty"`
	// The number of terminals for which the action was successfully scheduled. This doesn't mean the action has happened yet.
	TotalScheduled *int `json:"totalScheduled,omitempty"`
}
