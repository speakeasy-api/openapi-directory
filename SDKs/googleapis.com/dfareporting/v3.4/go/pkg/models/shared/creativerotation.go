// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreativeRotationTypeEnum - Type of creative rotation. Can be used to specify whether to use sequential or random rotation.
type CreativeRotationTypeEnum string

const (
	CreativeRotationTypeEnumCreativeRotationTypeSequential CreativeRotationTypeEnum = "CREATIVE_ROTATION_TYPE_SEQUENTIAL"
	CreativeRotationTypeEnumCreativeRotationTypeRandom     CreativeRotationTypeEnum = "CREATIVE_ROTATION_TYPE_RANDOM"
)

func (e CreativeRotationTypeEnum) ToPointer() *CreativeRotationTypeEnum {
	return &e
}

func (e *CreativeRotationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATIVE_ROTATION_TYPE_SEQUENTIAL":
		fallthrough
	case "CREATIVE_ROTATION_TYPE_RANDOM":
		*e = CreativeRotationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreativeRotationTypeEnum: %v", v)
	}
}

// CreativeRotationWeightCalculationStrategyEnum - Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.
type CreativeRotationWeightCalculationStrategyEnum string

const (
	CreativeRotationWeightCalculationStrategyEnumWeightStrategyEqual      CreativeRotationWeightCalculationStrategyEnum = "WEIGHT_STRATEGY_EQUAL"
	CreativeRotationWeightCalculationStrategyEnumWeightStrategyCustom     CreativeRotationWeightCalculationStrategyEnum = "WEIGHT_STRATEGY_CUSTOM"
	CreativeRotationWeightCalculationStrategyEnumWeightStrategyHighestCtr CreativeRotationWeightCalculationStrategyEnum = "WEIGHT_STRATEGY_HIGHEST_CTR"
	CreativeRotationWeightCalculationStrategyEnumWeightStrategyOptimized  CreativeRotationWeightCalculationStrategyEnum = "WEIGHT_STRATEGY_OPTIMIZED"
)

func (e CreativeRotationWeightCalculationStrategyEnum) ToPointer() *CreativeRotationWeightCalculationStrategyEnum {
	return &e
}

func (e *CreativeRotationWeightCalculationStrategyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WEIGHT_STRATEGY_EQUAL":
		fallthrough
	case "WEIGHT_STRATEGY_CUSTOM":
		fallthrough
	case "WEIGHT_STRATEGY_HIGHEST_CTR":
		fallthrough
	case "WEIGHT_STRATEGY_OPTIMIZED":
		*e = CreativeRotationWeightCalculationStrategyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreativeRotationWeightCalculationStrategyEnum: %v", v)
	}
}

// CreativeRotation - Creative Rotation.
type CreativeRotation struct {
	// Creative assignments in this creative rotation.
	CreativeAssignments []CreativeAssignment `json:"creativeAssignments,omitempty"`
	// Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad.
	CreativeOptimizationConfigurationID *string `json:"creativeOptimizationConfigurationId,omitempty"`
	// Type of creative rotation. Can be used to specify whether to use sequential or random rotation.
	Type *CreativeRotationTypeEnum `json:"type,omitempty"`
	// Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.
	WeightCalculationStrategy *CreativeRotationWeightCalculationStrategyEnum `json:"weightCalculationStrategy,omitempty"`
}
