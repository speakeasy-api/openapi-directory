/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * <p>Authentication mode for the environment.</p> <ul> <li> <p> <code>FEDERATED</code> - Users access FinSpace through Single Sign On (SSO) via your Identity provider.</p> </li> <li> <p> <code>LOCAL</code> - Users access FinSpace via email and password managed within the FinSpace environment.</p> </li> </ul>
 */
export enum CreateEnvironmentRequestBodyFederationModeEnum {
  Federated = "FEDERATED",
  Local = "LOCAL",
}

/**
 * Configuration information when authentication mode is FEDERATED.
 */
export class CreateEnvironmentRequestBodyFederationParameters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "applicationCallBackURL" })
  applicationCallBackURL?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "attributeMap" })
  attributeMap?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "federationProviderName" })
  federationProviderName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "federationURN" })
  federationURN?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "samlMetadataDocument" })
  samlMetadataDocument?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "samlMetadataURL" })
  samlMetadataURL?: string;
}

/**
 * Configuration information for the superuser.
 */
export class CreateEnvironmentRequestBodySuperuserParameters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "emailAddress" })
  emailAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "firstName" })
  firstName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastName" })
  lastName?: string;
}

export class CreateEnvironmentRequestBody extends SpeakeasyBase {
  /**
   * <p>The list of Amazon Resource Names (ARN) of the data bundles to install. Currently supported data bundle ARNs:</p> <ul> <li> <p> <code>arn:aws:finspace:${Region}::data-bundle/capital-markets-sample</code> - Contains sample Capital Markets datasets, categories and controlled vocabularies.</p> </li> <li> <p> <code>arn:aws:finspace:${Region}::data-bundle/taq</code> (default) - Contains trades and quotes data in addition to sample Capital Markets data.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataBundles" })
  dataBundles?: string[];

  /**
   * The description of the FinSpace environment to be created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * <p>Authentication mode for the environment.</p> <ul> <li> <p> <code>FEDERATED</code> - Users access FinSpace through Single Sign On (SSO) via your Identity provider.</p> </li> <li> <p> <code>LOCAL</code> - Users access FinSpace via email and password managed within the FinSpace environment.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "federationMode" })
  federationMode?: CreateEnvironmentRequestBodyFederationModeEnum;

  /**
   * Configuration information when authentication mode is FEDERATED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "federationParameters" })
  @Type(() => CreateEnvironmentRequestBodyFederationParameters)
  federationParameters?: CreateEnvironmentRequestBodyFederationParameters;

  /**
   * The KMS key id to encrypt your data in the FinSpace environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyId" })
  kmsKeyId?: string;

  /**
   * The name of the FinSpace environment to be created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Configuration information for the superuser.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "superuserParameters" })
  @Type(() => CreateEnvironmentRequestBodySuperuserParameters)
  superuserParameters?: CreateEnvironmentRequestBodySuperuserParameters;

  /**
   * Add tags to your FinSpace environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateEnvironmentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateEnvironmentRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateEnvironmentResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createEnvironmentResponse?: shared.CreateEnvironmentResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
