/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SearchCatalogItemsRequest - Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
 */
public class SearchCatalogItemsRequest {
    /**
     * The category id query expression to return items containing the specified category IDs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_ids")
    public String[] categoryIds;

    public SearchCatalogItemsRequest withCategoryIds(String[] categoryIds) {
        this.categoryIds = categoryIds;
        return this;
    }
    
    /**
     * The pagination token, returned in the previous response, used to fetch the next batch of pending results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    public String cursor;

    public SearchCatalogItemsRequest withCursor(String cursor) {
        this.cursor = cursor;
        return this;
    }
    
    /**
     * The customer-attribute filter to return items or item variations matching the specified
     * custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
     * a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_attribute_filters")
    public CustomAttributeFilter[] customAttributeFilters;

    public SearchCatalogItemsRequest withCustomAttributeFilters(CustomAttributeFilter[] customAttributeFilters) {
        this.customAttributeFilters = customAttributeFilters;
        return this;
    }
    
    /**
     * The enabled-location query expression to return items and item variations having specified enabled locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled_location_ids")
    public String[] enabledLocationIds;

    public SearchCatalogItemsRequest withEnabledLocationIds(String[] enabledLocationIds) {
        this.enabledLocationIds = enabledLocationIds;
        return this;
    }
    
    /**
     * The maximum number of results to return per page. The default value is 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Long limit;

    public SearchCatalogItemsRequest withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The product types query expression to return items or item variations having the specified product types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_types")
    public String[] productTypes;

    public SearchCatalogItemsRequest withProductTypes(String[] productTypes) {
        this.productTypes = productTypes;
        return this;
    }
    
    /**
     * The order to sort the results by item names. The default sort order is ascending (`ASC`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort_order")
    public String sortOrder;

    public SearchCatalogItemsRequest withSortOrder(String sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * The stock-level query expression to return item variations with the specified stock levels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stock_levels")
    public String[] stockLevels;

    public SearchCatalogItemsRequest withStockLevels(String[] stockLevels) {
        this.stockLevels = stockLevels;
        return this;
    }
    
    /**
     * The text filter expression to return items or item variations containing specified text in
     * the `name`, `description`, or `abbreviation` attribute value of an item, or in
     * the `name`, `sku`, or `upc` attribute value of an item variation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_filter")
    public String textFilter;

    public SearchCatalogItemsRequest withTextFilter(String textFilter) {
        this.textFilter = textFilter;
        return this;
    }
    
    public SearchCatalogItemsRequest(){}
}
