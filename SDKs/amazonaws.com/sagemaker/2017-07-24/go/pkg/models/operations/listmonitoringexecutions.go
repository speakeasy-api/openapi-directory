// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListMonitoringExecutionsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListMonitoringExecutionsXAmzTargetEnum
type ListMonitoringExecutionsXAmzTargetEnum string

const (
	ListMonitoringExecutionsXAmzTargetEnumSageMakerListMonitoringExecutions ListMonitoringExecutionsXAmzTargetEnum = "SageMaker.ListMonitoringExecutions"
)

func (e *ListMonitoringExecutionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SageMaker.ListMonitoringExecutions":
		*e = ListMonitoringExecutionsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMonitoringExecutionsXAmzTargetEnum: %s", s)
	}
}

type ListMonitoringExecutionsHeaders struct {
	XAmzAlgorithm     *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListMonitoringExecutionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListMonitoringExecutionsRequest struct {
	QueryParams ListMonitoringExecutionsQueryParams
	Headers     ListMonitoringExecutionsHeaders
	Request     shared.ListMonitoringExecutionsRequest `request:"mediaType=application/json"`
}

type ListMonitoringExecutionsResponse struct {
	ContentType string
	// Success
	ListMonitoringExecutionsResponse *shared.ListMonitoringExecutionsResponse
	StatusCode                       int
	RawResponse                      *http.Response
}
