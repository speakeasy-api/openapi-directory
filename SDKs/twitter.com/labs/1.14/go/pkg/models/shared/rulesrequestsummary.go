// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type RulesRequestSummary2 struct {
	Deleted    int `json:"deleted"`
	NotDeleted int `json:"not_deleted"`
}

type RulesRequestSummary1 struct {
	Created    int `json:"created"`
	NotCreated int `json:"not_created"`
}

type RulesRequestSummaryType string

const (
	RulesRequestSummaryTypeRulesRequestSummary1 RulesRequestSummaryType = "RulesRequestSummary_1"
	RulesRequestSummaryTypeRulesRequestSummary2 RulesRequestSummaryType = "RulesRequestSummary_2"
)

type RulesRequestSummary struct {
	RulesRequestSummary1 *RulesRequestSummary1
	RulesRequestSummary2 *RulesRequestSummary2

	Type RulesRequestSummaryType
}

func CreateRulesRequestSummaryRulesRequestSummary1(rulesRequestSummary1 RulesRequestSummary1) RulesRequestSummary {
	typ := RulesRequestSummaryTypeRulesRequestSummary1

	return RulesRequestSummary{
		RulesRequestSummary1: &rulesRequestSummary1,
		Type:                 typ,
	}
}

func CreateRulesRequestSummaryRulesRequestSummary2(rulesRequestSummary2 RulesRequestSummary2) RulesRequestSummary {
	typ := RulesRequestSummaryTypeRulesRequestSummary2

	return RulesRequestSummary{
		RulesRequestSummary2: &rulesRequestSummary2,
		Type:                 typ,
	}
}

func (u *RulesRequestSummary) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	rulesRequestSummary1 := new(RulesRequestSummary1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&rulesRequestSummary1); err == nil {
		u.RulesRequestSummary1 = rulesRequestSummary1
		u.Type = RulesRequestSummaryTypeRulesRequestSummary1
		return nil
	}

	rulesRequestSummary2 := new(RulesRequestSummary2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&rulesRequestSummary2); err == nil {
		u.RulesRequestSummary2 = rulesRequestSummary2
		u.Type = RulesRequestSummaryTypeRulesRequestSummary2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RulesRequestSummary) MarshalJSON() ([]byte, error) {
	if u.RulesRequestSummary1 != nil {
		return json.Marshal(u.RulesRequestSummary1)
	}

	if u.RulesRequestSummary2 != nil {
		return json.Marshal(u.RulesRequestSummary2)
	}

	return nil, nil
}
