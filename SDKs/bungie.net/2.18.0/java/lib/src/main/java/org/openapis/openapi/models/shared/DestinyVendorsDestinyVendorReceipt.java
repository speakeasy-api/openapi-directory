/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * DestinyVendorsDestinyVendorReceipt - If a character purchased an item that is refundable, a Vendor Receipt will be created on the user's Destiny Profile. These expire after a configurable period of time, but until then can be used to get refunds on items. BNet does not provide the ability to refund a purchase *yet*, but you know.
 */
public class DestinyVendorsDestinyVendorReceipt {
    /**
     * The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.
     */
    
    public DestinyDestinyItemQuantity[] currencyPaid;
    public DestinyVendorsDestinyVendorReceipt withCurrencyPaid(DestinyDestinyItemQuantity[] currencyPaid) {
        this.currencyPaid = currencyPaid;
        return this;
    }
    
    /**
     * The date at which this receipt is rendered invalid.
     */
    
    public OffsetDateTime expiresOn;
    public DestinyVendorsDestinyVendorReceipt withExpiresOn(OffsetDateTime expiresOn) {
        this.expiresOn = expiresOn;
        return this;
    }
    
    /**
     * The item that was received, and its quantity.
     */
    
    public DestinyVendorsDestinyVendorReceiptItemReceived itemReceived;
    public DestinyVendorsDestinyVendorReceipt withItemReceived(DestinyVendorsDestinyVendorReceiptItemReceived itemReceived) {
        this.itemReceived = itemReceived;
        return this;
    }
    
    /**
     * The unlock flag used to determine whether you still have the purchased item.
     */
    
    public Long licenseUnlockHash;
    public DestinyVendorsDestinyVendorReceipt withLicenseUnlockHash(Long licenseUnlockHash) {
        this.licenseUnlockHash = licenseUnlockHash;
        return this;
    }
    
    /**
     * The ID of the character who made the purchase.
     */
    
    public Long purchasedByCharacterId;
    public DestinyVendorsDestinyVendorReceipt withPurchasedByCharacterId(Long purchasedByCharacterId) {
        this.purchasedByCharacterId = purchasedByCharacterId;
        return this;
    }
    
    /**
     * Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.
     */
    
    public Integer refundPolicy;
    public DestinyVendorsDestinyVendorReceipt withRefundPolicy(Integer refundPolicy) {
        this.refundPolicy = refundPolicy;
        return this;
    }
    
    /**
     * The identifier of this receipt.
     */
    
    public Integer sequenceNumber;
    public DestinyVendorsDestinyVendorReceipt withSequenceNumber(Integer sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
        return this;
    }
    
    /**
     * The seconds since epoch at which this receipt is rendered invalid.
     */
    
    public Long timeToExpiration;
    public DestinyVendorsDestinyVendorReceipt withTimeToExpiration(Long timeToExpiration) {
        this.timeToExpiration = timeToExpiration;
        return this;
    }
    
}
