/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class EcommerceOrder {
    /**
     * An object representing a shipping or billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    public EcommerceAddress billingAddress;
    public EcommerceOrder withBillingAddress(EcommerceAddress billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public EcommerceOrder withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public CurrencyEnum currency;
    public EcommerceOrder withCurrency(CurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    public LinkedEcommerceCustomer customer;
    public EcommerceOrder withCustomer(LinkedEcommerceCustomer customer) {
        this.customer = customer;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    public EcommerceDiscount[] discounts;
    public EcommerceOrder withDiscounts(EcommerceDiscount[] discounts) {
        this.discounts = discounts;
        return this;
    }
    
    /**
     * Current fulfillment status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fulfillment_status")
    public EcommerceOrderFulfillmentStatusEnum fulfillmentStatus;
    public EcommerceOrder withFulfillmentStatus(EcommerceOrderFulfillmentStatusEnum fulfillmentStatus) {
        this.fulfillmentStatus = fulfillmentStatus;
        return this;
    }
    
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    public String id;
    public EcommerceOrder withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    public EcommerceOrderLineItem[] lineItems;
    public EcommerceOrder withLineItems(EcommerceOrderLineItem[] lineItems) {
        this.lineItems = lineItems;
        return this;
    }
    
    /**
     * Note for the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;
    public EcommerceOrder withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Order number, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_number")
    public String orderNumber;
    public EcommerceOrder withOrderNumber(String orderNumber) {
        this.orderNumber = orderNumber;
        return this;
    }
    
    /**
     * Payment method used for this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    public String paymentMethod;
    public EcommerceOrder withPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }
    
    /**
     * Current payment status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_status")
    public EcommerceOrderPaymentStatusEnum paymentStatus;
    public EcommerceOrder withPaymentStatus(EcommerceOrderPaymentStatusEnum paymentStatus) {
        this.paymentStatus = paymentStatus;
        return this;
    }
    
    /**
     * An object representing a shipping or billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    public EcommerceAddress shippingAddress;
    public EcommerceOrder withShippingAddress(EcommerceAddress shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }
    
    /**
     * Shipping cost, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_cost")
    public String shippingCost;
    public EcommerceOrder withShippingCost(String shippingCost) {
        this.shippingCost = shippingCost;
        return this;
    }
    
    /**
     * Current status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public EcommerceOrderStatusEnum status;
    public EcommerceOrder withStatus(EcommerceOrderStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    public String subTotal;
    public EcommerceOrder withSubTotal(String subTotal) {
        this.subTotal = subTotal;
        return this;
    }
    
    /**
     * Total amount due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    public String totalAmount;
    public EcommerceOrder withTotalAmount(String totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * Total discount, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount")
    public String totalDiscount;
    public EcommerceOrder withTotalDiscount(String totalDiscount) {
        this.totalDiscount = totalDiscount;
        return this;
    }
    
    /**
     * Total tax, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    public String totalTax;
    public EcommerceOrder withTotalTax(String totalTax) {
        this.totalTax = totalTax;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking")
    public TrackingItem[] tracking;
    public EcommerceOrder withTracking(TrackingItem[] tracking) {
        this.tracking = tracking;
        return this;
    }
    
    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public EcommerceOrder withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
