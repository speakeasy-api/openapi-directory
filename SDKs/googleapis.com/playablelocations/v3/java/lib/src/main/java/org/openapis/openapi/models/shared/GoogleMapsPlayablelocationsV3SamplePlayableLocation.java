/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleMapsPlayablelocationsV3SamplePlayableLocation - A geographical point suitable for placing game objects in location-based games.
 */
public class GoogleMapsPlayablelocationsV3SamplePlayableLocation {
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("centerPoint")
    public GoogleTypeLatLng centerPoint;

    public GoogleMapsPlayablelocationsV3SamplePlayableLocation withCenterPoint(GoogleTypeLatLng centerPoint) {
        this.centerPoint = centerPoint;
        return this;
    }
    
    /**
     * Required. The name of this playable location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GoogleMapsPlayablelocationsV3SamplePlayableLocation withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A [place ID] (https://developers.google.com/places/place-id)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placeId")
    public String placeId;

    public GoogleMapsPlayablelocationsV3SamplePlayableLocation withPlaceId(String placeId) {
        this.placeId = placeId;
        return this;
    }
    
    /**
     * A [plus code] (http://openlocationcode.com)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plusCode")
    public String plusCode;

    public GoogleMapsPlayablelocationsV3SamplePlayableLocation withPlusCode(String plusCode) {
        this.plusCode = plusCode;
        return this;
    }
    
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snappedPoint")
    public GoogleTypeLatLng snappedPoint;

    public GoogleMapsPlayablelocationsV3SamplePlayableLocation withSnappedPoint(GoogleTypeLatLng snappedPoint) {
        this.snappedPoint = snappedPoint;
        return this;
    }
    
    /**
     * A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this playable location. The first type in the collection is the primary type. Type information might not be available for all playable locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("types")
    public String[] types;

    public GoogleMapsPlayablelocationsV3SamplePlayableLocation withTypes(String[] types) {
        this.types = types;
        return this;
    }
    
    public GoogleMapsPlayablelocationsV3SamplePlayableLocation(){}
}
