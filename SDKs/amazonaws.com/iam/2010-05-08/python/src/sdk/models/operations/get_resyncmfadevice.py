"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETResyncMFADeviceActionEnum(str, Enum):
    RESYNC_MFA_DEVICE = 'ResyncMFADevice'

class GETResyncMFADeviceVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_05_08 = '2010-05-08'


@dataclasses.dataclass
class GETResyncMFADeviceRequest:
    
    action: GETResyncMFADeviceActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    authentication_code1: str = dataclasses.field(metadata={'query_param': { 'field_name': 'AuthenticationCode1', 'style': 'form', 'explode': True }})
    r"""<p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>"""  
    authentication_code2: str = dataclasses.field(metadata={'query_param': { 'field_name': 'AuthenticationCode2', 'style': 'form', 'explode': True }})
    r"""<p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>"""  
    serial_number: str = dataclasses.field(metadata={'query_param': { 'field_name': 'SerialNumber', 'style': 'form', 'explode': True }})
    r"""<p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href=\\"http://wikipedia.org/wiki/regex\\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"""  
    user_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'UserName', 'style': 'form', 'explode': True }})
    r"""<p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href=\\"http://wikipedia.org/wiki/regex\\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"""  
    version: GETResyncMFADeviceVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETResyncMFADeviceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    