// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SsmgrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SsmgrRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// ROLL NO
	Rroll string `json:"RROLL"`
	// YEAR
	Year string `json:"YEAR"`
}

// SsmgrRequestBodyFormatEnum - The format of the certificate in response.
type SsmgrRequestBodyFormatEnum string

const (
	SsmgrRequestBodyFormatEnumPdf SsmgrRequestBodyFormatEnum = "pdf"
)

func (e SsmgrRequestBodyFormatEnum) ToPointer() *SsmgrRequestBodyFormatEnum {
	return &e
}

func (e *SsmgrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = SsmgrRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SsmgrRequestBodyFormatEnum: %v", v)
	}
}

// SsmgrRequestBody - Request format
type SsmgrRequestBody struct {
	CertificateParameters *SsmgrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SsmgrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ssmgr504ApplicationJSONErrorEnum string

const (
	Ssmgr504ApplicationJSONErrorEnumGatewayTimeout Ssmgr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Ssmgr504ApplicationJSONErrorEnum) ToPointer() *Ssmgr504ApplicationJSONErrorEnum {
	return &e
}

func (e *Ssmgr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Ssmgr504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr504ApplicationJSONErrorEnum: %v", v)
	}
}

type Ssmgr504ApplicationJSONErrorDescriptionEnum string

const (
	Ssmgr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ssmgr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Ssmgr504ApplicationJSONErrorDescriptionEnum) ToPointer() *Ssmgr504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ssmgr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Ssmgr504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ssmgr504ApplicationJSON - Gateway timeout
type Ssmgr504ApplicationJSON struct {
	Error            *Ssmgr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ssmgr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ssmgr503ApplicationJSONErrorEnum string

const (
	Ssmgr503ApplicationJSONErrorEnumServiceUnavailable Ssmgr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Ssmgr503ApplicationJSONErrorEnum) ToPointer() *Ssmgr503ApplicationJSONErrorEnum {
	return &e
}

func (e *Ssmgr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Ssmgr503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr503ApplicationJSONErrorEnum: %v", v)
	}
}

type Ssmgr503ApplicationJSONErrorDescriptionEnum string

const (
	Ssmgr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ssmgr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Ssmgr503ApplicationJSONErrorDescriptionEnum) ToPointer() *Ssmgr503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ssmgr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Ssmgr503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ssmgr503ApplicationJSON - Service unavailable
type Ssmgr503ApplicationJSON struct {
	Error            *Ssmgr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ssmgr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ssmgr502ApplicationJSONErrorEnum string

const (
	Ssmgr502ApplicationJSONErrorEnumBadGatewy Ssmgr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Ssmgr502ApplicationJSONErrorEnum) ToPointer() *Ssmgr502ApplicationJSONErrorEnum {
	return &e
}

func (e *Ssmgr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Ssmgr502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr502ApplicationJSONErrorEnum: %v", v)
	}
}

type Ssmgr502ApplicationJSONErrorDescriptionEnum string

const (
	Ssmgr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ssmgr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Ssmgr502ApplicationJSONErrorDescriptionEnum) ToPointer() *Ssmgr502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ssmgr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Ssmgr502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ssmgr502ApplicationJSON - Bad gateway
type Ssmgr502ApplicationJSON struct {
	Error            *Ssmgr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ssmgr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ssmgr500ApplicationJSONErrorEnum string

const (
	Ssmgr500ApplicationJSONErrorEnumInternalServerError Ssmgr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Ssmgr500ApplicationJSONErrorEnum) ToPointer() *Ssmgr500ApplicationJSONErrorEnum {
	return &e
}

func (e *Ssmgr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Ssmgr500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr500ApplicationJSONErrorEnum: %v", v)
	}
}

type Ssmgr500ApplicationJSONErrorDescriptionEnum string

const (
	Ssmgr500ApplicationJSONErrorDescriptionEnumInternalServerError Ssmgr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Ssmgr500ApplicationJSONErrorDescriptionEnum) ToPointer() *Ssmgr500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ssmgr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Ssmgr500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ssmgr500ApplicationJSON - Internal server error
type Ssmgr500ApplicationJSON struct {
	Error            *Ssmgr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ssmgr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ssmgr404ApplicationJSONErrorEnum string

const (
	Ssmgr404ApplicationJSONErrorEnumRecordNotFound Ssmgr404ApplicationJSONErrorEnum = "record_not_found"
	Ssmgr404ApplicationJSONErrorEnumURLNotFound    Ssmgr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Ssmgr404ApplicationJSONErrorEnum) ToPointer() *Ssmgr404ApplicationJSONErrorEnum {
	return &e
}

func (e *Ssmgr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ssmgr404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr404ApplicationJSONErrorEnum: %v", v)
	}
}

type Ssmgr404ApplicationJSONErrorDescriptionEnum string

const (
	Ssmgr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ssmgr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ssmgr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ssmgr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Ssmgr404ApplicationJSONErrorDescriptionEnum) ToPointer() *Ssmgr404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ssmgr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ssmgr404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ssmgr404ApplicationJSON - No record found
type Ssmgr404ApplicationJSON struct {
	Error            *Ssmgr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ssmgr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ssmgr401ApplicationJSONErrorEnum string

const (
	Ssmgr401ApplicationJSONErrorEnumInvalidAuthentication Ssmgr401ApplicationJSONErrorEnum = "invalid_authentication"
	Ssmgr401ApplicationJSONErrorEnumInvalidAuthorization  Ssmgr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Ssmgr401ApplicationJSONErrorEnum) ToPointer() *Ssmgr401ApplicationJSONErrorEnum {
	return &e
}

func (e *Ssmgr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ssmgr401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr401ApplicationJSONErrorEnum: %v", v)
	}
}

type Ssmgr401ApplicationJSONErrorDescriptionEnum string

const (
	Ssmgr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ssmgr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ssmgr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ssmgr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Ssmgr401ApplicationJSONErrorDescriptionEnum) ToPointer() *Ssmgr401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ssmgr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ssmgr401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ssmgr401ApplicationJSON - Unauthorized access
type Ssmgr401ApplicationJSON struct {
	Error            *Ssmgr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ssmgr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ssmgr400ApplicationJSONErrorEnum string

const (
	Ssmgr400ApplicationJSONErrorEnumMissingParameter Ssmgr400ApplicationJSONErrorEnum = "missing_parameter"
	Ssmgr400ApplicationJSONErrorEnumInvalidParameter Ssmgr400ApplicationJSONErrorEnum = "invalid_parameter"
	Ssmgr400ApplicationJSONErrorEnumInvalidFormat    Ssmgr400ApplicationJSONErrorEnum = "invalid_format"
	Ssmgr400ApplicationJSONErrorEnumInvalidTxnid     Ssmgr400ApplicationJSONErrorEnum = "invalid_txnid"
	Ssmgr400ApplicationJSONErrorEnumInvalidConsentid Ssmgr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Ssmgr400ApplicationJSONErrorEnum) ToPointer() *Ssmgr400ApplicationJSONErrorEnum {
	return &e
}

func (e *Ssmgr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ssmgr400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr400ApplicationJSONErrorEnum: %v", v)
	}
}

type Ssmgr400ApplicationJSONErrorDescriptionEnum string

const (
	Ssmgr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ssmgr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ssmgr400ApplicationJSONErrorDescriptionEnumBadRequest                              Ssmgr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ssmgr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ssmgr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ssmgr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ssmgr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ssmgr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ssmgr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Ssmgr400ApplicationJSONErrorDescriptionEnum) ToPointer() *Ssmgr400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ssmgr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ssmgr400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ssmgr400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ssmgr400ApplicationJSON - Bad request
type Ssmgr400ApplicationJSON struct {
	Error            *Ssmgr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ssmgr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SsmgrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ssmgr400ApplicationJSONObject *Ssmgr400ApplicationJSON
	// Unauthorized access
	Ssmgr401ApplicationJSONObject *Ssmgr401ApplicationJSON
	// No record found
	Ssmgr404ApplicationJSONObject *Ssmgr404ApplicationJSON
	// Internal server error
	Ssmgr500ApplicationJSONObject *Ssmgr500ApplicationJSON
	// Bad gateway
	Ssmgr502ApplicationJSONObject *Ssmgr502ApplicationJSON
	// Service unavailable
	Ssmgr503ApplicationJSONObject *Ssmgr503ApplicationJSON
	// Gateway timeout
	Ssmgr504ApplicationJSONObject *Ssmgr504ApplicationJSON
}
