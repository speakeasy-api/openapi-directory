/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Dependency {
    /**
     * Array of package-url (PURLs) of direct child dependencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependencies")
    public String[] dependencies;
    public Dependency withDependencies(String[] dependencies) {
        this.dependencies = dependencies;
        return this;
    }
    
    /**
     * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;
    public Dependency withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package_url")
    public String packageUrl;
    public Dependency withPackageUrl(String packageUrl) {
        this.packageUrl = packageUrl;
        return this;
    }
    
    /**
     * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationship")
    public DependencyRelationshipEnum relationship;
    public Dependency withRelationship(DependencyRelationshipEnum relationship) {
        this.relationship = relationship;
        return this;
    }
    
    /**
     * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public DependencyScopeEnum scope;
    public Dependency withScope(DependencyScopeEnum scope) {
        this.scope = scope;
        return this;
    }
    
}
