/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
 *
 * @remarks
 *  * `off-topic`
 *  * `too heated`
 *  * `resolved`
 *  * `spam`
 */
export enum IssuesLockRequestBodyLockReasonEnum {
  OffTopic = "off-topic",
  TooHeated = "too heated",
  Resolved = "resolved",
  Spam = "spam",
}

export class IssuesLockRequestBody extends SpeakeasyBase {
  /**
   * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
   *
   * @remarks
   *  * `off-topic`
   *  * `too heated`
   *  * `resolved`
   *  * `spam`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lock_reason" })
  lockReason?: IssuesLockRequestBodyLockReasonEnum;
}

export class IssuesLockRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: IssuesLockRequestBody;

  /**
   * The number that identifies the issue.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=issue_number",
  })
  issueNumber: number;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class IssuesLockResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
