// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProjectCompletePrivateRoleEnum - Role inside this project
type ProjectCompletePrivateRoleEnum string

const (
	ProjectCompletePrivateRoleEnumOwner        ProjectCompletePrivateRoleEnum = "Owner"
	ProjectCompletePrivateRoleEnumCollaborator ProjectCompletePrivateRoleEnum = "Collaborator"
	ProjectCompletePrivateRoleEnumViewer       ProjectCompletePrivateRoleEnum = "Viewer"
)

func (e ProjectCompletePrivateRoleEnum) ToPointer() *ProjectCompletePrivateRoleEnum {
	return &e
}

func (e *ProjectCompletePrivateRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Owner":
		fallthrough
	case "Collaborator":
		fallthrough
	case "Viewer":
		*e = ProjectCompletePrivateRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectCompletePrivateRoleEnum: %v", v)
	}
}

// ProjectCompletePrivateStorageEnum - Project storage type
type ProjectCompletePrivateStorageEnum string

const (
	ProjectCompletePrivateStorageEnumIndividual ProjectCompletePrivateStorageEnum = "individual"
	ProjectCompletePrivateStorageEnumGroup      ProjectCompletePrivateStorageEnum = "group"
)

func (e ProjectCompletePrivateStorageEnum) ToPointer() *ProjectCompletePrivateStorageEnum {
	return &e
}

func (e *ProjectCompletePrivateStorageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "group":
		*e = ProjectCompletePrivateStorageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectCompletePrivateStorageEnum: %v", v)
	}
}

// ProjectCompletePrivate - OK. Project representation
type ProjectCompletePrivate struct {
	// ID of the account owning the project
	AccountID int64 `json:"account_id"`
	// List of project collaborators
	Collaborators []Collaborator `json:"collaborators"`
	// Date when project was created
	CreatedDate string `json:"created_date"`
	// Collection custom fields
	CustomFields []CustomArticleField `json:"custom_fields"`
	// Project description
	Description string `json:"description"`
	// Project public url
	FigshareURL string `json:"figshare_url"`
	// Project funding
	Funding string `json:"funding"`
	// Full Project funding information
	FundingList []FundingInformation `json:"funding_list"`
	// Group of project if any
	GroupID int64 `json:"group_id"`
	// Project id
	ID int64 `json:"id"`
	// Date when project was last modified
	ModifiedDate string `json:"modified_date"`
	// Date when project was published
	PublishedDate string `json:"published_date"`
	// Project quota
	Quota int64 `json:"quota"`
	// Role inside this project
	Role ProjectCompletePrivateRoleEnum `json:"role"`
	// Project storage type
	Storage ProjectCompletePrivateStorageEnum `json:"storage"`
	// Project title
	Title string `json:"title"`
	// Api endpoint
	URL string `json:"url"`
	// Project used quota
	UsedQuota int64 `json:"used_quota"`
	// Project private quota used
	UsedQuotaPrivate int64 `json:"used_quota_private"`
	// Project public quota used
	UsedQuotaPublic int64 `json:"used_quota_public"`
}
