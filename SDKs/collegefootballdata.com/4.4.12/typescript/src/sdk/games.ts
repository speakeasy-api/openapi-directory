/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Games scores and statistics
 */
export class Games {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Advanced box scores
   *
   * @remarks
   * Get advanced box score data
   */
  getAdvancedBoxScore(
    req: operations.GetAdvancedBoxScoreRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAdvancedBoxScoreResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAdvancedBoxScoreRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/game/box/advanced";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAdvancedBoxScoreResponse =
        new operations.GetAdvancedBoxScoreResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.boxScore = utils.objectToClass(httpRes?.data, shared.BoxScore);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Season calendar
   *
   * @remarks
   * Get calendar of weeks by season
   */
  getCalendar(
    req: operations.GetCalendarRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCalendarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCalendarRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/calendar";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCalendarResponse =
        new operations.GetCalendarResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.weeks = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.weeks = utils.objectToClass(
              httpRes?.data,
              shared.Week,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Game media information and schedules
   *
   * @remarks
   * Game media information (TV, radio, etc)
   */
  getGameMedia(
    req: operations.GetGameMediaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGameMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGameMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/games/media";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGameMediaResponse =
        new operations.GetGameMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gameMedias = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.gameMedias = utils.objectToClass(
              httpRes?.data,
              shared.GameMedia,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Game weather information (Patreon only)
   *
   * @remarks
   * Weather information for the hour of kickoff
   */
  getGameWeather(
    req: operations.GetGameWeatherRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGameWeatherResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGameWeatherRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/games/weather";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGameWeatherResponse =
        new operations.GetGameWeatherResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gameWeathers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.gameWeathers = utils.objectToClass(
              httpRes?.data,
              shared.GameWeather,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Games and results
   *
   * @remarks
   * Get game results
   */
  getGames(
    req: operations.GetGamesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGamesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGamesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/games";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGamesResponse = new operations.GetGamesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.games = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.games = utils.objectToClass(
              httpRes?.data,
              shared.Game,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Player game stats
   *
   * @remarks
   * Player stats broken down by game
   */
  getPlayerGameStats(
    req: operations.GetPlayerGameStatsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlayerGameStatsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlayerGameStatsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/games/players";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlayerGameStatsResponse =
        new operations.GetPlayerGameStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGames = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerGames = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGame,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Live game results (Patreon only)
   *
   * @remarks
   * Get live game results
   */
  getScoreboard(
    req: operations.GetScoreboardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetScoreboardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetScoreboardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/scoreboard";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetScoreboardResponse =
        new operations.GetScoreboardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scoreboardGames = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.scoreboardGames = utils.objectToClass(
              httpRes?.data,
              shared.ScoreboardGame,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Team game stats
   *
   * @remarks
   * Team stats broken down by game
   */
  getTeamGameStats(
    req: operations.GetTeamGameStatsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamGameStatsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamGameStatsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/games/teams";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamGameStatsResponse =
        new operations.GetTeamGameStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamGames = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamGames = utils.objectToClass(
              httpRes?.data,
              shared.TeamGame,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Team records
   *
   * @remarks
   * Get team records by year
   */
  getTeamRecords(
    req: operations.GetTeamRecordsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamRecordsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamRecordsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/records";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamRecordsResponse =
        new operations.GetTeamRecordsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamRecords = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamRecords = utils.objectToClass(
              httpRes?.data,
              shared.TeamRecord,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }
}
