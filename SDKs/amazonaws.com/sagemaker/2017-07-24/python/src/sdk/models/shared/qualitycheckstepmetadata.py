"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QualityCheckStepMetadata:
    r"""Container for the metadata for a Quality check step. For more information, see the topic on <a href=\\"https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check\\">QualityCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>."""
    
    baseline_used_for_drift_check_constraints: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BaselineUsedForDriftCheckConstraints'), 'exclude': lambda f: f is None }})  
    baseline_used_for_drift_check_statistics: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BaselineUsedForDriftCheckStatistics'), 'exclude': lambda f: f is None }})  
    calculated_baseline_constraints: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CalculatedBaselineConstraints'), 'exclude': lambda f: f is None }})  
    calculated_baseline_statistics: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CalculatedBaselineStatistics'), 'exclude': lambda f: f is None }})  
    check_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckJobArn'), 'exclude': lambda f: f is None }})  
    check_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckType'), 'exclude': lambda f: f is None }})  
    model_package_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageGroupName'), 'exclude': lambda f: f is None }})  
    register_new_baseline: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegisterNewBaseline'), 'exclude': lambda f: f is None }})  
    skip_check: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SkipCheck'), 'exclude': lambda f: f is None }})  
    violation_report: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ViolationReport'), 'exclude': lambda f: f is None }})  
    