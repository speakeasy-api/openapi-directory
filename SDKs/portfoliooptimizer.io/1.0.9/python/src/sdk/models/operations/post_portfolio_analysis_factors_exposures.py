"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisFactorsExposuresRequestBodyFactors:
    
    factor_returns: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('factorReturns') }})
    r"""factorReturns[t] is the return of the factor at the time t; all the factorReturns arrays must have the same length, equal to the common length of the portfolioReturns arrays"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisFactorsExposuresRequestBodyPortfolios:
    
    portfolio_returns: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioReturns') }})
    r"""portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the common length of the factorReturns arrays"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisFactorsExposuresRequestBody:
    
    portfolios: list[PostPortfolioAnalysisFactorsExposuresRequestBodyPortfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    factors: Optional[list[PostPortfolioAnalysisFactorsExposuresRequestBodyFactors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('factors'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisFactorsExposures200ApplicationJSONPortfolios:
    
    portfolio_alpha: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioAlpha') }})
    r"""The portfolio alpha, which correponds to the portion of the portfolio returns that cannot be explained by the portfolio factor exposures"""  
    portfolio_betas: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioBetas') }})
    r"""The portfolio betas, which correspond to the portfolio factor exposures"""  
    portfolio_r_squared: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioRSquared') }})
    r"""The portfolio R^2, which indicates how much of the variability in the portfolio returns can be explained by the portfolio factor exposures; generally, the higher the R^2 the better the portfolio factor exposures explain the portfolio returns"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisFactorsExposures200ApplicationJSON:
    r"""OK"""
    
    portfolios: list[PostPortfolioAnalysisFactorsExposures200ApplicationJSONPortfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    

@dataclasses.dataclass
class PostPortfolioAnalysisFactorsExposuresResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_analysis_factors_exposures_200_application_json_object: Optional[PostPortfolioAnalysisFactorsExposures200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    