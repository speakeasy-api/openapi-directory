// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PasswordRequirementsPasswordQualityEnum - The required password quality.
type PasswordRequirementsPasswordQualityEnum string

const (
	PasswordRequirementsPasswordQualityEnumPasswordQualityUnspecified PasswordRequirementsPasswordQualityEnum = "PASSWORD_QUALITY_UNSPECIFIED"
	PasswordRequirementsPasswordQualityEnumBiometricWeak              PasswordRequirementsPasswordQualityEnum = "BIOMETRIC_WEAK"
	PasswordRequirementsPasswordQualityEnumSomething                  PasswordRequirementsPasswordQualityEnum = "SOMETHING"
	PasswordRequirementsPasswordQualityEnumNumeric                    PasswordRequirementsPasswordQualityEnum = "NUMERIC"
	PasswordRequirementsPasswordQualityEnumNumericComplex             PasswordRequirementsPasswordQualityEnum = "NUMERIC_COMPLEX"
	PasswordRequirementsPasswordQualityEnumAlphabetic                 PasswordRequirementsPasswordQualityEnum = "ALPHABETIC"
	PasswordRequirementsPasswordQualityEnumAlphanumeric               PasswordRequirementsPasswordQualityEnum = "ALPHANUMERIC"
	PasswordRequirementsPasswordQualityEnumComplex                    PasswordRequirementsPasswordQualityEnum = "COMPLEX"
	PasswordRequirementsPasswordQualityEnumComplexityLow              PasswordRequirementsPasswordQualityEnum = "COMPLEXITY_LOW"
	PasswordRequirementsPasswordQualityEnumComplexityMedium           PasswordRequirementsPasswordQualityEnum = "COMPLEXITY_MEDIUM"
	PasswordRequirementsPasswordQualityEnumComplexityHigh             PasswordRequirementsPasswordQualityEnum = "COMPLEXITY_HIGH"
)

func (e PasswordRequirementsPasswordQualityEnum) ToPointer() *PasswordRequirementsPasswordQualityEnum {
	return &e
}

func (e *PasswordRequirementsPasswordQualityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSWORD_QUALITY_UNSPECIFIED":
		fallthrough
	case "BIOMETRIC_WEAK":
		fallthrough
	case "SOMETHING":
		fallthrough
	case "NUMERIC":
		fallthrough
	case "NUMERIC_COMPLEX":
		fallthrough
	case "ALPHABETIC":
		fallthrough
	case "ALPHANUMERIC":
		fallthrough
	case "COMPLEX":
		fallthrough
	case "COMPLEXITY_LOW":
		fallthrough
	case "COMPLEXITY_MEDIUM":
		fallthrough
	case "COMPLEXITY_HIGH":
		*e = PasswordRequirementsPasswordQualityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordRequirementsPasswordQualityEnum: %v", v)
	}
}

// PasswordRequirementsPasswordScopeEnum - The scope that the password requirement applies to.
type PasswordRequirementsPasswordScopeEnum string

const (
	PasswordRequirementsPasswordScopeEnumScopeUnspecified PasswordRequirementsPasswordScopeEnum = "SCOPE_UNSPECIFIED"
	PasswordRequirementsPasswordScopeEnumScopeDevice      PasswordRequirementsPasswordScopeEnum = "SCOPE_DEVICE"
	PasswordRequirementsPasswordScopeEnumScopeProfile     PasswordRequirementsPasswordScopeEnum = "SCOPE_PROFILE"
)

func (e PasswordRequirementsPasswordScopeEnum) ToPointer() *PasswordRequirementsPasswordScopeEnum {
	return &e
}

func (e *PasswordRequirementsPasswordScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCOPE_UNSPECIFIED":
		fallthrough
	case "SCOPE_DEVICE":
		fallthrough
	case "SCOPE_PROFILE":
		*e = PasswordRequirementsPasswordScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordRequirementsPasswordScopeEnum: %v", v)
	}
}

// PasswordRequirementsRequirePasswordUnlockEnum - The length of time after a device or work profile is unlocked using a strong form of authentication (password, PIN, pattern) that it can be unlocked using any other authentication method (e.g. fingerprint, trust agents, face). After the specified time period elapses, only strong forms of authentication can be used to unlock the device or work profile.
type PasswordRequirementsRequirePasswordUnlockEnum string

const (
	PasswordRequirementsRequirePasswordUnlockEnumRequirePasswordUnlockUnspecified PasswordRequirementsRequirePasswordUnlockEnum = "REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED"
	PasswordRequirementsRequirePasswordUnlockEnumUseDefaultDeviceTimeout          PasswordRequirementsRequirePasswordUnlockEnum = "USE_DEFAULT_DEVICE_TIMEOUT"
	PasswordRequirementsRequirePasswordUnlockEnumRequireEveryDay                  PasswordRequirementsRequirePasswordUnlockEnum = "REQUIRE_EVERY_DAY"
)

func (e PasswordRequirementsRequirePasswordUnlockEnum) ToPointer() *PasswordRequirementsRequirePasswordUnlockEnum {
	return &e
}

func (e *PasswordRequirementsRequirePasswordUnlockEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED":
		fallthrough
	case "USE_DEFAULT_DEVICE_TIMEOUT":
		fallthrough
	case "REQUIRE_EVERY_DAY":
		*e = PasswordRequirementsRequirePasswordUnlockEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordRequirementsRequirePasswordUnlockEnum: %v", v)
	}
}

// PasswordRequirementsUnifiedLockSettingsEnum - Controls whether a unified lock is allowed for the device and the work profile, on devices running Android 9 and above with a work profile. This can be set only if password_scope is set to SCOPE_PROFILE, the policy will be rejected otherwise. If user has not set a separate work lock and this field is set to REQUIRE_SEPARATE_WORK_LOCK, a NonComplianceDetail is reported with nonComplianceReason set to USER_ACTION.
type PasswordRequirementsUnifiedLockSettingsEnum string

const (
	PasswordRequirementsUnifiedLockSettingsEnumUnifiedLockSettingsUnspecified  PasswordRequirementsUnifiedLockSettingsEnum = "UNIFIED_LOCK_SETTINGS_UNSPECIFIED"
	PasswordRequirementsUnifiedLockSettingsEnumAllowUnifiedWorkAndPersonalLock PasswordRequirementsUnifiedLockSettingsEnum = "ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK"
	PasswordRequirementsUnifiedLockSettingsEnumRequireSeparateWorkLock         PasswordRequirementsUnifiedLockSettingsEnum = "REQUIRE_SEPARATE_WORK_LOCK"
)

func (e PasswordRequirementsUnifiedLockSettingsEnum) ToPointer() *PasswordRequirementsUnifiedLockSettingsEnum {
	return &e
}

func (e *PasswordRequirementsUnifiedLockSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNIFIED_LOCK_SETTINGS_UNSPECIFIED":
		fallthrough
	case "ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK":
		fallthrough
	case "REQUIRE_SEPARATE_WORK_LOCK":
		*e = PasswordRequirementsUnifiedLockSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordRequirementsUnifiedLockSettingsEnum: %v", v)
	}
}

// PasswordRequirements - Requirements for the password used to unlock a device.
type PasswordRequirements struct {
	// Number of incorrect device-unlock passwords that can be entered before a device is wiped. A value of 0 means there is no restriction.
	MaximumFailedPasswordsForWipe *int `json:"maximumFailedPasswordsForWipe,omitempty"`
	// Password expiration timeout.
	PasswordExpirationTimeout *string `json:"passwordExpirationTimeout,omitempty"`
	// The length of the password history. After setting this field, the user won't be able to enter a new password that is the same as any password in the history. A value of 0 means there is no restriction.
	PasswordHistoryLength *int `json:"passwordHistoryLength,omitempty"`
	// The minimum allowed password length. A value of 0 means there is no restriction. Only enforced when password_quality is NUMERIC, NUMERIC_COMPLEX, ALPHABETIC, ALPHANUMERIC, or COMPLEX.
	PasswordMinimumLength *int `json:"passwordMinimumLength,omitempty"`
	// Minimum number of letters required in the password. Only enforced when password_quality is COMPLEX.
	PasswordMinimumLetters *int `json:"passwordMinimumLetters,omitempty"`
	// Minimum number of lower case letters required in the password. Only enforced when password_quality is COMPLEX.
	PasswordMinimumLowerCase *int `json:"passwordMinimumLowerCase,omitempty"`
	// Minimum number of non-letter characters (numerical digits or symbols) required in the password. Only enforced when password_quality is COMPLEX.
	PasswordMinimumNonLetter *int `json:"passwordMinimumNonLetter,omitempty"`
	// Minimum number of numerical digits required in the password. Only enforced when password_quality is COMPLEX.
	PasswordMinimumNumeric *int `json:"passwordMinimumNumeric,omitempty"`
	// Minimum number of symbols required in the password. Only enforced when password_quality is COMPLEX.
	PasswordMinimumSymbols *int `json:"passwordMinimumSymbols,omitempty"`
	// Minimum number of upper case letters required in the password. Only enforced when password_quality is COMPLEX.
	PasswordMinimumUpperCase *int `json:"passwordMinimumUpperCase,omitempty"`
	// The required password quality.
	PasswordQuality *PasswordRequirementsPasswordQualityEnum `json:"passwordQuality,omitempty"`
	// The scope that the password requirement applies to.
	PasswordScope *PasswordRequirementsPasswordScopeEnum `json:"passwordScope,omitempty"`
	// The length of time after a device or work profile is unlocked using a strong form of authentication (password, PIN, pattern) that it can be unlocked using any other authentication method (e.g. fingerprint, trust agents, face). After the specified time period elapses, only strong forms of authentication can be used to unlock the device or work profile.
	RequirePasswordUnlock *PasswordRequirementsRequirePasswordUnlockEnum `json:"requirePasswordUnlock,omitempty"`
	// Controls whether a unified lock is allowed for the device and the work profile, on devices running Android 9 and above with a work profile. This can be set only if password_scope is set to SCOPE_PROFILE, the policy will be rejected otherwise. If user has not set a separate work lock and this field is set to REQUIRE_SEPARATE_WORK_LOCK, a NonComplianceDetail is reported with nonComplianceReason set to USER_ACTION.
	UnifiedLockSettings *PasswordRequirementsUnifiedLockSettingsEnum `json:"unifiedLockSettings,omitempty"`
}
