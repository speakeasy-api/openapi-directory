"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class MeetingPollUpdateSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class MeetingPollUpdatePollQuestionsTypeEnum(str, Enum):
    r"""Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice"""
    SINGLE = 'single'
    MULTIPLE = 'multiple'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingPollUpdatePollQuestions:
    
    answers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answers'), 'exclude': lambda f: f is None }})
    r"""Answers to the questions"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Question to be asked to the attendees."""  
    type: Optional[MeetingPollUpdatePollQuestionsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingPollUpdatePoll:
    r"""Poll"""
    
    questions: Optional[list[MeetingPollUpdatePollQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'questions', 'json': True }})
    r"""Array of Polls"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'title' }})
    r"""Title for the poll."""  
    

@dataclasses.dataclass
class MeetingPollUpdateRequest:
    
    meeting_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID in **long** format. The data type of this field is \\"long\\"(represented as int64 in JSON).
    
    While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
    """  
    poll_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'pollId', 'style': 'simple', 'explode': False }})
    r"""The poll ID"""  
    request_body: MeetingPollUpdatePoll = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Meeting Poll"""  
    

@dataclasses.dataclass
class MeetingPollUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    