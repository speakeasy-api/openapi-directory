// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchChargeStationVariableRequestBodyVariableEnum string

const (
	PatchChargeStationVariableRequestBodyVariableEnumMeterValueSampleInterval        PatchChargeStationVariableRequestBodyVariableEnum = "MeterValueSampleInterval"
	PatchChargeStationVariableRequestBodyVariableEnumHeartbeatInterval               PatchChargeStationVariableRequestBodyVariableEnum = "HeartbeatInterval"
	PatchChargeStationVariableRequestBodyVariableEnumConnectionTimeOut               PatchChargeStationVariableRequestBodyVariableEnum = "ConnectionTimeOut"
	PatchChargeStationVariableRequestBodyVariableEnumWebSocketPingInterval           PatchChargeStationVariableRequestBodyVariableEnum = "WebSocketPingInterval"
	PatchChargeStationVariableRequestBodyVariableEnumTransactionMessageRetryInterval PatchChargeStationVariableRequestBodyVariableEnum = "TransactionMessageRetryInterval"
	PatchChargeStationVariableRequestBodyVariableEnumTransactionMessageAttempts      PatchChargeStationVariableRequestBodyVariableEnum = "TransactionMessageAttempts"
)

func (e *PatchChargeStationVariableRequestBodyVariableEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MeterValueSampleInterval":
		fallthrough
	case "HeartbeatInterval":
		fallthrough
	case "ConnectionTimeOut":
		fallthrough
	case "WebSocketPingInterval":
		fallthrough
	case "TransactionMessageRetryInterval":
		fallthrough
	case "TransactionMessageAttempts":
		*e = PatchChargeStationVariableRequestBodyVariableEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchChargeStationVariableRequestBodyVariableEnum: %s", s)
	}
}

// PatchChargeStationVariableRequestBody - Charge Station Variable to set
type PatchChargeStationVariableRequestBody struct {
	Value    *string                                            `json:"value,omitempty"`
	Variable *PatchChargeStationVariableRequestBodyVariableEnum `json:"variable,omitempty"`
}

type PatchChargeStationVariableRequest struct {
	// Charge Station Variable to set
	RequestBody PatchChargeStationVariableRequestBody `request:"mediaType=application/json"`
	// ID of charge station
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// PatchChargeStationVariable201ApplicationJSON - A successful response
type PatchChargeStationVariable201ApplicationJSON struct {
	Message *string                `json:"message,omitempty"`
	Ok      *bool                  `json:"ok,omitempty"`
	Result  map[string]interface{} `json:"result,omitempty"`
}

type PatchChargeStationVariableResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A successful response
	PatchChargeStationVariable201ApplicationJSONObject *PatchChargeStationVariable201ApplicationJSON
}
