// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type GeoFacet2Enum string

const (
	GeoFacet2EnumUnknown GeoFacet2Enum = ""
)

func (e *GeoFacet2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GeoFacet2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GeoFacet2Enum: %s", s)
	}
}

type GeoFacet1Enum string

const (
	GeoFacet1EnumUnknown GeoFacet1Enum = ""
)

func (e *GeoFacet1Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GeoFacet1Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GeoFacet1Enum: %s", s)
	}
}

type GeoFacetType string

const (
	GeoFacetTypeGeoFacet1Enum GeoFacetType = "GeoFacet_1_Enum"
	GeoFacetTypeGeoFacet2Enum GeoFacetType = "GeoFacet_2_Enum"
)

type GeoFacet struct {
	GeoFacet1Enum *GeoFacet1Enum
	GeoFacet2Enum *GeoFacet2Enum

	Type GeoFacetType
}

func CreateGeoFacetGeoFacet1Enum(geoFacet1Enum GeoFacet1Enum) GeoFacet {
	typ := GeoFacetTypeGeoFacet1Enum

	return GeoFacet{
		GeoFacet1Enum: &geoFacet1Enum,
		Type:          typ,
	}
}

func CreateGeoFacetGeoFacet2Enum(geoFacet2Enum GeoFacet2Enum) GeoFacet {
	typ := GeoFacetTypeGeoFacet2Enum

	return GeoFacet{
		GeoFacet2Enum: &geoFacet2Enum,
		Type:          typ,
	}
}

func (u *GeoFacet) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	geoFacet1Enum := new(GeoFacet1Enum)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&geoFacet1Enum); err == nil {
		u.GeoFacet1Enum = geoFacet1Enum
		u.Type = GeoFacetTypeGeoFacet1Enum
		return nil
	}

	geoFacet2Enum := new(GeoFacet2Enum)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&geoFacet2Enum); err == nil {
		u.GeoFacet2Enum = geoFacet2Enum
		u.Type = GeoFacetTypeGeoFacet2Enum
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GeoFacet) MarshalJSON() ([]byte, error) {
	if u.GeoFacet1Enum != nil {
		return json.Marshal(u.GeoFacet1Enum)
	}

	if u.GeoFacet2Enum != nil {
		return json.Marshal(u.GeoFacet2Enum)
	}

	return nil, nil
}
