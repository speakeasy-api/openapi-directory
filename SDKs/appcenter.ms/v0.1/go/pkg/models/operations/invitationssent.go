// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type InvitationsSentDefaultApplicationJSONErrorCodeEnum string

const (
	InvitationsSentDefaultApplicationJSONErrorCodeEnumBadRequest          InvitationsSentDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	InvitationsSentDefaultApplicationJSONErrorCodeEnumConflict            InvitationsSentDefaultApplicationJSONErrorCodeEnum = "Conflict"
	InvitationsSentDefaultApplicationJSONErrorCodeEnumNotAcceptable       InvitationsSentDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	InvitationsSentDefaultApplicationJSONErrorCodeEnumNotFound            InvitationsSentDefaultApplicationJSONErrorCodeEnum = "NotFound"
	InvitationsSentDefaultApplicationJSONErrorCodeEnumInternalServerError InvitationsSentDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	InvitationsSentDefaultApplicationJSONErrorCodeEnumUnauthorized        InvitationsSentDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	InvitationsSentDefaultApplicationJSONErrorCodeEnumTooManyRequests     InvitationsSentDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *InvitationsSentDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = InvitationsSentDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationsSentDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type InvitationsSentDefaultApplicationJSONError struct {
	Code    InvitationsSentDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                             `json:"message"`
}

// InvitationsSentDefaultApplicationJSON - Error
type InvitationsSentDefaultApplicationJSON struct {
	Error InvitationsSentDefaultApplicationJSONError `json:"error"`
}

type InvitationsSent200ApplicationJSONAppAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type InvitationsSent200ApplicationJSONAppMemberPermissionsEnum string

const (
	InvitationsSent200ApplicationJSONAppMemberPermissionsEnumManager   InvitationsSent200ApplicationJSONAppMemberPermissionsEnum = "manager"
	InvitationsSent200ApplicationJSONAppMemberPermissionsEnumDeveloper InvitationsSent200ApplicationJSONAppMemberPermissionsEnum = "developer"
	InvitationsSent200ApplicationJSONAppMemberPermissionsEnumViewer    InvitationsSent200ApplicationJSONAppMemberPermissionsEnum = "viewer"
	InvitationsSent200ApplicationJSONAppMemberPermissionsEnumTester    InvitationsSent200ApplicationJSONAppMemberPermissionsEnum = "tester"
)

func (e *InvitationsSent200ApplicationJSONAppMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = InvitationsSent200ApplicationJSONAppMemberPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationsSent200ApplicationJSONAppMemberPermissionsEnum: %s", s)
	}
}

// InvitationsSent200ApplicationJSONAppOriginEnum - The creation origin of this app
type InvitationsSent200ApplicationJSONAppOriginEnum string

const (
	InvitationsSent200ApplicationJSONAppOriginEnumAppcenter InvitationsSent200ApplicationJSONAppOriginEnum = "appcenter"
	InvitationsSent200ApplicationJSONAppOriginEnumHockeyapp InvitationsSent200ApplicationJSONAppOriginEnum = "hockeyapp"
	InvitationsSent200ApplicationJSONAppOriginEnumCodepush  InvitationsSent200ApplicationJSONAppOriginEnum = "codepush"
)

func (e *InvitationsSent200ApplicationJSONAppOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = InvitationsSent200ApplicationJSONAppOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationsSent200ApplicationJSONAppOriginEnum: %s", s)
	}
}

// InvitationsSent200ApplicationJSONAppOsEnum - The OS the app will be running on
type InvitationsSent200ApplicationJSONAppOsEnum string

const (
	InvitationsSent200ApplicationJSONAppOsEnumAndroid InvitationsSent200ApplicationJSONAppOsEnum = "Android"
	InvitationsSent200ApplicationJSONAppOsEnumIOs     InvitationsSent200ApplicationJSONAppOsEnum = "iOS"
	InvitationsSent200ApplicationJSONAppOsEnumMacOs   InvitationsSent200ApplicationJSONAppOsEnum = "macOS"
	InvitationsSent200ApplicationJSONAppOsEnumTizen   InvitationsSent200ApplicationJSONAppOsEnum = "Tizen"
	InvitationsSent200ApplicationJSONAppOsEnumTvOs    InvitationsSent200ApplicationJSONAppOsEnum = "tvOS"
	InvitationsSent200ApplicationJSONAppOsEnumWindows InvitationsSent200ApplicationJSONAppOsEnum = "Windows"
	InvitationsSent200ApplicationJSONAppOsEnumLinux   InvitationsSent200ApplicationJSONAppOsEnum = "Linux"
	InvitationsSent200ApplicationJSONAppOsEnumCustom  InvitationsSent200ApplicationJSONAppOsEnum = "Custom"
)

func (e *InvitationsSent200ApplicationJSONAppOsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = InvitationsSent200ApplicationJSONAppOsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationsSent200ApplicationJSONAppOsEnum: %s", s)
	}
}

// InvitationsSent200ApplicationJSONAppOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type InvitationsSent200ApplicationJSONAppOwnerTypeEnum string

const (
	InvitationsSent200ApplicationJSONAppOwnerTypeEnumOrg  InvitationsSent200ApplicationJSONAppOwnerTypeEnum = "org"
	InvitationsSent200ApplicationJSONAppOwnerTypeEnumUser InvitationsSent200ApplicationJSONAppOwnerTypeEnum = "user"
)

func (e *InvitationsSent200ApplicationJSONAppOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "org":
		fallthrough
	case "user":
		*e = InvitationsSent200ApplicationJSONAppOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationsSent200ApplicationJSONAppOwnerTypeEnum: %s", s)
	}
}

// InvitationsSent200ApplicationJSONAppOwner - The information about the app's owner
type InvitationsSent200ApplicationJSONAppOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type InvitationsSent200ApplicationJSONAppOwnerTypeEnum `json:"type"`
}

// InvitationsSent200ApplicationJSONAppPlatformEnum - The platform of the app
type InvitationsSent200ApplicationJSONAppPlatformEnum string

const (
	InvitationsSent200ApplicationJSONAppPlatformEnumJava            InvitationsSent200ApplicationJSONAppPlatformEnum = "Java"
	InvitationsSent200ApplicationJSONAppPlatformEnumObjectiveCSwift InvitationsSent200ApplicationJSONAppPlatformEnum = "Objective-C-Swift"
	InvitationsSent200ApplicationJSONAppPlatformEnumUwp             InvitationsSent200ApplicationJSONAppPlatformEnum = "UWP"
	InvitationsSent200ApplicationJSONAppPlatformEnumCordova         InvitationsSent200ApplicationJSONAppPlatformEnum = "Cordova"
	InvitationsSent200ApplicationJSONAppPlatformEnumReactNative     InvitationsSent200ApplicationJSONAppPlatformEnum = "React-Native"
	InvitationsSent200ApplicationJSONAppPlatformEnumUnity           InvitationsSent200ApplicationJSONAppPlatformEnum = "Unity"
	InvitationsSent200ApplicationJSONAppPlatformEnumElectron        InvitationsSent200ApplicationJSONAppPlatformEnum = "Electron"
	InvitationsSent200ApplicationJSONAppPlatformEnumXamarin         InvitationsSent200ApplicationJSONAppPlatformEnum = "Xamarin"
	InvitationsSent200ApplicationJSONAppPlatformEnumWpf             InvitationsSent200ApplicationJSONAppPlatformEnum = "WPF"
	InvitationsSent200ApplicationJSONAppPlatformEnumWinForms        InvitationsSent200ApplicationJSONAppPlatformEnum = "WinForms"
	InvitationsSent200ApplicationJSONAppPlatformEnumUnknown         InvitationsSent200ApplicationJSONAppPlatformEnum = "Unknown"
	InvitationsSent200ApplicationJSONAppPlatformEnumCustom          InvitationsSent200ApplicationJSONAppPlatformEnum = "Custom"
)

func (e *InvitationsSent200ApplicationJSONAppPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = InvitationsSent200ApplicationJSONAppPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationsSent200ApplicationJSONAppPlatformEnum: %s", s)
	}
}

type InvitationsSent200ApplicationJSONApp struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                                 `json:"app_secret"`
	AzureSubscription *InvitationsSent200ApplicationJSONAppAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []InvitationsSent200ApplicationJSONAppMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin InvitationsSent200ApplicationJSONAppOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os InvitationsSent200ApplicationJSONAppOsEnum `json:"os"`
	// The information about the app's owner
	Owner InvitationsSent200ApplicationJSONAppOwner `json:"owner"`
	// The platform of the app
	Platform InvitationsSent200ApplicationJSONAppPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// InvitationsSent200ApplicationJSONOrganizationOriginEnum - The creation origin of this organization
type InvitationsSent200ApplicationJSONOrganizationOriginEnum string

const (
	InvitationsSent200ApplicationJSONOrganizationOriginEnumAppcenter InvitationsSent200ApplicationJSONOrganizationOriginEnum = "appcenter"
	InvitationsSent200ApplicationJSONOrganizationOriginEnumHockeyapp InvitationsSent200ApplicationJSONOrganizationOriginEnum = "hockeyapp"
)

func (e *InvitationsSent200ApplicationJSONOrganizationOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		*e = InvitationsSent200ApplicationJSONOrganizationOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationsSent200ApplicationJSONOrganizationOriginEnum: %s", s)
	}
}

type InvitationsSent200ApplicationJSONOrganization struct {
	// The URL to a user-uploaded Avatar image
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The creation date of this organization
	CreatedAt string `json:"created_at"`
	// The display name of the organization
	DisplayName string `json:"display_name"`
	// The internal unique id (UUID) of the organization.
	ID string `json:"id"`
	// The slug name of the organization
	Name string `json:"name"`
	// The creation origin of this organization
	Origin InvitationsSent200ApplicationJSONOrganizationOriginEnum `json:"origin"`
	// The date the organization was last updated at
	UpdatedAt string `json:"updated_at"`
}

type InvitationsSent200ApplicationJSON struct {
	App *InvitationsSent200ApplicationJSONApp `json:"app,omitempty"`
	// The id of the invitation
	InvitationID string                                         `json:"invitation_id"`
	Organization *InvitationsSent200ApplicationJSONOrganization `json:"organization,omitempty"`
}

type InvitationsSentResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	InvitationsSent200ApplicationJSONObjects []InvitationsSent200ApplicationJSON
	// Error
	InvitationsSentDefaultApplicationJSONObject *InvitationsSentDefaultApplicationJSON
}
