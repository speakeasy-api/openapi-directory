/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FieldValue } from "./fieldvalue";
import { Expose, Type } from "class-transformer";

/**
 * A filter for fields. Only one value can be provided.
 */
export class FieldFilter extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "contains" })
  @Type(() => FieldValue)
  contains?: FieldValue;

  @SpeakeasyMetadata()
  @Expose({ name: "equalTo" })
  @Type(() => FieldValue)
  equalTo?: FieldValue;

  @SpeakeasyMetadata()
  @Expose({ name: "greaterThan" })
  @Type(() => FieldValue)
  greaterThan?: FieldValue;

  @SpeakeasyMetadata()
  @Expose({ name: "greaterThanOrEqualTo" })
  @Type(() => FieldValue)
  greaterThanOrEqualTo?: FieldValue;

  @SpeakeasyMetadata()
  @Expose({ name: "lessThan" })
  @Type(() => FieldValue)
  lessThan?: FieldValue;

  @SpeakeasyMetadata()
  @Expose({ name: "lessThanOrEqualTo" })
  @Type(() => FieldValue)
  lessThanOrEqualTo?: FieldValue;
}
