// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CostMatrixDataInfo - Additional information for your request
type CostMatrixDataInfo struct {
	Copyrights []string `json:"copyrights,omitempty"`
	Took       *float64 `json:"took,omitempty"`
}

// CostMatrixData - JSON data of matrix response
type CostMatrixData struct {
	Distances [][]float64 `json:"distances,omitempty"`
	// Additional information for your request
	Info  *CostMatrixDataInfo `json:"info,omitempty"`
	Times [][]int64           `json:"times,omitempty"`
}

// CostMatrixTypeEnum - type of cost matrix, currently default or google are supported
type CostMatrixTypeEnum string

const (
	CostMatrixTypeEnumDefault CostMatrixTypeEnum = "default"
	CostMatrixTypeEnumGoogle  CostMatrixTypeEnum = "google"
)

func (e CostMatrixTypeEnum) ToPointer() *CostMatrixTypeEnum {
	return &e
}

func (e *CostMatrixTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "google":
		*e = CostMatrixTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CostMatrixTypeEnum: %v", v)
	}
}

type CostMatrix struct {
	// JSON data of matrix response
	Data        *CostMatrixData `json:"data,omitempty"`
	LocationIds []string        `json:"location_ids,omitempty"`
	// vehicle profile or empty if catch all fallback
	Profile *string `json:"profile,omitempty"`
	// type of cost matrix, currently default or google are supported
	Type *CostMatrixTypeEnum `json:"type,omitempty"`
}
