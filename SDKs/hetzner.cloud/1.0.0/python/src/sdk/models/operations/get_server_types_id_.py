"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetServerTypesIDRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of Server Type"""  
    
class GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum(str, Enum):
    r"""Type of cpu"""
    SHARED = 'shared'
    DEDICATED = 'dedicated'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetServerTypesID200ApplicationJSONServerTypePricesPriceHourly:
    r"""Hourly costs for a Server type in this Location"""
    
    gross: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gross') }})
    r"""Price with VAT added"""  
    net: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net') }})
    r"""Price without VAT"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetServerTypesID200ApplicationJSONServerTypePricesPriceMonthly:
    r"""Monthly costs for a Server type in this Location"""
    
    gross: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gross') }})
    r"""Price with VAT added"""  
    net: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net') }})
    r"""Price without VAT"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetServerTypesID200ApplicationJSONServerTypePrices:
    
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""Name of the Location the price is for"""  
    price_hourly: GetServerTypesID200ApplicationJSONServerTypePricesPriceHourly = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price_hourly') }})
    r"""Hourly costs for a Server type in this Location"""  
    price_monthly: GetServerTypesID200ApplicationJSONServerTypePricesPriceMonthly = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price_monthly') }})
    r"""Monthly costs for a Server type in this Location"""  
    
class GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum(str, Enum):
    r"""Type of Server boot drive. Local has higher speed. Network has better availability."""
    LOCAL = 'local'
    NETWORK = 'network'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetServerTypesID200ApplicationJSONServerType:
    
    cores: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cores') }})
    r"""Number of cpu cores a Server of this type will have"""  
    cpu_type: GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpu_type') }})
    r"""Type of cpu"""  
    deprecated: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deprecated') }})
    r"""True if Server type is deprecated"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Server type"""  
    disk: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disk') }})
    r"""Disk size a Server of this type will have in GB"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Server type"""  
    memory: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory') }})
    r"""Memory a Server of this type will have in GB"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Server type"""  
    prices: list[GetServerTypesID200ApplicationJSONServerTypePrices] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prices') }})
    r"""Prices in different Locations"""  
    storage_type: GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage_type') }})
    r"""Type of Server boot drive. Local has higher speed. Network has better availability."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetServerTypesID200ApplicationJSON:
    r"""The `server_type` key in the reply contains a Server type object with this structure"""
    
    server_type: GetServerTypesID200ApplicationJSONServerType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server_type') }})  
    

@dataclasses.dataclass
class GetServerTypesIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_server_types_id_200_application_json_object: Optional[GetServerTypesID200ApplicationJSON] = dataclasses.field(default=None)
    r"""The `server_type` key in the reply contains a Server type object with this structure"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    