/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DataTransfer - A Transfer resource represents the transfer of the ownership of user data between users.
 */
public class DataTransfer {
    /**
     * The list of per-application data transfer resources. It contains details of the applications associated with this transfer resource, and also specifies the applications for which data transfer has to be done at the time of the transfer resource creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationDataTransfers")
    public ApplicationDataTransfer[] applicationDataTransfers;
    public DataTransfer withApplicationDataTransfers(ApplicationDataTransfer[] applicationDataTransfers) {
        this.applicationDataTransfers = applicationDataTransfers;
        return this;
    }
    
    /**
     * ETag of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public DataTransfer withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Read-only. The transfer's ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public DataTransfer withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Identifies the resource as a DataTransfer request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public DataTransfer withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * ID of the user to whom the data is being transferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newOwnerUserId")
    public String newOwnerUserId;
    public DataTransfer withNewOwnerUserId(String newOwnerUserId) {
        this.newOwnerUserId = newOwnerUserId;
        return this;
    }
    
    /**
     * ID of the user whose data is being transferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oldOwnerUserId")
    public String oldOwnerUserId;
    public DataTransfer withOldOwnerUserId(String oldOwnerUserId) {
        this.oldOwnerUserId = oldOwnerUserId;
        return this;
    }
    
    /**
     * Read-only. Overall transfer status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overallTransferStatusCode")
    public String overallTransferStatusCode;
    public DataTransfer withOverallTransferStatusCode(String overallTransferStatusCode) {
        this.overallTransferStatusCode = overallTransferStatusCode;
        return this;
    }
    
    /**
     * Read-only. The time at which the data transfer was requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("requestTime")
    public OffsetDateTime requestTime;
    public DataTransfer withRequestTime(OffsetDateTime requestTime) {
        this.requestTime = requestTime;
        return this;
    }
    
}
