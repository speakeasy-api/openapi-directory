"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Precinct:
    
    administration_region_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('administrationRegionId'), 'exclude': lambda f: f is None }})
    r"""ID of the AdministrationRegion message for this precinct. Corresponds to LocalityId xml tag."""  
    contest_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contestId'), 'exclude': lambda f: f is None }})
    r"""ID(s) of the Contest message(s) for this precinct."""  
    dataset_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datasetId'), 'exclude': lambda f: f is None }})
    r"""Required. Dataset ID. What datasets our Precincts come from."""  
    early_vote_site_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earlyVoteSiteId'), 'exclude': lambda f: f is None }})
    r"""ID(s) of the PollingLocation message(s) for this precinct."""  
    electoral_district_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electoralDistrictId'), 'exclude': lambda f: f is None }})
    r"""ID(s) of the ElectoralDistrict message(s) for this precinct."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required. A unique identifier for this precinct."""  
    mail_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailOnly'), 'exclude': lambda f: f is None }})
    r"""Specifies if the precinct runs mail-only elections."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. The name of the precinct."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The number of the precinct."""  
    ocd_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ocdId'), 'exclude': lambda f: f is None }})
    r"""Encouraged. The OCD ID of the precinct"""  
    polling_location_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pollingLocationId'), 'exclude': lambda f: f is None }})
    r"""ID(s) of the PollingLocation message(s) for this precinct."""  
    spatial_boundary_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spatialBoundaryId'), 'exclude': lambda f: f is None }})
    r"""ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a geometrical boundary of the precinct."""  
    split_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splitName'), 'exclude': lambda f: f is None }})
    r"""If present, this proto corresponds to one portion of split precinct. Other portions of this precinct are guaranteed to have the same `name`. If not present, this proto represents a full precicnt."""  
    ward: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ward'), 'exclude': lambda f: f is None }})
    r"""Specifies the ward the precinct is contained within."""  
    