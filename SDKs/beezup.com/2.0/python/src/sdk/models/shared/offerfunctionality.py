"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OfferFunctionality:
    
    functionality_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functionalityCode') }})
    r"""The functionality code"""  
    unlimited: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlimited') }})
    r"""Is this feature is unlimited for this offer?"""  
    max_value_integer: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxValueInteger'), 'exclude': lambda f: f is None }})
    r"""The max value in integer for this feature in this offer"""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""A description text of this feature"""  
    