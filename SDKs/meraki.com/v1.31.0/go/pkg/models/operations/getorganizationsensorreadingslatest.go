// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationSensorReadingsLatestPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

type GetOrganizationSensorReadingsLatestQueryParams struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	Metrics []string `queryParam:"style=form,explode=false,name=metrics"`
	// Optional parameter to filter readings by network.
	NetworkIds []string `queryParam:"style=form,explode=false,name=networkIds"`
	// The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// Optional parameter to filter readings by sensor.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
}

type GetOrganizationSensorReadingsLatestRequest struct {
	PathParams  GetOrganizationSensorReadingsLatestPathParams
	QueryParams GetOrganizationSensorReadingsLatestQueryParams
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONNetwork - Network to which the sensor belongs.
type GetOrganizationSensorReadingsLatest200ApplicationJSONNetwork struct {
	// ID of the network.
	ID *string `json:"id,omitempty"`
	// Name of the network.
	Name *string `json:"name,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsBattery - Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsBattery struct {
	// Remaining battery life.
	Percentage *int64 `json:"percentage,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum - Type of button press that occurred.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum string

const (
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnumLong  GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum = "long"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnumShort GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum = "short"
)

func (e *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "long":
		fallthrough
	case "short":
		*e = GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum: %s", s)
	}
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButton - Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButton struct {
	// Type of button press that occurred.
	PressType *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum `json:"pressType,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsDoor - Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsDoor struct {
	// True if the door is open.
	Open *bool `json:"open,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsHumidity - Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsHumidity struct {
	// Humidity reading in %RH.
	RelativePercentage *int64 `json:"relativePercentage,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsIndoorAirQuality - Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsIndoorAirQuality struct {
	// Indoor air quality score between 0 and 100.
	Score *int64 `json:"score,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum - Type of sensor reading.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum string

const (
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumBattery          GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "battery"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumButton           GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "button"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumDoor             GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "door"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumHumidity         GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "humidity"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumIndoorAirQuality GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "indoorAirQuality"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumNoise            GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "noise"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumPm25             GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "pm25"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumTemperature      GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "temperature"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumTvoc             GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "tvoc"
	GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnumWater            GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum = "water"
)

func (e *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "battery":
		fallthrough
	case "button":
		fallthrough
	case "door":
		fallthrough
	case "humidity":
		fallthrough
	case "indoorAirQuality":
		fallthrough
	case "noise":
		fallthrough
	case "pm25":
		fallthrough
	case "temperature":
		fallthrough
	case "tvoc":
		fallthrough
	case "water":
		*e = GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum: %s", s)
	}
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoiseAmbient - Ambient noise reading.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoiseAmbient struct {
	// Ambient noise reading in adjusted decibels.
	Level *int64 `json:"level,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoise - Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoise struct {
	// Ambient noise reading.
	Ambient *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoiseAmbient `json:"ambient,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsPm25 - Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsPm25 struct {
	// PM2.5 reading in micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTemperature - Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTemperature struct {
	// Temperature reading in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
	// Temperature reading in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTvoc - Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTvoc struct {
	// TVOC reading in micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
}

// GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsWater - Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
type GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsWater struct {
	// True if water is detected.
	Present *bool `json:"present,omitempty"`
}

type GetOrganizationSensorReadingsLatest200ApplicationJSONReadings struct {
	// Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
	Battery *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsBattery `json:"battery,omitempty"`
	// Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
	Button *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButton `json:"button,omitempty"`
	// Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
	Door *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsDoor `json:"door,omitempty"`
	// Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
	Humidity *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsHumidity `json:"humidity,omitempty"`
	// Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
	IndoorAirQuality *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsIndoorAirQuality `json:"indoorAirQuality,omitempty"`
	// Type of sensor reading.
	Metric *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum `json:"metric,omitempty"`
	// Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
	Noise *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoise `json:"noise,omitempty"`
	// Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
	Pm25 *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsPm25 `json:"pm25,omitempty"`
	// Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
	Temperature *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTemperature `json:"temperature,omitempty"`
	// Time at which the reading occurred, in ISO8601 format.
	Ts *string `json:"ts,omitempty"`
	// Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
	Tvoc *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTvoc `json:"tvoc,omitempty"`
	// Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
	Water *GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsWater `json:"water,omitempty"`
}

type GetOrganizationSensorReadingsLatest200ApplicationJSON struct {
	// Network to which the sensor belongs.
	Network *GetOrganizationSensorReadingsLatest200ApplicationJSONNetwork `json:"network,omitempty"`
	// Array of latest readings from the sensor. Each object represents a single reading for a single metric.
	Readings []GetOrganizationSensorReadingsLatest200ApplicationJSONReadings `json:"readings,omitempty"`
	// Serial number of the sensor that took the readings.
	Serial *string `json:"serial,omitempty"`
}

type GetOrganizationSensorReadingsLatestResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationSensorReadingsLatest200ApplicationJSONObjects []GetOrganizationSensorReadingsLatest200ApplicationJSON
}
