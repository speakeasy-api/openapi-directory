/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * This contains requests related to relations. 
 * 
 * Relations can be of the following types: 
 * - `contracttest`
 * - `integrationtest`
 * - `documentation`
 * - `testsuite`
 * - `environment`
 * - `mock`
 * - `monitor`
 */
public class Relations {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Relations(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Create relations
     * This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. 
     * 
     * &lt;table&gt;
     *   &lt;tr&gt;
     *     &lt;th&gt;Relation&lt;/th&gt;
     *     &lt;th&gt;Entity ID type&lt;/th&gt;
     *   &lt;tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;contracttest&lt;/td&gt;
     *     &lt;td&gt;Collection UIDs&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;integrationtest&lt;/td&gt;
     *     &lt;td&gt;Collection UIDs&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;documentation&lt;/td&gt;
     *     &lt;td&gt;Collection UIDs&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;testsuite&lt;/td&gt;
     *     &lt;td&gt;Collection UIDs&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;environment&lt;/td&gt;
     *     &lt;td&gt;Environment UIDs&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;mock&lt;/td&gt;
     *     &lt;td&gt;Mock IDs&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;monitor&lt;/td&gt;
     *     &lt;td&gt;Monitor IDs&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateRelationsResponse createRelations(org.openapis.openapi.models.operations.CreateRelationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateRelationsPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/relations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateRelationsResponse res = new org.openapis.openapi.models.operations.CreateRelationsResponse() {{
            createRelations200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateRelations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateRelations200ApplicationJSON.class);
                res.createRelations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get contract test relations
     * This call fetches all the relations by type which are linked to the specified API version along with their details.
     * 
     * The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetContractTestRelationsResponse getContractTestRelations(org.openapis.openapi.models.operations.GetContractTestRelationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetContractTestRelationsPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/contracttest", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetContractTestRelationsResponse res = new org.openapis.openapi.models.operations.GetContractTestRelationsResponse() {{
            getContractTestRelations200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetContractTestRelations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetContractTestRelations200ApplicationJSON.class);
                res.getContractTestRelations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get  documentation relations
     * This call fetches all the relations by type which are linked to the specified API version along with their details.
     * 
     * The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDocumentationRelationsResponse getDocumentationRelations(org.openapis.openapi.models.operations.GetDocumentationRelationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDocumentationRelationsPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/documentation", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDocumentationRelationsResponse res = new org.openapis.openapi.models.operations.GetDocumentationRelationsResponse() {{
            getDocumentationRelations200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetDocumentationRelations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetDocumentationRelations200ApplicationJSON.class);
                res.getDocumentationRelations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get environment relations
     * This call fetches all the relations by type which are linked to the specified API version along with their details.
     * 
     * The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetEnvironmentRelationsResponse getEnvironmentRelations(org.openapis.openapi.models.operations.GetEnvironmentRelationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetEnvironmentRelationsPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/environment", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetEnvironmentRelationsResponse res = new org.openapis.openapi.models.operations.GetEnvironmentRelationsResponse() {{
            getEnvironmentRelations200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetEnvironmentRelations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetEnvironmentRelations200ApplicationJSON.class);
                res.getEnvironmentRelations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get integration test relations
     * This call fetches all the relations by type which are linked to the specified API version along with their details.
     * 
     * The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetIntegrationTestRelationsResponse getIntegrationTestRelations(org.openapis.openapi.models.operations.GetIntegrationTestRelationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetIntegrationTestRelationsPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/integrationtest", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetIntegrationTestRelationsResponse res = new org.openapis.openapi.models.operations.GetIntegrationTestRelationsResponse() {{
            getIntegrationTestRelations200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationTestRelations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationTestRelations200ApplicationJSON.class);
                res.getIntegrationTestRelations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get linked relations
     * This call fetches all the relations which are linked to the specified API version along with their details.
     * 
     * The response will contain a `relations` object which lists all the relation types which are linked to the API version. Each of the relation type will be an object which details the relations of this type. 
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetLinkedRelationsResponse getLinkedRelations(org.openapis.openapi.models.operations.GetLinkedRelationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetLinkedRelationsPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/relations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetLinkedRelationsResponse res = new org.openapis.openapi.models.operations.GetLinkedRelationsResponse() {{
            getLinkedRelations200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetLinkedRelations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetLinkedRelations200ApplicationJSON.class);
                res.getLinkedRelations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get monitor relations
     * This call fetches all the relations by type which are linked to the specified API version along with their details.
     * 
     * The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMonitorRelationsResponse getMonitorRelations(org.openapis.openapi.models.operations.GetMonitorRelationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetMonitorRelationsPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/monitor", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMonitorRelationsResponse res = new org.openapis.openapi.models.operations.GetMonitorRelationsResponse() {{
            getMonitorRelations200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetMonitorRelations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetMonitorRelations200ApplicationJSON.class);
                res.getMonitorRelations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get test suite relations
     * This call fetches all the relations by type which are linked to the specified API version along with their details.
     * 
     * The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTestSuiteRelationsResponse getTestSuiteRelations(org.openapis.openapi.models.operations.GetTestSuiteRelationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTestSuiteRelationsPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/testsuite", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTestSuiteRelationsResponse res = new org.openapis.openapi.models.operations.GetTestSuiteRelationsResponse() {{
            getTestSuiteRelations200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTestSuiteRelations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTestSuiteRelations200ApplicationJSON.class);
                res.getTestSuiteRelations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Sync relations with schema
     * This call allows you to keep the relation in sync with the API schema.
     * 
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SyncRelationsWithSchemaResponse syncRelationsWithSchema(org.openapis.openapi.models.operations.SyncRelationsWithSchemaRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SyncRelationsWithSchemaPathParams.class, baseUrl, "/apis/{apiId}/versions/{apiVersionId}/{entityType}/{entityId}/syncWithSchema", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SyncRelationsWithSchemaResponse res = new org.openapis.openapi.models.operations.SyncRelationsWithSchemaResponse() {{
            syncRelationsWithSchema200ApplicationJSONObject = null;
            syncRelationsWithSchema400ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SyncRelationsWithSchema200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SyncRelationsWithSchema200ApplicationJSON.class);
                res.syncRelationsWithSchema200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SyncRelationsWithSchema400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SyncRelationsWithSchema400ApplicationJSON.class);
                res.syncRelationsWithSchema400ApplicationJSONObject = out;
            }
        }

        return res;
    }
}