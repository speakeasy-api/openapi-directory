/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class URLInfoResponse {
    /**
     * The actual content this URL responded with. Only set if the 'fetch-content' option was used
     */
    @JsonProperty("content")
    public String content;

    public URLInfoResponse withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * The encoding format the URL uses
     */
    @JsonProperty("content-encoding")
    public String contentEncoding;

    public URLInfoResponse withContentEncoding(String contentEncoding) {
        this.contentEncoding = contentEncoding;
        return this;
    }
    
    /**
     * The size of the URL content in bytes
     */
    @JsonProperty("content-size")
    public Integer contentSize;

    public URLInfoResponse withContentSize(Integer contentSize) {
        this.contentSize = contentSize;
        return this;
    }
    
    /**
     * The content-type this URL serves
     */
    @JsonProperty("content-type")
    public String contentType;

    public URLInfoResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * True if this URL responded with an HTTP OK (200) status
     */
    @JsonProperty("http-ok")
    public Boolean httpOk;

    public URLInfoResponse withHttpOk(Boolean httpOk) {
        this.httpOk = httpOk;
        return this;
    }
    
    /**
     * True if this URL responded with an HTTP redirect
     */
    @JsonProperty("http-redirect")
    public Boolean httpRedirect;

    public URLInfoResponse withHttpRedirect(Boolean httpRedirect) {
        this.httpRedirect = httpRedirect;
        return this;
    }
    
    /**
     * The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue
     */
    @JsonProperty("http-status")
    public Integer httpStatus;

    public URLInfoResponse withHttpStatus(Integer httpStatus) {
        this.httpStatus = httpStatus;
        return this;
    }
    
    /**
     * The HTTP status message assoicated with the status code
     */
    @JsonProperty("http-status-message")
    public Integer httpStatusMessage;

    public URLInfoResponse withHttpStatusMessage(Integer httpStatusMessage) {
        this.httpStatusMessage = httpStatusMessage;
        return this;
    }
    
    /**
     * True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts
     */
    @JsonProperty("is-error")
    public Boolean isError;

    public URLInfoResponse withIsError(Boolean isError) {
        this.isError = isError;
        return this;
    }
    
    /**
     * True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'
     */
    @JsonProperty("is-timeout")
    public Boolean isTimeout;

    public URLInfoResponse withIsTimeout(Boolean isTimeout) {
        this.isTimeout = isTimeout;
        return this;
    }
    
    /**
     * The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
     */
    @JsonProperty("language-code")
    public String languageCode;

    public URLInfoResponse withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * The time taken to load the URL content in seconds
     */
    @JsonProperty("load-time")
    public Double loadTime;

    public URLInfoResponse withLoadTime(Double loadTime) {
        this.loadTime = loadTime;
        return this;
    }
    
    /**
     * A key-value map of the URL query paramaters
     */
    @JsonProperty("query")
    public java.util.Map<String, String> query;

    public URLInfoResponse withQuery(java.util.Map<String, String> query) {
        this.query = query;
        return this;
    }
    
    /**
     * Is this URL actually serving real content
     */
    @JsonProperty("real")
    public Boolean real;

    public URLInfoResponse withReal(Boolean real) {
        this.real = real;
        return this;
    }
    
    /**
     * The servers IP geo-location: full city name (if detectable)
     */
    @JsonProperty("server-city")
    public String serverCity;

    public URLInfoResponse withServerCity(String serverCity) {
        this.serverCity = serverCity;
        return this;
    }
    
    /**
     * The servers IP geo-location: full country name
     */
    @JsonProperty("server-country")
    public String serverCountry;

    public URLInfoResponse withServerCountry(String serverCountry) {
        this.serverCountry = serverCountry;
        return this;
    }
    
    /**
     * The servers IP geo-location: ISO 2-letter country code
     */
    @JsonProperty("server-country-code")
    public String serverCountryCode;

    public URLInfoResponse withServerCountryCode(String serverCountryCode) {
        this.serverCountryCode = serverCountryCode;
        return this;
    }
    
    /**
     * The servers hostname (PTR record)
     */
    @JsonProperty("server-hostname")
    public String serverHostname;

    public URLInfoResponse withServerHostname(String serverHostname) {
        this.serverHostname = serverHostname;
        return this;
    }
    
    /**
     * The IP address of the server hosting this URL
     */
    @JsonProperty("server-ip")
    public String serverIp;

    public URLInfoResponse withServerIp(String serverIp) {
        this.serverIp = serverIp;
        return this;
    }
    
    /**
     * The name of the server software hosting this URL
     */
    @JsonProperty("server-name")
    public String serverName;

    public URLInfoResponse withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }
    
    /**
     * The servers IP geo-location: full region name (if detectable)
     */
    @JsonProperty("server-region")
    public String serverRegion;

    public URLInfoResponse withServerRegion(String serverRegion) {
        this.serverRegion = serverRegion;
        return this;
    }
    
    /**
     * The document title
     */
    @JsonProperty("title")
    public String title;

    public URLInfoResponse withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The fully qualified URL. This may be different to the URL requested if http-redirect is true
     */
    @JsonProperty("url")
    public String url;

    public URLInfoResponse withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The URL path
     */
    @JsonProperty("url-path")
    public String urlPath;

    public URLInfoResponse withUrlPath(String urlPath) {
        this.urlPath = urlPath;
        return this;
    }
    
    /**
     * The URL port
     */
    @JsonProperty("url-port")
    public Integer urlPort;

    public URLInfoResponse withUrlPort(Integer urlPort) {
        this.urlPort = urlPort;
        return this;
    }
    
    /**
     * The URL protocol, usually http or https
     */
    @JsonProperty("url-protocol")
    public String urlProtocol;

    public URLInfoResponse withUrlProtocol(String urlProtocol) {
        this.urlProtocol = urlProtocol;
        return this;
    }
    
    /**
     * Is this a valid well-formed URL
     */
    @JsonProperty("valid")
    public Boolean valid;

    public URLInfoResponse withValid(Boolean valid) {
        this.valid = valid;
        return this;
    }
    
    public URLInfoResponse(@JsonProperty("content") String content, @JsonProperty("content-encoding") String contentEncoding, @JsonProperty("content-size") Integer contentSize, @JsonProperty("content-type") String contentType, @JsonProperty("http-ok") Boolean httpOk, @JsonProperty("http-redirect") Boolean httpRedirect, @JsonProperty("http-status") Integer httpStatus, @JsonProperty("http-status-message") Integer httpStatusMessage, @JsonProperty("is-error") Boolean isError, @JsonProperty("is-timeout") Boolean isTimeout, @JsonProperty("language-code") String languageCode, @JsonProperty("load-time") Double loadTime, @JsonProperty("query") java.util.Map<String, String> query, @JsonProperty("real") Boolean real, @JsonProperty("server-city") String serverCity, @JsonProperty("server-country") String serverCountry, @JsonProperty("server-country-code") String serverCountryCode, @JsonProperty("server-hostname") String serverHostname, @JsonProperty("server-ip") String serverIp, @JsonProperty("server-name") String serverName, @JsonProperty("server-region") String serverRegion, @JsonProperty("title") String title, @JsonProperty("url") String url, @JsonProperty("url-path") String urlPath, @JsonProperty("url-port") Integer urlPort, @JsonProperty("url-protocol") String urlProtocol, @JsonProperty("valid") Boolean valid) {
        this.content = content;
        this.contentEncoding = contentEncoding;
        this.contentSize = contentSize;
        this.contentType = contentType;
        this.httpOk = httpOk;
        this.httpRedirect = httpRedirect;
        this.httpStatus = httpStatus;
        this.httpStatusMessage = httpStatusMessage;
        this.isError = isError;
        this.isTimeout = isTimeout;
        this.languageCode = languageCode;
        this.loadTime = loadTime;
        this.query = query;
        this.real = real;
        this.serverCity = serverCity;
        this.serverCountry = serverCountry;
        this.serverCountryCode = serverCountryCode;
        this.serverHostname = serverHostname;
        this.serverIp = serverIp;
        this.serverName = serverName;
        this.serverRegion = serverRegion;
        this.title = title;
        this.url = url;
        this.urlPath = urlPath;
        this.urlPort = urlPort;
        this.urlProtocol = urlProtocol;
        this.valid = valid;
  }
}
