/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Transactions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List all invoices for an account
   *
   * @remarks
   * Retrieves invoices for a specified account.
   * Invoices are returned in reverse chronological order by **updatedDate**.
   *
   * For a use case of this operation, see [View invoices](https://www.zuora.com/developer/api-guides/#View-invoices).
   *
   */
  getTransactionInvoice(
    req: operations.GETTransactionInvoiceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETTransactionInvoiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETTransactionInvoiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/transactions/invoices/accounts/{account-key}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETTransactionInvoiceResponse =
        new operations.GETTransactionInvoiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getInvoiceFileWrapper = utils.objectToClass(
              httpRes?.data,
              shared.GETInvoiceFileWrapper
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all payments for an account
   *
   * @remarks
   * Retrieves payments for a specified account. Payments are returned in
   * reverse chronological order by **updatedDate**.
   *
   */
  getTransactionPayment(
    req: operations.GETTransactionPaymentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETTransactionPaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETTransactionPaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/transactions/payments/accounts/{account-key}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETTransactionPaymentResponse =
        new operations.GETTransactionPaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPaymentsType = utils.objectToClass(
              httpRes?.data,
              shared.GETPaymentsType
            );
          }
          break;
      }

      return res;
    });
  }
}
