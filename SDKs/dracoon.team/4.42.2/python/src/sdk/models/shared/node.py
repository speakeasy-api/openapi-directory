"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import encryptioninfo as shared_encryptioninfo
from ..shared import nodepermissions as shared_nodepermissions
from ..shared import userinfo as shared_userinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class NodeClassificationEnum(str, Enum):
    r"""Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'

class NodeTypeEnum(str, Enum):
    r"""Node type"""
    ROOM = 'room'
    FOLDER = 'folder'
    FILE = 'file'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Node:
    r"""Node information (Node can be a room, folder or file)"""
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Node ID"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name"""  
    type: NodeTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Node type"""  
    auth_parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authParentId'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.15.0
    
    Auth parent room ID
    """  
    branch_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branchVersion'), 'exclude': lambda f: f is None }})
    r"""Version of last change in this node or a node further down the tree."""  
    children: Optional[list[Node]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('children'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.10.0
    
    Child nodes list (if requested)
    
    (for rooms / folders only)
    """  
    classification: Optional[NodeClassificationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    """  
    cnt_children: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntChildren'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.11.0
    
    Number of direct children
    
    (no recursion; for rooms / folders only)
    """  
    cnt_comments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntComments'), 'exclude': lambda f: f is None }})
    r"""Returns the number of comments of this node."""  
    cnt_deleted_versions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntDeletedVersions'), 'exclude': lambda f: f is None }})
    r"""Number of deleted versions of this file / folder
    
    (for rooms / folders only)
    """  
    cnt_download_shares: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntDownloadShares'), 'exclude': lambda f: f is None }})
    r"""Returns the number of Download Shares of this node."""  
    cnt_files: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntFiles'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.11.0
    
    Amount of direct child files where this node is the parent node
    
    (no recursion; for rooms / folders only)
    """  
    cnt_folders: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntFolders'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.11.0
    
    Amount of direct child folders where this node is the parent node
    
    (no recursion; for rooms / folders only)
    """  
    cnt_rooms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntRooms'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.11.0
    
    Amount of direct child rooms where this node is the parent node
    
    (no recursion; for rooms only)
    """  
    cnt_upload_shares: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntUploadShares'), 'exclude': lambda f: f is None }})
    r"""Returns the number of Upload Shares of this node."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Creation date"""  
    created_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    encryption_info: Optional[shared_encryptioninfo.EncryptionInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionInfo'), 'exclude': lambda f: f is None }})
    r"""Encryption states"""  
    expire_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expiration date"""  
    file_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileType'), 'exclude': lambda f: f is None }})
    r"""File type / extension (for files only)"""  
    has_activities_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasActivitiesLog'), 'exclude': lambda f: f is None }})
    r"""Is activities log active (for rooms only)"""  
    hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hash'), 'exclude': lambda f: f is None }})
    r"""MD5 hash of file"""  
    inherit_permissions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritPermissions'), 'exclude': lambda f: f is None }})
    r"""Inherit permissions from parent room
    
    (default: `false` if `parentId` is `0`; otherwise: `true`)
    """  
    is_browsable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isBrowsable'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.11.0
    
    Determines whether node is browsable by client (for rooms only)
    """  
    is_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEncrypted'), 'exclude': lambda f: f is None }})
    r"""Encryption state"""  
    is_favorite: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFavorite'), 'exclude': lambda f: f is None }})
    r"""Node is marked as favorite (for rooms / folders only)"""  
    media_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaToken'), 'exclude': lambda f: f is None }})
    r"""Media server media token"""  
    media_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaType'), 'exclude': lambda f: f is None }})
    r"""File media type (for files only)"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""User notes"""  
    parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentId'), 'exclude': lambda f: f is None }})
    r"""Parent node ID (room or folder)"""  
    parent_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentPath'), 'exclude': lambda f: f is None }})
    r"""Parent node path
    
    `/` if node is a root node (room)
    """  
    permissions: Optional[shared_nodepermissions.NodePermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""Node permissions"""  
    quota: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota'), 'exclude': lambda f: f is None }})
    r"""Quota in byte"""  
    recycle_bin_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recycleBinRetentionPeriod'), 'exclude': lambda f: f is None }})
    r"""Retention period for deleted nodes in days"""  
    reference_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceId'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.37.0
    
    Reference ID. Identical across all versions of a file
    """  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Node size in byte"""  
    timestamp_creation: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampCreation'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.22.0
    
    Time the node was created on external file system
    """  
    timestamp_modification: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampModification'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.22.0
    
    Time the content of a node was last modified on external file system
    """  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Modification date"""  
    updated_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    