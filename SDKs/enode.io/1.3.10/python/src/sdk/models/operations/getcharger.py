"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import onechargers_get_parameters_0_enum as shared_onechargers_get_parameters_0_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetChargerSecurity:
    
    user_access_token: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    user_access_token1: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    user_access_token2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetChargerRequest:
    
    charger_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'chargerId', 'style': 'simple', 'explode': False }})
    r"""ID of the Charger"""  
    field: Optional[list[shared_onechargers_get_parameters_0_enum.OnechargersGetParameters0Enum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'field[]', 'style': 'form', 'explode': True }})
    r"""An optional array of Charger fields that should be included in the response, for example: `?field[]=information&field[]=chargeState`
    
    By default, no optional fields are included and only the Charger ID will be returned. Response time will generally be slower the more fields you request.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCharger200ApplicationJSONChargeState:
    
    charge_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeRate'), 'exclude': lambda f: f is None }})
    r"""The current charge rate in kW.
    
    This property is only available when the charger is actively charging a vehicle, and is `null` any other time.
    """  
    is_charging: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCharging'), 'exclude': lambda f: f is None }})
    r"""Current charging status"""  
    is_plugged_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPluggedIn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCharger200ApplicationJSONInformation:
    r"""Descriptive information about the Charger"""
    
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""Charger brand"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Charger ID"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Charger model"""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('year'), 'exclude': lambda f: f is None }})
    r"""Charger production year"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCharger200ApplicationJSON:
    r"""Successful"""
    
    charge_state: Optional[GetCharger200ApplicationJSONChargeState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeState'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Charger ID"""  
    information: Optional[GetCharger200ApplicationJSONInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('information'), 'exclude': lambda f: f is None }})
    r"""Descriptive information about the Charger"""  
    is_reachable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isReachable'), 'exclude': lambda f: f is None }})
    r"""Is the charger currently reachable?"""  
    last_seen: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSeen'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last time the charger was successfully communicated with"""  
    

@dataclasses.dataclass
class GetChargerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_charger_200_application_json_object: Optional[GetCharger200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    