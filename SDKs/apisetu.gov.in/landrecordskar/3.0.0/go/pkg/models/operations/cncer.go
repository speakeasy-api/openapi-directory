// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CncerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CncerRequestBodyCertificateParameters struct {
	// Document Number
	DocumentNumber string `json:"DocumentNumber"`
}

// CncerRequestBodyFormatEnum - The format of the certificate in response.
type CncerRequestBodyFormatEnum string

const (
	CncerRequestBodyFormatEnumXML CncerRequestBodyFormatEnum = "xml"
	CncerRequestBodyFormatEnumPdf CncerRequestBodyFormatEnum = "pdf"
)

func (e *CncerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "xml":
		fallthrough
	case "pdf":
		*e = CncerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CncerRequestBodyFormatEnum: %s", s)
	}
}

// CncerRequestBody - Request format
type CncerRequestBody struct {
	CertificateParameters *CncerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CncerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cncer504ApplicationJSONErrorEnum string

const (
	Cncer504ApplicationJSONErrorEnumGatewayTimeout Cncer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Cncer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Cncer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Cncer504ApplicationJSONErrorDescriptionEnum string

const (
	Cncer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cncer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Cncer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Cncer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cncer504ApplicationJSON - Gateway timeout
type Cncer504ApplicationJSON struct {
	Error            *Cncer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cncer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cncer503ApplicationJSONErrorEnum string

const (
	Cncer503ApplicationJSONErrorEnumServiceUnavailable Cncer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Cncer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Cncer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Cncer503ApplicationJSONErrorDescriptionEnum string

const (
	Cncer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cncer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Cncer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Cncer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cncer503ApplicationJSON - Service unavailable
type Cncer503ApplicationJSON struct {
	Error            *Cncer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cncer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cncer502ApplicationJSONErrorEnum string

const (
	Cncer502ApplicationJSONErrorEnumBadGatewy Cncer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Cncer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Cncer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Cncer502ApplicationJSONErrorDescriptionEnum string

const (
	Cncer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cncer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Cncer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Cncer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cncer502ApplicationJSON - Bad gateway
type Cncer502ApplicationJSON struct {
	Error            *Cncer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cncer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cncer500ApplicationJSONErrorEnum string

const (
	Cncer500ApplicationJSONErrorEnumInternalServerError Cncer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Cncer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Cncer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Cncer500ApplicationJSONErrorDescriptionEnum string

const (
	Cncer500ApplicationJSONErrorDescriptionEnumInternalServerError Cncer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Cncer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Cncer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cncer500ApplicationJSON - Internal server error
type Cncer500ApplicationJSON struct {
	Error            *Cncer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cncer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cncer404ApplicationJSONErrorEnum string

const (
	Cncer404ApplicationJSONErrorEnumRecordNotFound Cncer404ApplicationJSONErrorEnum = "record_not_found"
	Cncer404ApplicationJSONErrorEnumURLNotFound    Cncer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Cncer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cncer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Cncer404ApplicationJSONErrorDescriptionEnum string

const (
	Cncer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cncer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cncer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cncer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Cncer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cncer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cncer404ApplicationJSON - No record found
type Cncer404ApplicationJSON struct {
	Error            *Cncer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cncer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cncer401ApplicationJSONErrorEnum string

const (
	Cncer401ApplicationJSONErrorEnumInvalidAuthentication Cncer401ApplicationJSONErrorEnum = "invalid_authentication"
	Cncer401ApplicationJSONErrorEnumInvalidAuthorization  Cncer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Cncer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cncer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Cncer401ApplicationJSONErrorDescriptionEnum string

const (
	Cncer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cncer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cncer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cncer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Cncer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cncer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cncer401ApplicationJSON - Unauthorized access
type Cncer401ApplicationJSON struct {
	Error            *Cncer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cncer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cncer400ApplicationJSONErrorEnum string

const (
	Cncer400ApplicationJSONErrorEnumMissingParameter Cncer400ApplicationJSONErrorEnum = "missing_parameter"
	Cncer400ApplicationJSONErrorEnumInvalidParameter Cncer400ApplicationJSONErrorEnum = "invalid_parameter"
	Cncer400ApplicationJSONErrorEnumInvalidFormat    Cncer400ApplicationJSONErrorEnum = "invalid_format"
	Cncer400ApplicationJSONErrorEnumInvalidTxnid     Cncer400ApplicationJSONErrorEnum = "invalid_txnid"
	Cncer400ApplicationJSONErrorEnumInvalidConsentid Cncer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Cncer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cncer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Cncer400ApplicationJSONErrorDescriptionEnum string

const (
	Cncer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cncer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cncer400ApplicationJSONErrorDescriptionEnumBadRequest                              Cncer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cncer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cncer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cncer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cncer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cncer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cncer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Cncer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cncer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cncer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cncer400ApplicationJSON - Bad request
type Cncer400ApplicationJSON struct {
	Error            *Cncer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cncer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CncerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cncer400ApplicationJSONObject *Cncer400ApplicationJSON
	// Unauthorized access
	Cncer401ApplicationJSONObject *Cncer401ApplicationJSON
	// No record found
	Cncer404ApplicationJSONObject *Cncer404ApplicationJSON
	// Internal server error
	Cncer500ApplicationJSONObject *Cncer500ApplicationJSON
	// Bad gateway
	Cncer502ApplicationJSONObject *Cncer502ApplicationJSON
	// Service unavailable
	Cncer503ApplicationJSONObject *Cncer503ApplicationJSON
	// Gateway timeout
	Cncer504ApplicationJSONObject *Cncer504ApplicationJSON
}
