/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetPaymentSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiSecretKey: string;
}

export class GetPaymentRequest extends SpeakeasyBase {
  /**
   * Transaction Id
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=transaction_id",
  })
  transactionId: string;

  /**
   * ApiSecretKey
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-api-key",
  })
  xApiKey: string;
}

/**
 * System error. Retry later. If the error persist, contact WOS support
 */
export class GetPayment500ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
 */
export class GetPayment429ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * The specified resource was not found
 */
export class GetPayment404ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
 */
export class GetPayment403ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You do not have permissions to access this resource.
 */
export class GetPayment401ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Request is not complete and may have one or more validations errors. Please check the error message and the code
 */
export class GetPayment400ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class GetPaymentRootTypeForPaymentsInvestmentInstructions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "investment_product_id" })
  investmentProductId: string;

  /**
   * Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: string;

  /**
   * Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export enum GetPaymentRootTypeForPaymentsPaymentTypeEnum {
  Card = "card",
  ElectronicFundTransfer = "electronic_fund_transfer",
}

export enum GetPaymentRootTypeForPaymentsPurposeEnum {
  Cash = "cash",
  Invest = "invest",
}

export enum GetPaymentRootTypeForPaymentsServiceProviderEnum {
  Stripe = "stripe",
  Truelayer = "truelayer",
  None = "none",
}

/**
 * Custom parameters based on prerequisites of the selected provider
 */
export class GetPaymentRootTypeForPaymentsServiceProviderParams extends SpeakeasyBase {
  /**
   * Bank account ID of Investor (include if service_provider="truelayer")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bank_account_id" })
  bankAccountId?: string;

  /**
   * URL for Hosted Payment Page (include if service_provider="truelayer")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hpp_url" })
  hppUrl?: string;

  /**
   * Payment intent ID (include if service_provider="truelayer")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_intent_id" })
  paymentIntentId?: string;
}

/**
 * Status of the payment
 *
 * @remarks
 *
 * - `pending_confirmation`: Payment is pending approvals and confirmation
 * - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque)
 * - `succeeded`: Payment is successful. Cash is cleaned in account.
 * - `cancelled`: Payment cancelled, and any held funds have been returned.
 * - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
 */
export enum GetPaymentRootTypeForPaymentsStatusEnum {
  PendingConfirmation = "pending_confirmation",
  Processing = "processing",
  Succeeded = "succeeded",
  Cancelled = "cancelled",
  Failed = "failed",
}

/**
 * success
 */
export class GetPaymentRootTypeForPayments extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: string;

  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)
   */
  @SpeakeasyMetadata({
    elemType: GetPaymentRootTypeForPaymentsInvestmentInstructions,
  })
  @Expose({ name: "investment_instructions" })
  @Type(() => GetPaymentRootTypeForPaymentsInvestmentInstructions)
  investmentInstructions?: GetPaymentRootTypeForPaymentsInvestmentInstructions[];

  @SpeakeasyMetadata()
  @Expose({ name: "payment_type" })
  paymentType: GetPaymentRootTypeForPaymentsPaymentTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "pot_id" })
  potId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "purpose" })
  purpose: GetPaymentRootTypeForPaymentsPurposeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "service_provider" })
  serviceProvider: GetPaymentRootTypeForPaymentsServiceProviderEnum;

  /**
   * Custom parameters based on prerequisites of the selected provider
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service_provider_params" })
  @Type(() => GetPaymentRootTypeForPaymentsServiceProviderParams)
  serviceProviderParams?: GetPaymentRootTypeForPaymentsServiceProviderParams;

  /**
   * Status of the payment
   *
   * @remarks
   *
   * - `pending_confirmation`: Payment is pending approvals and confirmation
   * - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque)
   * - `succeeded`: Payment is successful. Cash is cleaned in account.
   * - `cancelled`: Payment cancelled, and any held funds have been returned.
   * - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetPaymentRootTypeForPaymentsStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;
}

export class GetPaymentResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * success
   */
  @SpeakeasyMetadata()
  rootTypeForPayments?: GetPaymentRootTypeForPayments;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Request is not complete and may have one or more validations errors. Please check the error message and the code
   */
  @SpeakeasyMetadata()
  getPayment400ApplicationJSONObject?: GetPayment400ApplicationJSON;

  /**
   * You do not have permissions to access this resource.
   */
  @SpeakeasyMetadata()
  getPayment401ApplicationJSONObject?: GetPayment401ApplicationJSON;

  /**
   * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
   */
  @SpeakeasyMetadata()
  getPayment403ApplicationJSONObject?: GetPayment403ApplicationJSON;

  /**
   * The specified resource was not found
   */
  @SpeakeasyMetadata()
  getPayment404ApplicationJSONObject?: GetPayment404ApplicationJSON;

  /**
   * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
   */
  @SpeakeasyMetadata()
  getPayment429ApplicationJSONObject?: GetPayment429ApplicationJSON;

  /**
   * System error. Retry later. If the error persist, contact WOS support
   */
  @SpeakeasyMetadata()
  getPayment500ApplicationJSONObject?: GetPayment500ApplicationJSON;
}
