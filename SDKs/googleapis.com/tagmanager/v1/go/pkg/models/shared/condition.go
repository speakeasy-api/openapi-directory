// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConditionTypeEnum - The type of operator for this condition. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
type ConditionTypeEnum string

const (
	ConditionTypeEnumEquals          ConditionTypeEnum = "equals"
	ConditionTypeEnumContains        ConditionTypeEnum = "contains"
	ConditionTypeEnumStartsWith      ConditionTypeEnum = "startsWith"
	ConditionTypeEnumEndsWith        ConditionTypeEnum = "endsWith"
	ConditionTypeEnumMatchRegex      ConditionTypeEnum = "matchRegex"
	ConditionTypeEnumGreater         ConditionTypeEnum = "greater"
	ConditionTypeEnumGreaterOrEquals ConditionTypeEnum = "greaterOrEquals"
	ConditionTypeEnumLess            ConditionTypeEnum = "less"
	ConditionTypeEnumLessOrEquals    ConditionTypeEnum = "lessOrEquals"
	ConditionTypeEnumCSSSelector     ConditionTypeEnum = "cssSelector"
	ConditionTypeEnumURLMatches      ConditionTypeEnum = "urlMatches"
)

func (e *ConditionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "equals":
		fallthrough
	case "contains":
		fallthrough
	case "startsWith":
		fallthrough
	case "endsWith":
		fallthrough
	case "matchRegex":
		fallthrough
	case "greater":
		fallthrough
	case "greaterOrEquals":
		fallthrough
	case "less":
		fallthrough
	case "lessOrEquals":
		fallthrough
	case "cssSelector":
		fallthrough
	case "urlMatches":
		*e = ConditionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionTypeEnum: %s", s)
	}
}

// Condition - Represents a predicate.
type Condition struct {
	// A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
	Parameter []Parameter `json:"parameter,omitempty"`
	// The type of operator for this condition. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
	Type *ConditionTypeEnum `json:"type,omitempty"`
}
