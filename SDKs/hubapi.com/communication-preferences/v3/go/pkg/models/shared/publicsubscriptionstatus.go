// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PublicSubscriptionStatusLegalBasisEnum - The legal reason for the current status of the subscription.
type PublicSubscriptionStatusLegalBasisEnum string

const (
	PublicSubscriptionStatusLegalBasisEnumLegitimateInterestPql    PublicSubscriptionStatusLegalBasisEnum = "LEGITIMATE_INTEREST_PQL"
	PublicSubscriptionStatusLegalBasisEnumLegitimateInterestClient PublicSubscriptionStatusLegalBasisEnum = "LEGITIMATE_INTEREST_CLIENT"
	PublicSubscriptionStatusLegalBasisEnumPerformanceOfContract    PublicSubscriptionStatusLegalBasisEnum = "PERFORMANCE_OF_CONTRACT"
	PublicSubscriptionStatusLegalBasisEnumConsentWithNotice        PublicSubscriptionStatusLegalBasisEnum = "CONSENT_WITH_NOTICE"
	PublicSubscriptionStatusLegalBasisEnumNonGdpr                  PublicSubscriptionStatusLegalBasisEnum = "NON_GDPR"
	PublicSubscriptionStatusLegalBasisEnumProcessAndStore          PublicSubscriptionStatusLegalBasisEnum = "PROCESS_AND_STORE"
	PublicSubscriptionStatusLegalBasisEnumLegitimateInterestOther  PublicSubscriptionStatusLegalBasisEnum = "LEGITIMATE_INTEREST_OTHER"
)

func (e PublicSubscriptionStatusLegalBasisEnum) ToPointer() *PublicSubscriptionStatusLegalBasisEnum {
	return &e
}

func (e *PublicSubscriptionStatusLegalBasisEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LEGITIMATE_INTEREST_PQL":
		fallthrough
	case "LEGITIMATE_INTEREST_CLIENT":
		fallthrough
	case "PERFORMANCE_OF_CONTRACT":
		fallthrough
	case "CONSENT_WITH_NOTICE":
		fallthrough
	case "NON_GDPR":
		fallthrough
	case "PROCESS_AND_STORE":
		fallthrough
	case "LEGITIMATE_INTEREST_OTHER":
		*e = PublicSubscriptionStatusLegalBasisEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublicSubscriptionStatusLegalBasisEnum: %v", v)
	}
}

// PublicSubscriptionStatusSourceOfStatusEnum - Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
type PublicSubscriptionStatusSourceOfStatusEnum string

const (
	PublicSubscriptionStatusSourceOfStatusEnumPortalWideStatus   PublicSubscriptionStatusSourceOfStatusEnum = "PORTAL_WIDE_STATUS"
	PublicSubscriptionStatusSourceOfStatusEnumBrandWideStatus    PublicSubscriptionStatusSourceOfStatusEnum = "BRAND_WIDE_STATUS"
	PublicSubscriptionStatusSourceOfStatusEnumSubscriptionStatus PublicSubscriptionStatusSourceOfStatusEnum = "SUBSCRIPTION_STATUS"
)

func (e PublicSubscriptionStatusSourceOfStatusEnum) ToPointer() *PublicSubscriptionStatusSourceOfStatusEnum {
	return &e
}

func (e *PublicSubscriptionStatusSourceOfStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PORTAL_WIDE_STATUS":
		fallthrough
	case "BRAND_WIDE_STATUS":
		fallthrough
	case "SUBSCRIPTION_STATUS":
		*e = PublicSubscriptionStatusSourceOfStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublicSubscriptionStatusSourceOfStatusEnum: %v", v)
	}
}

// PublicSubscriptionStatusStatusEnum - Whether the contact is subscribed.
type PublicSubscriptionStatusStatusEnum string

const (
	PublicSubscriptionStatusStatusEnumSubscribed    PublicSubscriptionStatusStatusEnum = "SUBSCRIBED"
	PublicSubscriptionStatusStatusEnumNotSubscribed PublicSubscriptionStatusStatusEnum = "NOT_SUBSCRIBED"
)

func (e PublicSubscriptionStatusStatusEnum) ToPointer() *PublicSubscriptionStatusStatusEnum {
	return &e
}

func (e *PublicSubscriptionStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUBSCRIBED":
		fallthrough
	case "NOT_SUBSCRIBED":
		*e = PublicSubscriptionStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublicSubscriptionStatusStatusEnum: %v", v)
	}
}

// PublicSubscriptionStatus - The status of a subscription for a contact.
type PublicSubscriptionStatus struct {
	// The ID of the brand that the subscription is associated with, if there is one.
	BrandID *int64 `json:"brandId,omitempty"`
	// A description of the subscription.
	Description string `json:"description"`
	// The ID for the subscription.
	ID string `json:"id"`
	// The legal reason for the current status of the subscription.
	LegalBasis *PublicSubscriptionStatusLegalBasisEnum `json:"legalBasis,omitempty"`
	// A more detailed explanation to go with the legal basis.
	LegalBasisExplanation *string `json:"legalBasisExplanation,omitempty"`
	// The name of the subscription.
	Name string `json:"name"`
	// The name of the preferences group that the subscription is associated with.
	PreferenceGroupName *string `json:"preferenceGroupName,omitempty"`
	// Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
	SourceOfStatus PublicSubscriptionStatusSourceOfStatusEnum `json:"sourceOfStatus"`
	// Whether the contact is subscribed.
	Status PublicSubscriptionStatusStatusEnum `json:"status"`
}
