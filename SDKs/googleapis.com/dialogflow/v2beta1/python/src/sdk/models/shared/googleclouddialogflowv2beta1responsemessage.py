"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddialogflowv2beta1responsemessageliveagenthandoff as shared_googleclouddialogflowv2beta1responsemessageliveagenthandoff
from ..shared import googleclouddialogflowv2beta1responsemessagemixedaudio as shared_googleclouddialogflowv2beta1responsemessagemixedaudio
from ..shared import googleclouddialogflowv2beta1responsemessagetelephonytransfercall as shared_googleclouddialogflowv2beta1responsemessagetelephonytransfercall
from ..shared import googleclouddialogflowv2beta1responsemessagetext as shared_googleclouddialogflowv2beta1responsemessagetext
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowV2beta1ResponseMessage:
    r"""Response messages from an automated agent."""
    
    end_interaction: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endInteraction'), 'exclude': lambda f: f is None }})
    r"""Indicates that interaction with the Dialogflow agent has ended."""  
    live_agent_handoff: Optional[shared_googleclouddialogflowv2beta1responsemessageliveagenthandoff.GoogleCloudDialogflowV2beta1ResponseMessageLiveAgentHandoff] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveAgentHandoff'), 'exclude': lambda f: f is None }})
    r"""Indicates that the conversation should be handed off to a human agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry fulfillment of a CX Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human."""  
    mixed_audio: Optional[shared_googleclouddialogflowv2beta1responsemessagemixedaudio.GoogleCloudDialogflowV2beta1ResponseMessageMixedAudio] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mixedAudio'), 'exclude': lambda f: f is None }})
    r"""Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs."""  
    payload: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload'), 'exclude': lambda f: f is None }})
    r"""Returns a response containing a custom, platform-specific payload."""  
    telephony_transfer_call: Optional[shared_googleclouddialogflowv2beta1responsemessagetelephonytransfercall.GoogleCloudDialogflowV2beta1ResponseMessageTelephonyTransferCall] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telephonyTransferCall'), 'exclude': lambda f: f is None }})
    r"""Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint."""  
    text: Optional[shared_googleclouddialogflowv2beta1responsemessagetext.GoogleCloudDialogflowV2beta1ResponseMessageText] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The text response message."""  
    