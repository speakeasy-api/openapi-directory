"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import associatedgateway as shared_associatedgateway
from ..shared import directconnectgatewayassociationproposalstate_enum as shared_directconnectgatewayassociationproposalstate_enum
from ..shared import routefilterprefix as shared_routefilterprefix
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DirectConnectGatewayAssociationProposal:
    r"""Information about the proposal request to attach a virtual private gateway to a Direct Connect gateway."""
    
    associated_gateway: Optional[shared_associatedgateway.AssociatedGateway] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedGateway'), 'exclude': lambda f: f is None }})  
    direct_connect_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directConnectGatewayId'), 'exclude': lambda f: f is None }})  
    direct_connect_gateway_owner_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directConnectGatewayOwnerAccount'), 'exclude': lambda f: f is None }})  
    existing_allowed_prefixes_to_direct_connect_gateway: Optional[list[shared_routefilterprefix.RouteFilterPrefix]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('existingAllowedPrefixesToDirectConnectGateway'), 'exclude': lambda f: f is None }})  
    proposal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proposalId'), 'exclude': lambda f: f is None }})  
    proposal_state: Optional[shared_directconnectgatewayassociationproposalstate_enum.DirectConnectGatewayAssociationProposalStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proposalState'), 'exclude': lambda f: f is None }})  
    requested_allowed_prefixes_to_direct_connect_gateway: Optional[list[shared_routefilterprefix.RouteFilterPrefix]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedAllowedPrefixesToDirectConnectGateway'), 'exclude': lambda f: f is None }})  
    