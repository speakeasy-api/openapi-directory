/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Product type to rollback (if the network is a combined network)
 */
export enum CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum {
  Appliance = "appliance",
  Camera = "camera",
  CellularGateway = "cellularGateway",
  Switch = "switch",
  Wireless = "wireless",
}

/**
 * Reason for the rollback
 */
export enum CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum {
  BrokeOldFeatures = "broke old features",
  Other = "other",
  Performance = "performance",
  Stability = "stability",
  Testing = "testing",
  UnifyingNetworksVersions = "unifying networks versions",
}

export class CreateNetworkFirmwareUpgradesRollbackRequestBodyReasons extends SpeakeasyBase {
  /**
   * Reason for the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category: CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum;

  /**
   * Additional comment about the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment: string;
}

/**
 * Version to downgrade to (if the network has firmware flexibility)
 */
export class CreateNetworkFirmwareUpgradesRollbackRequestBodyToVersion extends SpeakeasyBase {
  /**
   * The version ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

export class CreateNetworkFirmwareUpgradesRollbackRequestBody extends SpeakeasyBase {
  /**
   * Product type to rollback (if the network is a combined network)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "product" })
  product?: CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum;

  /**
   * Reasons for the rollback
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkFirmwareUpgradesRollbackRequestBodyReasons,
  })
  @Expose({ name: "reasons" })
  @Type(() => CreateNetworkFirmwareUpgradesRollbackRequestBodyReasons)
  reasons: CreateNetworkFirmwareUpgradesRollbackRequestBodyReasons[];

  /**
   * Scheduled time for the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Version to downgrade to (if the network has firmware flexibility)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(() => CreateNetworkFirmwareUpgradesRollbackRequestBodyToVersion)
  toVersion?: CreateNetworkFirmwareUpgradesRollbackRequestBodyToVersion;
}

export class CreateNetworkFirmwareUpgradesRollbackRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateNetworkFirmwareUpgradesRollbackRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * Product type to rollback (if the network is a combined network)
 */
export enum CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum {
  Appliance = "appliance",
  Camera = "camera",
  CellularGateway = "cellularGateway",
  Switch = "switch",
  Wireless = "wireless",
}

/**
 * Reason for the rollback
 */
export enum CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum {
  BrokeOldFeatures = "broke old features",
  Other = "other",
  Performance = "performance",
  Stability = "stability",
  Testing = "testing",
  UnifyingNetworksVersions = "unifying networks versions",
}

export class CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasons extends SpeakeasyBase {
  /**
   * Reason for the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum;

  /**
   * Additional comment about the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;
}

/**
 * Status of the rollback
 */
export enum CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum {
  Canceled = "canceled",
  Completed = "completed",
  InProgress = "in_progress",
  Pending = "pending",
}

/**
 * Version to downgrade to (if the network has firmware flexibility)
 */
export class CreateNetworkFirmwareUpgradesRollback200ApplicationJSONToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Successful operation
 */
export class CreateNetworkFirmwareUpgradesRollback200ApplicationJSON extends SpeakeasyBase {
  /**
   * Product type to rollback (if the network is a combined network)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "product" })
  product?: CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum;

  /**
   * Reasons for the rollback
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasons,
  })
  @Expose({ name: "reasons" })
  @Type(() => CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasons)
  reasons?: CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasons[];

  /**
   * Status of the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum;

  /**
   * Scheduled time for the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Version to downgrade to (if the network has firmware flexibility)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(() => CreateNetworkFirmwareUpgradesRollback200ApplicationJSONToVersion)
  toVersion?: CreateNetworkFirmwareUpgradesRollback200ApplicationJSONToVersion;

  /**
   * Batch ID of the firmware rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upgradeBatchId" })
  upgradeBatchId?: string;
}

export class CreateNetworkFirmwareUpgradesRollbackResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  createNetworkFirmwareUpgradesRollback200ApplicationJSONObject?: CreateNetworkFirmwareUpgradesRollback200ApplicationJSON;
}
