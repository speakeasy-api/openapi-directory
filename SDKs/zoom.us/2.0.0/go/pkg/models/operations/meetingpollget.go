// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MeetingPollGetSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type MeetingPollGetPathParams struct {
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
	// The poll ID
	PollID string `pathParam:"style=simple,explode=false,name=pollId"`
}

type MeetingPollGetRequest struct {
	PathParams MeetingPollGetPathParams
	Security   MeetingPollGetSecurity
}

// MeetingPollGetPollQuestionsTypeEnum - Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type MeetingPollGetPollQuestionsTypeEnum string

const (
	MeetingPollGetPollQuestionsTypeEnumSingle   MeetingPollGetPollQuestionsTypeEnum = "single"
	MeetingPollGetPollQuestionsTypeEnumMultiple MeetingPollGetPollQuestionsTypeEnum = "multiple"
)

func (e *MeetingPollGetPollQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = MeetingPollGetPollQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingPollGetPollQuestionsTypeEnum: %s", s)
	}
}

type MeetingPollGetPollQuestions struct {
	// Answers to the questions
	Answers []string `json:"answers,omitempty"`
	// Question to be asked to the attendees.
	Name *string `json:"name,omitempty"`
	// Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *MeetingPollGetPollQuestionsTypeEnum `json:"type,omitempty"`
}

// MeetingPollGetPollStatusEnum - Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
type MeetingPollGetPollStatusEnum string

const (
	MeetingPollGetPollStatusEnumNotstart MeetingPollGetPollStatusEnum = "notstart"
	MeetingPollGetPollStatusEnumStarted  MeetingPollGetPollStatusEnum = "started"
	MeetingPollGetPollStatusEnumEnded    MeetingPollGetPollStatusEnum = "ended"
	MeetingPollGetPollStatusEnumSharing  MeetingPollGetPollStatusEnum = "sharing"
)

func (e *MeetingPollGetPollStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notstart":
		fallthrough
	case "started":
		fallthrough
	case "ended":
		fallthrough
	case "sharing":
		*e = MeetingPollGetPollStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingPollGetPollStatusEnum: %s", s)
	}
}

// MeetingPollGetPoll - Poll
type MeetingPollGetPoll struct {
	// Meeting Poll ID
	ID *string `json:"id,omitempty"`
	// Array of Polls
	Questions []MeetingPollGetPollQuestions `json:"questions,omitempty"`
	// Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
	Status *MeetingPollGetPollStatusEnum `json:"status,omitempty"`
	// Title for the poll.
	Title *string `json:"title,omitempty"`
}

type MeetingPollGetResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200` <br>
	// Meeting Poll object returned
	Poll        *MeetingPollGetPoll
	StatusCode  int
	RawResponse *http.Response
}
