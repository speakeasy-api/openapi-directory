"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import putdebitmemotaxitemtype as shared_putdebitmemotaxitemtype
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTDebitMemoItemTypeFinanceInformation:
    r"""Container for the finance information related to the debit memo item."""
    
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the deferred revenue, such as Monthly Recurring Liability."""  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges."""  
    revenue_recognition_rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueRecognitionRuleName'), 'exclude': lambda f: f is None }})
    r"""The name of the revenue recognition rule governing the revenue schedule."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTDebitMemoItemType:
    r"""Container for custom fields of a Debit Memo Item object."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID of the debit memo item."""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Comments about the debit memo item."""  
    finance_information: Optional[PUTDebitMemoItemTypeFinanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financeInformation'), 'exclude': lambda f: f is None }})
    r"""Container for the finance information related to the debit memo item."""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The number of units for the debit memo item."""  
    service_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The service end date of the debit memo item."""  
    service_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The service start date of the debit memo item."""  
    sku_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuName'), 'exclude': lambda f: f is None }})
    r"""The name of the SKU."""  
    tax_items: Optional[list[shared_putdebitmemotaxitemtype.PutDebitMemoTaxItemType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxItems'), 'exclude': lambda f: f is None }})
    r"""Container for debit memo taxation items."""  
    unit_of_measure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitOfMeasure'), 'exclude': lambda f: f is None }})
    r"""The definable unit that you measure when determining charges."""  
    