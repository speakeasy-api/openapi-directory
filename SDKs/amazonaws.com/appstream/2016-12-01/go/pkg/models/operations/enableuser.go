// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// EnableUserXAmzTargetEnum
type EnableUserXAmzTargetEnum string

const (
	EnableUserXAmzTargetEnumPhotonAdminProxyServiceEnableUser EnableUserXAmzTargetEnum = "PhotonAdminProxyService.EnableUser"
)

func (e EnableUserXAmzTargetEnum) ToPointer() *EnableUserXAmzTargetEnum {
	return &e
}

func (e *EnableUserXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PhotonAdminProxyService.EnableUser":
		*e = EnableUserXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnableUserXAmzTargetEnum: %v", v)
	}
}

type EnableUserRequest struct {
	EnableUserRequest shared.EnableUserRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        EnableUserXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type EnableUserResponse struct {
	ContentType string
	// Success
	EnableUserResult map[string]interface{}
	// InvalidAccountStatusException
	InvalidAccountStatusException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
