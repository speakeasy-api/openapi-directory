"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def sql_projects_instances_get_disk_shrink_config(self, request: operations.SQLProjectsInstancesGetDiskShrinkConfigRequest, security: operations.SQLProjectsInstancesGetDiskShrinkConfigSecurity) -> operations.SQLProjectsInstancesGetDiskShrinkConfigResponse:
        r"""Get Disk Shrink Config for a given instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLProjectsInstancesGetDiskShrinkConfigRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/getDiskShrinkConfig', request)
        
        query_params = utils.get_query_params(operations.SQLProjectsInstancesGetDiskShrinkConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLProjectsInstancesGetDiskShrinkConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SQLInstancesGetDiskShrinkConfigResponse])
                res.sql_instances_get_disk_shrink_config_response = out

        return res

    def sql_projects_instances_perform_disk_shrink(self, request: operations.SQLProjectsInstancesPerformDiskShrinkRequest, security: operations.SQLProjectsInstancesPerformDiskShrinkSecurity) -> operations.SQLProjectsInstancesPerformDiskShrinkResponse:
        r"""Perform Disk Shrink on primary instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLProjectsInstancesPerformDiskShrinkRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/performDiskShrink', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "perform_disk_shrink_context", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLProjectsInstancesPerformDiskShrinkRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLProjectsInstancesPerformDiskShrinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_projects_instances_reschedule_maintenance(self, request: operations.SQLProjectsInstancesRescheduleMaintenanceRequest, security: operations.SQLProjectsInstancesRescheduleMaintenanceSecurity) -> operations.SQLProjectsInstancesRescheduleMaintenanceResponse:
        r"""Reschedules the maintenance on the given instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLProjectsInstancesRescheduleMaintenanceRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/rescheduleMaintenance', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sql_instances_reschedule_maintenance_request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLProjectsInstancesRescheduleMaintenanceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLProjectsInstancesRescheduleMaintenanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_projects_instances_reset_replica_size(self, request: operations.SQLProjectsInstancesResetReplicaSizeRequest, security: operations.SQLProjectsInstancesResetReplicaSizeSecurity) -> operations.SQLProjectsInstancesResetReplicaSizeResponse:
        r"""Reset Replica Size to primary instance disk size."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLProjectsInstancesResetReplicaSizeRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/resetReplicaSize', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLProjectsInstancesResetReplicaSizeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLProjectsInstancesResetReplicaSizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_projects_instances_start_external_sync(self, request: operations.SQLProjectsInstancesStartExternalSyncRequest, security: operations.SQLProjectsInstancesStartExternalSyncSecurity) -> operations.SQLProjectsInstancesStartExternalSyncResponse:
        r"""Start External primary instance migration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLProjectsInstancesStartExternalSyncRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/startExternalSync', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sql_instances_start_external_sync_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLProjectsInstancesStartExternalSyncRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLProjectsInstancesStartExternalSyncResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_projects_instances_verify_external_sync_settings(self, request: operations.SQLProjectsInstancesVerifyExternalSyncSettingsRequest, security: operations.SQLProjectsInstancesVerifyExternalSyncSettingsSecurity) -> operations.SQLProjectsInstancesVerifyExternalSyncSettingsResponse:
        r"""Verify External primary instance external sync settings."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLProjectsInstancesVerifyExternalSyncSettingsRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/verifyExternalSyncSettings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sql_instances_verify_external_sync_settings_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLProjectsInstancesVerifyExternalSyncSettingsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLProjectsInstancesVerifyExternalSyncSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SQLInstancesVerifyExternalSyncSettingsResponse])
                res.sql_instances_verify_external_sync_settings_response = out

        return res

    