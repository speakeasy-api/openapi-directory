/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PutFirewallsIdUpdateFirewallRequest extends SpeakeasyBase {
  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, any>;

  /**
   * New Firewall name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class PutFirewallsIdRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PutFirewallsIdUpdateFirewallRequest;

  /**
   * ID of the resource
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

export class PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResourcesServer extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;
}

/**
 * Type of resource referenced
 */
export enum PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum {
  Server = "server",
}

export class PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResources extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  @Type(
    () =>
      PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResourcesServer
  )
  server?: PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResourcesServer;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum;
}

export class PutFirewallsIdFirewallResponseFirewallAppliedToLabelSelector extends SpeakeasyBase {
  /**
   * Label selector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selector" })
  selector: string;
}

export class PutFirewallsIdFirewallResponseFirewallAppliedToServer extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;
}

/**
 * Type of resource referenced
 */
export enum PutFirewallsIdFirewallResponseFirewallAppliedToTypeEnum {
  Server = "server",
  LabelSelector = "label_selector",
}

export class PutFirewallsIdFirewallResponseFirewallAppliedTo extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResources,
  })
  @Expose({ name: "applied_to_resources" })
  @Type(() => PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResources)
  appliedToResources?: PutFirewallsIdFirewallResponseFirewallAppliedToAppliedToResources[];

  @SpeakeasyMetadata()
  @Expose({ name: "label_selector" })
  @Type(() => PutFirewallsIdFirewallResponseFirewallAppliedToLabelSelector)
  labelSelector?: PutFirewallsIdFirewallResponseFirewallAppliedToLabelSelector;

  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  @Type(() => PutFirewallsIdFirewallResponseFirewallAppliedToServer)
  server?: PutFirewallsIdFirewallResponseFirewallAppliedToServer;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PutFirewallsIdFirewallResponseFirewallAppliedToTypeEnum;
}

/**
 * Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
 */
export enum PutFirewallsIdFirewallResponseFirewallRuleDirectionEnum {
  In = "in",
  Out = "out",
}

/**
 * Type of traffic to allow
 */
export enum PutFirewallsIdFirewallResponseFirewallRuleProtocolEnum {
  Tcp = "tcp",
  Udp = "udp",
  Icmp = "icmp",
  Esp = "esp",
  Gre = "gre",
}

export class PutFirewallsIdFirewallResponseFirewallRule extends SpeakeasyBase {
  /**
   * Description of the Rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_ips" })
  destinationIps?: string[];

  /**
   * Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction: PutFirewallsIdFirewallResponseFirewallRuleDirectionEnum;

  /**
   * Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * Type of traffic to allow
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol: PutFirewallsIdFirewallResponseFirewallRuleProtocolEnum;

  /**
   * List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_ips" })
  sourceIps?: string[];
}

export class PutFirewallsIdFirewallResponseFirewall extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PutFirewallsIdFirewallResponseFirewallAppliedTo,
  })
  @Expose({ name: "applied_to" })
  @Type(() => PutFirewallsIdFirewallResponseFirewallAppliedTo)
  appliedTo: PutFirewallsIdFirewallResponseFirewallAppliedTo[];

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata({ elemType: PutFirewallsIdFirewallResponseFirewallRule })
  @Expose({ name: "rules" })
  @Type(() => PutFirewallsIdFirewallResponseFirewallRule)
  rules: PutFirewallsIdFirewallResponseFirewallRule[];
}

/**
 * The `firewall` key contains the Firewall that was just updated
 */
export class PutFirewallsIdFirewallResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "firewall" })
  @Type(() => PutFirewallsIdFirewallResponseFirewall)
  firewall: PutFirewallsIdFirewallResponseFirewall;
}

export class PutFirewallsIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The `firewall` key contains the Firewall that was just updated
   */
  @SpeakeasyMetadata()
  firewallResponse?: PutFirewallsIdFirewallResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
