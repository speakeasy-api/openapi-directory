// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StartInstancesResultStartingInstancesCurrentStateNameEnum - The current state of the instance.
type StartInstancesResultStartingInstancesCurrentStateNameEnum string

const (
	StartInstancesResultStartingInstancesCurrentStateNameEnumPending      StartInstancesResultStartingInstancesCurrentStateNameEnum = "pending"
	StartInstancesResultStartingInstancesCurrentStateNameEnumRunning      StartInstancesResultStartingInstancesCurrentStateNameEnum = "running"
	StartInstancesResultStartingInstancesCurrentStateNameEnumShuttingDown StartInstancesResultStartingInstancesCurrentStateNameEnum = "shutting-down"
	StartInstancesResultStartingInstancesCurrentStateNameEnumTerminated   StartInstancesResultStartingInstancesCurrentStateNameEnum = "terminated"
	StartInstancesResultStartingInstancesCurrentStateNameEnumStopping     StartInstancesResultStartingInstancesCurrentStateNameEnum = "stopping"
	StartInstancesResultStartingInstancesCurrentStateNameEnumStopped      StartInstancesResultStartingInstancesCurrentStateNameEnum = "stopped"
)

func (e StartInstancesResultStartingInstancesCurrentStateNameEnum) ToPointer() *StartInstancesResultStartingInstancesCurrentStateNameEnum {
	return &e
}

func (e *StartInstancesResultStartingInstancesCurrentStateNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "running":
		fallthrough
	case "shutting-down":
		fallthrough
	case "terminated":
		fallthrough
	case "stopping":
		fallthrough
	case "stopped":
		*e = StartInstancesResultStartingInstancesCurrentStateNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartInstancesResultStartingInstancesCurrentStateNameEnum: %v", v)
	}
}

// StartInstancesResultStartingInstancesCurrentState - The current state of the instance.
type StartInstancesResultStartingInstancesCurrentState struct {
	Code *int64
	Name *StartInstancesResultStartingInstancesCurrentStateNameEnum
}

// StartInstancesResultStartingInstancesPreviousStateNameEnum - The current state of the instance.
type StartInstancesResultStartingInstancesPreviousStateNameEnum string

const (
	StartInstancesResultStartingInstancesPreviousStateNameEnumPending      StartInstancesResultStartingInstancesPreviousStateNameEnum = "pending"
	StartInstancesResultStartingInstancesPreviousStateNameEnumRunning      StartInstancesResultStartingInstancesPreviousStateNameEnum = "running"
	StartInstancesResultStartingInstancesPreviousStateNameEnumShuttingDown StartInstancesResultStartingInstancesPreviousStateNameEnum = "shutting-down"
	StartInstancesResultStartingInstancesPreviousStateNameEnumTerminated   StartInstancesResultStartingInstancesPreviousStateNameEnum = "terminated"
	StartInstancesResultStartingInstancesPreviousStateNameEnumStopping     StartInstancesResultStartingInstancesPreviousStateNameEnum = "stopping"
	StartInstancesResultStartingInstancesPreviousStateNameEnumStopped      StartInstancesResultStartingInstancesPreviousStateNameEnum = "stopped"
)

func (e StartInstancesResultStartingInstancesPreviousStateNameEnum) ToPointer() *StartInstancesResultStartingInstancesPreviousStateNameEnum {
	return &e
}

func (e *StartInstancesResultStartingInstancesPreviousStateNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "running":
		fallthrough
	case "shutting-down":
		fallthrough
	case "terminated":
		fallthrough
	case "stopping":
		fallthrough
	case "stopped":
		*e = StartInstancesResultStartingInstancesPreviousStateNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartInstancesResultStartingInstancesPreviousStateNameEnum: %v", v)
	}
}

// StartInstancesResultStartingInstancesPreviousState - The previous state of the instance.
type StartInstancesResultStartingInstancesPreviousState struct {
	Code *int64
	Name *StartInstancesResultStartingInstancesPreviousStateNameEnum
}

// StartInstancesResultStartingInstances - Describes an instance state change.
type StartInstancesResultStartingInstances struct {
	CurrentState  *StartInstancesResultStartingInstancesCurrentState
	InstanceID    *string
	PreviousState *StartInstancesResultStartingInstancesPreviousState
}

// StartInstancesResult - Success
type StartInstancesResult struct {
	StartingInstances []StartInstancesResultStartingInstances
}
