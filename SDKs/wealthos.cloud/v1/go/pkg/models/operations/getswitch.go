// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetSwitchSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

type GetSwitchRequest struct {
	// If set to `true` details of individual buy and sell (child) transactions will be included
	IncludeDetails *bool `queryParam:"style=form,explode=true,name=include_details"`
	// Unique identifier of the switch instruction
	SwitchTransactionID string `pathParam:"style=simple,explode=false,name=switch_transaction_id"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// GetSwitch500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type GetSwitch500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetSwitch429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type GetSwitch429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetSwitch409ApplicationJSONStatusEnum - Current status of the original request
type GetSwitch409ApplicationJSONStatusEnum string

const (
	GetSwitch409ApplicationJSONStatusEnumProcessing GetSwitch409ApplicationJSONStatusEnum = "PROCESSING"
	GetSwitch409ApplicationJSONStatusEnumComplete   GetSwitch409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e *GetSwitch409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = GetSwitch409ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSwitch409ApplicationJSONStatusEnum: %s", s)
	}
}

// GetSwitch409ApplicationJSON - Duplicate request
type GetSwitch409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status GetSwitch409ApplicationJSONStatusEnum `json:"status"`
}

// GetSwitch404ApplicationJSON - The specified resource was not found
type GetSwitch404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetSwitch403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type GetSwitch403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetSwitch401ApplicationJSON - You do not have permissions to access this resource.
type GetSwitch401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetSwitch400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type GetSwitch400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum - Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
type GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum string

const (
	GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnumPercentage GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "percentage"
	GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnumUnit       GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "unit"
	GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnumValue      GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "value"
)

func (e *GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "percentage":
		fallthrough
	case "unit":
		fallthrough
	case "value":
		*e = GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum: %s", s)
	}
}

// GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest - Each individual buy side and sell side instruction of the Switch request
type GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest struct {
	// Identifier of the investment product sold or bought. If the instruction is to use a cash holding (relevant only for sell instruction) this must be `cash`
	InvestmentProductID string `json:"investment_product_id"`
	// Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
	Mode GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum `json:"mode"`
	// value according to the mode. e.g. mode `percentage` and value `10` implies 10%
	Value string `json:"value"`
}

// GetSwitch200ApplicationJSONOriginEnum - Describe the origin from where the switch transaction is triggered
type GetSwitch200ApplicationJSONOriginEnum string

const (
	GetSwitch200ApplicationJSONOriginEnumAPI       GetSwitch200ApplicationJSONOriginEnum = "api"
	GetSwitch200ApplicationJSONOriginEnumRebalance GetSwitch200ApplicationJSONOriginEnum = "rebalance"
)

func (e *GetSwitch200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api":
		fallthrough
	case "rebalance":
		*e = GetSwitch200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSwitch200ApplicationJSONOriginEnum: %s", s)
	}
}

// GetSwitch200ApplicationJSONStatusEnum - Status of the Switch instruction
type GetSwitch200ApplicationJSONStatusEnum string

const (
	GetSwitch200ApplicationJSONStatusEnumInitiated      GetSwitch200ApplicationJSONStatusEnum = "initiated"
	GetSwitch200ApplicationJSONStatusEnumSellInProgress GetSwitch200ApplicationJSONStatusEnum = "sell_in_progress"
	GetSwitch200ApplicationJSONStatusEnumBuyInProgress  GetSwitch200ApplicationJSONStatusEnum = "buy_in_progress"
	GetSwitch200ApplicationJSONStatusEnumCompleted      GetSwitch200ApplicationJSONStatusEnum = "completed"
	GetSwitch200ApplicationJSONStatusEnumFailed         GetSwitch200ApplicationJSONStatusEnum = "failed"
)

func (e *GetSwitch200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "initiated":
		fallthrough
	case "sell_in_progress":
		fallthrough
	case "buy_in_progress":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = GetSwitch200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSwitch200ApplicationJSONStatusEnum: %s", s)
	}
}

// GetSwitch200ApplicationJSONTransactionsSideEnum - Side of the transaction
type GetSwitch200ApplicationJSONTransactionsSideEnum string

const (
	GetSwitch200ApplicationJSONTransactionsSideEnumBuy  GetSwitch200ApplicationJSONTransactionsSideEnum = "buy"
	GetSwitch200ApplicationJSONTransactionsSideEnumSell GetSwitch200ApplicationJSONTransactionsSideEnum = "sell"
)

func (e *GetSwitch200ApplicationJSONTransactionsSideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "buy":
		fallthrough
	case "sell":
		*e = GetSwitch200ApplicationJSONTransactionsSideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSwitch200ApplicationJSONTransactionsSideEnum: %s", s)
	}
}

type GetSwitch200ApplicationJSONTransactionsStatusEnum string

const (
	GetSwitch200ApplicationJSONTransactionsStatusEnumInstructed GetSwitch200ApplicationJSONTransactionsStatusEnum = "instructed"
	GetSwitch200ApplicationJSONTransactionsStatusEnumPriced     GetSwitch200ApplicationJSONTransactionsStatusEnum = "priced"
	GetSwitch200ApplicationJSONTransactionsStatusEnumSettled    GetSwitch200ApplicationJSONTransactionsStatusEnum = "settled"
	GetSwitch200ApplicationJSONTransactionsStatusEnumRejected   GetSwitch200ApplicationJSONTransactionsStatusEnum = "rejected"
)

func (e *GetSwitch200ApplicationJSONTransactionsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "instructed":
		fallthrough
	case "priced":
		fallthrough
	case "settled":
		fallthrough
	case "rejected":
		*e = GetSwitch200ApplicationJSONTransactionsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSwitch200ApplicationJSONTransactionsStatusEnum: %s", s)
	}
}

type GetSwitch200ApplicationJSONTransactions struct {
	// Date and time of transaction creation
	CreatedAt time.Time `json:"created_at"`
	// Identifier of investment product that is bought or sold.
	InvestmentProductID string `json:"investment_product_id"`
	// Executed price of the transaction
	Price *string `json:"price,omitempty"`
	// quantity (in units)
	Quantity *string `json:"quantity,omitempty"`
	// Side of the transaction
	Side   GetSwitch200ApplicationJSONTransactionsSideEnum   `json:"side"`
	Status GetSwitch200ApplicationJSONTransactionsStatusEnum `json:"status"`
	// Unique identifier of the transaction
	TransactionID string `json:"transaction_id"`
	// Monetary value of the transaction
	Value *string `json:"value,omitempty"`
}

// GetSwitch200ApplicationJSON - success
type GetSwitch200ApplicationJSON struct {
	BuyInstructions []GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest `json:"buy_instructions"`
	// Will indicate the date where this record was created
	CreatedAt *string `json:"created_at,omitempty"`
	// Describe the origin from where the switch transaction is triggered
	Origin GetSwitch200ApplicationJSONOriginEnum `json:"origin"`
	// Identifier of the pot the instruction is sent to
	PotID string `json:"pot_id"`
	// Failure reason (shown only for switch transactions in `failed` state)
	Reason           *string                                                                 `json:"reason,omitempty"`
	SellInstructions []GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest `json:"sell_instructions"`
	// Status of the Switch instruction
	Status GetSwitch200ApplicationJSONStatusEnum `json:"status"`
	// Unique identifier of the switch instruction
	SwitchTransactionID string `json:"switch_transaction_id"`
	// Array with status of all buy and sell transactions. Will be sent only if `include_details` = true.
	Transactions []GetSwitch200ApplicationJSONTransactions `json:"transactions,omitempty"`
}

type GetSwitchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	GetSwitch200ApplicationJSONObject *GetSwitch200ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	GetSwitch400ApplicationJSONObject *GetSwitch400ApplicationJSON
	// You do not have permissions to access this resource.
	GetSwitch401ApplicationJSONObject *GetSwitch401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	GetSwitch403ApplicationJSONObject *GetSwitch403ApplicationJSON
	// The specified resource was not found
	GetSwitch404ApplicationJSONObject *GetSwitch404ApplicationJSON
	// Duplicate request
	GetSwitch409ApplicationJSONObject *GetSwitch409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	GetSwitch429ApplicationJSONObject *GetSwitch429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	GetSwitch500ApplicationJSONObject *GetSwitch500ApplicationJSON
}
