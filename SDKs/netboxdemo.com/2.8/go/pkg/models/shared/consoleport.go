// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConsolePortConnectionStatusLabelEnum string

const (
	ConsolePortConnectionStatusLabelEnumNotConnected ConsolePortConnectionStatusLabelEnum = "Not Connected"
	ConsolePortConnectionStatusLabelEnumConnected    ConsolePortConnectionStatusLabelEnum = "Connected"
)

func (e *ConsolePortConnectionStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Not Connected":
		fallthrough
	case "Connected":
		*e = ConsolePortConnectionStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsolePortConnectionStatusLabelEnum: %s", s)
	}
}

type ConsolePortConnectionStatusValueEnum string

const (
	ConsolePortConnectionStatusValueEnumFalse ConsolePortConnectionStatusValueEnum = "false"
	ConsolePortConnectionStatusValueEnumTrue  ConsolePortConnectionStatusValueEnum = "true"
)

func (e *ConsolePortConnectionStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = ConsolePortConnectionStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsolePortConnectionStatusValueEnum: %s", s)
	}
}

type ConsolePortConnectionStatus struct {
	Label ConsolePortConnectionStatusLabelEnum `json:"label"`
	Value ConsolePortConnectionStatusValueEnum `json:"value"`
}

type ConsolePortTypeLabelEnum string

const (
	ConsolePortTypeLabelEnumDe9       ConsolePortTypeLabelEnum = "DE-9"
	ConsolePortTypeLabelEnumDb25      ConsolePortTypeLabelEnum = "DB-25"
	ConsolePortTypeLabelEnumRj11      ConsolePortTypeLabelEnum = "RJ-11"
	ConsolePortTypeLabelEnumRj12      ConsolePortTypeLabelEnum = "RJ-12"
	ConsolePortTypeLabelEnumRj45      ConsolePortTypeLabelEnum = "RJ-45"
	ConsolePortTypeLabelEnumUsbTypeA  ConsolePortTypeLabelEnum = "USB Type A"
	ConsolePortTypeLabelEnumUsbTypeB  ConsolePortTypeLabelEnum = "USB Type B"
	ConsolePortTypeLabelEnumUsbTypeC  ConsolePortTypeLabelEnum = "USB Type C"
	ConsolePortTypeLabelEnumUsbMiniA  ConsolePortTypeLabelEnum = "USB Mini A"
	ConsolePortTypeLabelEnumUsbMiniB  ConsolePortTypeLabelEnum = "USB Mini B"
	ConsolePortTypeLabelEnumUsbMicroA ConsolePortTypeLabelEnum = "USB Micro A"
	ConsolePortTypeLabelEnumUsbMicroB ConsolePortTypeLabelEnum = "USB Micro B"
	ConsolePortTypeLabelEnumOther     ConsolePortTypeLabelEnum = "Other"
)

func (e *ConsolePortTypeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DE-9":
		fallthrough
	case "DB-25":
		fallthrough
	case "RJ-11":
		fallthrough
	case "RJ-12":
		fallthrough
	case "RJ-45":
		fallthrough
	case "USB Type A":
		fallthrough
	case "USB Type B":
		fallthrough
	case "USB Type C":
		fallthrough
	case "USB Mini A":
		fallthrough
	case "USB Mini B":
		fallthrough
	case "USB Micro A":
		fallthrough
	case "USB Micro B":
		fallthrough
	case "Other":
		*e = ConsolePortTypeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsolePortTypeLabelEnum: %s", s)
	}
}

type ConsolePortTypeValueEnum string

const (
	ConsolePortTypeValueEnumDe9       ConsolePortTypeValueEnum = "de-9"
	ConsolePortTypeValueEnumDb25      ConsolePortTypeValueEnum = "db-25"
	ConsolePortTypeValueEnumRj11      ConsolePortTypeValueEnum = "rj-11"
	ConsolePortTypeValueEnumRj12      ConsolePortTypeValueEnum = "rj-12"
	ConsolePortTypeValueEnumRj45      ConsolePortTypeValueEnum = "rj-45"
	ConsolePortTypeValueEnumUsbA      ConsolePortTypeValueEnum = "usb-a"
	ConsolePortTypeValueEnumUsbB      ConsolePortTypeValueEnum = "usb-b"
	ConsolePortTypeValueEnumUsbC      ConsolePortTypeValueEnum = "usb-c"
	ConsolePortTypeValueEnumUsbMiniA  ConsolePortTypeValueEnum = "usb-mini-a"
	ConsolePortTypeValueEnumUsbMiniB  ConsolePortTypeValueEnum = "usb-mini-b"
	ConsolePortTypeValueEnumUsbMicroA ConsolePortTypeValueEnum = "usb-micro-a"
	ConsolePortTypeValueEnumUsbMicroB ConsolePortTypeValueEnum = "usb-micro-b"
	ConsolePortTypeValueEnumOther     ConsolePortTypeValueEnum = "other"
)

func (e *ConsolePortTypeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "de-9":
		fallthrough
	case "db-25":
		fallthrough
	case "rj-11":
		fallthrough
	case "rj-12":
		fallthrough
	case "rj-45":
		fallthrough
	case "usb-a":
		fallthrough
	case "usb-b":
		fallthrough
	case "usb-c":
		fallthrough
	case "usb-mini-a":
		fallthrough
	case "usb-mini-b":
		fallthrough
	case "usb-micro-a":
		fallthrough
	case "usb-micro-b":
		fallthrough
	case "other":
		*e = ConsolePortTypeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsolePortTypeValueEnum: %s", s)
	}
}

type ConsolePortType struct {
	Label ConsolePortTypeLabelEnum `json:"label"`
	Value ConsolePortTypeValueEnum `json:"value"`
}

type ConsolePort struct {
	Cable *NestedCable `json:"cable,omitempty"`
	// Return the appropriate serializer for the type of connected object.
	//
	ConnectedEndpoint     map[string]string            `json:"connected_endpoint,omitempty"`
	ConnectedEndpointType *string                      `json:"connected_endpoint_type,omitempty"`
	ConnectionStatus      *ConsolePortConnectionStatus `json:"connection_status,omitempty"`
	Description           *string                      `json:"description,omitempty"`
	Device                NestedDevice                 `json:"device"`
	ID                    *int64                       `json:"id,omitempty"`
	Name                  string                       `json:"name"`
	Tags                  []string                     `json:"tags,omitempty"`
	Type                  *ConsolePortType             `json:"type,omitempty"`
}
