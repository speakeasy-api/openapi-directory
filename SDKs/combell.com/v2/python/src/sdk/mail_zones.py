"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MailZones:
    r"""Manage your mail zones."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def configure_alias(self, request: operations.ConfigureAliasRequest) -> operations.ConfigureAliasResponse:
        r"""Configure a alias"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureAliasRequest, base_url, '/mailzones/{domainName}/aliases/{emailAddress}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_alias_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureAliasRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def configure_anti_spam(self, request: operations.ConfigureAntiSpamRequest) -> operations.ConfigureAntiSpamResponse:
        r"""Configure anti-spam for mail zone"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureAntiSpamRequest, base_url, '/mailzones/{domainName}/antispam', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_anti_spam_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureAntiSpamRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureAntiSpamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def configure_smtp_domain(self, request: operations.ConfigureSMTPDomainRequest) -> operations.ConfigureSMTPDomainResponse:
        r"""Configure an extra smtp domain"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureSMTPDomainRequest, base_url, '/mailzones/{domainName}/smtpdomains/{hostname}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_smtp_domain_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureSMTPDomainRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureSMTPDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def create_alias(self, request: operations.CreateAliasRequest) -> operations.CreateAliasResponse:
        r"""Create a new alias"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAliasRequest, base_url, '/mailzones/{domainName}/aliases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_alias_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateAliasRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def create_catch_all(self, request: operations.CreateCatchAllRequest) -> operations.CreateCatchAllResponse:
        r"""Create a catch-all on the mail zone"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateCatchAllRequest, base_url, '/mailzones/{domainName}/catchall', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_catch_all_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateCatchAllRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCatchAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def create_smtp_domain(self, request: operations.CreateSMTPDomainRequest) -> operations.CreateSMTPDomainResponse:
        r"""Create an extra smtp domain"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateSMTPDomainRequest, base_url, '/mailzones/{domainName}/smtpdomains', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_smtp_domain_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateSMTPDomainRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSMTPDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def delete_alias(self, request: operations.DeleteAliasRequest) -> operations.DeleteAliasResponse:
        r"""Delete a alias"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAliasRequest, base_url, '/mailzones/{domainName}/aliases/{emailAddress}', request)
        
        query_params = utils.get_query_params(operations.DeleteAliasRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_catch_all(self, request: operations.DeleteCatchAllRequest) -> operations.DeleteCatchAllResponse:
        r"""Delete a catch-all on the mail zone"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCatchAllRequest, base_url, '/mailzones/{domainName}/catchall/{emailAddress}', request)
        
        query_params = utils.get_query_params(operations.DeleteCatchAllRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCatchAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_smtp_domain(self, request: operations.DeleteSMTPDomainRequest) -> operations.DeleteSMTPDomainResponse:
        r"""Delete an extra smtp domain"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSMTPDomainRequest, base_url, '/mailzones/{domainName}/smtpdomains/{hostname}', request)
        
        query_params = utils.get_query_params(operations.DeleteSMTPDomainRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSMTPDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_mail_zone(self, request: operations.GetMailZoneRequest) -> operations.GetMailZoneResponse:
        r"""Get the mail zone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMailZoneRequest, base_url, '/mailzones/{domainName}', request)
        
        query_params = utils.get_query_params(operations.GetMailZoneRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMailZoneResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MailZone])
                res.mail_zone = out

        return res

    