// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type BankAccountV3AccountIdentificationType string

const (
	BankAccountV3AccountIdentificationTypeAULocalAccountIdentification      BankAccountV3AccountIdentificationType = "AULocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeBRLocalAccountIdentification      BankAccountV3AccountIdentificationType = "BRLocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeCALocalAccountIdentification      BankAccountV3AccountIdentificationType = "CALocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeCZLocalAccountIdentification      BankAccountV3AccountIdentificationType = "CZLocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeDKLocalAccountIdentification      BankAccountV3AccountIdentificationType = "DKLocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeHULocalAccountIdentification      BankAccountV3AccountIdentificationType = "HULocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeIbanAccountIdentification         BankAccountV3AccountIdentificationType = "IbanAccountIdentification"
	BankAccountV3AccountIdentificationTypeNOLocalAccountIdentification      BankAccountV3AccountIdentificationType = "NOLocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeNumberAndBicAccountIdentification BankAccountV3AccountIdentificationType = "NumberAndBicAccountIdentification"
	BankAccountV3AccountIdentificationTypePLLocalAccountIdentification      BankAccountV3AccountIdentificationType = "PLLocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeSELocalAccountIdentification      BankAccountV3AccountIdentificationType = "SELocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeSGLocalAccountIdentification      BankAccountV3AccountIdentificationType = "SGLocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeUKLocalAccountIdentification      BankAccountV3AccountIdentificationType = "UKLocalAccountIdentification"
	BankAccountV3AccountIdentificationTypeUSLocalAccountIdentification      BankAccountV3AccountIdentificationType = "USLocalAccountIdentification"
)

type BankAccountV3AccountIdentification struct {
	AULocalAccountIdentification      *AULocalAccountIdentification
	BRLocalAccountIdentification      *BRLocalAccountIdentification
	CALocalAccountIdentification      *CALocalAccountIdentification
	CZLocalAccountIdentification      *CZLocalAccountIdentification
	DKLocalAccountIdentification      *DKLocalAccountIdentification
	HULocalAccountIdentification      *HULocalAccountIdentification
	IbanAccountIdentification         *IbanAccountIdentification
	NOLocalAccountIdentification      *NOLocalAccountIdentification
	NumberAndBicAccountIdentification *NumberAndBicAccountIdentification
	PLLocalAccountIdentification      *PLLocalAccountIdentification
	SELocalAccountIdentification      *SELocalAccountIdentification
	SGLocalAccountIdentification      *SGLocalAccountIdentification
	UKLocalAccountIdentification      *UKLocalAccountIdentification
	USLocalAccountIdentification      *USLocalAccountIdentification

	Type BankAccountV3AccountIdentificationType
}

func CreateBankAccountV3AccountIdentificationAULocalAccountIdentification(auLocalAccountIdentification AULocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeAULocalAccountIdentification

	return BankAccountV3AccountIdentification{
		AULocalAccountIdentification: &auLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationBRLocalAccountIdentification(brLocalAccountIdentification BRLocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeBRLocalAccountIdentification

	return BankAccountV3AccountIdentification{
		BRLocalAccountIdentification: &brLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationCALocalAccountIdentification(caLocalAccountIdentification CALocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeCALocalAccountIdentification

	return BankAccountV3AccountIdentification{
		CALocalAccountIdentification: &caLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationCZLocalAccountIdentification(czLocalAccountIdentification CZLocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeCZLocalAccountIdentification

	return BankAccountV3AccountIdentification{
		CZLocalAccountIdentification: &czLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationDKLocalAccountIdentification(dkLocalAccountIdentification DKLocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeDKLocalAccountIdentification

	return BankAccountV3AccountIdentification{
		DKLocalAccountIdentification: &dkLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationHULocalAccountIdentification(huLocalAccountIdentification HULocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeHULocalAccountIdentification

	return BankAccountV3AccountIdentification{
		HULocalAccountIdentification: &huLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationIbanAccountIdentification(ibanAccountIdentification IbanAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeIbanAccountIdentification

	return BankAccountV3AccountIdentification{
		IbanAccountIdentification: &ibanAccountIdentification,
		Type:                      typ,
	}
}

func CreateBankAccountV3AccountIdentificationNOLocalAccountIdentification(noLocalAccountIdentification NOLocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeNOLocalAccountIdentification

	return BankAccountV3AccountIdentification{
		NOLocalAccountIdentification: &noLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationNumberAndBicAccountIdentification(numberAndBicAccountIdentification NumberAndBicAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeNumberAndBicAccountIdentification

	return BankAccountV3AccountIdentification{
		NumberAndBicAccountIdentification: &numberAndBicAccountIdentification,
		Type:                              typ,
	}
}

func CreateBankAccountV3AccountIdentificationPLLocalAccountIdentification(plLocalAccountIdentification PLLocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypePLLocalAccountIdentification

	return BankAccountV3AccountIdentification{
		PLLocalAccountIdentification: &plLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationSELocalAccountIdentification(seLocalAccountIdentification SELocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeSELocalAccountIdentification

	return BankAccountV3AccountIdentification{
		SELocalAccountIdentification: &seLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationSGLocalAccountIdentification(sgLocalAccountIdentification SGLocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeSGLocalAccountIdentification

	return BankAccountV3AccountIdentification{
		SGLocalAccountIdentification: &sgLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationUKLocalAccountIdentification(ukLocalAccountIdentification UKLocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeUKLocalAccountIdentification

	return BankAccountV3AccountIdentification{
		UKLocalAccountIdentification: &ukLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountV3AccountIdentificationUSLocalAccountIdentification(usLocalAccountIdentification USLocalAccountIdentification) BankAccountV3AccountIdentification {
	typ := BankAccountV3AccountIdentificationTypeUSLocalAccountIdentification

	return BankAccountV3AccountIdentification{
		USLocalAccountIdentification: &usLocalAccountIdentification,
		Type:                         typ,
	}
}

func (u *BankAccountV3AccountIdentification) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	auLocalAccountIdentification := new(AULocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&auLocalAccountIdentification); err == nil {
		u.AULocalAccountIdentification = auLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeAULocalAccountIdentification
		return nil
	}

	brLocalAccountIdentification := new(BRLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&brLocalAccountIdentification); err == nil {
		u.BRLocalAccountIdentification = brLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeBRLocalAccountIdentification
		return nil
	}

	caLocalAccountIdentification := new(CALocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&caLocalAccountIdentification); err == nil {
		u.CALocalAccountIdentification = caLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeCALocalAccountIdentification
		return nil
	}

	czLocalAccountIdentification := new(CZLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&czLocalAccountIdentification); err == nil {
		u.CZLocalAccountIdentification = czLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeCZLocalAccountIdentification
		return nil
	}

	dkLocalAccountIdentification := new(DKLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dkLocalAccountIdentification); err == nil {
		u.DKLocalAccountIdentification = dkLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeDKLocalAccountIdentification
		return nil
	}

	huLocalAccountIdentification := new(HULocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&huLocalAccountIdentification); err == nil {
		u.HULocalAccountIdentification = huLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeHULocalAccountIdentification
		return nil
	}

	ibanAccountIdentification := new(IbanAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ibanAccountIdentification); err == nil {
		u.IbanAccountIdentification = ibanAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeIbanAccountIdentification
		return nil
	}

	noLocalAccountIdentification := new(NOLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&noLocalAccountIdentification); err == nil {
		u.NOLocalAccountIdentification = noLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeNOLocalAccountIdentification
		return nil
	}

	numberAndBicAccountIdentification := new(NumberAndBicAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&numberAndBicAccountIdentification); err == nil {
		u.NumberAndBicAccountIdentification = numberAndBicAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeNumberAndBicAccountIdentification
		return nil
	}

	plLocalAccountIdentification := new(PLLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&plLocalAccountIdentification); err == nil {
		u.PLLocalAccountIdentification = plLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypePLLocalAccountIdentification
		return nil
	}

	seLocalAccountIdentification := new(SELocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&seLocalAccountIdentification); err == nil {
		u.SELocalAccountIdentification = seLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeSELocalAccountIdentification
		return nil
	}

	sgLocalAccountIdentification := new(SGLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sgLocalAccountIdentification); err == nil {
		u.SGLocalAccountIdentification = sgLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeSGLocalAccountIdentification
		return nil
	}

	ukLocalAccountIdentification := new(UKLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ukLocalAccountIdentification); err == nil {
		u.UKLocalAccountIdentification = ukLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeUKLocalAccountIdentification
		return nil
	}

	usLocalAccountIdentification := new(USLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&usLocalAccountIdentification); err == nil {
		u.USLocalAccountIdentification = usLocalAccountIdentification
		u.Type = BankAccountV3AccountIdentificationTypeUSLocalAccountIdentification
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BankAccountV3AccountIdentification) MarshalJSON() ([]byte, error) {
	if u.AULocalAccountIdentification != nil {
		return json.Marshal(u.AULocalAccountIdentification)
	}

	if u.BRLocalAccountIdentification != nil {
		return json.Marshal(u.BRLocalAccountIdentification)
	}

	if u.CALocalAccountIdentification != nil {
		return json.Marshal(u.CALocalAccountIdentification)
	}

	if u.CZLocalAccountIdentification != nil {
		return json.Marshal(u.CZLocalAccountIdentification)
	}

	if u.DKLocalAccountIdentification != nil {
		return json.Marshal(u.DKLocalAccountIdentification)
	}

	if u.HULocalAccountIdentification != nil {
		return json.Marshal(u.HULocalAccountIdentification)
	}

	if u.IbanAccountIdentification != nil {
		return json.Marshal(u.IbanAccountIdentification)
	}

	if u.NOLocalAccountIdentification != nil {
		return json.Marshal(u.NOLocalAccountIdentification)
	}

	if u.NumberAndBicAccountIdentification != nil {
		return json.Marshal(u.NumberAndBicAccountIdentification)
	}

	if u.PLLocalAccountIdentification != nil {
		return json.Marshal(u.PLLocalAccountIdentification)
	}

	if u.SELocalAccountIdentification != nil {
		return json.Marshal(u.SELocalAccountIdentification)
	}

	if u.SGLocalAccountIdentification != nil {
		return json.Marshal(u.SGLocalAccountIdentification)
	}

	if u.UKLocalAccountIdentification != nil {
		return json.Marshal(u.UKLocalAccountIdentification)
	}

	if u.USLocalAccountIdentification != nil {
		return json.Marshal(u.USLocalAccountIdentification)
	}

	return nil, nil
}

type BankAccountV3 struct {
	AccountHolder PartyIdentification2 `json:"accountHolder"`
	// Contains the bank account details. The fields required in this object depend on the country of the bank account and the currency of the transfer.
	AccountIdentification BankAccountV3AccountIdentification `json:"accountIdentification"`
}
