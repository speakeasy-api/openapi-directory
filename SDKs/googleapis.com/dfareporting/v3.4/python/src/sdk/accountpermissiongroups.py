"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AccountPermissionGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_account_permission_groups_get(self, request: operations.DfareportingAccountPermissionGroupsGetRequest, security: operations.DfareportingAccountPermissionGroupsGetSecurity) -> operations.DfareportingAccountPermissionGroupsGetResponse:
        r"""Gets one account permission group by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAccountPermissionGroupsGetRequest, base_url, '/userprofiles/{profileId}/accountPermissionGroups/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingAccountPermissionGroupsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAccountPermissionGroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountPermissionGroup])
                res.account_permission_group = out

        return res

    def dfareporting_account_permission_groups_list(self, request: operations.DfareportingAccountPermissionGroupsListRequest, security: operations.DfareportingAccountPermissionGroupsListSecurity) -> operations.DfareportingAccountPermissionGroupsListResponse:
        r"""Retrieves the list of account permission groups."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAccountPermissionGroupsListRequest, base_url, '/userprofiles/{profileId}/accountPermissionGroups', request)
        
        query_params = utils.get_query_params(operations.DfareportingAccountPermissionGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAccountPermissionGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountPermissionGroupsListResponse])
                res.account_permission_groups_list_response = out

        return res

    