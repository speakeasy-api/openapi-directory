"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SecurityAndNetworking:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def email_verify(self, request: operations.EmailVerifyRequest) -> operations.EmailVerifyResponse:
        r"""Email Verify
        SMTP based email address verification
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/email-verify'
        
        query_params = utils.get_query_params(operations.EmailVerifyRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EmailVerifyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EmailVerifyResponse])
                res.email_verify_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    def host_reputation(self, request: operations.HostReputationRequest) -> operations.HostReputationResponse:
        r"""Host Reputation
        Check the reputation of an IP address, domain name or URL against a comprehensive list of blacklists and blocklists
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/host-reputation'
        
        query_params = utils.get_query_params(operations.HostReputationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HostReputationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HostReputationResponse])
                res.host_reputation_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    def ip_blocklist(self, request: operations.IPBlocklistRequest) -> operations.IPBlocklistResponse:
        r"""IP Blocklist
        The IP Blocklist API will detect potentially malicious or dangerous IP addresses
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip-blocklist'
        
        query_params = utils.get_query_params(operations.IPBlocklistRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IPBlocklistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IPBlocklistResponse])
                res.ip_blocklist_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    def ip_blocklist_download(self, request: operations.IPBlocklistDownloadRequest) -> operations.IPBlocklistDownloadResponse:
        r"""IP Blocklist Download
        This API is a direct feed to our IP blocklist data
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip-blocklist-download'
        
        query_params = utils.get_query_params(operations.IPBlocklistDownloadRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IPBlocklistDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.ip_blocklist_download_200_application_json_binary_string = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    def ip_probe(self, request: operations.IPProbeRequest) -> operations.IPProbeResponse:
        r"""IP Probe
        Execute a realtime network probe against an IPv4 or IPv6 address
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip-probe'
        
        query_params = utils.get_query_params(operations.IPProbeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IPProbeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IPProbeResponse])
                res.ip_probe_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    