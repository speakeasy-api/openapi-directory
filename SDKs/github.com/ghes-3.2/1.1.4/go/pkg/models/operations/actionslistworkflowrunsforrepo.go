// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ActionsListWorkflowRunsForRepoPathParams struct {
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ActionsListWorkflowRunsForRepoQueryParams struct {
	// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
	Actor *string `queryParam:"style=form,explode=true,name=actor"`
	// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
	Branch *string `queryParam:"style=form,explode=true,name=branch"`
	// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.2/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
	Created *time.Time `queryParam:"style=form,explode=true,name=created"`
	// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
	Event *string `queryParam:"style=form,explode=true,name=event"`
	// If `true` pull requests are omitted from the response (empty array).
	ExcludePullRequests *bool `queryParam:"style=form,explode=true,name=exclude_pull_requests"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
	Status *shared.WorkflowRunStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

type ActionsListWorkflowRunsForRepoRequest struct {
	PathParams  ActionsListWorkflowRunsForRepoPathParams
	QueryParams ActionsListWorkflowRunsForRepoQueryParams
}

// ActionsListWorkflowRunsForRepo200ApplicationJSON - Response
type ActionsListWorkflowRunsForRepo200ApplicationJSON struct {
	TotalCount   int64                `json:"total_count"`
	WorkflowRuns []shared.WorkflowRun `json:"workflow_runs"`
}

type ActionsListWorkflowRunsForRepoResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	ActionsListWorkflowRunsForRepo200ApplicationJSONObject *ActionsListWorkflowRunsForRepo200ApplicationJSON
}
