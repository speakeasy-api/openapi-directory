// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetOpenIDTokenForDeveloperIdentityXAmzTargetEnum
type GetOpenIDTokenForDeveloperIdentityXAmzTargetEnum string

const (
	GetOpenIDTokenForDeveloperIdentityXAmzTargetEnumAwsCognitoIdentityServiceGetOpenIDTokenForDeveloperIdentity GetOpenIDTokenForDeveloperIdentityXAmzTargetEnum = "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"
)

func (e *GetOpenIDTokenForDeveloperIdentityXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity":
		*e = GetOpenIDTokenForDeveloperIdentityXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOpenIDTokenForDeveloperIdentityXAmzTargetEnum: %s", s)
	}
}

type GetOpenIDTokenForDeveloperIdentityHeaders struct {
	XAmzAlgorithm     *string                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetOpenIDTokenForDeveloperIdentityXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetOpenIDTokenForDeveloperIdentityRequest struct {
	Headers GetOpenIDTokenForDeveloperIdentityHeaders
	Request shared.GetOpenIDTokenForDeveloperIdentityInput `request:"mediaType=application/json"`
}

type GetOpenIDTokenForDeveloperIdentityResponse struct {
	ContentType string
	// DeveloperUserAlreadyRegisteredException
	DeveloperUserAlreadyRegisteredException interface{}
	// Success
	GetOpenIDTokenForDeveloperIdentityResponse *shared.GetOpenIDTokenForDeveloperIdentityResponse
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceConflictException
	ResourceConflictException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
