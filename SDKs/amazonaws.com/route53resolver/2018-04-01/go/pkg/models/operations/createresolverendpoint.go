// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateResolverEndpointXAmzTargetEnum
type CreateResolverEndpointXAmzTargetEnum string

const (
	CreateResolverEndpointXAmzTargetEnumRoute53ResolverCreateResolverEndpoint CreateResolverEndpointXAmzTargetEnum = "Route53Resolver.CreateResolverEndpoint"
)

func (e *CreateResolverEndpointXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53Resolver.CreateResolverEndpoint":
		*e = CreateResolverEndpointXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateResolverEndpointXAmzTargetEnum: %s", s)
	}
}

type CreateResolverEndpointRequest struct {
	CreateResolverEndpointRequest shared.CreateResolverEndpointRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    CreateResolverEndpointXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateResolverEndpointResponse struct {
	ContentType string
	// Success
	CreateResolverEndpointResponse *shared.CreateResolverEndpointResponse
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceExistsException
	ResourceExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
