"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LogOperation:
    r"""The request as defined in OpenApi Spec."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The OpenApi Operation Id associated with the request"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The OpenApi Operation name associated with the request"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LogService:
    r"""Apideck service provider associated with request."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Apideck service provider id."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Apideck service provider name."""  
    
class LogUnifiedAPIEnum(str, Enum):
    r"""Which Unified Api request was made to."""
    CRM = 'crm'
    LEAD = 'lead'
    PROXY = 'proxy'
    VAULT = 'vault'
    ACCOUNTING = 'accounting'
    HRIS = 'hris'
    ATS = 'ats'
    ECOMMERCE = 'ecommerce'
    ISSUE_TRACKING = 'issue-tracking'
    POS = 'pos'
    FILE_STORAGE = 'file-storage'
    SMS = 'sms'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Log:
    
    api_style: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_style') }})
    r"""Indicates if the request was made via REST or Graphql endpoint."""  
    base_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_url') }})
    r"""The Apideck base URL the request was made to."""  
    child_request: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('child_request') }})
    r"""Indicates whether or not this is a child or parent request."""  
    consumer_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumer_id') }})
    r"""The consumer Id associated with the request."""  
    duration: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""The entire execution time in milliseconds it took to call the Apideck service provider."""  
    execution: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execution') }})
    r"""The entire execution time in milliseconds it took to make the request."""  
    has_children: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_children') }})
    r"""When request is a parent request, this indicates if there are child requests associated."""  
    http_method: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_method') }})
    r"""HTTP Method of request."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""UUID acting as Request Identifier."""  
    latency: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latency') }})
    r"""Latency added by making this request via Unified Api."""  
    operation: LogOperation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation') }})
    r"""The request as defined in OpenApi Spec."""  
    parent_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_id') }})
    r"""When request is a child request, this UUID indicates it's parent request."""  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The path component of the URI the request was made to."""  
    sandbox: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sandbox') }})
    r"""Indicates whether the request was made using Apidecks sandbox credentials or not."""  
    service: LogService = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service') }})
    r"""Apideck service provider associated with request."""  
    status_code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_code') }})
    r"""HTTP Status code that was returned."""  
    success: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success') }})
    r"""Whether or not the request was successful."""  
    timestamp: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp') }})
    r"""ISO Date and time when the request was made."""  
    unified_api: LogUnifiedAPIEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unified_api') }})
    r"""Which Unified Api request was made to."""  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_message'), 'exclude': lambda f: f is None }})
    r"""If error occurred, this is brief explanation"""  
    source_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_ip'), 'exclude': lambda f: f is None }})
    r"""The IP address of the source of the request."""  
    