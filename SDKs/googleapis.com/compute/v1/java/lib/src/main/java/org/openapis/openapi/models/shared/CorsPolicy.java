/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CorsPolicy - The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard.
 */
public class CorsPolicy {
    /**
     * In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This field translates to the Access-Control-Allow-Credentials header. Default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowCredentials")
    public Boolean allowCredentials;

    public CorsPolicy withAllowCredentials(Boolean allowCredentials) {
        this.allowCredentials = allowCredentials;
        return this;
    }
    
    /**
     * Specifies the content for the Access-Control-Allow-Headers header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowHeaders")
    public String[] allowHeaders;

    public CorsPolicy withAllowHeaders(String[] allowHeaders) {
        this.allowHeaders = allowHeaders;
        return this;
    }
    
    /**
     * Specifies the content for the Access-Control-Allow-Methods header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowMethods")
    public String[] allowMethods;

    public CorsPolicy withAllowMethods(String[] allowMethods) {
        this.allowMethods = allowMethods;
        return this;
    }
    
    /**
     * Specifies a regular expression that matches allowed origins. For more information about the regular expression syntax, see Syntax. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowOriginRegexes")
    public String[] allowOriginRegexes;

    public CorsPolicy withAllowOriginRegexes(String[] allowOriginRegexes) {
        this.allowOriginRegexes = allowOriginRegexes;
        return this;
    }
    
    /**
     * Specifies the list of origins that is allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowOrigins")
    public String[] allowOrigins;

    public CorsPolicy withAllowOrigins(String[] allowOrigins) {
        this.allowOrigins = allowOrigins;
        return this;
    }
    
    /**
     * If true, the setting specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;

    public CorsPolicy withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * Specifies the content for the Access-Control-Expose-Headers header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exposeHeaders")
    public String[] exposeHeaders;

    public CorsPolicy withExposeHeaders(String[] exposeHeaders) {
        this.exposeHeaders = exposeHeaders;
        return this;
    }
    
    /**
     * Specifies how long results of a preflight request can be cached in seconds. This field translates to the Access-Control-Max-Age header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxAge")
    public Integer maxAge;

    public CorsPolicy withMaxAge(Integer maxAge) {
        this.maxAge = maxAge;
        return this;
    }
    
    public CorsPolicy(){}
}
