"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyMetadata = exports.KeyMetadataCustomerMasterKeySpecEnum = void 0;
var utils_1 = require("../../../internal/utils");
var expirationmodeltypeenum_1 = require("./expirationmodeltypeenum");
var keymanagertypeenum_1 = require("./keymanagertypeenum");
var keyspecenum_1 = require("./keyspecenum");
var keystateenum_1 = require("./keystateenum");
var keyusagetypeenum_1 = require("./keyusagetypeenum");
var multiregionconfiguration_1 = require("./multiregionconfiguration");
var origintypeenum_1 = require("./origintypeenum");
var xkskeyconfigurationtype_1 = require("./xkskeyconfigurationtype");
var class_transformer_1 = require("class-transformer");
/**
 * <p>Instead, use the <code>KeySpec</code> field.</p> <p>The <code>KeySpec</code> and <code>CustomerMasterKeySpec</code> fields have the same value. We recommend that you use the <code>KeySpec</code> field in your code. However, to avoid breaking changes, KMS supports both fields.</p>This field has been deprecated. Instead, use the KeySpec field.
 */
var KeyMetadataCustomerMasterKeySpecEnum;
(function (KeyMetadataCustomerMasterKeySpecEnum) {
    KeyMetadataCustomerMasterKeySpecEnum["Rsa2048"] = "RSA_2048";
    KeyMetadataCustomerMasterKeySpecEnum["Rsa3072"] = "RSA_3072";
    KeyMetadataCustomerMasterKeySpecEnum["Rsa4096"] = "RSA_4096";
    KeyMetadataCustomerMasterKeySpecEnum["EccNistP256"] = "ECC_NIST_P256";
    KeyMetadataCustomerMasterKeySpecEnum["EccNistP384"] = "ECC_NIST_P384";
    KeyMetadataCustomerMasterKeySpecEnum["EccNistP521"] = "ECC_NIST_P521";
    KeyMetadataCustomerMasterKeySpecEnum["EccSecgP256K1"] = "ECC_SECG_P256K1";
    KeyMetadataCustomerMasterKeySpecEnum["SymmetricDefault"] = "SYMMETRIC_DEFAULT";
    KeyMetadataCustomerMasterKeySpecEnum["Hmac224"] = "HMAC_224";
    KeyMetadataCustomerMasterKeySpecEnum["Hmac256"] = "HMAC_256";
    KeyMetadataCustomerMasterKeySpecEnum["Hmac384"] = "HMAC_384";
    KeyMetadataCustomerMasterKeySpecEnum["Hmac512"] = "HMAC_512";
    KeyMetadataCustomerMasterKeySpecEnum["Sm2"] = "SM2";
})(KeyMetadataCustomerMasterKeySpecEnum = exports.KeyMetadataCustomerMasterKeySpecEnum || (exports.KeyMetadataCustomerMasterKeySpecEnum = {}));
/**
 * <p>Contains metadata about a KMS key.</p> <p>This data type is used as a response element for the <a>CreateKey</a>, <a>DescribeKey</a>, and <a>ReplicateKey</a> operations.</p>
 */
var KeyMetadata = /** @class */ (function (_super) {
    __extends(KeyMetadata, _super);
    function KeyMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AWSAccountId" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "awsAccountId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Arn" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "arn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CloudHsmClusterId" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "cloudHsmClusterId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CreationDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], KeyMetadata.prototype, "creationDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CustomKeyStoreId" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "customKeyStoreId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CustomerMasterKeySpec" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "customerMasterKeySpec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "DeletionDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], KeyMetadata.prototype, "deletionDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Description" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Enabled" }),
        __metadata("design:type", Boolean)
    ], KeyMetadata.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EncryptionAlgorithms" }),
        __metadata("design:type", Array)
    ], KeyMetadata.prototype, "encryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ExpirationModel" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "expirationModel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "KeyId" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "keyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "KeyManager" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "keyManager", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "KeySpec" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "keySpec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "KeyState" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "keyState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "KeyUsage" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "keyUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MacAlgorithms" }),
        __metadata("design:type", Array)
    ], KeyMetadata.prototype, "macAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MultiRegion" }),
        __metadata("design:type", Boolean)
    ], KeyMetadata.prototype, "multiRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MultiRegionConfiguration" }),
        (0, class_transformer_1.Type)(function () { return multiregionconfiguration_1.MultiRegionConfiguration; }),
        __metadata("design:type", multiregionconfiguration_1.MultiRegionConfiguration)
    ], KeyMetadata.prototype, "multiRegionConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Origin" }),
        __metadata("design:type", String)
    ], KeyMetadata.prototype, "origin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "PendingDeletionWindowInDays" }),
        __metadata("design:type", Number)
    ], KeyMetadata.prototype, "pendingDeletionWindowInDays", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "SigningAlgorithms" }),
        __metadata("design:type", Array)
    ], KeyMetadata.prototype, "signingAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ValidTo" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], KeyMetadata.prototype, "validTo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "XksKeyConfiguration" }),
        (0, class_transformer_1.Type)(function () { return xkskeyconfigurationtype_1.XksKeyConfigurationType; }),
        __metadata("design:type", xkskeyconfigurationtype_1.XksKeyConfigurationType)
    ], KeyMetadata.prototype, "xksKeyConfiguration", void 0);
    return KeyMetadata;
}(utils_1.SpeakeasyBase));
exports.KeyMetadata = KeyMetadata;
