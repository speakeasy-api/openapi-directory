"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import api_core_dto_datapoints_browserbasedestinationitem as shared_api_core_dto_datapoints_browserbasedestinationitem
from ..shared import api_core_dto_datapoints_datapointretargetinginfo as shared_api_core_dto_datapoints_datapointretargetinginfo
from ..shared import api_core_dto_datapoints_multipledestinationitem as shared_api_core_dto_datapoints_multipledestinationitem
from ..shared import api_core_dto_datapoints_uniquedestinationitem as shared_api_core_dto_datapoints_uniquedestinationitem
from ..shared import api_core_dto_datapoints_urlbylanguageitem as shared_api_core_dto_datapoints_urlbylanguageitem
from ..shared import api_core_dto_datapoints_urlbynationitem as shared_api_core_dto_datapoints_urlbynationitem
from ..shared import api_core_dto_datapoints_weighteddestinationitem as shared_api_core_dto_datapoints_weighteddestinationitem
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum(str, Enum):
    SIMPLE = 'Simple'
    RANDOM_DESTINATION = 'RandomDestination'
    DESTINATION_BY_LANGUAGE = 'DestinationByLanguage'
    SPILLOVER_DESTINATION = 'SpilloverDestination'
    DYNAMIC_URL = 'DynamicUrl'
    BROWSER_DESTINATION = 'BrowserDestination'
    DESTINATION_BY_NATION = 'DestinationByNation'
    UNIQUE_DESTINATION = 'UniqueDestination'
    SEQUENTIAL_DESTINATION = 'SequentialDestination'
    WEIGHTED_DESTINATION = 'WeightedDestination'

class APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum(str, Enum):
    PERMANENT_REDIRECT = 'PermanentRedirect'
    TEMPORARY_REDIRECT = 'TemporaryRedirect'

class APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum(str, Enum):
    NONE = 'None'
    CLEAN = 'Clean'
    MYSELF = 'Myself'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APICoreDtoDatapointsTrackingLinkSpecifics:
    
    append_query: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appendQuery'), 'exclude': lambda f: f is None }})  
    browser_destination_item: Optional[shared_api_core_dto_datapoints_browserbasedestinationitem.APICoreDtoDatapointsBrowserBaseDestinationItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserDestinationItem'), 'exclude': lambda f: f is None }})  
    destination_mode: Optional[APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationMode'), 'exclude': lambda f: f is None }})  
    domain_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainId'), 'exclude': lambda f: f is None }})  
    encode_url: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encodeUrl'), 'exclude': lambda f: f is None }})  
    expiration_clicks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationClicks'), 'exclude': lambda f: f is None }})  
    expiration_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'exclude': lambda f: f is None }})
    r"""(A date in \\"YmdHis\\" format)"""  
    first_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstUrl'), 'exclude': lambda f: f is None }})  
    go_domain_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('goDomainId'), 'exclude': lambda f: f is None }})  
    hide_url: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideUrl'), 'exclude': lambda f: f is None }})  
    hide_url_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideUrlTitle'), 'exclude': lambda f: f is None }})  
    is_ab_test: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isABTest'), 'exclude': lambda f: f is None }})  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})  
    pause_after_clicks_expiration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pauseAfterClicksExpiration'), 'exclude': lambda f: f is None }})  
    pause_after_date_expiration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pauseAfterDateExpiration'), 'exclude': lambda f: f is None }})  
    random_destination_items: Optional[list[shared_api_core_dto_datapoints_multipledestinationitem.APICoreDtoDatapointsMultipleDestinationItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('randomDestinationItems'), 'exclude': lambda f: f is None }})  
    redirect_type: Optional[APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectType'), 'exclude': lambda f: f is None }})  
    referrer_clean: Optional[APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referrerClean'), 'exclude': lambda f: f is None }})  
    scripts: Optional[list[shared_api_core_dto_datapoints_datapointretargetinginfo.APICoreDtoDatapointsDatapointRetargetingInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scripts'), 'exclude': lambda f: f is None }})  
    sequential_destination_items: Optional[list[shared_api_core_dto_datapoints_multipledestinationitem.APICoreDtoDatapointsMultipleDestinationItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequentialDestinationItems'), 'exclude': lambda f: f is None }})  
    spillover_destination_items: Optional[list[shared_api_core_dto_datapoints_multipledestinationitem.APICoreDtoDatapointsMultipleDestinationItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spilloverDestinationItems'), 'exclude': lambda f: f is None }})  
    unique_destination_item: Optional[shared_api_core_dto_datapoints_uniquedestinationitem.APICoreDtoDatapointsUniqueDestinationItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueDestinationItem'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    url_after_clicks_expiration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlAfterClicksExpiration'), 'exclude': lambda f: f is None }})  
    url_after_date_expiration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlAfterDateExpiration'), 'exclude': lambda f: f is None }})  
    urls_by_language: Optional[list[shared_api_core_dto_datapoints_urlbylanguageitem.APICoreDtoDatapointsURLByLanguageItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlsByLanguage'), 'exclude': lambda f: f is None }})  
    urls_by_nation: Optional[list[shared_api_core_dto_datapoints_urlbynationitem.APICoreDtoDatapointsURLByNationItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlsByNation'), 'exclude': lambda f: f is None }})  
    weighted_destination_items: Optional[list[shared_api_core_dto_datapoints_weighteddestinationitem.APICoreDtoDatapointsWeightedDestinationItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weightedDestinationItems'), 'exclude': lambda f: f is None }})  
    