// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum - Common areas offer sanitizing items exception.
type PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum string

const (
	PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnumExceptionUnspecified PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnumUnderConstruction    PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum = "UNDER_CONSTRUCTION"
	PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnumDependentOnSeason    PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum = "DEPENDENT_ON_SEASON"
	PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnumDependentOnDayOfWeek PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum) ToPointer() *PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum {
	return &e
}

func (e *PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum: %v", v)
	}
}

// PersonalProtectionFaceMaskRequiredExceptionEnum - Face mask required exception.
type PersonalProtectionFaceMaskRequiredExceptionEnum string

const (
	PersonalProtectionFaceMaskRequiredExceptionEnumExceptionUnspecified PersonalProtectionFaceMaskRequiredExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PersonalProtectionFaceMaskRequiredExceptionEnumUnderConstruction    PersonalProtectionFaceMaskRequiredExceptionEnum = "UNDER_CONSTRUCTION"
	PersonalProtectionFaceMaskRequiredExceptionEnumDependentOnSeason    PersonalProtectionFaceMaskRequiredExceptionEnum = "DEPENDENT_ON_SEASON"
	PersonalProtectionFaceMaskRequiredExceptionEnumDependentOnDayOfWeek PersonalProtectionFaceMaskRequiredExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PersonalProtectionFaceMaskRequiredExceptionEnum) ToPointer() *PersonalProtectionFaceMaskRequiredExceptionEnum {
	return &e
}

func (e *PersonalProtectionFaceMaskRequiredExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PersonalProtectionFaceMaskRequiredExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonalProtectionFaceMaskRequiredExceptionEnum: %v", v)
	}
}

// PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum - Guest room hygiene kits available exception.
type PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum string

const (
	PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnumExceptionUnspecified PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnumUnderConstruction    PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnumDependentOnSeason    PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnumDependentOnDayOfWeek PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum) ToPointer() *PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum {
	return &e
}

func (e *PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum: %v", v)
	}
}

// PersonalProtectionProtectiveEquipmentAvailableExceptionEnum - Protective equipment available exception.
type PersonalProtectionProtectiveEquipmentAvailableExceptionEnum string

const (
	PersonalProtectionProtectiveEquipmentAvailableExceptionEnumExceptionUnspecified PersonalProtectionProtectiveEquipmentAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PersonalProtectionProtectiveEquipmentAvailableExceptionEnumUnderConstruction    PersonalProtectionProtectiveEquipmentAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	PersonalProtectionProtectiveEquipmentAvailableExceptionEnumDependentOnSeason    PersonalProtectionProtectiveEquipmentAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	PersonalProtectionProtectiveEquipmentAvailableExceptionEnumDependentOnDayOfWeek PersonalProtectionProtectiveEquipmentAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PersonalProtectionProtectiveEquipmentAvailableExceptionEnum) ToPointer() *PersonalProtectionProtectiveEquipmentAvailableExceptionEnum {
	return &e
}

func (e *PersonalProtectionProtectiveEquipmentAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PersonalProtectionProtectiveEquipmentAvailableExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonalProtectionProtectiveEquipmentAvailableExceptionEnum: %v", v)
	}
}

// PersonalProtection - Personal protection measures implemented by the hotel during COVID-19.
type PersonalProtection struct {
	// Hand-sanitizer and/or sanitizing wipes are offered in common areas.
	CommonAreasOfferSanitizingItems *bool `json:"commonAreasOfferSanitizingItems,omitempty"`
	// Common areas offer sanitizing items exception.
	CommonAreasOfferSanitizingItemsException *PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum `json:"commonAreasOfferSanitizingItemsException,omitempty"`
	// Masks required on the property.
	FaceMaskRequired *bool `json:"faceMaskRequired,omitempty"`
	// Face mask required exception.
	FaceMaskRequiredException *PersonalProtectionFaceMaskRequiredExceptionEnum `json:"faceMaskRequiredException,omitempty"`
	// In-room hygiene kits with masks, hand sanitizer, and/or antibacterial wipes.
	GuestRoomHygieneKitsAvailable *bool `json:"guestRoomHygieneKitsAvailable,omitempty"`
	// Guest room hygiene kits available exception.
	GuestRoomHygieneKitsAvailableException *PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum `json:"guestRoomHygieneKitsAvailableException,omitempty"`
	// Masks and/or gloves available for guests.
	ProtectiveEquipmentAvailable *bool `json:"protectiveEquipmentAvailable,omitempty"`
	// Protective equipment available exception.
	ProtectiveEquipmentAvailableException *PersonalProtectionProtectiveEquipmentAvailableExceptionEnum `json:"protectiveEquipmentAvailableException,omitempty"`
}
