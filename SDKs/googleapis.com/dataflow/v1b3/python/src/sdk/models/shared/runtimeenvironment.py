"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RuntimeEnvironmentIPConfigurationEnum(str, Enum):
    r"""Optional. Configuration for VM IPs."""
    WORKER_IP_UNSPECIFIED = 'WORKER_IP_UNSPECIFIED'
    WORKER_IP_PUBLIC = 'WORKER_IP_PUBLIC'
    WORKER_IP_PRIVATE = 'WORKER_IP_PRIVATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuntimeEnvironment:
    r"""The environment values to set at runtime."""
    
    additional_experiments: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalExperiments'), 'exclude': lambda f: f is None }})
    r"""Optional. Additional experiment flags for the job, specified with the `--experiments` option."""  
    additional_user_labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalUserLabels'), 'exclude': lambda f: f is None }})
    r"""Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of \\"key\\": value pairs. Example: { \\"name\\": \\"wrench\\", \\"mass\\": \\"1kg\\", \\"count\\": \\"3\\" }."""  
    bypass_temp_dir_validation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bypassTempDirValidation'), 'exclude': lambda f: f is None }})
    r"""Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution."""  
    enable_streaming_engine: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableStreamingEngine'), 'exclude': lambda f: f is None }})
    r"""Optional. Whether to enable Streaming Engine for the job."""  
    ip_configuration: Optional[RuntimeEnvironmentIPConfigurationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipConfiguration'), 'exclude': lambda f: f is None }})
    r"""Optional. Configuration for VM IPs."""  
    kms_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyName'), 'exclude': lambda f: f is None }})
    r"""Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/"""  
    machine_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineType'), 'exclude': lambda f: f is None }})
    r"""Optional. The machine type to use for the job. Defaults to the value from the template if not specified."""  
    max_workers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxWorkers'), 'exclude': lambda f: f is None }})
    r"""Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network \\"default\\"."""  
    num_workers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numWorkers'), 'exclude': lambda f: f is None }})
    r"""Optional. The initial number of Google Compute Engine instances for the job. The default value is 11."""  
    service_account_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccountEmail'), 'exclude': lambda f: f is None }})
    r"""Optional. The email address of the service account to run the job as."""  
    subnetwork: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetwork'), 'exclude': lambda f: f is None }})
    r"""Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form \\"https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK\\" or \\"regions/REGION/subnetworks/SUBNETWORK\\". If the subnetwork is located in a Shared VPC network, you must use the complete URL."""  
    temp_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tempLocation'), 'exclude': lambda f: f is None }})
    r"""Required. The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`."""  
    worker_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerRegion'), 'exclude': lambda f: f is None }})
    r"""Required. The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \\"us-west1\\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region."""  
    worker_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerZone'), 'exclude': lambda f: f is None }})
    r"""Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \\"us-west1-a\\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence."""  
    zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zone'), 'exclude': lambda f: f is None }})
    r"""Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence."""  
    