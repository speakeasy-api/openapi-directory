"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimensionheader as shared_dimensionheader
from ..shared import metricheader as shared_metricheader
from ..shared import propertyquota as shared_propertyquota
from ..shared import row as shared_row
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RunRealtimeReportResponse:
    r"""The response realtime report table corresponding to a request."""
    
    dimension_headers: Optional[list[shared_dimensionheader.DimensionHeader]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensionHeaders'), 'exclude': lambda f: f is None }})
    r"""Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this message is. This `kind` is always the fixed string \\"analyticsData#runRealtimeReport\\". Useful to distinguish between response types in JSON."""  
    maximums: Optional[list[shared_row.Row]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximums'), 'exclude': lambda f: f is None }})
    r"""If requested, the maximum values of metrics."""  
    metric_headers: Optional[list[shared_metricheader.MetricHeader]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricHeaders'), 'exclude': lambda f: f is None }})
    r"""Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows."""  
    minimums: Optional[list[shared_row.Row]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimums'), 'exclude': lambda f: f is None }})
    r"""If requested, the minimum values of metrics."""  
    property_quota: Optional[shared_propertyquota.PropertyQuota] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyQuota'), 'exclude': lambda f: f is None }})
    r"""Current state of all quotas for this Analytics Property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors."""  
    row_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowCount'), 'exclude': lambda f: f is None }})
    r"""The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response and the `limit` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows."""  
    rows: Optional[list[shared_row.Row]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rows'), 'exclude': lambda f: f is None }})
    r"""Rows of dimension value combinations and metric values in the report."""  
    totals: Optional[list[shared_row.Row]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totals'), 'exclude': lambda f: f is None }})
    r"""If requested, the totaled values of metrics."""  
    