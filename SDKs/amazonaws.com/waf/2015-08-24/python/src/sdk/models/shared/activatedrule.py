"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import excludedrule as shared_excludedrule
from ..shared import wafaction as shared_wafaction
from ..shared import wafoverrideaction as shared_wafoverrideaction
from ..shared import wafruletype_enum as shared_wafruletype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivatedRule:
    r"""<note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>The <code>ActivatedRule</code> object in an <a>UpdateWebACL</a> request specifies a <code>Rule</code> that you want to insert or delete, the priority of the <code>Rule</code> in the <code>WebACL</code>, and the action that you want AWS WAF to take when a web request matches the <code>Rule</code> (<code>ALLOW</code>, <code>BLOCK</code>, or <code>COUNT</code>).</p> <p>To specify whether to insert or delete a <code>Rule</code>, use the <code>Action</code> parameter in the <a>WebACLUpdate</a> data type.</p>"""
    
    priority: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Priority') }})  
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleId') }})  
    action: Optional[shared_wafaction.WafAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Action'), 'exclude': lambda f: f is None }})  
    excluded_rules: Optional[list[shared_excludedrule.ExcludedRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcludedRules'), 'exclude': lambda f: f is None }})  
    override_action: Optional[shared_wafoverrideaction.WafOverrideAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverrideAction'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_wafruletype_enum.WafRuleTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    