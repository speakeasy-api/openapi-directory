/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { PositionedObjectProperties } from "./positionedobjectproperties";
import { SuggestedPositionedObjectProperties } from "./suggestedpositionedobjectproperties";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object that's tethered to a Paragraph and positioned relative to the beginning of the paragraph. A PositionedObject contains an EmbeddedObject such as an image.
 */
export class PositionedObject extends SpeakeasyBase {
  /**
   * The ID of this positioned object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "objectId" })
  objectId?: string;

  /**
   * Properties of a PositionedObject.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "positionedObjectProperties" })
  @Type(() => PositionedObjectProperties)
  positionedObjectProperties?: PositionedObjectProperties;

  /**
   * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedDeletionIds" })
  suggestedDeletionIds?: string[];

  /**
   * The suggested insertion ID. If empty, then this is not a suggested insertion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedInsertionId" })
  suggestedInsertionId?: string;

  /**
   * The suggested changes to the positioned object properties, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: SuggestedPositionedObjectProperties })
  @Expose({ name: "suggestedPositionedObjectPropertiesChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedPositionedObjectProperties> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          SuggestedPositionedObjectProperties
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedPositionedObjectPropertiesChanges?: Record<
    string,
    SuggestedPositionedObjectProperties
  >;
}
