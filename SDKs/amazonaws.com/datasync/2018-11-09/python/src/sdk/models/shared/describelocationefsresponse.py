"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import ec2config as shared_ec2config
from ..shared import efsintransitencryption_enum as shared_efsintransitencryption_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeLocationEfsResponse:
    r"""DescribeLocationEfsResponse"""
    
    access_point_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessPointArn'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    ec2_config: Optional[shared_ec2config.Ec2Config] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ec2Config'), 'exclude': lambda f: f is None }})
    r"""The subnet and security groups that DataSync uses to access your Amazon EFS file system."""  
    file_system_access_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemAccessRoleArn'), 'exclude': lambda f: f is None }})  
    in_transit_encryption: Optional[shared_efsintransitencryption_enum.EfsInTransitEncryptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InTransitEncryption'), 'exclude': lambda f: f is None }})  
    location_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocationArn'), 'exclude': lambda f: f is None }})  
    location_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocationUri'), 'exclude': lambda f: f is None }})  
    