"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import aggregationtypename_enum as shared_aggregationtypename_enum
from ..shared import createfleetmetricresponse as shared_createfleetmetricresponse
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateFleetMetricRequestBodyAggregationType:
    r"""The type of aggregation queries."""
    
    name: Optional[shared_aggregationtypename_enum.AggregationTypeNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values'), 'exclude': lambda f: f is None }})  
    
class CreateFleetMetricRequestBodyUnitEnum(str, Enum):
    r"""Used to support unit transformation such as milliseconds to seconds. The unit must be supported by <a href=\\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html\\">CW metric</a>. Default to null."""
    SECONDS = 'Seconds'
    MICROSECONDS = 'Microseconds'
    MILLISECONDS = 'Milliseconds'
    BYTES = 'Bytes'
    KILOBYTES = 'Kilobytes'
    MEGABYTES = 'Megabytes'
    GIGABYTES = 'Gigabytes'
    TERABYTES = 'Terabytes'
    BITS = 'Bits'
    KILOBITS = 'Kilobits'
    MEGABITS = 'Megabits'
    GIGABITS = 'Gigabits'
    TERABITS = 'Terabits'
    PERCENT = 'Percent'
    COUNT = 'Count'
    BYTES_SECOND = 'Bytes/Second'
    KILOBYTES_SECOND = 'Kilobytes/Second'
    MEGABYTES_SECOND = 'Megabytes/Second'
    GIGABYTES_SECOND = 'Gigabytes/Second'
    TERABYTES_SECOND = 'Terabytes/Second'
    BITS_SECOND = 'Bits/Second'
    KILOBITS_SECOND = 'Kilobits/Second'
    MEGABITS_SECOND = 'Megabits/Second'
    GIGABITS_SECOND = 'Gigabits/Second'
    TERABITS_SECOND = 'Terabits/Second'
    COUNT_SECOND = 'Count/Second'
    NONE = 'None'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateFleetMetricRequestBody:
    
    aggregation_field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregationField') }})
    r"""The field to aggregate."""  
    aggregation_type: CreateFleetMetricRequestBodyAggregationType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregationType') }})
    r"""The type of aggregation queries."""  
    period: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period') }})
    r"""The time in seconds between fleet metric emissions. Range [60(1 min), 86400(1 day)] and must be multiple of 60."""  
    query_string: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryString') }})
    r"""The search query string."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The fleet metric description."""  
    index_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indexName'), 'exclude': lambda f: f is None }})
    r"""The name of the index to search."""  
    query_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryVersion'), 'exclude': lambda f: f is None }})
    r"""The query version."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Metadata, which can be used to manage the fleet metric."""  
    unit: Optional[CreateFleetMetricRequestBodyUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""Used to support unit transformation such as milliseconds to seconds. The unit must be supported by <a href=\\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html\\">CW metric</a>. Default to null."""  
    

@dataclasses.dataclass
class CreateFleetMetricRequest:
    
    metric_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'metricName', 'style': 'simple', 'explode': False }})
    r"""The name of the fleet metric to create."""  
    request_body: CreateFleetMetricRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateFleetMetricResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_fleet_metric_response: Optional[shared_createfleetmetricresponse.CreateFleetMetricResponse] = dataclasses.field(default=None)
    r"""Success"""  
    index_not_ready_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IndexNotReadyException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_aggregation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidAggregationException"""  
    invalid_query_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidQueryException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceAlreadyExistsException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    