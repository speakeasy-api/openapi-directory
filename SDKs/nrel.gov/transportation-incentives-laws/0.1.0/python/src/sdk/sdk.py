"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "/api/transportation-incentives-laws",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\\"https://afdc.energy.gov/laws\\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def transportation_incentives_laws_all(self, request: operations.TransportationIncentivesLawsAllRequest) -> operations.TransportationIncentivesLawsAllResponse:
        r"""Return a full list of laws and incentives that match your query."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TransportationIncentivesLawsAllRequest, base_url, '/v1.{output_format}', request)
        
        query_params = utils.get_query_params(operations.TransportationIncentivesLawsAllRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransportationIncentivesLawsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def transportation_incentives_laws_categories(self, request: operations.TransportationIncentivesLawsCategoriesRequest) -> operations.TransportationIncentivesLawsCategoriesResponse:
        r"""Return the law categories for a given category type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TransportationIncentivesLawsCategoriesRequest, base_url, '/v1/category-list.{output_format}', request)
        
        query_params = utils.get_query_params(operations.TransportationIncentivesLawsCategoriesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransportationIncentivesLawsCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def transportation_incentives_laws_id(self, request: operations.TransportationIncentivesLawsIDRequest) -> operations.TransportationIncentivesLawsIDResponse:
        r"""Fetch the details of a specific law given the law's ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TransportationIncentivesLawsIDRequest, base_url, '/v1/{id}.{output_format}', request)
        
        query_params = utils.get_query_params(operations.TransportationIncentivesLawsIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransportationIncentivesLawsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def transportation_incentives_laws_pocs(self, request: operations.TransportationIncentivesLawsPocsRequest) -> operations.TransportationIncentivesLawsPocsResponse:
        r"""Get the points of contact for a given jurisdiction."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TransportationIncentivesLawsPocsRequest, base_url, '/v1/pocs.{output_format}', request)
        
        query_params = utils.get_query_params(operations.TransportationIncentivesLawsPocsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransportationIncentivesLawsPocsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    