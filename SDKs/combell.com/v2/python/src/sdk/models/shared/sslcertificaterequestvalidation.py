"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import sslcertificaterequestvalidationtype_enum as shared_sslcertificaterequestvalidationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SslCertificateRequestValidation:
    
    auto_validated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_validated'), 'exclude': lambda f: f is None }})
    r"""Returns true if no user interaction is required and the domain validation will be verified automatic."""  
    cname_validation_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cname_validation_content'), 'exclude': lambda f: f is None }})
    r"""The value-part (Point To) of the CNAME-record that must be created as part of domain verification."""  
    cname_validation_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cname_validation_name'), 'exclude': lambda f: f is None }})
    r"""The host-part (Name) of the CNAME-record that must be created as part of domain verification."""  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_name'), 'exclude': lambda f: f is None }})
    r"""A domain name of the certificate."""  
    email_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_addresses'), 'exclude': lambda f: f is None }})
    r"""An array of eligible domain verification email addresses."""  
    file_validation_content: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_validation_content'), 'exclude': lambda f: f is None }})
    r"""The content your verification file must contain, consisting of three lines of plain-text."""  
    file_validation_url_http: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_validation_url_http'), 'exclude': lambda f: f is None }})
    r"""The URL (http format) your verification file must be uploaded to as part of domain verification."""  
    file_validation_url_https: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_validation_url_https'), 'exclude': lambda f: f is None }})
    r"""The URL (https format) your verification file must be uploaded to as part of domain verification."""  
    type: Optional[shared_sslcertificaterequestvalidationtype_enum.SslCertificateRequestValidationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The domain validation verification type."""  
    