/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CashDrawerShift - This model gives the details of a cash drawer shift.
 * The cash_payment_money, cash_refund_money, cash_paid_in_money,
 * and cash_paid_out_money fields are all computed by summing their respective
 * event types.
 */
public class CashDrawerShift {
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_paid_in_money")
    public Money cashPaidInMoney;

    public CashDrawerShift withCashPaidInMoney(Money cashPaidInMoney) {
        this.cashPaidInMoney = cashPaidInMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_paid_out_money")
    public Money cashPaidOutMoney;

    public CashDrawerShift withCashPaidOutMoney(Money cashPaidOutMoney) {
        this.cashPaidOutMoney = cashPaidOutMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_payment_money")
    public Money cashPaymentMoney;

    public CashDrawerShift withCashPaymentMoney(Money cashPaymentMoney) {
        this.cashPaymentMoney = cashPaymentMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_refunds_money")
    public Money cashRefundsMoney;

    public CashDrawerShift withCashRefundsMoney(Money cashRefundsMoney) {
        this.cashRefundsMoney = cashRefundsMoney;
        return this;
    }
    
    /**
     * The time when the shift was closed, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_at")
    public String closedAt;

    public CashDrawerShift withClosedAt(String closedAt) {
        this.closedAt = closedAt;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_cash_money")
    public Money closedCashMoney;

    public CashDrawerShift withClosedCashMoney(Money closedCashMoney) {
        this.closedCashMoney = closedCashMoney;
        return this;
    }
    
    /**
     * The ID of the employee that closed the cash drawer shift by auditing
     * the cash drawer contents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_employee_id")
    public String closingEmployeeId;

    public CashDrawerShift withClosingEmployeeId(String closingEmployeeId) {
        this.closingEmployeeId = closingEmployeeId;
        return this;
    }
    
    /**
     * The free-form text description of a cash drawer by an employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CashDrawerShift withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device")
    public CashDrawerDevice device;

    public CashDrawerShift withDevice(CashDrawerDevice device) {
        this.device = device;
        return this;
    }
    
    /**
     * The IDs of all employees that were logged into Square Point of Sale at any
     * point while the cash drawer shift was open.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_ids")
    public String[] employeeIds;

    public CashDrawerShift withEmployeeIds(String[] employeeIds) {
        this.employeeIds = employeeIds;
        return this;
    }
    
    /**
     * The time when the shift ended, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ended_at")
    public String endedAt;

    public CashDrawerShift withEndedAt(String endedAt) {
        this.endedAt = endedAt;
        return this;
    }
    
    /**
     * The ID of the employee that ended the cash drawer shift.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ending_employee_id")
    public String endingEmployeeId;

    public CashDrawerShift withEndingEmployeeId(String endingEmployeeId) {
        this.endingEmployeeId = endingEmployeeId;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expected_cash_money")
    public Money expectedCashMoney;

    public CashDrawerShift withExpectedCashMoney(Money expectedCashMoney) {
        this.expectedCashMoney = expectedCashMoney;
        return this;
    }
    
    /**
     * The shift unique ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public CashDrawerShift withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The time when the shift began, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opened_at")
    public String openedAt;

    public CashDrawerShift withOpenedAt(String openedAt) {
        this.openedAt = openedAt;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opened_cash_money")
    public Money openedCashMoney;

    public CashDrawerShift withOpenedCashMoney(Money openedCashMoney) {
        this.openedCashMoney = openedCashMoney;
        return this;
    }
    
    /**
     * The ID of the employee that started the cash drawer shift.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opening_employee_id")
    public String openingEmployeeId;

    public CashDrawerShift withOpeningEmployeeId(String openingEmployeeId) {
        this.openingEmployeeId = openingEmployeeId;
        return this;
    }
    
    /**
     * The shift current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public CashDrawerShift withState(String state) {
        this.state = state;
        return this;
    }
    
    public CashDrawerShift(){}
}
