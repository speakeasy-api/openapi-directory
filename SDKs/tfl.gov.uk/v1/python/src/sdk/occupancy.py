"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Occupancy:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def occupancy_get(self, request: operations.OccupancyGetRequest) -> operations.OccupancyGetResponse:
        r"""Gets the occupancy for a car park with a given id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OccupancyGetRequest, base_url, '/Occupancy/CarPark/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OccupancyGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesCarParkOccupancy])
                res.tfl_api_presentation_entities_car_park_occupancy = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesCarParkOccupancy])
                res.tfl_api_presentation_entities_car_park_occupancy = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def occupancy_get_all_charge_connector_status(self) -> operations.OccupancyGetAllChargeConnectorStatusResponse:
        r"""Gets the occupancy for all charge connectors"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Occupancy/ChargeConnector'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OccupancyGetAllChargeConnectorStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesChargeConnectorOccupancy]])
                res.tfl_api_presentation_entities_charge_connector_occupancies = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesChargeConnectorOccupancy]])
                res.tfl_api_presentation_entities_charge_connector_occupancies = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def occupancy_get_bike_points_occupancies(self, request: operations.OccupancyGetBikePointsOccupanciesRequest) -> operations.OccupancyGetBikePointsOccupanciesResponse:
        r"""Get the occupancy for bike points."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OccupancyGetBikePointsOccupanciesRequest, base_url, '/Occupancy/BikePoints/{ids}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OccupancyGetBikePointsOccupanciesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesBikePointOccupancy]])
                res.tfl_api_presentation_entities_bike_point_occupancies = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesBikePointOccupancy]])
                res.tfl_api_presentation_entities_bike_point_occupancies = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def occupancy_get_charge_connector_status(self, request: operations.OccupancyGetChargeConnectorStatusRequest) -> operations.OccupancyGetChargeConnectorStatusResponse:
        r"""Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OccupancyGetChargeConnectorStatusRequest, base_url, '/Occupancy/ChargeConnector/{ids}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OccupancyGetChargeConnectorStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesChargeConnectorOccupancy]])
                res.tfl_api_presentation_entities_charge_connector_occupancies = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesChargeConnectorOccupancy]])
                res.tfl_api_presentation_entities_charge_connector_occupancies = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_occupancy_car_park(self) -> operations.GetOccupancyCarParkResponse:
        r"""Gets the occupancy for all car parks that have occupancy data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Occupancy/CarPark'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOccupancyCarParkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesCarParkOccupancy]])
                res.tfl_api_presentation_entities_car_park_occupancies = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesCarParkOccupancy]])
                res.tfl_api_presentation_entities_car_park_occupancies = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    