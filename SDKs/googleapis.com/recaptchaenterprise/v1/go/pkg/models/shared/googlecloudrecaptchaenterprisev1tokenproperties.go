// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum - Reason associated with the response when valid = false.
type GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum string

const (
	GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnumInvalidReasonUnspecified GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum = "INVALID_REASON_UNSPECIFIED"
	GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnumUnknownInvalidReason     GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum = "UNKNOWN_INVALID_REASON"
	GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnumMalformed                GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum = "MALFORMED"
	GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnumExpired                  GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum = "EXPIRED"
	GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnumDupe                     GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum = "DUPE"
	GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnumMissing                  GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum = "MISSING"
	GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnumBrowserError             GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum = "BROWSER_ERROR"
)

func (e *GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INVALID_REASON_UNSPECIFIED":
		fallthrough
	case "UNKNOWN_INVALID_REASON":
		fallthrough
	case "MALFORMED":
		fallthrough
	case "EXPIRED":
		fallthrough
	case "DUPE":
		fallthrough
	case "MISSING":
		fallthrough
	case "BROWSER_ERROR":
		*e = GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum: %s", s)
	}
}

// GoogleCloudRecaptchaenterpriseV1TokenProperties - Properties of the provided event token.
type GoogleCloudRecaptchaenterpriseV1TokenProperties struct {
	// Action name provided at token generation.
	Action *string `json:"action,omitempty"`
	// The name of the Android package with which the token was generated (Android keys only).
	AndroidPackageName *string `json:"androidPackageName,omitempty"`
	// The timestamp corresponding to the generation of the token.
	CreateTime *string `json:"createTime,omitempty"`
	// The hostname of the page on which the token was generated (Web keys only).
	Hostname *string `json:"hostname,omitempty"`
	// Reason associated with the response when valid = false.
	InvalidReason *GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum `json:"invalidReason,omitempty"`
	// The ID of the iOS bundle with which the token was generated (iOS keys only).
	IosBundleID *string `json:"iosBundleId,omitempty"`
	// Whether the provided user response token is valid. When valid = false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment).
	Valid *bool `json:"valid,omitempty"`
}
