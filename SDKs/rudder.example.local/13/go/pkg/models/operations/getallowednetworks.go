// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetAllowedNetworksPathParams struct {
	// Policy server ID for which you want to manage allowed networks.
	NodeID string `pathParam:"style=simple,explode=false,name=nodeId"`
}

type GetAllowedNetworksRequest struct {
	PathParams GetAllowedNetworksPathParams
}

// GetAllowedNetworks200ApplicationJSONActionEnum - The id of the action
type GetAllowedNetworks200ApplicationJSONActionEnum string

const (
	GetAllowedNetworks200ApplicationJSONActionEnumGetAllowedNetworks GetAllowedNetworks200ApplicationJSONActionEnum = "getAllowedNetworks"
)

func (e *GetAllowedNetworks200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getAllowedNetworks":
		*e = GetAllowedNetworks200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllowedNetworks200ApplicationJSONActionEnum: %s", s)
	}
}

type GetAllowedNetworks200ApplicationJSONDataSettings struct {
	// Array of allowed networks
	AllowedNetworks []interface{} `json:"allowed_networks"`
}

// GetAllowedNetworks200ApplicationJSONData - Information about the allowed_networks settings
type GetAllowedNetworks200ApplicationJSONData struct {
	Settings GetAllowedNetworks200ApplicationJSONDataSettings `json:"settings"`
}

// GetAllowedNetworks200ApplicationJSONResultEnum - Result of the request
type GetAllowedNetworks200ApplicationJSONResultEnum string

const (
	GetAllowedNetworks200ApplicationJSONResultEnumSuccess GetAllowedNetworks200ApplicationJSONResultEnum = "success"
	GetAllowedNetworks200ApplicationJSONResultEnumError   GetAllowedNetworks200ApplicationJSONResultEnum = "error"
)

func (e *GetAllowedNetworks200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetAllowedNetworks200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllowedNetworks200ApplicationJSONResultEnum: %s", s)
	}
}

// GetAllowedNetworks200ApplicationJSON - Allowed Networks
type GetAllowedNetworks200ApplicationJSON struct {
	// The id of the action
	Action GetAllowedNetworks200ApplicationJSONActionEnum `json:"action"`
	// Information about the allowed_networks settings
	Data GetAllowedNetworks200ApplicationJSONData `json:"data"`
	// Target policy server ID
	ID string `json:"id"`
	// Result of the request
	Result GetAllowedNetworks200ApplicationJSONResultEnum `json:"result"`
}

type GetAllowedNetworksResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Allowed Networks
	GetAllowedNetworks200ApplicationJSONObject *GetAllowedNetworks200ApplicationJSON
}
