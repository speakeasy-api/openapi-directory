"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcAlphabetSequence:
    
    char: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('char'), 'exclude': lambda f: f is None }})
    r"""The n-th character."""  
    l33tchar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l33tchar'), 'exclude': lambda f: f is None }})
    r"""The n-th character after the l33t transformation."""  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})
    r"""The penalty applied to this character if it is part of an alphabet sequence.
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcEntropyDistribution:
    
    char: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('char'), 'exclude': lambda f: f is None }})
    r"""The n-th character."""  
    l33tchar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l33tchar'), 'exclude': lambda f: f is None }})
    r"""The n-th character after the l33t transformation."""  
    percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""The amount of entropy contributed by this character, expressed as percentage of the total."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcKeyboardSequence:
    
    char: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('char'), 'exclude': lambda f: f is None }})
    r"""The n-th character."""  
    l33tchar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l33tchar'), 'exclude': lambda f: f is None }})
    r"""The n-th character after the l33t transformation."""  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})
    r"""The penalty applied to this character if it is part of a keyboard sequence.
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcNumberSequence:
    
    char: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('char'), 'exclude': lambda f: f is None }})
    r"""The n-th character."""  
    l33tchar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l33tchar'), 'exclude': lambda f: f is None }})
    r"""The n-th character after the l33t transformation."""  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})
    r"""The penalty applied to this character if it is part of a number sequence.
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcRepeatedChars:
    
    char: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('char'), 'exclude': lambda f: f is None }})
    r"""The n-th character."""  
    l33tchar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l33tchar'), 'exclude': lambda f: f is None }})
    r"""The n-th character after the l33t transformation."""  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})
    r"""The penalty applied to this character if it is repeated.
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcTotal:
    
    char: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('char'), 'exclude': lambda f: f is None }})
    r"""The n-th character."""  
    l33tchar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l33tchar'), 'exclude': lambda f: f is None }})
    r"""The n-th character after the l33t transformation."""  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})
    r"""The total penalty applied to each character.
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcWords:
    
    char: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('char'), 'exclude': lambda f: f is None }})
    r"""The n-th character."""  
    l33tchar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l33tchar'), 'exclude': lambda f: f is None }})
    r"""The n-th character after the l33t transformation."""  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})
    r"""The penalty applied to this character if it is part of a word.
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ec:
    r"""The password analysis, including the calculated entropy."""
    
    alphabet_sequence: Optional[list[EcAlphabetSequence]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alphabetSequence'), 'exclude': lambda f: f is None }})
    r"""**The penalty applied to each character that has been found to be part of an alphabet sequence.**
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    api_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiVersion'), 'exclude': lambda f: f is None }})
    r"""**This API version number.**"""  
    detected_keyboard: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedKeyboard'), 'exclude': lambda f: f is None }})
    r"""**The detected keyboard, QWERTY or Dvorak.**"""  
    efficiency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('efficiency'), 'exclude': lambda f: f is None }})
    r"""**The ratio entropy / idealEntropy.**
    
    It is a float number in the range [0, 1].
    """  
    entropy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entropy'), 'exclude': lambda f: f is None }})
    r"""**The entropy calculated for the input password.**
    
    It is measured in bits.
    """  
    entropy_distribution: Optional[list[EcEntropyDistribution]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entropyDistribution'), 'exclude': lambda f: f is None }})
    r"""**The distribution of the calculated entropy among the password characters.**"""  
    ideal_entropy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idealEntropy'), 'exclude': lambda f: f is None }})
    r"""**The Shannon entropy.**
    
    The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.
    
    It is measured in bits.
    """  
    keyboard_sequence: Optional[list[EcKeyboardSequence]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyboardSequence'), 'exclude': lambda f: f is None }})
    r"""**The penalty applied to each character that has been found to be part of a keyboard sequence.**
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    l33t_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l33tPassword'), 'exclude': lambda f: f is None }})
    r"""The analyzed password after the l33t substitution."""  
    non_uniform_entropy_distribution_penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonUniformEntropyDistributionPenalty'), 'exclude': lambda f: f is None }})
    r"""**The penalty applied to the whole password because of irregular entropy distribution.**
    
    This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    number_sequence: Optional[list[EcNumberSequence]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberSequence'), 'exclude': lambda f: f is None }})
    r"""**The penalty applied to each character that has been found to be part of a number sequence.**
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The analyzed password."""  
    password_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordLength'), 'exclude': lambda f: f is None }})
    r"""The number of characters the password has."""  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})
    r"""**The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    
    Its value is equal to the value of the input parameter *penalty*.
    """  
    repeated_chars: Optional[list[EcRepeatedChars]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeatedChars'), 'exclude': lambda f: f is None }})
    r"""**The penalty applied to each character that are repeated**
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})
    r"""**The identifier of the request that corresponds to this response.**"""  
    request_timestamp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestTimestamp'), 'exclude': lambda f: f is None }})
    r"""**The timestamp for this response.**
    
    Milliseconds from the epoch of 1970-01-01T00:00:00Z.
    """  
    summary: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})  
    total: Optional[list[EcTotal]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""**The total penalty applied to each character.**
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    words: Optional[list[EcWords]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('words'), 'exclude': lambda f: f is None }})
    r"""**The penalty applied to each character that has been found to be part of a word.**
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    """  
    