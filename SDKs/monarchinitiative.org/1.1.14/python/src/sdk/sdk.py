"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .association import Association
from .bioentity import Bioentity
from .bioentityset import Bioentityset
from .bioentityset_homologs import BioentitysetHomologs
from .bioentityset_slimmer import BioentitysetSlimmer
from .cam import Cam
from .evidence_graph import EvidenceGraph
from .genome_features import GenomeFeatures
from .graph import Graph
from .identifier_mapper import IdentifierMapper
from .identifier_prefixes import IdentifierPrefixes
from .individual import Individual
from .mart import Mart
from .metadata import Metadata
from .mme import Mme
from .nlp_annotate import NlpAnnotate
from .ontol import Ontol
from .ontol_identifier import OntolIdentifier
from .ontol_labeler import OntolLabeler
from .ontology import Ontology
from .owl_ontology import OwlOntology
from .pair_sim import PairSim
from .relation_usage import RelationUsage
from .search import Search
from .sim import Sim
from .variation_set import VariationSet

SERVERS = [
    "/api",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""API integration layer for linked biological objects.
    
     __Source:__ https://github.com/biolink/biolink-api/
    """
    association: Association
    r"""Retrieve associations between entities or entity and descriptors"""
    bioentity: Bioentity
    r"""Retrieval of domain entities plus associations"""
    bioentityset: Bioentityset
    r"""Operations over sets of entities"""
    bioentityset_homologs: BioentitysetHomologs
    r"""Map gene IDs to their homologs"""
    bioentityset_slimmer: BioentitysetSlimmer
    r"""maps a set of entities to a slim"""
    cam: Cam
    r"""Operations on GO Causal Activity Models (GO-CAMs)"""
    evidence_graph: EvidenceGraph
    r"""Operations on evidence graphs"""
    genome_features: GenomeFeatures
    r"""Operations to retrieve sequence features"""
    graph: Graph
    r"""Operations over data graphs"""
    identifier_mapper: IdentifierMapper
    r"""mapping and resolution of identifiers"""
    identifier_prefixes: IdentifierPrefixes
    r"""identifier prefixes"""
    individual: Individual
    r"""Individual humans (including patients), or organisms"""
    mart: Mart
    r"""Perform bulk operations"""
    metadata: Metadata
    r"""Get metadata"""
    mme: Mme
    r"""Match patients with similar diseases and non-human genes based on their phenotypes"""
    nlp_annotate: NlpAnnotate
    r"""annotate text using named entities"""
    ontol: Ontol
    r"""extract a subgraph from an ontology"""
    ontol_identifier: OntolIdentifier
    r"""Retrieve IDs for labels"""
    ontol_labeler: OntolLabeler
    r"""Assign labels to IDs"""
    ontology: Ontology
    r"""Operations on Ontology Terms and Subsets"""
    owl_ontology: OwlOntology
    r"""OWL-level operations on an ontology"""
    pair_sim: PairSim
    r"""pairwise similarity between two entities"""
    relation_usage: RelationUsage
    r"""Usage of different relationship types"""
    search: Search
    r"""Search for entities"""
    sim: Sim
    r"""Perform semantic similarity, ranking, and sufficiency scoring"""
    variation_set: VariationSet
    r"""Operations related to sets of variants"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.association = Association(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.bioentity = Bioentity(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.bioentityset = Bioentityset(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.bioentityset_homologs = BioentitysetHomologs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.bioentityset_slimmer = BioentitysetSlimmer(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.cam = Cam(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.evidence_graph = EvidenceGraph(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.genome_features = GenomeFeatures(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.graph = Graph(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.identifier_mapper = IdentifierMapper(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.identifier_prefixes = IdentifierPrefixes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.individual = Individual(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mart = Mart(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.metadata = Metadata(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mme = Mme(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.nlp_annotate = NlpAnnotate(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.ontol = Ontol(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.ontol_identifier = OntolIdentifier(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.ontol_labeler = OntolLabeler(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.ontology = Ontology(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.owl_ontology = OwlOntology(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pair_sim = PairSim(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.relation_usage = RelationUsage(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.search = Search(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sim = Sim(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.variation_set = VariationSet(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    