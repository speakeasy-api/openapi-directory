// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// KeycloakConfigSslRequiredEnum - SSL certificates requirements
type KeycloakConfigSslRequiredEnum string

const (
	KeycloakConfigSslRequiredEnumNone     KeycloakConfigSslRequiredEnum = "none"
	KeycloakConfigSslRequiredEnumExternal KeycloakConfigSslRequiredEnum = "external"
)

func (e KeycloakConfigSslRequiredEnum) ToPointer() *KeycloakConfigSslRequiredEnum {
	return &e
}

func (e *KeycloakConfigSslRequiredEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "external":
		*e = KeycloakConfigSslRequiredEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeycloakConfigSslRequiredEnum: %v", v)
	}
}

// KeycloakConfig - Representation of Keycloak / SSO configuration used by Microcks server
type KeycloakConfig struct {
	// SSO Server authentication url
	AuthServerURL string `json:"auth-server-url"`
	// Whether Keycloak authentification and usage is enabled
	Enabled bool `json:"enabled"`
	// Name of public-client that can be used for requesting OAuth token
	PublicClient string `json:"public-client"`
	// Authentication realm name
	Realm string `json:"realm"`
	// Name of Keycloak resource/application used on client side
	Resource string `json:"resource"`
	// SSL certificates requirements
	SslRequired KeycloakConfigSslRequiredEnum `json:"ssl-required"`
}
