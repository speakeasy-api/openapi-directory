// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchCseListImgColorTypeEnum - Returns black and white, grayscale, transparent, or color images. Acceptable values are: * `"color"` * `"gray"` * `"mono"`: black and white * `"trans"`: transparent background
type SearchCseListImgColorTypeEnum string

const (
	SearchCseListImgColorTypeEnumImgColorTypeUndefined SearchCseListImgColorTypeEnum = "imgColorTypeUndefined"
	SearchCseListImgColorTypeEnumMono                  SearchCseListImgColorTypeEnum = "mono"
	SearchCseListImgColorTypeEnumGray                  SearchCseListImgColorTypeEnum = "gray"
	SearchCseListImgColorTypeEnumColor                 SearchCseListImgColorTypeEnum = "color"
	SearchCseListImgColorTypeEnumTrans                 SearchCseListImgColorTypeEnum = "trans"
)

func (e *SearchCseListImgColorTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "imgColorTypeUndefined":
		fallthrough
	case "mono":
		fallthrough
	case "gray":
		fallthrough
	case "color":
		fallthrough
	case "trans":
		*e = SearchCseListImgColorTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCseListImgColorTypeEnum: %s", s)
	}
}

// SearchCseListImgDominantColorEnum - Returns images of a specific dominant color. Acceptable values are: * `"black"` * `"blue"` * `"brown"` * `"gray"` * `"green"` * `"orange"` * `"pink"` * `"purple"` * `"red"` * `"teal"` * `"white"` * `"yellow"`
type SearchCseListImgDominantColorEnum string

const (
	SearchCseListImgDominantColorEnumImgDominantColorUndefined SearchCseListImgDominantColorEnum = "imgDominantColorUndefined"
	SearchCseListImgDominantColorEnumBlack                     SearchCseListImgDominantColorEnum = "black"
	SearchCseListImgDominantColorEnumBlue                      SearchCseListImgDominantColorEnum = "blue"
	SearchCseListImgDominantColorEnumBrown                     SearchCseListImgDominantColorEnum = "brown"
	SearchCseListImgDominantColorEnumGray                      SearchCseListImgDominantColorEnum = "gray"
	SearchCseListImgDominantColorEnumGreen                     SearchCseListImgDominantColorEnum = "green"
	SearchCseListImgDominantColorEnumOrange                    SearchCseListImgDominantColorEnum = "orange"
	SearchCseListImgDominantColorEnumPink                      SearchCseListImgDominantColorEnum = "pink"
	SearchCseListImgDominantColorEnumPurple                    SearchCseListImgDominantColorEnum = "purple"
	SearchCseListImgDominantColorEnumRed                       SearchCseListImgDominantColorEnum = "red"
	SearchCseListImgDominantColorEnumTeal                      SearchCseListImgDominantColorEnum = "teal"
	SearchCseListImgDominantColorEnumWhite                     SearchCseListImgDominantColorEnum = "white"
	SearchCseListImgDominantColorEnumYellow                    SearchCseListImgDominantColorEnum = "yellow"
)

func (e *SearchCseListImgDominantColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "imgDominantColorUndefined":
		fallthrough
	case "black":
		fallthrough
	case "blue":
		fallthrough
	case "brown":
		fallthrough
	case "gray":
		fallthrough
	case "green":
		fallthrough
	case "orange":
		fallthrough
	case "pink":
		fallthrough
	case "purple":
		fallthrough
	case "red":
		fallthrough
	case "teal":
		fallthrough
	case "white":
		fallthrough
	case "yellow":
		*e = SearchCseListImgDominantColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCseListImgDominantColorEnum: %s", s)
	}
}

// SearchCseListImgSizeEnum - Returns images of a specified size. Acceptable values are: * `"huge"` * `"icon"` * `"large"` * `"medium"` * `"small"` * `"xlarge"` * `"xxlarge"`
type SearchCseListImgSizeEnum string

const (
	SearchCseListImgSizeEnumImgSizeUndefined SearchCseListImgSizeEnum = "imgSizeUndefined"
	SearchCseListImgSizeEnumHuge             SearchCseListImgSizeEnum = "HUGE"
	SearchCseListImgSizeEnumIcon             SearchCseListImgSizeEnum = "ICON"
	SearchCseListImgSizeEnumLarge            SearchCseListImgSizeEnum = "LARGE"
	SearchCseListImgSizeEnumMedium           SearchCseListImgSizeEnum = "MEDIUM"
	SearchCseListImgSizeEnumSmall            SearchCseListImgSizeEnum = "SMALL"
	SearchCseListImgSizeEnumXlarge           SearchCseListImgSizeEnum = "XLARGE"
	SearchCseListImgSizeEnumXxlarge          SearchCseListImgSizeEnum = "XXLARGE"
)

func (e *SearchCseListImgSizeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "imgSizeUndefined":
		fallthrough
	case "HUGE":
		fallthrough
	case "ICON":
		fallthrough
	case "LARGE":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "SMALL":
		fallthrough
	case "XLARGE":
		fallthrough
	case "XXLARGE":
		*e = SearchCseListImgSizeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCseListImgSizeEnum: %s", s)
	}
}

// SearchCseListImgTypeEnum - Returns images of a type. Acceptable values are: * `"clipart"` * `"face"` * `"lineart"` * `"stock"` * `"photo"` * `"animated"`
type SearchCseListImgTypeEnum string

const (
	SearchCseListImgTypeEnumImgTypeUndefined SearchCseListImgTypeEnum = "imgTypeUndefined"
	SearchCseListImgTypeEnumClipart          SearchCseListImgTypeEnum = "clipart"
	SearchCseListImgTypeEnumFace             SearchCseListImgTypeEnum = "face"
	SearchCseListImgTypeEnumLineart          SearchCseListImgTypeEnum = "lineart"
	SearchCseListImgTypeEnumStock            SearchCseListImgTypeEnum = "stock"
	SearchCseListImgTypeEnumPhoto            SearchCseListImgTypeEnum = "photo"
	SearchCseListImgTypeEnumAnimated         SearchCseListImgTypeEnum = "animated"
)

func (e *SearchCseListImgTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "imgTypeUndefined":
		fallthrough
	case "clipart":
		fallthrough
	case "face":
		fallthrough
	case "lineart":
		fallthrough
	case "stock":
		fallthrough
	case "photo":
		fallthrough
	case "animated":
		*e = SearchCseListImgTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCseListImgTypeEnum: %s", s)
	}
}

// SearchCseListSafeEnum - Search safety level. Acceptable values are: * `"active"`: Enables SafeSearch filtering. * `"off"`: Disables SafeSearch filtering. (default)
type SearchCseListSafeEnum string

const (
	SearchCseListSafeEnumSafeUndefined SearchCseListSafeEnum = "safeUndefined"
	SearchCseListSafeEnumActive        SearchCseListSafeEnum = "active"
	SearchCseListSafeEnumHigh          SearchCseListSafeEnum = "high"
	SearchCseListSafeEnumMedium        SearchCseListSafeEnum = "medium"
	SearchCseListSafeEnumOff           SearchCseListSafeEnum = "off"
)

func (e *SearchCseListSafeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "safeUndefined":
		fallthrough
	case "active":
		fallthrough
	case "high":
		fallthrough
	case "medium":
		fallthrough
	case "off":
		*e = SearchCseListSafeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCseListSafeEnum: %s", s)
	}
}

// SearchCseListSearchTypeEnum - Specifies the search type: `image`. If unspecified, results are limited to webpages. Acceptable values are: * `"image"`: custom image search.
type SearchCseListSearchTypeEnum string

const (
	SearchCseListSearchTypeEnumSearchTypeUndefined SearchCseListSearchTypeEnum = "searchTypeUndefined"
	SearchCseListSearchTypeEnumImage               SearchCseListSearchTypeEnum = "image"
)

func (e *SearchCseListSearchTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "searchTypeUndefined":
		fallthrough
	case "image":
		*e = SearchCseListSearchTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCseListSearchTypeEnum: %s", s)
	}
}

// SearchCseListSiteSearchFilterEnum - Controls whether to include or exclude results from the site named in the `siteSearch` parameter. Acceptable values are: * `"e"`: exclude * `"i"`: include
type SearchCseListSiteSearchFilterEnum string

const (
	SearchCseListSiteSearchFilterEnumSiteSearchFilterUndefined SearchCseListSiteSearchFilterEnum = "siteSearchFilterUndefined"
	SearchCseListSiteSearchFilterEnumE                         SearchCseListSiteSearchFilterEnum = "e"
	SearchCseListSiteSearchFilterEnumI                         SearchCseListSiteSearchFilterEnum = "i"
)

func (e *SearchCseListSiteSearchFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "siteSearchFilterUndefined":
		fallthrough
	case "e":
		fallthrough
	case "i":
		*e = SearchCseListSiteSearchFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCseListSiteSearchFilterEnum: %s", s)
	}
}

type SearchCseListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Enables or disables [Simplified and Traditional Chinese Search](https://developers.google.com/custom-search/docs/json_api_reference#chineseSearch). The default value for this parameter is 0 (zero), meaning that the feature is enabled. Supported values are: * `1`: Disabled * `0`: Enabled (default)
	C2coff *string `queryParam:"style=form,explode=true,name=c2coff"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Restricts search results to documents originating in a particular country. You may use [Boolean operators](https://developers.google.com/custom-search/docs/json_api_reference#booleanOperators) in the cr parameter's value. Google Search determines the country of a document by analyzing: * the top-level domain (TLD) of the document's URL * the geographic location of the Web server's IP address See the [Country Parameter Values](https://developers.google.com/custom-search/docs/json_api_reference#countryCollections) page for a list of valid values for this parameter.
	Cr *string `queryParam:"style=form,explode=true,name=cr"`
	// The Programmable Search Engine ID to use for this request.
	Cx *string `queryParam:"style=form,explode=true,name=cx"`
	// Restricts results to URLs based on date. Supported values include: * `d[number]`: requests results from the specified number of past days. * `w[number]`: requests results from the specified number of past weeks. * `m[number]`: requests results from the specified number of past months. * `y[number]`: requests results from the specified number of past years.
	DateRestrict *string `queryParam:"style=form,explode=true,name=dateRestrict"`
	// Identifies a phrase that all documents in the search results must contain.
	ExactTerms *string `queryParam:"style=form,explode=true,name=exactTerms"`
	// Identifies a word or phrase that should not appear in any documents in the search results.
	ExcludeTerms *string `queryParam:"style=form,explode=true,name=excludeTerms"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Restricts results to files of a specified extension. A list of file types indexable by Google can be found in Search Console [Help Center](https://support.google.com/webmasters/answer/35287).
	FileType *string `queryParam:"style=form,explode=true,name=fileType"`
	// Controls turning on or off the duplicate content filter. * See [Automatic Filtering](https://developers.google.com/custom-search/docs/json_api_reference#automaticFiltering) for more information about Google's search results filters. Note that host crowding filtering applies only to multi-site searches. * By default, Google applies filtering to all search results to improve the quality of those results. Acceptable values are: * `0`: Turns off duplicate content filter. * `1`: Turns on duplicate content filter.
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// Geolocation of end user. * The `gl` parameter value is a two-letter country code. The `gl` parameter boosts search results whose country of origin matches the parameter value. See the [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) page for a list of valid values. * Specifying a `gl` parameter value should lead to more relevant results. This is particularly true for international customers and, even more specifically, for customers in English- speaking countries other than the United States.
	Gl *string `queryParam:"style=form,explode=true,name=gl"`
	// **Deprecated**. Use the `gl` parameter for a similar effect. The local Google domain (for example, google.com, google.de, or google.fr) to use to perform the search.
	Googlehost *string `queryParam:"style=form,explode=true,name=googlehost"`
	// Specifies the ending value for a search range. * Use `lowRange` and `highRange` to append an inclusive search range of `lowRange...highRange` to the query.
	HighRange *string `queryParam:"style=form,explode=true,name=highRange"`
	// Sets the user interface language. * Explicitly setting this parameter improves the performance and the quality of your search results. * See the [Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#wsInterfaceLanguages) section of [Internationalizing Queries and Results Presentation](https://developers.google.com/custom-search/docs/json_api_reference#wsInternationalizing) for more information, and [Supported Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#interfaceLanguages) for a list of supported languages.
	Hl *string `queryParam:"style=form,explode=true,name=hl"`
	// Appends the specified query terms to the query, as if they were combined with a logical AND operator.
	Hq *string `queryParam:"style=form,explode=true,name=hq"`
	// Returns black and white, grayscale, transparent, or color images. Acceptable values are: * `"color"` * `"gray"` * `"mono"`: black and white * `"trans"`: transparent background
	ImgColorType *SearchCseListImgColorTypeEnum `queryParam:"style=form,explode=true,name=imgColorType"`
	// Returns images of a specific dominant color. Acceptable values are: * `"black"` * `"blue"` * `"brown"` * `"gray"` * `"green"` * `"orange"` * `"pink"` * `"purple"` * `"red"` * `"teal"` * `"white"` * `"yellow"`
	ImgDominantColor *SearchCseListImgDominantColorEnum `queryParam:"style=form,explode=true,name=imgDominantColor"`
	// Returns images of a specified size. Acceptable values are: * `"huge"` * `"icon"` * `"large"` * `"medium"` * `"small"` * `"xlarge"` * `"xxlarge"`
	ImgSize *SearchCseListImgSizeEnum `queryParam:"style=form,explode=true,name=imgSize"`
	// Returns images of a type. Acceptable values are: * `"clipart"` * `"face"` * `"lineart"` * `"stock"` * `"photo"` * `"animated"`
	ImgType *SearchCseListImgTypeEnum `queryParam:"style=form,explode=true,name=imgType"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Specifies that all search results should contain a link to a particular URL.
	LinkSite *string `queryParam:"style=form,explode=true,name=linkSite"`
	// Specifies the starting value for a search range. Use `lowRange` and `highRange` to append an inclusive search range of `lowRange...highRange` to the query.
	LowRange *string `queryParam:"style=form,explode=true,name=lowRange"`
	// Restricts the search to documents written in a particular language (e.g., `lr=lang_ja`). Acceptable values are: * `"lang_ar"`: Arabic * `"lang_bg"`: Bulgarian * `"lang_ca"`: Catalan * `"lang_cs"`: Czech * `"lang_da"`: Danish * `"lang_de"`: German * `"lang_el"`: Greek * `"lang_en"`: English * `"lang_es"`: Spanish * `"lang_et"`: Estonian * `"lang_fi"`: Finnish * `"lang_fr"`: French * `"lang_hr"`: Croatian * `"lang_hu"`: Hungarian * `"lang_id"`: Indonesian * `"lang_is"`: Icelandic * `"lang_it"`: Italian * `"lang_iw"`: Hebrew * `"lang_ja"`: Japanese * `"lang_ko"`: Korean * `"lang_lt"`: Lithuanian * `"lang_lv"`: Latvian * `"lang_nl"`: Dutch * `"lang_no"`: Norwegian * `"lang_pl"`: Polish * `"lang_pt"`: Portuguese * `"lang_ro"`: Romanian * `"lang_ru"`: Russian * `"lang_sk"`: Slovak * `"lang_sl"`: Slovenian * `"lang_sr"`: Serbian * `"lang_sv"`: Swedish * `"lang_tr"`: Turkish * `"lang_zh-CN"`: Chinese (Simplified) * `"lang_zh-TW"`: Chinese (Traditional)
	Lr *string `queryParam:"style=form,explode=true,name=lr"`
	// Number of search results to return. * Valid values are integers between 1 and 10, inclusive.
	Num *int64 `queryParam:"style=form,explode=true,name=num"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Provides additional search terms to check for in a document, where each document in the search results must contain at least one of the additional search terms.
	OrTerms *string `queryParam:"style=form,explode=true,name=orTerms"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Query
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Specifies that all search results should be pages that are related to the specified URL.
	RelatedSite *string `queryParam:"style=form,explode=true,name=relatedSite"`
	// Filters based on licensing. Supported values include: `cc_publicdomain`, `cc_attribute`, `cc_sharealike`, `cc_noncommercial`, `cc_nonderived` and combinations of these. See [typical combinations](https://wiki.creativecommons.org/wiki/CC_Search_integration).
	Rights *string `queryParam:"style=form,explode=true,name=rights"`
	// Search safety level. Acceptable values are: * `"active"`: Enables SafeSearch filtering. * `"off"`: Disables SafeSearch filtering. (default)
	Safe *SearchCseListSafeEnum `queryParam:"style=form,explode=true,name=safe"`
	// Specifies the search type: `image`. If unspecified, results are limited to webpages. Acceptable values are: * `"image"`: custom image search.
	SearchType *SearchCseListSearchTypeEnum `queryParam:"style=form,explode=true,name=searchType"`
	// Specifies a given site which should always be included or excluded from results (see `siteSearchFilter` parameter, below).
	SiteSearch *string `queryParam:"style=form,explode=true,name=siteSearch"`
	// Controls whether to include or exclude results from the site named in the `siteSearch` parameter. Acceptable values are: * `"e"`: exclude * `"i"`: include
	SiteSearchFilter *SearchCseListSiteSearchFilterEnum `queryParam:"style=form,explode=true,name=siteSearchFilter"`
	// The sort expression to apply to the results. The sort parameter specifies that the results be sorted according to the specified expression i.e. sort by date. [Example: sort=date](https://developers.google.com/custom-search/docs/structured_search#sort-by-attribute).
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// The index of the first result to return. The default number of results per page is 10, so `&start=11` would start at the top of the second page of results. **Note**: The JSON API will never return more than 100 results, even if more than 100 documents match the query, so setting the sum of `start + num` to a number greater than 100 will produce an error. Also note that the maximum value for `num` is 10.
	Start *int64 `queryParam:"style=form,explode=true,name=start"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type SearchCseListResponse struct {
	ContentType string
	// Successful response
	Search      *shared.Search
	StatusCode  int
	RawResponse *http.Response
}
