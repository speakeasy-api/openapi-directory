/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Classification ID:
 *
 * @remarks
 *
 * * `1` - public
 *
 * * `2` - internal
 *
 * * `3` - confidential
 *
 * * `4` - strictly confidential
 *
 *
 *
 * Provided (or default) classification is taken from room
 *
 * when file gets uploaded without any classification.
 */
export enum CreateRoomRequestClassificationEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

/**
 * Behaviour when new users are added to the group:
 *
 * @remarks
 *
 * * `autoallow`
 *
 * * `pending`
 *
 *
 *
 * Only relevant if `adminGroupIds` has items.
 */
export enum CreateRoomRequestNewGroupMemberAcceptanceEnum {
  Autoallow = "autoallow",
  Pending = "pending",
}

/**
 * Request model for creating a room
 */
export class CreateRoomRequest extends SpeakeasyBase {
  /**
   * List of group ids
   *
   * @remarks
   *
   * A room requires at least one admin (user or group)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adminGroupIds" })
  adminGroupIds?: number[];

  /**
   * List of user ids
   *
   * @remarks
   *
   * A room requires at least one admin (user or group)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adminIds" })
  adminIds?: number[];

  /**
   * Classification ID:
   *
   * @remarks
   *
   * * `1` - public
   *
   * * `2` - internal
   *
   * * `3` - confidential
   *
   * * `4` - strictly confidential
   *
   *
   *
   * Provided (or default) classification is taken from room
   *
   * when file gets uploaded without any classification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: CreateRoomRequestClassificationEnum;

  /**
   * Is activities log active (for rooms only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasActivitiesLog" })
  hasActivitiesLog?: boolean;

  /**
   * &#128679; Deprecated since v4.10.0
   *
   * @remarks
   *
   * Is recycle bin active (for rooms only)
   *
   * Recycle bin is always on (disabling is not possible).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasRecycleBin" })
  hasRecycleBin?: boolean;

  /**
   * Inherit permissions from parent room
   *
   * @remarks
   *
   * (default: `false` if `parentId` is `0`; otherwise: `true`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inheritPermissions" })
  inheritPermissions?: boolean;

  /**
   * Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Behaviour when new users are added to the group:
   *
   * @remarks
   *
   * * `autoallow`
   *
   * * `pending`
   *
   *
   *
   * Only relevant if `adminGroupIds` has items.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newGroupMemberAcceptance" })
  newGroupMemberAcceptance?: CreateRoomRequestNewGroupMemberAcceptanceEnum;

  /**
   * User notes
   *
   * @remarks
   *
   * Use empty string to remove.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Parent room ID or `null` (not 0) to create a top level room
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId?: number;

  /**
   * Quota in byte
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quota" })
  quota?: number;

  /**
   * Retention period for deleted nodes in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recycleBinRetentionPeriod" })
  recycleBinRetentionPeriod?: number;

  /**
   * &#128640; Since v4.22.0
   *
   * @remarks
   *
   * Time the node was created on external file system
   *
   * (default: current server datetime in UTC format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestampCreation" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestampCreation?: Date;

  /**
   * &#128640; Since v4.22.0
   *
   * @remarks
   *
   * Time the content of a node was last modified on external file system
   *
   * (default: current server datetime in UTC format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestampModification" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestampModification?: Date;
}
