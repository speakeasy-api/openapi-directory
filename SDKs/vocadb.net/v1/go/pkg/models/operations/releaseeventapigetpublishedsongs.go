// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReleaseEventAPIGetPublishedSongsPathParams struct {
	// Event ID.
	EventID int `pathParam:"style=simple,explode=false,name=eventId"`
}

// ReleaseEventAPIGetPublishedSongsFieldsEnum - List of optional song fields.
type ReleaseEventAPIGetPublishedSongsFieldsEnum string

const (
	ReleaseEventAPIGetPublishedSongsFieldsEnumNone            ReleaseEventAPIGetPublishedSongsFieldsEnum = "None"
	ReleaseEventAPIGetPublishedSongsFieldsEnumAdditionalNames ReleaseEventAPIGetPublishedSongsFieldsEnum = "AdditionalNames"
	ReleaseEventAPIGetPublishedSongsFieldsEnumAlbums          ReleaseEventAPIGetPublishedSongsFieldsEnum = "Albums"
	ReleaseEventAPIGetPublishedSongsFieldsEnumArtists         ReleaseEventAPIGetPublishedSongsFieldsEnum = "Artists"
	ReleaseEventAPIGetPublishedSongsFieldsEnumLyrics          ReleaseEventAPIGetPublishedSongsFieldsEnum = "Lyrics"
	ReleaseEventAPIGetPublishedSongsFieldsEnumMainPicture     ReleaseEventAPIGetPublishedSongsFieldsEnum = "MainPicture"
	ReleaseEventAPIGetPublishedSongsFieldsEnumNames           ReleaseEventAPIGetPublishedSongsFieldsEnum = "Names"
	ReleaseEventAPIGetPublishedSongsFieldsEnumPVs             ReleaseEventAPIGetPublishedSongsFieldsEnum = "PVs"
	ReleaseEventAPIGetPublishedSongsFieldsEnumReleaseEvent    ReleaseEventAPIGetPublishedSongsFieldsEnum = "ReleaseEvent"
	ReleaseEventAPIGetPublishedSongsFieldsEnumTags            ReleaseEventAPIGetPublishedSongsFieldsEnum = "Tags"
	ReleaseEventAPIGetPublishedSongsFieldsEnumThumbURL        ReleaseEventAPIGetPublishedSongsFieldsEnum = "ThumbUrl"
	ReleaseEventAPIGetPublishedSongsFieldsEnumWebLinks        ReleaseEventAPIGetPublishedSongsFieldsEnum = "WebLinks"
)

func (e *ReleaseEventAPIGetPublishedSongsFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AdditionalNames":
		fallthrough
	case "Albums":
		fallthrough
	case "Artists":
		fallthrough
	case "Lyrics":
		fallthrough
	case "MainPicture":
		fallthrough
	case "Names":
		fallthrough
	case "PVs":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "Tags":
		fallthrough
	case "ThumbUrl":
		fallthrough
	case "WebLinks":
		*e = ReleaseEventAPIGetPublishedSongsFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIGetPublishedSongsFieldsEnum: %s", s)
	}
}

// ReleaseEventAPIGetPublishedSongsLangEnum - Content language preference.
type ReleaseEventAPIGetPublishedSongsLangEnum string

const (
	ReleaseEventAPIGetPublishedSongsLangEnumDefault  ReleaseEventAPIGetPublishedSongsLangEnum = "Default"
	ReleaseEventAPIGetPublishedSongsLangEnumJapanese ReleaseEventAPIGetPublishedSongsLangEnum = "Japanese"
	ReleaseEventAPIGetPublishedSongsLangEnumRomaji   ReleaseEventAPIGetPublishedSongsLangEnum = "Romaji"
	ReleaseEventAPIGetPublishedSongsLangEnumEnglish  ReleaseEventAPIGetPublishedSongsLangEnum = "English"
)

func (e *ReleaseEventAPIGetPublishedSongsLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = ReleaseEventAPIGetPublishedSongsLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIGetPublishedSongsLangEnum: %s", s)
	}
}

type ReleaseEventAPIGetPublishedSongsQueryParams struct {
	// List of optional song fields.
	Fields *ReleaseEventAPIGetPublishedSongsFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Content language preference.
	Lang *ReleaseEventAPIGetPublishedSongsLangEnum `queryParam:"style=form,explode=true,name=lang"`
}

type ReleaseEventAPIGetPublishedSongsRequest struct {
	PathParams  ReleaseEventAPIGetPublishedSongsPathParams
	QueryParams ReleaseEventAPIGetPublishedSongsQueryParams
}

type ReleaseEventAPIGetPublishedSongsResponse struct {
	Body        []byte
	ContentType string
	// OK
	SongForAPIContracts []shared.SongForAPIContract
	StatusCode          int
	RawResponse         *http.Response
}
