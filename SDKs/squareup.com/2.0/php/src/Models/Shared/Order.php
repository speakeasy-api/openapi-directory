<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Order - Contains all information related to a single order to process with Square,
 * 
 * including line items that specify the products to purchase. `Order` objects also
 * include information about any associated tenders, refunds, and returns.
 * 
 * All Connect V2 Transactions have all been converted to Orders including all associated
 * itemization data.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Order
{
    /**
     * The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example "2016-09-04T23:59:33.123Z").
     * 
     * @var ?string $closedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('closed_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $closedAt = null;
    
    /**
     * The timestamp for when the order was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
     * 
     * @var ?string $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createdAt = null;
    
    /**
     * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
     * 
     * 
     * __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
     * to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the 
     * `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the 
     * creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
     * 
     * @var ?string $customerId
     */
	#[\JMS\Serializer\Annotation\SerializedName('customer_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customerId = null;
    
    /**
     * The list of all discounts associated with the order.
     * 
     * 
     * Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
     * an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
     * For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`
     * for every line item.
     * 
     * __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated
     * `line_items.discounts` field results in an error. Use `line_items.applied_discounts`
     * instead.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderLineItemDiscount> $discounts
     */
	#[\JMS\Serializer\Annotation\SerializedName('discounts')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderLineItemDiscount>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $discounts = null;
    
    /**
     * Details about order fulfillment.
     * 
     * 
     * Orders can only be created with at most one fulfillment. However, orders returned
     * by the API might contain multiple fulfillments.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderFulfillment> $fulfillments
     */
	#[\JMS\Serializer\Annotation\SerializedName('fulfillments')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderFulfillment>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $fulfillments = null;
    
    /**
     * The order's unique ID.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The line items included in the order.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderLineItem> $lineItems
     */
	#[\JMS\Serializer\Annotation\SerializedName('line_items')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderLineItem>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $lineItems = null;
    
    /**
     * The ID of the seller location that this order is associated with.
     * 
     * @var string $locationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('location_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $locationId;
    
    /**
     * Application-defined data attached to this order. Metadata fields are intended
     * 
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     * 
     * @var ?array<string, string> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * A collection of various money amounts.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderMoneyAmounts $netAmounts
     */
	#[\JMS\Serializer\Annotation\SerializedName('net_amounts')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderMoneyAmounts')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderMoneyAmounts $netAmounts = null;
    
    /**
     * Pricing options for an order. The options affect how the order's price is calculated.
     * 
     * They can be used, for example, to apply automatic price adjustments that are based on preconfigured
     * [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderPricingOptions $pricingOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('pricing_options')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderPricingOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderPricingOptions $pricingOptions = null;
    
    /**
     * A client-specified ID to associate an entity in another system
     * 
     * with this order.
     * 
     * @var ?string $referenceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('reference_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referenceId = null;
    
    /**
     * The refunds that are part of this order.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Refund> $refunds
     */
	#[\JMS\Serializer\Annotation\SerializedName('refunds')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Refund>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $refunds = null;
    
    /**
     * A collection of various money amounts.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderMoneyAmounts $returnAmounts
     */
	#[\JMS\Serializer\Annotation\SerializedName('return_amounts')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderMoneyAmounts')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderMoneyAmounts $returnAmounts = null;
    
    /**
     * A collection of items from sale orders being returned in this one. Normally part of an
     * 
     * itemized return or exchange. There is exactly one `Return` object per sale `Order` being
     * referenced.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderReturn> $returns
     */
	#[\JMS\Serializer\Annotation\SerializedName('returns')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderReturn>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $returns = null;
    
    /**
     * A set-like list of Rewards that have been added to the Order.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderReward> $rewards
     */
	#[\JMS\Serializer\Annotation\SerializedName('rewards')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderReward>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $rewards = null;
    
    /**
     * A rounding adjustment of the money being returned. Commonly used to apply cash rounding
     * 
     * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderRoundingAdjustment $roundingAdjustment
     */
	#[\JMS\Serializer\Annotation\SerializedName('rounding_adjustment')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderRoundingAdjustment')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderRoundingAdjustment $roundingAdjustment = null;
    
    /**
     * A list of service charges applied to the order.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderServiceCharge> $serviceCharges
     */
	#[\JMS\Serializer\Annotation\SerializedName('service_charges')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderServiceCharge>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $serviceCharges = null;
    
    /**
     * Represents the origination details of an order.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderSource $source
     */
	#[\JMS\Serializer\Annotation\SerializedName('source')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderSource')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderSource $source = null;
    
    /**
     * The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.
     * 
     * @var ?string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $state = null;
    
    /**
     * The list of all taxes associated with the order.
     * 
     * 
     * Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
     * `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
     * with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.
     * 
     * On reads, each tax in the list includes the total amount of that tax applied to the order.
     * 
     * __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated
     * `line_items.taxes` field results in an error. Use `line_items.applied_taxes`
     * instead.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderLineItemTax> $taxes
     */
	#[\JMS\Serializer\Annotation\SerializedName('taxes')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderLineItemTax>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $taxes = null;
    
    /**
     * The tenders that were used to pay for the order.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Tender> $tenders
     */
	#[\JMS\Serializer\Annotation\SerializedName('tenders')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Tender>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tenders = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalDiscountMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_discount_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalDiscountMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalServiceChargeMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_service_charge_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalServiceChargeMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalTaxMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_tax_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalTaxMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalTipMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_tip_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalTipMoney = null;
    
    /**
     * The timestamp for when the order was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
     * 
     * @var ?string $updatedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('updated_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updatedAt = null;
    
    /**
     * The version number, which is incremented each time an update is committed to the order.
     * 
     * Orders not created through the API do not include a version number and
     * therefore cannot be updated.
     * 
     * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
     * 
     * @var ?int $version
     */
	#[\JMS\Serializer\Annotation\SerializedName('version')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $version = null;
    
	public function __construct()
	{
		$this->closedAt = null;
		$this->createdAt = null;
		$this->customerId = null;
		$this->discounts = null;
		$this->fulfillments = null;
		$this->id = null;
		$this->lineItems = null;
		$this->locationId = "";
		$this->metadata = null;
		$this->netAmounts = null;
		$this->pricingOptions = null;
		$this->referenceId = null;
		$this->refunds = null;
		$this->returnAmounts = null;
		$this->returns = null;
		$this->rewards = null;
		$this->roundingAdjustment = null;
		$this->serviceCharges = null;
		$this->source = null;
		$this->state = null;
		$this->taxes = null;
		$this->tenders = null;
		$this->totalDiscountMoney = null;
		$this->totalMoney = null;
		$this->totalServiceChargeMoney = null;
		$this->totalTaxMoney = null;
		$this->totalTipMoney = null;
		$this->updatedAt = null;
		$this->version = null;
	}
}
