"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsSsmComplianceSummary:
    r"""Provides the details about the compliance status for a patch."""
    
    compliance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComplianceType'), 'exclude': lambda f: f is None }})  
    compliant_critical_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompliantCriticalCount'), 'exclude': lambda f: f is None }})  
    compliant_high_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompliantHighCount'), 'exclude': lambda f: f is None }})  
    compliant_informational_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompliantInformationalCount'), 'exclude': lambda f: f is None }})  
    compliant_low_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompliantLowCount'), 'exclude': lambda f: f is None }})  
    compliant_medium_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompliantMediumCount'), 'exclude': lambda f: f is None }})  
    compliant_unspecified_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompliantUnspecifiedCount'), 'exclude': lambda f: f is None }})  
    execution_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionType'), 'exclude': lambda f: f is None }})  
    non_compliant_critical_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonCompliantCriticalCount'), 'exclude': lambda f: f is None }})  
    non_compliant_high_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonCompliantHighCount'), 'exclude': lambda f: f is None }})  
    non_compliant_informational_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonCompliantInformationalCount'), 'exclude': lambda f: f is None }})  
    non_compliant_low_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonCompliantLowCount'), 'exclude': lambda f: f is None }})  
    non_compliant_medium_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonCompliantMediumCount'), 'exclude': lambda f: f is None }})  
    non_compliant_unspecified_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonCompliantUnspecifiedCount'), 'exclude': lambda f: f is None }})  
    overall_severity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverallSeverity'), 'exclude': lambda f: f is None }})  
    patch_baseline_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PatchBaselineId'), 'exclude': lambda f: f is None }})  
    patch_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PatchGroup'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    