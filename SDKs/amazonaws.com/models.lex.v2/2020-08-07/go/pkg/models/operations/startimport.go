// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartImportRequestBodyMergeStrategyEnum - The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
type StartImportRequestBodyMergeStrategyEnum string

const (
	StartImportRequestBodyMergeStrategyEnumOverwrite      StartImportRequestBodyMergeStrategyEnum = "Overwrite"
	StartImportRequestBodyMergeStrategyEnumFailOnConflict StartImportRequestBodyMergeStrategyEnum = "FailOnConflict"
	StartImportRequestBodyMergeStrategyEnumAppend         StartImportRequestBodyMergeStrategyEnum = "Append"
)

func (e *StartImportRequestBodyMergeStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Overwrite":
		fallthrough
	case "FailOnConflict":
		fallthrough
	case "Append":
		*e = StartImportRequestBodyMergeStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartImportRequestBodyMergeStrategyEnum: %s", s)
	}
}

// StartImportRequestBodyResourceSpecification - Provides information about the bot or bot locale that you want to import. You can specify the <code>botImportSpecification</code> or the <code>botLocaleImportSpecification</code>, but not both.
type StartImportRequestBodyResourceSpecification struct {
	BotImportSpecification       *shared.BotImportSpecification       `json:"botImportSpecification,omitempty"`
	BotLocaleImportSpecification *shared.BotLocaleImportSpecification `json:"botLocaleImportSpecification,omitempty"`
	// Provides the parameters required for importing a custom vocabulary.
	CustomVocabularyImportSpecification *shared.CustomVocabularyImportSpecification `json:"customVocabularyImportSpecification,omitempty"`
}

type StartImportRequestBody struct {
	// The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.
	FilePassword *string `json:"filePassword,omitempty"`
	// The unique identifier for the import. It is included in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html">CreateUploadUrl</a> operation.
	ImportID string `json:"importId"`
	// The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
	MergeStrategy StartImportRequestBodyMergeStrategyEnum `json:"mergeStrategy"`
	// Provides information about the bot or bot locale that you want to import. You can specify the <code>botImportSpecification</code> or the <code>botLocaleImportSpecification</code>, but not both.
	ResourceSpecification StartImportRequestBodyResourceSpecification `json:"resourceSpecification"`
}

type StartImportRequest struct {
	RequestBody       StartImportRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type StartImportResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// Success
	StartImportResponse *shared.StartImportResponse
	StatusCode          int
	RawResponse         *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
