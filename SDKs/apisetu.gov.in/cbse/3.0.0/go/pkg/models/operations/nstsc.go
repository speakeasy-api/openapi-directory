// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NstscSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NstscRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// NstscRequestBodyFormatEnum - The format of the certificate in response.
type NstscRequestBodyFormatEnum string

const (
	NstscRequestBodyFormatEnumPdf NstscRequestBodyFormatEnum = "pdf"
)

func (e *NstscRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = NstscRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NstscRequestBodyFormatEnum: %s", s)
	}
}

// NstscRequestBody - Request format
type NstscRequestBody struct {
	CertificateParameters *NstscRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NstscRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Nstsc504ApplicationJSONErrorEnum string

const (
	Nstsc504ApplicationJSONErrorEnumGatewayTimeout Nstsc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Nstsc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Nstsc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Nstsc504ApplicationJSONErrorDescriptionEnum string

const (
	Nstsc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Nstsc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Nstsc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Nstsc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nstsc504ApplicationJSON - Gateway timeout
type Nstsc504ApplicationJSON struct {
	Error            *Nstsc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nstsc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nstsc503ApplicationJSONErrorEnum string

const (
	Nstsc503ApplicationJSONErrorEnumServiceUnavailable Nstsc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Nstsc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Nstsc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Nstsc503ApplicationJSONErrorDescriptionEnum string

const (
	Nstsc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Nstsc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Nstsc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Nstsc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nstsc503ApplicationJSON - Service unavailable
type Nstsc503ApplicationJSON struct {
	Error            *Nstsc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nstsc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nstsc502ApplicationJSONErrorEnum string

const (
	Nstsc502ApplicationJSONErrorEnumBadGatewy Nstsc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Nstsc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Nstsc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Nstsc502ApplicationJSONErrorDescriptionEnum string

const (
	Nstsc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Nstsc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Nstsc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Nstsc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nstsc502ApplicationJSON - Bad gateway
type Nstsc502ApplicationJSON struct {
	Error            *Nstsc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nstsc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nstsc500ApplicationJSONErrorEnum string

const (
	Nstsc500ApplicationJSONErrorEnumInternalServerError Nstsc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Nstsc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Nstsc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Nstsc500ApplicationJSONErrorDescriptionEnum string

const (
	Nstsc500ApplicationJSONErrorDescriptionEnumInternalServerError Nstsc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Nstsc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Nstsc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nstsc500ApplicationJSON - Internal server error
type Nstsc500ApplicationJSON struct {
	Error            *Nstsc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nstsc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nstsc404ApplicationJSONErrorEnum string

const (
	Nstsc404ApplicationJSONErrorEnumRecordNotFound Nstsc404ApplicationJSONErrorEnum = "record_not_found"
	Nstsc404ApplicationJSONErrorEnumURLNotFound    Nstsc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Nstsc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Nstsc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Nstsc404ApplicationJSONErrorDescriptionEnum string

const (
	Nstsc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Nstsc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Nstsc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Nstsc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Nstsc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Nstsc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nstsc404ApplicationJSON - No record found
type Nstsc404ApplicationJSON struct {
	Error            *Nstsc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nstsc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nstsc401ApplicationJSONErrorEnum string

const (
	Nstsc401ApplicationJSONErrorEnumInvalidAuthentication Nstsc401ApplicationJSONErrorEnum = "invalid_authentication"
	Nstsc401ApplicationJSONErrorEnumInvalidAuthorization  Nstsc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Nstsc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Nstsc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Nstsc401ApplicationJSONErrorDescriptionEnum string

const (
	Nstsc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Nstsc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Nstsc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Nstsc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Nstsc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Nstsc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nstsc401ApplicationJSON - Unauthorized access
type Nstsc401ApplicationJSON struct {
	Error            *Nstsc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nstsc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nstsc400ApplicationJSONErrorEnum string

const (
	Nstsc400ApplicationJSONErrorEnumMissingParameter Nstsc400ApplicationJSONErrorEnum = "missing_parameter"
	Nstsc400ApplicationJSONErrorEnumInvalidParameter Nstsc400ApplicationJSONErrorEnum = "invalid_parameter"
	Nstsc400ApplicationJSONErrorEnumInvalidFormat    Nstsc400ApplicationJSONErrorEnum = "invalid_format"
	Nstsc400ApplicationJSONErrorEnumInvalidTxnid     Nstsc400ApplicationJSONErrorEnum = "invalid_txnid"
	Nstsc400ApplicationJSONErrorEnumInvalidConsentid Nstsc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Nstsc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Nstsc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Nstsc400ApplicationJSONErrorDescriptionEnum string

const (
	Nstsc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Nstsc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Nstsc400ApplicationJSONErrorDescriptionEnumBadRequest                              Nstsc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Nstsc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Nstsc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Nstsc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Nstsc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Nstsc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Nstsc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Nstsc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Nstsc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nstsc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nstsc400ApplicationJSON - Bad request
type Nstsc400ApplicationJSON struct {
	Error            *Nstsc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nstsc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NstscResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Nstsc400ApplicationJSONObject *Nstsc400ApplicationJSON
	// Unauthorized access
	Nstsc401ApplicationJSONObject *Nstsc401ApplicationJSON
	// No record found
	Nstsc404ApplicationJSONObject *Nstsc404ApplicationJSON
	// Internal server error
	Nstsc500ApplicationJSONObject *Nstsc500ApplicationJSON
	// Bad gateway
	Nstsc502ApplicationJSONObject *Nstsc502ApplicationJSON
	// Service unavailable
	Nstsc503ApplicationJSONObject *Nstsc503ApplicationJSON
	// Gateway timeout
	Nstsc504ApplicationJSONObject *Nstsc504ApplicationJSON
}
