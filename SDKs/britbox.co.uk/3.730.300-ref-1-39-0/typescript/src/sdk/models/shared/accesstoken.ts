/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The type of the token.
 */
export enum AccessTokenTypeEnum {
  UserAccount = "UserAccount",
  UserProfile = "UserProfile",
}

/**
 * OK
 */
export class AccessToken extends SpeakeasyBase {
  /**
   * When a `UserAccount` token is issued during a single-sign-on flow
   *
   * @remarks
   * a user may have been automatically registered if they didn't
   * have an account already. If this occurs then `accountCreated`
   * will be `true`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountCreated" })
  accountCreated?: boolean;

  /**
   * The timestamp this token expires.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expirationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * True if this token can be refreshed, false if not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refreshable" })
  refreshable: boolean;

  /**
   * The type of the token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: AccessTokenTypeEnum;

  /**
   * The token value used for authenticated requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;
}
