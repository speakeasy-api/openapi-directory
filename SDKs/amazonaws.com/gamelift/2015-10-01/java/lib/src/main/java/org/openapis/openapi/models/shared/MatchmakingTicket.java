/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * MatchmakingTicket - Ticket generated to track the progress of a matchmaking request. Each ticket is uniquely identified by a ticket ID, supplied by the requester, when creating a matchmaking request.
 */
public class MatchmakingTicket {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ConfigurationArn")
    public String configurationArn;

    public MatchmakingTicket withConfigurationArn(String configurationArn) {
        this.configurationArn = configurationArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ConfigurationName")
    public String configurationName;

    public MatchmakingTicket withConfigurationName(String configurationName) {
        this.configurationName = configurationName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("EndTime")
    public OffsetDateTime endTime;

    public MatchmakingTicket withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EstimatedWaitTime")
    public Long estimatedWaitTime;

    public MatchmakingTicket withEstimatedWaitTime(Long estimatedWaitTime) {
        this.estimatedWaitTime = estimatedWaitTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GameSessionConnectionInfo")
    public GameSessionConnectionInfo gameSessionConnectionInfo;

    public MatchmakingTicket withGameSessionConnectionInfo(GameSessionConnectionInfo gameSessionConnectionInfo) {
        this.gameSessionConnectionInfo = gameSessionConnectionInfo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Players")
    public Player[] players;

    public MatchmakingTicket withPlayers(Player[] players) {
        this.players = players;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartTime")
    public OffsetDateTime startTime;

    public MatchmakingTicket withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public MatchmakingConfigurationStatusEnum status;

    public MatchmakingTicket withStatus(MatchmakingConfigurationStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StatusMessage")
    public String statusMessage;

    public MatchmakingTicket withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StatusReason")
    public String statusReason;

    public MatchmakingTicket withStatusReason(String statusReason) {
        this.statusReason = statusReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TicketId")
    public String ticketId;

    public MatchmakingTicket withTicketId(String ticketId) {
        this.ticketId = ticketId;
        return this;
    }
    
    public MatchmakingTicket(){}
}
