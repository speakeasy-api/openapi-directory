// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetUsersIDTrendAnalysisPeriodEnum - The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it's highly unlikely that event period analysis will be possible.
type GetUsersIDTrendAnalysisPeriodEnum string

const (
	GetUsersIDTrendAnalysisPeriodEnumWeeks  GetUsersIDTrendAnalysisPeriodEnum = "weeks"
	GetUsersIDTrendAnalysisPeriodEnumMonths GetUsersIDTrendAnalysisPeriodEnum = "months"
	GetUsersIDTrendAnalysisPeriodEnumYears  GetUsersIDTrendAnalysisPeriodEnum = "years"
	GetUsersIDTrendAnalysisPeriodEnumEvent  GetUsersIDTrendAnalysisPeriodEnum = "event"
)

func (e GetUsersIDTrendAnalysisPeriodEnum) ToPointer() *GetUsersIDTrendAnalysisPeriodEnum {
	return &e
}

func (e *GetUsersIDTrendAnalysisPeriodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weeks":
		fallthrough
	case "months":
		fallthrough
	case "years":
		fallthrough
	case "event":
		*e = GetUsersIDTrendAnalysisPeriodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersIDTrendAnalysisPeriodEnum: %v", v)
	}
}

type GetUsersIDTrendAnalysisRequest struct {
	// A comma-separated list of category IDs to analyse.
	Categories string `queryParam:"style=form,explode=true,name=categories"`
	// The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.
	EndDate string `queryParam:"style=form,explode=true,name=end_date"`
	// The unique identifier of the user.
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.
	Interval int64 `queryParam:"style=form,explode=true,name=interval"`
	// The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it's highly unlikely that event period analysis will be possible.
	Period GetUsersIDTrendAnalysisPeriodEnum `queryParam:"style=form,explode=true,name=period"`
	// A comma-separated list of scenario IDs to analyse. You're likely going to want to include all a user's scenarios here, unless you have reason to only analyse for a subset of scenarios. Regardless of what scenarios are analysed, all actuals (transactions) across all accounts will be included.
	Scenarios string `queryParam:"style=form,explode=true,name=scenarios"`
	// The date to start analysing the budget from. This will be bumped out to make full periods as necessary.
	StartDate string `queryParam:"style=form,explode=true,name=start_date"`
}

type GetUsersIDTrendAnalysisResponse struct {
	// Success
	BudgetAnalysisPackages []shared.BudgetAnalysisPackage
	ContentType            string
	// Bad Request
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
}
