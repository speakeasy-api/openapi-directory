"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AnalyticsListAudiencesSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class AnalyticsListAudiencesRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    include_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_disabled', 'style': 'form', 'explode': True }})
    r"""Include disabled audience definitions"""  
    
class AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsListAudiencesDefaultApplicationJSONError:
    
    code: AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsListAudiencesDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: AnalyticsListAudiencesDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    
class AnalyticsListAudiences200ApplicationJSONValuesStateEnum(str, Enum):
    r"""Audience state."""
    CALCULATING = 'Calculating'
    READY = 'Ready'
    DISABLED = 'Disabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsListAudiences200ApplicationJSONValues:
    r"""Audience definition."""
    
    definition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})
    r"""Audience definition in OData format."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Audience description."""  
    estimated_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_count'), 'exclude': lambda f: f is None }})
    r"""Estimated audience size."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Audience name."""  
    state: Optional[AnalyticsListAudiences200ApplicationJSONValuesStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Audience state."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsListAudiences200ApplicationJSON:
    r"""List of audiences."""
    
    values: list[AnalyticsListAudiences200ApplicationJSONValues] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values') }})
    r"""List of audiences."""  
    next_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextLink'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AnalyticsListAudiencesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    analytics_list_audiences_200_application_json_object: Optional[AnalyticsListAudiences200ApplicationJSON] = dataclasses.field(default=None)
    r"""List of audiences."""  
    analytics_list_audiences_default_application_json_object: Optional[AnalyticsListAudiencesDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    