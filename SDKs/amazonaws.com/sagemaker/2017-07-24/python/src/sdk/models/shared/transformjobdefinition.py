"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import batchstrategy_enum as shared_batchstrategy_enum
from ..shared import transforminput as shared_transforminput
from ..shared import transformoutput as shared_transformoutput
from ..shared import transformresources as shared_transformresources
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransformJobDefinition:
    r"""Defines the input needed to run a transform job using the inference specification specified in the algorithm."""
    
    transform_input: shared_transforminput.TransformInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformInput') }})  
    transform_output: shared_transformoutput.TransformOutput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformOutput') }})  
    transform_resources: shared_transformresources.TransformResources = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformResources') }})  
    batch_strategy: Optional[shared_batchstrategy_enum.BatchStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BatchStrategy'), 'exclude': lambda f: f is None }})  
    environment: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    max_concurrent_transforms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxConcurrentTransforms'), 'exclude': lambda f: f is None }})  
    max_payload_in_mb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxPayloadInMB'), 'exclude': lambda f: f is None }})  
    