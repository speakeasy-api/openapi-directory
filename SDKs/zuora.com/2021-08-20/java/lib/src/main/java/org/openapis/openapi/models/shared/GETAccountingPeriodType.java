/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * GETAccountingPeriodType - Container for custom fields of an Accounting Period object.
 * 
 */
public class GETAccountingPeriodType {
    /**
     * ID of the user who created the accounting period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    public String createdBy;
    public GETAccountingPeriodType withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * Date and time when the accounting period was created.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdOn")
    public OffsetDateTime createdOn;
    public GETAccountingPeriodType withCreatedOn(OffsetDateTime createdOn) {
        this.createdOn = createdOn;
        return this;
    }
    
    /**
     * The end date of the accounting period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("endDate")
    public LocalDate endDate;
    public GETAccountingPeriodType withEndDate(LocalDate endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) REST API call.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileIds")
    public GETAccountingPeriodTypeFileIds fileIds;
    public GETAccountingPeriodType withFileIds(GETAccountingPeriodTypeFileIds fileIds) {
        this.fileIds = fileIds;
        return this;
    }
    
    /**
     * Fiscal year of the accounting period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fiscalYear")
    public String fiscalYear;
    public GETAccountingPeriodType withFiscalYear(String fiscalYear) {
        this.fiscalYear = fiscalYear;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fiscal_quarter")
    public Long fiscalQuarter;
    public GETAccountingPeriodType withFiscalQuarter(Long fiscalQuarter) {
        this.fiscalQuarter = fiscalQuarter;
        return this;
    }
    
    /**
     * ID of the accounting period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GETAccountingPeriodType withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Name of the accounting period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GETAccountingPeriodType withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Any optional notes about the accounting period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public GETAccountingPeriodType withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("runTrialBalanceEnd")
    public OffsetDateTime runTrialBalanceEnd;
    public GETAccountingPeriodType withRunTrialBalanceEnd(OffsetDateTime runTrialBalanceEnd) {
        this.runTrialBalanceEnd = runTrialBalanceEnd;
        return this;
    }
    
    /**
     * If trial balance status is Error, an error message is returned in this field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runTrialBalanceErrorMessage")
    public String runTrialBalanceErrorMessage;
    public GETAccountingPeriodType withRunTrialBalanceErrorMessage(String runTrialBalanceErrorMessage) {
        this.runTrialBalanceErrorMessage = runTrialBalanceErrorMessage;
        return this;
    }
    
    /**
     * Date and time that the trial balance was run. If the trial balance status is Pending, this field is null.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("runTrialBalanceStart")
    public OffsetDateTime runTrialBalanceStart;
    public GETAccountingPeriodType withRunTrialBalanceStart(OffsetDateTime runTrialBalanceStart) {
        this.runTrialBalanceStart = runTrialBalanceStart;
        return this;
    }
    
    /**
     * Status of the trial balance for the accounting period. Possible values:
     * 
     * * `Pending`
     * * `Processing`
     * * `Completed`
     * * `Error`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runTrialBalanceStatus")
    public String runTrialBalanceStatus;
    public GETAccountingPeriodType withRunTrialBalanceStatus(String runTrialBalanceStatus) {
        this.runTrialBalanceStatus = runTrialBalanceStatus;
        return this;
    }
    
    /**
     * The start date of the accounting period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("startDate")
    public LocalDate startDate;
    public GETAccountingPeriodType withStartDate(LocalDate startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * Status of the accounting period. Possible values:
     * * `Open`
     * * `PendingClose`
     * * `Closed`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public GETAccountingPeriodType withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Returns `true` if the request was processed successfully.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public GETAccountingPeriodType withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * ID of the user who last updated the accounting period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    public String updatedBy;
    public GETAccountingPeriodType withUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
    /**
     * Date and time when the accounting period was last updated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedOn")
    public OffsetDateTime updatedOn;
    public GETAccountingPeriodType withUpdatedOn(OffsetDateTime updatedOn) {
        this.updatedOn = updatedOn;
        return this;
    }
    
}
