/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { VpnTunnelLogOptionsSpecification } from "./vpntunnellogoptionsspecification";

/**
 * The IKE version that is permitted for the VPN tunnel.
 */
export class VpnTunnelOptionsSpecificationIKEVersions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE negotiations.
 */
export class VpnTunnelOptionsSpecificationPhase1DHGroupNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: number;
}

/**
 * Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE negotiations.
 */
export class VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE negotiations.
 */
export class VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE negotiations.
 */
export class VpnTunnelOptionsSpecificationPhase2DHGroupNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: number;
}

/**
 * Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE negotiations.
 */
export class VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE negotiations.
 */
export class VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The tunnel options for a single VPN tunnel.
 */
export class VpnTunnelOptionsSpecification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  dpdTimeoutAction?: string;

  @SpeakeasyMetadata()
  dpdTimeoutSeconds?: number;

  @SpeakeasyMetadata({ elemType: VpnTunnelOptionsSpecificationIKEVersions })
  ikeVersions?: VpnTunnelOptionsSpecificationIKEVersions[];

  @SpeakeasyMetadata()
  logOptions?: VpnTunnelLogOptionsSpecification;

  @SpeakeasyMetadata({
    elemType: VpnTunnelOptionsSpecificationPhase1DHGroupNumbers,
  })
  phase1DHGroupNumbers?: VpnTunnelOptionsSpecificationPhase1DHGroupNumbers[];

  @SpeakeasyMetadata({
    elemType: VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms,
  })
  phase1EncryptionAlgorithms?: VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms[];

  @SpeakeasyMetadata({
    elemType: VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms,
  })
  phase1IntegrityAlgorithms?: VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms[];

  @SpeakeasyMetadata()
  phase1LifetimeSeconds?: number;

  @SpeakeasyMetadata({
    elemType: VpnTunnelOptionsSpecificationPhase2DHGroupNumbers,
  })
  phase2DHGroupNumbers?: VpnTunnelOptionsSpecificationPhase2DHGroupNumbers[];

  @SpeakeasyMetadata({
    elemType: VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms,
  })
  phase2EncryptionAlgorithms?: VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms[];

  @SpeakeasyMetadata({
    elemType: VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms,
  })
  phase2IntegrityAlgorithms?: VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms[];

  @SpeakeasyMetadata()
  phase2LifetimeSeconds?: number;

  @SpeakeasyMetadata()
  preSharedKey?: string;

  @SpeakeasyMetadata()
  rekeyFuzzPercentage?: number;

  @SpeakeasyMetadata()
  rekeyMarginTimeSeconds?: number;

  @SpeakeasyMetadata()
  replayWindowSize?: number;

  @SpeakeasyMetadata()
  startupAction?: string;

  @SpeakeasyMetadata()
  tunnelInsideCidr?: string;

  @SpeakeasyMetadata()
  tunnelInsideIpv6Cidr?: string;
}
