"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateIntegrationResponseResponseContentHandlingStrategyEnum(str, Enum):
    r"""<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>"""
    CONVERT_TO_BINARY = 'CONVERT_TO_BINARY'
    CONVERT_TO_TEXT = 'CONVERT_TO_TEXT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateIntegrationResponseResponse:
    r"""Success"""
    
    content_handling_strategy: Optional[CreateIntegrationResponseResponseContentHandlingStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentHandlingStrategy'), 'exclude': lambda f: f is None }})  
    integration_response_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationResponseId'), 'exclude': lambda f: f is None }})  
    integration_response_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationResponseKey'), 'exclude': lambda f: f is None }})  
    response_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResponseParameters'), 'exclude': lambda f: f is None }})  
    response_templates: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResponseTemplates'), 'exclude': lambda f: f is None }})  
    template_selection_expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateSelectionExpression'), 'exclude': lambda f: f is None }})  
    