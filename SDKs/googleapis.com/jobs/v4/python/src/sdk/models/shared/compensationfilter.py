"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compensationrange as shared_compensationrange
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CompensationFilterTypeEnum(str, Enum):
    r"""Required. Type of filter."""
    FILTER_TYPE_UNSPECIFIED = 'FILTER_TYPE_UNSPECIFIED'
    UNIT_ONLY = 'UNIT_ONLY'
    UNIT_AND_AMOUNT = 'UNIT_AND_AMOUNT'
    ANNUALIZED_BASE_AMOUNT = 'ANNUALIZED_BASE_AMOUNT'
    ANNUALIZED_TOTAL_AMOUNT = 'ANNUALIZED_TOTAL_AMOUNT'

class CompensationFilterUnitsEnum(str, Enum):
    COMPENSATION_UNIT_UNSPECIFIED = 'COMPENSATION_UNIT_UNSPECIFIED'
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    YEARLY = 'YEARLY'
    ONE_TIME = 'ONE_TIME'
    OTHER_COMPENSATION_UNIT = 'OTHER_COMPENSATION_UNIT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompensationFilter:
    r"""Filter on job compensation type and amount."""
    
    include_jobs_with_unspecified_compensation_range: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeJobsWithUnspecifiedCompensationRange'), 'exclude': lambda f: f is None }})
    r"""If set to true, jobs with unspecified compensation range fields are included."""  
    range: Optional[shared_compensationrange.CompensationRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    r"""Compensation range."""  
    type: Optional[CompensationFilterTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. Type of filter."""  
    units: Optional[list[CompensationFilterUnitsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})
    r"""Required. Specify desired `base compensation entry's` CompensationInfo.CompensationUnit."""  
    