"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createdevenvironmentresponse as shared_createdevenvironmentresponse
from ..shared import ideconfiguration as shared_ideconfiguration
from ..shared import repositoryinput as shared_repositoryinput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateDevEnvironmentRequestBodyInstanceTypeEnum(str, Enum):
    r"""The Amazon EC2 instace type to use for the Dev Environment."""
    DEV_STANDARD1_SMALL = 'dev.standard1.small'
    DEV_STANDARD1_MEDIUM = 'dev.standard1.medium'
    DEV_STANDARD1_LARGE = 'dev.standard1.large'
    DEV_STANDARD1_XLARGE = 'dev.standard1.xlarge'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDevEnvironmentRequestBodyPersistentStorage:
    r"""Information about the configuration of persistent storage for a Dev Environment."""
    
    size_in_gi_b: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeInGiB'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDevEnvironmentRequestBody:
    
    instance_type: CreateDevEnvironmentRequestBodyInstanceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType') }})
    r"""The Amazon EC2 instace type to use for the Dev Environment."""  
    persistent_storage: CreateDevEnvironmentRequestBodyPersistentStorage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('persistentStorage') }})
    r"""Information about the configuration of persistent storage for a Dev Environment."""  
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})
    r"""The user-defined alias for a Dev Environment."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect."""  
    ides: Optional[list[shared_ideconfiguration.IdeConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ides'), 'exclude': lambda f: f is None }})
    r"""<p>Information about the integrated development environment (IDE) configured for a Dev Environment.</p> <note> <p>An IDE is required to create a Dev Environment. For Dev Environment creation, this field contains configuration information and must be provided.</p> </note>"""  
    inactivity_timeout_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inactivityTimeoutMinutes'), 'exclude': lambda f: f is None }})
    r"""The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running."""  
    repositories: Optional[list[shared_repositoryinput.RepositoryInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories'), 'exclude': lambda f: f is None }})
    r"""The source repository that contains the branch to clone into the Dev Environment."""  
    

@dataclasses.dataclass
class CreateDevEnvironmentRequest:
    
    project_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'projectName', 'style': 'simple', 'explode': False }})
    r"""The name of the project in the space."""  
    request_body: CreateDevEnvironmentRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    space_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceName', 'style': 'simple', 'explode': False }})
    r"""The name of the space."""  
    

@dataclasses.dataclass
class CreateDevEnvironmentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_dev_environment_response: Optional[shared_createdevenvironmentresponse.CreateDevEnvironmentResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    