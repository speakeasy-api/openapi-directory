/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DisplayData } from "./displaydata";
import { Expose, Type } from "class-transformer";

/**
 * Type of transform.
 */
export enum TransformSummaryKindEnum {
  UnknownKind = "UNKNOWN_KIND",
  ParDoKind = "PAR_DO_KIND",
  GroupByKeyKind = "GROUP_BY_KEY_KIND",
  FlattenKind = "FLATTEN_KIND",
  ReadKind = "READ_KIND",
  WriteKind = "WRITE_KIND",
  ConstantKind = "CONSTANT_KIND",
  SingletonKind = "SINGLETON_KIND",
  ShuffleKind = "SHUFFLE_KIND",
}

/**
 * Description of the type, names/ids, and input/outputs for a transform.
 */
export class TransformSummary extends SpeakeasyBase {
  /**
   * Transform-specific display data.
   */
  @SpeakeasyMetadata({ elemType: DisplayData })
  @Expose({ name: "displayData" })
  @Type(() => DisplayData)
  displayData?: DisplayData[];

  /**
   * SDK generated id of this transform instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * User names for all collection inputs to this transform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inputCollectionName" })
  inputCollectionName?: string[];

  /**
   * Type of transform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: TransformSummaryKindEnum;

  /**
   * User provided name for this transform instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * User names for all collection outputs to this transform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputCollectionName" })
  outputCollectionName?: string[];
}
