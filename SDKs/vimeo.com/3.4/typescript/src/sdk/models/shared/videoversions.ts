/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ApiApp } from "./apiapp";
import { Picture } from "./picture";
import { Play } from "./play";
import { Expose, Type } from "class-transformer";

/**
 * Data from video associated with version
 */
export class VideoVersionsMetadataConnectionsVideo extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

export class VideoVersionsMetadataConnections extends SpeakeasyBase {
  /**
   * Data from video associated with version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "video" })
  @Type(() => VideoVersionsMetadataConnectionsVideo)
  video: VideoVersionsMetadataConnectionsVideo;
}

/**
 * The video version's metadata.
 */
export class VideoVersionsMetadata extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => VideoVersionsMetadataConnections)
  connections: VideoVersionsMetadataConnections;
}

/**
 * The approach for uploading the video.
 */
export enum VideoVersionsUploadApproachEnum {
  Post = "post",
  Pull = "pull",
  Streaming = "streaming",
  Tus = "tus",
}

/**
 * The status code for the availability of the uploaded video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `complete` - The upload is complete.
 *  * `error` - The upload ended with an error.
 *  * `in_progress` - The upload is underway.
 *
 */
export enum VideoVersionsUploadStatusEnum {
  Complete = "complete",
  Error = "error",
  InProgress = "in_progress",
}

/**
 * The upload information for this version.
 */
export class VideoVersionsUpload extends SpeakeasyBase {
  /**
   * The approach for uploading the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approach" })
  approach?: VideoVersionsUploadApproachEnum;

  /**
   * The URI for completing the upload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "complete_uri" })
  completeUri?: string;

  /**
   * The HTML form for uploading a video through the post approach.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form" })
  form?: string;

  /**
   * The link of the video to capture through the pull approach.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * The redirect URL for the upload app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirect_url" })
  redirectUrl?: string;

  /**
   * The file size in bytes of the uploaded video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * The status code for the availability of the uploaded video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `complete` - The upload is complete.
   *  * `error` - The upload ended with an error.
   *  * `in_progress` - The upload is underway.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: VideoVersionsUploadStatusEnum;

  /**
   * The link for sending video file data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_link" })
  uploadLink?: string;
}

/**
 * The user's account type:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `basic` - The user has a Vimeo Basic subscription.
 *  * `business` - The user has a Vimeo Business subscription.
 *  * `live_business` - The user has a Vimeo Business Live subscription.
 *  * `live_premium` - The user has a Vimeo Premium subscription.
 *  * `live_pro` - The user has a Vimeo PRO Live subscription.
 *  * `plus` - The user has a Vimeo Plus subscription.
 *  * `pro` - The user has a Vimeo Pro subscription.
 *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
 *  * `producer` - The user has a Vimeo Producer subscription.
 *
 */
export enum VideoVersionsUserAccountEnum {
  Basic = "basic",
  Business = "business",
  LiveBusiness = "live_business",
  LivePremium = "live_premium",
  LivePro = "live_pro",
  Plus = "plus",
  Pro = "pro",
  ProUnlimited = "pro_unlimited",
  Producer = "producer",
}

/**
 * The user's content filters:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `drugs` - Drugs or alcohol use.
 *  * `language` - Profanity or sexually suggestive content.
 *  * `nudity` - Nudity.
 *  * `safe` - Suitable for all audiences.
 *  * `unrated` - No rating.
 *  * `violence` - Violent or graphic content.
 *
 */
export enum VideoVersionsUserContentFilterEnum {
  Drugs = "drugs",
  Language = "language",
  Nudity = "nudity",
  Safe = "safe",
  Unrated = "unrated",
  Violence = "violence",
}

/**
 * Information about the albums created by this user.
 */
export class VideoVersionsUserMetadataConnectionsAlbums extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of albums on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the appearances of this user in other videos.
 */
export class VideoVersionsUserMetadataConnectionsAppearances extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of appearances on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
 */
export class VideoVersionsUserMetadataConnectionsBlock extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's followed categories.
 */
export class VideoVersionsUserMetadataConnectionsCategories extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of categories on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's subscribed channels.
 */
export class VideoVersionsUserMetadataConnectionsChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's feed.
 */
export class VideoVersionsUserMetadataConnectionsFeed extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's folders.
 */
export class VideoVersionsUserMetadataConnectionsFolders extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of folders on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the user's followers.
 */
export class VideoVersionsUserMetadataConnectionsFollowers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of followers on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users that the current user is following.
 */
export class VideoVersionsUserMetadataConnectionsFollowing extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the groups created by this user.
 */
export class VideoVersionsUserMetadataConnectionsGroups extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of groups on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has liked.
 */
export class VideoVersionsUserMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the channels that this user moderates.
 */
export class VideoVersionsUserMetadataConnectionsModeratedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portraits.
 */
export class VideoVersionsUserMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of pictures on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portfolios.
 */
export class VideoVersionsUserMetadataConnectionsPortfolios extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of portfolios on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class VideoVersionsUserMetadataConnectionsRecommendedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class VideoVersionsUserMetadataConnectionsRecommendedUsers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that have been shared with this user.
 */
export class VideoVersionsUserMetadataConnectionsShared extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos uploaded by this user.
 */
export class VideoVersionsUserMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has watched.
 */
export class VideoVersionsUserMetadataConnectionsWatchedVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user wants to watch later.
 */
export class VideoVersionsUserMetadataConnectionsWatchlater extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The list of resource URIs related to the user.
 */
export class VideoVersionsUserMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the albums created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "albums" })
  @Type(() => VideoVersionsUserMetadataConnectionsAlbums)
  albums: VideoVersionsUserMetadataConnectionsAlbums;

  /**
   * Information about the appearances of this user in other videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appearances" })
  @Type(() => VideoVersionsUserMetadataConnectionsAppearances)
  appearances: VideoVersionsUserMetadataConnectionsAppearances;

  /**
   * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => VideoVersionsUserMetadataConnectionsBlock)
  block: VideoVersionsUserMetadataConnectionsBlock;

  /**
   * Information about this user's followed categories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  @Type(() => VideoVersionsUserMetadataConnectionsCategories)
  categories: VideoVersionsUserMetadataConnectionsCategories;

  /**
   * Information about this user's subscribed channels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  @Type(() => VideoVersionsUserMetadataConnectionsChannels)
  channels: VideoVersionsUserMetadataConnectionsChannels;

  /**
   * Information about this user's feed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feed" })
  @Type(() => VideoVersionsUserMetadataConnectionsFeed)
  feed: VideoVersionsUserMetadataConnectionsFeed;

  /**
   * Information about this user's folders.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "folders" })
  @Type(() => VideoVersionsUserMetadataConnectionsFolders)
  folders: VideoVersionsUserMetadataConnectionsFolders;

  /**
   * Information about the user's followers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "followers" })
  @Type(() => VideoVersionsUserMetadataConnectionsFollowers)
  followers: VideoVersionsUserMetadataConnectionsFollowers;

  /**
   * Information about the users that the current user is following.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "following" })
  @Type(() => VideoVersionsUserMetadataConnectionsFollowing)
  following: VideoVersionsUserMetadataConnectionsFollowing;

  /**
   * Information about the groups created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  @Type(() => VideoVersionsUserMetadataConnectionsGroups)
  groups: VideoVersionsUserMetadataConnectionsGroups;

  /**
   * Information about the videos that this user has liked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => VideoVersionsUserMetadataConnectionsLikes)
  likes: VideoVersionsUserMetadataConnectionsLikes;

  /**
   * Information about the channels that this user moderates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "moderated_channels" })
  @Type(() => VideoVersionsUserMetadataConnectionsModeratedChannels)
  moderatedChannels: VideoVersionsUserMetadataConnectionsModeratedChannels;

  /**
   * Information about this user's portraits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => VideoVersionsUserMetadataConnectionsPictures)
  pictures: VideoVersionsUserMetadataConnectionsPictures;

  /**
   * Information about this user's portfolios.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portfolios" })
  @Type(() => VideoVersionsUserMetadataConnectionsPortfolios)
  portfolios: VideoVersionsUserMetadataConnectionsPortfolios;

  /**
   * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_channels" })
  @Type(() => VideoVersionsUserMetadataConnectionsRecommendedChannels)
  recommendedChannels: VideoVersionsUserMetadataConnectionsRecommendedChannels;

  /**
   * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_users" })
  @Type(() => VideoVersionsUserMetadataConnectionsRecommendedUsers)
  recommendedUsers: VideoVersionsUserMetadataConnectionsRecommendedUsers;

  /**
   * Information about the videos that have been shared with this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shared" })
  @Type(() => VideoVersionsUserMetadataConnectionsShared)
  shared: VideoVersionsUserMetadataConnectionsShared;

  /**
   * Information about the videos uploaded by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => VideoVersionsUserMetadataConnectionsVideos)
  videos: VideoVersionsUserMetadataConnectionsVideos;

  /**
   * Information about the videos that this user has watched.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watched_videos" })
  @Type(() => VideoVersionsUserMetadataConnectionsWatchedVideos)
  watchedVideos: VideoVersionsUserMetadataConnectionsWatchedVideos;

  /**
   * Information about the videos that this user wants to watch later.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  @Type(() => VideoVersionsUserMetadataConnectionsWatchlater)
  watchlater: VideoVersionsUserMetadataConnectionsWatchlater;
}

export class VideoVersionsUserMetadataInteractionsAddPrivacyUser extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information related to the block status of this user.
 */
export class VideoVersionsUserMetadataInteractionsBlock extends SpeakeasyBase {
  /**
   * Whether a user is blocking the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the block occurred, or the null value if no block exists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to block or unblock the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information related to the followed status of this user.
 */
export class VideoVersionsUserMetadataInteractionsFollow extends SpeakeasyBase {
  /**
   * Whether a user is following the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to follow the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information regarding where and how to report a user.
 */
export class VideoVersionsUserMetadataInteractionsReport extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * List of valid reasons for reporting a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

export class VideoVersionsUserMetadataInteractions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "add_privacy_user" })
  @Type(() => VideoVersionsUserMetadataInteractionsAddPrivacyUser)
  addPrivacyUser?: VideoVersionsUserMetadataInteractionsAddPrivacyUser;

  /**
   * Information related to the block status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => VideoVersionsUserMetadataInteractionsBlock)
  block: VideoVersionsUserMetadataInteractionsBlock;

  /**
   * Information related to the followed status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow" })
  @Type(() => VideoVersionsUserMetadataInteractionsFollow)
  follow: VideoVersionsUserMetadataInteractionsFollow;

  /**
   * Information regarding where and how to report a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report" })
  @Type(() => VideoVersionsUserMetadataInteractionsReport)
  report: VideoVersionsUserMetadataInteractionsReport;
}

/**
 * The user's metadata.
 */
export class VideoVersionsUserMetadata extends SpeakeasyBase {
  /**
   * The list of resource URIs related to the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => VideoVersionsUserMetadataConnections)
  connections: VideoVersionsUserMetadataConnections;

  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => VideoVersionsUserMetadataInteractions)
  interactions: VideoVersionsUserMetadataInteractions;
}

/**
 * The user's privacy preference for comments:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can comment on the user's videos.
 *  * `contacts` - Only contacts can comment on the user's videos.
 *  * `nobody` - No one can comment on the user's videos.
 *
 */
export enum VideoVersionsUserPreferencesVideosPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The user's privacy preference for embeds:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `private` - Only the user can embed their own videos.
 *  * `public` - Anyone can embed the user's videos.
 *  * `whitelist` - Only those on the whitelist can embed the user's videos.
 *
 */
export enum VideoVersionsUserPreferencesVideosPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
  Whitelist = "whitelist",
}

/**
 * The user's privacy preference for views:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the user's videos.
 *  * `contacts` - Only contacts can view the user's videos.
 *  * `disable` - Views are disabled for the user's videos.
 *  * `nobody` - No one except the user can view the user's videos.
 *  * `password` - Only those with the password can view the user's videos.
 *  * `unlisted` - Anybody can view the user's videos if they have a link.
 *  * `users` - Only other Vimeo members can view the user's videos.
 *
 */
export enum VideoVersionsUserPreferencesVideosPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

export class VideoVersionsUserPreferencesVideosPrivacy extends SpeakeasyBase {
  /**
   * Whether other users can add the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add?: boolean;

  /**
   * The user's privacy preference for comments:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can comment on the user's videos.
   *  * `contacts` - Only contacts can comment on the user's videos.
   *  * `nobody` - No one can comment on the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: VideoVersionsUserPreferencesVideosPrivacyCommentsEnum;

  /**
   * Whether other users can download the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * The user's privacy preference for embeds:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `private` - Only the user can embed their own videos.
   *  * `public` - Anyone can embed the user's videos.
   *  * `whitelist` - Only those on the whitelist can embed the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: VideoVersionsUserPreferencesVideosPrivacyEmbedEnum;

  /**
   * The user's privacy preference for views:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the user's videos.
   *  * `contacts` - Only contacts can view the user's videos.
   *  * `disable` - Views are disabled for the user's videos.
   *  * `nobody` - No one except the user can view the user's videos.
   *  * `password` - Only those with the password can view the user's videos.
   *  * `unlisted` - Anybody can view the user's videos if they have a link.
   *  * `users` - Only other Vimeo members can view the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: VideoVersionsUserPreferencesVideosPrivacyViewEnum;
}

export class VideoVersionsUserPreferencesVideos extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => VideoVersionsUserPreferencesVideosPrivacy)
  privacy?: VideoVersionsUserPreferencesVideosPrivacy;
}

export class VideoVersionsUserPreferences extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => VideoVersionsUserPreferencesVideos)
  videos?: VideoVersionsUserPreferencesVideos;
}

/**
 * Information about the user's lifetime upload usage.
 */
export class VideoVersionsUserUploadQuotaLifetime extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your lifetime maximum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload across the lifetime of your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The number of bytes that you've already uploaded against your lifetime limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Information about the user's usage for the current period.
 */
export class VideoVersionsUserUploadQuotaPeriodic extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload per period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The time in ISO 8601 format when your upload quota resets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reset_date" })
  resetDate: string;

  /**
   * The number of bytes that you've already uploaded against your quota in the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
 */
export enum VideoVersionsUserUploadQuotaSpaceShowingEnum {
  Lifetime = "lifetime",
  Periodic = "periodic",
}

/**
 * Information about the user's upload space remaining for the current period.
 */
export class VideoVersionsUserUploadQuotaSpace extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The maximum number of bytes allotted to your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showing" })
  showing: VideoVersionsUserUploadQuotaSpaceShowingEnum;

  /**
   * The number of bytes that you've already uploaded against your quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Appears only when the user has upload access and is looking at their own user record.
 */
export class VideoVersionsUserUploadQuota extends SpeakeasyBase {
  /**
   * Information about the user's lifetime upload usage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  @Type(() => VideoVersionsUserUploadQuotaLifetime)
  lifetime: VideoVersionsUserUploadQuotaLifetime;

  /**
   * Information about the user's usage for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "periodic" })
  @Type(() => VideoVersionsUserUploadQuotaPeriodic)
  periodic: VideoVersionsUserUploadQuotaPeriodic;

  /**
   * Information about the user's upload space remaining for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "space" })
  @Type(() => VideoVersionsUserUploadQuotaSpace)
  space: VideoVersionsUserUploadQuotaSpace;
}

export class VideoVersionsUserWebsites extends SpeakeasyBase {
  /**
   * The website's description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The URL of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The name of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The owner of the video version.
 */
export class VideoVersionsUser extends SpeakeasyBase {
  /**
   * The user's account type:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `basic` - The user has a Vimeo Basic subscription.
   *  * `business` - The user has a Vimeo Business subscription.
   *  * `live_business` - The user has a Vimeo Business Live subscription.
   *  * `live_premium` - The user has a Vimeo Premium subscription.
   *  * `live_pro` - The user has a Vimeo PRO Live subscription.
   *  * `plus` - The user has a Vimeo Plus subscription.
   *  * `pro` - The user has a Vimeo Pro subscription.
   *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
   *  * `producer` - The user has a Vimeo Producer subscription.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account: VideoVersionsUserAccountEnum;

  /**
   * The user's bio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bio" })
  bio: string;

  /**
   * The user's content filters:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `drugs` - Drugs or alcohol use.
   *  * `language` - Profanity or sexually suggestive content.
   *  * `nudity` - Nudity.
   *  * `safe` - Suitable for all audiences.
   *  * `unrated` - No rating.
   *  * `violence` - Violent or graphic content.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_filter" })
  contentFilter?: VideoVersionsUserContentFilterEnum;

  /**
   * The time in ISO 8601 format when the user account was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The user's email address. This data requires a bearer token with the `email` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The absolute URL of this user's profile page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The user's location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * The user's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => VideoVersionsUserMetadata)
  metadata: VideoVersionsUserMetadata;

  /**
   * The user's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active portrait of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  @SpeakeasyMetadata()
  @Expose({ name: "preferences" })
  @Type(() => VideoVersionsUserPreferences)
  preferences?: VideoVersionsUserPreferences;

  /**
   * The user's resource key string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * Appears only when the user has upload access and is looking at their own user record.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_quota" })
  @Type(() => VideoVersionsUserUploadQuota)
  uploadQuota: VideoVersionsUserUploadQuota;

  /**
   * The user's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The user's websites.
   */
  @SpeakeasyMetadata({ elemType: VideoVersionsUserWebsites })
  @Expose({ name: "websites" })
  @Type(() => VideoVersionsUserWebsites)
  websites: VideoVersionsUserWebsites[];
}

/**
 * Standard request.
 */
export class VideoVersions extends SpeakeasyBase {
  /**
   * Whether this video version is the currently active one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The API app associated with the video version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app" })
  @Type(() => ApiApp)
  app: ApiApp;

  /**
   * The time in ISO 8601 for when the video version was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The duration of the video version in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration: number;

  /**
   * The file name of the video version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filename" })
  filename: string;

  /**
   * The size in byes of the video version file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filesize" })
  filesize: number;

  /**
   * The video version's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => VideoVersionsMetadata)
  metadata: VideoVersionsMetadata;

  /**
   * The time in ISO 8601 format when the video version was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified_time" })
  modifiedTime: string;

  /**
   * The Play representation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "play" })
  @Type(() => Play)
  play: Play;

  /**
   * The upload information for this version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload" })
  @Type(() => VideoVersionsUpload)
  upload: VideoVersionsUpload;

  /**
   * The time in ISO 8601 format when the video version was uploaded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_date" })
  uploadDate: string;

  /**
   * The version's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The owner of the video version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => VideoVersionsUser)
  user: VideoVersionsUser;
}
