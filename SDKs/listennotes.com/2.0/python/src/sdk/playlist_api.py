"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PlaylistAPI:
    r"""Endpoints to fetch Listen Later playlists data"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_playlist_by_id(self, request: operations.GetPlaylistByIDRequest) -> operations.GetPlaylistByIDResponse:
        r"""Fetch a playlist's info and items (i.e., episodes or podcasts).
        A playlist can be an episode list (i.e., all items are episodes) or a podcast list (i.e., all items are podcasts),
        which is essentially the same as those created via listennotes.com/listen/.
        This endpoint fetches a list of items (i.e., episodes or podcasts) in the playlist.
        You can use the **last_pub_date_ms** parameter to do pagination and fetch more items.
        A playlist can be **public** (discoverable on ListenNotes.com),
        **unlisted** (accessible to anyone who knows the playlist id),
        or **private** (accessible to its owner).
        You can fetch all playlists created by you, and **public** / **unlisted** playlists created by others.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPlaylistByIDRequest, base_url, '/playlists/{id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPlaylistByIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlaylistByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlaylistResponse])
                res.playlist_response = out
        elif http_res.status_code == 401 or http_res.status_code == 404 or http_res.status_code == 429 or http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    def get_playlists(self, request: operations.GetPlaylistsRequest) -> operations.GetPlaylistsResponse:
        r"""Fetch a list of your playlists.
        This endpoint returns same data as listennotes.com/listen under your account.
        You can use the **page** parameter to do pagination and fetch more playlists.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/playlists'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPlaylistsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlaylistsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlaylistsResponse])
                res.playlists_response = out
        elif http_res.status_code == 401 or http_res.status_code == 429 or http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    