// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReloadBrandingConf200ApplicationJSONActionEnum - The id of the action
type ReloadBrandingConf200ApplicationJSONActionEnum string

const (
	ReloadBrandingConf200ApplicationJSONActionEnumGetBrandingConf ReloadBrandingConf200ApplicationJSONActionEnum = "getBrandingConf"
)

func (e *ReloadBrandingConf200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getBrandingConf":
		*e = ReloadBrandingConf200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadBrandingConf200ApplicationJSONActionEnum: %s", s)
	}
}

type ReloadBrandingConf200ApplicationJSONData struct {
	Branding shared.BrandingConf `json:"branding"`
}

// ReloadBrandingConf200ApplicationJSONResultEnum - Result of the request
type ReloadBrandingConf200ApplicationJSONResultEnum string

const (
	ReloadBrandingConf200ApplicationJSONResultEnumSuccess ReloadBrandingConf200ApplicationJSONResultEnum = "success"
	ReloadBrandingConf200ApplicationJSONResultEnumError   ReloadBrandingConf200ApplicationJSONResultEnum = "error"
)

func (e *ReloadBrandingConf200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ReloadBrandingConf200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadBrandingConf200ApplicationJSONResultEnum: %s", s)
	}
}

// ReloadBrandingConf200ApplicationJSON - Branding configuration
type ReloadBrandingConf200ApplicationJSON struct {
	// The id of the action
	Action ReloadBrandingConf200ApplicationJSONActionEnum `json:"action"`
	Data   ReloadBrandingConf200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result ReloadBrandingConf200ApplicationJSONResultEnum `json:"result"`
}

type ReloadBrandingConfResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Branding configuration
	ReloadBrandingConf200ApplicationJSONObject *ReloadBrandingConf200ApplicationJSON
}
