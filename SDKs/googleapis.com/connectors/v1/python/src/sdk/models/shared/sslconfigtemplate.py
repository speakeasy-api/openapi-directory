"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configvariabletemplate as shared_configvariabletemplate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SslConfigTemplateClientCertTypeEnum(str, Enum):
    CERT_TYPE_UNSPECIFIED = 'CERT_TYPE_UNSPECIFIED'
    PEM = 'PEM'

class SslConfigTemplateServerCertTypeEnum(str, Enum):
    CERT_TYPE_UNSPECIFIED = 'CERT_TYPE_UNSPECIFIED'
    PEM = 'PEM'

class SslConfigTemplateSslTypeEnum(str, Enum):
    r"""Controls the ssl type for the given connector version"""
    SSL_TYPE_UNSPECIFIED = 'SSL_TYPE_UNSPECIFIED'
    TLS = 'TLS'
    MTLS = 'MTLS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SslConfigTemplate:
    r"""Ssl config details of a connector version"""
    
    additional_variables: Optional[list[shared_configvariabletemplate.ConfigVariableTemplate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalVariables'), 'exclude': lambda f: f is None }})
    r"""Any additional fields that need to be rendered"""  
    client_cert_type: Optional[list[SslConfigTemplateClientCertTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertType'), 'exclude': lambda f: f is None }})
    r"""List of supported Client Cert Types"""  
    is_tls_mandatory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isTlsMandatory'), 'exclude': lambda f: f is None }})
    r"""Boolean for determining if the connector version mandates TLS."""  
    server_cert_type: Optional[list[SslConfigTemplateServerCertTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverCertType'), 'exclude': lambda f: f is None }})
    r"""List of supported Server Cert Types"""  
    ssl_type: Optional[SslConfigTemplateSslTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslType'), 'exclude': lambda f: f is None }})
    r"""Controls the ssl type for the given connector version"""  
    