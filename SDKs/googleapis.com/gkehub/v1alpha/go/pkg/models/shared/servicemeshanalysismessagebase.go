// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServiceMeshAnalysisMessageBaseLevelEnum - Represents how severe a message is.
type ServiceMeshAnalysisMessageBaseLevelEnum string

const (
	ServiceMeshAnalysisMessageBaseLevelEnumLevelUnspecified ServiceMeshAnalysisMessageBaseLevelEnum = "LEVEL_UNSPECIFIED"
	ServiceMeshAnalysisMessageBaseLevelEnumError            ServiceMeshAnalysisMessageBaseLevelEnum = "ERROR"
	ServiceMeshAnalysisMessageBaseLevelEnumWarning          ServiceMeshAnalysisMessageBaseLevelEnum = "WARNING"
	ServiceMeshAnalysisMessageBaseLevelEnumInfo             ServiceMeshAnalysisMessageBaseLevelEnum = "INFO"
)

func (e *ServiceMeshAnalysisMessageBaseLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LEVEL_UNSPECIFIED":
		fallthrough
	case "ERROR":
		fallthrough
	case "WARNING":
		fallthrough
	case "INFO":
		*e = ServiceMeshAnalysisMessageBaseLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceMeshAnalysisMessageBaseLevelEnum: %s", s)
	}
}

// ServiceMeshAnalysisMessageBase - AnalysisMessageBase describes some common information that is needed for all messages.
type ServiceMeshAnalysisMessageBase struct {
	// A url pointing to the Service Mesh or Istio documentation for this specific error type.
	DocumentationURL *string `json:"documentationUrl,omitempty"`
	// Represents how severe a message is.
	Level *ServiceMeshAnalysisMessageBaseLevelEnum `json:"level,omitempty"`
	// A unique identifier for the type of message. Display_name is intended to be human-readable, code is intended to be machine readable. There should be a one-to-one mapping between display_name and code. (i.e. do not re-use display_names or codes between message types.) See istio.analysis.v1alpha1.AnalysisMessageBase.Type
	Type *ServiceMeshType `json:"type,omitempty"`
}
