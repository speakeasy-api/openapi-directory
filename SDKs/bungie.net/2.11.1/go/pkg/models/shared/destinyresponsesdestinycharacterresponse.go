// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// DestinyResponsesDestinyCharacterResponseActivities - Activity data - info about current activities available to the player.
// COMPONENT TYPE: CharacterActivities
type DestinyResponsesDestinyCharacterResponseActivities struct {
	// This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.
	Data *DestinyEntitiesCharactersDestinyCharacterActivitiesComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseCharacter - Base information about the character in question.
// COMPONENT TYPE: Characters
type DestinyResponsesDestinyCharacterResponseCharacter struct {
	// This component contains base properties of the character. You'll probably want to always request this component, but hey you do you.
	Data *DestinyEntitiesCharactersDestinyCharacterComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseCollectibles - COMPONENT TYPE: Collectibles
type DestinyResponsesDestinyCharacterResponseCollectibles struct {
	Data *DestinyComponentsCollectiblesDestinyCollectiblesComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseCurrencyLookups - A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
// COMPONENT TYPE: CurrencyLookups
type DestinyResponsesDestinyCharacterResponseCurrencyLookups struct {
	// This component provides a quick lookup of every item the requested character has and how much of that item they have.
	// Requesting this component will allow you to circumvent manually putting together the list of which currencies you have for the purpose of testing currency requirements on an item being purchased, or operations that have costs.
	// You *could* figure this out yourself by doing a GetCharacter or GetProfile request and forming your own lookup table, but that is inconvenient enough that this feels like a worthwhile (and optional) redundency. Don't bother requesting it if you have already created your own lookup from prior GetCharacter/GetProfile calls.
	Data *DestinyComponentsInventoryDestinyCurrenciesComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseEquipment - Equipped items on the character.
// COMPONENT TYPE: CharacterEquipment
type DestinyResponsesDestinyCharacterResponseEquipment struct {
	// A list of minimal information for items in an inventory: be it a character's inventory, or a Profile's inventory. (Note that the Vault is a collection of inventory buckets in the Profile's inventory)
	// Inventory Items returned here are in a flat list, but importantly they have a bucketHash property that indicates the specific inventory bucket that is holding them. These buckets constitute things like the separate sections of the Vault, the user's inventory slots, etc. See DestinyInventoryBucketDefinition for more info.
	Data *DestinyEntitiesInventoryDestinyInventoryComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseInventory - The character-level non-equipped inventory items.
// COMPONENT TYPE: CharacterInventories
type DestinyResponsesDestinyCharacterResponseInventory struct {
	// A list of minimal information for items in an inventory: be it a character's inventory, or a Profile's inventory. (Note that the Vault is a collection of inventory buckets in the Profile's inventory)
	// Inventory Items returned here are in a flat list, but importantly they have a bucketHash property that indicates the specific inventory bucket that is holding them. These buckets constitute things like the separate sections of the Vault, the user's inventory slots, etc. See DestinyInventoryBucketDefinition for more info.
	Data *DestinyEntitiesInventoryDestinyInventoryComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseItemComponents - The set of components belonging to the player's instanced items.
// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
type DestinyResponsesDestinyCharacterResponseItemComponents struct {
	Instances      *DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent
	Objectives     *DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent
	Perks          *DictionaryComponentResponseOfint64AndDestinyItemPerksComponent
	PlugObjectives *DictionaryComponentResponseOfint64AndDestinyItemPlugObjectivesComponent
	PlugStates     *DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent
	RenderData     *DictionaryComponentResponseOfint64AndDestinyItemRenderComponent
	ReusablePlugs  *DictionaryComponentResponseOfint64AndDestinyItemReusablePlugsComponent
	Sockets        *DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent
	Stats          *DictionaryComponentResponseOfint64AndDestinyItemStatsComponent
	TalentGrids    *DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent
}

// DestinyResponsesDestinyCharacterResponseKiosks - Items available from Kiosks that are available to this specific character.
// COMPONENT TYPE: Kiosks
type DestinyResponsesDestinyCharacterResponseKiosks struct {
	// A Kiosk is a Vendor (DestinyVendorDefinition) that sells items based on whether you have already acquired that item before.
	// This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the individual character's DestinyCharacterKiosksComponent.
	// Note that, because this component returns vendorItemIndexes (that is to say, indexes into the Kiosk Vendor's itemList property), these results are necessarily content version dependent. Make sure that you have the latest version of the content manifest databases before using this data.
	Data *DestinyComponentsKiosksDestinyKiosksComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponsePlugSets - When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.
// This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
// COMPONENT TYPE: ItemSockets
type DestinyResponsesDestinyCharacterResponsePlugSets struct {
	// Sockets may refer to a "Plug Set": a set of reusable plugs that may be shared across multiple sockets (or even, in theory, multiple sockets over multiple items).
	// This is the set of those plugs that we came across in the users' inventory, along with the values for plugs in the set. Any given set in this component may be represented in Character and Profile-level, as some plugs may be Profile-level restricted, and some character-level restricted. (note that the ones that are even more specific will remain on the actual socket component itself, as they cannot be reused)
	Data *DestinyComponentsPlugSetsDestinyPlugSetsComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponsePresentationNodes - COMPONENT TYPE: PresentationNodes
type DestinyResponsesDestinyCharacterResponsePresentationNodes struct {
	Data *DestinyComponentsPresentationDestinyPresentationNodesComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseProgressions - Character progression data, including Milestones.
// COMPONENT TYPE: CharacterProgressions
type DestinyResponsesDestinyCharacterResponseProgressions struct {
	// This component returns anything that could be considered "Progression" on a user: data where the user is gaining levels, reputation, completions, rewards, etc...
	Data *DestinyEntitiesCharactersDestinyCharacterProgressionComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseRecords - COMPONENT TYPE: Records
type DestinyResponsesDestinyCharacterResponseRecords struct {
	Data *DestinyComponentsRecordsDestinyCharacterRecordsComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseRenderData - Character rendering data - a minimal set of information about equipment and dyes used for rendering.
// COMPONENT TYPE: CharacterRenderData
type DestinyResponsesDestinyCharacterResponseRenderData struct {
	// Only really useful if you're attempting to render the character's current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you'll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.
	// Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.
	Data *DestinyEntitiesCharactersDestinyCharacterRenderComponent
	// If true, this component is disabled.
	Disabled *bool
	Privacy  *int
}

// DestinyResponsesDestinyCharacterResponseUninstancedItemComponents - The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.
// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
type DestinyResponsesDestinyCharacterResponseUninstancedItemComponents struct {
	Objectives *DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent
}

// DestinyResponsesDestinyCharacterResponse - The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
type DestinyResponsesDestinyCharacterResponse struct {
	// Activity data - info about current activities available to the player.
	// COMPONENT TYPE: CharacterActivities
	Activities *DestinyResponsesDestinyCharacterResponseActivities
	// Base information about the character in question.
	// COMPONENT TYPE: Characters
	Character *DestinyResponsesDestinyCharacterResponseCharacter
	// COMPONENT TYPE: Collectibles
	Collectibles *DestinyResponsesDestinyCharacterResponseCollectibles
	// A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
	// COMPONENT TYPE: CurrencyLookups
	CurrencyLookups *DestinyResponsesDestinyCharacterResponseCurrencyLookups
	// Equipped items on the character.
	// COMPONENT TYPE: CharacterEquipment
	Equipment *DestinyResponsesDestinyCharacterResponseEquipment
	// The character-level non-equipped inventory items.
	// COMPONENT TYPE: CharacterInventories
	Inventory *DestinyResponsesDestinyCharacterResponseInventory
	// The set of components belonging to the player's instanced items.
	// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
	ItemComponents *DestinyResponsesDestinyCharacterResponseItemComponents
	// Items available from Kiosks that are available to this specific character.
	// COMPONENT TYPE: Kiosks
	Kiosks *DestinyResponsesDestinyCharacterResponseKiosks
	// When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.
	// This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
	// COMPONENT TYPE: ItemSockets
	PlugSets *DestinyResponsesDestinyCharacterResponsePlugSets
	// COMPONENT TYPE: PresentationNodes
	PresentationNodes *DestinyResponsesDestinyCharacterResponsePresentationNodes
	// Character progression data, including Milestones.
	// COMPONENT TYPE: CharacterProgressions
	Progressions *DestinyResponsesDestinyCharacterResponseProgressions
	// COMPONENT TYPE: Records
	Records *DestinyResponsesDestinyCharacterResponseRecords
	// Character rendering data - a minimal set of information about equipment and dyes used for rendering.
	// COMPONENT TYPE: CharacterRenderData
	RenderData *DestinyResponsesDestinyCharacterResponseRenderData
	// The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.
	// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
	UninstancedItemComponents *DestinyResponsesDestinyCharacterResponseUninstancedItemComponents
}
