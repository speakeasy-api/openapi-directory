/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class BooksVolumesListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

/**
 * Restrict to volumes by download availability.
 */
export enum BooksVolumesListDownloadEnum {
  DownloadUndefined = "DOWNLOAD_UNDEFINED",
  Epub = "EPUB",
}

/**
 * Filter search results.
 */
export enum BooksVolumesListFilterEnum {
  FilterUndefined = "FILTER_UNDEFINED",
  Ebooks = "ebooks",
  FreeEbooks = "free-ebooks",
  Full = "full",
  PaidEbooks = "paid-ebooks",
  Partial = "partial",
}

/**
 * Restrict search to this user's library.
 */
export enum BooksVolumesListLibraryRestrictEnum {
  LibraryRestrictUndefined = "LIBRARY_RESTRICT_UNDEFINED",
  MyLibrary = "my-library",
  NoRestrict = "no-restrict",
}

/**
 * The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out.
 */
export enum BooksVolumesListMaxAllowedMaturityRatingEnum {
  MaxAllowedMaturityRatingUndefined = "MAX_ALLOWED_MATURITY_RATING_UNDEFINED",
  Mature = "MATURE",
  NotMature = "not-mature",
}

/**
 * Sort search results.
 */
export enum BooksVolumesListOrderByEnum {
  OrderByUndefined = "ORDER_BY_UNDEFINED",
  Newest = "newest",
  Relevance = "relevance",
}

/**
 * Restrict to books or magazines.
 */
export enum BooksVolumesListPrintTypeEnum {
  PrintTypeUndefined = "PRINT_TYPE_UNDEFINED",
  All = "ALL",
  Books = "BOOKS",
  Magazines = "MAGAZINES",
}

/**
 * Restrict information returned to a set of selected fields.
 */
export enum BooksVolumesListProjectionEnum {
  ProjectionUndefined = "PROJECTION_UNDEFINED",
  Full = "FULL",
  Lite = "LITE",
}

export class BooksVolumesListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Restrict to volumes by download availability.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=download",
  })
  download?: BooksVolumesListDownloadEnum;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * Filter search results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: BooksVolumesListFilterEnum;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * Restrict results to books with this language code.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=langRestrict",
  })
  langRestrict?: string;

  /**
   * Restrict search to this user's library.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=libraryRestrict",
  })
  libraryRestrict?: BooksVolumesListLibraryRestrictEnum;

  /**
   * The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxAllowedMaturityRating",
  })
  maxAllowedMaturityRating?: BooksVolumesListMaxAllowedMaturityRatingEnum;

  /**
   * Maximum number of results to return.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Sort search results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: BooksVolumesListOrderByEnum;

  /**
   * Restrict and brand results for partner ID.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=partner",
  })
  partner?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Restrict to books or magazines.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=printType",
  })
  printType?: BooksVolumesListPrintTypeEnum;

  /**
   * Restrict information returned to a set of selected fields.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=projection",
  })
  projection?: BooksVolumesListProjectionEnum;

  /**
   * Full-text search query string.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q: string;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Set to true to show books available for preorder. Defaults to false.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=showPreorders",
  })
  showPreorders?: boolean;

  /**
   * String to identify the originator of this request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=source",
  })
  source?: string;

  /**
   * Index of the first result to return (starts at 0)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startIndex",
  })
  startIndex?: number;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class BooksVolumesListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  volumes?: shared.Volumes;
}
