// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CVSSAttackComplexityEnum string

const (
	CVSSAttackComplexityEnumAttackComplexityUnspecified CVSSAttackComplexityEnum = "ATTACK_COMPLEXITY_UNSPECIFIED"
	CVSSAttackComplexityEnumAttackComplexityLow         CVSSAttackComplexityEnum = "ATTACK_COMPLEXITY_LOW"
	CVSSAttackComplexityEnumAttackComplexityHigh        CVSSAttackComplexityEnum = "ATTACK_COMPLEXITY_HIGH"
)

func (e *CVSSAttackComplexityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ATTACK_COMPLEXITY_UNSPECIFIED":
		fallthrough
	case "ATTACK_COMPLEXITY_LOW":
		fallthrough
	case "ATTACK_COMPLEXITY_HIGH":
		*e = CVSSAttackComplexityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSAttackComplexityEnum: %s", s)
	}
}

// CVSSAttackVectorEnum - Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
type CVSSAttackVectorEnum string

const (
	CVSSAttackVectorEnumAttackVectorUnspecified CVSSAttackVectorEnum = "ATTACK_VECTOR_UNSPECIFIED"
	CVSSAttackVectorEnumAttackVectorNetwork     CVSSAttackVectorEnum = "ATTACK_VECTOR_NETWORK"
	CVSSAttackVectorEnumAttackVectorAdjacent    CVSSAttackVectorEnum = "ATTACK_VECTOR_ADJACENT"
	CVSSAttackVectorEnumAttackVectorLocal       CVSSAttackVectorEnum = "ATTACK_VECTOR_LOCAL"
	CVSSAttackVectorEnumAttackVectorPhysical    CVSSAttackVectorEnum = "ATTACK_VECTOR_PHYSICAL"
)

func (e *CVSSAttackVectorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ATTACK_VECTOR_UNSPECIFIED":
		fallthrough
	case "ATTACK_VECTOR_NETWORK":
		fallthrough
	case "ATTACK_VECTOR_ADJACENT":
		fallthrough
	case "ATTACK_VECTOR_LOCAL":
		fallthrough
	case "ATTACK_VECTOR_PHYSICAL":
		*e = CVSSAttackVectorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSAttackVectorEnum: %s", s)
	}
}

type CVSSAuthenticationEnum string

const (
	CVSSAuthenticationEnumAuthenticationUnspecified CVSSAuthenticationEnum = "AUTHENTICATION_UNSPECIFIED"
	CVSSAuthenticationEnumAuthenticationMultiple    CVSSAuthenticationEnum = "AUTHENTICATION_MULTIPLE"
	CVSSAuthenticationEnumAuthenticationSingle      CVSSAuthenticationEnum = "AUTHENTICATION_SINGLE"
	CVSSAuthenticationEnumAuthenticationNone        CVSSAuthenticationEnum = "AUTHENTICATION_NONE"
)

func (e *CVSSAuthenticationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AUTHENTICATION_UNSPECIFIED":
		fallthrough
	case "AUTHENTICATION_MULTIPLE":
		fallthrough
	case "AUTHENTICATION_SINGLE":
		fallthrough
	case "AUTHENTICATION_NONE":
		*e = CVSSAuthenticationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSAuthenticationEnum: %s", s)
	}
}

type CVSSAvailabilityImpactEnum string

const (
	CVSSAvailabilityImpactEnumImpactUnspecified CVSSAvailabilityImpactEnum = "IMPACT_UNSPECIFIED"
	CVSSAvailabilityImpactEnumImpactHigh        CVSSAvailabilityImpactEnum = "IMPACT_HIGH"
	CVSSAvailabilityImpactEnumImpactLow         CVSSAvailabilityImpactEnum = "IMPACT_LOW"
	CVSSAvailabilityImpactEnumImpactNone        CVSSAvailabilityImpactEnum = "IMPACT_NONE"
)

func (e *CVSSAvailabilityImpactEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = CVSSAvailabilityImpactEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSAvailabilityImpactEnum: %s", s)
	}
}

type CVSSConfidentialityImpactEnum string

const (
	CVSSConfidentialityImpactEnumImpactUnspecified CVSSConfidentialityImpactEnum = "IMPACT_UNSPECIFIED"
	CVSSConfidentialityImpactEnumImpactHigh        CVSSConfidentialityImpactEnum = "IMPACT_HIGH"
	CVSSConfidentialityImpactEnumImpactLow         CVSSConfidentialityImpactEnum = "IMPACT_LOW"
	CVSSConfidentialityImpactEnumImpactNone        CVSSConfidentialityImpactEnum = "IMPACT_NONE"
)

func (e *CVSSConfidentialityImpactEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = CVSSConfidentialityImpactEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSConfidentialityImpactEnum: %s", s)
	}
}

type CVSSIntegrityImpactEnum string

const (
	CVSSIntegrityImpactEnumImpactUnspecified CVSSIntegrityImpactEnum = "IMPACT_UNSPECIFIED"
	CVSSIntegrityImpactEnumImpactHigh        CVSSIntegrityImpactEnum = "IMPACT_HIGH"
	CVSSIntegrityImpactEnumImpactLow         CVSSIntegrityImpactEnum = "IMPACT_LOW"
	CVSSIntegrityImpactEnumImpactNone        CVSSIntegrityImpactEnum = "IMPACT_NONE"
)

func (e *CVSSIntegrityImpactEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = CVSSIntegrityImpactEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSIntegrityImpactEnum: %s", s)
	}
}

type CVSSPrivilegesRequiredEnum string

const (
	CVSSPrivilegesRequiredEnumPrivilegesRequiredUnspecified CVSSPrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_UNSPECIFIED"
	CVSSPrivilegesRequiredEnumPrivilegesRequiredNone        CVSSPrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_NONE"
	CVSSPrivilegesRequiredEnumPrivilegesRequiredLow         CVSSPrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_LOW"
	CVSSPrivilegesRequiredEnumPrivilegesRequiredHigh        CVSSPrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_HIGH"
)

func (e *CVSSPrivilegesRequiredEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PRIVILEGES_REQUIRED_UNSPECIFIED":
		fallthrough
	case "PRIVILEGES_REQUIRED_NONE":
		fallthrough
	case "PRIVILEGES_REQUIRED_LOW":
		fallthrough
	case "PRIVILEGES_REQUIRED_HIGH":
		*e = CVSSPrivilegesRequiredEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSPrivilegesRequiredEnum: %s", s)
	}
}

type CVSSScopeEnum string

const (
	CVSSScopeEnumScopeUnspecified CVSSScopeEnum = "SCOPE_UNSPECIFIED"
	CVSSScopeEnumScopeUnchanged   CVSSScopeEnum = "SCOPE_UNCHANGED"
	CVSSScopeEnumScopeChanged     CVSSScopeEnum = "SCOPE_CHANGED"
)

func (e *CVSSScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SCOPE_UNSPECIFIED":
		fallthrough
	case "SCOPE_UNCHANGED":
		fallthrough
	case "SCOPE_CHANGED":
		*e = CVSSScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSScopeEnum: %s", s)
	}
}

type CVSSUserInteractionEnum string

const (
	CVSSUserInteractionEnumUserInteractionUnspecified CVSSUserInteractionEnum = "USER_INTERACTION_UNSPECIFIED"
	CVSSUserInteractionEnumUserInteractionNone        CVSSUserInteractionEnum = "USER_INTERACTION_NONE"
	CVSSUserInteractionEnumUserInteractionRequired    CVSSUserInteractionEnum = "USER_INTERACTION_REQUIRED"
)

func (e *CVSSUserInteractionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USER_INTERACTION_UNSPECIFIED":
		fallthrough
	case "USER_INTERACTION_NONE":
		fallthrough
	case "USER_INTERACTION_REQUIRED":
		*e = CVSSUserInteractionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSUserInteractionEnum: %s", s)
	}
}

// Cvss - Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
type Cvss struct {
	AttackComplexity *CVSSAttackComplexityEnum `json:"attackComplexity,omitempty"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       *CVSSAttackVectorEnum       `json:"attackVector,omitempty"`
	Authentication     *CVSSAuthenticationEnum     `json:"authentication,omitempty"`
	AvailabilityImpact *CVSSAvailabilityImpactEnum `json:"availabilityImpact,omitempty"`
	// The base score is a function of the base metric scores.
	BaseScore             *float32                       `json:"baseScore,omitempty"`
	ConfidentialityImpact *CVSSConfidentialityImpactEnum `json:"confidentialityImpact,omitempty"`
	ExploitabilityScore   *float32                       `json:"exploitabilityScore,omitempty"`
	ImpactScore           *float32                       `json:"impactScore,omitempty"`
	IntegrityImpact       *CVSSIntegrityImpactEnum       `json:"integrityImpact,omitempty"`
	PrivilegesRequired    *CVSSPrivilegesRequiredEnum    `json:"privilegesRequired,omitempty"`
	Scope                 *CVSSScopeEnum                 `json:"scope,omitempty"`
	UserInteraction       *CVSSUserInteractionEnum       `json:"userInteraction,omitempty"`
}
