"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import arrayvalue as shared_arrayvalue
from ..shared import entity as shared_entity
from ..shared import key as shared_key
from ..shared import latlng as shared_latlng
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ValueNullValueEnum(str, Enum):
    r"""A null value."""
    NULL_VALUE = 'NULL_VALUE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Value:
    r"""A message that can hold any of the supported value types and associated metadata."""
    
    array_value: Optional[shared_arrayvalue.ArrayValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arrayValue'), 'exclude': lambda f: f is None }})
    r"""An array value."""  
    blob_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blobValue'), 'exclude': lambda f: f is None }})
    r"""A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded."""  
    boolean_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('booleanValue'), 'exclude': lambda f: f is None }})
    r"""A boolean value."""  
    double_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doubleValue'), 'exclude': lambda f: f is None }})
    r"""A double value."""  
    entity_value: Optional[shared_entity.Entity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityValue'), 'exclude': lambda f: f is None }})
    r"""A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message."""  
    exclude_from_indexes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeFromIndexes'), 'exclude': lambda f: f is None }})
    r"""If the value should be excluded from all indexes including those defined explicitly."""  
    geo_point_value: Optional[shared_latlng.LatLng] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoPointValue'), 'exclude': lambda f: f is None }})
    r"""An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges."""  
    integer_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integerValue'), 'exclude': lambda f: f is None }})
    r"""An integer value."""  
    key_value: Optional[shared_key.Key] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyValue'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."""  
    meaning: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meaning'), 'exclude': lambda f: f is None }})
    r"""The `meaning` field should only be populated for backwards compatibility."""  
    null_value: Optional[ValueNullValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nullValue'), 'exclude': lambda f: f is None }})
    r"""A null value."""  
    string_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringValue'), 'exclude': lambda f: f is None }})
    r"""A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes."""  
    timestamp_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampValue'), 'exclude': lambda f: f is None }})
    r"""A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down."""  
    