// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AlbumPictureSizes struct {
	// The height of the image.
	Height float64 `json:"height"`
	// The direct link to the image.
	Link string `json:"link"`
	// The direct link to the image with a play button overlay.
	LinkWithPlayButton *string `json:"link_with_play_button,omitempty"`
	// The width of the image.
	Width float64 `json:"width"`
}

// AlbumPictureTypeEnum - The type of the picture:
//
// Option descriptions:
//   - `caution` - An image that is appropriate for all ages.
//   - `custom` - A custom image for the video.
//   - `default` - The default image for the video.
type AlbumPictureTypeEnum string

const (
	AlbumPictureTypeEnumCaution AlbumPictureTypeEnum = "caution"
	AlbumPictureTypeEnumCustom  AlbumPictureTypeEnum = "custom"
	AlbumPictureTypeEnumDefault AlbumPictureTypeEnum = "default"
)

func (e *AlbumPictureTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "caution":
		fallthrough
	case "custom":
		fallthrough
	case "default":
		*e = AlbumPictureTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumPictureTypeEnum: %s", s)
	}
}

// AlbumPicture - The custom logo for this album.
type AlbumPicture struct {
	// Whether this picture is the active picture for its parent resource.
	Active bool `json:"active"`
	// The upload URL for the picture. This field appears when you create the picture resource for the first time.
	Link *string `json:"link,omitempty"`
	// The picture's resource key string.
	ResourceKey string `json:"resource_key"`
	// An array containing reference information about all available image files.
	Sizes []AlbumPictureSizes `json:"sizes"`
	// The type of the picture:
	//
	// Option descriptions:
	//  * `caution` - An image that is appropriate for all ages.
	//  * `custom` - A custom image for the video.
	//  * `default` - The default image for the video.
	//
	Type AlbumPictureTypeEnum `json:"type"`
	// The picture's URI.
	URI string `json:"uri"`
}

// AlbumEmbed - Embed data for the album.
type AlbumEmbed struct {
	// The responsive HTML code to embed the playlist on a website. This is present only when `privacy.view` isn't password and when the album has embeddable videos.
	HTML string `json:"html"`
}

// AlbumLayoutEnum - The album's layout preference
type AlbumLayoutEnum string

const (
	AlbumLayoutEnumGrid   AlbumLayoutEnum = "grid"
	AlbumLayoutEnumPlayer AlbumLayoutEnum = "player"
)

func (e *AlbumLayoutEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "grid":
		fallthrough
	case "player":
		*e = AlbumLayoutEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumLayoutEnum: %s", s)
	}
}

// AlbumMetadataConnectionsVideos - Information about the videos that belong to this album.
type AlbumMetadataConnectionsVideos struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// AlbumMetadataConnections - A collection of information that is connected to this resource.
type AlbumMetadataConnections struct {
	// Information about the videos that belong to this album.
	Videos AlbumMetadataConnectionsVideos `json:"videos"`
}

// AlbumMetadataInteractionsAddCustomThumbnails - An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope.
type AlbumMetadataInteractionsAddCustomThumbnails struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// AlbumMetadataInteractionsAddLogos - An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope.
type AlbumMetadataInteractionsAddLogos struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// AlbumMetadataInteractionsAddVideos - An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope.
type AlbumMetadataInteractionsAddVideos struct {
	// An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// AlbumMetadataInteractions - A list of resource URIs related to the album.
type AlbumMetadataInteractions struct {
	// An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope.
	AddCustomThumbnails AlbumMetadataInteractionsAddCustomThumbnails `json:"add_custom_thumbnails"`
	// An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope.
	AddLogos AlbumMetadataInteractionsAddLogos `json:"add_logos"`
	// An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope.
	AddVideos AlbumMetadataInteractionsAddVideos `json:"add_videos"`
}

// AlbumMetadata - Metadata about the album.
type AlbumMetadata struct {
	// A collection of information that is connected to this resource.
	Connections AlbumMetadataConnections `json:"connections"`
	// A list of resource URIs related to the album.
	Interactions AlbumMetadataInteractions `json:"interactions"`
}

// AlbumPrivacyViewEnum - Who can view the album:
//
// Option descriptions:
//   - `anybody` - Anyone can view the album.
//   - `embed_only` - Only owner can see album, can be embedded off-site
//   - `password` - Only those with the password can view the album.
type AlbumPrivacyViewEnum string

const (
	AlbumPrivacyViewEnumAnybody   AlbumPrivacyViewEnum = "anybody"
	AlbumPrivacyViewEnumEmbedOnly AlbumPrivacyViewEnum = "embed_only"
	AlbumPrivacyViewEnumPassword  AlbumPrivacyViewEnum = "password"
)

func (e *AlbumPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "embed_only":
		fallthrough
	case "password":
		*e = AlbumPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumPrivacyViewEnum: %s", s)
	}
}

// AlbumPrivacy - The privacy settings of the album.
type AlbumPrivacy struct {
	// The privacy-enabled password to see this album. Present only when `privacy.view` is `password`.
	Password *string `json:"password,omitempty"`
	// Who can view the album:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the album.
	//  * `embed_only` - Only owner can see album, can be embedded off-site
	//  * `password` - Only those with the password can view the album.
	//
	View AlbumPrivacyViewEnum `json:"view"`
}

// AlbumSortEnum - Sort type of the album.
type AlbumSortEnum string

const (
	AlbumSortEnumAddedFirst   AlbumSortEnum = "added_first"
	AlbumSortEnumAddedLast    AlbumSortEnum = "added_last"
	AlbumSortEnumAlphabetical AlbumSortEnum = "alphabetical"
	AlbumSortEnumArranged     AlbumSortEnum = "arranged"
	AlbumSortEnumComments     AlbumSortEnum = "comments"
	AlbumSortEnumLikes        AlbumSortEnum = "likes"
	AlbumSortEnumNewest       AlbumSortEnum = "newest"
	AlbumSortEnumOldest       AlbumSortEnum = "oldest"
	AlbumSortEnumPlays        AlbumSortEnum = "plays"
)

func (e *AlbumSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "added_first":
		fallthrough
	case "added_last":
		fallthrough
	case "alphabetical":
		fallthrough
	case "arranged":
		fallthrough
	case "comments":
		fallthrough
	case "likes":
		fallthrough
	case "newest":
		fallthrough
	case "oldest":
		fallthrough
	case "plays":
		*e = AlbumSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumSortEnum: %s", s)
	}
}

// AlbumThemeEnum - The album's color theme preference
type AlbumThemeEnum string

const (
	AlbumThemeEnumDark     AlbumThemeEnum = "dark"
	AlbumThemeEnumStandard AlbumThemeEnum = "standard"
)

func (e *AlbumThemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dark":
		fallthrough
	case "standard":
		*e = AlbumThemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumThemeEnum: %s", s)
	}
}

// Album - The album was created.
type Album struct {
	// Whether an album should allow continuous play.
	AllowContinuousPlay bool `json:"allow_continuous_play"`
	// Whether an album should allow downloads.
	AllowDownloads bool `json:"allow_downloads"`
	// Whether an album should allow sharing.
	AllowShare bool `json:"allow_share"`
	// Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.
	BrandColor string `json:"brand_color"`
	// The time in ISO 8601 format that the album was created.
	CreatedTime string `json:"created_time"`
	// The custom logo for this album.
	CustomLogo AlbumPicture `json:"custom_logo"`
	// A brief description of the album's content.
	Description string `json:"description"`
	// The custom domain a user has selected for their album.
	Domain string `json:"domain"`
	// The total duration in seconds of all the videos in the album.
	Duration float64 `json:"duration"`
	// Embed data for the album.
	Embed AlbumEmbed `json:"embed"`
	// Whether to show the album's custom brand color in the player of the album's embedded playlist.
	EmbedBrandColor bool `json:"embed_brand_color"`
	// Whether to show the album's custom logo in the player of the album's embedded playlist.
	EmbedCustomLogo bool `json:"embed_custom_logo"`
	// Whether to hide the Vimeo navigation when viewing the album.
	HideNav bool `json:"hide_nav"`
	// Whether to hide the Vimeo logo in the player of the album's embedded playlist.
	HideVimeoLogo bool `json:"hide_vimeo_logo"`
	// The album's layout preference
	Layout AlbumLayoutEnum `json:"layout"`
	// The URL to access the album.
	Link string `json:"link"`
	// Metadata about the album.
	Metadata AlbumMetadata `json:"metadata"`
	// The time in ISO 8601 format when the album was last modified.
	ModifiedTime string `json:"modified_time"`
	// The album's display name.
	Name string `json:"name"`
	// The active image for the album; defaults to the thumbnail of the last video added to the album.
	Pictures Picture `json:"pictures"`
	// The privacy settings of the album.
	Privacy AlbumPrivacy `json:"privacy"`
	// The album resource key.
	ResourceKey string `json:"resource_key"`
	// Whether album videos should use the review mode URL.
	ReviewMode bool `json:"review_mode"`
	// Sort type of the album.
	Sort AlbumSortEnum `json:"sort"`
	// The album's color theme preference
	Theme AlbumThemeEnum `json:"theme"`
	// The album's URI.
	URI string `json:"uri"`
	// The custom Vimeo URL a user has selected for their album.
	URL string `json:"url"`
	// Whether the user has opted in to use a custom domain for their album.
	UseCustomDomain bool `json:"use_custom_domain"`
	// The owner of the album.
	User User `json:"user"`
	// Whether an album should show the brand color in the web layout.
	WebBrandColor bool `json:"web_brand_color"`
	// Whether an album's custom logo should be shown in the web layout.
	WebCustomLogo bool `json:"web_custom_logo"`
}
