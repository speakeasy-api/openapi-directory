"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Actions:
    r"""Endpoints to manage GitHub Actions using the REST API."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def actions_add_custom_labels_to_self_hosted_runner_for_org(self, request: operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest) -> operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponse:
        r"""Add custom labels to a self-hosted runner for an organization
        Add custom labels to a self-hosted runner configured in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, base_url, '/orgs/{org}/actions/runners/{runner_id}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrg200ApplicationJSON])
                res.actions_add_custom_labels_to_self_hosted_runner_for_org_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def actions_add_custom_labels_to_self_hosted_runner_for_repo(self, request: operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest) -> operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponse:
        r"""Add custom labels to a self-hosted runner for a repository
        Add custom labels to a self-hosted runner configured in a repository.
        
        You must authenticate using an access token with the `repo` scope to use this
        endpoint.
        https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepo200ApplicationJSON])
                res.actions_add_custom_labels_to_self_hosted_runner_for_repo_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def actions_add_selected_repo_to_org_secret(self, request: operations.ActionsAddSelectedRepoToOrgSecretRequest) -> operations.ActionsAddSelectedRepoToOrgSecretResponse:
        r"""Add selected repository to an organization secret
        Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsAddSelectedRepoToOrgSecretRequest, base_url, '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsAddSelectedRepoToOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_add_selected_repo_to_org_variable(self, request: operations.ActionsAddSelectedRepoToOrgVariableRequest) -> operations.ActionsAddSelectedRepoToOrgVariableResponse:
        r"""Add selected repository to an organization variable
        Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsAddSelectedRepoToOrgVariableRequest, base_url, '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsAddSelectedRepoToOrgVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_add_selected_repo_to_required_workflow(self, request: operations.ActionsAddSelectedRepoToRequiredWorkflowRequest) -> operations.ActionsAddSelectedRepoToRequiredWorkflowResponse:
        r"""Add a repository to a required workflow
        Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#add-a-repository-to-selected-repositories-list-for-a-required-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsAddSelectedRepoToRequiredWorkflowRequest, base_url, '/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsAddSelectedRepoToRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_approve_workflow_run(self, request: operations.ActionsApproveWorkflowRunRequest) -> operations.ActionsApproveWorkflowRunResponse:
        r"""Approve a workflow run for a fork pull request
        Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\"
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsApproveWorkflowRunRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/approve', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsApproveWorkflowRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_cancel_workflow_run(self, request: operations.ActionsCancelWorkflowRunRequest) -> operations.ActionsCancelWorkflowRunResponse:
        r"""Cancel a workflow run
        Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#cancel-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCancelWorkflowRunRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCancelWorkflowRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_create_environment_variable(self, request: operations.ActionsCreateEnvironmentVariableRequest) -> operations.ActionsCreateEnvironmentVariableResponse:
        r"""Create an environment variable
        Create an environment variable that you can reference in a GitHub Actions workflow.
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        GitHub Apps must have the `environment:write` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#create-an-environment-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateEnvironmentVariableRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/variables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateEnvironmentVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out

        return res

    def actions_create_or_update_environment_secret(self, request: operations.ActionsCreateOrUpdateEnvironmentSecretRequest) -> operations.ActionsCreateOrUpdateEnvironmentSecretResponse:
        r"""Create or update an environment secret
        Creates or updates an environment secret with an encrypted value. Encrypt your secret using
        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
        this endpoint.
        
        #### Example encrypting a secret using Node.js
        
        Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        
        ```
        const sodium = require('libsodium-wrappers')
        const secret = 'plain-text-secret' // replace with the secret you want to encrypt
        const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
        
        //Check if libsodium is ready and then proceed.
        sodium.ready.then(() => {
          // Convert Secret & Base64 key to Uint8Array.
          let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
          let binsec = sodium.from_string(secret)
        
          //Encrypt the secret using LibSodium
          let encBytes = sodium.crypto_box_seal(binsec, binkey)
        
          // Convert encrypted Uint8Array to Base64
          let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
        
          console.log(output)
        });
        ```
        
        #### Example encrypting a secret using Python
        
        Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        
        ```
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
          \"\"\"Encrypt a Unicode string using the public key.\"\"\"
          public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())
          sealed_box = public.SealedBox(public_key)
          encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))
          return b64encode(encrypted).decode(\"utf-8\")
        ```
        
        #### Example encrypting a secret using C#
        
        Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        
        ```
        var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");
        var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");
        
        var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        
        Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        ```
        
        #### Example encrypting a secret using Ruby
        
        Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        
        ```ruby
        require \"rbnacl\"
        require \"base64\"
        
        key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")
        public_key = RbNaCl::PublicKey.new(key)
        
        box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        encrypted_secret = box.encrypt(\"my_secret\")
        
        # Print the base64 encoded secret
        puts Base64.strict_encode64(encrypted_secret)
        ```
        https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateOrUpdateEnvironmentSecretRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateOrUpdateEnvironmentSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 204:
            pass

        return res

    def actions_create_or_update_org_secret(self, request: operations.ActionsCreateOrUpdateOrgSecretRequest) -> operations.ActionsCreateOrUpdateOrgSecretResponse:
        r"""Create or update an organization secret
        Creates or updates an organization secret with an encrypted value. Encrypt your secret using
        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
        use this endpoint.
        
        #### Example encrypting a secret using Node.js
        
        Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        
        ```
        const sodium = require('libsodium-wrappers')
        const secret = 'plain-text-secret' // replace with the secret you want to encrypt
        const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
        
        //Check if libsodium is ready and then proceed.
        sodium.ready.then(() => {
          // Convert Secret & Base64 key to Uint8Array.
          let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
          let binsec = sodium.from_string(secret)
        
          //Encrypt the secret using LibSodium
          let encBytes = sodium.crypto_box_seal(binsec, binkey)
        
          // Convert encrypted Uint8Array to Base64
          let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
        
          console.log(output)
        });
        ```
        
        #### Example encrypting a secret using Python
        
        Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        
        ```
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
          \"\"\"Encrypt a Unicode string using the public key.\"\"\"
          public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())
          sealed_box = public.SealedBox(public_key)
          encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))
          return b64encode(encrypted).decode(\"utf-8\")
        ```
        
        #### Example encrypting a secret using C#
        
        Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        
        ```
        var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");
        var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");
        
        var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        
        Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        ```
        
        #### Example encrypting a secret using Ruby
        
        Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        
        ```ruby
        require \"rbnacl\"
        require \"base64\"
        
        key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")
        public_key = RbNaCl::PublicKey.new(key)
        
        box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        encrypted_secret = box.encrypt(\"my_secret\")
        
        # Print the base64 encoded secret
        puts Base64.strict_encode64(encrypted_secret)
        ```
        https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateOrUpdateOrgSecretRequest, base_url, '/orgs/{org}/actions/secrets/{secret_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateOrUpdateOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 204:
            pass

        return res

    def actions_create_or_update_repo_secret(self, request: operations.ActionsCreateOrUpdateRepoSecretRequest) -> operations.ActionsCreateOrUpdateRepoSecretResponse:
        r"""Create or update a repository secret
        Creates or updates a repository secret with an encrypted value. Encrypt your secret using
        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
        this endpoint.
        
        #### Example encrypting a secret using Node.js
        
        Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        
        ```
        const sodium = require('libsodium-wrappers')
        const secret = 'plain-text-secret' // replace with the secret you want to encrypt
        const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
        
        //Check if libsodium is ready and then proceed.
        sodium.ready.then(() => {
          // Convert Secret & Base64 key to Uint8Array.
          let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
          let binsec = sodium.from_string(secret)
        
          //Encrypt the secret using LibSodium
          let encBytes = sodium.crypto_box_seal(binsec, binkey)
        
          // Convert encrypted Uint8Array to Base64
          let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
        
          console.log(output)
        });
        ```
        
        #### Example encrypting a secret using Python
        
        Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        
        ```
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
          \"\"\"Encrypt a Unicode string using the public key.\"\"\"
          public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())
          sealed_box = public.SealedBox(public_key)
          encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))
          return b64encode(encrypted).decode(\"utf-8\")
        ```
        
        #### Example encrypting a secret using C#
        
        Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        
        ```
        var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");
        var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");
        
        var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        
        Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        ```
        
        #### Example encrypting a secret using Ruby
        
        Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        
        ```ruby
        require \"rbnacl\"
        require \"base64\"
        
        key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")
        public_key = RbNaCl::PublicKey.new(key)
        
        box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        encrypted_secret = box.encrypt(\"my_secret\")
        
        # Print the base64 encoded secret
        puts Base64.strict_encode64(encrypted_secret)
        ```
        https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateOrUpdateRepoSecretRequest, base_url, '/repos/{owner}/{repo}/actions/secrets/{secret_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateOrUpdateRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 204:
            pass

        return res

    def actions_create_org_variable(self, request: operations.ActionsCreateOrgVariableRequest) -> operations.ActionsCreateOrgVariableResponse:
        r"""Create an organization variable
        Creates an organization variable that you can reference in a GitHub Actions workflow.
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#create-an-organization-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateOrgVariableRequest, base_url, '/orgs/{org}/actions/variables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateOrgVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out

        return res

    def actions_create_registration_token_for_org(self, request: operations.ActionsCreateRegistrationTokenForOrgRequest) -> operations.ActionsCreateRegistrationTokenForOrgResponse:
        r"""Create a registration token for an organization
        Returns a token that you can pass to the `config` script. The token expires after one hour.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        #### Example using registration token
        
        Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
        
        ```
        ./config.sh --url https://github.com/octo-org --token TOKEN
        ```
        https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateRegistrationTokenForOrgRequest, base_url, '/orgs/{org}/actions/runners/registration-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateRegistrationTokenForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def actions_create_registration_token_for_repo(self, request: operations.ActionsCreateRegistrationTokenForRepoRequest) -> operations.ActionsCreateRegistrationTokenForRepoResponse:
        r"""Create a registration token for a repository
        Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
        using an access token with the `repo` scope to use this endpoint.
        
        #### Example using registration token
         
        Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
        
        ```
        ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
        ```
        https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateRegistrationTokenForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/registration-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateRegistrationTokenForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def actions_create_remove_token_for_org(self, request: operations.ActionsCreateRemoveTokenForOrgRequest) -> operations.ActionsCreateRemoveTokenForOrgResponse:
        r"""Create a remove token for an organization
        Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        #### Example using remove token
        
        To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
        endpoint.
        
        ```
        ./config.sh remove --token TOKEN
        ```
        https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateRemoveTokenForOrgRequest, base_url, '/orgs/{org}/actions/runners/remove-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateRemoveTokenForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def actions_create_remove_token_for_repo(self, request: operations.ActionsCreateRemoveTokenForRepoRequest) -> operations.ActionsCreateRemoveTokenForRepoResponse:
        r"""Create a remove token for a repository
        Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        
        #### Example using remove token
         
        To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
        
        ```
        ./config.sh remove --token TOKEN
        ```
        https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateRemoveTokenForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/remove-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateRemoveTokenForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def actions_create_repo_variable(self, request: operations.ActionsCreateRepoVariableRequest) -> operations.ActionsCreateRepoVariableResponse:
        r"""Create a repository variable
        Creates a repository variable that you can reference in a GitHub Actions workflow.
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#create-a-repository-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateRepoVariableRequest, base_url, '/repos/{owner}/{repo}/actions/variables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateRepoVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out

        return res

    def actions_create_required_workflow(self, request: operations.ActionsCreateRequiredWorkflowRequest) -> operations.ActionsCreateRequiredWorkflowResponse:
        r"""Create a required workflow
        Create a required workflow in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#create-a-required-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateRequiredWorkflowRequest, base_url, '/orgs/{org}/actions/required_workflows', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RequiredWorkflow])
                res.required_workflow = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def actions_create_workflow_dispatch(self, request: operations.ActionsCreateWorkflowDispatchRequest) -> operations.ActionsCreateWorkflowDispatchResponse:
        r"""Create a workflow dispatch event
        You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
        
        You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\" 
        https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsCreateWorkflowDispatchRequest, base_url, '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsCreateWorkflowDispatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_actions_cache_by_id(self, request: operations.ActionsDeleteActionsCacheByIDRequest) -> operations.ActionsDeleteActionsCacheByIDResponse:
        r"""Delete a GitHub Actions cache for a repository (using a cache ID)
        Deletes a GitHub Actions cache for a repository, using a cache ID.
        
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        
        GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteActionsCacheByIDRequest, base_url, '/repos/{owner}/{repo}/actions/caches/{cache_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteActionsCacheByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_actions_cache_by_key(self, request: operations.ActionsDeleteActionsCacheByKeyRequest) -> operations.ActionsDeleteActionsCacheByKeyResponse:
        r"""Delete GitHub Actions caches for a repository (using a cache key)
        Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
        
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        
        GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteActionsCacheByKeyRequest, base_url, '/repos/{owner}/{repo}/actions/caches', request)
        
        query_params = utils.get_query_params(operations.ActionsDeleteActionsCacheByKeyRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteActionsCacheByKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsCacheList])
                res.actions_cache_list = out

        return res

    def actions_delete_artifact(self, request: operations.ActionsDeleteArtifactRequest) -> operations.ActionsDeleteArtifactResponse:
        r"""Delete an artifact
        Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#delete-an-artifact - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteArtifactRequest, base_url, '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_environment_secret(self, request: operations.ActionsDeleteEnvironmentSecretRequest) -> operations.ActionsDeleteEnvironmentSecretResponse:
        r"""Delete an environment secret
        Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#delete-an-environment-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteEnvironmentSecretRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteEnvironmentSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_environment_variable(self, request: operations.ActionsDeleteEnvironmentVariableRequest) -> operations.ActionsDeleteEnvironmentVariableResponse:
        r"""Delete an environment variable
        Deletes an environment variable using the variable name.
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        GitHub Apps must have the `environment:write` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#delete-an-environment-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteEnvironmentVariableRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/variables/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteEnvironmentVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_org_secret(self, request: operations.ActionsDeleteOrgSecretRequest) -> operations.ActionsDeleteOrgSecretResponse:
        r"""Delete an organization secret
        Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#delete-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteOrgSecretRequest, base_url, '/orgs/{org}/actions/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_org_variable(self, request: operations.ActionsDeleteOrgVariableRequest) -> operations.ActionsDeleteOrgVariableResponse:
        r"""Delete an organization variable
        Deletes an organization variable using the variable name.
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#delete-an-organization-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteOrgVariableRequest, base_url, '/orgs/{org}/actions/variables/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteOrgVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_repo_secret(self, request: operations.ActionsDeleteRepoSecretRequest) -> operations.ActionsDeleteRepoSecretResponse:
        r"""Delete a repository secret
        Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#delete-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteRepoSecretRequest, base_url, '/repos/{owner}/{repo}/actions/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_repo_variable(self, request: operations.ActionsDeleteRepoVariableRequest) -> operations.ActionsDeleteRepoVariableResponse:
        r"""Delete a repository variable
        Deletes a repository variable using the variable name.
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#delete-a-repository-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteRepoVariableRequest, base_url, '/repos/{owner}/{repo}/actions/variables/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteRepoVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_required_workflow(self, request: operations.ActionsDeleteRequiredWorkflowRequest) -> operations.ActionsDeleteRequiredWorkflowResponse:
        r"""Delete a required workflow
        Deletes a required workflow configured in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#delete-a-required-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteRequiredWorkflowRequest, base_url, '/orgs/{org}/actions/required_workflows/{required_workflow_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_self_hosted_runner_from_org(self, request: operations.ActionsDeleteSelfHostedRunnerFromOrgRequest) -> operations.ActionsDeleteSelfHostedRunnerFromOrgResponse:
        r"""Delete a self-hosted runner from an organization
        Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteSelfHostedRunnerFromOrgRequest, base_url, '/orgs/{org}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteSelfHostedRunnerFromOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_self_hosted_runner_from_repo(self, request: operations.ActionsDeleteSelfHostedRunnerFromRepoRequest) -> operations.ActionsDeleteSelfHostedRunnerFromRepoResponse:
        r"""Delete a self-hosted runner from a repository
        Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        
        You must authenticate using an access token with the `repo`
        scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteSelfHostedRunnerFromRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteSelfHostedRunnerFromRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_workflow_run(self, request: operations.ActionsDeleteWorkflowRunRequest) -> operations.ActionsDeleteWorkflowRunResponse:
        r"""Delete a workflow run
        Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
        private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
        this endpoint.
        https://docs.github.com/rest/reference/actions#delete-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteWorkflowRunRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteWorkflowRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_delete_workflow_run_logs(self, request: operations.ActionsDeleteWorkflowRunLogsRequest) -> operations.ActionsDeleteWorkflowRunLogsResponse:
        r"""Delete workflow run logs
        Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#delete-workflow-run-logs - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDeleteWorkflowRunLogsRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/logs', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDeleteWorkflowRunLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_disable_selected_repository_github_actions_organization(self, request: operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationRequest) -> operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationResponse:
        r"""Disable a selected repository for GitHub Actions in an organization
        Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_disable_workflow(self, request: operations.ActionsDisableWorkflowRequest) -> operations.ActionsDisableWorkflowResponse:
        r"""Disable a workflow
        Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#disable-a-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDisableWorkflowRequest, base_url, '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDisableWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_download_artifact(self, request: operations.ActionsDownloadArtifactRequest) -> operations.ActionsDownloadArtifactResponse:
        r"""Download an artifact
        Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
        the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
        the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#download-an-artifact - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDownloadArtifactRequest, base_url, '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDownloadArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 302:
            res.headers = http_res.headers
            
        elif http_res.status_code == 410:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_download_job_logs_for_workflow_run(self, request: operations.ActionsDownloadJobLogsForWorkflowRunRequest) -> operations.ActionsDownloadJobLogsForWorkflowRunResponse:
        r"""Download job logs for a workflow run
        Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
        for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
        use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
        have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDownloadJobLogsForWorkflowRunRequest, base_url, '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDownloadJobLogsForWorkflowRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 302:
            res.headers = http_res.headers
            

        return res

    def actions_download_workflow_run_attempt_logs(self, request: operations.ActionsDownloadWorkflowRunAttemptLogsRequest) -> operations.ActionsDownloadWorkflowRunAttemptLogsResponse:
        r"""Download workflow run attempt logs
        Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
        1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
        the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDownloadWorkflowRunAttemptLogsRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDownloadWorkflowRunAttemptLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 302:
            res.headers = http_res.headers
            

        return res

    def actions_download_workflow_run_logs(self, request: operations.ActionsDownloadWorkflowRunLogsRequest) -> operations.ActionsDownloadWorkflowRunLogsResponse:
        r"""Download workflow run logs
        Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
        `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
        this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
        the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#download-workflow-run-logs - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsDownloadWorkflowRunLogsRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/logs', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsDownloadWorkflowRunLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 302:
            res.headers = http_res.headers
            

        return res

    def actions_enable_selected_repository_github_actions_organization(self, request: operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationRequest) -> operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationResponse:
        r"""Enable a selected repository for GitHub Actions in an organization
        Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_enable_workflow(self, request: operations.ActionsEnableWorkflowRequest) -> operations.ActionsEnableWorkflowResponse:
        r"""Enable a workflow
        Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#enable-a-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsEnableWorkflowRequest, base_url, '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsEnableWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_get_actions_cache_list(self, request: operations.ActionsGetActionsCacheListRequest) -> operations.ActionsGetActionsCacheListResponse:
        r"""List GitHub Actions caches for a repository
        Lists the GitHub Actions caches for a repository.
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetActionsCacheListRequest, base_url, '/repos/{owner}/{repo}/actions/caches', request)
        
        query_params = utils.get_query_params(operations.ActionsGetActionsCacheListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetActionsCacheListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsCacheList])
                res.actions_cache_list = out

        return res

    def actions_get_actions_cache_usage(self, request: operations.ActionsGetActionsCacheUsageRequest) -> operations.ActionsGetActionsCacheUsageResponse:
        r"""Get GitHub Actions cache usage for a repository
        Gets GitHub Actions cache usage for a repository.
        The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
        Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetActionsCacheUsageRequest, base_url, '/repos/{owner}/{repo}/actions/cache/usage', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetActionsCacheUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsCacheUsageByRepository])
                res.actions_cache_usage_by_repository = out

        return res

    def actions_get_actions_cache_usage_by_repo_for_org(self, request: operations.ActionsGetActionsCacheUsageByRepoForOrgRequest) -> operations.ActionsGetActionsCacheUsageByRepoForOrgResponse:
        r"""List repositories with GitHub Actions cache usage for an organization
        Lists repositories and their GitHub Actions cache usage for an organization.
        The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
        You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetActionsCacheUsageByRepoForOrgRequest, base_url, '/orgs/{org}/actions/cache/usage-by-repository', request)
        
        query_params = utils.get_query_params(operations.ActionsGetActionsCacheUsageByRepoForOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetActionsCacheUsageByRepoForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsGetActionsCacheUsageByRepoForOrg200ApplicationJSON])
                res.actions_get_actions_cache_usage_by_repo_for_org_200_application_json_object = out

        return res

    def actions_get_actions_cache_usage_for_org(self, request: operations.ActionsGetActionsCacheUsageForOrgRequest) -> operations.ActionsGetActionsCacheUsageForOrgResponse:
        r"""Get GitHub Actions cache usage for an organization
        Gets the total GitHub Actions cache usage for an organization.
        The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
        You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetActionsCacheUsageForOrgRequest, base_url, '/orgs/{org}/actions/cache/usage', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetActionsCacheUsageForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsCacheUsageOrgEnterprise])
                res.actions_cache_usage_org_enterprise = out

        return res

    def actions_get_allowed_actions_organization(self, request: operations.ActionsGetAllowedActionsOrganizationRequest) -> operations.ActionsGetAllowedActionsOrganizationResponse:
        r"""Get allowed actions and reusable workflows for an organization
        Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetAllowedActionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions/selected-actions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetAllowedActionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SelectedActions])
                res.selected_actions = out

        return res

    def actions_get_allowed_actions_repository(self, request: operations.ActionsGetAllowedActionsRepositoryRequest) -> operations.ActionsGetAllowedActionsRepositoryResponse:
        r"""Get allowed actions and reusable workflows for a repository
        Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetAllowedActionsRepositoryRequest, base_url, '/repos/{owner}/{repo}/actions/permissions/selected-actions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetAllowedActionsRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SelectedActions])
                res.selected_actions = out

        return res

    def actions_get_artifact(self, request: operations.ActionsGetArtifactRequest) -> operations.ActionsGetArtifactResponse:
        r"""Get an artifact
        Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-an-artifact - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetArtifactRequest, base_url, '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Artifact])
                res.artifact = out

        return res

    def actions_get_custom_oidc_sub_claim_for_repo(self, request: operations.ActionsGetCustomOidcSubClaimForRepoRequest) -> operations.ActionsGetCustomOidcSubClaimForRepoResponse:
        r"""Get the customization template for an OIDC subject claim for a repository
        Gets the customization template for an OpenID Connect (OIDC) subject claim.
        You must authenticate using an access token with the `repo` scope to use this
        endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
        https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetCustomOidcSubClaimForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/oidc/customization/sub', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetCustomOidcSubClaimForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OidcCustomSubRepo])
                res.oidc_custom_sub_repo = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_get_environment_public_key(self, request: operations.ActionsGetEnvironmentPublicKeyRequest) -> operations.ActionsGetEnvironmentPublicKeyResponse:
        r"""Get an environment public key
        Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-an-environment-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetEnvironmentPublicKeyRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/secrets/public-key', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetEnvironmentPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsPublicKey])
                res.actions_public_key = out

        return res

    def actions_get_environment_secret(self, request: operations.ActionsGetEnvironmentSecretRequest) -> operations.ActionsGetEnvironmentSecretResponse:
        r"""Get an environment secret
        Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-an-environment-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetEnvironmentSecretRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetEnvironmentSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsSecret])
                res.actions_secret = out

        return res

    def actions_get_environment_variable(self, request: operations.ActionsGetEnvironmentVariableRequest) -> operations.ActionsGetEnvironmentVariableResponse:
        r"""Get an environment variable
        Gets a specific variable in an environment. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#get-an-environment-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetEnvironmentVariableRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/variables/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetEnvironmentVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsVariable])
                res.actions_variable = out

        return res

    def actions_get_github_actions_default_workflow_permissions_organization(self, request: operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationRequest) -> operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponse:
        r"""Get default workflow permissions for an organization
        Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
        as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
        \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#get-default-workflow-permissions - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions/workflow', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsGetDefaultWorkflowPermissions])
                res.actions_get_default_workflow_permissions = out

        return res

    def actions_get_github_actions_default_workflow_permissions_repository(self, request: operations.ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryRequest) -> operations.ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponse:
        r"""Get default workflow permissions for a repository
        Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
        as well as if GitHub Actions can submit approving pull request reviews.
        For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
        https://docs.github.com/rest/reference/actions#get-default-workflow-permissions-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryRequest, base_url, '/repos/{owner}/{repo}/actions/permissions/workflow', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsGetDefaultWorkflowPermissions])
                res.actions_get_default_workflow_permissions = out

        return res

    def actions_get_github_actions_permissions_organization(self, request: operations.ActionsGetGithubActionsPermissionsOrganizationRequest) -> operations.ActionsGetGithubActionsPermissionsOrganizationResponse:
        r"""Get GitHub Actions permissions for an organization
        Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetGithubActionsPermissionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetGithubActionsPermissionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsOrganizationPermissions])
                res.actions_organization_permissions = out

        return res

    def actions_get_github_actions_permissions_repository(self, request: operations.ActionsGetGithubActionsPermissionsRepositoryRequest) -> operations.ActionsGetGithubActionsPermissionsRepositoryResponse:
        r"""Get GitHub Actions permissions for a repository
        Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetGithubActionsPermissionsRepositoryRequest, base_url, '/repos/{owner}/{repo}/actions/permissions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetGithubActionsPermissionsRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsRepositoryPermissions])
                res.actions_repository_permissions = out

        return res

    def actions_get_job_for_workflow_run(self, request: operations.ActionsGetJobForWorkflowRunRequest) -> operations.ActionsGetJobForWorkflowRunResponse:
        r"""Get a job for a workflow run
        Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetJobForWorkflowRunRequest, base_url, '/repos/{owner}/{repo}/actions/jobs/{job_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetJobForWorkflowRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def actions_get_org_public_key(self, request: operations.ActionsGetOrgPublicKeyRequest) -> operations.ActionsGetOrgPublicKeyResponse:
        r"""Get an organization public key
        Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-an-organization-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetOrgPublicKeyRequest, base_url, '/orgs/{org}/actions/secrets/public-key', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetOrgPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsPublicKey])
                res.actions_public_key = out

        return res

    def actions_get_org_secret(self, request: operations.ActionsGetOrgSecretRequest) -> operations.ActionsGetOrgSecretResponse:
        r"""Get an organization secret
        Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetOrgSecretRequest, base_url, '/orgs/{org}/actions/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrganizationActionsSecret])
                res.organization_actions_secret = out

        return res

    def actions_get_org_variable(self, request: operations.ActionsGetOrgVariableRequest) -> operations.ActionsGetOrgVariableResponse:
        r"""Get an organization variable
        Gets a specific variable in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#get-an-organization-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetOrgVariableRequest, base_url, '/orgs/{org}/actions/variables/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetOrgVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrganizationActionsVariable])
                res.organization_actions_variable = out

        return res

    def actions_get_pending_deployments_for_run(self, request: operations.ActionsGetPendingDeploymentsForRunRequest) -> operations.ActionsGetPendingDeploymentsForRunResponse:
        r"""Get pending deployments for a workflow run
        Get all deployment environments for a workflow run that are waiting for protection rules to pass.
        
        Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetPendingDeploymentsForRunRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetPendingDeploymentsForRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PendingDeployment]])
                res.pending_deployments = out

        return res

    def actions_get_repo_public_key(self, request: operations.ActionsGetRepoPublicKeyRequest) -> operations.ActionsGetRepoPublicKeyResponse:
        r"""Get a repository public key
        Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-a-repository-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetRepoPublicKeyRequest, base_url, '/repos/{owner}/{repo}/actions/secrets/public-key', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetRepoPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsPublicKey])
                res.actions_public_key = out

        return res

    def actions_get_repo_required_workflow(self, request: operations.ActionsGetRepoRequiredWorkflowRequest) -> operations.ActionsGetRepoRequiredWorkflowResponse:
        r"""Get a required workflow entity for a repository
        Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#get-repository-required-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetRepoRequiredWorkflowRequest, base_url, '/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetRepoRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RepoRequiredWorkflow])
                res.repo_required_workflow = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_get_repo_required_workflow_usage(self, request: operations.ActionsGetRepoRequiredWorkflowUsageRequest) -> operations.ActionsGetRepoRequiredWorkflowUsageResponse:
        r"""Get required workflow usage
        Gets the number of billable minutes used by a specific required workflow during the current billing cycle.
        
        Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions).\"
        
        Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-repository-required-workflow-usage - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetRepoRequiredWorkflowUsageRequest, base_url, '/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetRepoRequiredWorkflowUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkflowUsage])
                res.workflow_usage = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_get_repo_secret(self, request: operations.ActionsGetRepoSecretRequest) -> operations.ActionsGetRepoSecretResponse:
        r"""Get a repository secret
        Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetRepoSecretRequest, base_url, '/repos/{owner}/{repo}/actions/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsSecret])
                res.actions_secret = out

        return res

    def actions_get_repo_variable(self, request: operations.ActionsGetRepoVariableRequest) -> operations.ActionsGetRepoVariableResponse:
        r"""Get a repository variable
        Gets a specific variable in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#get-a-repository-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetRepoVariableRequest, base_url, '/repos/{owner}/{repo}/actions/variables/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetRepoVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsVariable])
                res.actions_variable = out

        return res

    def actions_get_required_workflow(self, request: operations.ActionsGetRequiredWorkflowRequest) -> operations.ActionsGetRequiredWorkflowResponse:
        r"""Get a required workflow
        Get a required workflow configured in an organization.
        
        You must authenticate using an access token with the `read:org` scope to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#get-a-required-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetRequiredWorkflowRequest, base_url, '/orgs/{org}/actions/required_workflows/{required_workflow_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RequiredWorkflow])
                res.required_workflow = out

        return res

    def actions_get_reviews_for_run(self, request: operations.ActionsGetReviewsForRunRequest) -> operations.ActionsGetReviewsForRunResponse:
        r"""Get the review history for a workflow run
        Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetReviewsForRunRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetReviewsForRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EnvironmentApprovals]])
                res.environment_approvals = out

        return res

    def actions_get_self_hosted_runner_for_org(self, request: operations.ActionsGetSelfHostedRunnerForOrgRequest) -> operations.ActionsGetSelfHostedRunnerForOrgResponse:
        r"""Get a self-hosted runner for an organization
        Gets a specific self-hosted runner configured in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetSelfHostedRunnerForOrgRequest, base_url, '/orgs/{org}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetSelfHostedRunnerForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Runner])
                res.runner = out

        return res

    def actions_get_self_hosted_runner_for_repo(self, request: operations.ActionsGetSelfHostedRunnerForRepoRequest) -> operations.ActionsGetSelfHostedRunnerForRepoResponse:
        r"""Get a self-hosted runner for a repository
        Gets a specific self-hosted runner configured in a repository.
        
        You must authenticate using an access token with the `repo` scope to use this
        endpoint.
        https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetSelfHostedRunnerForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetSelfHostedRunnerForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Runner])
                res.runner = out

        return res

    def actions_get_workflow(self, request: operations.ActionsGetWorkflowRequest) -> operations.ActionsGetWorkflowResponse:
        r"""Get a workflow
        Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-a-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetWorkflowRequest, base_url, '/repos/{owner}/{repo}/actions/workflows/{workflow_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Workflow])
                res.workflow = out

        return res

    def actions_get_workflow_access_to_repository(self, request: operations.ActionsGetWorkflowAccessToRepositoryRequest) -> operations.ActionsGetWorkflowAccessToRepositoryResponse:
        r"""Get the level of access for workflows outside of the repository
        Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
        This endpoint only applies to private repositories.
        For more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\"
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
        repository `administration` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-workflow-access-level-to-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetWorkflowAccessToRepositoryRequest, base_url, '/repos/{owner}/{repo}/actions/permissions/access', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetWorkflowAccessToRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsWorkflowAccessToRepository])
                res.actions_workflow_access_to_repository = out

        return res

    def actions_get_workflow_run(self, request: operations.ActionsGetWorkflowRunRequest) -> operations.ActionsGetWorkflowRunResponse:
        r"""Get a workflow run
        Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetWorkflowRunRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}', request)
        
        query_params = utils.get_query_params(operations.ActionsGetWorkflowRunRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetWorkflowRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkflowRun])
                res.workflow_run = out

        return res

    def actions_get_workflow_run_attempt(self, request: operations.ActionsGetWorkflowRunAttemptRequest) -> operations.ActionsGetWorkflowRunAttemptResponse:
        r"""Get a workflow run attempt
        Gets a specific workflow run attempt. Anyone with read access to the repository
        can use this endpoint. If the repository is private you must use an access token
        with the `repo` scope. GitHub Apps must have the `actions:read` permission to
        use this endpoint.
        https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetWorkflowRunAttemptRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}', request)
        
        query_params = utils.get_query_params(operations.ActionsGetWorkflowRunAttemptRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetWorkflowRunAttemptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkflowRun])
                res.workflow_run = out

        return res

    def actions_get_workflow_run_usage(self, request: operations.ActionsGetWorkflowRunUsageRequest) -> operations.ActionsGetWorkflowRunUsageResponse:
        r"""Get workflow run usage
        Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".
        
        Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-workflow-run-usage - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetWorkflowRunUsageRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/timing', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetWorkflowRunUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkflowRunUsage])
                res.workflow_run_usage = out

        return res

    def actions_get_workflow_usage(self, request: operations.ActionsGetWorkflowUsageRequest) -> operations.ActionsGetWorkflowUsageResponse:
        r"""Get workflow usage
        Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".
        
        You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#get-workflow-usage - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsGetWorkflowUsageRequest, base_url, '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsGetWorkflowUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkflowUsage])
                res.workflow_usage = out

        return res

    def actions_list_artifacts_for_repo(self, request: operations.ActionsListArtifactsForRepoRequest) -> operations.ActionsListArtifactsForRepoResponse:
        r"""List artifacts for a repository
        Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListArtifactsForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/artifacts', request)
        
        query_params = utils.get_query_params(operations.ActionsListArtifactsForRepoRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListArtifactsForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListArtifactsForRepo200ApplicationJSON])
                res.actions_list_artifacts_for_repo_200_application_json_object = out

        return res

    def actions_list_environment_secrets(self, request: operations.ActionsListEnvironmentSecretsRequest) -> operations.ActionsListEnvironmentSecretsResponse:
        r"""List environment secrets
        Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-environment-secrets - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListEnvironmentSecretsRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/secrets', request)
        
        query_params = utils.get_query_params(operations.ActionsListEnvironmentSecretsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListEnvironmentSecretsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListEnvironmentSecrets200ApplicationJSON])
                res.actions_list_environment_secrets_200_application_json_object = out

        return res

    def actions_list_environment_variables(self, request: operations.ActionsListEnvironmentVariablesRequest) -> operations.ActionsListEnvironmentVariablesResponse:
        r"""List environment variables
        Lists all environment variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#list-environment-variables - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListEnvironmentVariablesRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/variables', request)
        
        query_params = utils.get_query_params(operations.ActionsListEnvironmentVariablesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListEnvironmentVariablesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListEnvironmentVariables200ApplicationJSON])
                res.actions_list_environment_variables_200_application_json_object = out

        return res

    def actions_list_jobs_for_workflow_run(self, request: operations.ActionsListJobsForWorkflowRunRequest) -> operations.ActionsListJobsForWorkflowRunResponse:
        r"""List jobs for a workflow run
        Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListJobsForWorkflowRunRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs', request)
        
        query_params = utils.get_query_params(operations.ActionsListJobsForWorkflowRunRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListJobsForWorkflowRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListJobsForWorkflowRun200ApplicationJSON])
                res.actions_list_jobs_for_workflow_run_200_application_json_object = out

        return res

    def actions_list_jobs_for_workflow_run_attempt(self, request: operations.ActionsListJobsForWorkflowRunAttemptRequest) -> operations.ActionsListJobsForWorkflowRunAttemptResponse:
        r"""List jobs for a workflow run attempt
        Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListJobsForWorkflowRunAttemptRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs', request)
        
        query_params = utils.get_query_params(operations.ActionsListJobsForWorkflowRunAttemptRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListJobsForWorkflowRunAttemptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListJobsForWorkflowRunAttempt200ApplicationJSON])
                res.actions_list_jobs_for_workflow_run_attempt_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_list_labels_for_self_hosted_runner_for_org(self, request: operations.ActionsListLabelsForSelfHostedRunnerForOrgRequest) -> operations.ActionsListLabelsForSelfHostedRunnerForOrgResponse:
        r"""List labels for a self-hosted runner for an organization
        Lists all labels for a self-hosted runner configured in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListLabelsForSelfHostedRunnerForOrgRequest, base_url, '/orgs/{org}/actions/runners/{runner_id}/labels', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListLabelsForSelfHostedRunnerForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListLabelsForSelfHostedRunnerForOrg200ApplicationJSON])
                res.actions_list_labels_for_self_hosted_runner_for_org_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_list_labels_for_self_hosted_runner_for_repo(self, request: operations.ActionsListLabelsForSelfHostedRunnerForRepoRequest) -> operations.ActionsListLabelsForSelfHostedRunnerForRepoResponse:
        r"""List labels for a self-hosted runner for a repository
        Lists all labels for a self-hosted runner configured in a repository.
        
        You must authenticate using an access token with the `repo` scope to use this
        endpoint.
        https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListLabelsForSelfHostedRunnerForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListLabelsForSelfHostedRunnerForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListLabelsForSelfHostedRunnerForRepo200ApplicationJSON])
                res.actions_list_labels_for_self_hosted_runner_for_repo_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_list_org_secrets(self, request: operations.ActionsListOrgSecretsRequest) -> operations.ActionsListOrgSecretsResponse:
        r"""List organization secrets
        Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-organization-secrets - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListOrgSecretsRequest, base_url, '/orgs/{org}/actions/secrets', request)
        
        query_params = utils.get_query_params(operations.ActionsListOrgSecretsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListOrgSecretsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListOrgSecrets200ApplicationJSON])
                res.actions_list_org_secrets_200_application_json_object = out

        return res

    def actions_list_org_variables(self, request: operations.ActionsListOrgVariablesRequest) -> operations.ActionsListOrgVariablesResponse:
        r"""List organization variables
        Lists all organization variables. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#list-organization-variables - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListOrgVariablesRequest, base_url, '/orgs/{org}/actions/variables', request)
        
        query_params = utils.get_query_params(operations.ActionsListOrgVariablesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListOrgVariablesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListOrgVariables200ApplicationJSON])
                res.actions_list_org_variables_200_application_json_object = out

        return res

    def actions_list_repo_required_workflows(self, request: operations.ActionsListRepoRequiredWorkflowsRequest) -> operations.ActionsListRepoRequiredWorkflowsResponse:
        r"""List repository required workflows
        Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#list-repository-required-workflows - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListRepoRequiredWorkflowsRequest, base_url, '/repos/{org}/{repo}/actions/required_workflows', request)
        
        query_params = utils.get_query_params(operations.ActionsListRepoRequiredWorkflowsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListRepoRequiredWorkflowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListRepoRequiredWorkflows200ApplicationJSON])
                res.actions_list_repo_required_workflows_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_list_repo_secrets(self, request: operations.ActionsListRepoSecretsRequest) -> operations.ActionsListRepoSecretsResponse:
        r"""List repository secrets
        Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-repository-secrets - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListRepoSecretsRequest, base_url, '/repos/{owner}/{repo}/actions/secrets', request)
        
        query_params = utils.get_query_params(operations.ActionsListRepoSecretsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListRepoSecretsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListRepoSecrets200ApplicationJSON])
                res.actions_list_repo_secrets_200_application_json_object = out

        return res

    def actions_list_repo_variables(self, request: operations.ActionsListRepoVariablesRequest) -> operations.ActionsListRepoVariablesResponse:
        r"""List repository variables
        Lists all repository variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#list-repository-variables - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListRepoVariablesRequest, base_url, '/repos/{owner}/{repo}/actions/variables', request)
        
        query_params = utils.get_query_params(operations.ActionsListRepoVariablesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListRepoVariablesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListRepoVariables200ApplicationJSON])
                res.actions_list_repo_variables_200_application_json_object = out

        return res

    def actions_list_repo_workflows(self, request: operations.ActionsListRepoWorkflowsRequest) -> operations.ActionsListRepoWorkflowsResponse:
        r"""List repository workflows
        Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-repository-workflows - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListRepoWorkflowsRequest, base_url, '/repos/{owner}/{repo}/actions/workflows', request)
        
        query_params = utils.get_query_params(operations.ActionsListRepoWorkflowsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListRepoWorkflowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListRepoWorkflows200ApplicationJSON])
                res.actions_list_repo_workflows_200_application_json_object = out

        return res

    def actions_list_required_workflow_runs(self, request: operations.ActionsListRequiredWorkflowRunsRequest) -> operations.ActionsListRequiredWorkflowRunsResponse:
        r"""List workflow runs for a required workflow
        List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        
        Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#list-required-workflow-runs - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListRequiredWorkflowRunsRequest, base_url, '/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs', request)
        
        query_params = utils.get_query_params(operations.ActionsListRequiredWorkflowRunsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListRequiredWorkflowRunsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListRequiredWorkflowRuns200ApplicationJSON])
                res.actions_list_required_workflow_runs_200_application_json_object = out

        return res

    def actions_list_required_workflows(self, request: operations.ActionsListRequiredWorkflowsRequest) -> operations.ActionsListRequiredWorkflowsResponse:
        r"""List required workflows
        List all required workflows in an organization.
        
        You must authenticate using an access token with the `read:org` scope to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#list-required-workflows - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListRequiredWorkflowsRequest, base_url, '/orgs/{org}/actions/required_workflows', request)
        
        query_params = utils.get_query_params(operations.ActionsListRequiredWorkflowsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListRequiredWorkflowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListRequiredWorkflows200ApplicationJSON])
                res.actions_list_required_workflows_200_application_json_object = out

        return res

    def actions_list_runner_applications_for_org(self, request: operations.ActionsListRunnerApplicationsForOrgRequest) -> operations.ActionsListRunnerApplicationsForOrgResponse:
        r"""List runner applications for an organization
        Lists binaries for the runner application that you can download and run.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListRunnerApplicationsForOrgRequest, base_url, '/orgs/{org}/actions/runners/downloads', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListRunnerApplicationsForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RunnerApplication]])
                res.runner_applications = out

        return res

    def actions_list_runner_applications_for_repo(self, request: operations.ActionsListRunnerApplicationsForRepoRequest) -> operations.ActionsListRunnerApplicationsForRepoResponse:
        r"""List runner applications for a repository
        Lists binaries for the runner application that you can download and run.
        
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListRunnerApplicationsForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/downloads', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListRunnerApplicationsForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RunnerApplication]])
                res.runner_applications = out

        return res

    def actions_list_selected_repos_for_org_secret(self, request: operations.ActionsListSelectedReposForOrgSecretRequest) -> operations.ActionsListSelectedReposForOrgSecretResponse:
        r"""List selected repositories for an organization secret
        Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListSelectedReposForOrgSecretRequest, base_url, '/orgs/{org}/actions/secrets/{secret_name}/repositories', request)
        
        query_params = utils.get_query_params(operations.ActionsListSelectedReposForOrgSecretRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListSelectedReposForOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListSelectedReposForOrgSecret200ApplicationJSON])
                res.actions_list_selected_repos_for_org_secret_200_application_json_object = out

        return res

    def actions_list_selected_repos_for_org_variable(self, request: operations.ActionsListSelectedReposForOrgVariableRequest) -> operations.ActionsListSelectedReposForOrgVariableResponse:
        r"""List selected repositories for an organization variable
        Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListSelectedReposForOrgVariableRequest, base_url, '/orgs/{org}/actions/variables/{name}/repositories', request)
        
        query_params = utils.get_query_params(operations.ActionsListSelectedReposForOrgVariableRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListSelectedReposForOrgVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListSelectedReposForOrgVariable200ApplicationJSON])
                res.actions_list_selected_repos_for_org_variable_200_application_json_object = out
        elif http_res.status_code == 409:
            pass

        return res

    def actions_list_selected_repositories_enabled_github_actions_organization(self, request: operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationRequest) -> operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse:
        r"""List selected repositories enabled for GitHub Actions in an organization
        Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions/repositories', request)
        
        query_params = utils.get_query_params(operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200ApplicationJSON])
                res.actions_list_selected_repositories_enabled_github_actions_organization_200_application_json_object = out

        return res

    def actions_list_selected_repositories_required_workflow(self, request: operations.ActionsListSelectedRepositoriesRequiredWorkflowRequest) -> operations.ActionsListSelectedRepositoriesRequiredWorkflowResponse:
        r"""List selected repositories for a required workflow
        Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.
        
        You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows - API method documentation https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListSelectedRepositoriesRequiredWorkflowRequest, base_url, '/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListSelectedRepositoriesRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListSelectedRepositoriesRequiredWorkflow200ApplicationJSON])
                res.actions_list_selected_repositories_required_workflow_200_application_json_object = out
        elif http_res.status_code == 404:
            pass

        return res

    def actions_list_self_hosted_runners_for_org(self, request: operations.ActionsListSelfHostedRunnersForOrgRequest) -> operations.ActionsListSelfHostedRunnersForOrgResponse:
        r"""List self-hosted runners for an organization
        Lists all self-hosted runners configured in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListSelfHostedRunnersForOrgRequest, base_url, '/orgs/{org}/actions/runners', request)
        
        query_params = utils.get_query_params(operations.ActionsListSelfHostedRunnersForOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListSelfHostedRunnersForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListSelfHostedRunnersForOrg200ApplicationJSON])
                res.actions_list_self_hosted_runners_for_org_200_application_json_object = out

        return res

    def actions_list_self_hosted_runners_for_repo(self, request: operations.ActionsListSelfHostedRunnersForRepoRequest) -> operations.ActionsListSelfHostedRunnersForRepoResponse:
        r"""List self-hosted runners for a repository
        Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListSelfHostedRunnersForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners', request)
        
        query_params = utils.get_query_params(operations.ActionsListSelfHostedRunnersForRepoRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListSelfHostedRunnersForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListSelfHostedRunnersForRepo200ApplicationJSON])
                res.actions_list_self_hosted_runners_for_repo_200_application_json_object = out

        return res

    def actions_list_workflow_run_artifacts(self, request: operations.ActionsListWorkflowRunArtifactsRequest) -> operations.ActionsListWorkflowRunArtifactsResponse:
        r"""List workflow run artifacts
        Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListWorkflowRunArtifactsRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts', request)
        
        query_params = utils.get_query_params(operations.ActionsListWorkflowRunArtifactsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListWorkflowRunArtifactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListWorkflowRunArtifacts200ApplicationJSON])
                res.actions_list_workflow_run_artifacts_200_application_json_object = out

        return res

    def actions_list_workflow_runs(self, request: operations.ActionsListWorkflowRunsRequest) -> operations.ActionsListWorkflowRunsResponse:
        r"""List workflow runs for a workflow
        List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        
        Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        https://docs.github.com/rest/reference/actions#list-workflow-runs - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListWorkflowRunsRequest, base_url, '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs', request)
        
        query_params = utils.get_query_params(operations.ActionsListWorkflowRunsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListWorkflowRunsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListWorkflowRuns200ApplicationJSON])
                res.actions_list_workflow_runs_200_application_json_object = out

        return res

    def actions_list_workflow_runs_for_repo(self, request: operations.ActionsListWorkflowRunsForRepoRequest) -> operations.ActionsListWorkflowRunsForRepoResponse:
        r"""List workflow runs for a repository
        Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        
        Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsListWorkflowRunsForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runs', request)
        
        query_params = utils.get_query_params(operations.ActionsListWorkflowRunsForRepoRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsListWorkflowRunsForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsListWorkflowRunsForRepo200ApplicationJSON])
                res.actions_list_workflow_runs_for_repo_200_application_json_object = out

        return res

    def actions_re_run_job_for_workflow_run(self, request: operations.ActionsReRunJobForWorkflowRunRequest) -> operations.ActionsReRunJobForWorkflowRunResponse:
        r"""Re-run a job from a workflow run
        Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#re-run-job-for-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsReRunJobForWorkflowRunRequest, base_url, '/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsReRunJobForWorkflowRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_re_run_workflow(self, request: operations.ActionsReRunWorkflowRequest) -> operations.ActionsReRunWorkflowResponse:
        r"""Re-run a workflow
        Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#re-run-a-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsReRunWorkflowRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsReRunWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out

        return res

    def actions_re_run_workflow_failed_jobs(self, request: operations.ActionsReRunWorkflowFailedJobsRequest) -> operations.ActionsReRunWorkflowFailedJobsResponse:
        r"""Re-run failed jobs from a workflow run
        Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#re-run-workflow-failed-jobs - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsReRunWorkflowFailedJobsRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsReRunWorkflowFailedJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out

        return res

    def actions_remove_all_custom_labels_from_self_hosted_runner_for_org(self, request: operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgRequest) -> operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponse:
        r"""Remove all custom labels from a self-hosted runner for an organization
        Remove all custom labels from a self-hosted runner configured in an
        organization. Returns the remaining read-only labels from the runner.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgRequest, base_url, '/orgs/{org}/actions/runners/{runner_id}/labels', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200ApplicationJSON])
                res.actions_remove_all_custom_labels_from_self_hosted_runner_for_org_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_remove_all_custom_labels_from_self_hosted_runner_for_repo(self, request: operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoRequest) -> operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponse:
        r"""Remove all custom labels from a self-hosted runner for a repository
        Remove all custom labels from a self-hosted runner configured in a
        repository. Returns the remaining read-only labels from the runner.
        
        You must authenticate using an access token with the `repo` scope to use this
        endpoint.
        https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200ApplicationJSON])
                res.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def actions_remove_custom_label_from_self_hosted_runner_for_org(self, request: operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgRequest) -> operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponse:
        r"""Remove a custom label from a self-hosted runner for an organization
        Remove a custom label from a self-hosted runner configured
        in an organization. Returns the remaining labels from the runner.
        
        This endpoint returns a `404 Not Found` status if the custom label is not
        present on the runner.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgRequest, base_url, '/orgs/{org}/actions/runners/{runner_id}/labels/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg200ApplicationJSON])
                res.actions_remove_custom_label_from_self_hosted_runner_for_org_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def actions_remove_custom_label_from_self_hosted_runner_for_repo(self, request: operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoRequest) -> operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse:
        r"""Remove a custom label from a self-hosted runner for a repository
        Remove a custom label from a self-hosted runner configured
        in a repository. Returns the remaining labels from the runner.
        
        This endpoint returns a `404 Not Found` status if the custom label is not
        present on the runner.
        
        You must authenticate using an access token with the `repo` scope to use this
        endpoint.
        https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo200ApplicationJSON])
                res.actions_remove_custom_label_from_self_hosted_runner_for_repo_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def actions_remove_selected_repo_from_org_secret(self, request: operations.ActionsRemoveSelectedRepoFromOrgSecretRequest) -> operations.ActionsRemoveSelectedRepoFromOrgSecretResponse:
        r"""Remove selected repository from an organization secret
        Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsRemoveSelectedRepoFromOrgSecretRequest, base_url, '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsRemoveSelectedRepoFromOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_remove_selected_repo_from_org_variable(self, request: operations.ActionsRemoveSelectedRepoFromOrgVariableRequest) -> operations.ActionsRemoveSelectedRepoFromOrgVariableResponse:
        r"""Remove selected repository from an organization variable
        Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsRemoveSelectedRepoFromOrgVariableRequest, base_url, '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsRemoveSelectedRepoFromOrgVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_remove_selected_repo_from_required_workflow(self, request: operations.ActionsRemoveSelectedRepoFromRequiredWorkflowRequest) -> operations.ActionsRemoveSelectedRepoFromRequiredWorkflowResponse:
        r"""Remove a selected repository from required workflow
        Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#remove-a-repository-from-selected-repositories-list-for-a-required-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsRemoveSelectedRepoFromRequiredWorkflowRequest, base_url, '/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsRemoveSelectedRepoFromRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_review_pending_deployments_for_run(self, request: operations.ActionsReviewPendingDeploymentsForRunRequest) -> operations.ActionsReviewPendingDeploymentsForRunResponse:
        r"""Review pending deployments for a workflow run
        Approve or reject pending deployments that are waiting on approval by a required reviewer.
        
        Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsReviewPendingDeploymentsForRunRequest, base_url, '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsReviewPendingDeploymentsForRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Deployment]])
                res.deployments = out

        return res

    def actions_set_allowed_actions_organization(self, request: operations.ActionsSetAllowedActionsOrganizationRequest) -> operations.ActionsSetAllowedActionsOrganizationResponse:
        r"""Set allowed actions and reusable workflows for an organization
        Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetAllowedActionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions/selected-actions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "selected_actions", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetAllowedActionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_allowed_actions_repository(self, request: operations.ActionsSetAllowedActionsRepositoryRequest) -> operations.ActionsSetAllowedActionsRepositoryResponse:
        r"""Set allowed actions and reusable workflows for a repository
        Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetAllowedActionsRepositoryRequest, base_url, '/repos/{owner}/{repo}/actions/permissions/selected-actions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "selected_actions", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetAllowedActionsRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_custom_labels_for_self_hosted_runner_for_org(self, request: operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest) -> operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponse:
        r"""Set custom labels for a self-hosted runner for an organization
        Remove all previous custom labels and set the new custom labels for a specific
        self-hosted runner configured in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, base_url, '/orgs/{org}/actions/runners/{runner_id}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrg200ApplicationJSON])
                res.actions_set_custom_labels_for_self_hosted_runner_for_org_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def actions_set_custom_labels_for_self_hosted_runner_for_repo(self, request: operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest) -> operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponse:
        r"""Set custom labels for a self-hosted runner for a repository
        Remove all previous custom labels and set the new custom labels for a specific
        self-hosted runner configured in a repository.
        
        You must authenticate using an access token with the `repo` scope to use this
        endpoint.
        https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepo200ApplicationJSON])
                res.actions_set_custom_labels_for_self_hosted_runner_for_repo_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def actions_set_custom_oidc_sub_claim_for_repo(self, request: operations.ActionsSetCustomOidcSubClaimForRepoRequest) -> operations.ActionsSetCustomOidcSubClaimForRepoResponse:
        r"""Set the customization template for an OIDC subject claim for a repository
        Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
        You must authenticate using an access token with the `repo` scope to use this
        endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetCustomOidcSubClaimForRepoRequest, base_url, '/repos/{owner}/{repo}/actions/oidc/customization/sub', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetCustomOidcSubClaimForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def actions_set_github_actions_default_workflow_permissions_organization(self, request: operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationRequest) -> operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponse:
        r"""Set default workflow permissions for an organization
        Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
        can submit approving pull request reviews. For more information, see
        \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#set-default-workflow-permissions - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions/workflow', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "actions_set_default_workflow_permissions", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_github_actions_default_workflow_permissions_repository(self, request: operations.ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryRequest) -> operations.ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponse:
        r"""Set default workflow permissions for a repository
        Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
        can submit approving pull request reviews.
        For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
        https://docs.github.com/rest/reference/actions#set-default-workflow-permissions-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryRequest, base_url, '/repos/{owner}/{repo}/actions/permissions/workflow', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "actions_set_default_workflow_permissions", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_github_actions_permissions_organization(self, request: operations.ActionsSetGithubActionsPermissionsOrganizationRequest) -> operations.ActionsSetGithubActionsPermissionsOrganizationResponse:
        r"""Set GitHub Actions permissions for an organization
        Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetGithubActionsPermissionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetGithubActionsPermissionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_github_actions_permissions_repository(self, request: operations.ActionsSetGithubActionsPermissionsRepositoryRequest) -> operations.ActionsSetGithubActionsPermissionsRepositoryResponse:
        r"""Set GitHub Actions permissions for a repository
        Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetGithubActionsPermissionsRepositoryRequest, base_url, '/repos/{owner}/{repo}/actions/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetGithubActionsPermissionsRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_selected_repos_for_org_secret(self, request: operations.ActionsSetSelectedReposForOrgSecretRequest) -> operations.ActionsSetSelectedReposForOrgSecretResponse:
        r"""Set selected repositories for an organization secret
        Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetSelectedReposForOrgSecretRequest, base_url, '/orgs/{org}/actions/secrets/{secret_name}/repositories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetSelectedReposForOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_selected_repos_for_org_variable(self, request: operations.ActionsSetSelectedReposForOrgVariableRequest) -> operations.ActionsSetSelectedReposForOrgVariableResponse:
        r"""Set selected repositories for an organization variable
        Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetSelectedReposForOrgVariableRequest, base_url, '/orgs/{org}/actions/variables/{name}/repositories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetSelectedReposForOrgVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_selected_repos_to_required_workflow(self, request: operations.ActionsSetSelectedReposToRequiredWorkflowRequest) -> operations.ActionsSetSelectedReposToRequiredWorkflowResponse:
        r"""Sets repositories for a required workflow
        Sets the repositories for a required workflow that is required for selected repositories.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#set-selected-repositories-for-a-required-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetSelectedReposToRequiredWorkflowRequest, base_url, '/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetSelectedReposToRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_selected_repositories_enabled_github_actions_organization(self, request: operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest) -> operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse:
        r"""Set selected repositories enabled for GitHub Actions in an organization
        Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, base_url, '/orgs/{org}/actions/permissions/repositories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_set_workflow_access_to_repository(self, request: operations.ActionsSetWorkflowAccessToRepositoryRequest) -> operations.ActionsSetWorkflowAccessToRepositoryResponse:
        r"""Set the level of access for workflows outside of the repository
        Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
        This endpoint only applies to private repositories.
        For more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\".
        
        You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
        repository `administration` permission to use this endpoint.
        https://docs.github.com/rest/reference/actions#set-workflow-access-to-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsSetWorkflowAccessToRepositoryRequest, base_url, '/repos/{owner}/{repo}/actions/permissions/access', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "actions_workflow_access_to_repository", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsSetWorkflowAccessToRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_update_environment_variable(self, request: operations.ActionsUpdateEnvironmentVariableRequest) -> operations.ActionsUpdateEnvironmentVariableResponse:
        r"""Update an environment variable
        Updates an environment variable that you can reference in a GitHub Actions workflow.
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        GitHub Apps must have the `environment:write` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#update-an-environment-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsUpdateEnvironmentVariableRequest, base_url, '/repositories/{repository_id}/environments/{environment_name}/variables/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsUpdateEnvironmentVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_update_org_variable(self, request: operations.ActionsUpdateOrgVariableRequest) -> operations.ActionsUpdateOrgVariableResponse:
        r"""Update an organization variable
        Updates an organization variable that you can reference in a GitHub Actions workflow.
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#update-an-organization-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsUpdateOrgVariableRequest, base_url, '/orgs/{org}/actions/variables/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsUpdateOrgVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_update_repo_variable(self, request: operations.ActionsUpdateRepoVariableRequest) -> operations.ActionsUpdateRepoVariableResponse:
        r"""Update a repository variable
        Updates a repository variable that you can reference in a GitHub Actions workflow.
        You must authenticate using an access token with the `repo` scope to use this endpoint.
        GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
        https://docs.github.com/rest/actions/variables#update-a-repository-variable - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsUpdateRepoVariableRequest, base_url, '/repos/{owner}/{repo}/actions/variables/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsUpdateRepoVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def actions_update_required_workflow(self, request: operations.ActionsUpdateRequiredWorkflowRequest) -> operations.ActionsUpdateRequiredWorkflowResponse:
        r"""Update a required workflow
        Update a required workflow in an organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        For more information, see \"[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\" 
        https://docs.github.com/rest/reference/actions#update-a-required-workflow - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActionsUpdateRequiredWorkflowRequest, base_url, '/orgs/{org}/actions/required_workflows/{required_workflow_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActionsUpdateRequiredWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RequiredWorkflow])
                res.required_workflow = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    