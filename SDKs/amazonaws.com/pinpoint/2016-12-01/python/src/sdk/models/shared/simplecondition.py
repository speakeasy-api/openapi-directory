"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributedimension as shared_attributedimension
from ..shared import eventcondition as shared_eventcondition
from ..shared import metricdimension as shared_metricdimension
from ..shared import segmentbehaviors as shared_segmentbehaviors
from ..shared import segmentcondition as shared_segmentcondition
from ..shared import segmentdemographics as shared_segmentdemographics
from ..shared import segmentlocation as shared_segmentlocation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SimpleConditionSegmentDimensions:
    r"""The dimension settings for the segment that's associated with the activity."""
    
    attributes: Optional[dict[str, shared_attributedimension.AttributeDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})  
    behavior: Optional[shared_segmentbehaviors.SegmentBehaviors] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Behavior'), 'exclude': lambda f: f is None }})  
    demographic: Optional[shared_segmentdemographics.SegmentDemographics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Demographic'), 'exclude': lambda f: f is None }})  
    location: Optional[shared_segmentlocation.SegmentLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Location'), 'exclude': lambda f: f is None }})  
    metrics: Optional[dict[str, shared_metricdimension.MetricDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Metrics'), 'exclude': lambda f: f is None }})  
    user_attributes: Optional[dict[str, shared_attributedimension.AttributeDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserAttributes'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SimpleCondition:
    r"""Specifies a condition to evaluate for an activity in a journey."""
    
    event_condition: Optional[shared_eventcondition.EventCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventCondition'), 'exclude': lambda f: f is None }})  
    segment_condition: Optional[shared_segmentcondition.SegmentCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SegmentCondition'), 'exclude': lambda f: f is None }})  
    segment_dimensions: Optional[SimpleConditionSegmentDimensions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SegmentDimensions'), 'exclude': lambda f: f is None }})  
    