// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ErrorsGroupErrorStackTraceSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type ErrorsGroupErrorStackTracePathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsGroupErrorStackTraceRequest struct {
	PathParams ErrorsGroupErrorStackTracePathParams
	Security   ErrorsGroupErrorStackTraceSecurity
}

type ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnumConflict            ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsGroupErrorStackTraceDefaultApplicationJSONError struct {
	Code    ErrorsGroupErrorStackTraceDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                        `json:"message"`
}

// ErrorsGroupErrorStackTraceDefaultApplicationJSON - Error code with reason
type ErrorsGroupErrorStackTraceDefaultApplicationJSON struct {
	Error ErrorsGroupErrorStackTraceDefaultApplicationJSONError `json:"error"`
}

type ErrorsGroupErrorStackTraceResponse struct {
	ContentType string
	// Gets the stack trace for the error group.
	DiagnosticsStackTrace *shared.DiagnosticsStackTrace
	// Error code with reason
	ErrorsGroupErrorStackTraceDefaultApplicationJSONObject *ErrorsGroupErrorStackTraceDefaultApplicationJSON
	StatusCode                                             int
	RawResponse                                            *http.Response
}
