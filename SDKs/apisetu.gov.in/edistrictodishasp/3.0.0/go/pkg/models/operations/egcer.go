// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EgcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type EgcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Reference No
	RefNo string `json:"RefNo"`
	// Token No
	TokenNo string `json:"TokenNo"`
	// Aadhaar number
	UID string `json:"UID"`
}

// EgcerRequestBodyFormatEnum - The format of the certificate in response.
type EgcerRequestBodyFormatEnum string

const (
	EgcerRequestBodyFormatEnumPdf EgcerRequestBodyFormatEnum = "pdf"
)

func (e EgcerRequestBodyFormatEnum) ToPointer() *EgcerRequestBodyFormatEnum {
	return &e
}

func (e *EgcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = EgcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EgcerRequestBodyFormatEnum: %v", v)
	}
}

// EgcerRequestBody - Request format
type EgcerRequestBody struct {
	CertificateParameters *EgcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format EgcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Egcer504ApplicationJSONErrorEnum string

const (
	Egcer504ApplicationJSONErrorEnumGatewayTimeout Egcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Egcer504ApplicationJSONErrorEnum) ToPointer() *Egcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Egcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Egcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Egcer504ApplicationJSONErrorDescriptionEnum string

const (
	Egcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Egcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Egcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Egcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Egcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Egcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Egcer504ApplicationJSON - Gateway timeout
type Egcer504ApplicationJSON struct {
	Error            *Egcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egcer503ApplicationJSONErrorEnum string

const (
	Egcer503ApplicationJSONErrorEnumServiceUnavailable Egcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Egcer503ApplicationJSONErrorEnum) ToPointer() *Egcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Egcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Egcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Egcer503ApplicationJSONErrorDescriptionEnum string

const (
	Egcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Egcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Egcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Egcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Egcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Egcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Egcer503ApplicationJSON - Service unavailable
type Egcer503ApplicationJSON struct {
	Error            *Egcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egcer502ApplicationJSONErrorEnum string

const (
	Egcer502ApplicationJSONErrorEnumBadGatewy Egcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Egcer502ApplicationJSONErrorEnum) ToPointer() *Egcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Egcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Egcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Egcer502ApplicationJSONErrorDescriptionEnum string

const (
	Egcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Egcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Egcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Egcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Egcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Egcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Egcer502ApplicationJSON - Bad gateway
type Egcer502ApplicationJSON struct {
	Error            *Egcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egcer500ApplicationJSONErrorEnum string

const (
	Egcer500ApplicationJSONErrorEnumInternalServerError Egcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Egcer500ApplicationJSONErrorEnum) ToPointer() *Egcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Egcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Egcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Egcer500ApplicationJSONErrorDescriptionEnum string

const (
	Egcer500ApplicationJSONErrorDescriptionEnumInternalServerError Egcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Egcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Egcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Egcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Egcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Egcer500ApplicationJSON - Internal server error
type Egcer500ApplicationJSON struct {
	Error            *Egcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egcer404ApplicationJSONErrorEnum string

const (
	Egcer404ApplicationJSONErrorEnumRecordNotFound Egcer404ApplicationJSONErrorEnum = "record_not_found"
	Egcer404ApplicationJSONErrorEnumURLNotFound    Egcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Egcer404ApplicationJSONErrorEnum) ToPointer() *Egcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Egcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Egcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Egcer404ApplicationJSONErrorDescriptionEnum string

const (
	Egcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Egcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Egcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Egcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Egcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Egcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Egcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Egcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Egcer404ApplicationJSON - No record found
type Egcer404ApplicationJSON struct {
	Error            *Egcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egcer401ApplicationJSONErrorEnum string

const (
	Egcer401ApplicationJSONErrorEnumInvalidAuthentication Egcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Egcer401ApplicationJSONErrorEnumInvalidAuthorization  Egcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Egcer401ApplicationJSONErrorEnum) ToPointer() *Egcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Egcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Egcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Egcer401ApplicationJSONErrorDescriptionEnum string

const (
	Egcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Egcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Egcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Egcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Egcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Egcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Egcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Egcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Egcer401ApplicationJSON - Unauthorized access
type Egcer401ApplicationJSON struct {
	Error            *Egcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egcer400ApplicationJSONErrorEnum string

const (
	Egcer400ApplicationJSONErrorEnumMissingParameter Egcer400ApplicationJSONErrorEnum = "missing_parameter"
	Egcer400ApplicationJSONErrorEnumInvalidParameter Egcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Egcer400ApplicationJSONErrorEnumInvalidFormat    Egcer400ApplicationJSONErrorEnum = "invalid_format"
	Egcer400ApplicationJSONErrorEnumInvalidTxnid     Egcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Egcer400ApplicationJSONErrorEnumInvalidConsentid Egcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Egcer400ApplicationJSONErrorEnum) ToPointer() *Egcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Egcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Egcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Egcer400ApplicationJSONErrorDescriptionEnum string

const (
	Egcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Egcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Egcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Egcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Egcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Egcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Egcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Egcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Egcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Egcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Egcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Egcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Egcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Egcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Egcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Egcer400ApplicationJSON - Bad request
type Egcer400ApplicationJSON struct {
	Error            *Egcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type EgcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Egcer400ApplicationJSONObject *Egcer400ApplicationJSON
	// Unauthorized access
	Egcer401ApplicationJSONObject *Egcer401ApplicationJSON
	// No record found
	Egcer404ApplicationJSONObject *Egcer404ApplicationJSON
	// Internal server error
	Egcer500ApplicationJSONObject *Egcer500ApplicationJSON
	// Bad gateway
	Egcer502ApplicationJSONObject *Egcer502ApplicationJSON
	// Service unavailable
	Egcer503ApplicationJSONObject *Egcer503ApplicationJSON
	// Gateway timeout
	Egcer504ApplicationJSONObject *Egcer504ApplicationJSON
}
