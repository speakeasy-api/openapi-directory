"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import interpretation as shared_interpretation
from ..shared import message as shared_message
from ..shared import recognizedbotmember as shared_recognizedbotmember
from ..shared import sessionstate as shared_sessionstate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecognizeTextResponse:
    r"""Success"""
    
    interpretations: Optional[list[shared_interpretation.Interpretation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interpretations'), 'exclude': lambda f: f is None }})  
    messages: Optional[list[shared_message.Message]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})  
    recognized_bot_member: Optional[shared_recognizedbotmember.RecognizedBotMember] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedBotMember'), 'exclude': lambda f: f is None }})  
    request_attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestAttributes'), 'exclude': lambda f: f is None }})  
    session_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionId'), 'exclude': lambda f: f is None }})  
    session_state: Optional[shared_sessionstate.SessionState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionState'), 'exclude': lambda f: f is None }})  
    