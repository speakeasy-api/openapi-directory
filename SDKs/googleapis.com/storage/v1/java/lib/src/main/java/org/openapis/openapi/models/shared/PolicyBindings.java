/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PolicyBindings {
    /**
     * Represents an expression text. Example: title: "User account presence" description: "Determines whether the request has a user account" expression: "size(request.user) &gt; 0"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition")
    public Expr condition;

    public PolicyBindings withCondition(Expr condition) {
        this.condition = condition;
        return this;
    }
    
    /**
     * A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:  
     * - allUsers \u2014 A special identifier that represents anyone on the internet; with or without a Google account.  
     * - allAuthenticatedUsers \u2014 A special identifier that represents anyone who is authenticated with a Google account or a service account.  
     * - user:emailid \u2014 An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.  
     * - serviceAccount:emailid \u2014 An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .  
     * - group:emailid \u2014 An email address that represents a Google group. For example, group:admins@example.com.  
     * - domain:domain \u2014 A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.  
     * - projectOwner:projectid \u2014 Owners of the given project. For example, projectOwner:my-example-project  
     * - projectEditor:projectid \u2014 Editors of the given project. For example, projectEditor:my-example-project  
     * - projectViewer:projectid \u2014 Viewers of the given project. For example, projectViewer:my-example-project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members")
    public String[] members;

    public PolicyBindings withMembers(String[] members) {
        this.members = members;
        return this;
    }
    
    /**
     * The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole.
     * The new IAM roles are:  
     * - roles/storage.admin \u2014 Full control of Google Cloud Storage resources.  
     * - roles/storage.objectViewer \u2014 Read-Only access to Google Cloud Storage objects.  
     * - roles/storage.objectCreator \u2014 Access to create objects in Google Cloud Storage.  
     * - roles/storage.objectAdmin \u2014 Full control of Google Cloud Storage objects.   The legacy IAM roles are:  
     * - roles/storage.legacyObjectReader \u2014 Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.  
     * - roles/storage.legacyObjectOwner \u2014 Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.  
     * - roles/storage.legacyBucketReader \u2014 Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.  
     * - roles/storage.legacyBucketWriter \u2014 Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.  
     * - roles/storage.legacyBucketOwner \u2014 Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public String role;

    public PolicyBindings withRole(String role) {
        this.role = role;
        return this;
    }
    
    public PolicyBindings(){}
}
