// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BookingStatusItemLevelEnum - **level** of *this* item's booking status
type BookingStatusItemLevelEnum string

const (
	BookingStatusItemLevelEnumItem      BookingStatusItemLevelEnum = "ITEM"
	BookingStatusItemLevelEnumItinerary BookingStatusItemLevelEnum = "ITINERARY"
)

func (e BookingStatusItemLevelEnum) ToPointer() *BookingStatusItemLevelEnum {
	return &e
}

func (e *BookingStatusItemLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ITEM":
		fallthrough
	case "ITINERARY":
		*e = BookingStatusItemLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BookingStatusItemLevelEnum: %v", v)
	}
}

// BookingStatusItemTypeEnum - **specifier** of *this* item's booking status
// * See: [bookingStatus fields and meanings](#section/Appendices/bookingStatus-field-values-and-meanings)
type BookingStatusItemTypeEnum string

const (
	BookingStatusItemTypeEnumWaiting      BookingStatusItemTypeEnum = "WAITING"
	BookingStatusItemTypeEnumConfirmed    BookingStatusItemTypeEnum = "CONFIRMED"
	BookingStatusItemTypeEnumUnavailable  BookingStatusItemTypeEnum = "UNAVAILABLE"
	BookingStatusItemTypeEnumPending      BookingStatusItemTypeEnum = "PENDING"
	BookingStatusItemTypeEnumFailed       BookingStatusItemTypeEnum = "FAILED"
	BookingStatusItemTypeEnumCancelled    BookingStatusItemTypeEnum = "CANCELLED"
	BookingStatusItemTypeEnumExpired      BookingStatusItemTypeEnum = "EXPIRED"
	BookingStatusItemTypeEnumAmended      BookingStatusItemTypeEnum = "AMENDED"
	BookingStatusItemTypeEnumPendingAmend BookingStatusItemTypeEnum = "PENDING_AMEND"
	BookingStatusItemTypeEnumRejected     BookingStatusItemTypeEnum = "REJECTED"
	BookingStatusItemTypeEnumOnHold       BookingStatusItemTypeEnum = "ON_HOLD"
)

func (e BookingStatusItemTypeEnum) ToPointer() *BookingStatusItemTypeEnum {
	return &e
}

func (e *BookingStatusItemTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WAITING":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "UNAVAILABLE":
		fallthrough
	case "PENDING":
		fallthrough
	case "FAILED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "EXPIRED":
		fallthrough
	case "AMENDED":
		fallthrough
	case "PENDING_AMEND":
		fallthrough
	case "REJECTED":
		fallthrough
	case "ON_HOLD":
		*e = BookingStatusItemTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BookingStatusItemTypeEnum: %v", v)
	}
}

// BookingStatusItem - **object** containing item booking status information
type BookingStatusItem struct {
	// **indicator**: `true` if *this* item's booking has been amended
	Amended *bool `json:"amended,omitempty"`
	// **indicator**: `true` if *this* item's booking has been cancelled
	Cancelled *bool `json:"cancelled,omitempty"`
	// **indicator**: `true` if *this* item's booking is confirmed
	Confirmed *bool `json:"confirmed,omitempty"`
	// **indicator**: `true` if *this* item's booking has failed
	Failed *bool `json:"failed,omitempty"`
	// **level** of *this* item's booking status
	Level *BookingStatusItemLevelEnum `json:"level,omitempty"`
	// **indicator**: `true` if *this* item's booking is pending
	Pending *bool `json:"pending,omitempty"`
	// **numeric identifier** of *this* item's booking status
	Status *int64 `json:"status,omitempty"`
	// **natural-language description** of *this* item's booking status; e.g., 'Waiting to be booked'
	Text *string `json:"text,omitempty"`
	// **specifier** of *this* item's booking status
	// * See: [bookingStatus fields and meanings](#section/Appendices/bookingStatus-field-values-and-meanings)
	//
	Type *BookingStatusItemTypeEnum `json:"type,omitempty"`
}
