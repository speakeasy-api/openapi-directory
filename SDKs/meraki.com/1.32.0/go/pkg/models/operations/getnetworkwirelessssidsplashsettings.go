// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkWirelessSsidSplashSettingsRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
	Number    string `pathParam:"style=simple,explode=false,name=number"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess - Details associated with a free access plan with limits
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess struct {
	// How long a device can use a network for free.
	DurationInMinutes *int64 `json:"durationInMinutes,omitempty"`
	// Whether or not free access is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling - Details associated with billing splash
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling struct {
	// Details associated with a free access plan with limits
	FreeAccess *GetNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess `json:"freeAccess,omitempty"`
	// Whether or not billing uses the fast login prepaid access option.
	PrepaidAccessFastLoginEnabled *bool `json:"prepaidAccessFastLoginEnabled,omitempty"`
	// The email address that reeceives replies from clients
	ReplyToEmailAddress *string `json:"replyToEmailAddress,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship - Details associated with guest sponsored splash
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship struct {
	// Duration in minutes of sponsored guest authorization.
	DurationInMinutes *int64 `json:"durationInMinutes,omitempty"`
	// Whether or not guests can specify how much time they are requesting.
	GuestCanRequestTimeframe *bool `json:"guestCanRequestTimeframe,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum - How created user accounts should be authorized.
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum string

const (
	GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnumAdmin     GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum = "admin"
	GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnumAuto      GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum = "auto"
	GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnumSelfEmail GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum = "self_email"
)

func (e GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum) ToPointer() *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum {
	return &e
}

func (e *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "auto":
		fallthrough
	case "self_email":
		*e = GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum: %v", v)
	}
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration - Self-registration for splash with Meraki authentication.
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration struct {
	// How created user accounts should be authorized.
	AuthorizationType *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum `json:"authorizationType,omitempty"`
	// Whether or not to allow users to create their own account on the network.
	Enabled *bool `json:"enabled,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum - The strength of the enforcement of selected system types.
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum string

const (
	GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnumClickThrough GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum = "click-through"
	GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnumFocused      GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum = "focused"
	GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnumStrict       GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum = "strict"
)

func (e GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum) ToPointer() *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum {
	return &e
}

func (e *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click-through":
		fallthrough
	case "focused":
		fallthrough
	case "strict":
		*e = GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum: %v", v)
	}
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork - Systems Manager network targeted for sentry enrollment.
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork struct {
	// The network ID of the Systems Manager network.
	ID *string `json:"id,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment - Systems Manager sentry enrollment splash settings.
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment struct {
	// The system types that the Sentry enforces.
	EnforcedSystems []string `json:"enforcedSystems,omitempty"`
	// The strength of the enforcement of selected system types.
	Strength *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum `json:"strength,omitempty"`
	// Systems Manager network targeted for sentry enrollment.
	SystemsManagerNetwork *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork `json:"systemsManagerNetwork,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage - The image used in the splash page.
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage struct {
	// The extension of the image file.
	Extension *string `json:"extension,omitempty"`
	// The MD5 value of the image file.
	Md5 *string `json:"md5,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo - The logo used in the splash page.
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo struct {
	// The extension of the logo file.
	Extension *string `json:"extension,omitempty"`
	// The MD5 value of the logo file.
	Md5 *string `json:"md5,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront - The prepaid front image used in the splash page.
type GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront struct {
	// The extension of the prepaid front image file.
	Extension *string `json:"extension,omitempty"`
	// The MD5 value of the prepaid front image file.
	Md5 *string `json:"md5,omitempty"`
}

// GetNetworkWirelessSsidSplashSettings200ApplicationJSON - Successful operation
type GetNetworkWirelessSsidSplashSettings200ApplicationJSON struct {
	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins *bool `json:"allowSimultaneousLogins,omitempty"`
	// Details associated with billing splash
	Billing *GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling `json:"billing,omitempty"`
	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn *bool `json:"blockAllTrafficBeforeSignOn,omitempty"`
	// How login attempts should be handled when the controller is unreachable.
	ControllerDisconnectionBehavior *string `json:"controllerDisconnectionBehavior,omitempty"`
	// Details associated with guest sponsored splash
	GuestSponsorship *GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship `json:"guestSponsorship,omitempty"`
	// The custom redirect URL where the users will go after the splash page.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// Self-registration for splash with Meraki authentication.
	SelfRegistration *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration `json:"selfRegistration,omitempty"`
	// Systems Manager sentry enrollment splash settings.
	SentryEnrollment *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment `json:"sentryEnrollment,omitempty"`
	// The image used in the splash page.
	SplashImage *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage `json:"splashImage,omitempty"`
	// The logo used in the splash page.
	SplashLogo *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo `json:"splashLogo,omitempty"`
	// The type of splash page for this SSID
	SplashPage *string `json:"splashPage,omitempty"`
	// The prepaid front image used in the splash page.
	SplashPrepaidFront *GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront `json:"splashPrepaidFront,omitempty"`
	// Splash timeout in minutes.
	SplashTimeout *int64 `json:"splashTimeout,omitempty"`
	// The custom splash URL of the click-through splash page.
	SplashURL *string `json:"splashUrl,omitempty"`
	// SSID number
	SsidNumber *int64 `json:"ssidNumber,omitempty"`
	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
	UseRedirectURL *bool `json:"useRedirectUrl,omitempty"`
	// Boolean indicating whether the users will be redirected to the custom splash url
	UseSplashURL *bool `json:"useSplashUrl,omitempty"`
	// The welcome message for the users on the splash page.
	WelcomeMessage *string `json:"welcomeMessage,omitempty"`
}

type GetNetworkWirelessSsidSplashSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkWirelessSsidSplashSettings200ApplicationJSONObject *GetNetworkWirelessSsidSplashSettings200ApplicationJSON
}
