/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class NewMessage {
    /**
     * **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
     */
    @SpeakeasyMetadata("form:name=account-ref")
    public String accountRef;
    public NewMessage withAccountRef(String accountRef) {
        this.accountRef = accountRef;
        return this;
    }
    
    /**
     * Your API key
     */
    @SpeakeasyMetadata("form:name=api_key")
    public String apiKey;
    public NewMessage withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * Your API secret. Required unless `sig` is provided
     */
    @SpeakeasyMetadata("form:name=api_secret")
    public String apiSecret;
    public NewMessage withApiSecret(String apiSecret) {
        this.apiSecret = apiSecret;
        return this;
    }
    
    /**
     * **Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.
     */
    @SpeakeasyMetadata("form:name=body")
    public String body;
    public NewMessage withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters.
     */
    @SpeakeasyMetadata("form:name=callback")
    public String callback;
    public NewMessage withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * **Advanced**: You can optionally include your own reference of up to 100 characters.
     */
    @SpeakeasyMetadata("form:name=client-ref")
    public String clientRef;
    public NewMessage withClientRef(String clientRef) {
        this.clientRef = clientRef;
        return this;
    }
    
    /**
     * **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
     */
    @SpeakeasyMetadata("form:name=content-id")
    public String contentId;
    public NewMessage withContentId(String contentId) {
        this.contentId = contentId;
        return this;
    }
    
    /**
     * **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
     */
    @SpeakeasyMetadata("form:name=entity-id")
    public String entityId;
    public NewMessage withEntityId(String entityId) {
        this.entityId = entityId;
        return this;
    }
    
    /**
     * The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format.
     */
    @SpeakeasyMetadata("form:name=from")
    public String from;
    public NewMessage withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * **Advanced**: The Data Coding Scheme value of the message
     */
    @SpeakeasyMetadata("form:name=message-class")
    public NewMessageMessageClassEnum messageClass;
    public NewMessage withMessageClass(NewMessageMessageClassEnum messageClass) {
        this.messageClass = messageClass;
        return this;
    }
    
    /**
     * **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.
     */
    @SpeakeasyMetadata("form:name=protocol-id")
    public Long protocolId;
    public NewMessage withProtocolId(Long protocolId) {
        this.protocolId = protocolId;
        return this;
    }
    
    /**
     * The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.
     */
    @SpeakeasyMetadata("form:name=sig")
    public String sig;
    public NewMessage withSig(String sig) {
        this.sig = sig;
        return this;
    }
    
    /**
     * **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt).
     */
    @SpeakeasyMetadata("form:name=status-report-req")
    public Boolean statusReportReq;
    public NewMessage withStatusReportReq(Boolean statusReportReq) {
        this.statusReportReq = statusReportReq;
        return this;
    }
    
    /**
     * The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.
     */
    @SpeakeasyMetadata("form:name=text")
    public String text;
    public NewMessage withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * The number that the message should be sent to. Numbers are specified in E.164 format.
     */
    @SpeakeasyMetadata("form:name=to")
    public String to;
    public NewMessage withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.\u00a7\u00a7 By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.
     */
    @SpeakeasyMetadata("form:name=ttl")
    public Long ttl;
    public NewMessage withTtl(Long ttl) {
        this.ttl = ttl;
        return this;
    }
    
    /**
     * **Advanced**: The format of the message body
     */
    @SpeakeasyMetadata("form:name=type")
    public NewMessageTypeEnum type;
    public NewMessage withType(NewMessageTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.
     */
    @SpeakeasyMetadata("form:name=udh")
    public String udh;
    public NewMessage withUdh(String udh) {
        this.udh = udh;
        return this;
    }
    
}
