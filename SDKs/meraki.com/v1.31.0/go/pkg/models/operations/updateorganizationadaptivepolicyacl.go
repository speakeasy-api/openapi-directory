// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum - IP version of adpative policy ACL. One of: 'any', 'ipv4' or 'ipv6'
type UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum string

const (
	UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnumAny  UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum = "any"
	UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnumIpv4 UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum = "ipv4"
	UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnumIpv6 UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum = "ipv6"
)

func (e *UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum: %s", s)
	}
}

// UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum - 'allow' or 'deny' traffic specified by this rule.
type UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum string

const (
	UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnumAllow UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum = "allow"
	UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnumDeny  UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum = "deny"
)

func (e *UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allow":
		fallthrough
	case "deny":
		*e = UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum: %s", s)
	}
}

// UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum - The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any').
type UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum string

const (
	UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnumAny  UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = "any"
	UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnumIcmp UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = "icmp"
	UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnumTCP  UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = "tcp"
	UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnumUDP  UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = "udp"
)

func (e *UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "icmp":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum: %s", s)
	}
}

type UpdateOrganizationAdaptivePolicyACLRequestBodyRules struct {
	// Destination port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.
	DstPort *string `json:"dstPort,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule.
	Policy UpdateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum `json:"policy"`
	// The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any').
	Protocol UpdateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum `json:"protocol"`
	// Source port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.
	SrcPort *string `json:"srcPort,omitempty"`
}

type UpdateOrganizationAdaptivePolicyACLRequestBody struct {
	// Description of the adaptive policy ACL
	Description *string `json:"description,omitempty"`
	// IP version of adpative policy ACL. One of: 'any', 'ipv4' or 'ipv6'
	IPVersion *UpdateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum `json:"ipVersion,omitempty"`
	// Name of the adaptive policy ACL
	Name *string `json:"name,omitempty"`
	// An ordered array of the adaptive policy ACL rules. An empty array will clear the rules.
	Rules []UpdateOrganizationAdaptivePolicyACLRequestBodyRules `json:"rules,omitempty"`
}

type UpdateOrganizationAdaptivePolicyACLRequest struct {
	RequestBody    *UpdateOrganizationAdaptivePolicyACLRequestBody `request:"mediaType=application/json"`
	ACLID          string                                          `pathParam:"style=simple,explode=false,name=aclId"`
	OrganizationID string                                          `pathParam:"style=simple,explode=false,name=organizationId"`
}

type UpdateOrganizationAdaptivePolicyACLResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateOrganizationAdaptivePolicyACL200ApplicationJSONObject map[string]interface{}
}
