// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ListBlockedListSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ListBlockedListRequest struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The total number of records returned from a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
}

// ListBlockedList200ApplicationXMLBlockedListBlockTypeEnum - Block type.<br>
// `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
// `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
type ListBlockedList200ApplicationXMLBlockedListBlockTypeEnum string

const (
	ListBlockedList200ApplicationXMLBlockedListBlockTypeEnumInbound  ListBlockedList200ApplicationXMLBlockedListBlockTypeEnum = "inbound"
	ListBlockedList200ApplicationXMLBlockedListBlockTypeEnumOutbound ListBlockedList200ApplicationXMLBlockedListBlockTypeEnum = "outbound"
)

func (e *ListBlockedList200ApplicationXMLBlockedListBlockTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = ListBlockedList200ApplicationXMLBlockedListBlockTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBlockedList200ApplicationXMLBlockedListBlockTypeEnum: %s", s)
	}
}

// ListBlockedList200ApplicationXMLBlockedListMatchTypeEnum - Indicates the match type for the blocked list. The values can be one of the following:<br>
// `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
// `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
type ListBlockedList200ApplicationXMLBlockedListMatchTypeEnum string

const (
	ListBlockedList200ApplicationXMLBlockedListMatchTypeEnumPhoneNumber ListBlockedList200ApplicationXMLBlockedListMatchTypeEnum = "phoneNumber"
	ListBlockedList200ApplicationXMLBlockedListMatchTypeEnumPrefix      ListBlockedList200ApplicationXMLBlockedListMatchTypeEnum = "prefix"
)

func (e *ListBlockedList200ApplicationXMLBlockedListMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "phoneNumber":
		fallthrough
	case "prefix":
		*e = ListBlockedList200ApplicationXMLBlockedListMatchTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBlockedList200ApplicationXMLBlockedListMatchTypeEnum: %s", s)
	}
}

// ListBlockedList200ApplicationXMLBlockedListStatusEnum - Indicates whether the blocking is active or inactive. <br>
// `active`: The blocked list is active.<br>
// `inactive`: The blocked list is inactive.
type ListBlockedList200ApplicationXMLBlockedListStatusEnum string

const (
	ListBlockedList200ApplicationXMLBlockedListStatusEnumActive   ListBlockedList200ApplicationXMLBlockedListStatusEnum = "active"
	ListBlockedList200ApplicationXMLBlockedListStatusEnumInactive ListBlockedList200ApplicationXMLBlockedListStatusEnum = "inactive"
)

func (e *ListBlockedList200ApplicationXMLBlockedListStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = ListBlockedList200ApplicationXMLBlockedListStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBlockedList200ApplicationXMLBlockedListStatusEnum: %s", s)
	}
}

type ListBlockedList200ApplicationXMLBlockedList struct {
	// Block type.<br>
	// `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
	// `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
	BlockType *ListBlockedList200ApplicationXMLBlockedListBlockTypeEnum
	// Provide a comment to help you identify the blocked number or prefix.
	Comment *string
	// Unique identifier of the blocked list.
	ID *string
	// Indicates the match type for the blocked list. The values can be one of the following:<br>
	// `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
	// `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
	MatchType *ListBlockedList200ApplicationXMLBlockedListMatchTypeEnum
	// The phone number to be blocked if you passed "phoneNumber" as the value for the `match_type` field. If you passed "prefix" as the value for the `match_type` field, provide the prefix of the phone number here including the country code. For example, entering 1905 blocks numbers with country code 1 and area code 905.
	PhoneNumber *string
	// Indicates whether the blocking is active or inactive. <br>
	// `active`: The blocked list is active.<br>
	// `inactive`: The blocked list is inactive.
	Status *ListBlockedList200ApplicationXMLBlockedListStatusEnum
}

// ListBlockedList200ApplicationXML - **HTTP Status Code:** `200` **OK**<br>
// Blocked list returned successfully.
type ListBlockedList200ApplicationXML struct {
	BlockedList []ListBlockedList200ApplicationXMLBlockedList
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The total number of records returned from a single API call.
	PageSize *int64
	// The total number of records found for this query.
	TotalRecords *int64
}

// ListBlockedList200ApplicationJSONBlockedListBlockTypeEnum - Block type.<br>
// `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
// `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
type ListBlockedList200ApplicationJSONBlockedListBlockTypeEnum string

const (
	ListBlockedList200ApplicationJSONBlockedListBlockTypeEnumInbound  ListBlockedList200ApplicationJSONBlockedListBlockTypeEnum = "inbound"
	ListBlockedList200ApplicationJSONBlockedListBlockTypeEnumOutbound ListBlockedList200ApplicationJSONBlockedListBlockTypeEnum = "outbound"
)

func (e *ListBlockedList200ApplicationJSONBlockedListBlockTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = ListBlockedList200ApplicationJSONBlockedListBlockTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBlockedList200ApplicationJSONBlockedListBlockTypeEnum: %s", s)
	}
}

// ListBlockedList200ApplicationJSONBlockedListMatchTypeEnum - Indicates the match type for the blocked list. The values can be one of the following:<br>
// `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
// `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
type ListBlockedList200ApplicationJSONBlockedListMatchTypeEnum string

const (
	ListBlockedList200ApplicationJSONBlockedListMatchTypeEnumPhoneNumber ListBlockedList200ApplicationJSONBlockedListMatchTypeEnum = "phoneNumber"
	ListBlockedList200ApplicationJSONBlockedListMatchTypeEnumPrefix      ListBlockedList200ApplicationJSONBlockedListMatchTypeEnum = "prefix"
)

func (e *ListBlockedList200ApplicationJSONBlockedListMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "phoneNumber":
		fallthrough
	case "prefix":
		*e = ListBlockedList200ApplicationJSONBlockedListMatchTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBlockedList200ApplicationJSONBlockedListMatchTypeEnum: %s", s)
	}
}

// ListBlockedList200ApplicationJSONBlockedListStatusEnum - Indicates whether the blocking is active or inactive. <br>
// `active`: The blocked list is active.<br>
// `inactive`: The blocked list is inactive.
type ListBlockedList200ApplicationJSONBlockedListStatusEnum string

const (
	ListBlockedList200ApplicationJSONBlockedListStatusEnumActive   ListBlockedList200ApplicationJSONBlockedListStatusEnum = "active"
	ListBlockedList200ApplicationJSONBlockedListStatusEnumInactive ListBlockedList200ApplicationJSONBlockedListStatusEnum = "inactive"
)

func (e *ListBlockedList200ApplicationJSONBlockedListStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = ListBlockedList200ApplicationJSONBlockedListStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBlockedList200ApplicationJSONBlockedListStatusEnum: %s", s)
	}
}

type ListBlockedList200ApplicationJSONBlockedList struct {
	// Block type.<br>
	// `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
	// `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
	BlockType *ListBlockedList200ApplicationJSONBlockedListBlockTypeEnum `json:"block_type,omitempty"`
	// Provide a comment to help you identify the blocked number or prefix.
	Comment *string `json:"comment,omitempty"`
	// Unique identifier of the blocked list.
	ID *string `json:"id,omitempty"`
	// Indicates the match type for the blocked list. The values can be one of the following:<br>
	// `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
	// `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
	MatchType *ListBlockedList200ApplicationJSONBlockedListMatchTypeEnum `json:"match_type,omitempty"`
	// The phone number to be blocked if you passed "phoneNumber" as the value for the `match_type` field. If you passed "prefix" as the value for the `match_type` field, provide the prefix of the phone number here including the country code. For example, entering 1905 blocks numbers with country code 1 and area code 905.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Indicates whether the blocking is active or inactive. <br>
	// `active`: The blocked list is active.<br>
	// `inactive`: The blocked list is inactive.
	Status *ListBlockedList200ApplicationJSONBlockedListStatusEnum `json:"status,omitempty"`
}

// ListBlockedList200ApplicationJSON - **HTTP Status Code:** `200` **OK**<br>
// Blocked list returned successfully.
type ListBlockedList200ApplicationJSON struct {
	BlockedList []ListBlockedList200ApplicationJSONBlockedList `json:"blocked_list,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The total number of records returned from a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// The total number of records found for this query.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type ListBlockedListResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// Blocked list returned successfully.
	ListBlockedList200ApplicationJSONObject *ListBlockedList200ApplicationJSON
}
