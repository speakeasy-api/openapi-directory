"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datareplicationinfo as shared_datareplicationinfo
from ..shared import lastlaunchresult_enum as shared_lastlaunchresult_enum
from ..shared import lifecycle as shared_lifecycle
from ..shared import replicationdirection_enum as shared_replicationdirection_enum
from ..shared import sourcecloudproperties as shared_sourcecloudproperties
from ..shared import sourceproperties as shared_sourceproperties
from ..shared import stagingarea as shared_stagingarea
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceServer:
    r"""Success"""
    
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    data_replication_info: Optional[shared_datareplicationinfo.DataReplicationInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataReplicationInfo'), 'exclude': lambda f: f is None }})  
    last_launch_result: Optional[shared_lastlaunchresult_enum.LastLaunchResultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastLaunchResult'), 'exclude': lambda f: f is None }})  
    life_cycle: Optional[shared_lifecycle.LifeCycle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifeCycle'), 'exclude': lambda f: f is None }})  
    recovery_instance_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recoveryInstanceId'), 'exclude': lambda f: f is None }})  
    replication_direction: Optional[shared_replicationdirection_enum.ReplicationDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationDirection'), 'exclude': lambda f: f is None }})  
    reversed_direction_source_server_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reversedDirectionSourceServerArn'), 'exclude': lambda f: f is None }})  
    source_cloud_properties: Optional[shared_sourcecloudproperties.SourceCloudProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCloudProperties'), 'exclude': lambda f: f is None }})  
    source_properties: Optional[shared_sourceproperties.SourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceProperties'), 'exclude': lambda f: f is None }})  
    source_server_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceServerID'), 'exclude': lambda f: f is None }})  
    staging_area: Optional[shared_stagingarea.StagingArea] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stagingArea'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    