// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetCommentsForPullRequestQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// GetCommentsForPullRequestXAmzTargetEnum
type GetCommentsForPullRequestXAmzTargetEnum string

const (
	GetCommentsForPullRequestXAmzTargetEnumCodeCommit20150413GetCommentsForPullRequest GetCommentsForPullRequestXAmzTargetEnum = "CodeCommit_20150413.GetCommentsForPullRequest"
)

func (e *GetCommentsForPullRequestXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.GetCommentsForPullRequest":
		*e = GetCommentsForPullRequestXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommentsForPullRequestXAmzTargetEnum: %s", s)
	}
}

type GetCommentsForPullRequestHeaders struct {
	XAmzAlgorithm     *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetCommentsForPullRequestXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetCommentsForPullRequestRequest struct {
	QueryParams GetCommentsForPullRequestQueryParams
	Headers     GetCommentsForPullRequestHeaders
	Request     shared.GetCommentsForPullRequestInput `request:"mediaType=application/json"`
}

type GetCommentsForPullRequestResponse struct {
	// CommitDoesNotExistException
	CommitDoesNotExistException interface{}
	// CommitIdRequiredException
	CommitIDRequiredException interface{}
	ContentType               string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// Success
	GetCommentsForPullRequestOutput *shared.GetCommentsForPullRequestOutput
	// InvalidCommitIdException
	InvalidCommitIDException interface{}
	// InvalidContinuationTokenException
	InvalidContinuationTokenException interface{}
	// InvalidMaxResultsException
	InvalidMaxResultsException interface{}
	// InvalidPullRequestIdException
	InvalidPullRequestIDException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// PullRequestDoesNotExistException
	PullRequestDoesNotExistException interface{}
	// PullRequestIdRequiredException
	PullRequestIDRequiredException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	// RepositoryNotAssociatedWithPullRequestException
	RepositoryNotAssociatedWithPullRequestException interface{}
	StatusCode                                      int
	RawResponse                                     *http.Response
}
