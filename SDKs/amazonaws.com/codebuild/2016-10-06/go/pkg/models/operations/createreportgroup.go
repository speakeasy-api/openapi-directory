// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateReportGroupXAmzTargetEnum
type CreateReportGroupXAmzTargetEnum string

const (
	CreateReportGroupXAmzTargetEnumCodeBuild20161006CreateReportGroup CreateReportGroupXAmzTargetEnum = "CodeBuild_20161006.CreateReportGroup"
)

func (e *CreateReportGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeBuild_20161006.CreateReportGroup":
		*e = CreateReportGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateReportGroupXAmzTargetEnum: %s", s)
	}
}

type CreateReportGroupRequest struct {
	CreateReportGroupInput shared.CreateReportGroupInput   `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             CreateReportGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateReportGroupResponse struct {
	// AccountLimitExceededException
	AccountLimitExceededException interface{}
	ContentType                   string
	// Success
	CreateReportGroupOutput *shared.CreateReportGroupOutput
	// InvalidInputException
	InvalidInputException interface{}
	StatusCode            int
	RawResponse           *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
