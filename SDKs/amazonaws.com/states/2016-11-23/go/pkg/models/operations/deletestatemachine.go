// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteStateMachineXAmzTargetEnum
type DeleteStateMachineXAmzTargetEnum string

const (
	DeleteStateMachineXAmzTargetEnumAwsStepFunctionsDeleteStateMachine DeleteStateMachineXAmzTargetEnum = "AWSStepFunctions.DeleteStateMachine"
)

func (e *DeleteStateMachineXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSStepFunctions.DeleteStateMachine":
		*e = DeleteStateMachineXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteStateMachineXAmzTargetEnum: %s", s)
	}
}

type DeleteStateMachineRequest struct {
	DeleteStateMachineInput shared.DeleteStateMachineInput   `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              DeleteStateMachineXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteStateMachineResponse struct {
	ContentType string
	// Success
	DeleteStateMachineOutput map[string]interface{}
	// InvalidArn
	InvalidArn  interface{}
	StatusCode  int
	RawResponse *http.Response
	// ValidationException
	ValidationException interface{}
}
