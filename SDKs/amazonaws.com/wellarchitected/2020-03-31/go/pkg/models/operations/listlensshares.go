// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListLensSharesStatusEnum - The status of a workload share.
type ListLensSharesStatusEnum string

const (
	ListLensSharesStatusEnumAccepted    ListLensSharesStatusEnum = "ACCEPTED"
	ListLensSharesStatusEnumRejected    ListLensSharesStatusEnum = "REJECTED"
	ListLensSharesStatusEnumPending     ListLensSharesStatusEnum = "PENDING"
	ListLensSharesStatusEnumRevoked     ListLensSharesStatusEnum = "REVOKED"
	ListLensSharesStatusEnumExpired     ListLensSharesStatusEnum = "EXPIRED"
	ListLensSharesStatusEnumAssociating ListLensSharesStatusEnum = "ASSOCIATING"
	ListLensSharesStatusEnumAssociated  ListLensSharesStatusEnum = "ASSOCIATED"
	ListLensSharesStatusEnumFailed      ListLensSharesStatusEnum = "FAILED"
)

func (e *ListLensSharesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCEPTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "PENDING":
		fallthrough
	case "REVOKED":
		fallthrough
	case "EXPIRED":
		fallthrough
	case "ASSOCIATING":
		fallthrough
	case "ASSOCIATED":
		fallthrough
	case "FAILED":
		*e = ListLensSharesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLensSharesStatusEnum: %s", s)
	}
}

type ListLensSharesRequest struct {
	LensAlias string `pathParam:"style=simple,explode=false,name=LensAlias"`
	// The maximum number of results to return for this request.
	MaxResults *int64  `queryParam:"style=form,explode=true,name=MaxResults"`
	NextToken  *string `queryParam:"style=form,explode=true,name=NextToken"`
	// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the lens is shared.
	SharedWithPrefix *string `queryParam:"style=form,explode=true,name=SharedWithPrefix"`
	// The status of a workload share.
	Status            *ListLensSharesStatusEnum `queryParam:"style=form,explode=true,name=Status"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListLensSharesResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListLensSharesOutput *shared.ListLensSharesOutput
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
