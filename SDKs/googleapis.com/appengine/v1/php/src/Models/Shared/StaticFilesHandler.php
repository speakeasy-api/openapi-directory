<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * StaticFilesHandler - Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class StaticFilesHandler
{
    /**
     * Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
     * 
     * @var ?bool $applicationReadable
     */
	#[\JMS\Serializer\Annotation\SerializedName('applicationReadable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $applicationReadable = null;
    
    /**
     * Time a static file served by this handler should be cached by web proxies and browsers.
     * 
     * @var ?string $expiration
     */
	#[\JMS\Serializer\Annotation\SerializedName('expiration')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $expiration = null;
    
    /**
     * HTTP headers to use for all responses from these URLs.
     * 
     * @var ?array<string, string> $httpHeaders
     */
	#[\JMS\Serializer\Annotation\SerializedName('httpHeaders')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $httpHeaders = null;
    
    /**
     * MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
     * 
     * @var ?string $mimeType
     */
	#[\JMS\Serializer\Annotation\SerializedName('mimeType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $mimeType = null;
    
    /**
     * Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
     * 
     * @var ?string $path
     */
	#[\JMS\Serializer\Annotation\SerializedName('path')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $path = null;
    
    /**
     * Whether this handler should match the request if the file referenced by the handler does not exist.
     * 
     * @var ?bool $requireMatchingFile
     */
	#[\JMS\Serializer\Annotation\SerializedName('requireMatchingFile')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requireMatchingFile = null;
    
    /**
     * Regular expression that matches the file paths for all files that should be referenced by this handler.
     * 
     * @var ?string $uploadPathRegex
     */
	#[\JMS\Serializer\Annotation\SerializedName('uploadPathRegex')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uploadPathRegex = null;
    
	public function __construct()
	{
		$this->applicationReadable = null;
		$this->expiration = null;
		$this->httpHeaders = null;
		$this->mimeType = null;
		$this->path = null;
		$this->requireMatchingFile = null;
		$this->uploadPathRegex = null;
	}
}
