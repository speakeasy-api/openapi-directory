<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleAnalyticsAdminV1alphaMatchingCondition - Defines a condition for when an Event Edit or Event Creation rule applies to an event.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleAnalyticsAdminV1alphaMatchingCondition
{
    /**
     * Required. The type of comparison to be applied to the value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaMatchingConditionComparisonTypeEnum $comparisonType
     */
	#[\JMS\Serializer\Annotation\SerializedName('comparisonType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaMatchingConditionComparisonTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleAnalyticsAdminV1alphaMatchingConditionComparisonTypeEnum $comparisonType = null;
    
    /**
     * Required. The name of the field that is compared against for the condition. If 'event_name' is specified this condition will apply to the name of the event. Otherwise the condition will apply to a parameter with the specified name. This value cannot contain spaces.
     * 
     * @var ?string $field
     */
	#[\JMS\Serializer\Annotation\SerializedName('field')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $field = null;
    
    /**
     * Whether or not the result of the comparison should be negated. For example, if `negated` is true, then 'equals' comparisons would function as 'not equals'.
     * 
     * @var ?bool $negated
     */
	#[\JMS\Serializer\Annotation\SerializedName('negated')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $negated = null;
    
    /**
     * Required. The value being compared against for this condition. The runtime implementation may perform type coercion of this value to evaluate this condition based on the type of the parameter value.
     * 
     * @var ?string $value
     */
	#[\JMS\Serializer\Annotation\SerializedName('value')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $value = null;
    
	public function __construct()
	{
		$this->comparisonType = null;
		$this->field = null;
		$this->negated = null;
		$this->value = null;
	}
}
