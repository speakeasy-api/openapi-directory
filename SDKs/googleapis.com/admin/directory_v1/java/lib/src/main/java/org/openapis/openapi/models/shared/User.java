/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * User - The Directory API allows you to create and manage your account's users, user aliases, and user Google profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).
 */
public class User {
    /**
     * The list of the user's addresses. The maximum allowed data size for this field is 10KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    public Object addresses;

    public User withAddresses(Object addresses) {
        this.addresses = addresses;
        return this;
    }
    
    /**
     * Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agreedToTerms")
    public Boolean agreedToTerms;

    public User withAgreedToTerms(Boolean agreedToTerms) {
        this.agreedToTerms = agreedToTerms;
        return this;
    }
    
    /**
     * Output only. The list of the user's alias email addresses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aliases")
    public String[] aliases;

    public User withAliases(String[] aliases) {
        this.aliases = aliases;
        return this;
    }
    
    /**
     * Indicates if user is archived.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    public Boolean archived;

    public User withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changePasswordAtNextLogin")
    public Boolean changePasswordAtNextLogin;

    public User withChangePasswordAtNextLogin(Boolean changePasswordAtNextLogin) {
        this.changePasswordAtNextLogin = changePasswordAtNextLogin;
        return this;
    }
    
    /**
     * User's G Suite account creation time. (Read-only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationTime")
    public OffsetDateTime creationTime;

    public User withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customSchemas")
    public java.util.Map<String, java.util.Map<String, Object>> customSchemas;

    public User withCustomSchemas(java.util.Map<String, java.util.Map<String, Object>> customSchemas) {
        this.customSchemas = customSchemas;
        return this;
    }
    
    /**
     * Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    public String customerId;

    public User withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("deletionTime")
    public OffsetDateTime deletionTime;

    public User withDeletionTime(OffsetDateTime deletionTime) {
        this.deletionTime = deletionTime;
        return this;
    }
    
    /**
     * The list of the user's email addresses. The maximum allowed data size for this field is 10KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    public Object emails;

    public User withEmails(Object emails) {
        this.emails = emails;
        return this;
    }
    
    /**
     * Output only. ETag of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public User withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalIds")
    public Object externalIds;

    public User withExternalIds(Object externalIds) {
        this.externalIds = externalIds;
        return this;
    }
    
    /**
     * The user's gender. The maximum allowed data size for this field is 1KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    public Object gender;

    public User withGender(Object gender) {
        this.gender = gender;
        return this;
    }
    
    /**
     * Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hashFunction")
    public String hashFunction;

    public User withHashFunction(String hashFunction) {
        this.hashFunction = hashFunction;
        return this;
    }
    
    /**
     * The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public User withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The list of the user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ims")
    public Object ims;

    public User withIms(Object ims) {
        this.ims = ims;
        return this;
    }
    
    /**
     * Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeInGlobalAddressList")
    public Boolean includeInGlobalAddressList;

    public User withIncludeInGlobalAddressList(Boolean includeInGlobalAddressList) {
        this.includeInGlobalAddressList = includeInGlobalAddressList;
        return this;
    }
    
    /**
     * If `true`, the user's IP address is subject to a deprecated IP address [`allowlist`](https://support.google.com/a/answer/60752) configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipWhitelisted")
    public Boolean ipWhitelisted;

    public User withIpWhitelisted(Boolean ipWhitelisted) {
        this.ipWhitelisted = ipWhitelisted;
        return this;
    }
    
    /**
     * Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAdmin")
    public Boolean isAdmin;

    public User withIsAdmin(Boolean isAdmin) {
        this.isAdmin = isAdmin;
        return this;
    }
    
    /**
     * Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDelegatedAdmin")
    public Boolean isDelegatedAdmin;

    public User withIsDelegatedAdmin(Boolean isDelegatedAdmin) {
        this.isDelegatedAdmin = isDelegatedAdmin;
        return this;
    }
    
    /**
     * Output only. Is 2-step verification enforced (Read-only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEnforcedIn2Sv")
    public Boolean isEnforcedIn2Sv;

    public User withIsEnforcedIn2Sv(Boolean isEnforcedIn2Sv) {
        this.isEnforcedIn2Sv = isEnforcedIn2Sv;
        return this;
    }
    
    /**
     * Output only. Is enrolled in 2-step verification (Read-only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEnrolledIn2Sv")
    public Boolean isEnrolledIn2Sv;

    public User withIsEnrolledIn2Sv(Boolean isEnrolledIn2Sv) {
        this.isEnrolledIn2Sv = isEnrolledIn2Sv;
        return this;
    }
    
    /**
     * Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isMailboxSetup")
    public Boolean isMailboxSetup;

    public User withIsMailboxSetup(Boolean isMailboxSetup) {
        this.isMailboxSetup = isMailboxSetup;
        return this;
    }
    
    /**
     * The list of the user's keywords. The maximum allowed data size for this field is 1KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keywords")
    public Object keywords;

    public User withKeywords(Object keywords) {
        this.keywords = keywords;
        return this;
    }
    
    /**
     * Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public User withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The user's languages. The maximum allowed data size for this field is 1KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languages")
    public Object languages;

    public User withLanguages(Object languages) {
        this.languages = languages;
        return this;
    }
    
    /**
     * User's last login time. (Read-only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastLoginTime")
    public OffsetDateTime lastLoginTime;

    public User withLastLoginTime(OffsetDateTime lastLoginTime) {
        this.lastLoginTime = lastLoginTime;
        return this;
    }
    
    /**
     * The user's locations. The maximum allowed data size for this field is 10KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    public Object locations;

    public User withLocations(Object locations) {
        this.locations = locations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public UserName name;

    public User withName(UserName name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonEditableAliases")
    public String[] nonEditableAliases;

    public User withNonEditableAliases(String[] nonEditableAliases) {
        this.nonEditableAliases = nonEditableAliases;
        return this;
    }
    
    /**
     * Notes for the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public Object notes;

    public User withNotes(Object notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orgUnitPath")
    public String orgUnitPath;

    public User withOrgUnitPath(String orgUnitPath) {
        this.orgUnitPath = orgUnitPath;
        return this;
    }
    
    /**
     * The list of organizations the user belongs to. The maximum allowed data size for this field is 10KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizations")
    public Object organizations;

    public User withOrganizations(Object organizations) {
        this.organizations = organizations;
        return this;
    }
    
    /**
     * User's password
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public User withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * The list of the user's phone numbers. The maximum allowed data size for this field is 1KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phones")
    public Object phones;

    public User withPhones(Object phones) {
        this.phones = phones;
        return this;
    }
    
    /**
     * The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("posixAccounts")
    public Object posixAccounts;

    public User withPosixAccounts(Object posixAccounts) {
        this.posixAccounts = posixAccounts;
        return this;
    }
    
    /**
     * The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryEmail")
    public String primaryEmail;

    public User withPrimaryEmail(String primaryEmail) {
        this.primaryEmail = primaryEmail;
        return this;
    }
    
    /**
     * Recovery email of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recoveryEmail")
    public String recoveryEmail;

    public User withRecoveryEmail(String recoveryEmail) {
        this.recoveryEmail = recoveryEmail;
        return this;
    }
    
    /**
     * Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recoveryPhone")
    public String recoveryPhone;

    public User withRecoveryPhone(String recoveryPhone) {
        this.recoveryPhone = recoveryPhone;
        return this;
    }
    
    /**
     * The list of the user's relationships to other users. The maximum allowed data size for this field is 2KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relations")
    public Object relations;

    public User withRelations(Object relations) {
        this.relations = relations;
        return this;
    }
    
    /**
     * A list of SSH public keys.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sshPublicKeys")
    public Object sshPublicKeys;

    public User withSshPublicKeys(Object sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
        return this;
    }
    
    /**
     * Indicates if user is suspended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspended")
    public Boolean suspended;

    public User withSuspended(Boolean suspended) {
        this.suspended = suspended;
        return this;
    }
    
    /**
     * Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspensionReason")
    public String suspensionReason;

    public User withSuspensionReason(String suspensionReason) {
        this.suspensionReason = suspensionReason;
        return this;
    }
    
    /**
     * Output only. ETag of the user's photo (Read-only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailPhotoEtag")
    public String thumbnailPhotoEtag;

    public User withThumbnailPhotoEtag(String thumbnailPhotoEtag) {
        this.thumbnailPhotoEtag = thumbnailPhotoEtag;
        return this;
    }
    
    /**
     * Output only. The URL of the user's profile photo. The URL might be temporary or private.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailPhotoUrl")
    public String thumbnailPhotoUrl;

    public User withThumbnailPhotoUrl(String thumbnailPhotoUrl) {
        this.thumbnailPhotoUrl = thumbnailPhotoUrl;
        return this;
    }
    
    /**
     * The user's websites. The maximum allowed data size for this field is 2KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    public Object websites;

    public User withWebsites(Object websites) {
        this.websites = websites;
        return this;
    }
    
    public User(){}
}
