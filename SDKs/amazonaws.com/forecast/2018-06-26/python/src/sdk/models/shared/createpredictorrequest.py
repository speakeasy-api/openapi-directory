"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import automloverridestrategy_enum as shared_automloverridestrategy_enum
from ..shared import encryptionconfig as shared_encryptionconfig
from ..shared import evaluationparameters as shared_evaluationparameters
from ..shared import featurizationconfig as shared_featurizationconfig
from ..shared import hyperparametertuningjobconfig as shared_hyperparametertuningjobconfig
from ..shared import inputdataconfig as shared_inputdataconfig
from ..shared import optimizationmetric_enum as shared_optimizationmetric_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePredictorRequest:
    
    featurization_config: shared_featurizationconfig.FeaturizationConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeaturizationConfig') }})  
    forecast_horizon: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastHorizon') }})  
    input_data_config: shared_inputdataconfig.InputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputDataConfig') }})  
    predictor_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PredictorName') }})  
    algorithm_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmArn'), 'exclude': lambda f: f is None }})  
    auto_ml_override_strategy: Optional[shared_automloverridestrategy_enum.AutoMLOverrideStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLOverrideStrategy'), 'exclude': lambda f: f is None }})  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfig'), 'exclude': lambda f: f is None }})  
    evaluation_parameters: Optional[shared_evaluationparameters.EvaluationParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationParameters'), 'exclude': lambda f: f is None }})  
    forecast_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastTypes'), 'exclude': lambda f: f is None }})  
    hpo_config: Optional[shared_hyperparametertuningjobconfig.HyperParameterTuningJobConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HPOConfig'), 'exclude': lambda f: f is None }})  
    optimization_metric: Optional[shared_optimizationmetric_enum.OptimizationMetricEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptimizationMetric'), 'exclude': lambda f: f is None }})  
    perform_auto_ml: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerformAutoML'), 'exclude': lambda f: f is None }})  
    perform_hpo: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerformHPO'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    training_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingParameters'), 'exclude': lambda f: f is None }})  
    