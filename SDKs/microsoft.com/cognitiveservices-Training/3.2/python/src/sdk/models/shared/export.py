"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ExportFlavorEnum(str, Enum):
    r"""Flavor of the export. These are specializations of the export platform.
    Docker platform has valid flavors: Linux, Windows, ARM.
    Tensorflow platform has valid flavors: TensorFlowNormal, TensorFlowLite.
    ONNX platform has valid flavors: ONNX10, ONNX12.
    """
    LINUX = 'Linux'
    WINDOWS = 'Windows'
    ONNX10 = 'ONNX10'
    ONNX12 = 'ONNX12'
    ARM = 'ARM'
    TENSOR_FLOW_NORMAL = 'TensorFlowNormal'
    TENSOR_FLOW_LITE = 'TensorFlowLite'

class ExportPlatformEnum(str, Enum):
    r"""Platform of the export."""
    CORE_ML = 'CoreML'
    TENSOR_FLOW = 'TensorFlow'
    DOCKER_FILE = 'DockerFile'
    ONNX = 'ONNX'
    VAIDK = 'VAIDK'

class ExportStatusEnum(str, Enum):
    r"""Status of the export."""
    EXPORTING = 'Exporting'
    FAILED = 'Failed'
    DONE = 'Done'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Export:
    r"""OK"""
    
    download_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadUri'), 'exclude': lambda f: f is None }})
    r"""URI used to download the model."""  
    flavor: Optional[ExportFlavorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flavor'), 'exclude': lambda f: f is None }})
    r"""Flavor of the export. These are specializations of the export platform.
    Docker platform has valid flavors: Linux, Windows, ARM.
    Tensorflow platform has valid flavors: TensorFlowNormal, TensorFlowLite.
    ONNX platform has valid flavors: ONNX10, ONNX12.
    """  
    newer_version_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newerVersionAvailable'), 'exclude': lambda f: f is None }})
    r"""Indicates an updated version of the export package is available and should be re-exported for the latest changes."""  
    platform: Optional[ExportPlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})
    r"""Platform of the export."""  
    status: Optional[ExportStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the export."""  
    