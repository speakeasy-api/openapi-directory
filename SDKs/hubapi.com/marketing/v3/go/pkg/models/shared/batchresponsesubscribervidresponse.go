// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type BatchResponseSubscriberVidResponseStatusEnum string

const (
	BatchResponseSubscriberVidResponseStatusEnumPending    BatchResponseSubscriberVidResponseStatusEnum = "PENDING"
	BatchResponseSubscriberVidResponseStatusEnumProcessing BatchResponseSubscriberVidResponseStatusEnum = "PROCESSING"
	BatchResponseSubscriberVidResponseStatusEnumCanceled   BatchResponseSubscriberVidResponseStatusEnum = "CANCELED"
	BatchResponseSubscriberVidResponseStatusEnumComplete   BatchResponseSubscriberVidResponseStatusEnum = "COMPLETE"
)

func (e BatchResponseSubscriberVidResponseStatusEnum) ToPointer() *BatchResponseSubscriberVidResponseStatusEnum {
	return &e
}

func (e *BatchResponseSubscriberVidResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETE":
		*e = BatchResponseSubscriberVidResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseSubscriberVidResponseStatusEnum: %v", v)
	}
}

// BatchResponseSubscriberVidResponse - successful operation
type BatchResponseSubscriberVidResponse struct {
	CompletedAt time.Time                                    `json:"completedAt"`
	Errors      []StandardError                              `json:"errors,omitempty"`
	Links       map[string]string                            `json:"links,omitempty"`
	NumErrors   *int                                         `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                   `json:"requestedAt,omitempty"`
	Results     []SubscriberVidResponse                      `json:"results"`
	StartedAt   time.Time                                    `json:"startedAt"`
	Status      BatchResponseSubscriberVidResponseStatusEnum `json:"status"`
}
