/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudRecommendationengineV1beta1ProductDetail - Detailed product information associated with a user event.
 */
public class GoogleCloudRecommendationengineV1beta1ProductDetail {
    /**
     * Optional. Quantity of the products in stock when a user event happens. Optional. If provided, this overrides the available quantity in Catalog for this event. and can only be set if `stock_status` is set to `IN_STOCK`. Note that if an item is out of stock, you must set the `stock_state` field to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not sufficient to mark the item out of stock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableQuantity")
    public Integer availableQuantity;

    public GoogleCloudRecommendationengineV1beta1ProductDetail withAvailableQuantity(Integer availableQuantity) {
        this.availableQuantity = availableQuantity;
        return this;
    }
    
    /**
     * Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if originalPrice or displayPrice is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;

    public GoogleCloudRecommendationengineV1beta1ProductDetail withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * Optional. Display price of the product (e.g. discounted price). If provided, this will override the display price in Catalog for this product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayPrice")
    public Float displayPrice;

    public GoogleCloudRecommendationengineV1beta1ProductDetail withDisplayPrice(Float displayPrice) {
        this.displayPrice = displayPrice;
        return this;
    }
    
    /**
     * Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public GoogleCloudRecommendationengineV1beta1ProductDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * FeatureMap represents extra features that customers want to include in the recommendation model for catalogs/user events as categorical/numerical features.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemAttributes")
    public GoogleCloudRecommendationengineV1beta1FeatureMap itemAttributes;

    public GoogleCloudRecommendationengineV1beta1ProductDetail withItemAttributes(GoogleCloudRecommendationengineV1beta1FeatureMap itemAttributes) {
        this.itemAttributes = itemAttributes;
        return this;
    }
    
    /**
     * Optional. Original price of the product. If provided, this will override the original price in Catalog for this product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalPrice")
    public Float originalPrice;

    public GoogleCloudRecommendationengineV1beta1ProductDetail withOriginalPrice(Float originalPrice) {
        this.originalPrice = originalPrice;
        return this;
    }
    
    /**
     * Optional. Quantity of the product associated with the user event. For example, this field will be 2 if two products are added to the shopping cart for `add-to-cart` event. Required for `add-to-cart`, `add-to-list`, `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund` event types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    public Integer quantity;

    public GoogleCloudRecommendationengineV1beta1ProductDetail withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stockState")
    public GoogleCloudRecommendationengineV1beta1ProductDetailStockStateEnum stockState;

    public GoogleCloudRecommendationengineV1beta1ProductDetail withStockState(GoogleCloudRecommendationengineV1beta1ProductDetailStockStateEnum stockState) {
        this.stockState = stockState;
        return this;
    }
    
    public GoogleCloudRecommendationengineV1beta1ProductDetail(){}
}
