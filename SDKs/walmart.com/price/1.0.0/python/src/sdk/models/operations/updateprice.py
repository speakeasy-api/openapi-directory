"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum(str, Enum):
    USD = 'USD'
    CAD = 'CAD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePriceRequestBodyPricingComparisonPrice:
    r"""This is applicable only for promotions"""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})  
    currency: Optional[UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})  
    
class UpdatePriceRequestBodyPricingComparisonPriceTypeEnum(str, Enum):
    r"""This is applicable only for promotions"""
    BASE = 'BASE'

class UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum(str, Enum):
    USD = 'USD'
    CAD = 'CAD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePriceRequestBodyPricingCurrentPrice:
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})  
    currency: Optional[UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})  
    
class UpdatePriceRequestBodyPricingCurrentPriceTypeEnum(str, Enum):
    r"""This is applicable only for both promotions and price"""
    BASE = 'BASE'
    REDUCED = 'REDUCED'
    CLEARANCE = 'CLEARANCE'

class UpdatePriceRequestBodyPricingPriceDisplayCodesEnum(str, Enum):
    r"""Represent promo placement. This is applicable only for promotions"""
    CART = 'CART'
    CHECKOUT = 'CHECKOUT'

class UpdatePriceRequestBodyPricingProcessModeEnum(str, Enum):
    r"""This is applicable only for promotions"""
    UPSERT = 'UPSERT'
    DELETE = 'DELETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePriceRequestBodyPricing:
    
    current_price: UpdatePriceRequestBodyPricingCurrentPrice = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentPrice') }})  
    current_price_type: UpdatePriceRequestBodyPricingCurrentPriceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentPriceType') }})
    r"""This is applicable only for both promotions and price"""  
    comparison_price: Optional[UpdatePriceRequestBodyPricingComparisonPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comparisonPrice'), 'exclude': lambda f: f is None }})
    r"""This is applicable only for promotions"""  
    comparison_price_type: Optional[UpdatePriceRequestBodyPricingComparisonPriceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comparisonPriceType'), 'exclude': lambda f: f is None }})
    r"""This is applicable only for promotions"""  
    effective_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""This is applicable only for promotions"""  
    expiration_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""This is applicable only for promotions"""  
    price_display_codes: Optional[UpdatePriceRequestBodyPricingPriceDisplayCodesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDisplayCodes'), 'exclude': lambda f: f is None }})
    r"""Represent promo placement. This is applicable only for promotions"""  
    process_mode: Optional[UpdatePriceRequestBodyPricingProcessModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processMode'), 'exclude': lambda f: f is None }})
    r"""This is applicable only for promotions"""  
    promo_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promoId'), 'exclude': lambda f: f is None }})
    r"""This is applicable only for promotions"""  
    
class UpdatePriceRequestBodyReplaceAllEnum(str, Enum):
    r"""This is applicable only for promotions"""
    TRUE = 'true'
    FALSE = 'false'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePriceRequestBody:
    r"""The request body consists of a Feed file attached to the request."""
    
    pricing: list[UpdatePriceRequestBodyPricing] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing') }})  
    sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku') }})  
    definitions: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definitions'), 'exclude': lambda f: f is None }})  
    offer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerId'), 'exclude': lambda f: f is None }})
    r"""This is applicable only for promotions"""  
    replace_all: Optional[UpdatePriceRequestBodyReplaceAllEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replaceAll'), 'exclude': lambda f: f is None }})
    r"""This is applicable only for promotions"""  
    

@dataclasses.dataclass
class UpdatePriceRequest:
    
    request_body: UpdatePriceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The request body consists of a Feed file attached to the request."""  
    wm_qos_correlation_id: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_QOS.CORRELATION_ID', 'style': 'simple', 'explode': False }})
    r"""A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID"""  
    wm_sec_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_SEC.ACCESS_TOKEN', 'style': 'simple', 'explode': False }})
    r"""The access token retrieved in the Token API call"""  
    wm_svc_name: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_SVC.NAME', 'style': 'simple', 'explode': False }})
    r"""Walmart Service Name"""  
    wm_consumer_channel_type: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'WM_CONSUMER.CHANNEL.TYPE', 'style': 'simple', 'explode': False }})
    r"""A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding"""  
    
class UpdatePrice200ApplicationXMLErrorsCategoryEnum(str, Enum):
    APPLICATION = 'APPLICATION'
    SYSTEM = 'SYSTEM'
    REQUEST = 'REQUEST'
    DATA = 'DATA'


@dataclasses.dataclass
class UpdatePrice200ApplicationXMLErrorsCauses:
    
    code: Optional[str] = dataclasses.field(default=None)  
    description: Optional[str] = dataclasses.field(default=None)  
    field: Optional[str] = dataclasses.field(default=None)  
    type: Optional[str] = dataclasses.field(default=None)  
    
class UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum(str, Enum):
    INTERNAL_DATA_ERROR = 'INTERNAL_DATA_ERROR'
    EXTERNAL_DATA_ERROR = 'EXTERNAL_DATA_ERROR'
    SYSTEM_ERROR = 'SYSTEM_ERROR'

class UpdatePrice200ApplicationXMLErrorsSeverityEnum(str, Enum):
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'


@dataclasses.dataclass
class UpdatePrice200ApplicationXMLErrors:
    
    code: str = dataclasses.field()  
    category: Optional[UpdatePrice200ApplicationXMLErrorsCategoryEnum] = dataclasses.field(default=None)  
    causes: Optional[list[UpdatePrice200ApplicationXMLErrorsCauses]] = dataclasses.field(default=None)  
    component: Optional[str] = dataclasses.field(default=None)  
    description: Optional[str] = dataclasses.field(default=None)  
    error_identifiers: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)  
    field: Optional[str] = dataclasses.field(default=None)  
    gateway_error_category: Optional[UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum] = dataclasses.field(default=None)  
    info: Optional[str] = dataclasses.field(default=None)  
    service_name: Optional[str] = dataclasses.field(default=None)  
    severity: Optional[UpdatePrice200ApplicationXMLErrorsSeverityEnum] = dataclasses.field(default=None)  
    type: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class UpdatePrice200ApplicationXML:
    r"""Successful Operation"""
    
    errors: Optional[list[UpdatePrice200ApplicationXMLErrors]] = dataclasses.field(default=None)  
    mart: Optional[str] = dataclasses.field(default=None)
    r"""Marketplace name. Example: Walmart-US"""  
    message: Optional[str] = dataclasses.field(default=None)
    r"""A message of acknowledgement for a price update"""  
    sku: Optional[str] = dataclasses.field(default=None)
    r"""An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item."""  
    status_code: Optional[int] = dataclasses.field(default=None)  
    
class UpdatePrice200ApplicationJSONErrorsCategoryEnum(str, Enum):
    APPLICATION = 'APPLICATION'
    SYSTEM = 'SYSTEM'
    REQUEST = 'REQUEST'
    DATA = 'DATA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePrice200ApplicationJSONErrorsCauses:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    
class UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum(str, Enum):
    INTERNAL_DATA_ERROR = 'INTERNAL_DATA_ERROR'
    EXTERNAL_DATA_ERROR = 'EXTERNAL_DATA_ERROR'
    SYSTEM_ERROR = 'SYSTEM_ERROR'

class UpdatePrice200ApplicationJSONErrorsSeverityEnum(str, Enum):
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePrice200ApplicationJSONErrors:
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    category: Optional[UpdatePrice200ApplicationJSONErrorsCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    causes: Optional[list[UpdatePrice200ApplicationJSONErrorsCauses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('causes'), 'exclude': lambda f: f is None }})  
    component: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('component'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    error_identifiers: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorIdentifiers'), 'exclude': lambda f: f is None }})  
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})  
    gateway_error_category: Optional[UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayErrorCategory'), 'exclude': lambda f: f is None }})  
    info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is None }})  
    service_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceName'), 'exclude': lambda f: f is None }})  
    severity: Optional[UpdatePrice200ApplicationJSONErrorsSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePrice200ApplicationJSON:
    r"""Successful Operation"""
    
    errors: Optional[list[UpdatePrice200ApplicationJSONErrors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})  
    mart: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mart'), 'exclude': lambda f: f is None }})
    r"""Marketplace name. Example: Walmart-US"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""A message of acknowledgement for a price update"""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item."""  
    status_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusCode'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class UpdatePriceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_price_200_application_json_object: Optional[UpdatePrice200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    