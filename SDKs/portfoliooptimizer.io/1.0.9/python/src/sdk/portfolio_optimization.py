"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PortfolioOptimization:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_portfolio_optimization_equal_risk_contributions(self, request: operations.PostPortfolioOptimizationEqualRiskContributionsRequestBody) -> operations.PostPortfolioOptimizationEqualRiskContributionsResponse:
        r"""Equal Risk Contributions Portfolio
        Compute the asset weights of the equal risk contributions portfolio, optionally subject to:  
        * Minimum and maximum weights constraints  
        
        References
         * [Richard, Jean-Charles and Roncalli, Thierry, Constrained Risk Budgeting Portfolios: Theory, Algorithms, Applications & Puzzles](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3331184)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/equal-risk-contributions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationEqualRiskContributionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationEqualRiskContributions200ApplicationJSON])
                res.post_portfolio_optimization_equal_risk_contributions_200_application_json_object = out

        return res

    def post_portfolio_optimization_equal_sharpe_ratio_contributions(self, request: operations.PostPortfolioOptimizationEqualSharpeRatioContributionsRequestBody) -> operations.PostPortfolioOptimizationEqualSharpeRatioContributionsResponse:
        r"""Equal Sharpe Ratio Contributions Portfolio
        Compute the asset weights of the equal Sharpe Ratio contributions portfolio.
        
        References
         * [Andreas Steiner, Sharpe Ratio Contribution and Attribution Analysis](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1839166\")
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/equal-sharpe-ratio-contributions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationEqualSharpeRatioContributionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationEqualSharpeRatioContributions200ApplicationJSON])
                res.post_portfolio_optimization_equal_sharpe_ratio_contributions_200_application_json_object = out

        return res

    def post_portfolio_optimization_equal_volatility_weighted(self, request: operations.PostPortfolioOptimizationEqualVolatilityWeightedRequestBody) -> operations.PostPortfolioOptimizationEqualVolatilityWeightedResponse:
        r"""Equal Volatility Weighted Portfolio
        Compute the asset weights of the equal volatility-weighted portfolio.
        
        References
         * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/equal-volatility-weighted'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationEqualVolatilityWeightedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationEqualVolatilityWeighted200ApplicationJSON])
                res.post_portfolio_optimization_equal_volatility_weighted_200_application_json_object = out

        return res

    def post_portfolio_optimization_equal_weighted(self, request: operations.PostPortfolioOptimizationEqualWeightedRequestBody) -> operations.PostPortfolioOptimizationEqualWeightedResponse:
        r"""Equal Weighted Portfolio
        Compute the asset weights of the equal-weighted portfolio.
        
        References
         * [Victor DeMiguel and al., Optimal Versus Naive Diversification: How Inefficient is the 1/N Portfolio Strategy?](https://academic.oup.com/rfs/article-abstract/22/5/1915/1592901?redirectedFrom=fulltext)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/equal-weighted'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationEqualWeightedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationEqualWeighted200ApplicationJSON])
                res.post_portfolio_optimization_equal_weighted_200_application_json_object = out

        return res

    def post_portfolio_optimization_hierarchical_risk_parity(self, request: operations.PostPortfolioOptimizationHierarchicalRiskParityRequestBody) -> operations.PostPortfolioOptimizationHierarchicalRiskParityResponse:
        r"""Hierarchical Risk Parity Portfolio
        Compute the asset weights of the hierarchical risk parity portfolio, optionally subject to:  
        * Minimum and maximum weights constraints
        * Minimum and maximum portfolio exposure constraints
        
        References
         * [Lopez de Prado, M. (2016). Building diversified portfolios that outperform out-of-sample. Journal of Portfolio Management, 42(4), 59â€“69](https://jpm.pm-research.com/content/42/4/59)
         * [Johann Pfitzinger & Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/hierarchical-risk-parity'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationHierarchicalRiskParityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON])
                res.post_portfolio_optimization_hierarchical_risk_parity_200_application_json_object = out

        return res

    def post_portfolio_optimization_hierarchical_risk_parity_clustering_based(self, request: operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody) -> operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse:
        r"""Hierarchical Clustering-Based Risk Parity Portfolio
        Compute the asset weights of the hierarchical clustering-based risk parity portfolio, optionally subject to:  
        * Minimum and maximum weights constraints
        * Minimum and maximum portfolio exposure constraints
        
        References
         * [Machine Learning for Asset Management: New Developments and Financial Applications, Emmanuel Jurczenko, Chapter 9, Harald Lohre,Carsten Rother,Kilian Axel SchÃ¤fer, Hierarchical Risk Parity: Accounting for Tail Dependencies in Multi-asset Multi-factor Allocations](https://onlinelibrary.wiley.com/doi/10.1002/9781119751182.ch9)
         * [Thomas Raffinot, Hierarchical Clustering-Based Asset Allocation, The Journal of Portfolio Management Multi-Asset Special Issue 2018, 44 (2) 89-99](https://jpm.pm-research.com/content/44/2/89.abstract)
         * [Raffinot, Thomas, The Hierarchical Equal Risk Contribution Portfolio](https://ssrn.com/abstract=3237540)
         * [Johann Pfitzinger & Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/hierarchical-risk-parity/clustering-based'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON])
                res.post_portfolio_optimization_hierarchical_risk_parity_clustering_based_200_application_json_object = out

        return res

    def post_portfolio_optimization_inverse_variance_weighted(self, request: operations.PostPortfolioOptimizationInverseVarianceWeightedRequestBody) -> operations.PostPortfolioOptimizationInverseVarianceWeightedResponse:
        r"""Inverse Variance Weighted Portfolio
        Compute the asset weights of the inverse variance-weighted portfolio.
        
        References
         * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/inverse-variance-weighted'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationInverseVarianceWeightedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationInverseVarianceWeighted200ApplicationJSON])
                res.post_portfolio_optimization_inverse_variance_weighted_200_application_json_object = out

        return res

    def post_portfolio_optimization_inverse_volatility_weighted(self, request: operations.PostPortfolioOptimizationInverseVolatilityWeightedRequestBody) -> operations.PostPortfolioOptimizationInverseVolatilityWeightedResponse:
        r"""Inverse Volatility Weighted Portfolio
        Compute the asset weights of the inverse volatility-weighted portfolio.
        
        References
         * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/inverse-volatility-weighted'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationInverseVolatilityWeightedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationInverseVolatilityWeighted200ApplicationJSON])
                res.post_portfolio_optimization_inverse_volatility_weighted_200_application_json_object = out

        return res

    def post_portfolio_optimization_market_capitalization_weighted(self, request: operations.PostPortfolioOptimizationMarketCapitalizationWeightedRequestBody) -> operations.PostPortfolioOptimizationMarketCapitalizationWeightedResponse:
        r"""Market Capitalization Weighted Portfolio
        Compute the asset weights of the market capitalization-weighted portfolio.
        
        References
         * [Wikipedia, Capitalization-weighted Index](https://en.wikipedia.org/wiki/Capitalization-weighted_index)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/market-capitalization-weighted'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationMarketCapitalizationWeightedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationMarketCapitalizationWeighted200ApplicationJSON])
                res.post_portfolio_optimization_market_capitalization_weighted_200_application_json_object = out

        return res

    def post_portfolio_optimization_maximum_decorrelation(self, request: operations.PostPortfolioOptimizationMaximumDecorrelationRequestBody) -> operations.PostPortfolioOptimizationMaximumDecorrelationResponse:
        r"""Maximum Decorrelation Portfolio
        Compute the asset weights of the maximum decorrelation portfolio, optionally subject to:  
        * Minimum and maximum weights constraints
        * Maximum group weights constraints
        * Minimum and maximum portfolio exposure constraints
        
        References
         * [F. Goltz, S. Sivasubramanian, Scientific Beta Maximum Decorrelation Indices](http://www.scientificbeta.com/download/file/scientific-beta-max-decorrelation-indices)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/maximum-decorrelation'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationMaximumDecorrelationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationMaximumDecorrelation200ApplicationJSON])
                res.post_portfolio_optimization_maximum_decorrelation_200_application_json_object = out

        return res

    def post_portfolio_optimization_maximum_ulcer_performance_index(self, request: operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBody) -> operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse:
        r"""Maximum Ulcer Performance Index Portfolio
        Compute the asset weights of the maximum Ulcer Performance Index portfolio, optionally subject to:  
        * Minimum and maximum weights constraints
        * Maximum group weights constraints
        * Minimum and maximum portfolio exposure constraints
        
        Notes:  
        * This endpoint will return an error if the maximum Ulcer Performance Index portfolio has a negative Ulcer Performance Index
        
        References
         * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
         * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)
         * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/maximum-ulcer-performance-index'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSON])
                res.post_portfolio_optimization_maximum_ulcer_performance_index_200_application_json_object = out

        return res

    def post_portfolio_optimization_minimum_correlation(self, request: operations.PostPortfolioOptimizationMinimumCorrelationRequestBody) -> operations.PostPortfolioOptimizationMinimumCorrelationResponse:
        r"""Minimum Correlation Portfolio
        Compute the asset weights of the (heuristic) minimum correlation portfolio, which is a portfolio built using the Minimum Correlation Algorithm discovered by [David Varadi](https://cssanalytics.wordpress.com/).
        
        References
         * [CSSA, Minimum Correlation Algorithm Paper Release](https://cssanalytics.wordpress.com/2012/09/21/minimum-correlation-algorithm-paper-release/)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/minimum-correlation'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationMinimumCorrelationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationMinimumCorrelation200ApplicationJSON])
                res.post_portfolio_optimization_minimum_correlation_200_application_json_object = out

        return res

    def post_portfolio_optimization_minimum_ulcer_index(self, request: operations.PostPortfolioOptimizationMinimumUlcerIndexRequestBody) -> operations.PostPortfolioOptimizationMinimumUlcerIndexResponse:
        r"""Minimum Ulcer Index Portfolio
        Compute the asset weights of the minimum Ulcer Index portfolio, optionally subject to:  
        * Minimum and maximum weights constraints
        * Maximum group weights constraints
        * Minimum and maximum portfolio exposure constraints
        
        References
         * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
         * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)
         * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/minimum-ulcer-index'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationMinimumUlcerIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationMinimumUlcerIndex200ApplicationJSON])
                res.post_portfolio_optimization_minimum_ulcer_index_200_application_json_object = out

        return res

    def post_portfolio_optimization_most_diversified(self, request: operations.PostPortfolioOptimizationMostDiversifiedRequestBody) -> operations.PostPortfolioOptimizationMostDiversifiedResponse:
        r"""Most Diversified Portfolio
        Compute the asset weights of the most diversified portfolio, optionally subject to:  
        * Minimum and maximum weights constraints
        * Maximum group weights constraints
        * Minimum and maximum portfolio exposure constraints
        
        References
         * [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/optimization/most-diversified'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioOptimizationMostDiversifiedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioOptimizationMostDiversified200ApplicationJSON])
                res.post_portfolio_optimization_most_diversified_200_application_json_object = out

        return res

    