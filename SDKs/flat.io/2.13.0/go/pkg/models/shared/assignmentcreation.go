// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AssignmentCreationAssigneeModeEnum - Possible modes of assigning assignments
type AssignmentCreationAssigneeModeEnum string

const (
	AssignmentCreationAssigneeModeEnumEveryone AssignmentCreationAssigneeModeEnum = "everyone"
	AssignmentCreationAssigneeModeEnumSelected AssignmentCreationAssigneeModeEnum = "selected"
)

func (e AssignmentCreationAssigneeModeEnum) ToPointer() *AssignmentCreationAssigneeModeEnum {
	return &e
}

func (e *AssignmentCreationAssigneeModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "everyone":
		fallthrough
	case "selected":
		*e = AssignmentCreationAssigneeModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssignmentCreationAssigneeModeEnum: %v", v)
	}
}

// AssignmentCreationGoogleClassroom - Google Classroom options for this assignment
type AssignmentCreationGoogleClassroom struct {
	// Identifier of the topic where the assignment is created
	TopicID *string `json:"topicId,omitempty"`
}

// AssignmentCreationMicrosoftGraph - Microsoft Graph options for this assignment
type AssignmentCreationMicrosoftGraph struct {
	// List of categories this assignment belongs to
	Categories []string `json:"categories,omitempty"`
}

// AssignmentCreationStateEnum - State of the assignment
type AssignmentCreationStateEnum string

const (
	AssignmentCreationStateEnumDraft  AssignmentCreationStateEnum = "draft"
	AssignmentCreationStateEnumActive AssignmentCreationStateEnum = "active"
)

func (e AssignmentCreationStateEnum) ToPointer() *AssignmentCreationStateEnum {
	return &e
}

func (e *AssignmentCreationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "active":
		*e = AssignmentCreationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssignmentCreationStateEnum: %v", v)
	}
}

// AssignmentCreation - Assignment creation details
type AssignmentCreation struct {
	// Identifiers for the students that have access to the assignment
	AssignedStudents []string `json:"assignedStudents,omitempty"`
	// Possible modes of assigning assignments
	AssigneeMode *AssignmentCreationAssigneeModeEnum `json:"assigneeMode,omitempty"`
	Attachments  []ClassAttachmentCreation           `json:"attachments,omitempty"`
	// The URL of the cover to display
	Cover *string `json:"cover,omitempty"`
	// The id of the cover to display
	CoverFile *string `json:"coverFile,omitempty"`
	// Description and content of the assignment
	Description *string `json:"description,omitempty"`
	// The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won't have a due date.
	//
	DueDate *time.Time `json:"dueDate,omitempty"`
	// Google Classroom options for this assignment
	GoogleClassroom *AssignmentCreationGoogleClassroom `json:"googleClassroom,omitempty"`
	// If set, the grading will be enabled for the assignement with this value as the maximum of points
	//
	MaxPoints *float64 `json:"maxPoints,omitempty"`
	// Microsoft Graph options for this assignment
	MicrosoftGraph *AssignmentCreationMicrosoftGraph `json:"microsoftGraph,omitempty"`
	// The number of playback authorized on the scores of the assignment.
	NbPlaybackAuthorized *float64 `json:"nbPlaybackAuthorized,omitempty"`
	// The publication (scheduled) date of the assignment.
	// If this one is specified, the assignment will only be listed to the teachers of the class.
	//
	ScheduledDate *time.Time `json:"scheduledDate,omitempty"`
	// State of the assignment
	State *AssignmentCreationStateEnum `json:"state,omitempty"`
	// Title of the assignment
	Title *string `json:"title,omitempty"`
	// The id of the associated toolset
	Toolset *string `json:"toolset,omitempty"`
	// Type of the assignment
	Type *AssignmentTypeEnum `json:"type,omitempty"`
}
