<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Properties 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a commit application property
     * 
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCommitHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCommitHostedPropertyValueResponse
     */
	public function deleteCommitHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCommitHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCommitHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\DeleteCommitHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCommitHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a pull request application property
     * 
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePullRequestHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePullRequestHostedPropertyValueResponse
     */
	public function deletePullRequestHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\DeletePullRequestHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePullRequestHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\DeletePullRequestHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePullRequestHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a repository application property
     * 
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoryHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoryHostedPropertyValueResponse
     */
	public function deleteRepositoryHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoryHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoryHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoryHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoryHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a user application property
     * 
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserHostedPropertyValueResponse
     */
	public function deleteUserHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{selected_user}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get a commit application property
     * 
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitHostedPropertyValueResponse
     */
	public function getCommitHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\GetCommitHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationProperty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pull request application property
     * 
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPullRequestHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPullRequestHostedPropertyValueResponse
     */
	public function getPullRequestHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\GetPullRequestHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPullRequestHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\GetPullRequestHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPullRequestHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationProperty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a repository application property
     * 
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoryHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoryHostedPropertyValueResponse
     */
	public function getRepositoryHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoryHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoryHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoryHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoryHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationProperty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user application property
     * 
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveUserHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveUserHostedPropertyValueResponse
     */
	public function retrieveUserHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveUserHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveUserHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{selected_user}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\RetrieveUserHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveUserHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationProperty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a commit application property
     * 
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCommitHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCommitHostedPropertyValueResponse
     */
	public function updateCommitHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCommitHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCommitHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\UpdateCommitHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCommitHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Update a pull request application property
     * 
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePullRequestHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePullRequestHostedPropertyValueResponse
     */
	public function updatePullRequestHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePullRequestHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePullRequestHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\UpdatePullRequestHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePullRequestHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Update a repository application property
     * 
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRepositoryHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRepositoryHostedPropertyValueResponse
     */
	public function updateRepositoryHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRepositoryHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRepositoryHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\UpdateRepositoryHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRepositoryHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Update a user application property
     * 
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserHostedPropertyValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserHostedPropertyValueResponse
     */
	public function updateUserHostedPropertyValue(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserHostedPropertyValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserHostedPropertyValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{selected_user}/properties/{app_key}/{property_name}', \OpenAPI\OpenAPI\Models\Operations\UpdateUserHostedPropertyValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserHostedPropertyValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}