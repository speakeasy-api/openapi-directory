/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Settings - Database instance settings.
 */
public class Settings {
    /**
     * The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activationPolicy")
    public SettingsActivationPolicyEnum activationPolicy;

    public Settings withActivationPolicy(SettingsActivationPolicyEnum activationPolicy) {
        this.activationPolicy = activationPolicy;
        return this;
    }
    
    /**
     * Active Directory configuration, relevant only for Cloud SQL for SQL Server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeDirectoryConfig")
    public SqlActiveDirectoryConfig activeDirectoryConfig;

    public Settings withActiveDirectoryConfig(SqlActiveDirectoryConfig activeDirectoryConfig) {
        this.activeDirectoryConfig = activeDirectoryConfig;
        return this;
    }
    
    /**
     * Specifies options for controlling advanced machine features.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advancedMachineFeatures")
    public AdvancedMachineFeatures advancedMachineFeatures;

    public Settings withAdvancedMachineFeatures(AdvancedMachineFeatures advancedMachineFeatures) {
        this.advancedMachineFeatures = advancedMachineFeatures;
        return this;
    }
    
    /**
     * The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizedGaeApplications")
    public String[] authorizedGaeApplications;

    public Settings withAuthorizedGaeApplications(String[] authorizedGaeApplications) {
        this.authorizedGaeApplications = authorizedGaeApplications;
        return this;
    }
    
    /**
     * Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availabilityType")
    public SettingsAvailabilityTypeEnum availabilityType;

    public Settings withAvailabilityType(SettingsAvailabilityTypeEnum availabilityType) {
        this.availabilityType = availabilityType;
        return this;
    }
    
    /**
     * Database instance backup configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backupConfiguration")
    public BackupConfiguration backupConfiguration;

    public Settings withBackupConfiguration(BackupConfiguration backupConfiguration) {
        this.backupConfiguration = backupConfiguration;
        return this;
    }
    
    /**
     * The name of server Instance collation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collation")
    public String collation;

    public Settings withCollation(String collation) {
        this.collation = collation;
        return this;
    }
    
    /**
     * Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorEnforcement")
    public SettingsConnectorEnforcementEnum connectorEnforcement;

    public Settings withConnectorEnforcement(SettingsConnectorEnforcementEnum connectorEnforcement) {
        this.connectorEnforcement = connectorEnforcement;
        return this;
    }
    
    /**
     * Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crashSafeReplicationEnabled")
    public Boolean crashSafeReplicationEnabled;

    public Settings withCrashSafeReplicationEnabled(Boolean crashSafeReplicationEnabled) {
        this.crashSafeReplicationEnabled = crashSafeReplicationEnabled;
        return this;
    }
    
    /**
     * The size of data disk, in GB. The data disk size minimum is 10GB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataDiskSizeGb")
    public String dataDiskSizeGb;

    public Settings withDataDiskSizeGb(String dataDiskSizeGb) {
        this.dataDiskSizeGb = dataDiskSizeGb;
        return this;
    }
    
    /**
     * The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataDiskType")
    public SettingsDataDiskTypeEnum dataDiskType;

    public Settings withDataDiskType(SettingsDataDiskTypeEnum dataDiskType) {
        this.dataDiskType = dataDiskType;
        return this;
    }
    
    /**
     * The database flags passed to the instance at startup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databaseFlags")
    public DatabaseFlags[] databaseFlags;

    public Settings withDatabaseFlags(DatabaseFlags[] databaseFlags) {
        this.databaseFlags = databaseFlags;
        return this;
    }
    
    /**
     * Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databaseReplicationEnabled")
    public Boolean databaseReplicationEnabled;

    public Settings withDatabaseReplicationEnabled(Boolean databaseReplicationEnabled) {
        this.databaseReplicationEnabled = databaseReplicationEnabled;
        return this;
    }
    
    /**
     * Configuration to protect against accidental instance deletion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deletionProtectionEnabled")
    public Boolean deletionProtectionEnabled;

    public Settings withDeletionProtectionEnabled(Boolean deletionProtectionEnabled) {
        this.deletionProtectionEnabled = deletionProtectionEnabled;
        return this;
    }
    
    /**
     * Deny maintenance periods
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("denyMaintenancePeriods")
    public DenyMaintenancePeriod[] denyMaintenancePeriods;

    public Settings withDenyMaintenancePeriods(DenyMaintenancePeriod[] denyMaintenancePeriods) {
        this.denyMaintenancePeriods = denyMaintenancePeriods;
        return this;
    }
    
    /**
     * Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insightsConfig")
    public InsightsConfig insightsConfig;

    public Settings withInsightsConfig(InsightsConfig insightsConfig) {
        this.insightsConfig = insightsConfig;
        return this;
    }
    
    /**
     * IP Management configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipConfiguration")
    public IpConfiguration ipConfiguration;

    public Settings withIpConfiguration(IpConfiguration ipConfiguration) {
        this.ipConfiguration = ipConfiguration;
        return this;
    }
    
    /**
     * This is always `sql#settings`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Settings withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationPreference")
    public LocationPreference locationPreference;

    public Settings withLocationPreference(LocationPreference locationPreference) {
        this.locationPreference = locationPreference;
        return this;
    }
    
    /**
     * Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenanceWindow")
    public MaintenanceWindow maintenanceWindow;

    public Settings withMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
        this.maintenanceWindow = maintenanceWindow;
        return this;
    }
    
    /**
     * Database instance local user password validation policy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordValidationPolicy")
    public PasswordValidationPolicy passwordValidationPolicy;

    public Settings withPasswordValidationPolicy(PasswordValidationPolicy passwordValidationPolicy) {
        this.passwordValidationPolicy = passwordValidationPolicy;
        return this;
    }
    
    /**
     * The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricingPlan")
    public SettingsPricingPlanEnum pricingPlan;

    public Settings withPricingPlan(SettingsPricingPlanEnum pricingPlan) {
        this.pricingPlan = pricingPlan;
        return this;
    }
    
    /**
     * The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicationType")
    public SettingsReplicationTypeEnum replicationType;

    public Settings withReplicationType(SettingsReplicationTypeEnum replicationType) {
        this.replicationType = replicationType;
        return this;
    }
    
    /**
     * The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settingsVersion")
    public String settingsVersion;

    public Settings withSettingsVersion(String settingsVersion) {
        this.settingsVersion = settingsVersion;
        return this;
    }
    
    /**
     * SQL Server specific audit configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sqlServerAuditConfig")
    public SqlServerAuditConfig sqlServerAuditConfig;

    public Settings withSqlServerAuditConfig(SqlServerAuditConfig sqlServerAuditConfig) {
        this.sqlServerAuditConfig = sqlServerAuditConfig;
        return this;
    }
    
    /**
     * Configuration to increase storage size automatically. The default value is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageAutoResize")
    public Boolean storageAutoResize;

    public Settings withStorageAutoResize(Boolean storageAutoResize) {
        this.storageAutoResize = storageAutoResize;
        return this;
    }
    
    /**
     * The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageAutoResizeLimit")
    public String storageAutoResizeLimit;

    public Settings withStorageAutoResizeLimit(String storageAutoResizeLimit) {
        this.storageAutoResizeLimit = storageAutoResizeLimit;
        return this;
    }
    
    /**
     * The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tier")
    public String tier;

    public Settings withTier(String tier) {
        this.tier = tier;
        return this;
    }
    
    /**
     * Server timezone, relevant only for Cloud SQL for SQL Server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    public String timeZone;

    public Settings withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * User-provided labels, represented as a dictionary where each label is a single key value pair.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userLabels")
    public java.util.Map<String, String> userLabels;

    public Settings withUserLabels(java.util.Map<String, String> userLabels) {
        this.userLabels = userLabels;
        return this;
    }
    
    public Settings(){}
}
