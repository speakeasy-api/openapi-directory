"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProfileTokenRequestCookieTypeEnum(str, Enum):
    r"""If you specify a cookie type then a content filter cookie will be returned
    along with the token(s). This is only intended for web based clients which
    need to pass the cookies to a server to render a page based on the user's
    content filters e.g subscription code.
    
    If type `Session` the cookie will be session based.
    If type `Persistent` the cookie will have a medium term lifespan.
    If undefined no cookies will be set.
    """
    SESSION = 'Session'
    PERSISTENT = 'Persistent'

class ProfileTokenRequestScopesEnum(str, Enum):
    CATALOG = 'Catalog'
    COMMERCE = 'Commerce'
    SETTINGS = 'Settings'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProfileTokenRequest:
    r"""The profile id and optional pin with required token scope."""
    
    profile_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileId') }})
    r"""The id of the profile the token should grant access rights to."""  
    scopes: list[ProfileTokenRequestScopesEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes') }})
    r"""The scope(s) of the token(s) required."""  
    cookie_type: Optional[ProfileTokenRequestCookieTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookieType'), 'exclude': lambda f: f is None }})
    r"""If you specify a cookie type then a content filter cookie will be returned
    along with the token(s). This is only intended for web based clients which
    need to pass the cookies to a server to render a page based on the user's
    content filters e.g subscription code.
    
    If type `Session` the cookie will be session based.
    If type `Persistent` the cookie will have a medium term lifespan.
    If undefined no cookies will be set.
    """  
    pin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pin'), 'exclude': lambda f: f is None }})
    r"""The pin associated with this profile, if any."""  
    