// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GETModifyVpcEndpointActionEnum
type GETModifyVpcEndpointActionEnum string

const (
	GETModifyVpcEndpointActionEnumModifyVpcEndpoint GETModifyVpcEndpointActionEnum = "ModifyVpcEndpoint"
)

func (e *GETModifyVpcEndpointActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyVpcEndpoint":
		*e = GETModifyVpcEndpointActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyVpcEndpointActionEnum: %s", s)
	}
}

// GETModifyVpcEndpointDNSOptions - Describes the DNS options for an endpoint.
type GETModifyVpcEndpointDNSOptions struct {
	DNSRecordIPType                          *shared.DNSRecordIPTypeEnum `queryParam:"name=DnsRecordIpType"`
	PrivateDNSOnlyForInboundResolverEndpoint *bool                       `queryParam:"name=PrivateDnsOnlyForInboundResolverEndpoint"`
}

// GETModifyVpcEndpointIPAddressTypeEnum - The IP address type for the endpoint.
type GETModifyVpcEndpointIPAddressTypeEnum string

const (
	GETModifyVpcEndpointIPAddressTypeEnumIpv4      GETModifyVpcEndpointIPAddressTypeEnum = "ipv4"
	GETModifyVpcEndpointIPAddressTypeEnumDualstack GETModifyVpcEndpointIPAddressTypeEnum = "dualstack"
	GETModifyVpcEndpointIPAddressTypeEnumIpv6      GETModifyVpcEndpointIPAddressTypeEnum = "ipv6"
)

func (e *GETModifyVpcEndpointIPAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "dualstack":
		fallthrough
	case "ipv6":
		*e = GETModifyVpcEndpointIPAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyVpcEndpointIPAddressTypeEnum: %s", s)
	}
}

// GETModifyVpcEndpointVersionEnum
type GETModifyVpcEndpointVersionEnum string

const (
	GETModifyVpcEndpointVersionEnumTwoThousandAndSixteen1115 GETModifyVpcEndpointVersionEnum = "2016-11-15"
)

func (e *GETModifyVpcEndpointVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifyVpcEndpointVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyVpcEndpointVersionEnum: %s", s)
	}
}

type GETModifyVpcEndpointRequest struct {
	Action GETModifyVpcEndpointActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// (Gateway endpoint) The IDs of the route tables to associate with the endpoint.
	AddRouteTableID []string `queryParam:"style=form,explode=true,name=AddRouteTableId"`
	// (Interface endpoint) The IDs of the security groups to associate with the network interface.
	AddSecurityGroupID []string `queryParam:"style=form,explode=true,name=AddSecurityGroupId"`
	// (Interface and Gateway Load Balancer endpoints) The IDs of the subnets in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
	AddSubnetID []string `queryParam:"style=form,explode=true,name=AddSubnetId"`
	// The DNS options for the endpoint.
	DNSOptions *GETModifyVpcEndpointDNSOptions `queryParam:"style=form,explode=true,name=DnsOptions"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The IP address type for the endpoint.
	IPAddressType *GETModifyVpcEndpointIPAddressTypeEnum `queryParam:"style=form,explode=true,name=IpAddressType"`
	// (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.
	PolicyDocument *string `queryParam:"style=form,explode=true,name=PolicyDocument"`
	// (Interface endpoint) Indicates whether a private hosted zone is associated with the VPC.
	PrivateDNSEnabled *bool `queryParam:"style=form,explode=true,name=PrivateDnsEnabled"`
	// (Gateway endpoint) The IDs of the route tables to disassociate from the endpoint.
	RemoveRouteTableID []string `queryParam:"style=form,explode=true,name=RemoveRouteTableId"`
	// (Interface endpoint) The IDs of the security groups to disassociate from the network interface.
	RemoveSecurityGroupID []string `queryParam:"style=form,explode=true,name=RemoveSecurityGroupId"`
	// (Interface endpoint) The IDs of the subnets from which to remove the endpoint.
	RemoveSubnetID []string `queryParam:"style=form,explode=true,name=RemoveSubnetId"`
	// (Gateway endpoint) Specify <code>true</code> to reset the policy document to the default policy. The default policy allows full access to the service.
	ResetPolicy *bool                           `queryParam:"style=form,explode=true,name=ResetPolicy"`
	Version     GETModifyVpcEndpointVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the endpoint.
	VpcEndpointID     string  `queryParam:"style=form,explode=true,name=VpcEndpointId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyVpcEndpointResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
