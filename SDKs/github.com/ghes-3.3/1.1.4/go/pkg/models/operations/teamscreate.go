// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TeamsCreateRequestBodyPermissionEnum - **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
type TeamsCreateRequestBodyPermissionEnum string

const (
	TeamsCreateRequestBodyPermissionEnumPull TeamsCreateRequestBodyPermissionEnum = "pull"
	TeamsCreateRequestBodyPermissionEnumPush TeamsCreateRequestBodyPermissionEnum = "push"
)

func (e *TeamsCreateRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pull":
		fallthrough
	case "push":
		*e = TeamsCreateRequestBodyPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsCreateRequestBodyPermissionEnum: %s", s)
	}
}

// TeamsCreateRequestBodyPrivacyEnum - The level of privacy this team should have. The options are:
// **For a non-nested team:**
//   - `secret` - only visible to organization owners and members of this team.
//   - `closed` - visible to all members of this organization.
//
// Default: `secret`
// **For a parent or child team:**
//   - `closed` - visible to all members of this organization.
//
// Default for child team: `closed`
type TeamsCreateRequestBodyPrivacyEnum string

const (
	TeamsCreateRequestBodyPrivacyEnumSecret TeamsCreateRequestBodyPrivacyEnum = "secret"
	TeamsCreateRequestBodyPrivacyEnumClosed TeamsCreateRequestBodyPrivacyEnum = "closed"
)

func (e *TeamsCreateRequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "secret":
		fallthrough
	case "closed":
		*e = TeamsCreateRequestBodyPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsCreateRequestBodyPrivacyEnum: %s", s)
	}
}

type TeamsCreateRequestBody struct {
	// The description of the team.
	Description *string `json:"description,omitempty"`
	// The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the "[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.3/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)" endpoint to change the LDAP DN. For more information, see "[Using LDAP](https://docs.github.com/enterprise-server@3.3/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)."
	LdapDn *string `json:"ldap_dn,omitempty"`
	// List GitHub IDs for organization members who will become team maintainers.
	Maintainers []string `json:"maintainers,omitempty"`
	// The name of the team.
	Name string `json:"name"`
	// The ID of a team to set as the parent team.
	ParentTeamID *int64 `json:"parent_team_id,omitempty"`
	// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
	Permission *TeamsCreateRequestBodyPermissionEnum `json:"permission,omitempty"`
	// The level of privacy this team should have. The options are:
	// **For a non-nested team:**
	//  * `secret` - only visible to organization owners and members of this team.
	//  * `closed` - visible to all members of this organization.
	// Default: `secret`
	// **For a parent or child team:**
	//  * `closed` - visible to all members of this organization.
	// Default for child team: `closed`
	Privacy *TeamsCreateRequestBodyPrivacyEnum `json:"privacy,omitempty"`
	// The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
	RepoNames []string `json:"repo_names,omitempty"`
}

type TeamsCreateRequest struct {
	RequestBody TeamsCreateRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
}

type TeamsCreateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	TeamFull *shared.TeamFull
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
