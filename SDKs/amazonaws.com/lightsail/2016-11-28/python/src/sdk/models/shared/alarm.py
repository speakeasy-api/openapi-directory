"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import alarmstate_enum as shared_alarmstate_enum
from ..shared import comparisonoperator_enum as shared_comparisonoperator_enum
from ..shared import contactprotocol_enum as shared_contactprotocol_enum
from ..shared import metricname_enum as shared_metricname_enum
from ..shared import metricstatistic_enum as shared_metricstatistic_enum
from ..shared import metricunit_enum as shared_metricunit_enum
from ..shared import monitoredresourceinfo as shared_monitoredresourceinfo
from ..shared import resourcelocation as shared_resourcelocation
from ..shared import resourcetype_enum as shared_resourcetype_enum
from ..shared import treatmissingdata_enum as shared_treatmissingdata_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Alarm:
    r"""<p>Describes an alarm.</p> <p>An alarm is a way to monitor your Lightsail resource metrics. For more information, see <a href=\\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms\\">Alarms in Amazon Lightsail</a>.</p>"""
    
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    comparison_operator: Optional[shared_comparisonoperator_enum.ComparisonOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comparisonOperator'), 'exclude': lambda f: f is None }})  
    contact_protocols: Optional[list[shared_contactprotocol_enum.ContactProtocolEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactProtocols'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    datapoints_to_alarm: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datapointsToAlarm'), 'exclude': lambda f: f is None }})  
    evaluation_periods: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evaluationPeriods'), 'exclude': lambda f: f is None }})  
    location: Optional[shared_resourcelocation.ResourceLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    metric_name: Optional[shared_metricname_enum.MetricNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricName'), 'exclude': lambda f: f is None }})  
    monitored_resource_info: Optional[shared_monitoredresourceinfo.MonitoredResourceInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monitoredResourceInfo'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    notification_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationEnabled'), 'exclude': lambda f: f is None }})  
    notification_triggers: Optional[list[shared_alarmstate_enum.AlarmStateEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationTriggers'), 'exclude': lambda f: f is None }})  
    period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})  
    resource_type: Optional[shared_resourcetype_enum.ResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_alarmstate_enum.AlarmStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})  
    statistic: Optional[shared_metricstatistic_enum.MetricStatisticEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistic'), 'exclude': lambda f: f is None }})  
    support_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportCode'), 'exclude': lambda f: f is None }})  
    threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threshold'), 'exclude': lambda f: f is None }})  
    treat_missing_data: Optional[shared_treatmissingdata_enum.TreatMissingDataEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treatMissingData'), 'exclude': lambda f: f is None }})  
    unit: Optional[shared_metricunit_enum.MetricUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})  
    