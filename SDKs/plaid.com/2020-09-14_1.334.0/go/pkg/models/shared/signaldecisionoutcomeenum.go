// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SignalDecisionOutcomeEnum - The payment decision from the risk assessment.
//
// `APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.
//
// `REVIEW`: the transaction requires manual review
//
// `REJECT`: reject the transaction
//
// `TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication
//
// `NOT_EVALUATED`: if only logging the Signal results without using them
//
// Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED`
type SignalDecisionOutcomeEnum string

const (
	SignalDecisionOutcomeEnumApprove               SignalDecisionOutcomeEnum = "APPROVE"
	SignalDecisionOutcomeEnumReview                SignalDecisionOutcomeEnum = "REVIEW"
	SignalDecisionOutcomeEnumReject                SignalDecisionOutcomeEnum = "REJECT"
	SignalDecisionOutcomeEnumTakeOtherRiskMeasures SignalDecisionOutcomeEnum = "TAKE_OTHER_RISK_MEASURES"
	SignalDecisionOutcomeEnumNotEvaluated          SignalDecisionOutcomeEnum = "NOT_EVALUATED"
)

func (e *SignalDecisionOutcomeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "APPROVE":
		fallthrough
	case "REVIEW":
		fallthrough
	case "REJECT":
		fallthrough
	case "TAKE_OTHER_RISK_MEASURES":
		fallthrough
	case "NOT_EVALUATED":
		*e = SignalDecisionOutcomeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SignalDecisionOutcomeEnum: %s", s)
	}
}
