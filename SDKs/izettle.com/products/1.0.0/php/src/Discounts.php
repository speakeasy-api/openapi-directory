<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Discounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a discount
     * 
     * Creates a single discount entity. The location of the newly created discount will be available in the successful response as a HttpHeaders.LOCATION header
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDiscountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDiscountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDiscountResponse
     */
	public function createDiscount(
        \OpenAPI\OpenAPI\Models\Operations\CreateDiscountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDiscountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDiscountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/discounts', \OpenAPI\OpenAPI\Models\Operations\CreateDiscountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "discountRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDiscountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a single discount 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDiscountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDiscountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDiscountResponse
     */
	public function deleteDiscount(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDiscountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDiscountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDiscountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/discounts/{discountUuid}', \OpenAPI\OpenAPI\Models\Operations\DeleteDiscountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDiscountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Retrieve all discounts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllDiscountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllDiscountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllDiscountsResponse
     */
	public function getAllDiscounts(
        \OpenAPI\OpenAPI\Models\Operations\GetAllDiscountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAllDiscountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllDiscountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/discounts', \OpenAPI\OpenAPI\Models\Operations\GetAllDiscountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllDiscountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->discountResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DiscountResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single discount
     * 
     * Get the full discount with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full discount is returned: otherwise a 304 not modified will be returned with an empty body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiscountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiscountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiscountResponse
     */
	public function getDiscount(
        \OpenAPI\OpenAPI\Models\Operations\GetDiscountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDiscountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiscountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/discounts/{discountUuid}', \OpenAPI\OpenAPI\Models\Operations\GetDiscountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiscountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->discountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiscountResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a single discount
     * 
     * Updates a discount entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the discount is updated: otherwise a 412 precondition failed will be returned with an empty body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDiscountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDiscountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDiscountResponse
     */
	public function updateDiscount(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDiscountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDiscountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDiscountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/discounts/{discountUuid}', \OpenAPI\OpenAPI\Models\Operations\UpdateDiscountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "discountRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDiscountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
        }

        return $response;
    }
}