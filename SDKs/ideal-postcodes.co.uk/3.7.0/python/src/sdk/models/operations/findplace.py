"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import badrequestresponse as shared_badrequestresponse
from ..shared import biasipparam_enum as shared_biasipparam_enum
from ..shared import placeresponse as shared_placeresponse
from typing import Optional


@dataclasses.dataclass
class FindPlaceRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': False }})  
    bias_country_iso: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_country_iso', 'style': 'form', 'explode': False }})  
    bias_ip: Optional[shared_biasipparam_enum.BiasIPParamEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_ip', 'style': 'form', 'explode': False }})
    r"""Biases search based on approximate geolocation of IP address.
    Set `bias_ip=true` to enable.
    """  
    bias_lonlat: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_lonlat', 'style': 'form', 'explode': False }})  
    country_iso: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country_iso', 'style': 'form', 'explode': False }})  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': False }})
    r"""Specifies the place you wish to query. Query can be shortened to `q=`"""  
    

@dataclasses.dataclass
class FindPlaceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_response: Optional[shared_badrequestresponse.BadRequestResponse] = dataclasses.field(default=None)
    r"""Bad Request"""  
    place_response: Optional[shared_placeresponse.PlaceResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    