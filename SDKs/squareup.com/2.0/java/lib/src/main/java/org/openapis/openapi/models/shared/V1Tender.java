/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * V1Tender - A tender represents a discrete monetary exchange. Square represents this
 * exchange as a money object with a specific currency and amount, where the
 * amount is given in the smallest denomination of the given currency.
 * 
 * Square POS can accept more than one form of tender for a single payment (such
 * as by splitting a bill between a credit card and a gift card). The `tender`
 * field of the Payment object lists all forms of tender used for the payment.
 * 
 * Split tender payments behave slightly differently from single tender payments:
 * 
 * The receipt_url for a split tender corresponds only to the first tender listed
 * in the tender field. To get the receipt URLs for the remaining tenders, use
 * the receipt_url fields of the corresponding Tender objects.
 * 
 * *A note on gift cards**: when a customer purchases a Square gift card from a
 * merchant, the merchant receives the full amount of the gift card in the
 * associated payment.
 * 
 * When that gift card is used as a tender, the balance of the gift card is
 * reduced and the merchant receives no funds. A `Tender` object with a type of
 * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
 * associated payment.
 */
public class V1Tender {
    /**
     * The brand of credit card provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_brand")
    public String cardBrand;
    public V1Tender withCardBrand(String cardBrand) {
        this.cardBrand = cardBrand;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("change_back_money")
    public V1Money changeBackMoney;
    public V1Tender withChangeBackMoney(V1Money changeBackMoney) {
        this.changeBackMoney = changeBackMoney;
        return this;
    }
    
    /**
     * The ID of the employee that processed the tender.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    public String employeeId;
    public V1Tender withEmployeeId(String employeeId) {
        this.employeeId = employeeId;
        return this;
    }
    
    /**
     * The tender's unique ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entry_method")
    public String entryMethod;
    public V1Tender withEntryMethod(String entryMethod) {
        this.entryMethod = entryMethod;
        return this;
    }
    
    /**
     * The tender's unique ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public V1Tender withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_exchange")
    public Boolean isExchange;
    public V1Tender withIsExchange(Boolean isExchange) {
        this.isExchange = isExchange;
        return this;
    }
    
    /**
     * A human-readable description of the tender.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public V1Tender withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The last four digits of the provided credit card's account number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pan_suffix")
    public String panSuffix;
    public V1Tender withPanSuffix(String panSuffix) {
        this.panSuffix = panSuffix;
        return this;
    }
    
    /**
     * Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_note")
    public String paymentNote;
    public V1Tender withPaymentNote(String paymentNote) {
        this.paymentNote = paymentNote;
        return this;
    }
    
    /**
     * The URL of the receipt for the tender.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receipt_url")
    public String receiptUrl;
    public V1Tender withReceiptUrl(String receiptUrl) {
        this.receiptUrl = receiptUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_money")
    public V1Money refundedMoney;
    public V1Tender withRefundedMoney(V1Money refundedMoney) {
        this.refundedMoney = refundedMoney;
        return this;
    }
    
    /**
     * The time when the tender was settled, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settled_at")
    public String settledAt;
    public V1Tender withSettledAt(String settledAt) {
        this.settledAt = settledAt;
        return this;
    }
    
    /**
     * The time when the tender was created, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tendered_at")
    public String tenderedAt;
    public V1Tender withTenderedAt(String tenderedAt) {
        this.tenderedAt = tenderedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tendered_money")
    public V1Money tenderedMoney;
    public V1Tender withTenderedMoney(V1Money tenderedMoney) {
        this.tenderedMoney = tenderedMoney;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_money")
    public V1Money totalMoney;
    public V1Tender withTotalMoney(V1Money totalMoney) {
        this.totalMoney = totalMoney;
        return this;
    }
    
    /**
     * The type of tender.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public V1Tender withType(String type) {
        this.type = type;
        return this;
    }
    
}
