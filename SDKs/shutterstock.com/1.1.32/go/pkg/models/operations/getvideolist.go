// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetVideoListSecurity struct {
	Basic              *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// GetVideoListViewEnum - Amount of detail to render in the response
type GetVideoListViewEnum string

const (
	GetVideoListViewEnumMinimal GetVideoListViewEnum = "minimal"
	GetVideoListViewEnumFull    GetVideoListViewEnum = "full"
)

func (e GetVideoListViewEnum) ToPointer() *GetVideoListViewEnum {
	return &e
}

func (e *GetVideoListViewEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minimal":
		fallthrough
	case "full":
		*e = GetVideoListViewEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVideoListViewEnum: %v", v)
	}
}

type GetVideoListRequest struct {
	// One or more video IDs
	ID []string `queryParam:"style=form,explode=true,name=id"`
	// The ID of the search that is related to this request
	SearchID *string `queryParam:"style=form,explode=true,name=search_id"`
	// Amount of detail to render in the response
	View *GetVideoListViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type GetVideoListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	VideoDataList *shared.VideoDataList
}
