// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteApplicationXAmzTargetEnum
type DeleteApplicationXAmzTargetEnum string

const (
	DeleteApplicationXAmzTargetEnumCodeDeploy20141006DeleteApplication DeleteApplicationXAmzTargetEnum = "CodeDeploy_20141006.DeleteApplication"
)

func (e DeleteApplicationXAmzTargetEnum) ToPointer() *DeleteApplicationXAmzTargetEnum {
	return &e
}

func (e *DeleteApplicationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeDeploy_20141006.DeleteApplication":
		*e = DeleteApplicationXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteApplicationXAmzTargetEnum: %v", v)
	}
}

type DeleteApplicationRequest struct {
	DeleteApplicationInput shared.DeleteApplicationInput   `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             DeleteApplicationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteApplicationResponse struct {
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidRoleException
	InvalidRoleException interface{}
	StatusCode           int
	RawResponse          *http.Response
}
