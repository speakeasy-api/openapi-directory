/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * NFL projected stats API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "http://azure-api.sportsdata.io/v3/nfl/projections",
        "https://azure-api.sportsdata.io/v3/nfl/projections",
	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * DFS Slate Ownership Projections by SlateID
     * Slate Ownership Projections for a specific slate. Projections are for GPP format ownership. Will return an empty list if the slate is not yet projected or not a slate we have projections for.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DfsSlateOwnershipProjectionsBySlateidResponse dfsSlateOwnershipProjectionsBySlateid(org.openapis.openapi.models.operations.DfsSlateOwnershipProjectionsBySlateidRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DfsSlateOwnershipProjectionsBySlateidRequest.class, baseUrl, "/{format}/DfsSlateOwnershipProjectionsBySlateID/{slateId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DfsSlateOwnershipProjectionsBySlateidResponse res = new org.openapis.openapi.models.operations.DfsSlateOwnershipProjectionsBySlateidResponse() {{
            dfsSlateWithOwnershipProjection = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DfsSlateWithOwnershipProjection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DfsSlateWithOwnershipProjection.class);
                res.dfsSlateWithOwnershipProjection = out;
            }
        }

        return res;
    }

    /**
     * DFS Slates by Date
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DfsSlatesByDateResponse dfsSlatesByDate(org.openapis.openapi.models.operations.DfsSlatesByDateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DfsSlatesByDateRequest.class, baseUrl, "/{format}/DfsSlatesByDate/{date}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DfsSlatesByDateResponse res = new org.openapis.openapi.models.operations.DfsSlatesByDateResponse() {{
            dfsSlates = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DfsSlate[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DfsSlate[].class);
                res.dfsSlates = out;
            }
        }

        return res;
    }

    /**
     * DFS Slates by Week
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DfsSlatesByWeekResponse dfsSlatesByWeek(org.openapis.openapi.models.operations.DfsSlatesByWeekRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DfsSlatesByWeekRequest.class, baseUrl, "/{format}/DfsSlatesByWeek/{season}/{week}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DfsSlatesByWeekResponse res = new org.openapis.openapi.models.operations.DfsSlatesByWeekResponse() {{
            dfsSlates = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DfsSlate[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DfsSlate[].class);
                res.dfsSlates = out;
            }
        }

        return res;
    }

    /**
     * IDP Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest.class, baseUrl, "/{format}/IdpPlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse res = new org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse() {{
            playerGameProjection = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerGameProjection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerGameProjection.class);
                res.playerGameProjection = out;
            }
        }

        return res;
    }

    /**
     * IDP Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest.class, baseUrl, "/{format}/IdpPlayerGameProjectionStatsByTeam/{season}/{week}/{team}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse res = new org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse() {{
            playerGameProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerGameProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerGameProjection[].class);
                res.playerGameProjections = out;
            }
        }

        return res;
    }

    /**
     * IDP Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest.class, baseUrl, "/{format}/IdpPlayerGameProjectionStatsByWeek/{season}/{week}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse res = new org.openapis.openapi.models.operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse() {{
            playerGameProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerGameProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerGameProjection[].class);
                res.playerGameProjections = out;
            }
        }

        return res;
    }

    /**
     * Injured Players
     * This endpoint provides all currently injured NFL players, along with injury details.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InjuredPlayersResponse injuredPlayers(org.openapis.openapi.models.operations.InjuredPlayersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.InjuredPlayersRequest.class, baseUrl, "/{format}/InjuredPlayers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InjuredPlayersResponse res = new org.openapis.openapi.models.operations.InjuredPlayersResponse() {{
            players = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Player[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Player[].class);
                res.players = out;
            }
        }

        return res;
    }

    /**
     * Projected Fantasy Defense Game Stats (w/ DFS Salaries)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProjectedFantasyDefenseGameStatsWDfsSalariesResponse projectedFantasyDefenseGameStatsWDfsSalaries(org.openapis.openapi.models.operations.ProjectedFantasyDefenseGameStatsWDfsSalariesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProjectedFantasyDefenseGameStatsWDfsSalariesRequest.class, baseUrl, "/{format}/FantasyDefenseProjectionsByGame/{season}/{week}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProjectedFantasyDefenseGameStatsWDfsSalariesResponse res = new org.openapis.openapi.models.operations.ProjectedFantasyDefenseGameStatsWDfsSalariesResponse() {{
            fantasyDefenseGameProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FantasyDefenseGameProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FantasyDefenseGameProjection[].class);
                res.fantasyDefenseGameProjections = out;
            }
        }

        return res;
    }

    /**
     * Projected Fantasy Defense Season Stats (w/ ADP)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProjectedFantasyDefenseSeasonStatsWAdpResponse projectedFantasyDefenseSeasonStatsWAdp(org.openapis.openapi.models.operations.ProjectedFantasyDefenseSeasonStatsWAdpRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProjectedFantasyDefenseSeasonStatsWAdpRequest.class, baseUrl, "/{format}/FantasyDefenseProjectionsBySeason/{season}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProjectedFantasyDefenseSeasonStatsWAdpResponse res = new org.openapis.openapi.models.operations.ProjectedFantasyDefenseSeasonStatsWAdpResponse() {{
            fantasyDefenseSeasonProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FantasyDefenseSeasonProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FantasyDefenseSeasonProjection[].class);
                res.fantasyDefenseSeasonProjections = out;
            }
        }

        return res;
    }

    /**
     * Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest.class, baseUrl, "/{format}/PlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse res = new org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse() {{
            playerGameProjection = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerGameProjection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerGameProjection.class);
                res.playerGameProjection = out;
            }
        }

        return res;
    }

    /**
     * Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest.class, baseUrl, "/{format}/PlayerGameProjectionStatsByTeam/{season}/{week}/{team}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse res = new org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse() {{
            playerGameProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerGameProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerGameProjection[].class);
                res.playerGameProjections = out;
            }
        }

        return res;
    }

    /**
     * Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest.class, baseUrl, "/{format}/PlayerGameProjectionStatsByWeek/{season}/{week}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse res = new org.openapis.openapi.models.operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse() {{
            playerGameProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerGameProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerGameProjection[].class);
                res.playerGameProjections = out;
            }
        }

        return res;
    }

    /**
     * Projected Player Season Stats by Player (w/ ADP)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByPlayerWAdpResponse projectedPlayerSeasonStatsByPlayerWAdp(org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByPlayerWAdpRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByPlayerWAdpRequest.class, baseUrl, "/{format}/PlayerSeasonProjectionStatsByPlayerID/{season}/{playerid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByPlayerWAdpResponse res = new org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByPlayerWAdpResponse() {{
            playerSeasonProjection = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerSeasonProjection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerSeasonProjection.class);
                res.playerSeasonProjection = out;
            }
        }

        return res;
    }

    /**
     * Projected Player Season Stats by Team (w/ ADP)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByTeamWAdpResponse projectedPlayerSeasonStatsByTeamWAdp(org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByTeamWAdpRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByTeamWAdpRequest.class, baseUrl, "/{format}/PlayerSeasonProjectionStatsByTeam/{season}/{team}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByTeamWAdpResponse res = new org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsByTeamWAdpResponse() {{
            playerSeasonProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerSeasonProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerSeasonProjection[].class);
                res.playerSeasonProjections = out;
            }
        }

        return res;
    }

    /**
     * Projected Player Season Stats (w/ ADP)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsWAdpResponse projectedPlayerSeasonStatsWAdp(org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsWAdpRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsWAdpRequest.class, baseUrl, "/{format}/PlayerSeasonProjectionStats/{season}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsWAdpResponse res = new org.openapis.openapi.models.operations.ProjectedPlayerSeasonStatsWAdpResponse() {{
            playerSeasonProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PlayerSeasonProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PlayerSeasonProjection[].class);
                res.playerSeasonProjections = out;
            }
        }

        return res;
    }

    /**
     * Upcoming DFS Slate Ownership Projections
     * Grabs DFS Slates which have not yet started for which we have DFS Ownership projections. 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpcomingDfsSlateOwnershipProjectionsResponse upcomingDfsSlateOwnershipProjections(org.openapis.openapi.models.operations.UpcomingDfsSlateOwnershipProjectionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpcomingDfsSlateOwnershipProjectionsRequest.class, baseUrl, "/{format}/UpcomingDfsSlateOwnershipProjections", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpcomingDfsSlateOwnershipProjectionsResponse res = new org.openapis.openapi.models.operations.UpcomingDfsSlateOwnershipProjectionsResponse() {{
            dfsSlateWithOwnershipProjections = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DfsSlateWithOwnershipProjection[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DfsSlateWithOwnershipProjection[].class);
                res.dfsSlateWithOwnershipProjections = out;
            }
        }

        return res;
    }
}