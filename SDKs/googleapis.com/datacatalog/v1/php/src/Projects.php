<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an entry group. An entry group contains logically related entries together with [Cloud Identity and Access Management](/data-catalog/docs/concepts/iam) policies. These policies specify users who can create, edit, and view entries within entry groups. Data Catalog automatically creates entry groups with names that start with the `@` symbol for the following resources: * BigQuery entries (`@bigquery`) * Pub/Sub topics (`@pubsub`) * Dataproc Metastore services (`@dataproc_metastore_{SERVICE_NAME_HASH}`) You can create your own entry groups for Cloud Storage fileset entries and custom entries together with the corresponding IAM policies. User-created entry groups can't contain the `@` symbol, it is reserved for automatically created groups. Entry groups, like entries, can be searched. A maximum of 10,000 entry groups may be created per organization across all locations. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/entryGroups', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1EntryGroupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1EntryGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1EntryGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an entry. You can create entries only with 'FILESET', 'CLUSTER', 'DATA_STREAM', or custom types. Data Catalog automatically creates entries with other types during metadata ingestion from integrated systems. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). An entry group can have a maximum of 100,000 entries.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/entries', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1EntryInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1Entry = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1Entry', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports entries from a source, such as data previously dumped into a Cloud Storage bucket, into Data Catalog. Import of entries is a sync operation that reconciles the state of the third-party system with the Data Catalog. `ImportEntries` accepts source data snapshots of a third-party system. Snapshot should be delivered as a .wire or base65-encoded .txt file containing a sequence of Protocol Buffer messages of DumpItem type. `ImportEntries` returns a long-running operation resource that can be queried with Operations.GetOperation to return ImportEntriesMetadata and an ImportEntriesResponse message.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesImport(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/entries:import', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1ImportEntriesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists entries. Note: Currently, this method can list only custom entries. To get a list of both custom and automatically created entries, use SearchCatalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/entries', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1ListEntriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1ListEntriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies contacts, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateContacts` IAM permission on the corresponding project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContacts(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:modifyEntryContacts', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1ModifyEntryContactsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1Contacts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1Contacts', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies entry overview, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateOverview` IAM permission on the corresponding project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverview(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:modifyEntryOverview', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1ModifyEntryOverviewRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1EntryOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1EntryOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks an Entry as starred by the current user. Starring information is private to each user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesStar(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:star', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesStarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1StarEntryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * `ReconcileTags` creates or updates a list of tags on the entry. If the ReconcileTagsRequest.force_delete_missing parameter is set, the operation deletes tags not included in the input tag list. `ReconcileTags` returns a long-running operation resource that can be queried with Operations.GetOperation to return ReconcileTagsMetadata and a ReconcileTagsResponse message.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesTagsReconcile(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/tags:reconcile', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1ReconcileTagsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks an Entry as NOT starred by the current user. Starring information is private to each user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesUnstar(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:unstar', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesUnstarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1UnstarEntryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists entry groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/entryGroups', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1ListEntryGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1ListEntryGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsTagsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/tags', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1TagInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1Tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1Tag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists tags assigned to an Entry. The columns in the response are lowercased.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsTagsList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/tags', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1ListTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1ListTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelResponse
     */
	public function datacatalogProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListResponse
     */
	public function datacatalogProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateResponse
     */
	public function datacatalogProjectsLocationsTagTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/tagTemplates', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1TagTemplateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1TagTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1TagTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a field in a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse
     */
	public function datacatalogProjectsLocationsTagTemplatesFieldsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/fields', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1TagTemplateFieldInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1TagTemplateField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1TagTemplateField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renames an enum value in a tag template. Within a single enum field, enum values must be unique.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse
     */
	public function datacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRename(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:rename', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1TagTemplateField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1TagTemplateField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn't contain policy tags.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/taxonomies', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1TaxonomyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1Taxonomy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1Taxonomy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports taxonomies in the requested type and returns them, including their policy tags. The requested taxonomies must belong to the same project. This method generates `SerializedTaxonomy` protocol buffers with nested policy tags that can be used as input for `ImportTaxonomies` calls.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesExport(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/taxonomies:export', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1ExportTaxonomiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1ExportTaxonomiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates new taxonomies (including their policy tags) in a given project by importing from inlined or cross-regional sources. For a cross-regional source, new taxonomies are created by copying from a source in another region. For an inlined source, taxonomies and policy tags are created in bulk using nested protocol buffer structures.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesImport(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/taxonomies:import', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1ImportTaxonomiesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1ImportTaxonomiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1ImportTaxonomiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all taxonomies in a project in a particular location that you have a permission to view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/taxonomies', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1ListTaxonomiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1ListTaxonomiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a policy tag in a taxonomy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/policyTags', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1PolicyTagInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1PolicyTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1PolicyTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a policy tag together with the following: * All of its descendant policy tags, if any * Policies associated with the policy tag and its descendants * References from BigQuery table schema of the policy tag and its descendants
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a policy tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsGet(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1PolicyTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1PolicyTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the IAM policy for a policy tag or a taxonomy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all policy tags in a taxonomy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/policyTags', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1ListPolicyTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1ListPolicyTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a policy tag, including its display name, description, and parent policy tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1PolicyTagInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1PolicyTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1PolicyTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the IAM policy for a policy tag or a taxonomy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns your permissions on a specified policy tag or taxonomy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by `SerializedTaxonomy` and the nested `SerializedPolicyTag` messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the `SerializedPolicyTag`. - Creates policy tags that don't have resource names. They are considered new. - Updates policy tags with valid resources names accordingly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesReplace(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:replace', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1ReplaceTaxonomyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1Taxonomy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1Taxonomy', 'json');
            }
        }

        return $response;
    }
}