"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import documentattribute as shared_documentattribute
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttributeFilter:
    r"""<p>Provides filtering the query results based on document attributes or metadata fields.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualsTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message \\"<code>AttributeFilter</code> cannot have a depth of more than 2.\\"</p> <p>If you use more than 10 attribute filters in a given list for <code>AndAllFilters</code> or <code>OrAllFilters</code>, you receive a <code>ValidationException</code> with the message \\"<code>AttributeFilter</code> cannot have a length of more than 10\\".</p>"""
    
    and_all_filters: Optional[list[AttributeFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AndAllFilters'), 'exclude': lambda f: f is None }})  
    contains_all: Optional[shared_documentattribute.DocumentAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainsAll'), 'exclude': lambda f: f is None }})  
    contains_any: Optional[shared_documentattribute.DocumentAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainsAny'), 'exclude': lambda f: f is None }})  
    equals_to: Optional[shared_documentattribute.DocumentAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EqualsTo'), 'exclude': lambda f: f is None }})  
    greater_than: Optional[shared_documentattribute.DocumentAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GreaterThan'), 'exclude': lambda f: f is None }})  
    greater_than_or_equals: Optional[shared_documentattribute.DocumentAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GreaterThanOrEquals'), 'exclude': lambda f: f is None }})  
    less_than: Optional[shared_documentattribute.DocumentAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LessThan'), 'exclude': lambda f: f is None }})  
    less_than_or_equals: Optional[shared_documentattribute.DocumentAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LessThanOrEquals'), 'exclude': lambda f: f is None }})  
    not_filter: Optional[AttributeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotFilter'), 'exclude': lambda f: f is None }})  
    or_all_filters: Optional[list[AttributeFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrAllFilters'), 'exclude': lambda f: f is None }})  
    