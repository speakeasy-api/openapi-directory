<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PolicyObjects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new Policy Object.
     * 
     * Creates a new Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse
     */
	public function createOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationPolicyObject201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Policy Object Group.
     * 
     * Creates a new Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse
     */
	public function createOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationPolicyObjectsGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Policy Object.
     * 
     * Deletes a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse
     */
	public function deleteOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a Policy Object Group.
     * 
     * Deletes a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse
     */
	public function deleteOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Shows details of a Policy Object.
     * 
     * Shows details of a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse
     */
	public function getOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObject200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Policy Objects belonging to the organization.
     * 
     * Lists Policy Objects belonging to the organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse
     */
	public function getOrganizationPolicyObjects(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjects200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Shows details of a Policy Object Group.
     * 
     * Shows details of a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse
     */
	public function getOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjectsGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Policy Object Groups belonging to the organization.
     * 
     * Lists Policy Object Groups belonging to the organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse
     */
	public function getOrganizationPolicyObjectsGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjectsGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Policy Object.
     * 
     * Updates a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse
     */
	public function updateOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationPolicyObject200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Policy Object Group.
     * 
     * Updates a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse
     */
	public function updateOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationPolicyObjectsGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}