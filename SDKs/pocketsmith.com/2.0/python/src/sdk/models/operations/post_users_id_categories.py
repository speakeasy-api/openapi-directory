"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import category as shared_category
from ..shared import error as shared_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostUsersIDCategoriesRequestBodyRefundBehaviourEnum(str, Enum):
    r"""Set the refund behaviour of the category."""
    DEBITS_ARE_DEDUCTIONS = 'debits_are_deductions'
    CREDITS_ARE_REFUNDS = 'credits_are_refunds'
    NULL = 'null'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostUsersIDCategoriesRequestBody:
    
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""A title for the category."""  
    colour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colour'), 'exclude': lambda f: f is None }})
    r"""A CSS-style hex colour for the category."""  
    is_bill: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_bill'), 'exclude': lambda f: f is None }})
    r"""Set the category as a bill category."""  
    is_transfer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_transfer'), 'exclude': lambda f: f is None }})
    r"""Set the category as a transfer category."""  
    parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of a category to be the parent of this category."""  
    refund_behaviour: Optional[PostUsersIDCategoriesRequestBodyRefundBehaviourEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refund_behaviour'), 'exclude': lambda f: f is None }})
    r"""Set the refund behaviour of the category."""  
    roll_up: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roll_up'), 'exclude': lambda f: f is None }})
    r"""Set the category to be rolled up into its parent category."""  
    

@dataclasses.dataclass
class PostUsersIDCategoriesRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the user."""  
    request_body: Optional[PostUsersIDCategoriesRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class PostUsersIDCategoriesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    category: Optional[shared_category.Category] = dataclasses.field(default=None)
    r"""Success"""  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Not Allowed"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    