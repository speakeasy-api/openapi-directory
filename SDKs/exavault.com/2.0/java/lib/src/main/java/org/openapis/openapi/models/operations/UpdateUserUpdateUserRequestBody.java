/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateUserUpdateUserRequestBody {
    /**
     * Email address for the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public UpdateUserUpdateUserRequestBody withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Optional timestamp when the user should expire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration")
    public String expiration;
    public UpdateUserUpdateUserRequestBody withExpiration(String expiration) {
        this.expiration = expiration;
        return this;
    }
    
    /**
     * Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.
     * 
     * The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user logs in.
     * 
     * This setting is ignored for users with the `role` **admin**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homeResource")
    public String homeResource;
    public UpdateUserUpdateUserRequestBody withHomeResource(String homeResource) {
        this.homeResource = homeResource;
        return this;
    }
    
    /**
     * If true, the user will be prevented from logging in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    public Boolean locked;
    public UpdateUserUpdateUserRequestBody withLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }
    
    /**
     * An optional nickname (e.g. 'David from Sales').
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickname")
    public String nickname;
    public UpdateUserUpdateUserRequestBody withNickname(String nickname) {
        this.nickname = nickname;
        return this;
    }
    
    /**
     * Set this to **true** to enable extra help popups in the web file manager for this user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarding")
    public Boolean onboarding;
    public UpdateUserUpdateUserRequestBody withOnboarding(Boolean onboarding) {
        this.onboarding = onboarding;
        return this;
    }
    
    /**
     * New password for the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public UpdateUserUpdateUserRequestBody withPassword(String password) {
        this.password = password;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public org.openapis.openapi.models.shared.UserPermissions permissions;
    public UpdateUserUpdateUserRequestBody withPermissions(org.openapis.openapi.models.shared.UserPermissions permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * The type of user (**admin** or **user**). Note that admin users cannot have a `homeResource` other than '/', and will have full permissions, but you must provide at least "download,upload,list,delete" in the `permissions` parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public UpdateUserUpdateUserRequestBodyRoleEnum role;
    public UpdateUserUpdateUserRequestBody withRole(UpdateUserUpdateUserRequestBodyRoleEnum role) {
        this.role = role;
        return this;
    }
    
    /**
     * Time zone, used for accurate time display within the application. See &lt;a href='https://php.net/manual/en/timezones.php' target='blank'&gt;this page&lt;/a&gt; for allowed values.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    public String timeZone;
    public UpdateUserUpdateUserRequestBody withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * New username for the user. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.
     * 
     * **Note** Usernames must be unique across all ExaVault accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public UpdateUserUpdateUserRequestBody withUsername(String username) {
        this.username = username;
        return this;
    }
    
}
