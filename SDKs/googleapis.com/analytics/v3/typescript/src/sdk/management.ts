/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Management {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.
   */
  analyticsManagementAccountSummariesList(
    req: operations.AnalyticsManagementAccountSummariesListRequest,
    security: operations.AnalyticsManagementAccountSummariesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementAccountSummariesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementAccountSummariesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/management/accountSummaries";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementAccountSummariesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementAccountSummariesListResponse =
        new operations.AnalyticsManagementAccountSummariesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountSummaries = utils.objectToClass(
              httpRes?.data,
              shared.AccountSummaries
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes a user from the given account.
   */
  analyticsManagementAccountUserLinksDelete(
    req: operations.AnalyticsManagementAccountUserLinksDeleteRequest,
    security: operations.AnalyticsManagementAccountUserLinksDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementAccountUserLinksDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementAccountUserLinksDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/entityUserLinks/{linkId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementAccountUserLinksDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementAccountUserLinksDeleteResponse =
        new operations.AnalyticsManagementAccountUserLinksDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Adds a new user to the given account.
   */
  analyticsManagementAccountUserLinksInsert(
    req: operations.AnalyticsManagementAccountUserLinksInsertRequest,
    security: operations.AnalyticsManagementAccountUserLinksInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementAccountUserLinksInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementAccountUserLinksInsertRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/entityUserLinks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityUserLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementAccountUserLinksInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementAccountUserLinksInsertResponse =
        new operations.AnalyticsManagementAccountUserLinksInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists account-user links for a given account.
   */
  analyticsManagementAccountUserLinksList(
    req: operations.AnalyticsManagementAccountUserLinksListRequest,
    security: operations.AnalyticsManagementAccountUserLinksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementAccountUserLinksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementAccountUserLinksListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/entityUserLinks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementAccountUserLinksListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementAccountUserLinksListResponse =
        new operations.AnalyticsManagementAccountUserLinksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLinks = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLinks
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates permissions for an existing user on the given account.
   */
  analyticsManagementAccountUserLinksUpdate(
    req: operations.AnalyticsManagementAccountUserLinksUpdateRequest,
    security: operations.AnalyticsManagementAccountUserLinksUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementAccountUserLinksUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementAccountUserLinksUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/entityUserLinks/{linkId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityUserLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementAccountUserLinksUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementAccountUserLinksUpdateResponse =
        new operations.AnalyticsManagementAccountUserLinksUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all accounts to which the user has access.
   */
  analyticsManagementAccountsList(
    req: operations.AnalyticsManagementAccountsListRequest,
    security: operations.AnalyticsManagementAccountsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementAccountsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementAccountsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/management/accounts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementAccountsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementAccountsListResponse =
        new operations.AnalyticsManagementAccountsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accounts = utils.objectToClass(httpRes?.data, shared.Accounts);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Hashes the given Client ID.
   */
  analyticsManagementClientIdHashClientId(
    req: operations.AnalyticsManagementClientIdHashClientIdRequest,
    security: operations.AnalyticsManagementClientIdHashClientIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementClientIdHashClientIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementClientIdHashClientIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/management/clientId:hashClientId";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "hashClientIdRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementClientIdHashClientIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementClientIdHashClientIdResponse =
        new operations.AnalyticsManagementClientIdHashClientIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hashClientIdResponse = utils.objectToClass(
              httpRes?.data,
              shared.HashClientIdResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List custom data sources to which the user has access.
   */
  analyticsManagementCustomDataSourcesList(
    req: operations.AnalyticsManagementCustomDataSourcesListRequest,
    security: operations.AnalyticsManagementCustomDataSourcesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomDataSourcesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomDataSourcesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementCustomDataSourcesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomDataSourcesListResponse =
        new operations.AnalyticsManagementCustomDataSourcesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDataSources = utils.objectToClass(
              httpRes?.data,
              shared.CustomDataSources
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a custom dimension to which the user has access.
   */
  analyticsManagementCustomDimensionsGet(
    req: operations.AnalyticsManagementCustomDimensionsGetRequest,
    security: operations.AnalyticsManagementCustomDimensionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomDimensionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomDimensionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementCustomDimensionsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomDimensionsGetResponse =
        new operations.AnalyticsManagementCustomDimensionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDimension = utils.objectToClass(
              httpRes?.data,
              shared.CustomDimension
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new custom dimension.
   */
  analyticsManagementCustomDimensionsInsert(
    req: operations.AnalyticsManagementCustomDimensionsInsertRequest,
    security: operations.AnalyticsManagementCustomDimensionsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomDimensionsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomDimensionsInsertRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customDimensionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementCustomDimensionsInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomDimensionsInsertResponse =
        new operations.AnalyticsManagementCustomDimensionsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDimension = utils.objectToClass(
              httpRes?.data,
              shared.CustomDimension
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists custom dimensions to which the user has access.
   */
  analyticsManagementCustomDimensionsList(
    req: operations.AnalyticsManagementCustomDimensionsListRequest,
    security: operations.AnalyticsManagementCustomDimensionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomDimensionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomDimensionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementCustomDimensionsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomDimensionsListResponse =
        new operations.AnalyticsManagementCustomDimensionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDimensions = utils.objectToClass(
              httpRes?.data,
              shared.CustomDimensions
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing custom dimension. This method supports patch semantics.
   */
  analyticsManagementCustomDimensionsPatch(
    req: operations.AnalyticsManagementCustomDimensionsPatchRequest,
    security: operations.AnalyticsManagementCustomDimensionsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomDimensionsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomDimensionsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customDimensionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementCustomDimensionsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomDimensionsPatchResponse =
        new operations.AnalyticsManagementCustomDimensionsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDimension = utils.objectToClass(
              httpRes?.data,
              shared.CustomDimension
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing custom dimension.
   */
  analyticsManagementCustomDimensionsUpdate(
    req: operations.AnalyticsManagementCustomDimensionsUpdateRequest,
    security: operations.AnalyticsManagementCustomDimensionsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomDimensionsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomDimensionsUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customDimensionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementCustomDimensionsUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomDimensionsUpdateResponse =
        new operations.AnalyticsManagementCustomDimensionsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDimension = utils.objectToClass(
              httpRes?.data,
              shared.CustomDimension
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a custom metric to which the user has access.
   */
  analyticsManagementCustomMetricsGet(
    req: operations.AnalyticsManagementCustomMetricsGetRequest,
    security: operations.AnalyticsManagementCustomMetricsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomMetricsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomMetricsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementCustomMetricsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomMetricsGetResponse =
        new operations.AnalyticsManagementCustomMetricsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customMetric = utils.objectToClass(
              httpRes?.data,
              shared.CustomMetric
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new custom metric.
   */
  analyticsManagementCustomMetricsInsert(
    req: operations.AnalyticsManagementCustomMetricsInsertRequest,
    security: operations.AnalyticsManagementCustomMetricsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomMetricsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomMetricsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customMetricInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementCustomMetricsInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomMetricsInsertResponse =
        new operations.AnalyticsManagementCustomMetricsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customMetric = utils.objectToClass(
              httpRes?.data,
              shared.CustomMetric
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists custom metrics to which the user has access.
   */
  analyticsManagementCustomMetricsList(
    req: operations.AnalyticsManagementCustomMetricsListRequest,
    security: operations.AnalyticsManagementCustomMetricsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomMetricsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomMetricsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementCustomMetricsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomMetricsListResponse =
        new operations.AnalyticsManagementCustomMetricsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customMetrics = utils.objectToClass(
              httpRes?.data,
              shared.CustomMetrics
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing custom metric. This method supports patch semantics.
   */
  analyticsManagementCustomMetricsPatch(
    req: operations.AnalyticsManagementCustomMetricsPatchRequest,
    security: operations.AnalyticsManagementCustomMetricsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomMetricsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomMetricsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customMetricInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementCustomMetricsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomMetricsPatchResponse =
        new operations.AnalyticsManagementCustomMetricsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customMetric = utils.objectToClass(
              httpRes?.data,
              shared.CustomMetric
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing custom metric.
   */
  analyticsManagementCustomMetricsUpdate(
    req: operations.AnalyticsManagementCustomMetricsUpdateRequest,
    security: operations.AnalyticsManagementCustomMetricsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementCustomMetricsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementCustomMetricsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customMetricInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementCustomMetricsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementCustomMetricsUpdateResponse =
        new operations.AnalyticsManagementCustomMetricsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customMetric = utils.objectToClass(
              httpRes?.data,
              shared.CustomMetric
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an experiment.
   */
  analyticsManagementExperimentsDelete(
    req: operations.AnalyticsManagementExperimentsDeleteRequest,
    security: operations.AnalyticsManagementExperimentsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementExperimentsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementExperimentsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementExperimentsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementExperimentsDeleteResponse =
        new operations.AnalyticsManagementExperimentsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Returns an experiment to which the user has access.
   */
  analyticsManagementExperimentsGet(
    req: operations.AnalyticsManagementExperimentsGetRequest,
    security: operations.AnalyticsManagementExperimentsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementExperimentsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementExperimentsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementExperimentsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementExperimentsGetResponse =
        new operations.AnalyticsManagementExperimentsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.experiment = utils.objectToClass(
              httpRes?.data,
              shared.Experiment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new experiment.
   */
  analyticsManagementExperimentsInsert(
    req: operations.AnalyticsManagementExperimentsInsertRequest,
    security: operations.AnalyticsManagementExperimentsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementExperimentsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementExperimentsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "experiment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementExperimentsInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementExperimentsInsertResponse =
        new operations.AnalyticsManagementExperimentsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.experiment = utils.objectToClass(
              httpRes?.data,
              shared.Experiment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists experiments to which the user has access.
   */
  analyticsManagementExperimentsList(
    req: operations.AnalyticsManagementExperimentsListRequest,
    security: operations.AnalyticsManagementExperimentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementExperimentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementExperimentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementExperimentsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementExperimentsListResponse =
        new operations.AnalyticsManagementExperimentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.experiments = utils.objectToClass(
              httpRes?.data,
              shared.Experiments
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing experiment. This method supports patch semantics.
   */
  analyticsManagementExperimentsPatch(
    req: operations.AnalyticsManagementExperimentsPatchRequest,
    security: operations.AnalyticsManagementExperimentsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementExperimentsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementExperimentsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "experiment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementExperimentsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementExperimentsPatchResponse =
        new operations.AnalyticsManagementExperimentsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.experiment = utils.objectToClass(
              httpRes?.data,
              shared.Experiment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing experiment.
   */
  analyticsManagementExperimentsUpdate(
    req: operations.AnalyticsManagementExperimentsUpdateRequest,
    security: operations.AnalyticsManagementExperimentsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementExperimentsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementExperimentsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "experiment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementExperimentsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementExperimentsUpdateResponse =
        new operations.AnalyticsManagementExperimentsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.experiment = utils.objectToClass(
              httpRes?.data,
              shared.Experiment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a filter.
   */
  analyticsManagementFiltersDelete(
    req: operations.AnalyticsManagementFiltersDeleteRequest,
    security: operations.AnalyticsManagementFiltersDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementFiltersDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementFiltersDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/filters/{filterId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementFiltersDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementFiltersDeleteResponse =
        new operations.AnalyticsManagementFiltersDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filter = utils.objectToClass(httpRes?.data, shared.Filter);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns filters to which the user has access.
   */
  analyticsManagementFiltersGet(
    req: operations.AnalyticsManagementFiltersGetRequest,
    security: operations.AnalyticsManagementFiltersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementFiltersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementFiltersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/filters/{filterId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementFiltersGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementFiltersGetResponse =
        new operations.AnalyticsManagementFiltersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filter = utils.objectToClass(httpRes?.data, shared.Filter);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new filter.
   */
  analyticsManagementFiltersInsert(
    req: operations.AnalyticsManagementFiltersInsertRequest,
    security: operations.AnalyticsManagementFiltersInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementFiltersInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementFiltersInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/filters",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "filterInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementFiltersInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementFiltersInsertResponse =
        new operations.AnalyticsManagementFiltersInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filter = utils.objectToClass(httpRes?.data, shared.Filter);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all filters for an account
   */
  analyticsManagementFiltersList(
    req: operations.AnalyticsManagementFiltersListRequest,
    security: operations.AnalyticsManagementFiltersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementFiltersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementFiltersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/filters",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementFiltersListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementFiltersListResponse =
        new operations.AnalyticsManagementFiltersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filters = utils.objectToClass(httpRes?.data, shared.Filters);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing filter. This method supports patch semantics.
   */
  analyticsManagementFiltersPatch(
    req: operations.AnalyticsManagementFiltersPatchRequest,
    security: operations.AnalyticsManagementFiltersPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementFiltersPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementFiltersPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/filters/{filterId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "filterInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementFiltersPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementFiltersPatchResponse =
        new operations.AnalyticsManagementFiltersPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filter = utils.objectToClass(httpRes?.data, shared.Filter);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing filter.
   */
  analyticsManagementFiltersUpdate(
    req: operations.AnalyticsManagementFiltersUpdateRequest,
    security: operations.AnalyticsManagementFiltersUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementFiltersUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementFiltersUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/filters/{filterId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "filterInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementFiltersUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementFiltersUpdateResponse =
        new operations.AnalyticsManagementFiltersUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filter = utils.objectToClass(httpRes?.data, shared.Filter);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a goal to which the user has access.
   */
  analyticsManagementGoalsGet(
    req: operations.AnalyticsManagementGoalsGetRequest,
    security: operations.AnalyticsManagementGoalsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementGoalsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementGoalsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementGoalsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementGoalsGetResponse =
        new operations.AnalyticsManagementGoalsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.goal = utils.objectToClass(httpRes?.data, shared.Goal);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new goal.
   */
  analyticsManagementGoalsInsert(
    req: operations.AnalyticsManagementGoalsInsertRequest,
    security: operations.AnalyticsManagementGoalsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementGoalsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementGoalsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "goal",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementGoalsInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementGoalsInsertResponse =
        new operations.AnalyticsManagementGoalsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.goal = utils.objectToClass(httpRes?.data, shared.Goal);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists goals to which the user has access.
   */
  analyticsManagementGoalsList(
    req: operations.AnalyticsManagementGoalsListRequest,
    security: operations.AnalyticsManagementGoalsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementGoalsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementGoalsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementGoalsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementGoalsListResponse =
        new operations.AnalyticsManagementGoalsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.goals = utils.objectToClass(httpRes?.data, shared.Goals);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing goal. This method supports patch semantics.
   */
  analyticsManagementGoalsPatch(
    req: operations.AnalyticsManagementGoalsPatchRequest,
    security: operations.AnalyticsManagementGoalsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementGoalsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementGoalsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "goal",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementGoalsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementGoalsPatchResponse =
        new operations.AnalyticsManagementGoalsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.goal = utils.objectToClass(httpRes?.data, shared.Goal);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing goal.
   */
  analyticsManagementGoalsUpdate(
    req: operations.AnalyticsManagementGoalsUpdateRequest,
    security: operations.AnalyticsManagementGoalsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementGoalsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementGoalsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "goal",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementGoalsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementGoalsUpdateResponse =
        new operations.AnalyticsManagementGoalsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.goal = utils.objectToClass(httpRes?.data, shared.Goal);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a profile filter link.
   */
  analyticsManagementProfileFilterLinksDelete(
    req: operations.AnalyticsManagementProfileFilterLinksDeleteRequest,
    security: operations.AnalyticsManagementProfileFilterLinksDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileFilterLinksDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileFilterLinksDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileFilterLinksDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileFilterLinksDeleteResponse =
        new operations.AnalyticsManagementProfileFilterLinksDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single profile filter link.
   */
  analyticsManagementProfileFilterLinksGet(
    req: operations.AnalyticsManagementProfileFilterLinksGetRequest,
    security: operations.AnalyticsManagementProfileFilterLinksGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileFilterLinksGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileFilterLinksGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileFilterLinksGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileFilterLinksGetResponse =
        new operations.AnalyticsManagementProfileFilterLinksGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profileFilterLink = utils.objectToClass(
              httpRes?.data,
              shared.ProfileFilterLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new profile filter link.
   */
  analyticsManagementProfileFilterLinksInsert(
    req: operations.AnalyticsManagementProfileFilterLinksInsertRequest,
    security: operations.AnalyticsManagementProfileFilterLinksInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileFilterLinksInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileFilterLinksInsertRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "profileFilterLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileFilterLinksInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileFilterLinksInsertResponse =
        new operations.AnalyticsManagementProfileFilterLinksInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profileFilterLink = utils.objectToClass(
              httpRes?.data,
              shared.ProfileFilterLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all profile filter links for a profile.
   */
  analyticsManagementProfileFilterLinksList(
    req: operations.AnalyticsManagementProfileFilterLinksListRequest,
    security: operations.AnalyticsManagementProfileFilterLinksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileFilterLinksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileFilterLinksListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileFilterLinksListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileFilterLinksListResponse =
        new operations.AnalyticsManagementProfileFilterLinksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profileFilterLinks = utils.objectToClass(
              httpRes?.data,
              shared.ProfileFilterLinks
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing profile filter link. This method supports patch semantics.
   */
  analyticsManagementProfileFilterLinksPatch(
    req: operations.AnalyticsManagementProfileFilterLinksPatchRequest,
    security: operations.AnalyticsManagementProfileFilterLinksPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileFilterLinksPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileFilterLinksPatchRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "profileFilterLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileFilterLinksPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileFilterLinksPatchResponse =
        new operations.AnalyticsManagementProfileFilterLinksPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profileFilterLink = utils.objectToClass(
              httpRes?.data,
              shared.ProfileFilterLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing profile filter link.
   */
  analyticsManagementProfileFilterLinksUpdate(
    req: operations.AnalyticsManagementProfileFilterLinksUpdateRequest,
    security: operations.AnalyticsManagementProfileFilterLinksUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileFilterLinksUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileFilterLinksUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "profileFilterLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileFilterLinksUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileFilterLinksUpdateResponse =
        new operations.AnalyticsManagementProfileFilterLinksUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profileFilterLink = utils.objectToClass(
              httpRes?.data,
              shared.ProfileFilterLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes a user from the given view (profile).
   */
  analyticsManagementProfileUserLinksDelete(
    req: operations.AnalyticsManagementProfileUserLinksDeleteRequest,
    security: operations.AnalyticsManagementProfileUserLinksDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileUserLinksDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileUserLinksDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileUserLinksDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileUserLinksDeleteResponse =
        new operations.AnalyticsManagementProfileUserLinksDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Adds a new user to the given view (profile).
   */
  analyticsManagementProfileUserLinksInsert(
    req: operations.AnalyticsManagementProfileUserLinksInsertRequest,
    security: operations.AnalyticsManagementProfileUserLinksInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileUserLinksInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileUserLinksInsertRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityUserLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileUserLinksInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileUserLinksInsertResponse =
        new operations.AnalyticsManagementProfileUserLinksInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists profile-user links for a given view (profile).
   */
  analyticsManagementProfileUserLinksList(
    req: operations.AnalyticsManagementProfileUserLinksListRequest,
    security: operations.AnalyticsManagementProfileUserLinksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileUserLinksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileUserLinksListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementProfileUserLinksListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileUserLinksListResponse =
        new operations.AnalyticsManagementProfileUserLinksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLinks = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLinks
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates permissions for an existing user on the given view (profile).
   */
  analyticsManagementProfileUserLinksUpdate(
    req: operations.AnalyticsManagementProfileUserLinksUpdateRequest,
    security: operations.AnalyticsManagementProfileUserLinksUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfileUserLinksUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfileUserLinksUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityUserLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementProfileUserLinksUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfileUserLinksUpdateResponse =
        new operations.AnalyticsManagementProfileUserLinksUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a view (profile).
   */
  analyticsManagementProfilesDelete(
    req: operations.AnalyticsManagementProfilesDeleteRequest,
    security: operations.AnalyticsManagementProfilesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfilesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfilesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementProfilesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfilesDeleteResponse =
        new operations.AnalyticsManagementProfilesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a view (profile) to which the user has access.
   */
  analyticsManagementProfilesGet(
    req: operations.AnalyticsManagementProfilesGetRequest,
    security: operations.AnalyticsManagementProfilesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfilesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfilesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementProfilesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfilesGetResponse =
        new operations.AnalyticsManagementProfilesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profile = utils.objectToClass(httpRes?.data, shared.Profile);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new view (profile).
   */
  analyticsManagementProfilesInsert(
    req: operations.AnalyticsManagementProfilesInsertRequest,
    security: operations.AnalyticsManagementProfilesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfilesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfilesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "profileInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementProfilesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfilesInsertResponse =
        new operations.AnalyticsManagementProfilesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profile = utils.objectToClass(httpRes?.data, shared.Profile);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists views (profiles) to which the user has access.
   */
  analyticsManagementProfilesList(
    req: operations.AnalyticsManagementProfilesListRequest,
    security: operations.AnalyticsManagementProfilesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfilesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfilesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementProfilesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfilesListResponse =
        new operations.AnalyticsManagementProfilesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profiles = utils.objectToClass(httpRes?.data, shared.Profiles);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing view (profile). This method supports patch semantics.
   */
  analyticsManagementProfilesPatch(
    req: operations.AnalyticsManagementProfilesPatchRequest,
    security: operations.AnalyticsManagementProfilesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfilesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfilesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "profileInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementProfilesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfilesPatchResponse =
        new operations.AnalyticsManagementProfilesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profile = utils.objectToClass(httpRes?.data, shared.Profile);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing view (profile).
   */
  analyticsManagementProfilesUpdate(
    req: operations.AnalyticsManagementProfilesUpdateRequest,
    security: operations.AnalyticsManagementProfilesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfilesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfilesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "profileInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementProfilesUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfilesUpdateResponse =
        new operations.AnalyticsManagementProfilesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.profile = utils.objectToClass(httpRes?.data, shared.Profile);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a remarketing audience.
   */
  analyticsManagementRemarketingAudienceDelete(
    req: operations.AnalyticsManagementRemarketingAudienceDeleteRequest,
    security: operations.AnalyticsManagementRemarketingAudienceDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementRemarketingAudienceDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementRemarketingAudienceDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementRemarketingAudienceDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementRemarketingAudienceDeleteResponse =
        new operations.AnalyticsManagementRemarketingAudienceDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a remarketing audience to which the user has access.
   */
  analyticsManagementRemarketingAudienceGet(
    req: operations.AnalyticsManagementRemarketingAudienceGetRequest,
    security: operations.AnalyticsManagementRemarketingAudienceGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementRemarketingAudienceGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementRemarketingAudienceGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementRemarketingAudienceGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementRemarketingAudienceGetResponse =
        new operations.AnalyticsManagementRemarketingAudienceGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remarketingAudience = utils.objectToClass(
              httpRes?.data,
              shared.RemarketingAudience
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new remarketing audience.
   */
  analyticsManagementRemarketingAudienceInsert(
    req: operations.AnalyticsManagementRemarketingAudienceInsertRequest,
    security: operations.AnalyticsManagementRemarketingAudienceInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementRemarketingAudienceInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementRemarketingAudienceInsertRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "remarketingAudienceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementRemarketingAudienceInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementRemarketingAudienceInsertResponse =
        new operations.AnalyticsManagementRemarketingAudienceInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remarketingAudience = utils.objectToClass(
              httpRes?.data,
              shared.RemarketingAudience
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists remarketing audiences to which the user has access.
   */
  analyticsManagementRemarketingAudienceList(
    req: operations.AnalyticsManagementRemarketingAudienceListRequest,
    security: operations.AnalyticsManagementRemarketingAudienceListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementRemarketingAudienceListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementRemarketingAudienceListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementRemarketingAudienceListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementRemarketingAudienceListResponse =
        new operations.AnalyticsManagementRemarketingAudienceListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remarketingAudiences = utils.objectToClass(
              httpRes?.data,
              shared.RemarketingAudiences
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing remarketing audience. This method supports patch semantics.
   */
  analyticsManagementRemarketingAudiencePatch(
    req: operations.AnalyticsManagementRemarketingAudiencePatchRequest,
    security: operations.AnalyticsManagementRemarketingAudiencePatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementRemarketingAudiencePatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementRemarketingAudiencePatchRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "remarketingAudienceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementRemarketingAudiencePatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementRemarketingAudiencePatchResponse =
        new operations.AnalyticsManagementRemarketingAudiencePatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remarketingAudience = utils.objectToClass(
              httpRes?.data,
              shared.RemarketingAudience
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing remarketing audience.
   */
  analyticsManagementRemarketingAudienceUpdate(
    req: operations.AnalyticsManagementRemarketingAudienceUpdateRequest,
    security: operations.AnalyticsManagementRemarketingAudienceUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementRemarketingAudienceUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementRemarketingAudienceUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "remarketingAudienceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementRemarketingAudienceUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementRemarketingAudienceUpdateResponse =
        new operations.AnalyticsManagementRemarketingAudienceUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remarketingAudience = utils.objectToClass(
              httpRes?.data,
              shared.RemarketingAudience
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists segments to which the user has access.
   */
  analyticsManagementSegmentsList(
    req: operations.AnalyticsManagementSegmentsListRequest,
    security: operations.AnalyticsManagementSegmentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementSegmentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementSegmentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/management/segments";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementSegmentsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementSegmentsListResponse =
        new operations.AnalyticsManagementSegmentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.segments = utils.objectToClass(httpRes?.data, shared.Segments);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an unsampled report.
   */
  analyticsManagementUnsampledReportsDelete(
    req: operations.AnalyticsManagementUnsampledReportsDeleteRequest,
    security: operations.AnalyticsManagementUnsampledReportsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementUnsampledReportsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementUnsampledReportsDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementUnsampledReportsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementUnsampledReportsDeleteResponse =
        new operations.AnalyticsManagementUnsampledReportsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single unsampled report.
   */
  analyticsManagementUnsampledReportsGet(
    req: operations.AnalyticsManagementUnsampledReportsGetRequest,
    security: operations.AnalyticsManagementUnsampledReportsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementUnsampledReportsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementUnsampledReportsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementUnsampledReportsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementUnsampledReportsGetResponse =
        new operations.AnalyticsManagementUnsampledReportsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsampledReport = utils.objectToClass(
              httpRes?.data,
              shared.UnsampledReport
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new unsampled report.
   */
  analyticsManagementUnsampledReportsInsert(
    req: operations.AnalyticsManagementUnsampledReportsInsertRequest,
    security: operations.AnalyticsManagementUnsampledReportsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementUnsampledReportsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementUnsampledReportsInsertRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "unsampledReportInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementUnsampledReportsInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementUnsampledReportsInsertResponse =
        new operations.AnalyticsManagementUnsampledReportsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsampledReport = utils.objectToClass(
              httpRes?.data,
              shared.UnsampledReport
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists unsampled reports to which the user has access.
   */
  analyticsManagementUnsampledReportsList(
    req: operations.AnalyticsManagementUnsampledReportsListRequest,
    security: operations.AnalyticsManagementUnsampledReportsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementUnsampledReportsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementUnsampledReportsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementUnsampledReportsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementUnsampledReportsListResponse =
        new operations.AnalyticsManagementUnsampledReportsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsampledReports = utils.objectToClass(
              httpRes?.data,
              shared.UnsampledReports
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete data associated with a previous upload.
   */
  analyticsManagementUploadsDeleteUploadData(
    req: operations.AnalyticsManagementUploadsDeleteUploadDataRequest,
    security: operations.AnalyticsManagementUploadsDeleteUploadDataSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementUploadsDeleteUploadDataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementUploadsDeleteUploadDataRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "analyticsDataimportDeleteUploadDataRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementUploadsDeleteUploadDataSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementUploadsDeleteUploadDataResponse =
        new operations.AnalyticsManagementUploadsDeleteUploadDataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List uploads to which the user has access.
   */
  analyticsManagementUploadsGet(
    req: operations.AnalyticsManagementUploadsGetRequest,
    security: operations.AnalyticsManagementUploadsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementUploadsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementUploadsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementUploadsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementUploadsGetResponse =
        new operations.AnalyticsManagementUploadsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upload = utils.objectToClass(httpRes?.data, shared.Upload);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List uploads to which the user has access.
   */
  analyticsManagementUploadsList(
    req: operations.AnalyticsManagementUploadsListRequest,
    security: operations.AnalyticsManagementUploadsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementUploadsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementUploadsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementUploadsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementUploadsListResponse =
        new operations.AnalyticsManagementUploadsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uploads = utils.objectToClass(httpRes?.data, shared.Uploads);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upload data for a custom data source.
   */
  analyticsManagementUploadsUploadData(
    req: operations.AnalyticsManagementUploadsUploadDataRequest,
    security: operations.AnalyticsManagementUploadsUploadDataSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementUploadsUploadDataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementUploadsUploadDataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementUploadsUploadDataSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementUploadsUploadDataResponse =
        new operations.AnalyticsManagementUploadsUploadDataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upload = utils.objectToClass(httpRes?.data, shared.Upload);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a web property-Google Ads link.
   */
  analyticsManagementWebPropertyAdWordsLinksDelete(
    req: operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest,
    security: operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteResponse =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Returns a web property-Google Ads link to which the user has access.
   */
  analyticsManagementWebPropertyAdWordsLinksGet(
    req: operations.AnalyticsManagementWebPropertyAdWordsLinksGetRequest,
    security: operations.AnalyticsManagementWebPropertyAdWordsLinksGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebPropertyAdWordsLinksGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebPropertyAdWordsLinksGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebPropertyAdWordsLinksGetResponse =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityAdWordsLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityAdWordsLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a webProperty-Google Ads link.
   */
  analyticsManagementWebPropertyAdWordsLinksInsert(
    req: operations.AnalyticsManagementWebPropertyAdWordsLinksInsertRequest,
    security: operations.AnalyticsManagementWebPropertyAdWordsLinksInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebPropertyAdWordsLinksInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksInsertRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityAdWordsLink",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebPropertyAdWordsLinksInsertResponse =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksInsertResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityAdWordsLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityAdWordsLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists webProperty-Google Ads links for a given web property.
   */
  analyticsManagementWebPropertyAdWordsLinksList(
    req: operations.AnalyticsManagementWebPropertyAdWordsLinksListRequest,
    security: operations.AnalyticsManagementWebPropertyAdWordsLinksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebPropertyAdWordsLinksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebPropertyAdWordsLinksListResponse =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityAdWordsLinks = utils.objectToClass(
              httpRes?.data,
              shared.EntityAdWordsLinks
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing webProperty-Google Ads link. This method supports patch semantics.
   */
  analyticsManagementWebPropertyAdWordsLinksPatch(
    req: operations.AnalyticsManagementWebPropertyAdWordsLinksPatchRequest,
    security: operations.AnalyticsManagementWebPropertyAdWordsLinksPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebPropertyAdWordsLinksPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityAdWordsLink",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebPropertyAdWordsLinksPatchResponse =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityAdWordsLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityAdWordsLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing webProperty-Google Ads link.
   */
  analyticsManagementWebPropertyAdWordsLinksUpdate(
    req: operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest,
    security: operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityAdWordsLink",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateResponse =
        new operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityAdWordsLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityAdWordsLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a web property to which the user has access.
   */
  analyticsManagementWebpropertiesGet(
    req: operations.AnalyticsManagementWebpropertiesGetRequest,
    security: operations.AnalyticsManagementWebpropertiesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertiesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertiesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementWebpropertiesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertiesGetResponse =
        new operations.AnalyticsManagementWebpropertiesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webproperty = utils.objectToClass(
              httpRes?.data,
              shared.Webproperty
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.
   */
  analyticsManagementWebpropertiesInsert(
    req: operations.AnalyticsManagementWebpropertiesInsertRequest,
    security: operations.AnalyticsManagementWebpropertiesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertiesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertiesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "webpropertyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementWebpropertiesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertiesInsertResponse =
        new operations.AnalyticsManagementWebpropertiesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webproperty = utils.objectToClass(
              httpRes?.data,
              shared.Webproperty
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists web properties to which the user has access.
   */
  analyticsManagementWebpropertiesList(
    req: operations.AnalyticsManagementWebpropertiesListRequest,
    security: operations.AnalyticsManagementWebpropertiesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertiesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertiesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementWebpropertiesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertiesListResponse =
        new operations.AnalyticsManagementWebpropertiesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webproperties = utils.objectToClass(
              httpRes?.data,
              shared.Webproperties
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing web property. This method supports patch semantics.
   */
  analyticsManagementWebpropertiesPatch(
    req: operations.AnalyticsManagementWebpropertiesPatchRequest,
    security: operations.AnalyticsManagementWebpropertiesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertiesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertiesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "webpropertyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementWebpropertiesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertiesPatchResponse =
        new operations.AnalyticsManagementWebpropertiesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webproperty = utils.objectToClass(
              httpRes?.data,
              shared.Webproperty
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing web property.
   */
  analyticsManagementWebpropertiesUpdate(
    req: operations.AnalyticsManagementWebpropertiesUpdateRequest,
    security: operations.AnalyticsManagementWebpropertiesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertiesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertiesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "webpropertyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementWebpropertiesUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertiesUpdateResponse =
        new operations.AnalyticsManagementWebpropertiesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webproperty = utils.objectToClass(
              httpRes?.data,
              shared.Webproperty
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes a user from the given web property.
   */
  analyticsManagementWebpropertyUserLinksDelete(
    req: operations.AnalyticsManagementWebpropertyUserLinksDeleteRequest,
    security: operations.AnalyticsManagementWebpropertyUserLinksDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertyUserLinksDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertyUserLinksDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebpropertyUserLinksDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertyUserLinksDeleteResponse =
        new operations.AnalyticsManagementWebpropertyUserLinksDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Adds a new user to the given web property.
   */
  analyticsManagementWebpropertyUserLinksInsert(
    req: operations.AnalyticsManagementWebpropertyUserLinksInsertRequest,
    security: operations.AnalyticsManagementWebpropertyUserLinksInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertyUserLinksInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertyUserLinksInsertRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityUserLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebpropertyUserLinksInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertyUserLinksInsertResponse =
        new operations.AnalyticsManagementWebpropertyUserLinksInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists webProperty-user links for a given web property.
   */
  analyticsManagementWebpropertyUserLinksList(
    req: operations.AnalyticsManagementWebpropertyUserLinksListRequest,
    security: operations.AnalyticsManagementWebpropertyUserLinksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertyUserLinksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertyUserLinksListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebpropertyUserLinksListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertyUserLinksListResponse =
        new operations.AnalyticsManagementWebpropertyUserLinksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLinks = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLinks
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates permissions for an existing user on the given web property.
   */
  analyticsManagementWebpropertyUserLinksUpdate(
    req: operations.AnalyticsManagementWebpropertyUserLinksUpdateRequest,
    security: operations.AnalyticsManagementWebpropertyUserLinksUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertyUserLinksUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertyUserLinksUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entityUserLinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsManagementWebpropertyUserLinksUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertyUserLinksUpdateResponse =
        new operations.AnalyticsManagementWebpropertyUserLinksUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.entityUserLink = utils.objectToClass(
              httpRes?.data,
              shared.EntityUserLink
            );
          }
          break;
      }

      return res;
    });
  }
}
