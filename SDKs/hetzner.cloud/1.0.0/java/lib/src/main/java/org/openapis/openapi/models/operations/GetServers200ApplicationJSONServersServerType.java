/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetServers200ApplicationJSONServersServerType - Type of Server - determines how much ram, disk and cpu a Server has
 */
public class GetServers200ApplicationJSONServersServerType {
    /**
     * Number of cpu cores a Server of this type will have
     */
    @JsonProperty("cores")
    public Double cores;

    public GetServers200ApplicationJSONServersServerType withCores(Double cores) {
        this.cores = cores;
        return this;
    }
    
    /**
     * Type of cpu
     */
    @JsonProperty("cpu_type")
    public GetServers200ApplicationJSONServersServerTypeCpuTypeEnum cpuType;

    public GetServers200ApplicationJSONServersServerType withCpuType(GetServers200ApplicationJSONServersServerTypeCpuTypeEnum cpuType) {
        this.cpuType = cpuType;
        return this;
    }
    
    /**
     * True if Server type is deprecated
     */
    @JsonProperty("deprecated")
    public Boolean deprecated;

    public GetServers200ApplicationJSONServersServerType withDeprecated(Boolean deprecated) {
        this.deprecated = deprecated;
        return this;
    }
    
    /**
     * Description of the Server type
     */
    @JsonProperty("description")
    public String description;

    public GetServers200ApplicationJSONServersServerType withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Disk size a Server of this type will have in GB
     */
    @JsonProperty("disk")
    public Double disk;

    public GetServers200ApplicationJSONServersServerType withDisk(Double disk) {
        this.disk = disk;
        return this;
    }
    
    /**
     * ID of the Server type
     */
    @JsonProperty("id")
    public Long id;

    public GetServers200ApplicationJSONServersServerType withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Memory a Server of this type will have in GB
     */
    @JsonProperty("memory")
    public Double memory;

    public GetServers200ApplicationJSONServersServerType withMemory(Double memory) {
        this.memory = memory;
        return this;
    }
    
    /**
     * Unique identifier of the Server type
     */
    @JsonProperty("name")
    public String name;

    public GetServers200ApplicationJSONServersServerType withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Prices in different Locations
     */
    @JsonProperty("prices")
    public GetServers200ApplicationJSONServersServerTypePrices[] prices;

    public GetServers200ApplicationJSONServersServerType withPrices(GetServers200ApplicationJSONServersServerTypePrices[] prices) {
        this.prices = prices;
        return this;
    }
    
    /**
     * Type of Server boot drive. Local has higher speed. Network has better availability.
     */
    @JsonProperty("storage_type")
    public GetServers200ApplicationJSONServersServerTypeStorageTypeEnum storageType;

    public GetServers200ApplicationJSONServersServerType withStorageType(GetServers200ApplicationJSONServersServerTypeStorageTypeEnum storageType) {
        this.storageType = storageType;
        return this;
    }
    
    public GetServers200ApplicationJSONServersServerType(@JsonProperty("cores") Double cores, @JsonProperty("cpu_type") GetServers200ApplicationJSONServersServerTypeCpuTypeEnum cpuType, @JsonProperty("deprecated") Boolean deprecated, @JsonProperty("description") String description, @JsonProperty("disk") Double disk, @JsonProperty("id") Long id, @JsonProperty("memory") Double memory, @JsonProperty("name") String name, @JsonProperty("prices") GetServers200ApplicationJSONServersServerTypePrices[] prices, @JsonProperty("storage_type") GetServers200ApplicationJSONServersServerTypeStorageTypeEnum storageType) {
        this.cores = cores;
        this.cpuType = cpuType;
        this.deprecated = deprecated;
        this.description = description;
        this.disk = disk;
        this.id = id;
        this.memory = memory;
        this.name = name;
        this.prices = prices;
        this.storageType = storageType;
  }
}
