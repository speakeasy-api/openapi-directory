// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CodespacesSecretVisibilityEnum - The type of repositories in the organization that the secret is visible to
type CodespacesSecretVisibilityEnum string

const (
	CodespacesSecretVisibilityEnumAll      CodespacesSecretVisibilityEnum = "all"
	CodespacesSecretVisibilityEnumPrivate  CodespacesSecretVisibilityEnum = "private"
	CodespacesSecretVisibilityEnumSelected CodespacesSecretVisibilityEnum = "selected"
)

func (e CodespacesSecretVisibilityEnum) ToPointer() *CodespacesSecretVisibilityEnum {
	return &e
}

func (e *CodespacesSecretVisibilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "private":
		fallthrough
	case "selected":
		*e = CodespacesSecretVisibilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CodespacesSecretVisibilityEnum: %v", v)
	}
}

// CodespacesSecret - Secrets for a GitHub Codespace.
type CodespacesSecret struct {
	// The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt time.Time `json:"created_at"`
	// The name of the secret
	Name string `json:"name"`
	// The API URL at which the list of repositories this secret is visible to can be retrieved
	SelectedRepositoriesURL string `json:"selected_repositories_url"`
	// The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt time.Time `json:"updated_at"`
	// The type of repositories in the organization that the secret is visible to
	Visibility CodespacesSecretVisibilityEnum `json:"visibility"`
}
