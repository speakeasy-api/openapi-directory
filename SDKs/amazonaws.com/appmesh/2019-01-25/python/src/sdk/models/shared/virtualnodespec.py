"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import backend as shared_backend
from ..shared import backenddefaults as shared_backenddefaults
from ..shared import listener as shared_listener
from ..shared import logging as shared_logging
from ..shared import servicediscovery as shared_servicediscovery
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VirtualNodeSpec:
    r"""An object that represents the specification of a virtual node."""
    
    backend_defaults: Optional[shared_backenddefaults.BackendDefaults] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backendDefaults'), 'exclude': lambda f: f is None }})  
    backends: Optional[list[shared_backend.Backend]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backends'), 'exclude': lambda f: f is None }})  
    listeners: Optional[list[shared_listener.Listener]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listeners'), 'exclude': lambda f: f is None }})  
    logging: Optional[shared_logging.Logging] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logging'), 'exclude': lambda f: f is None }})  
    service_discovery: Optional[shared_servicediscovery.ServiceDiscovery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceDiscovery'), 'exclude': lambda f: f is None }})  
    