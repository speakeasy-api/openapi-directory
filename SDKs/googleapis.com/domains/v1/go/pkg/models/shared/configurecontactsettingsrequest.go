// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConfigureContactSettingsRequestContactNoticesEnum string

const (
	ConfigureContactSettingsRequestContactNoticesEnumContactNoticeUnspecified         ConfigureContactSettingsRequestContactNoticesEnum = "CONTACT_NOTICE_UNSPECIFIED"
	ConfigureContactSettingsRequestContactNoticesEnumPublicContactDataAcknowledgement ConfigureContactSettingsRequestContactNoticesEnum = "PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT"
)

func (e *ConfigureContactSettingsRequestContactNoticesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONTACT_NOTICE_UNSPECIFIED":
		fallthrough
	case "PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT":
		*e = ConfigureContactSettingsRequestContactNoticesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigureContactSettingsRequestContactNoticesEnum: %s", s)
	}
}

// ConfigureContactSettingsRequest - Request for the `ConfigureContactSettings` method.
type ConfigureContactSettingsRequest struct {
	// The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `contact_settings`.
	ContactNotices []ConfigureContactSettingsRequestContactNoticesEnum `json:"contactNotices,omitempty"`
	// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
	ContactSettings *ContactSettings `json:"contactSettings,omitempty"`
	// Required. The field mask describing which fields to update as a comma-separated list. For example, if only the registrant contact is being updated, the `update_mask` is `"registrant_contact"`.
	UpdateMask *string `json:"updateMask,omitempty"`
	// Validate the request without actually updating the contact settings.
	ValidateOnly *bool `json:"validateOnly,omitempty"`
}
