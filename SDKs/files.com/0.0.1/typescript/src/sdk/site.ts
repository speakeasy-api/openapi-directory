/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations about sites
 */
export class Site {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Show site settings
   *
   * @remarks
   * Show site settings
   */
  getSite(config?: AxiosRequestConfig): Promise<operations.GetSiteResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/site";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSiteResponse = new operations.GetSiteResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.siteEntity = utils.objectToClass(
              httpRes?.data,
              shared.SiteEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Api Keys
   *
   * @remarks
   * List Api Keys
   */
  getSiteApiKeys(
    req: operations.GetSiteApiKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSiteApiKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSiteApiKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/site/api_keys";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSiteApiKeysResponse =
        new operations.GetSiteApiKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.apiKeyEntities = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Show site DNS configuration.
   *
   * @remarks
   * Show site DNS configuration.
   */
  getSiteDnsRecords(
    req: operations.GetSiteDnsRecordsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSiteDnsRecordsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSiteDnsRecordsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/site/dns_records";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSiteDnsRecordsResponse =
        new operations.GetSiteDnsRecordsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dnsRecordEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.dnsRecordEntities = utils.objectToClass(
              httpRes?.data,
              shared.DnsRecordEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List IP Addresses associated with the current site
   *
   * @remarks
   * List IP Addresses associated with the current site
   */
  getSiteIpAddresses(
    req: operations.GetSiteIpAddressesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSiteIpAddressesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSiteIpAddressesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/site/ip_addresses";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSiteIpAddressesResponse =
        new operations.GetSiteIpAddressesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ipAddressEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.ipAddressEntities = utils.objectToClass(
              httpRes?.data,
              shared.IpAddressEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Get the most recent usage snapshot (usage data for billing purposes) for a Site.
   *
   * @remarks
   * Get the most recent usage snapshot (usage data for billing purposes) for a Site.
   */
  getSiteUsage(
    config?: AxiosRequestConfig
  ): Promise<operations.GetSiteUsageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/site/usage";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSiteUsageResponse =
        new operations.GetSiteUsageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.usageSnapshotEntity = utils.objectToClass(
              httpRes?.data,
              shared.UsageSnapshotEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Update site settings.
   *
   * @remarks
   * Update site settings.
   */
  patchSite(
    req: operations.PatchSiteRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchSiteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchSiteRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/site";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchSiteResponse =
        new operations.PatchSiteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.siteEntity = utils.objectToClass(
              httpRes?.data,
              shared.SiteEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Create Api Key
   *
   * @remarks
   * Create Api Key
   */
  postSiteApiKeys(
    req: operations.PostSiteApiKeysRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSiteApiKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostSiteApiKeysRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/site/api_keys";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSiteApiKeysResponse =
        new operations.PostSiteApiKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyEntity = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Test webhook.
   *
   * @remarks
   * Test webhook.
   */
  postSiteTestWebhook(
    req: operations.PostSiteTestWebhookRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSiteTestWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostSiteTestWebhookRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/site/test-webhook";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSiteTestWebhookResponse =
        new operations.PostSiteTestWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.statusEntity = utils.objectToClass(
              httpRes?.data,
              shared.StatusEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }
}
