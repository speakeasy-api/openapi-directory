// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var ListMediaRecordingServerList = []string{
	"https://media.twilio.com",
}

type ListMediaRecordingSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type ListMediaRecordingQueryParams struct {
	// The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
	Order *shared.MediaRecordingEnumOrderEnum `queryParam:"style=form,explode=true,name=Order"`
	// The page index. This value is simply for client state.
	Page *int64 `queryParam:"style=form,explode=true,name=Page"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=PageSize"`
	// The page token. This is provided by the API.
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
	// SID of a MediaProcessor to filter by.
	ProcessorSid *string `queryParam:"style=form,explode=true,name=ProcessorSid"`
	// SID of a MediaRecording source to filter by.
	SourceSid *string `queryParam:"style=form,explode=true,name=SourceSid"`
	// Status to filter by, with possible values `processing`, `completed`, `deleted`, or `failed`.
	Status *shared.MediaRecordingEnumStatusEnum `queryParam:"style=form,explode=true,name=Status"`
}

type ListMediaRecordingRequest struct {
	QueryParams ListMediaRecordingQueryParams
	Security    ListMediaRecordingSecurity
	ServerURL   *string
}

type ListMediaRecordingListMediaRecordingResponseMeta struct {
	FirstPageURL    *string `json:"first_page_url,omitempty"`
	Key             *string `json:"key,omitempty"`
	NextPageURL     *string `json:"next_page_url,omitempty"`
	Page            *int64  `json:"page,omitempty"`
	PageSize        *int64  `json:"page_size,omitempty"`
	PreviousPageURL *string `json:"previous_page_url,omitempty"`
	URL             *string `json:"url,omitempty"`
}

// ListMediaRecordingListMediaRecordingResponse - OK
type ListMediaRecordingListMediaRecordingResponse struct {
	MediaRecordings []shared.MediaV1MediaRecording                    `json:"media_recordings,omitempty"`
	Meta            *ListMediaRecordingListMediaRecordingResponseMeta `json:"meta,omitempty"`
}

type ListMediaRecordingResponse struct {
	ContentType string
	// OK
	ListMediaRecordingResponse *ListMediaRecordingListMediaRecordingResponse
	StatusCode                 int
	RawResponse                *http.Response
}
