// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CreativeSizeAllowedFormatsEnum string

const (
	CreativeSizeAllowedFormatsEnumUnknown CreativeSizeAllowedFormatsEnum = "UNKNOWN"
	CreativeSizeAllowedFormatsEnumAudio   CreativeSizeAllowedFormatsEnum = "AUDIO"
)

func (e *CreativeSizeAllowedFormatsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN":
		fallthrough
	case "AUDIO":
		*e = CreativeSizeAllowedFormatsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreativeSizeAllowedFormatsEnum: %s", s)
	}
}

// CreativeSizeCreativeSizeTypeEnum - The creative size type.
type CreativeSizeCreativeSizeTypeEnum string

const (
	CreativeSizeCreativeSizeTypeEnumCreativeSizeTypeUnspecified CreativeSizeCreativeSizeTypeEnum = "CREATIVE_SIZE_TYPE_UNSPECIFIED"
	CreativeSizeCreativeSizeTypeEnumRegular                     CreativeSizeCreativeSizeTypeEnum = "REGULAR"
	CreativeSizeCreativeSizeTypeEnumInterstitial                CreativeSizeCreativeSizeTypeEnum = "INTERSTITIAL"
	CreativeSizeCreativeSizeTypeEnumVideo                       CreativeSizeCreativeSizeTypeEnum = "VIDEO"
	CreativeSizeCreativeSizeTypeEnumNative                      CreativeSizeCreativeSizeTypeEnum = "NATIVE"
)

func (e *CreativeSizeCreativeSizeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CREATIVE_SIZE_TYPE_UNSPECIFIED":
		fallthrough
	case "REGULAR":
		fallthrough
	case "INTERSTITIAL":
		fallthrough
	case "VIDEO":
		fallthrough
	case "NATIVE":
		*e = CreativeSizeCreativeSizeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreativeSizeCreativeSizeTypeEnum: %s", s)
	}
}

// CreativeSizeNativeTemplateEnum - Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE.
type CreativeSizeNativeTemplateEnum string

const (
	CreativeSizeNativeTemplateEnumUnknownNativeTemplate   CreativeSizeNativeTemplateEnum = "UNKNOWN_NATIVE_TEMPLATE"
	CreativeSizeNativeTemplateEnumNativeContentAd         CreativeSizeNativeTemplateEnum = "NATIVE_CONTENT_AD"
	CreativeSizeNativeTemplateEnumNativeAppInstallAd      CreativeSizeNativeTemplateEnum = "NATIVE_APP_INSTALL_AD"
	CreativeSizeNativeTemplateEnumNativeVideoContentAd    CreativeSizeNativeTemplateEnum = "NATIVE_VIDEO_CONTENT_AD"
	CreativeSizeNativeTemplateEnumNativeVideoAppInstallAd CreativeSizeNativeTemplateEnum = "NATIVE_VIDEO_APP_INSTALL_AD"
)

func (e *CreativeSizeNativeTemplateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN_NATIVE_TEMPLATE":
		fallthrough
	case "NATIVE_CONTENT_AD":
		fallthrough
	case "NATIVE_APP_INSTALL_AD":
		fallthrough
	case "NATIVE_VIDEO_CONTENT_AD":
		fallthrough
	case "NATIVE_VIDEO_APP_INSTALL_AD":
		*e = CreativeSizeNativeTemplateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreativeSizeNativeTemplateEnum: %s", s)
	}
}

// CreativeSizeSkippableAdTypeEnum - The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO.
type CreativeSizeSkippableAdTypeEnum string

const (
	CreativeSizeSkippableAdTypeEnumSkippableAdTypeUnspecified CreativeSizeSkippableAdTypeEnum = "SKIPPABLE_AD_TYPE_UNSPECIFIED"
	CreativeSizeSkippableAdTypeEnumGeneric                    CreativeSizeSkippableAdTypeEnum = "GENERIC"
	CreativeSizeSkippableAdTypeEnumInstreamSelect             CreativeSizeSkippableAdTypeEnum = "INSTREAM_SELECT"
	CreativeSizeSkippableAdTypeEnumNotSkippable               CreativeSizeSkippableAdTypeEnum = "NOT_SKIPPABLE"
)

func (e *CreativeSizeSkippableAdTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SKIPPABLE_AD_TYPE_UNSPECIFIED":
		fallthrough
	case "GENERIC":
		fallthrough
	case "INSTREAM_SELECT":
		fallthrough
	case "NOT_SKIPPABLE":
		*e = CreativeSizeSkippableAdTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreativeSizeSkippableAdTypeEnum: %s", s)
	}
}

// CreativeSize - Specifies the size of the creative.
type CreativeSize struct {
	// What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video).
	AllowedFormats []CreativeSizeAllowedFormatsEnum `json:"allowedFormats,omitempty"`
	// For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO
	CompanionSizes []Size `json:"companionSizes,omitempty"`
	// The creative size type.
	CreativeSizeType *CreativeSizeCreativeSizeTypeEnum `json:"creativeSizeType,omitempty"`
	// Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE.
	NativeTemplate *CreativeSizeNativeTemplateEnum `json:"nativeTemplate,omitempty"`
	// Message depicting the size of the creative. The units of width and height depend on the type of the targeting.
	Size *Size `json:"size,omitempty"`
	// The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO.
	SkippableAdType *CreativeSizeSkippableAdTypeEnum `json:"skippableAdType,omitempty"`
}
