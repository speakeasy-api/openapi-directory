"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class GuaranteedOrders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def displayvideo_guaranteed_orders_create(self, request: operations.DisplayvideoGuaranteedOrdersCreateRequest, security: operations.DisplayvideoGuaranteedOrdersCreateSecurity) -> operations.DisplayvideoGuaranteedOrdersCreateResponse:
        r"""Creates a new guaranteed order. Returns the newly created guaranteed order if successful."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/guaranteedOrders'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "guaranteed_order_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoGuaranteedOrdersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoGuaranteedOrdersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GuaranteedOrder])
                res.guaranteed_order = out

        return res

    def displayvideo_guaranteed_orders_edit_guaranteed_order_read_accessors(self, request: operations.DisplayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessorsRequest, security: operations.DisplayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessorsSecurity) -> operations.DisplayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessorsResponse:
        r"""Edits read advertisers of a guaranteed order."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessorsRequest, base_url, '/v2/guaranteedOrders/{guaranteedOrderId}:editGuaranteedOrderReadAccessors', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "edit_guaranteed_order_read_accessors_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessorsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EditGuaranteedOrderReadAccessorsResponse])
                res.edit_guaranteed_order_read_accessors_response = out

        return res

    def displayvideo_guaranteed_orders_get(self, request: operations.DisplayvideoGuaranteedOrdersGetRequest, security: operations.DisplayvideoGuaranteedOrdersGetSecurity) -> operations.DisplayvideoGuaranteedOrdersGetResponse:
        r"""Gets a guaranteed order."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoGuaranteedOrdersGetRequest, base_url, '/v2/guaranteedOrders/{guaranteedOrderId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoGuaranteedOrdersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoGuaranteedOrdersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GuaranteedOrder])
                res.guaranteed_order = out

        return res

    def displayvideo_guaranteed_orders_list(self, request: operations.DisplayvideoGuaranteedOrdersListRequest, security: operations.DisplayvideoGuaranteedOrdersListSecurity) -> operations.DisplayvideoGuaranteedOrdersListResponse:
        r"""Lists guaranteed orders that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, guaranteed orders with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/guaranteedOrders'
        
        query_params = utils.get_query_params(operations.DisplayvideoGuaranteedOrdersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoGuaranteedOrdersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGuaranteedOrdersResponse])
                res.list_guaranteed_orders_response = out

        return res

    def displayvideo_guaranteed_orders_patch(self, request: operations.DisplayvideoGuaranteedOrdersPatchRequest, security: operations.DisplayvideoGuaranteedOrdersPatchSecurity) -> operations.DisplayvideoGuaranteedOrdersPatchResponse:
        r"""Updates an existing guaranteed order. Returns the updated guaranteed order if successful."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoGuaranteedOrdersPatchRequest, base_url, '/v2/guaranteedOrders/{guaranteedOrderId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "guaranteed_order_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoGuaranteedOrdersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoGuaranteedOrdersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GuaranteedOrder])
                res.guaranteed_order = out

        return res

    