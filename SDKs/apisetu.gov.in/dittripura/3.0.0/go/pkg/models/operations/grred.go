// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GrredSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type GrredRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// GrredRequestBodyFormatEnum - The format of the certificate in response.
type GrredRequestBodyFormatEnum string

const (
	GrredRequestBodyFormatEnumPdf GrredRequestBodyFormatEnum = "pdf"
)

func (e *GrredRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = GrredRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GrredRequestBodyFormatEnum: %s", s)
	}
}

// GrredRequestBody - Request format
type GrredRequestBody struct {
	CertificateParameters *GrredRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format GrredRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type GrredRequest struct {
	// Request format
	Request  *GrredRequestBody `request:"mediaType=application/json"`
	Security GrredSecurity
}

type Grred504ApplicationJSONErrorEnum string

const (
	Grred504ApplicationJSONErrorEnumGatewayTimeout Grred504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Grred504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Grred504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred504ApplicationJSONErrorEnum: %s", s)
	}
}

type Grred504ApplicationJSONErrorDescriptionEnum string

const (
	Grred504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Grred504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Grred504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Grred504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Grred504ApplicationJSON - Gateway timeout
type Grred504ApplicationJSON struct {
	Error            *Grred504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Grred504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Grred503ApplicationJSONErrorEnum string

const (
	Grred503ApplicationJSONErrorEnumServiceUnavailable Grred503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Grred503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Grred503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred503ApplicationJSONErrorEnum: %s", s)
	}
}

type Grred503ApplicationJSONErrorDescriptionEnum string

const (
	Grred503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Grred503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Grred503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Grred503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Grred503ApplicationJSON - Service unavailable
type Grred503ApplicationJSON struct {
	Error            *Grred503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Grred503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Grred502ApplicationJSONErrorEnum string

const (
	Grred502ApplicationJSONErrorEnumBadGatewy Grred502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Grred502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Grred502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred502ApplicationJSONErrorEnum: %s", s)
	}
}

type Grred502ApplicationJSONErrorDescriptionEnum string

const (
	Grred502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Grred502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Grred502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Grred502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Grred502ApplicationJSON - Bad gateway
type Grred502ApplicationJSON struct {
	Error            *Grred502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Grred502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Grred500ApplicationJSONErrorEnum string

const (
	Grred500ApplicationJSONErrorEnumInternalServerError Grred500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Grred500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Grred500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred500ApplicationJSONErrorEnum: %s", s)
	}
}

type Grred500ApplicationJSONErrorDescriptionEnum string

const (
	Grred500ApplicationJSONErrorDescriptionEnumInternalServerError Grred500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Grred500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Grred500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Grred500ApplicationJSON - Internal server error
type Grred500ApplicationJSON struct {
	Error            *Grred500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Grred500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Grred404ApplicationJSONErrorEnum string

const (
	Grred404ApplicationJSONErrorEnumRecordNotFound Grred404ApplicationJSONErrorEnum = "record_not_found"
	Grred404ApplicationJSONErrorEnumURLNotFound    Grred404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Grred404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Grred404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred404ApplicationJSONErrorEnum: %s", s)
	}
}

type Grred404ApplicationJSONErrorDescriptionEnum string

const (
	Grred404ApplicationJSONErrorDescriptionEnumNoRecordFound               Grred404ApplicationJSONErrorDescriptionEnum = "No record found"
	Grred404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Grred404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Grred404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Grred404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Grred404ApplicationJSON - No record found
type Grred404ApplicationJSON struct {
	Error            *Grred404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Grred404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Grred401ApplicationJSONErrorEnum string

const (
	Grred401ApplicationJSONErrorEnumInvalidAuthentication Grred401ApplicationJSONErrorEnum = "invalid_authentication"
	Grred401ApplicationJSONErrorEnumInvalidAuthorization  Grred401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Grred401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Grred401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred401ApplicationJSONErrorEnum: %s", s)
	}
}

type Grred401ApplicationJSONErrorDescriptionEnum string

const (
	Grred401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Grred401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Grred401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Grred401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Grred401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Grred401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Grred401ApplicationJSON - Unauthorized access
type Grred401ApplicationJSON struct {
	Error            *Grred401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Grred401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Grred400ApplicationJSONErrorEnum string

const (
	Grred400ApplicationJSONErrorEnumMissingParameter Grred400ApplicationJSONErrorEnum = "missing_parameter"
	Grred400ApplicationJSONErrorEnumInvalidParameter Grred400ApplicationJSONErrorEnum = "invalid_parameter"
	Grred400ApplicationJSONErrorEnumInvalidFormat    Grred400ApplicationJSONErrorEnum = "invalid_format"
	Grred400ApplicationJSONErrorEnumInvalidTxnid     Grred400ApplicationJSONErrorEnum = "invalid_txnid"
	Grred400ApplicationJSONErrorEnumInvalidConsentid Grred400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Grred400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Grred400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred400ApplicationJSONErrorEnum: %s", s)
	}
}

type Grred400ApplicationJSONErrorDescriptionEnum string

const (
	Grred400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Grred400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Grred400ApplicationJSONErrorDescriptionEnumBadRequest                              Grred400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Grred400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Grred400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Grred400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Grred400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Grred400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Grred400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Grred400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Grred400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Grred400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Grred400ApplicationJSON - Bad request
type Grred400ApplicationJSON struct {
	Error            *Grred400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Grred400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type GrredResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Grred400ApplicationJSONObject *Grred400ApplicationJSON
	// Unauthorized access
	Grred401ApplicationJSONObject *Grred401ApplicationJSON
	// No record found
	Grred404ApplicationJSONObject *Grred404ApplicationJSON
	// Internal server error
	Grred500ApplicationJSONObject *Grred500ApplicationJSON
	// Bad gateway
	Grred502ApplicationJSONObject *Grred502ApplicationJSON
	// Service unavailable
	Grred503ApplicationJSONObject *Grred503ApplicationJSON
	// Gateway timeout
	Grred504ApplicationJSONObject *Grred504ApplicationJSON
}
