"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import operator_enum as shared_operator_enum
from ..shared import range as shared_range
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FieldTypeDetails:
    r"""Contains details regarding the supported field type and the operators that can be applied for filtering."""
    
    field_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldType') }})  
    filter_operators: list[shared_operator_enum.OperatorEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterOperators') }})  
    field_length_range: Optional[shared_range.Range] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldLengthRange'), 'exclude': lambda f: f is None }})  
    field_value_range: Optional[shared_range.Range] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldValueRange'), 'exclude': lambda f: f is None }})  
    supported_date_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedDateFormat'), 'exclude': lambda f: f is None }})  
    supported_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedValues'), 'exclude': lambda f: f is None }})  
    value_regex_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueRegexPattern'), 'exclude': lambda f: f is None }})  
    