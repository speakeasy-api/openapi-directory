<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Scores 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesScoresGetResponse
     */
	public function gamesScoresGet(
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesScoresGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}', \OpenAPI\OpenAPI\Models\Operations\GamesScoresGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesScoresGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesScoresGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerLeaderboardScoreListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerLeaderboardScoreListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the scores in a leaderboard, starting from the top.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesScoresListResponse
     */
	public function gamesScoresList(
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesScoresListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/leaderboards/{leaderboardId}/scores/{collection}', \OpenAPI\OpenAPI\Models\Operations\GamesScoresListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesScoresListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesScoresListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaderboardScores = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LeaderboardScores', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the scores in a leaderboard around (and including) a player's score.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowResponse
     */
	public function gamesScoresListWindow(
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/leaderboards/{leaderboardId}/window/{collection}', \OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesScoresListWindowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaderboardScores = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LeaderboardScores', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submits a score to the specified leaderboard.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitResponse
     */
	public function gamesScoresSubmit(
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/leaderboards/{leaderboardId}/scores', \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerScoreResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerScoreResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submits multiple scores to leaderboards.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitMultipleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitMultipleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitMultipleResponse
     */
	public function gamesScoresSubmitMultiple(
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitMultipleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitMultipleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitMultipleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/leaderboards/scores');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "playerScoreSubmissionList", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitMultipleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesScoresSubmitMultipleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerScoreListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerScoreListResponse', 'json');
            }
        }

        return $response;
    }
}