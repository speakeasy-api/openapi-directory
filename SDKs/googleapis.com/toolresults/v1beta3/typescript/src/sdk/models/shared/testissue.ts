/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Any } from "./any";
import { StackTrace } from "./stacktrace";
import { Expose, Type } from "class-transformer";

/**
 * Category of issue. Required.
 */
export enum TestIssueCategoryEnum {
  UnspecifiedCategory = "unspecifiedCategory",
  Common = "common",
  Robo = "robo",
}

/**
 * Severity of issue. Required.
 */
export enum TestIssueSeverityEnum {
  UnspecifiedSeverity = "unspecifiedSeverity",
  Info = "info",
  Suggestion = "suggestion",
  Warning = "warning",
  Severe = "severe",
}

/**
 * Type of issue. Required.
 */
export enum TestIssueTypeEnum {
  UnspecifiedType = "unspecifiedType",
  FatalException = "fatalException",
  NativeCrash = "nativeCrash",
  Anr = "anr",
  UnusedRoboDirective = "unusedRoboDirective",
  CompatibleWithOrchestrator = "compatibleWithOrchestrator",
  LauncherActivityNotFound = "launcherActivityNotFound",
  StartActivityNotFound = "startActivityNotFound",
  IncompleteRoboScriptExecution = "incompleteRoboScriptExecution",
  CompleteRoboScriptExecution = "completeRoboScriptExecution",
  FailedToInstall = "failedToInstall",
  AvailableDeepLinks = "availableDeepLinks",
  NonSDKApiUsageViolation = "nonSdkApiUsageViolation",
  NonSDKApiUsageReport = "nonSdkApiUsageReport",
  EncounteredNonAndroidUiWidgetScreen = "encounteredNonAndroidUiWidgetScreen",
  EncounteredLoginScreen = "encounteredLoginScreen",
  PerformedGoogleLogin = "performedGoogleLogin",
  IosException = "iosException",
  IosCrash = "iosCrash",
  PerformedMonkeyActions = "performedMonkeyActions",
  UsedRoboDirective = "usedRoboDirective",
  UsedRoboIgnoreDirective = "usedRoboIgnoreDirective",
  InsufficientCoverage = "insufficientCoverage",
  InAppPurchases = "inAppPurchases",
  CrashDialogError = "crashDialogError",
  UiElementsTooDeep = "uiElementsTooDeep",
  BlankScreen = "blankScreen",
  OverlappingUiElements = "overlappingUiElements",
  UnityException = "unityException",
  DeviceOutOfMemory = "deviceOutOfMemory",
  LogcatCollectionError = "logcatCollectionError",
  DetectedAppSplashScreen = "detectedAppSplashScreen",
}

/**
 * An issue detected occurring during a test execution.
 */
export class TestIssue extends SpeakeasyBase {
  /**
   * Category of issue. Required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: TestIssueCategoryEnum;

  /**
   * A brief human-readable message describing the issue. Required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: string;

  /**
   * Severity of issue. Required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "severity" })
  severity?: TestIssueSeverityEnum;

  /**
   * A stacktrace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stackTrace" })
  @Type(() => StackTrace)
  stackTrace?: StackTrace;

  /**
   * Type of issue. Required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: TestIssueTypeEnum;

  /**
   *  `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z". # JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { "@type": "type.googleapis.com/google.profile.Person", "firstName": , "lastName": } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message google.protobuf.Duration): { "@type": "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warning" })
  @Type(() => Any)
  warning?: Any;
}
