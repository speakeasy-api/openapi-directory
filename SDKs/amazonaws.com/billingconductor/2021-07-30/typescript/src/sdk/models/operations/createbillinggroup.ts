/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  The set of accounts that will be under the billing group. The set of accounts resemble the linked accounts in a consolidated family.
 */
export class CreateBillingGroupRequestBodyAccountGrouping extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "LinkedAccountIds" })
  linkedAccountIds?: string[];
}

/**
 *  The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group.
 */
export class CreateBillingGroupRequestBodyComputationPreference extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "PricingPlanArn" })
  pricingPlanArn?: string;
}

export class CreateBillingGroupRequestBody extends SpeakeasyBase {
  /**
   *  The set of accounts that will be under the billing group. The set of accounts resemble the linked accounts in a consolidated family.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountGrouping" })
  @Type(() => CreateBillingGroupRequestBodyAccountGrouping)
  accountGrouping: CreateBillingGroupRequestBodyAccountGrouping;

  /**
   *  The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ComputationPreference" })
  @Type(() => CreateBillingGroupRequestBodyComputationPreference)
  computationPreference: CreateBillingGroupRequestBodyComputationPreference;

  /**
   * The description of the billing group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   *  The billing group name. The names must be unique.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   *  The account ID that serves as the main account in a billing group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PrimaryAccountId" })
  primaryAccountId?: string;

  /**
   *  A map that contains tag keys and tag values that are attached to a billing group. This feature isn't available during the beta.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}

export class CreateBillingGroupRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateBillingGroupRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   *  The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amzn-Client-Token",
  })
  xAmznClientToken?: string;
}

export class CreateBillingGroupResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createBillingGroupOutput?: shared.CreateBillingGroupOutput;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ServiceLimitExceededException
   */
  @SpeakeasyMetadata()
  serviceLimitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
