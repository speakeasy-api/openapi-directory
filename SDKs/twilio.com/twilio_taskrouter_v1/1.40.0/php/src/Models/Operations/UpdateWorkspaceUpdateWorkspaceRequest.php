<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class UpdateWorkspaceUpdateWorkspaceRequest
{
    /**
     * The SID of the Activity that will be used when new Workers are created in the Workspace.
     * 
     * @var ?string $defaultActivitySid
     */
	#[SpeakeasyMetadata('form:name=DefaultActivitySid')]
    public ?string $defaultActivitySid = null;
    
    /**
     * The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
     * 
     * @var ?string $eventCallbackUrl
     */
	#[SpeakeasyMetadata('form:name=EventCallbackUrl')]
    public ?string $eventCallbackUrl = null;
    
    /**
     * The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
     * 
     * @var ?string $eventsFilter
     */
	#[SpeakeasyMetadata('form:name=EventsFilter')]
    public ?string $eventsFilter = null;
    
    /**
     * A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
     * 
     * @var ?string $friendlyName
     */
	#[SpeakeasyMetadata('form:name=FriendlyName')]
    public ?string $friendlyName = null;
    
    /**
     * Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be maintained as multi-tasking. There is no default when omitting this parameter. A multi-tasking Workspace can't be updated to single-tasking unless it is not a Flex Project and another (legacy) single-tasking Workspace exists. Multi-tasking allows Workers to handle multiple Tasks simultaneously. In multi-tasking mode, each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
     * 
     * @var ?bool $multiTaskEnabled
     */
	#[SpeakeasyMetadata('form:name=MultiTaskEnabled')]
    public ?bool $multiTaskEnabled = null;
    
	#[SpeakeasyMetadata('form:name=PrioritizeQueueOrder')]
    public ?\OpenAPI\OpenAPI\Models\Shared\WorkspaceEnumQueueOrderEnum $prioritizeQueueOrder = null;
    
    /**
     * The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
     * 
     * @var ?string $timeoutActivitySid
     */
	#[SpeakeasyMetadata('form:name=TimeoutActivitySid')]
    public ?string $timeoutActivitySid = null;
    
	public function __construct()
	{
		$this->defaultActivitySid = null;
		$this->eventCallbackUrl = null;
		$this->eventsFilter = null;
		$this->friendlyName = null;
		$this->multiTaskEnabled = null;
		$this->prioritizeQueueOrder = null;
		$this->timeoutActivitySid = null;
	}
}
