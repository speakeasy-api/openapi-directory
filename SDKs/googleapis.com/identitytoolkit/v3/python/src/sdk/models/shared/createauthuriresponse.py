"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAuthURIResponse:
    r"""Response of creating the IDP authentication URL."""
    
    all_providers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allProviders'), 'exclude': lambda f: f is None }})
    r"""all providers the user has once used to do federated login"""  
    auth_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authUri'), 'exclude': lambda f: f is None }})
    r"""The URI used by the IDP to authenticate the user."""  
    captcha_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('captchaRequired'), 'exclude': lambda f: f is None }})
    r"""True if captcha is required."""  
    for_existing_provider: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forExistingProvider'), 'exclude': lambda f: f is None }})
    r"""True if the authUri is for user's existing provider."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The fixed string identitytoolkit#CreateAuthUriResponse\\"."""  
    provider_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('providerId'), 'exclude': lambda f: f is None }})
    r"""The provider ID of the auth URI."""  
    registered: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registered'), 'exclude': lambda f: f is None }})
    r"""Whether the user is registered if the identifier is an email."""  
    session_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionId'), 'exclude': lambda f: f is None }})
    r"""Session ID which should be passed in the following verifyAssertion request."""  
    signin_methods: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signinMethods'), 'exclude': lambda f: f is None }})
    r"""All sign-in methods this user has used."""  
    