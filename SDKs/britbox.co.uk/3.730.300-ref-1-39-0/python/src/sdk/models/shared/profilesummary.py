"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import classificationsummary as shared_classificationsummary
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProfileSummary:
    r"""OK"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The id of the profile."""  
    is_active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive') }})
    r"""Whether the profile is active or not.
    
    **DEPRECATED** - Always true. Inactive profiles are no longer returned.
    """  
    marketing_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingEnabled') }})
    r"""Whether the profile has opted in or out of marketing material.
    
    **DEPRECATED** - Marketing material is no longer tied to profiles, only account. See `Account.marketingEnabled`.
    """  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The unique name of the profile."""  
    pin_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinEnabled') }})
    r"""Whether a pin is required to enter the profile."""  
    purchase_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseEnabled') }})
    r"""Whether the profile can make purchases with the account payment options."""  
    segments: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segments') }})
    r"""The segments a profile has been placed under"""  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""Hex color value assigned to the profile."""  
    hero_autoplay: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heroAutoplay'), 'exclude': lambda f: f is None }})
    r"""Gets the Hero row clip auto playback enabled"""  
    hero_with_audio: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heroWithAudio'), 'exclude': lambda f: f is None }})
    r"""Gets the Hero row clip auto playback audio enabled"""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""The code of the preferred language for the profile.
    Must be a valid ISO language code e.g. \"en-US\" and must match the code of
    one of the languages specified in the app config.
    See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
    """  
    max_rating_content_filter: Optional[shared_classificationsummary.ClassificationSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxRatingContentFilter'), 'exclude': lambda f: f is None }})  
    min_rating_playback_guard: Optional[shared_classificationsummary.ClassificationSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minRatingPlaybackGuard'), 'exclude': lambda f: f is None }})  
    