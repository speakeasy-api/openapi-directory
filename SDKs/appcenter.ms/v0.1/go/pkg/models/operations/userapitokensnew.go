// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UserAPITokensNewSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type UserAPITokensNewRequestBodyScopeEnum string

const (
	UserAPITokensNewRequestBodyScopeEnumAll    UserAPITokensNewRequestBodyScopeEnum = "all"
	UserAPITokensNewRequestBodyScopeEnumViewer UserAPITokensNewRequestBodyScopeEnum = "viewer"
)

func (e UserAPITokensNewRequestBodyScopeEnum) ToPointer() *UserAPITokensNewRequestBodyScopeEnum {
	return &e
}

func (e *UserAPITokensNewRequestBodyScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "viewer":
		*e = UserAPITokensNewRequestBodyScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensNewRequestBodyScopeEnum: %v", v)
	}
}

// UserAPITokensNewRequestBody - Description of the token
type UserAPITokensNewRequestBody struct {
	// The description of the token
	Description *string `json:"description,omitempty"`
	// The scope for this token.
	Scope []UserAPITokensNewRequestBodyScopeEnum `json:"scope,omitempty"`
}

type UserAPITokensNew401ApplicationJSONErrorCodeEnum string

const (
	UserAPITokensNew401ApplicationJSONErrorCodeEnumBadRequest          UserAPITokensNew401ApplicationJSONErrorCodeEnum = "BadRequest"
	UserAPITokensNew401ApplicationJSONErrorCodeEnumConflict            UserAPITokensNew401ApplicationJSONErrorCodeEnum = "Conflict"
	UserAPITokensNew401ApplicationJSONErrorCodeEnumNotAcceptable       UserAPITokensNew401ApplicationJSONErrorCodeEnum = "NotAcceptable"
	UserAPITokensNew401ApplicationJSONErrorCodeEnumNotFound            UserAPITokensNew401ApplicationJSONErrorCodeEnum = "NotFound"
	UserAPITokensNew401ApplicationJSONErrorCodeEnumInternalServerError UserAPITokensNew401ApplicationJSONErrorCodeEnum = "InternalServerError"
	UserAPITokensNew401ApplicationJSONErrorCodeEnumUnauthorized        UserAPITokensNew401ApplicationJSONErrorCodeEnum = "Unauthorized"
	UserAPITokensNew401ApplicationJSONErrorCodeEnumTooManyRequests     UserAPITokensNew401ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e UserAPITokensNew401ApplicationJSONErrorCodeEnum) ToPointer() *UserAPITokensNew401ApplicationJSONErrorCodeEnum {
	return &e
}

func (e *UserAPITokensNew401ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UserAPITokensNew401ApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensNew401ApplicationJSONErrorCodeEnum: %v", v)
	}
}

type UserAPITokensNew401ApplicationJSONError struct {
	Code    UserAPITokensNew401ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                          `json:"message"`
}

// UserAPITokensNew401ApplicationJSON - Unauthorized
type UserAPITokensNew401ApplicationJSON struct {
	Error UserAPITokensNew401ApplicationJSONError `json:"error"`
}

type UserAPITokensNew400ApplicationJSONErrorCodeEnum string

const (
	UserAPITokensNew400ApplicationJSONErrorCodeEnumBadRequest          UserAPITokensNew400ApplicationJSONErrorCodeEnum = "BadRequest"
	UserAPITokensNew400ApplicationJSONErrorCodeEnumConflict            UserAPITokensNew400ApplicationJSONErrorCodeEnum = "Conflict"
	UserAPITokensNew400ApplicationJSONErrorCodeEnumNotAcceptable       UserAPITokensNew400ApplicationJSONErrorCodeEnum = "NotAcceptable"
	UserAPITokensNew400ApplicationJSONErrorCodeEnumNotFound            UserAPITokensNew400ApplicationJSONErrorCodeEnum = "NotFound"
	UserAPITokensNew400ApplicationJSONErrorCodeEnumInternalServerError UserAPITokensNew400ApplicationJSONErrorCodeEnum = "InternalServerError"
	UserAPITokensNew400ApplicationJSONErrorCodeEnumUnauthorized        UserAPITokensNew400ApplicationJSONErrorCodeEnum = "Unauthorized"
	UserAPITokensNew400ApplicationJSONErrorCodeEnumTooManyRequests     UserAPITokensNew400ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e UserAPITokensNew400ApplicationJSONErrorCodeEnum) ToPointer() *UserAPITokensNew400ApplicationJSONErrorCodeEnum {
	return &e
}

func (e *UserAPITokensNew400ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UserAPITokensNew400ApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensNew400ApplicationJSONErrorCodeEnum: %v", v)
	}
}

type UserAPITokensNew400ApplicationJSONError struct {
	Code    UserAPITokensNew400ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                          `json:"message"`
}

// UserAPITokensNew400ApplicationJSON - Error
type UserAPITokensNew400ApplicationJSON struct {
	Error UserAPITokensNew400ApplicationJSONError `json:"error"`
}

type UserAPITokensNew201ApplicationJSONScopeEnum string

const (
	UserAPITokensNew201ApplicationJSONScopeEnumAll    UserAPITokensNew201ApplicationJSONScopeEnum = "all"
	UserAPITokensNew201ApplicationJSONScopeEnumViewer UserAPITokensNew201ApplicationJSONScopeEnum = "viewer"
)

func (e UserAPITokensNew201ApplicationJSONScopeEnum) ToPointer() *UserAPITokensNew201ApplicationJSONScopeEnum {
	return &e
}

func (e *UserAPITokensNew201ApplicationJSONScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "viewer":
		*e = UserAPITokensNew201ApplicationJSONScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensNew201ApplicationJSONScopeEnum: %v", v)
	}
}

// UserAPITokensNew201ApplicationJSON - Success
type UserAPITokensNew201ApplicationJSON struct {
	// The api token generated will not be accessible again
	APIToken string `json:"api_token"`
	// The creation time
	CreatedAt string `json:"created_at"`
	// The description of the token
	Description *string `json:"description,omitempty"`
	// The unique id (UUID) of the api token
	ID string `json:"id"`
	// The scope for this token.
	Scope []UserAPITokensNew201ApplicationJSONScopeEnum `json:"scope,omitempty"`
}

type UserAPITokensNewResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UserAPITokensNew201ApplicationJSONObject *UserAPITokensNew201ApplicationJSON
	// Error
	UserAPITokensNew400ApplicationJSONObject *UserAPITokensNew400ApplicationJSON
	// Unauthorized
	UserAPITokensNew401ApplicationJSONObject *UserAPITokensNew401ApplicationJSON
}
