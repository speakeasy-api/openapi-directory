"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import reaction as shared_reaction
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReactionsCreateForCommitCommentRequestBodyContentEnum(str, Enum):
    r"""The [reaction type](https://docs.github.com/enterprise-server@2.22/rest/reference/reactions#reaction-types) to add to the commit comment."""
    PLUS_1 = '+1'
    MINUS_1 = '-1'
    LAUGH = 'laugh'
    CONFUSED = 'confused'
    HEART = 'heart'
    HOORAY = 'hooray'
    ROCKET = 'rocket'
    EYES = 'eyes'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReactionsCreateForCommitCommentRequestBody:
    
    content: ReactionsCreateForCommitCommentRequestBodyContentEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The [reaction type](https://docs.github.com/enterprise-server@2.22/rest/reference/reactions#reaction-types) to add to the commit comment."""  
    

@dataclasses.dataclass
class ReactionsCreateForCommitCommentRequest:
    
    comment_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'comment_id', 'style': 'simple', 'explode': False }})
    r"""comment_id parameter"""  
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    request_body: ReactionsCreateForCommitCommentRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReactionsCreateForCommitComment415ApplicationJSON:
    r"""Preview header missing"""
    
    documentation_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentation_url') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclasses.dataclass
class ReactionsCreateForCommitCommentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    reaction: Optional[shared_reaction.Reaction] = dataclasses.field(default=None)
    r"""Reaction exists"""  
    reactions_create_for_commit_comment_415_application_json_object: Optional[ReactionsCreateForCommitComment415ApplicationJSON] = dataclasses.field(default=None)
    r"""Preview header missing"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    