<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootSapHana 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a SAP HANA system
     * 
     * Add a SAP HANA system to the Rubrik cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SapHanaSystemConfig $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddSapHanaSystemResponse
     */
	public function addSapHanaSystem(
        \OpenAPI\OpenAPI\Models\Shared\SapHanaSystemConfig $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddSapHanaSystemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/system');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddSapHanaSystemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaAddSystemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaAddSystemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Configure the target database for system copy restore
     * 
     * Initiates a job to configure the specified target database for a system copy restore by sending metadata about the source database. System copy restore in SAP HANA is done across different databases.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfigureSapHanaRestoreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigureSapHanaRestoreResponse
     */
	public function configureSapHanaRestore(
        \OpenAPI\OpenAPI\Models\Operations\ConfigureSapHanaRestoreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigureSapHanaRestoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/{id}/configure_restore', \OpenAPI\OpenAPI\Models\Operations\ConfigureSapHanaRestoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sapHanaRestoreSourceConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigureSapHanaRestoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create on demand database snapshot
     * 
     * Initiates a job to take an on demand full snapshot of a specified SAP HANA database object. The GET /sap_hana/db/request/{id} endpoint can be used to monitor the progress of the job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSapHanaBackupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSapHanaBackupResponse
     */
	public function createOnDemandSapHanaBackup(
        \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSapHanaBackupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSapHanaBackupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSapHanaBackupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "baseOnDemandSnapshotConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSapHanaBackupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh SAP HANA system metadata
     * 
     * Initiates a job to refresh metadata of a SAP HANA system object. The GET /sap_hana/system/request/{id} endpoint can be used to monitor the progress of the job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSapHanaSystemRefreshRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSapHanaSystemRefreshResponse
     */
	public function createSapHanaSystemRefresh(
        \OpenAPI\OpenAPI\Models\Operations\CreateSapHanaSystemRefreshRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSapHanaSystemRefreshResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/system/{id}/refresh', \OpenAPI\OpenAPI\Models\Operations\CreateSapHanaSystemRefreshRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSapHanaSystemRefreshResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a particular full snapshot of a SAP HANA database
     * 
     * Initiates a request to delete a particular full snapshot of a SAP HANA database. If the log retention period for the database is still in effect, the snapshot will be deleted when the log retention period ends.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaDbSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaDbSnapshotResponse
     */
	public function deleteSapHanaDbSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaDbSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaDbSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/snapshot/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaDbSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaDbSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a SAP HANA system
     * 
     * Initiates a job to delete a SAP HANA system object. GET /sap_hana/system/request/{id} endpoint can be used to monitor the progress of the job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaSystemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaSystemResponse
     */
	public function deleteSapHanaSystem(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaSystemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaSystemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/system/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaSystemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSapHanaSystemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve summary information for missed snapshots of a SAP HANA database
     * 
     * Returns a summary of information for the missed snapshots of a SAP HANA database. Retrieve only the missed snapshots that occur between the beginning and ending timestamps.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMissedSapHanaDbSnapshotsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMissedSapHanaDbSnapshotsResponse
     */
	public function getMissedSapHanaDbSnapshots(
        \OpenAPI\OpenAPI\Models\Operations\GetMissedSapHanaDbSnapshotsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMissedSapHanaDbSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/{id}/missed_snapshot', \OpenAPI\OpenAPI\Models\Operations\GetMissedSapHanaDbSnapshotsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMissedSapHanaDbSnapshotsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMissedSapHanaDbSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missedSnapshotListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MissedSnapshotListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get detailed information for an SAP HANA database
     * 
     * Returns a detailed view of the SAP HANA database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDatabaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDatabaseResponse
     */
	public function getSapHanaDatabase(
        \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDatabaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDatabaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDatabaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDatabaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaDatabaseDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaDatabaseDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the status of a SAP HANA database request
     * 
     * Get details about a SAP HANA database related request which includes the status of data backup job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbAsyncRequestStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbAsyncRequestStatusResponse
     */
	public function getSapHanaDbAsyncRequestStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbAsyncRequestStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbAsyncRequestStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/request/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbAsyncRequestStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbAsyncRequestStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get recoverable ranges of a SAP HANA database
     * 
     * Retrieve the recoverable ranges for a specified SAP HANA database. Provide a beginning and/or ending timestamp to retrieve only the recoverable ranges that fall within this period of time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbRecoverableRangesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbRecoverableRangesResponse
     */
	public function getSapHanaDbRecoverableRanges(
        \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbRecoverableRangesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbRecoverableRangesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/{id}/recoverable_range', \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbRecoverableRangesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbRecoverableRangesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbRecoverableRangesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaRecoverableRangeListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaRecoverableRangeListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get SAP HANA database snapshot details
     * 
     * Retrieve detailed information about a full or an incremental snapshot of a SAP HANA database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbSnapshotResponse
     */
	public function getSapHanaDbSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/snapshot/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSapHanaDbSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaDatabaseSnapshotDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaDatabaseSnapshotDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for a SAP HANA system
     * 
     * Returns a summary view of a SAP HANA system.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemResponse
     */
	public function getSapHanaSystem(
        \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/system/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaSystemSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaSystemSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the status of a SAP HANA system request
     * 
     * Get details about a SAP HANA system related request which includes the status of delete or refresh system job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemAsyncRequestStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemAsyncRequestStatusResponse
     */
	public function getSapHanaSystemAsyncRequestStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemAsyncRequestStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemAsyncRequestStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/system/request/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemAsyncRequestStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSapHanaSystemAsyncRequestStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the SLA Domain for an SAP HANA database
     * 
     * Update the SLA Domain that is configured for an SAP HANA database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaDatabaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaDatabaseResponse
     */
	public function patchSapHanaDatabase(
        \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaDatabaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaDatabaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaDatabaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sapHanaDatabasePatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaDatabaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaDatabaseDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaDatabaseDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the SLA Domain for a SAP HANA system
     * 
     * Update the SLA Domain that is configured for a SAP HANA system.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaSystemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaSystemResponse
     */
	public function patchSapHanaSystem(
        \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaSystemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaSystemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/system/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaSystemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sapHanaSystemPatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSapHanaSystemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaPatchSystemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaPatchSystemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for discovered SAP HANA databases
     * 
     * Returns summary information for SAP HANA databases connected to the CDM cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDatabasesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDatabasesResponse
     */
	public function querySapHanaDatabases(
        \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDatabasesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDatabasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDatabasesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDatabasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaDatabaseSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaDatabaseSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a summary list of snapshots for a SAP HANA database
     * 
     * Retrieve summary information about the full and incremental snapshots of a specified SAP HANA database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDbSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDbSnapshotResponse
     */
	public function querySapHanaDbSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDbSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDbSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDbSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDbSnapshotRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaDbSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaDatabaseSnapshotSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaDatabaseSnapshotSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for added SAP HANA systems
     * 
     * Returns summary information for SAP HANA systems.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaSystemsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaSystemsResponse
     */
	public function querySapHanaSystems(
        \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaSystemsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaSystemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/system');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuerySapHanaSystemsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuerySapHanaSystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sapHanaSystemSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SapHanaSystemSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset the configuration for system copy restore on target database
     * 
     * Initiates a job to reset the configuration for the system copy restore on the specified target database. System copy restore in SAP HANA is done across different databases.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnconfigureSapHanaRestoreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnconfigureSapHanaRestoreResponse
     */
	public function unconfigureSapHanaRestore(
        \OpenAPI\OpenAPI\Models\Operations\UnconfigureSapHanaRestoreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnconfigureSapHanaRestoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sap_hana/db/{id}/unconfigure_restore', \OpenAPI\OpenAPI\Models\Operations\UnconfigureSapHanaRestoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnconfigureSapHanaRestoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
}