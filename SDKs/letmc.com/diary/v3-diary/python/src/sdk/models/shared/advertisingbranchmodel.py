"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdvertisingBranchModel:
    r"""Defines a single branch of a client."""
    
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address1'), 'exclude': lambda f: f is None }})
    r"""Branch address line 1."""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address2'), 'exclude': lambda f: f is None }})
    r"""Branch address line 2."""  
    address3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address3'), 'exclude': lambda f: f is None }})
    r"""Branch address line 3."""  
    address4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address4'), 'exclude': lambda f: f is None }})
    r"""Branch address line 4."""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompanyName'), 'exclude': lambda f: f is None }})
    r"""The relevant company name, if not the one specified on the branch then the one on company."""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('County'), 'exclude': lambda f: f is None }})
    r"""County"""  
    e_mail_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EMailAddress'), 'exclude': lambda f: f is None }})
    r"""Branch email address."""  
    e_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ETag'), 'exclude': lambda f: f is None }})
    r"""A unique identifier defining the object and change revision."""  
    fax_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FaxPhone'), 'exclude': lambda f: f is None }})
    r"""Branch fax phone number."""  
    land_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LandPhone'), 'exclude': lambda f: f is None }})
    r"""Branch land phone number."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The branch name."""  
    oid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OID'), 'exclude': lambda f: f is None }})
    r"""The unique Object ID (OID)."""  
    postcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Postcode'), 'exclude': lambda f: f is None }})
    r"""Branch address postcode."""  
    web_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WebAddress'), 'exclude': lambda f: f is None }})
    r"""Branch web address."""  
    