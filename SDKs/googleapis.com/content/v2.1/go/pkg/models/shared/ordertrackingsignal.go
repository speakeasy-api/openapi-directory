// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// OrderTrackingSignalInput - Represents a merchant trade from which signals are extracted, e.g. shipping.
type OrderTrackingSignalInput struct {
	// The price represented as a number and currency.
	CustomerShippingFee *PriceAmount `json:"customerShippingFee,omitempty"`
	// Required. The delivery postal code, as a continuous string without spaces or dashes, e.g. "95016". This field will be anonymized in returned OrderTrackingSignal creation response.
	DeliveryPostalCode *string `json:"deliveryPostalCode,omitempty"`
	// Required. The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping destination.
	DeliveryRegionCode *string `json:"deliveryRegionCode,omitempty"`
	// Information about line items in the order.
	LineItems []OrderTrackingSignalLineItemDetails `json:"lineItems,omitempty"`
	// The Google merchant ID of this order tracking signal. This value is optional. If left unset, the caller's merchant ID is used. You must request access in order to provide data on behalf of another merchant. For more information, see [Submitting Order Tracking Signals](/shopping-content/guides/order-tracking-signals).
	MerchantID *string `json:"merchantId,omitempty"`
	// Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
	OrderCreatedTime *DateTime `json:"orderCreatedTime,omitempty"`
	// Required. The ID of the order on the merchant side. This field will be hashed in returned OrderTrackingSignal creation response.
	OrderID *string `json:"orderId,omitempty"`
	// The mapping of the line items to the shipment information.
	ShipmentLineItemMapping []OrderTrackingSignalShipmentLineItemMapping `json:"shipmentLineItemMapping,omitempty"`
	// The shipping information for the order.
	ShippingInfo []OrderTrackingSignalShippingInfo `json:"shippingInfo,omitempty"`
}

// OrderTrackingSignal - Represents a merchant trade from which signals are extracted, e.g. shipping.
type OrderTrackingSignal struct {
	// The price represented as a number and currency.
	CustomerShippingFee *PriceAmount `json:"customerShippingFee,omitempty"`
	// Required. The delivery postal code, as a continuous string without spaces or dashes, e.g. "95016". This field will be anonymized in returned OrderTrackingSignal creation response.
	DeliveryPostalCode *string `json:"deliveryPostalCode,omitempty"`
	// Required. The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping destination.
	DeliveryRegionCode *string `json:"deliveryRegionCode,omitempty"`
	// Information about line items in the order.
	LineItems []OrderTrackingSignalLineItemDetails `json:"lineItems,omitempty"`
	// The Google merchant ID of this order tracking signal. This value is optional. If left unset, the caller's merchant ID is used. You must request access in order to provide data on behalf of another merchant. For more information, see [Submitting Order Tracking Signals](/shopping-content/guides/order-tracking-signals).
	MerchantID *string `json:"merchantId,omitempty"`
	// Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
	OrderCreatedTime *DateTime `json:"orderCreatedTime,omitempty"`
	// Required. The ID of the order on the merchant side. This field will be hashed in returned OrderTrackingSignal creation response.
	OrderID *string `json:"orderId,omitempty"`
	// Output only. The ID that uniquely identifies this order tracking signal.
	OrderTrackingSignalID *string `json:"orderTrackingSignalId,omitempty"`
	// The mapping of the line items to the shipment information.
	ShipmentLineItemMapping []OrderTrackingSignalShipmentLineItemMapping `json:"shipmentLineItemMapping,omitempty"`
	// The shipping information for the order.
	ShippingInfo []OrderTrackingSignalShippingInfo `json:"shippingInfo,omitempty"`
}
