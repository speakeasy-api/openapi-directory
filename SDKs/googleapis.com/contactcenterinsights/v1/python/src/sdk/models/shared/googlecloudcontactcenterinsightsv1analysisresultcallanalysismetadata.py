"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudcontactcenterinsightsv1callannotation as shared_googlecloudcontactcenterinsightsv1callannotation
from ..shared import googlecloudcontactcenterinsightsv1conversationlevelsentiment as shared_googlecloudcontactcenterinsightsv1conversationlevelsentiment
from ..shared import googlecloudcontactcenterinsightsv1entity as shared_googlecloudcontactcenterinsightsv1entity
from ..shared import googlecloudcontactcenterinsightsv1intent as shared_googlecloudcontactcenterinsightsv1intent
from ..shared import googlecloudcontactcenterinsightsv1issuemodelresult as shared_googlecloudcontactcenterinsightsv1issuemodelresult
from ..shared import googlecloudcontactcenterinsightsv1phrasematchdata as shared_googlecloudcontactcenterinsightsv1phrasematchdata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadata:
    r"""Call-specific metadata created during analysis."""
    
    annotations: Optional[list[shared_googlecloudcontactcenterinsightsv1callannotation.GoogleCloudContactcenterinsightsV1CallAnnotation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotations'), 'exclude': lambda f: f is None }})
    r"""A list of call annotations that apply to this call."""  
    entities: Optional[dict[str, shared_googlecloudcontactcenterinsightsv1entity.GoogleCloudContactcenterinsightsV1Entity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entities'), 'exclude': lambda f: f is None }})
    r"""All the entities in the call."""  
    intents: Optional[dict[str, shared_googlecloudcontactcenterinsightsv1intent.GoogleCloudContactcenterinsightsV1Intent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intents'), 'exclude': lambda f: f is None }})
    r"""All the matched intents in the call."""  
    issue_model_result: Optional[shared_googlecloudcontactcenterinsightsv1issuemodelresult.GoogleCloudContactcenterinsightsV1IssueModelResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueModelResult'), 'exclude': lambda f: f is None }})
    r"""Issue Modeling result on a conversation."""  
    phrase_matchers: Optional[dict[str, shared_googlecloudcontactcenterinsightsv1phrasematchdata.GoogleCloudContactcenterinsightsV1PhraseMatchData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phraseMatchers'), 'exclude': lambda f: f is None }})
    r"""All the matched phrase matchers in the call."""  
    sentiments: Optional[list[shared_googlecloudcontactcenterinsightsv1conversationlevelsentiment.GoogleCloudContactcenterinsightsV1ConversationLevelSentiment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentiments'), 'exclude': lambda f: f is None }})
    r"""Overall conversation-level sentiment for each channel of the call."""  
    