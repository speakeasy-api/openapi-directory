"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import watchtarget as shared_watchtarget
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WatchErrorTypeEnum(str, Enum):
    r"""Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information."""
    ERROR_TYPE_UNSPECIFIED = 'ERROR_TYPE_UNSPECIFIED'
    PROJECT_NOT_AUTHORIZED = 'PROJECT_NOT_AUTHORIZED'
    NO_USER_ACCESS = 'NO_USER_ACCESS'
    OTHER_ERRORS = 'OTHER_ERRORS'

class WatchEventTypeEnum(str, Enum):
    r"""Required. Which event type to watch for."""
    EVENT_TYPE_UNSPECIFIED = 'EVENT_TYPE_UNSPECIFIED'
    SCHEMA = 'SCHEMA'
    RESPONSES = 'RESPONSES'

class WatchStateEnum(str, Enum):
    r"""Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    SUSPENDED = 'SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Watch:
    r"""A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew"""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp of when this was created."""  
    error_type: Optional[WatchErrorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information."""  
    event_type: Optional[WatchEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType'), 'exclude': lambda f: f is None }})
    r"""Required. Which event type to watch for."""  
    expire_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id."""  
    state: Optional[WatchStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`."""  
    target: Optional[shared_watchtarget.WatchTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})
    r"""The target for notification delivery."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WatchInput:
    r"""A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew"""
    
    event_type: Optional[WatchEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType'), 'exclude': lambda f: f is None }})
    r"""Required. Which event type to watch for."""  
    target: Optional[shared_watchtarget.WatchTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})
    r"""The target for notification delivery."""  
    