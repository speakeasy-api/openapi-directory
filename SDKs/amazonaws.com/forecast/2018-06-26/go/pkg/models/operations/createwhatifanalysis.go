// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateWhatIfAnalysisXAmzTargetEnum
type CreateWhatIfAnalysisXAmzTargetEnum string

const (
	CreateWhatIfAnalysisXAmzTargetEnumAmazonForecastCreateWhatIfAnalysis CreateWhatIfAnalysisXAmzTargetEnum = "AmazonForecast.CreateWhatIfAnalysis"
)

func (e CreateWhatIfAnalysisXAmzTargetEnum) ToPointer() *CreateWhatIfAnalysisXAmzTargetEnum {
	return &e
}

func (e *CreateWhatIfAnalysisXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonForecast.CreateWhatIfAnalysis":
		*e = CreateWhatIfAnalysisXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWhatIfAnalysisXAmzTargetEnum: %v", v)
	}
}

type CreateWhatIfAnalysisRequest struct {
	CreateWhatIfAnalysisRequest shared.CreateWhatIfAnalysisRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  CreateWhatIfAnalysisXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateWhatIfAnalysisResponse struct {
	ContentType string
	// Success
	CreateWhatIfAnalysisResponse *shared.CreateWhatIfAnalysisResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
