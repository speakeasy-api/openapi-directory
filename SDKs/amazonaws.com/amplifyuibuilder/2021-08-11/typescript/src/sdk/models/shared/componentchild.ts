/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ComponentEvent } from "./componentevent";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A nested UI configuration within a parent <code>Component</code>.
 */
export class ComponentChild extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ComponentChild })
  @Expose({ name: "children" })
  @Type(() => ComponentChild)
  children?: ComponentChild[];

  @SpeakeasyMetadata()
  @Expose({ name: "componentType" })
  componentType: string;

  @SpeakeasyMetadata({ elemType: ComponentEvent })
  @Expose({ name: "events" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ComponentEvent> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ComponentEvent);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  events?: Record<string, ComponentEvent>;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Describes the properties of the child component. You can't specify <code>tags</code> as a valid property for <code>properties</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties: any;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceId" })
  sourceId?: string;
}
