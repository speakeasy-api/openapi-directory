/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Group } from "./group";
import { UserPublic } from "./userpublic";
import { Expose, Type } from "class-transformer";

/**
 * The rights of the current user on a score or collection
 */
export class ResourceCollaborator extends SpeakeasyBase {
  /**
   * `True` if the current user can manage the current document (i.e. share, delete)
   *
   * @remarks
   *
   * If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aclAdmin" })
  aclAdmin?: boolean;

  /**
   * `True` if the current user can read the current document
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aclRead" })
  aclRead?: boolean;

  /**
   * `True` if the current user can modify the current document.
   *
   * @remarks
   *
   * If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aclWrite" })
  aclWrite?: boolean;

  /**
   * If this object is a permission of a collection, this property will contain the unique identifier of the collection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collection" })
  collection?: string;

  /**
   * A group of users
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group" })
  @Type(() => Group)
  group?: Group;

  /**
   * The unique identifier of the permission
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * If this property is `true`, this is still a pending invitation
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invited" })
  invited?: boolean;

  /**
   * `True` if the current user is a collaborator of the current document (direct or via group).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isCollaborator" })
  isCollaborator?: boolean;

  /**
   * If this object is a permission of a score, this property will contain the unique identifier of the score
   */
  @SpeakeasyMetadata()
  @Expose({ name: "score" })
  score?: string;

  /**
   * Public User details
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => UserPublic)
  user?: UserPublic;

  /**
   * If the collaborator is not a user of Flat yet, this field will contain his email.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userEmail" })
  userEmail?: string;
}
