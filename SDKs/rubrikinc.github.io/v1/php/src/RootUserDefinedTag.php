<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootUserDefinedTag 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a user-defined resource tag for tagging cloud compute resources
     * 
     * Create a user-defined resource tag for tagging cloud compute resources created by CloudOn and CloutOut.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ResourceTagDefinition $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedTagResponse
     */
	public function createUserDefinedTag(
        \OpenAPI\OpenAPI\Models\Shared\ResourceTagDefinition $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user_defined_tag');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceTagDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceTagDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a user-defined resource tag
     * 
     * Delete a user-defined resource tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagResponse
     */
	public function deleteUserDefinedTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user_defined_tag/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a list of user-defined resource tags
     * 
     * Delete a list of user-defined resource tags in one delete operation.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagBulkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagBulkResponse
     */
	public function deleteUserDefinedTagBulk(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagBulkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagBulkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user_defined_tag');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagBulkRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedTagBulkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceTagDeleteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceTagDeleteResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get user-defined tag
     * 
     * Retrieve details of a user-defined resource tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserDefinedTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserDefinedTagResponse
     */
	public function getUserDefinedTag(
        \OpenAPI\OpenAPI\Models\Operations\GetUserDefinedTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserDefinedTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user_defined_tag/{id}', \OpenAPI\OpenAPI\Models\Operations\GetUserDefinedTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserDefinedTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceTagDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceTagDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get user-defined resource tags
     * 
     * Get user-defined resource tags for the cloud compute resources created by CloudOn and CloudOut.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryUserDefinedTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryUserDefinedTagResponse
     */
	public function queryUserDefinedTag(
        \OpenAPI\OpenAPI\Models\Operations\QueryUserDefinedTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryUserDefinedTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user_defined_tag');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryUserDefinedTagRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryUserDefinedTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceTagGetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceTagGetResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the value of a user-defined resource tag
     * 
     * Update the value of a user-defined resource tag.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserDefinedTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserDefinedTagResponse
     */
	public function updateUserDefinedTag(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserDefinedTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserDefinedTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user_defined_tag/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateUserDefinedTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resourceTagUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserDefinedTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceTagDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceTagDetail', 'json');
            }
        }

        return $response;
    }
}