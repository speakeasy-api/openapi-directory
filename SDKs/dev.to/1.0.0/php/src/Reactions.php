<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reactions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * create reaction
     * 
     * This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:
     *         * "Like"ing an Article will create a new "like" Reaction from the user for that Articles
     *         * "Like"ing that Article a second time will return the previous "like"
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsResponse
     */
	public function postApiReactions(
        \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/reactions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostApiReactionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * toggle reaction
     * 
     * This endpoint allows the client to toggle the user's reaction to a specified reactable (eg, Article, Comment, or User). For examples:
     *         * "Like"ing an Article will create a new "like" Reaction from the user for that Articles
     *         * "Like"ing that Article a second time will remove the "like" from the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsToggleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsToggleResponse
     */
	public function postApiReactionsToggle(
        \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsToggleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsToggleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/reactions/toggle');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostApiReactionsToggleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiReactionsToggleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}