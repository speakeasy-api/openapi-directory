<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Meetings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Perform batch poll creation
     * 
     * Polls allow the meeting host to survey attendees. Use this API to create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>
     * 
     * **Scopes**: `meeting:write:admin` `meeting:write`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisites**:<br>
     * * Host user type must be **Pro** or higher plan.
     * * Polling feature must be enabled in the host's account.
     * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBatchPollsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBatchPollsResponse
     */
	public function createBatchPolls(
        \OpenAPI\OpenAPI\Models\Operations\CreateBatchPollsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBatchPollsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/batch_polls', \OpenAPI\OpenAPI\Models\Operations\CreateBatchPollsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBatchPollsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createBatchPolls201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateBatchPolls201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Get live stream details
     * 
     * Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to get a meeting's live stream configuration details such as Stream URL, Stream Key and Page URL.<br><br>
     * **Prerequisites:**<br>
     * * Meeting host must be a licensed user with a Pro or higher plan.<br>
     * * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.<br><br>
     * **Scopes:** `meeting:read:admin` `meeting:read`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLiveStreamDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLiveStreamDetailsResponse
     */
	public function getLiveStreamDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetLiveStreamDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLiveStreamDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/livestream', \OpenAPI\OpenAPI\Models\Operations\GetLiveStreamDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLiveStreamDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getLiveStreamDetails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetLiveStreamDetails200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Use in-Meeting recording controls
     * 
     * Use this API to control the [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) **recording features** such as starting a recording, stopping a recording, pausing a recording, and resuming a recording. This API only works for Cloud Recordings and not for local recordings.
     * 
     * 
     * **Prerequisite:**
     * * The meeting must be a live meeting.
     * * Cloud Recording must be enabled.
     * * The user using this API must either be the host or alternative host of the meeting.
     * 
     * **Scopes:** `meeting:write`, `meeting:write:admin`, `meeting:master`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InMeetingRecordingControlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InMeetingRecordingControlResponse
     */
	public function inMeetingRecordingControl(
        \OpenAPI\OpenAPI\Models\Operations\InMeetingRecordingControlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InMeetingRecordingControlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/live_meetings/{meetingId}/events', \OpenAPI\OpenAPI\Models\Operations\InMeetingRecordingControlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InMeetingRecordingControlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inMeetingRecordingControl202ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List meeting templates
     * 
     * Use this API to list [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) that are available to be used by a user.
     * 
     * **Scope:** `meeting:read` or `meeting:read:admin`
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMeetingTemplatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMeetingTemplatesResponse
     */
	public function listMeetingTemplates(
        \OpenAPI\OpenAPI\Models\Operations\ListMeetingTemplatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMeetingTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/meeting_templates', \OpenAPI\OpenAPI\Models\Operations\ListMeetingTemplatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMeetingTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMeetingTemplates200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMeetingTemplates200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List past meeting's poll results
     * 
     * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. Use this API to list poll results of a meeting.<br><br>
     * 
     * **Scopes**: `meeting:read:admin`, `meeting:read`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` <br>
     * **Prerequisites**:<br>
     * * Host user type must be **Pro**.
     * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPollsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPollsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPollsResponse
     */
	public function listPastMeetingPolls(
        \OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPollsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPollsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPollsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/past_meetings/{meetingId}/polls', \OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPollsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPollsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPastMeetingPolls200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListPastMeetingPolls200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get a meeting
     * 
     * Retrieve the details of a meeting.<br><br>
     * **Scopes:** `meeting:read:admin` `meeting:read`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingResponse
     */
	public function meeting(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}', \OpenAPI\OpenAPI\Models\Operations\MeetingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->meeting200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Meeting200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a meeting
     * 
     * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. <br>This API has a daily rate limit of 100 requests per day. Therefore, only 100 **Create a Meeting** API requests are permitted within a 24 hour window for a user.<br>
     * 
     * <aside>The <code>start_url</code> of a meeting is a URL using which a host or an alternative host can start a meeting. The expiration time for the <code>start_url</code> field is two hours for all regular users. 
     * 	
     * For custCreate meeting hosts( i.e., users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API), the expiration time of the <code>start_url</code> field is 90 days from the generation of the <code>start_url</code>.
     * 	
     * For security reasons, the recommended way to retrieve the updated value for the <code>start_url</code> field programmatically (after expiry) is by calling the [Retrieve a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) and referring to the value of the <code>start_url</code> field in the response.</aside><br><br>
     * Scopes: `meeting:write:admin` `meeting:write`
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingCreateResponse
     */
	public function meetingCreate(
        \OpenAPI\OpenAPI\Models\Operations\MeetingCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/meetings', \OpenAPI\OpenAPI\Models\Operations\MeetingCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->meetingCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingCreate201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a meeting
     * 
     * Delete a meeting.<br><br>
     * **Scopes:** `meeting:write:admin` `meeting:write`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingDeleteResponse
     */
	public function meetingDelete(
        \OpenAPI\OpenAPI\Models\Operations\MeetingDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}', \OpenAPI\OpenAPI\Models\Operations\MeetingDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get meeting invitation
     * 
     * Retrieve the meeting invite note that was sent for a specific meeting.<br><br>
     * **Scopes:** `meeting:read:admin` `meeting:read`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingInvitationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingInvitationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingInvitationResponse
     */
	public function meetingInvitation(
        \OpenAPI\OpenAPI\Models\Operations\MeetingInvitationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingInvitationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingInvitationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/invitation', \OpenAPI\OpenAPI\Models\Operations\MeetingInvitationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingInvitationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->meetingInvitation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingInvitationMeetingInvitation', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update Live Stream Status
     * 
     * Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a meeting's live stream.<br><br>
     * **Prerequisites:**<br>
     * * Meeting host must have a Pro license.<br>
     * **Scopes:** `meeting:write:admin` `meeting:write`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamStatusUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamStatusUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamStatusUpdateResponse
     */
	public function meetingLiveStreamStatusUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamStatusUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamStatusUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamStatusUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/livestream/status', \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamStatusUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamStatusUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Update a live stream
     * 
     * Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update a meeting's live stream information.<br><br>
     * **Prerequisites:**<br>
     * * Meeting host must have a Pro license.<br>
     * **Scopes:** `meeting:write:admin` `meeting:write`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamUpdateResponse
     */
	public function meetingLiveStreamUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/livestream', \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingLiveStreamUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a meeting poll
     * 
     * Polls allow the meeting host to survey attendees. Use this API to create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>
     * 
     * **Scopes**: `meeting:write:admin` `meeting:write`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisites**:<br>
     * * Host user type must be **Pro** or higher plan.
     * * Polling feature must be enabled in the host's account.
     * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingPollCreateResponse
     */
	public function meetingPollCreate(
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingPollCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/polls', \OpenAPI\OpenAPI\Models\Operations\MeetingPollCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingPollCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->poll = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingPollCreatePoll2', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a meeting poll
     * 
     * Polls allow the meeting host to survey attendees. Use this API to delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br>
     * **Scopes**: `meeting:write:admin` `meeting:write`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>
     * **Prerequisites**:<br>
     * * Host user type must be **Pro**.
     * * Polling feature should be enabled in the host's account.
     * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingPollDeleteResponse
     */
	public function meetingPollDelete(
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingPollDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/polls/{pollId}', \OpenAPI\OpenAPI\Models\Operations\MeetingPollDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingPollDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a meeting poll
     * 
     * Polls allow the meeting host to survey attendees. Use this API to get information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br><br>
     * **Scopes**: `meeting:read:admin` `meeting:read`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingPollGetResponse
     */
	public function meetingPollGet(
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingPollGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/polls/{pollId}', \OpenAPI\OpenAPI\Models\Operations\MeetingPollGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingPollGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->poll = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingPollGetPoll', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a meeting poll
     * 
     * Polls allow the meeting host to survey attendees. Use this API to update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)<br><br>
     * **Scopes**: `meeting:write:admin` `meeting:write`
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingPollUpdateResponse
     */
	public function meetingPollUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingPollUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/polls/{pollId}', \OpenAPI\OpenAPI\Models\Operations\MeetingPollUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingPollUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List meeting polls
     * 
     * Polls allow the meeting host to survey attendees. Use this API to list [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.<br><br>
     * 
     * **Scopes**: `meeting:read:admin` `meeting:read`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisites**:<br>
     * * Host user type must be **Pro** or higher plan.
     * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingPollsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingPollsResponse
     */
	public function meetingPolls(
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingPollsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingPollsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/polls', \OpenAPI\OpenAPI\Models\Operations\MeetingPollsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingPollsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pollList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingPollsPollList', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Add meeting registrant
     * 
     * Register a participant for a meeting.<br><br> Note that there is a maximum limit of 4999 registrants per meeting and users will see an error if the capacity has reached.
     * 
     * **Prerequisite:**<br>
     * * Host user type must be "Licensed".
     * 
     * **Scopes:** `meeting:write:admin` `meeting:write`
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateResponse
     */
	public function meetingRegistrantCreate(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/registrants', \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->meetingRegistrantCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantCreate201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update registration questions
     * 
     * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br><br>
     * **Scopes:** `meeting:write`, `meeting:write:admin`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     *  
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantQuestionUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantQuestionUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantQuestionUpdateResponse
     */
	public function meetingRegistrantQuestionUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantQuestionUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantQuestionUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantQuestionUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/registrants/questions', \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantQuestionUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantQuestionUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update registrant's status
     * 
     * Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.<br><br>
     * **Scopes:** `meeting:write:admin` `meeting:write`
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusResponse
     */
	public function meetingRegistrantStatus(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/registrants/status', \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List meeting registrants
     * 
     * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). Use this API to list users that have registered for a meeting.<br><br>
     * **Scopes**: `meeting:read:admin` `meeting:read`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsResponse
     */
	public function meetingRegistrants(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/registrants', \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->registrationList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsRegistrationList', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List registration questions 
     * 
     * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br>
     * 
     * **Scopes:** `meeting:read`, `meeting:read:admin`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetResponse
     */
	public function meetingRegistrantsQuestionsGet(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/registrants/questions', \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->meetingRegistrantQuestions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update meeting status
     * 
     * Update the status of a meeting.<br><br>
     * **Scopes:** `meeting:write:admin` `meeting:write`
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingStatusResponse
     */
	public function meetingStatus(
        \OpenAPI\OpenAPI\Models\Operations\MeetingStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/status', \OpenAPI\OpenAPI\Models\Operations\MeetingStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a meeting
     * 
     * Update the details of a meeting.<br>This API has a rate limit of 100 requests per day. Therefore, a meeting can only be updated for a maximum of 100 times within a 24 hour window.<br>
     * **Scopes:** `meeting:write:admin` `meeting:write`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonResponse
     */
	public function meetingUpdateJson(
        \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}', \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a meeting
     * 
     * Update the details of a meeting.<br>This API has a rate limit of 100 requests per day. Therefore, a meeting can only be updated for a maximum of 100 times within a 24 hour window.<br>
     * **Scopes:** `meeting:write:admin` `meeting:write`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartResponse
     */
	public function meetingUpdateMultipart(
        \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}', \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingUpdateMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a meeting registrant
     * 
     * Delete a meeting registrant.<br><br>
     * **Scopes**: `meeting:write:admin` `meeting:write`<br>
     *  <br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingregistrantdeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingregistrantdeleteResponse
     */
	public function meetingregistrantdelete(
        \OpenAPI\OpenAPI\Models\Operations\MeetingregistrantdeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingregistrantdeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/registrants/{registrantId}', \OpenAPI\OpenAPI\Models\Operations\MeetingregistrantdeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingregistrantdeleteRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingregistrantdeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List meetings
     * 
     * List all the meetings that were scheduled for a user (meeting host). This API only supports scheduled meetings and thus, details on instant meetings are not returned via this API.<br><br>
     * **Scopes:** `meeting:read:admin` `meeting:read`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingsResponse
     */
	public function meetings(
        \OpenAPI\OpenAPI\Models\Operations\MeetingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/meetings', \OpenAPI\OpenAPI\Models\Operations\MeetingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingsGroupList', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get past meeting details
     * 
     * Get details on a past meeting. <br><br>
     * **Scopes:** `meeting:read:admin` `meeting:read`
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * > **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PastMeetingDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PastMeetingDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PastMeetingDetailsResponse
     */
	public function pastMeetingDetails(
        \OpenAPI\OpenAPI\Models\Operations\PastMeetingDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PastMeetingDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PastMeetingDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/past_meetings/{meetingUUID}', \OpenAPI\OpenAPI\Models\Operations\PastMeetingDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PastMeetingDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pastMeetingDetails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PastMeetingDetails200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get past meeting participants
     * 
     * Retrieve information on participants from a past meeting. <br><br>
     * **Scopes:** `meeting:read:admin` `meeting:read`
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * **Prerequisites:**<br>
     * * Paid account on a Pro or higher plan.
     * 
     * <br> <br>  **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsResponse
     */
	public function pastMeetingParticipants(
        \OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/past_meetings/{meetingUUID}/participants', \OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipantsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pastMeetingParticipants200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PastMeetingParticipants200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List ended meeting instances
     * 
     * Get a list of ended meeting instances<br><br>
     * **Scopes:** `meeting:read:admin` `meeting:read`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PastMeetingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PastMeetingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PastMeetingsResponse
     */
	public function pastMeetings(
        \OpenAPI\OpenAPI\Models\Operations\PastMeetingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PastMeetingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PastMeetingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/past_meetings/{meetingId}/instances', \OpenAPI\OpenAPI\Models\Operations\PastMeetingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PastMeetingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->meetingInstances = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PastMeetingsMeetingInstances', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}