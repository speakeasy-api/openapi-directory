/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UserInfo } from "./userinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Classification ID:
 *
 * @remarks
 *
 * * `1` - public
 *
 * * `2` - internal
 *
 * * `3` - confidential
 *
 * * `4` - strictly confidential
 *
 *
 *
 * (default: classification from parent room)
 */
export enum DeletedNodeClassificationEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

/**
 * Node type
 */
export enum DeletedNodeTypeEnum {
  Folder = "folder",
  File = "file",
}

/**
 * Deleted node information (Deleted node can be a folder or file)
 */
export class DeletedNode extends SpeakeasyBase {
  /**
   * Last access date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  accessedAt?: Date;

  /**
   * Classification ID:
   *
   * @remarks
   *
   * * `1` - public
   *
   * * `2` - internal
   *
   * * `3` - confidential
   *
   * * `4` - strictly confidential
   *
   *
   *
   * (default: classification from parent room)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: DeletedNodeClassificationEnum;

  /**
   * Creation date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  @Type(() => UserInfo)
  createdBy?: UserInfo;

  /**
   * Deletion date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deletedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deletedAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deletedBy" })
  @Type(() => UserInfo)
  deletedBy?: UserInfo;

  /**
   * Expiration date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expireAt?: Date;

  /**
   * Node ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Encryption state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isEncrypted" })
  isEncrypted?: boolean;

  /**
   * Node name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * User notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Parent node ID (room or folder)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId: number;

  /**
   * Parent node path
   *
   * @remarks
   *
   * `/` if node is a root node (room)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentPath" })
  parentPath: string;

  /**
   * &#128640; Since v4.37.0
   *
   * @remarks
   *
   * Reference ID. Identical across all versions of a file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "referenceId" })
  referenceId?: number;

  /**
   * Node size in byte
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * Node type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: DeletedNodeTypeEnum;

  /**
   * Modification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  @Type(() => UserInfo)
  updatedBy?: UserInfo;
}
