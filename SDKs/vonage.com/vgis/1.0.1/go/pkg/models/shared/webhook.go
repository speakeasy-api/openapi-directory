// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WebhookEventsEnum string

const (
	WebhookEventsEnumCall WebhookEventsEnum = "CALL"
)

func (e WebhookEventsEnum) ToPointer() *WebhookEventsEnum {
	return &e
}

func (e *WebhookEventsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CALL":
		*e = WebhookEventsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookEventsEnum: %v", v)
	}
}

// WebhookMetadataPolicyEnum - Metadata policy for the webhook
type WebhookMetadataPolicyEnum string

const (
	WebhookMetadataPolicyEnumNone   WebhookMetadataPolicyEnum = "NONE"
	WebhookMetadataPolicyEnumHeader WebhookMetadataPolicyEnum = "HEADER"
	WebhookMetadataPolicyEnumBody   WebhookMetadataPolicyEnum = "BODY"
)

func (e WebhookMetadataPolicyEnum) ToPointer() *WebhookMetadataPolicyEnum {
	return &e
}

func (e *WebhookMetadataPolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "HEADER":
		fallthrough
	case "BODY":
		*e = WebhookMetadataPolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookMetadataPolicyEnum: %v", v)
	}
}

// WebhookSigningAlgoEnum - Signing algorithm for the webhook
type WebhookSigningAlgoEnum string

const (
	WebhookSigningAlgoEnumHmacSha256 WebhookSigningAlgoEnum = "HMAC_SHA256"
	WebhookSigningAlgoEnumNone       WebhookSigningAlgoEnum = "NONE"
)

func (e WebhookSigningAlgoEnum) ToPointer() *WebhookSigningAlgoEnum {
	return &e
}

func (e *WebhookSigningAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HMAC_SHA256":
		fallthrough
	case "NONE":
		*e = WebhookSigningAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookSigningAlgoEnum: %v", v)
	}
}

type WebhookStatistics struct {
	// Current delivery status
	Failed *bool `json:"failed,omitempty"`
	// Total delivery attempts
	TotalAttempts *int64 `json:"totalAttempts,omitempty"`
	// Total failed deliveries
	TotalFailures *int64 `json:"totalFailures,omitempty"`
	// Total successful deliveries
	TotalSuccesses *int64 `json:"totalSuccesses,omitempty"`
}

// WebhookStatusEnum - Status for the webhook
type WebhookStatusEnum string

const (
	WebhookStatusEnumActive WebhookStatusEnum = "ACTIVE"
	WebhookStatusEnumPaused WebhookStatusEnum = "PAUSED"
)

func (e WebhookStatusEnum) ToPointer() *WebhookStatusEnum {
	return &e
}

func (e *WebhookStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "PAUSED":
		*e = WebhookStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookStatusEnum: %v", v)
	}
}

// Webhook - Successful
type Webhook struct {
	// Unique identifier of the account
	AccountID *string `json:"accountId,omitempty"`
	// Created time for the webhook
	CreatedAt *string `json:"createdAt,omitempty"`
	// Subscribed events for the webhook
	Events []WebhookEventsEnum `json:"events,omitempty"`
	// Expiration time for the webhook
	ExpireAt *string `json:"expireAt,omitempty"`
	// Unique identifier for the webhook
	ID *string `json:"id,omitempty"`
	// Metadata policy for the webhook
	MetadataPolicy *WebhookMetadataPolicyEnum `json:"metadataPolicy,omitempty"`
	// Scheduled purge time for the webhook
	PurgeAt *string `json:"purgeAt,omitempty"`
	// Last renewed time for the webhook
	RenewedAt *string `json:"renewedAt,omitempty"`
	// Signing algorithm for the webhook
	SigningAlgo *WebhookSigningAlgoEnum `json:"signingAlgo,omitempty"`
	// Signing key for the webhook
	SigningKey *string            `json:"signingKey,omitempty"`
	Statistics *WebhookStatistics `json:"statistics,omitempty"`
	// Status for the webhook
	Status *WebhookStatusEnum `json:"status,omitempty"`
	// Destination URL for events
	URL *string `json:"url,omitempty"`
	// Unique identifier of the user
	UserID *string `json:"userId,omitempty"`
}
