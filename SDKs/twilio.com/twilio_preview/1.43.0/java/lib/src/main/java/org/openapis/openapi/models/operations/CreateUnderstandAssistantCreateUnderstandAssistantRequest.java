/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CreateUnderstandAssistantCreateUnderstandAssistantRequest {
    /**
     * Space-separated list of callback events that will trigger callbacks.
     */
    @SpeakeasyMetadata("form:name=CallbackEvents")
    public String callbackEvents;

    public CreateUnderstandAssistantCreateUnderstandAssistantRequest withCallbackEvents(String callbackEvents) {
        this.callbackEvents = callbackEvents;
        return this;
    }
    
    /**
     * A user-provided URL to send event callbacks to.
     */
    @SpeakeasyMetadata("form:name=CallbackUrl")
    public String callbackUrl;

    public CreateUnderstandAssistantCreateUnderstandAssistantRequest withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * The JSON actions to be executed when the user's input is not recognized as matching any Task.
     */
    @SpeakeasyMetadata("form:name=FallbackActions")
    public Object fallbackActions;

    public CreateUnderstandAssistantCreateUnderstandAssistantRequest withFallbackActions(Object fallbackActions) {
        this.fallbackActions = fallbackActions;
        return this;
    }
    
    /**
     * A text description for the Assistant. It is non-unique and can up to 255 characters long.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    public String friendlyName;

    public CreateUnderstandAssistantCreateUnderstandAssistantRequest withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * The JSON actions to be executed on inbound phone calls when the Assistant has to say something first.
     */
    @SpeakeasyMetadata("form:name=InitiationActions")
    public Object initiationActions;

    public CreateUnderstandAssistantCreateUnderstandAssistantRequest withInitiationActions(Object initiationActions) {
        this.initiationActions = initiationActions;
        return this;
    }
    
    /**
     * A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
     */
    @SpeakeasyMetadata("form:name=LogQueries")
    public Boolean logQueries;

    public CreateUnderstandAssistantCreateUnderstandAssistantRequest withLogQueries(Boolean logQueries) {
        this.logQueries = logQueries;
        return this;
    }
    
    /**
     * The JSON object that holds the style sheet for the assistant
     */
    @SpeakeasyMetadata("form:name=StyleSheet")
    public Object styleSheet;

    public CreateUnderstandAssistantCreateUnderstandAssistantRequest withStyleSheet(Object styleSheet) {
        this.styleSheet = styleSheet;
        return this;
    }
    
    /**
     * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
     */
    @SpeakeasyMetadata("form:name=UniqueName")
    public String uniqueName;

    public CreateUnderstandAssistantCreateUnderstandAssistantRequest withUniqueName(String uniqueName) {
        this.uniqueName = uniqueName;
        return this;
    }
    
    public CreateUnderstandAssistantCreateUnderstandAssistantRequest(){}
}
