/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContentsResponse - ContentsResponse contains information about a repo's entry's (dir, file, symlink, submodule) metadata and content
 */
public class ContentsResponse {
    /**
     * FileLinksResponse contains the links for a repo's file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public FileLinksResponse links;

    public ContentsResponse withLinks(FileLinksResponse links) {
        this.links = links;
        return this;
    }
    
    /**
     * `content` is populated when `type` is `file`, otherwise null
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public String content;

    public ContentsResponse withContent(String content) {
        this.content = content;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download_url")
    public String downloadUrl;

    public ContentsResponse withDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
        return this;
    }
    
    /**
     * `encoding` is populated when `type` is `file`, otherwise null
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encoding")
    public String encoding;

    public ContentsResponse withEncoding(String encoding) {
        this.encoding = encoding;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_url")
    public String gitUrl;

    public ContentsResponse withGitUrl(String gitUrl) {
        this.gitUrl = gitUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_url")
    public String htmlUrl;

    public ContentsResponse withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_commit_sha")
    public String lastCommitSha;

    public ContentsResponse withLastCommitSha(String lastCommitSha) {
        this.lastCommitSha = lastCommitSha;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ContentsResponse withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public ContentsResponse withPath(String path) {
        this.path = path;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sha")
    public String sha;

    public ContentsResponse withSha(String sha) {
        this.sha = sha;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;

    public ContentsResponse withSize(Long size) {
        this.size = size;
        return this;
    }
    
    /**
     * `submodule_git_url` is populated when `type` is `submodule`, otherwise null
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("submodule_git_url")
    public String submoduleGitUrl;

    public ContentsResponse withSubmoduleGitUrl(String submoduleGitUrl) {
        this.submoduleGitUrl = submoduleGitUrl;
        return this;
    }
    
    /**
     * `target` is populated when `type` is `symlink`, otherwise null
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    public String target;

    public ContentsResponse withTarget(String target) {
        this.target = target;
        return this;
    }
    
    /**
     * `type` will be `file`, `dir`, `symlink`, or `submodule`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public ContentsResponse withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public ContentsResponse withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public ContentsResponse(){}
}
