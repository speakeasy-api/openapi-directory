/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CodeOfConductSimple } from "./codeofconductsimple";
import { NullableLicenseSimple } from "./nullablelicensesimple";
import { NullableRepository } from "./nullablerepository";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { Repository } from "./repository";
import { SecurityAndAnalysis } from "./securityandanalysis";
import { SimpleUser } from "./simpleuser";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The default value for a merge commit message.
 *
 * @remarks
 *
 * - `PR_TITLE` - default to the pull request's title.
 * - `PR_BODY` - default to the pull request's body.
 * - `BLANK` - default to a blank commit message.
 */
export enum FullRepositoryMergeCommitMessageEnum {
  PrBody = "PR_BODY",
  PrTitle = "PR_TITLE",
  Blank = "BLANK",
}

/**
 * The default value for a merge commit title.
 *
 * @remarks
 *
 *   - `PR_TITLE` - default to the pull request's title.
 *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 */
export enum FullRepositoryMergeCommitTitleEnum {
  PrTitle = "PR_TITLE",
  MergeMessage = "MERGE_MESSAGE",
}

export class FullRepositoryPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "admin" })
  admin: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "maintain" })
  maintain?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pull" })
  pull: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "push" })
  push: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "triage" })
  triage?: boolean;
}

/**
 * The default value for a squash merge commit message:
 *
 * @remarks
 *
 * - `PR_BODY` - default to the pull request's body.
 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
 * - `BLANK` - default to a blank commit message.
 */
export enum FullRepositorySquashMergeCommitMessageEnum {
  PrBody = "PR_BODY",
  CommitMessages = "COMMIT_MESSAGES",
  Blank = "BLANK",
}

/**
 * The default value for a squash merge commit title:
 *
 * @remarks
 *
 * - `PR_TITLE` - default to the pull request's title.
 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 */
export enum FullRepositorySquashMergeCommitTitleEnum {
  PrTitle = "PR_TITLE",
  CommitOrPrTitle = "COMMIT_OR_PR_TITLE",
}

/**
 * Full Repository
 */
export class FullRepository extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allow_auto_merge" })
  allowAutoMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_forking" })
  allowForking?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_merge_commit" })
  allowMergeCommit?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_rebase_merge" })
  allowRebaseMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_squash_merge" })
  allowSquashMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_update_branch" })
  allowUpdateBranch?: boolean;

  /**
   * Whether anonymous git access is allowed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "anonymous_access_enabled" })
  anonymousAccessEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "archive_url" })
  archiveUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "assignees_url" })
  assigneesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "blobs_url" })
  blobsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "branches_url" })
  branchesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "clone_url" })
  cloneUrl: string;

  /**
   * Code of Conduct Simple
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code_of_conduct" })
  @Type(() => CodeOfConductSimple)
  codeOfConduct?: CodeOfConductSimple;

  @SpeakeasyMetadata()
  @Expose({ name: "collaborators_url" })
  collaboratorsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commits_url" })
  commitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "compare_url" })
  compareUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contents_url" })
  contentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contributors_url" })
  contributorsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "default_branch" })
  defaultBranch: string;

  @SpeakeasyMetadata()
  @Expose({ name: "delete_branch_on_merge" })
  deleteBranchOnMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "deployments_url" })
  deploymentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Returns whether or not this repository disabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "downloads_url" })
  downloadsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fork" })
  fork: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "forks" })
  forks: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_count" })
  forksCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_url" })
  forksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "full_name" })
  fullName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_commits_url" })
  gitCommitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_refs_url" })
  gitRefsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_tags_url" })
  gitTagsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_url" })
  gitUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "has_downloads" })
  hasDownloads: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_issues" })
  hasIssues: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_pages" })
  hasPages: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_projects" })
  hasProjects: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_wiki" })
  hasWiki: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "homepage" })
  homepage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hooks_url" })
  hooksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "is_template" })
  isTemplate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_comment_url" })
  issueCommentUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_events_url" })
  issueEventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issues_url" })
  issuesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "keys_url" })
  keysUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "labels_url" })
  labelsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language: string;

  @SpeakeasyMetadata()
  @Expose({ name: "languages_url" })
  languagesUrl: string;

  /**
   * License Simple
   */
  @SpeakeasyMetadata()
  @Expose({ name: "license" })
  @Type(() => NullableLicenseSimple)
  license: NullableLicenseSimple;

  @SpeakeasyMetadata()
  @Expose({ name: "master_branch" })
  masterBranch?: string;

  /**
   * The default value for a merge commit message.
   *
   * @remarks
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merge_commit_message" })
  mergeCommitMessage?: FullRepositoryMergeCommitMessageEnum;

  /**
   * The default value for a merge commit title.
   *
   * @remarks
   *
   *   - `PR_TITLE` - default to the pull request's title.
   *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merge_commit_title" })
  mergeCommitTitle?: FullRepositoryMergeCommitTitleEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "merges_url" })
  mergesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "milestones_url" })
  milestonesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mirror_url" })
  mirrorUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "network_count" })
  networkCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "notifications_url" })
  notificationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues" })
  openIssues: number;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues_count" })
  openIssuesCount: number;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  @Type(() => NullableSimpleUser)
  organization?: NullableSimpleUser;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => SimpleUser)
  owner: SimpleUser;

  /**
   * A repository on GitHub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parent" })
  @Type(() => Repository)
  parent?: Repository;

  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => FullRepositoryPermissions)
  permissions?: FullRepositoryPermissions;

  @SpeakeasyMetadata()
  @Expose({ name: "private" })
  private: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pulls_url" })
  pullsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pushed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  pushedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "releases_url" })
  releasesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "security_and_analysis" })
  @Type(() => SecurityAndAnalysis)
  securityAndAnalysis?: SecurityAndAnalysis;

  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;

  /**
   * A repository on GitHub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => Repository)
  source?: Repository;

  /**
   * The default value for a squash merge commit message:
   *
   * @remarks
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "squash_merge_commit_message" })
  squashMergeCommitMessage?: FullRepositorySquashMergeCommitMessageEnum;

  /**
   * The default value for a squash merge commit title:
   *
   * @remarks
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "squash_merge_commit_title" })
  squashMergeCommitTitle?: FullRepositorySquashMergeCommitTitleEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ssh_url" })
  sshUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_count" })
  stargazersCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_url" })
  stargazersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statuses_url" })
  statusesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscribers_count" })
  subscribersCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "subscribers_url" })
  subscribersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscription_url" })
  subscriptionUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "svn_url" })
  svnUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags_url" })
  tagsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "teams_url" })
  teamsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "temp_clone_token" })
  tempCloneToken?: string;

  /**
   * A repository on GitHub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "template_repository" })
  @Type(() => NullableRepository)
  templateRepository?: NullableRepository;

  @SpeakeasyMetadata()
  @Expose({ name: "topics" })
  topics?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "trees_url" })
  treesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  @SpeakeasyMetadata()
  @Expose({ name: "use_squash_pr_title_as_default" })
  useSquashPrTitleAsDefault?: boolean;

  /**
   * The repository visibility: public, private, or internal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers" })
  watchers: number;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers_count" })
  watchersCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "web_commit_signoff_required" })
  webCommitSignoffRequired?: boolean;
}
