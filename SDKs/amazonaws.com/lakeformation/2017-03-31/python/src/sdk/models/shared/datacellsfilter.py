"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import columnwildcard as shared_columnwildcard
from ..shared import rowfilter as shared_rowfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataCellsFilter:
    r"""A structure that describes certain columns on certain rows."""
    
    database_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseName') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    table_catalog_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableCatalogId') }})  
    table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableName') }})  
    column_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ColumnNames'), 'exclude': lambda f: f is None }})  
    column_wildcard: Optional[shared_columnwildcard.ColumnWildcard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ColumnWildcard'), 'exclude': lambda f: f is None }})  
    row_filter: Optional[shared_rowfilter.RowFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RowFilter'), 'exclude': lambda f: f is None }})  
    version_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VersionId'), 'exclude': lambda f: f is None }})  
    