/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AccountCompanyLevel {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a list of company accounts
   *
   * @remarks
   * Returns the list of company accounts that your API credential has access to. The list is grouped into pages as defined by the query parameters.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   *
   * * Management API—Account read
   */
  getCompanies(
    req: operations.GetCompaniesRequest,
    security: operations.GetCompaniesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCompaniesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCompaniesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/companies";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetCompaniesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCompaniesResponse =
        new operations.GetCompaniesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCompanyResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCompanyResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a company account
   *
   * @remarks
   * Returns the company account specified in the path. Your API credential must have access to the company account.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Account read
   */
  getCompaniesCompanyId(
    req: operations.GetCompaniesCompanyIdRequest,
    security: operations.GetCompaniesCompanyIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCompaniesCompanyIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCompaniesCompanyIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/companies/{companyId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetCompaniesCompanyIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCompaniesCompanyIdResponse =
        new operations.GetCompaniesCompanyIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.company = utils.objectToClass(httpRes?.data, shared.Company);
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of merchant accounts
   *
   * @remarks
   * Returns the list of merchant accounts under the company account specified in the path. The list only includes merchant accounts that your API credential has access to. The list is grouped into pages as defined by the query parameters.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Account read
   */
  getCompaniesCompanyIdMerchants(
    req: operations.GetCompaniesCompanyIdMerchantsRequest,
    security: operations.GetCompaniesCompanyIdMerchantsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCompaniesCompanyIdMerchantsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCompaniesCompanyIdMerchantsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/companies/{companyId}/merchants",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetCompaniesCompanyIdMerchantsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCompaniesCompanyIdMerchantsResponse =
        new operations.GetCompaniesCompanyIdMerchantsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMerchantResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMerchantResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
