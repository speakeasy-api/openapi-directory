"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var accesscontrollists_1 = require("./accesscontrollists");
var accesspolicies_1 = require("./accesspolicies");
var acls_1 = require("./acls");
var actionbatches_1 = require("./actionbatches");
var adaptivepolicy_1 = require("./adaptivepolicy");
var addresses_1 = require("./addresses");
var administered_1 = require("./administered");
var admins_1 = require("./admins");
var airmarshal_1 = require("./airmarshal");
var alerts_1 = require("./alerts");
var alerttypes_1 = require("./alerttypes");
var alternatemanagementinterface_1 = require("./alternatemanagementinterface");
var analytics_1 = require("./analytics");
var apirequests_1 = require("./apirequests");
var apnscert_1 = require("./apnscert");
var appliance_1 = require("./appliance");
var appliances_1 = require("./appliances");
var applicationcategories_1 = require("./applicationcategories");
var applications_1 = require("./applications");
var applicationusage_1 = require("./applicationusage");
var arpinspection_1 = require("./arpinspection");
var artifacts_1 = require("./artifacts");
var authenticationtoken_1 = require("./authenticationtoken");
var availabilities_1 = require("./availabilities");
var bandwidthusagehistory_1 = require("./bandwidthusagehistory");
var bgp_1 = require("./bgp");
var billing_1 = require("./billing");
var bluetooth_1 = require("./bluetooth");
var bluetoothclients_1 = require("./bluetoothclients");
var bonjourforwarding_1 = require("./bonjourforwarding");
var brandingpolicies_1 = require("./brandingpolicies");
var byclient_1 = require("./byclient");
var bydevice_1 = require("./bydevice");
var byenergyusage_1 = require("./byenergyusage");
var byinterval_1 = require("./byinterval");
var bymetric_1 = require("./bymetric");
var bypassactivationlockattempts_1 = require("./bypassactivationlockattempts");
var byswitch_1 = require("./byswitch");
var byusage_1 = require("./byusage");
var byutilization_1 = require("./byutilization");
var camera_1 = require("./camera");
var categories_1 = require("./categories");
var cellular_1 = require("./cellular");
var cellularfirewallrules_1 = require("./cellularfirewallrules");
var cellulargateway_1 = require("./cellulargateway");
var cellularusagehistory_1 = require("./cellularusagehistory");
var certs_1 = require("./certs");
var channelutilization_1 = require("./channelutilization");
var channelutilizationhistory_1 = require("./channelutilizationhistory");
var claim_1 = require("./claim");
var clientcounthistory_1 = require("./clientcounthistory");
var clients_1 = require("./clients");
var cloudmonitoring_1 = require("./cloudmonitoring");
var configtemplates_1 = require("./configtemplates");
var configurationchanges_1 = require("./configurationchanges");
var configure_1 = require("./configure");
var connectionstats_1 = require("./connectionstats");
var connectivity_1 = require("./connectivity");
var connectivityevents_1 = require("./connectivityevents");
var connectivitymonitoringdestinations_1 = require("./connectivitymonitoringdestinations");
var contentfiltering_1 = require("./contentfiltering");
var coterm_1 = require("./coterm");
var current_1 = require("./current");
var customanalytics_1 = require("./customanalytics");
var customperformanceclasses_1 = require("./customperformanceclasses");
var dataratehistory_1 = require("./dataratehistory");
var delegated_1 = require("./delegated");
var desktoplogs_1 = require("./desktoplogs");
var devicecommandlogs_1 = require("./devicecommandlogs");
var deviceprofiles_1 = require("./deviceprofiles");
var devices_1 = require("./devices");
var devicetypegrouppolicies_1 = require("./devicetypegrouppolicies");
var dhcp_1 = require("./dhcp");
var dhcpserverpolicy_1 = require("./dhcpserverpolicy");
var dscptaggingoptions_1 = require("./dscptaggingoptions");
var dscptocosmappings_1 = require("./dscptocosmappings");
var eapoverride_1 = require("./eapoverride");
var earlyaccess_1 = require("./earlyaccess");
var ethernet_1 = require("./ethernet");
var events_1 = require("./events");
var eventtypes_1 = require("./eventtypes");
var exportevents_1 = require("./exportevents");
var failedconnections_1 = require("./failedconnections");
var features_1 = require("./features");
var fields_1 = require("./fields");
var firewall_1 = require("./firewall");
var firewalledservices_1 = require("./firewalledservices");
var firmware_1 = require("./firmware");
var firmwareupgrades_1 = require("./firmwareupgrades");
var floorplans_1 = require("./floorplans");
var grouppolicies_1 = require("./grouppolicies");
var groups_1 = require("./groups");
var health_1 = require("./health");
var healthbytime_1 = require("./healthbytime");
var history_1 = require("./history");
var hotspot20_1 = require("./hotspot20");
var httpservers_1 = require("./httpservers");
var identities_1 = require("./identities");
var identitypsks_1 = require("./identitypsks");
var idps_1 = require("./idps");
var imports_1 = require("./imports");
var inboundcellularfirewallrules_1 = require("./inboundcellularfirewallrules");
var inboundfirewallrules_1 = require("./inboundfirewallrules");
var insight_1 = require("./insight");
var interfaces_1 = require("./interfaces");
var intrusion_1 = require("./intrusion");
var inventory_1 = require("./inventory");
var l3firewallrules_1 = require("./l3firewallrules");
var l7firewallrules_1 = require("./l7firewallrules");
var lan_1 = require("./lan");
var latencyhistory_1 = require("./latencyhistory");
var latencystats_1 = require("./latencystats");
var latest_1 = require("./latest");
var licenses_1 = require("./licenses");
var licensing_1 = require("./licensing");
var linkaggregations_1 = require("./linkaggregations");
var linklayer_1 = require("./linklayer");
var live_1 = require("./live");
var livetools_1 = require("./livetools");
var lldpcdp_1 = require("./lldpcdp");
var loginsecurity_1 = require("./loginsecurity");
var logs_1 = require("./logs");
var lossandlatencyhistory_1 = require("./lossandlatencyhistory");
var malware_1 = require("./malware");
var managementinterface_1 = require("./managementinterface");
var manufacturers_1 = require("./manufacturers");
var me_1 = require("./me");
var merakiauthusers_1 = require("./merakiauthusers");
var meshstatuses_1 = require("./meshstatuses");
var models_1 = require("./models");
var shared_1 = require("./models/shared");
var monitor_1 = require("./monitor");
var monitoredmediaservers_1 = require("./monitoredmediaservers");
var mqttbrokers_1 = require("./mqttbrokers");
var mtu_1 = require("./mtu");
var multicast_1 = require("./multicast");
var netflow_1 = require("./netflow");
var networkadapters_1 = require("./networkadapters");
var networkhealth_1 = require("./networkhealth");
var networks_1 = require("./networks");
var objectdetectionmodels_1 = require("./objectdetectionmodels");
var onboarding_1 = require("./onboarding");
var onetomanynatrules_1 = require("./onetomanynatrules");
var onetoonenatrules_1 = require("./onetoonenatrules");
var openapispec_1 = require("./openapispec");
var optins_1 = require("./optins");
var order_1 = require("./order");
var organizations_1 = require("./organizations");
var ospf_1 = require("./ospf");
var overview_1 = require("./overview");
var packets_1 = require("./packets");
var payloadtemplates_1 = require("./payloadtemplates");
var performance_1 = require("./performance");
var performancehistory_1 = require("./performancehistory");
var pii_1 = require("./pii");
var piikeys_1 = require("./piikeys");
var ping_1 = require("./ping");
var pingdevice_1 = require("./pingdevice");
var policies_1 = require("./policies");
var policy_1 = require("./policy");
var policyobjects_1 = require("./policyobjects");
var portforwardingrules_1 = require("./portforwardingrules");
var ports_1 = require("./ports");
var portschedules_1 = require("./portschedules");
var powermodules_1 = require("./powermodules");
var prefixes_1 = require("./prefixes");
var priorities_1 = require("./priorities");
var profiles_1 = require("./profiles");
var qosrules_1 = require("./qosrules");
var qualityandretention_1 = require("./qualityandretention");
var qualityretentionprofiles_1 = require("./qualityretentionprofiles");
var radio_1 = require("./radio");
var readings_1 = require("./readings");
var recent_1 = require("./recent");
var relationships_1 = require("./relationships");
var rendezvouspoints_1 = require("./rendezvouspoints");
var requests_1 = require("./requests");
var responsecodes_1 = require("./responsecodes");
var restrictions_1 = require("./restrictions");
var rfprofiles_1 = require("./rfprofiles");
var rollbacks_1 = require("./rollbacks");
var routing_1 = require("./routing");
var rules_1 = require("./rules");
var saml_1 = require("./saml");
var samlroles_1 = require("./samlroles");
var schedules_1 = require("./schedules");
var search_1 = require("./search");
var security_1 = require("./security");
var securitycenters_1 = require("./securitycenters");
var seen_1 = require("./seen");
var sense_1 = require("./sense");
var sensor_1 = require("./sensor");
var servers_1 = require("./servers");
var settings_1 = require("./settings");
var signalqualityhistory_1 = require("./signalqualityhistory");
var sims_1 = require("./sims");
var singlelan_1 = require("./singlelan");
var sitetositevpn_1 = require("./sitetositevpn");
var sm_1 = require("./sm");
var smdevicesforkey_1 = require("./smdevicesforkey");
var smownersforkey_1 = require("./smownersforkey");
var snmp_1 = require("./snmp");
var softwares_1 = require("./softwares");
var splash_1 = require("./splash");
var splashauthorizationstatus_1 = require("./splashauthorizationstatus");
var splashloginattempts_1 = require("./splashloginattempts");
var ssids_1 = require("./ssids");
var stacks_1 = require("./stacks");
var staged_1 = require("./staged");
var stages_1 = require("./stages");
var staticroutes_1 = require("./staticroutes");
var statics_1 = require("./statics");
var stats_1 = require("./stats");
var status_1 = require("./status");
var statuses_1 = require("./statuses");
var stormcontrol_1 = require("./stormcontrol");
var stp_1 = require("./stp");
var subnetpool_1 = require("./subnetpool");
var subnets_1 = require("./subnets");
var summary_1 = require("./summary");
var switch_1 = require("./switch");
var switches_1 = require("./switches");
var syslogservers_1 = require("./syslogservers");
var targetgroups_1 = require("./targetgroups");
var thirdpartyvpnpeers_1 = require("./thirdpartyvpnpeers");
var top_1 = require("./top");
var topology_1 = require("./topology");
var traffic_1 = require("./traffic");
var trafficanalysis_1 = require("./trafficanalysis");
var traffichistory_1 = require("./traffichistory");
var trafficshaping_1 = require("./trafficshaping");
var trustedaccessconfigs_1 = require("./trustedaccessconfigs");
var trustedservers_1 = require("./trustedservers");
var upgrades_1 = require("./upgrades");
var uplink_1 = require("./uplink");
var uplinkbandwidth_1 = require("./uplinkbandwidth");
var uplinks_1 = require("./uplinks");
var uplinkselection_1 = require("./uplinkselection");
var uplinkslossandlatency_1 = require("./uplinkslossandlatency");
var usagehistories_1 = require("./usagehistories");
var usagehistory_1 = require("./usagehistory");
var useraccessdevices_1 = require("./useraccessdevices");
var users_1 = require("./users");
var v4_1 = require("./v4");
var video_1 = require("./video");
var videolink_1 = require("./videolink");
var vlanassignments_1 = require("./vlanassignments");
var vlans_1 = require("./vlans");
var vmx_1 = require("./vmx");
var vpn_1 = require("./vpn");
var vpnfirewallrules_1 = require("./vpnfirewallrules");
var vppaccounts_1 = require("./vppaccounts");
var warmspare_1 = require("./warmspare");
var warnings_1 = require("./warnings");
var webhooks_1 = require("./webhooks");
var webhooktests_1 = require("./webhooktests");
var wireless_1 = require("./wireless");
var wirelessprofiles_1 = require("./wirelessprofiles");
var wlanlists_1 = require("./wlanlists");
var zones_1 = require("./zones");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.meraki.com/api/v1"];
/**
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.
 *
 * @remarks
 *
 * > Date: 22 February, 2023
 * >
 * > [Recent Updates](https://meraki.io/whats-new/)
 *
 * ---
 *
 * [API Documentation](https://meraki.io/api)
 *
 * [Community Support](https://meraki.io/community)
 *
 * [Meraki Homepage](https://www.meraki.com)
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var sec = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                sec = new shared_1.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, sec);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.accessControlLists = new accesscontrollists_1.AccessControlLists(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.accessPolicies = new accesspolicies_1.AccessPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.acls = new acls_1.Acls(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.actionBatches = new actionbatches_1.ActionBatches(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.adaptivePolicy = new adaptivepolicy_1.AdaptivePolicy(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.addresses = new addresses_1.Addresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.administered = new administered_1.Administered(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.admins = new admins_1.Admins(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.airMarshal = new airmarshal_1.AirMarshal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.alertTypes = new alerttypes_1.AlertTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.alerts = new alerts_1.Alerts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.alternateManagementInterface = new alternatemanagementinterface_1.AlternateManagementInterface(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.analytics = new analytics_1.Analytics(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.apiRequests = new apirequests_1.ApiRequests(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.apnsCert = new apnscert_1.ApnsCert(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.appliance = new appliance_1.Appliance(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.appliances = new appliances_1.Appliances(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.applicationCategories = new applicationcategories_1.ApplicationCategories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.applicationUsage = new applicationusage_1.ApplicationUsage(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.applications = new applications_1.Applications(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.arpInspection = new arpinspection_1.ArpInspection(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.artifacts = new artifacts_1.Artifacts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.authenticationToken = new authenticationtoken_1.AuthenticationToken(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.availabilities = new availabilities_1.Availabilities(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bandwidthUsageHistory = new bandwidthusagehistory_1.BandwidthUsageHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bgp = new bgp_1.Bgp(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.billing = new billing_1.Billing(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bluetooth = new bluetooth_1.Bluetooth(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bluetoothClients = new bluetoothclients_1.BluetoothClients(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bonjourForwarding = new bonjourforwarding_1.BonjourForwarding(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.brandingPolicies = new brandingpolicies_1.BrandingPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.byClient = new byclient_1.ByClient(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.byDevice = new bydevice_1.ByDevice(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.byEnergyUsage = new byenergyusage_1.ByEnergyUsage(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.byInterval = new byinterval_1.ByInterval(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.byMetric = new bymetric_1.ByMetric(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bySwitch = new byswitch_1.BySwitch(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.byUsage = new byusage_1.ByUsage(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.byUtilization = new byutilization_1.ByUtilization(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bypassActivationLockAttempts = new bypassactivationlockattempts_1.BypassActivationLockAttempts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.camera = new camera_1.Camera(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.categories = new categories_1.Categories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.cellular = new cellular_1.Cellular(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.cellularFirewallRules = new cellularfirewallrules_1.CellularFirewallRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.cellularGateway = new cellulargateway_1.CellularGateway(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.cellularUsageHistory = new cellularusagehistory_1.CellularUsageHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.certs = new certs_1.Certs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelUtilization = new channelutilization_1.ChannelUtilization(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelUtilizationHistory = new channelutilizationhistory_1.ChannelUtilizationHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.claim = new claim_1.Claim(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clientCountHistory = new clientcounthistory_1.ClientCountHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clients = new clients_1.Clients(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.cloudMonitoring = new cloudmonitoring_1.CloudMonitoring(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.configTemplates = new configtemplates_1.ConfigTemplates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.configurationChanges = new configurationchanges_1.ConfigurationChanges(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.configure = new configure_1.Configure(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.connectionStats = new connectionstats_1.ConnectionStats(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.connectivity = new connectivity_1.Connectivity(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.connectivityEvents = new connectivityevents_1.ConnectivityEvents(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.connectivityMonitoringDestinations =
            new connectivitymonitoringdestinations_1.ConnectivityMonitoringDestinations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.contentFiltering = new contentfiltering_1.ContentFiltering(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.coterm = new coterm_1.Coterm(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.current = new current_1.Current(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customAnalytics = new customanalytics_1.CustomAnalytics(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customPerformanceClasses = new customperformanceclasses_1.CustomPerformanceClasses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.dataRateHistory = new dataratehistory_1.DataRateHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.delegated = new delegated_1.Delegated(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.desktopLogs = new desktoplogs_1.DesktopLogs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.deviceCommandLogs = new devicecommandlogs_1.DeviceCommandLogs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.deviceProfiles = new deviceprofiles_1.DeviceProfiles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.deviceTypeGroupPolicies = new devicetypegrouppolicies_1.DeviceTypeGroupPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.devices = new devices_1.Devices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.dhcp = new dhcp_1.Dhcp(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.dhcpServerPolicy = new dhcpserverpolicy_1.DhcpServerPolicy(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.dscpTaggingOptions = new dscptaggingoptions_1.DscpTaggingOptions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.dscpToCosMappings = new dscptocosmappings_1.DscpToCosMappings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.eapOverride = new eapoverride_1.EapOverride(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.earlyAccess = new earlyaccess_1.EarlyAccess(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.ethernet = new ethernet_1.Ethernet(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.eventTypes = new eventtypes_1.EventTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.events = new events_1.Events(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.exportEvents = new exportevents_1.ExportEvents(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.failedConnections = new failedconnections_1.FailedConnections(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.features = new features_1.Features(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.fields = new fields_1.Fields(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firewall = new firewall_1.Firewall(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firewalledServices = new firewalledservices_1.FirewalledServices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firmware = new firmware_1.Firmware(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firmwareUpgrades = new firmwareupgrades_1.FirmwareUpgrades(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.floorPlans = new floorplans_1.FloorPlans(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.groupPolicies = new grouppolicies_1.GroupPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.groups = new groups_1.Groups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.health = new health_1.Health(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.healthByTime = new healthbytime_1.HealthByTime(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.history = new history_1.History(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.hotspot20 = new hotspot20_1.Hotspot20(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.httpServers = new httpservers_1.HttpServers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.identities = new identities_1.Identities(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.identityPsks = new identitypsks_1.IdentityPsks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.idps = new idps_1.Idps(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.imports = new imports_1.Imports(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.inboundCellularFirewallRules = new inboundcellularfirewallrules_1.InboundCellularFirewallRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.inboundFirewallRules = new inboundfirewallrules_1.InboundFirewallRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.insight = new insight_1.Insight(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.interfaces = new interfaces_1.Interfaces(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.intrusion = new intrusion_1.Intrusion(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.inventory = new inventory_1.Inventory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.l3FirewallRules = new l3firewallrules_1.L3FirewallRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.l7FirewallRules = new l7firewallrules_1.L7FirewallRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.lan = new lan_1.Lan(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.latencyHistory = new latencyhistory_1.LatencyHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.latencyStats = new latencystats_1.LatencyStats(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.latest = new latest_1.Latest(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licenses = new licenses_1.Licenses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licensing = new licensing_1.Licensing(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.linkAggregations = new linkaggregations_1.LinkAggregations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.linkLayer = new linklayer_1.LinkLayer(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.live = new live_1.Live(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.liveTools = new livetools_1.LiveTools(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.lldpCdp = new lldpcdp_1.LldpCdp(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.loginSecurity = new loginsecurity_1.LoginSecurity(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.logs = new logs_1.Logs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.lossAndLatencyHistory = new lossandlatencyhistory_1.LossAndLatencyHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.malware = new malware_1.Malware(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.managementInterface = new managementinterface_1.ManagementInterface(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.manufacturers = new manufacturers_1.Manufacturers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.me = new me_1.Me(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.merakiAuthUsers = new merakiauthusers_1.MerakiAuthUsers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.meshStatuses = new meshstatuses_1.MeshStatuses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.models = new models_1.Models(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.monitor = new monitor_1.Monitor(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.monitoredMediaServers = new monitoredmediaservers_1.MonitoredMediaServers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mqttBrokers = new mqttbrokers_1.MqttBrokers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mtu = new mtu_1.Mtu(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.multicast = new multicast_1.Multicast(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.netflow = new netflow_1.Netflow(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networkAdapters = new networkadapters_1.NetworkAdapters(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networkHealth = new networkhealth_1.NetworkHealth(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networks = new networks_1.Networks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.objectDetectionModels = new objectdetectionmodels_1.ObjectDetectionModels(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.onboarding = new onboarding_1.Onboarding(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.oneToManyNatRules = new onetomanynatrules_1.OneToManyNatRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.oneToOneNatRules = new onetoonenatrules_1.OneToOneNatRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.openapiSpec = new openapispec_1.OpenapiSpec(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.optIns = new optins_1.OptIns(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.order = new order_1.Order(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organizations = new organizations_1.Organizations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.ospf = new ospf_1.Ospf(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.overview = new overview_1.Overview(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.packets = new packets_1.Packets(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.payloadTemplates = new payloadtemplates_1.PayloadTemplates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.performance = new performance_1.Performance(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.performanceHistory = new performancehistory_1.PerformanceHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.pii = new pii_1.Pii(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.piiKeys = new piikeys_1.PiiKeys(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.ping = new ping_1.Ping(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.pingDevice = new pingdevice_1.PingDevice(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.policies = new policies_1.Policies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.policy = new policy_1.Policy(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.policyObjects = new policyobjects_1.PolicyObjects(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.portForwardingRules = new portforwardingrules_1.PortForwardingRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.portSchedules = new portschedules_1.PortSchedules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.ports = new ports_1.Ports(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.powerModules = new powermodules_1.PowerModules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.prefixes = new prefixes_1.Prefixes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.priorities = new priorities_1.Priorities(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.profiles = new profiles_1.Profiles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.qosRules = new qosrules_1.QosRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.qualityAndRetention = new qualityandretention_1.QualityAndRetention(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.qualityRetentionProfiles = new qualityretentionprofiles_1.QualityRetentionProfiles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.radio = new radio_1.Radio(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.readings = new readings_1.Readings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.recent = new recent_1.Recent(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.relationships = new relationships_1.Relationships(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.rendezvousPoints = new rendezvouspoints_1.RendezvousPoints(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.requests = new requests_1.Requests(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.responseCodes = new responsecodes_1.ResponseCodes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.restrictions = new restrictions_1.Restrictions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.rfProfiles = new rfprofiles_1.RfProfiles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.rollbacks = new rollbacks_1.Rollbacks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.routing = new routing_1.Routing(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.rules = new rules_1.Rules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.saml = new saml_1.Saml(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.samlRoles = new samlroles_1.SamlRoles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.schedules = new schedules_1.Schedules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.search = new search_1.Search(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.security = new security_1.Security(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.securityCenters = new securitycenters_1.SecurityCenters(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.seen = new seen_1.Seen(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sense = new sense_1.Sense(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sensor = new sensor_1.Sensor(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.servers = new servers_1.Servers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.settings = new settings_1.Settings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.signalQualityHistory = new signalqualityhistory_1.SignalQualityHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sims = new sims_1.Sims(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.singleLan = new singlelan_1.SingleLan(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.siteToSiteVpn = new sitetositevpn_1.SiteToSiteVpn(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sm = new sm_1.Sm(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.smDevicesForKey = new smdevicesforkey_1.SmDevicesForKey(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.smOwnersForKey = new smownersforkey_1.SmOwnersForKey(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.snmp = new snmp_1.Snmp(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.softwares = new softwares_1.Softwares(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.splash = new splash_1.Splash(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.splashAuthorizationStatus = new splashauthorizationstatus_1.SplashAuthorizationStatus(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.splashLoginAttempts = new splashloginattempts_1.SplashLoginAttempts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.ssids = new ssids_1.Ssids(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stacks = new stacks_1.Stacks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.staged = new staged_1.Staged(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stages = new stages_1.Stages(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.staticRoutes = new staticroutes_1.StaticRoutes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.statics = new statics_1.Statics(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stats = new stats_1.Stats(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.status = new status_1.Status(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.statuses = new statuses_1.Statuses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stormControl = new stormcontrol_1.StormControl(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stp = new stp_1.Stp(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.subnetPool = new subnetpool_1.SubnetPool(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.subnets = new subnets_1.Subnets(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.summary = new summary_1.Summary(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.switch = new switch_1.Switch(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.switches = new switches_1.Switches(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.syslogServers = new syslogservers_1.SyslogServers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetGroups = new targetgroups_1.TargetGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.thirdPartyVPNPeers = new thirdpartyvpnpeers_1.ThirdPartyVPNPeers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.top = new top_1.Top(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.topology = new topology_1.Topology(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.traffic = new traffic_1.Traffic(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.trafficAnalysis = new trafficanalysis_1.TrafficAnalysis(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.trafficHistory = new traffichistory_1.TrafficHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.trafficShaping = new trafficshaping_1.TrafficShaping(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.trustedAccessConfigs = new trustedaccessconfigs_1.TrustedAccessConfigs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.trustedServers = new trustedservers_1.TrustedServers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.upgrades = new upgrades_1.Upgrades(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.uplink = new uplink_1.Uplink(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.uplinkBandwidth = new uplinkbandwidth_1.UplinkBandwidth(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.uplinkSelection = new uplinkselection_1.UplinkSelection(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.uplinks = new uplinks_1.Uplinks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.uplinksLossAndLatency = new uplinkslossandlatency_1.UplinksLossAndLatency(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.usageHistories = new usagehistories_1.UsageHistories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.usageHistory = new usagehistory_1.UsageHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.userAccessDevices = new useraccessdevices_1.UserAccessDevices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.users = new users_1.Users(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.v4 = new v4_1.V4(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.video = new video_1.Video(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.videoLink = new videolink_1.VideoLink(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vlanAssignments = new vlanassignments_1.VlanAssignments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vlans = new vlans_1.Vlans(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vmx = new vmx_1.Vmx(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vpn = new vpn_1.Vpn(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vpnFirewallRules = new vpnfirewallrules_1.VpnFirewallRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vppAccounts = new vppaccounts_1.VppAccounts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.warmSpare = new warmspare_1.WarmSpare(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.warnings = new warnings_1.Warnings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.webhookTests = new webhooktests_1.WebhookTests(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.webhooks = new webhooks_1.Webhooks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.wireless = new wireless_1.Wireless(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.wirelessProfiles = new wirelessprofiles_1.WirelessProfiles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.wlanLists = new wlanlists_1.WlanLists(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.zones = new zones_1.Zones(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
