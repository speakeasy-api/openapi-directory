// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type UpdateRunGroupPathParams struct {
	// The group's ID.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type UpdateRunGroupHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateRunGroupRequestBody struct {
	// The maximum number of CPUs to use.
	MaxCpus *int64 `json:"maxCpus,omitempty"`
	// A maximum run time for the group in minutes.
	MaxDuration *int64 `json:"maxDuration,omitempty"`
	// The maximum number of concurrent runs for the group.
	MaxRuns *int64 `json:"maxRuns,omitempty"`
	// A name for the group.
	Name *string `json:"name,omitempty"`
}

type UpdateRunGroupRequest struct {
	PathParams UpdateRunGroupPathParams
	Headers    UpdateRunGroupHeaders
	Request    UpdateRunGroupRequestBody `request:"mediaType=application/json"`
}

type UpdateRunGroupResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// RequestTimeoutException
	RequestTimeoutException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
