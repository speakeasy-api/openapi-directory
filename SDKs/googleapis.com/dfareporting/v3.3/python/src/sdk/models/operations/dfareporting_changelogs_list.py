"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import changelogslistresponse as shared_changelogslistresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DfareportingChangeLogsListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class DfareportingChangeLogsListActionEnum(str, Enum):
    r"""Select only change logs with the specified action."""
    ACTION_CREATE = 'ACTION_CREATE'
    ACTION_UPDATE = 'ACTION_UPDATE'
    ACTION_DELETE = 'ACTION_DELETE'
    ACTION_ENABLE = 'ACTION_ENABLE'
    ACTION_DISABLE = 'ACTION_DISABLE'
    ACTION_ADD = 'ACTION_ADD'
    ACTION_REMOVE = 'ACTION_REMOVE'
    ACTION_MARK_AS_DEFAULT = 'ACTION_MARK_AS_DEFAULT'
    ACTION_ASSOCIATE = 'ACTION_ASSOCIATE'
    ACTION_ASSIGN = 'ACTION_ASSIGN'
    ACTION_UNASSIGN = 'ACTION_UNASSIGN'
    ACTION_SEND = 'ACTION_SEND'
    ACTION_LINK = 'ACTION_LINK'
    ACTION_UNLINK = 'ACTION_UNLINK'
    ACTION_PUSH = 'ACTION_PUSH'
    ACTION_EMAIL_TAGS = 'ACTION_EMAIL_TAGS'
    ACTION_SHARE = 'ACTION_SHARE'

class DfareportingChangeLogsListObjectTypeEnum(str, Enum):
    r"""Select only change logs with the specified object type."""
    OBJECT_ADVERTISER = 'OBJECT_ADVERTISER'
    OBJECT_FLOODLIGHT_CONFIGURATION = 'OBJECT_FLOODLIGHT_CONFIGURATION'
    OBJECT_AD = 'OBJECT_AD'
    OBJECT_FLOODLIGHT_ACTVITY = 'OBJECT_FLOODLIGHT_ACTVITY'
    OBJECT_CAMPAIGN = 'OBJECT_CAMPAIGN'
    OBJECT_FLOODLIGHT_ACTIVITY_GROUP = 'OBJECT_FLOODLIGHT_ACTIVITY_GROUP'
    OBJECT_CREATIVE = 'OBJECT_CREATIVE'
    OBJECT_PLACEMENT = 'OBJECT_PLACEMENT'
    OBJECT_DFA_SITE = 'OBJECT_DFA_SITE'
    OBJECT_USER_ROLE = 'OBJECT_USER_ROLE'
    OBJECT_USER_PROFILE = 'OBJECT_USER_PROFILE'
    OBJECT_ADVERTISER_GROUP = 'OBJECT_ADVERTISER_GROUP'
    OBJECT_ACCOUNT = 'OBJECT_ACCOUNT'
    OBJECT_SUBACCOUNT = 'OBJECT_SUBACCOUNT'
    OBJECT_RICHMEDIA_CREATIVE = 'OBJECT_RICHMEDIA_CREATIVE'
    OBJECT_INSTREAM_CREATIVE = 'OBJECT_INSTREAM_CREATIVE'
    OBJECT_MEDIA_ORDER = 'OBJECT_MEDIA_ORDER'
    OBJECT_CONTENT_CATEGORY = 'OBJECT_CONTENT_CATEGORY'
    OBJECT_PLACEMENT_STRATEGY = 'OBJECT_PLACEMENT_STRATEGY'
    OBJECT_SD_SITE = 'OBJECT_SD_SITE'
    OBJECT_SIZE = 'OBJECT_SIZE'
    OBJECT_CREATIVE_GROUP = 'OBJECT_CREATIVE_GROUP'
    OBJECT_CREATIVE_ASSET = 'OBJECT_CREATIVE_ASSET'
    OBJECT_USER_PROFILE_FILTER = 'OBJECT_USER_PROFILE_FILTER'
    OBJECT_LANDING_PAGE = 'OBJECT_LANDING_PAGE'
    OBJECT_CREATIVE_FIELD = 'OBJECT_CREATIVE_FIELD'
    OBJECT_REMARKETING_LIST = 'OBJECT_REMARKETING_LIST'
    OBJECT_PROVIDED_LIST_CLIENT = 'OBJECT_PROVIDED_LIST_CLIENT'
    OBJECT_EVENT_TAG = 'OBJECT_EVENT_TAG'
    OBJECT_CREATIVE_BUNDLE = 'OBJECT_CREATIVE_BUNDLE'
    OBJECT_BILLING_ACCOUNT_GROUP = 'OBJECT_BILLING_ACCOUNT_GROUP'
    OBJECT_BILLING_FEATURE = 'OBJECT_BILLING_FEATURE'
    OBJECT_RATE_CARD = 'OBJECT_RATE_CARD'
    OBJECT_ACCOUNT_BILLING_FEATURE = 'OBJECT_ACCOUNT_BILLING_FEATURE'
    OBJECT_BILLING_MINIMUM_FEE = 'OBJECT_BILLING_MINIMUM_FEE'
    OBJECT_BILLING_PROFILE = 'OBJECT_BILLING_PROFILE'
    OBJECT_PLAYSTORE_LINK = 'OBJECT_PLAYSTORE_LINK'
    OBJECT_TARGETING_TEMPLATE = 'OBJECT_TARGETING_TEMPLATE'
    OBJECT_SEARCH_LIFT_STUDY = 'OBJECT_SEARCH_LIFT_STUDY'
    OBJECT_FLOODLIGHT_DV360_LINK = 'OBJECT_FLOODLIGHT_DV360_LINK'


@dataclasses.dataclass
class DfareportingChangeLogsListRequest:
    
    profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'profileId', 'style': 'simple', 'explode': False }})
    r"""User profile ID associated with this request."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    action: Optional[DfareportingChangeLogsListActionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'action', 'style': 'form', 'explode': True }})
    r"""Select only change logs with the specified action."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': True }})
    r"""Select only change logs with these IDs."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_change_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxChangeTime', 'style': 'form', 'explode': True }})
    r"""Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is \\"2015-07-18T22:54:00-04:00\\". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return."""  
    min_change_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minChangeTime', 'style': 'form', 'explode': True }})
    r"""Select only change logs whose change time is after the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is \\"2015-07-18T22:54:00-04:00\\". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    object_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'objectIds', 'style': 'form', 'explode': True }})
    r"""Select only change logs with these object IDs."""  
    object_type: Optional[DfareportingChangeLogsListObjectTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'objectType', 'style': 'form', 'explode': True }})
    r"""Select only change logs with the specified object type."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""Value of the nextPageToken from the previous result page."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    search_string: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'searchString', 'style': 'form', 'explode': True }})
    r"""Select only change logs whose object ID, user name, old or new values match the search string."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    user_profile_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProfileIds', 'style': 'form', 'explode': True }})
    r"""Select only change logs with these user profile IDs."""  
    

@dataclasses.dataclass
class DfareportingChangeLogsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    change_logs_list_response: Optional[shared_changelogslistresponse.ChangeLogsListResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    