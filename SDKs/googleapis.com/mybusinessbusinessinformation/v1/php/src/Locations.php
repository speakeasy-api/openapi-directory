<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Locations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Associates a location to a place ID. Any previous association is overwritten. This operation is only valid if the location is unverified. The association must be valid, that is, it appears in the list of `SearchGoogleLocations`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAssociateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAssociateResponse
     */
	public function mybusinessbusinessinformationLocationsAssociate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAssociateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAssociateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:associate', \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAssociateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "associateLocationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAssociateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAssociateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Google-updated version of the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedResponse
     */
	public function mybusinessbusinessinformationLocationsAttributesGetGoogleUpdated(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:getGoogleUpdated', \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Attributes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clears an association between a location and its place ID. This operation is only valid if the location is unverified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsClearLocationAssociationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsClearLocationAssociationResponse
     */
	public function mybusinessbusinessinformationLocationsClearLocationAssociation(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsClearLocationAssociationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsClearLocationAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:clearLocationAssociation', \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsClearLocationAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsClearLocationAssociationRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsClearLocationAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a location. If this location cannot be deleted using the API and it is marked so in the `google.mybusiness.businessinformation.v1.LocationState`, use the [Google Business Profile](https://business.google.com/manage/) website.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsDeleteResponse
     */
	public function mybusinessbusinessinformationLocationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up all the attributes set for a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsGetAttributesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsGetAttributesResponse
     */
	public function mybusinessbusinessinformationLocationsGetAttributes(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsGetAttributesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsGetAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsGetAttributesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsGetAttributesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsGetAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Attributes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update attributes for a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsUpdateAttributesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsUpdateAttributesResponse
     */
	public function mybusinessbusinessinformationLocationsUpdateAttributes(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsUpdateAttributesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsUpdateAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsUpdateAttributesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "attributesInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsUpdateAttributesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessbusinessinformationLocationsUpdateAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Attributes', 'json');
            }
        }

        return $response;
    }
}