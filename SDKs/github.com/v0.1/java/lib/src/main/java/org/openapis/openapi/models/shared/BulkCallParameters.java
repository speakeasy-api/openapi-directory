/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import org.openapis.openapi.utils.SpeakeasyMetadata;

/**
 * BulkCallParameters - POST parameters
 */
public class BulkCallParameters {
    /**
     * Fully qualified URL which will provide the RestXML once the call connects
     */
    @SpeakeasyMetadata("form:name=AnswerUrl")
    public String answerUrl;
    public BulkCallParameters withAnswerUrl(String answerUrl) {
        this.answerUrl = answerUrl;
        return this;
    }
    
    /**
     * Caller Name to be set for the call
     */
    @SpeakeasyMetadata("form:name=CallerName")
    public String callerName;
    public BulkCallParameters withCallerName(String callerName) {
        this.callerName = callerName;
        return this;
    }
    
    /**
     * DTMF tone the called party must send to accept the call
     */
    @SpeakeasyMetadata("form:name=ConfirmKey")
    public String confirmKey;
    public BulkCallParameters withConfirmKey(String confirmKey) {
        this.confirmKey = confirmKey;
        return this;
    }
    
    /**
     * Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered
     */
    @SpeakeasyMetadata("form:name=ConfirmSound")
    public String confirmSound;
    public BulkCallParameters withConfirmSound(String confirmSound) {
        this.confirmSound = confirmSound;
        return this;
    }
    
    /**
     * Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
     */
    @SpeakeasyMetadata("form:name=CoreUUID")
    public String coreUUID;
    public BulkCallParameters withCoreUUID(String coreUUID) {
        this.coreUUID = coreUUID;
        return this;
    }
    
    /**
     * Any character, except `/` and `,`, which will be used as a separator within several parameters
     */
    @SpeakeasyMetadata("form:name=Delimiter")
    public String delimiter;
    public BulkCallParameters withDelimiter(String delimiter) {
        this.delimiter = delimiter;
        return this;
    }
    
    /**
     * Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
     */
    @SpeakeasyMetadata("form:name=ExtraDialString")
    public String extraDialString;
    public BulkCallParameters withExtraDialString(String extraDialString) {
        this.extraDialString = extraDialString;
        return this;
    }
    
    /**
     * Phone number to be used as Caller ID
     */
    @SpeakeasyMetadata("form:name=From")
    public String from;
    public BulkCallParameters withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
     */
    @SpeakeasyMetadata("form:name=GatewayCodecs")
    public String gatewayCodecs;
    public BulkCallParameters withGatewayCodecs(String gatewayCodecs) {
        this.gatewayCodecs = gatewayCodecs;
        return this;
    }
    
    /**
     * List of maximum retry counts for each gateway
     */
    @SpeakeasyMetadata("form:name=GatewayRetries")
    public String gatewayRetries;
    public BulkCallParameters withGatewayRetries(String gatewayRetries) {
        this.gatewayRetries = gatewayRetries;
        return this;
    }
    
    /**
     * List of maximum timeout amounts (in seconds) for each gateway
     */
    @SpeakeasyMetadata("form:name=GatewayTimeouts")
    public String gatewayTimeouts;
    public BulkCallParameters withGatewayTimeouts(String gatewayTimeouts) {
        this.gatewayTimeouts = gatewayTimeouts;
        return this;
    }
    
    /**
     * Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
     */
    @SpeakeasyMetadata("form:name=Gateways")
    public String gateways;
    public BulkCallParameters withGateways(String gateways) {
        this.gateways = gateways;
        return this;
    }
    
    /**
     * Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
     */
    @SpeakeasyMetadata("form:name=HangupOnRing")
    public Long hangupOnRing;
    public BulkCallParameters withHangupOnRing(Long hangupOnRing) {
        this.hangupOnRing = hangupOnRing;
        return this;
    }
    
    /**
     * Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
     */
    @SpeakeasyMetadata("form:name=HangupUrl")
    public String hangupUrl;
    public BulkCallParameters withHangupUrl(String hangupUrl) {
        this.hangupUrl = hangupUrl;
        return this;
    }
    
    /**
     * Comma separated reject causes
     */
    @SpeakeasyMetadata("form:name=RejectCauses")
    public String rejectCauses;
    public BulkCallParameters withRejectCauses(String rejectCauses) {
        this.rejectCauses = rejectCauses;
        return this;
    }
    
    /**
     * Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
     */
    @SpeakeasyMetadata("form:name=RingUrl")
    public String ringUrl;
    public BulkCallParameters withRingUrl(String ringUrl) {
        this.ringUrl = ringUrl;
        return this;
    }
    
    /**
     * DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
     */
    @SpeakeasyMetadata("form:name=SendDigits")
    public String sendDigits;
    public BulkCallParameters withSendDigits(String sendDigits) {
        this.sendDigits = sendDigits;
        return this;
    }
    
    /**
     * When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
     */
    @SpeakeasyMetadata("form:name=SendOnPreanswer")
    public Boolean sendOnPreanswer;
    public BulkCallParameters withSendOnPreanswer(Boolean sendOnPreanswer) {
        this.sendOnPreanswer = sendOnPreanswer;
        return this;
    }
    
    /**
     * Schedules the call's hangup at a given time offset (in seconds) after the call is answered
     */
    @SpeakeasyMetadata("form:name=TimeLimit")
    public Long timeLimit;
    public BulkCallParameters withTimeLimit(Long timeLimit) {
        this.timeLimit = timeLimit;
        return this;
    }
    
    /**
     * Phone number to be called
     */
    @SpeakeasyMetadata("form:name=To")
    public String to;
    public BulkCallParameters withTo(String to) {
        this.to = to;
        return this;
    }
    
}
