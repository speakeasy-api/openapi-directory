/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Floating IP type
 */
export enum PostFloatingIpsCreateFloatingIPRequestTypeEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

/**
 * The `type` argument is required while `home_location` and `server` are mutually exclusive.
 */
export class PostFloatingIpsCreateFloatingIPRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Home Location (routing is optimized for that Location). Only optional if Server argument is passed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "home_location" })
  homeLocation?: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Server to assign the Floating IP to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server?: number;

  /**
   * Floating IP type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostFloatingIpsCreateFloatingIPRequestTypeEnum;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostFloatingIps201ApplicationJSONActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostFloatingIps201ApplicationJSONActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostFloatingIps201ApplicationJSONActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostFloatingIps201ApplicationJSONAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostFloatingIps201ApplicationJSONActionError)
  error: PostFloatingIps201ApplicationJSONActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: PostFloatingIps201ApplicationJSONActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => PostFloatingIps201ApplicationJSONActionResources)
  resources: PostFloatingIps201ApplicationJSONActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostFloatingIps201ApplicationJSONActionStatusEnum;
}

export class PostFloatingIps201ApplicationJSONFloatingIpDnsPtr extends SpeakeasyBase {
  /**
   * DNS pointer for the specific IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * Single IPv4 or IPv6 address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * Location the Floating IP was created in. Routing is optimized for this Location.
 */
export class PostFloatingIps201ApplicationJSONFloatingIpHomeLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * Protection configuration for the Resource
 */
export class PostFloatingIps201ApplicationJSONFloatingIpProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Type of the Floating IP
 */
export enum PostFloatingIps201ApplicationJSONFloatingIpTypeEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

export class PostFloatingIps201ApplicationJSONFloatingIp extends SpeakeasyBase {
  /**
   * Whether the IP is blocked
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Description of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Array of reverse DNS entries
   */
  @SpeakeasyMetadata({
    elemType: PostFloatingIps201ApplicationJSONFloatingIpDnsPtr,
  })
  @Expose({ name: "dns_ptr" })
  @Type(() => PostFloatingIps201ApplicationJSONFloatingIpDnsPtr)
  dnsPtr: PostFloatingIps201ApplicationJSONFloatingIpDnsPtr[];

  /**
   * Location the Floating IP was created in. Routing is optimized for this Location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "home_location" })
  @Type(() => PostFloatingIps201ApplicationJSONFloatingIpHomeLocation)
  homeLocation: PostFloatingIps201ApplicationJSONFloatingIpHomeLocation;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => PostFloatingIps201ApplicationJSONFloatingIpProtection)
  protection: PostFloatingIps201ApplicationJSONFloatingIpProtection;

  /**
   * ID of the Server the Floating IP is assigned to, null if it is not assigned at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server: number;

  /**
   * Type of the Floating IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostFloatingIps201ApplicationJSONFloatingIpTypeEnum;
}

/**
 * The `floating_ip` key in the reply contains the object that was just created
 */
export class PostFloatingIps201ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PostFloatingIps201ApplicationJSONAction)
  action?: PostFloatingIps201ApplicationJSONAction;

  @SpeakeasyMetadata()
  @Expose({ name: "floating_ip" })
  @Type(() => PostFloatingIps201ApplicationJSONFloatingIp)
  floatingIp: PostFloatingIps201ApplicationJSONFloatingIp;
}

export class PostFloatingIpsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `floating_ip` key in the reply contains the object that was just created
   */
  @SpeakeasyMetadata()
  postFloatingIps201ApplicationJSONObject?: PostFloatingIps201ApplicationJSON;
}
