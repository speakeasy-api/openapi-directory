// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type RepositoryConfigurationsCreateOrUpdateSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type RepositoryConfigurationsCreateOrUpdatePathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// RepositoryConfigurationsCreateOrUpdateRequestBody - The repository information
type RepositoryConfigurationsCreateOrUpdateRequestBody struct {
	// The external user id from the repository provider. Required for GitLab.com repositories
	ExternalUserID *string `json:"external_user_id,omitempty"`
	// The GitHub App Installation id. Required for repositories connected from GitHub App
	InstallationID *string `json:"installation_id,omitempty"`
	// The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com
	RepoID *string `json:"repo_id,omitempty"`
	// The repository's git url, must be a HTTPS URL
	RepoURL string `json:"repo_url"`
	// The id of the service connection (private). Required for GitLab self-hosted repositories
	ServiceConnectionID *string `json:"service_connection_id,omitempty"`
}

type RepositoryConfigurationsCreateOrUpdateRequest struct {
	PathParams RepositoryConfigurationsCreateOrUpdatePathParams
	// The repository information
	Request  RepositoryConfigurationsCreateOrUpdateRequestBody `request:"mediaType=application/json"`
	Security RepositoryConfigurationsCreateOrUpdateSecurity
}

// RepositoryConfigurationsCreateOrUpdateDefaultApplicationJSON - Bad Request
type RepositoryConfigurationsCreateOrUpdateDefaultApplicationJSON struct {
	Code    string `json:"code"`
	ID      string `json:"id"`
	Message string `json:"message"`
}

// RepositoryConfigurationsCreateOrUpdate200ApplicationJSON - Success
type RepositoryConfigurationsCreateOrUpdate200ApplicationJSON struct {
	Message string `json:"message"`
}

type RepositoryConfigurationsCreateOrUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	RepositoryConfigurationsCreateOrUpdate200ApplicationJSONObject *RepositoryConfigurationsCreateOrUpdate200ApplicationJSON
	// Bad Request
	RepositoryConfigurationsCreateOrUpdateDefaultApplicationJSONObject *RepositoryConfigurationsCreateOrUpdateDefaultApplicationJSON
}
