/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RecordError } from "./recorderror";
import { RecordStatusEnum } from "./recordstatusenum";
import { RecordTag } from "./recordtag";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about a request operation.
 */
export class RecordDetail extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LaunchRoleArn" })
  launchRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PathId" })
  pathId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ProductId" })
  productId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ProvisionedProductId" })
  provisionedProductId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ProvisionedProductName" })
  provisionedProductName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ProvisionedProductType" })
  provisionedProductType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ProvisioningArtifactId" })
  provisioningArtifactId?: string;

  @SpeakeasyMetadata({ elemType: RecordError })
  @Expose({ name: "RecordErrors" })
  @Type(() => RecordError)
  recordErrors?: RecordError[];

  @SpeakeasyMetadata()
  @Expose({ name: "RecordId" })
  recordId?: string;

  @SpeakeasyMetadata({ elemType: RecordTag })
  @Expose({ name: "RecordTags" })
  @Type(() => RecordTag)
  recordTags?: RecordTag[];

  @SpeakeasyMetadata()
  @Expose({ name: "RecordType" })
  recordType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: RecordStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedTime?: Date;
}
