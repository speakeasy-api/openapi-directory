// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// FetchCalendarEventsFilterTypeEnum - Calendar event type
type FetchCalendarEventsFilterTypeEnum string

const (
	FetchCalendarEventsFilterTypeEnumPlanCheckIn   FetchCalendarEventsFilterTypeEnum = "plan-check-in"
	FetchCalendarEventsFilterTypeEnumReminder      FetchCalendarEventsFilterTypeEnum = "reminder"
	FetchCalendarEventsFilterTypeEnumTelephoneCall FetchCalendarEventsFilterTypeEnum = "telephone-call"
	FetchCalendarEventsFilterTypeEnumOfficeVisit   FetchCalendarEventsFilterTypeEnum = "office-visit"
	FetchCalendarEventsFilterTypeEnumVideoCall     FetchCalendarEventsFilterTypeEnum = "video-call"
)

func (e FetchCalendarEventsFilterTypeEnum) ToPointer() *FetchCalendarEventsFilterTypeEnum {
	return &e
}

func (e *FetchCalendarEventsFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "plan-check-in":
		fallthrough
	case "reminder":
		fallthrough
	case "telephone-call":
		fallthrough
	case "office-visit":
		fallthrough
	case "video-call":
		*e = FetchCalendarEventsFilterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FetchCalendarEventsFilterTypeEnum: %v", v)
	}
}

// FetchCalendarEventsIncludeEnum - List of related resources to include in the response
type FetchCalendarEventsIncludeEnum string

const (
	FetchCalendarEventsIncludeEnumOwner FetchCalendarEventsIncludeEnum = "owner"
)

func (e FetchCalendarEventsIncludeEnum) ToPointer() *FetchCalendarEventsIncludeEnum {
	return &e
}

func (e *FetchCalendarEventsIncludeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "owner":
		*e = FetchCalendarEventsIncludeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FetchCalendarEventsIncludeEnum: %v", v)
	}
}

type FetchCalendarEventsRequest struct {
	// Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
	//
	FilterAttendees *string `queryParam:"style=form,explode=true,name=filter[attendees]"`
	// If not specified, return all calendar events. If set to `true` return only events marked as completed, if set to `false`, return only events not marked as completed yet.
	FilterCompleted *bool `queryParam:"style=form,explode=true,name=filter[completed]"`
	// The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events completed in November 2017 (America/New_York): `filter[completed_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
	//
	FilterCompletedAt *string `queryParam:"style=form,explode=true,name=filter[completed_at]"`
	// The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events created in November 2017 (America/New_York): `filter[created_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
	//
	FilterCreatedAt *string `queryParam:"style=form,explode=true,name=filter[created_at]"`
	// The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events ending in November 2017 (America/New_York): `filter[end_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
	//
	FilterEndAt *string `queryParam:"style=form,explode=true,name=filter[end_at]"`
	// Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
	//
	FilterGroups *string `queryParam:"style=form,explode=true,name=filter[groups]"`
	// Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
	//
	FilterOrganization *string `queryParam:"style=form,explode=true,name=filter[organization]"`
	// Patient id to fetch calendar event. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
	//
	FilterPatient *string `queryParam:"style=form,explode=true,name=filter[patient]"`
	// The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events starting in November 2017 (America/New_York): `filter[start_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
	//
	FilterStartAt *string `queryParam:"style=form,explode=true,name=filter[start_at]"`
	// Calendar event type
	FilterType *FetchCalendarEventsFilterTypeEnum `queryParam:"style=form,explode=true,name=filter[type]"`
	// The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events updated in November 2017 (America/New_York): `filter[updated_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
	//
	FilterUpdatedAt *string `queryParam:"style=form,explode=true,name=filter[updated_at]"`
	// List of related resources to include in the response
	Include *FetchCalendarEventsIncludeEnum `queryParam:"style=form,explode=true,name=include"`
	// Page cursor
	PageCursor *string `queryParam:"style=form,explode=true,name=page[cursor]"`
	// Page limit
	PageLimit *int64 `queryParam:"style=form,explode=true,name=page[limit]"`
	// Page number
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Page size
	PageSize *int64 `queryParam:"style=form,explode=true,name=page[size]"`
}

type FetchCalendarEventsResponse struct {
	ContentType string
	// OK
	FetchCalendarEventsResponse *shared.FetchCalendarEventsResponse
	// Unauthorized
	FetchErrorResponse *shared.FetchErrorResponse
	StatusCode         int
	RawResponse        *http.Response
}
