"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import integration as shared_integration
from ..shared import simple_user as shared_simple_user
from ..shared import team as shared_team
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProtectedBranchPullRequestReviewBypassPullRequestAllowances:
    r"""Allow specific users, teams, or apps to bypass pull request requirements."""
    
    apps: Optional[list[shared_integration.Integration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apps'), 'exclude': lambda f: f is None }})
    r"""The list of apps allowed to bypass pull request requirements."""  
    teams: Optional[list[shared_team.Team]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams'), 'exclude': lambda f: f is None }})
    r"""The list of teams allowed to bypass pull request requirements."""  
    users: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""The list of users allowed to bypass pull request requirements."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProtectedBranchPullRequestReviewDismissalRestrictions:
    
    apps: Optional[list[shared_integration.Integration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apps'), 'exclude': lambda f: f is None }})
    r"""The list of apps with review dismissal access."""  
    teams: Optional[list[shared_team.Team]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams'), 'exclude': lambda f: f is None }})
    r"""The list of teams with review dismissal access."""  
    teams_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams_url'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    users: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""The list of users with review dismissal access."""  
    users_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users_url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProtectedBranchPullRequestReview:
    r"""Protected Branch Pull Request Review"""
    
    dismiss_stale_reviews: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismiss_stale_reviews') }})  
    require_code_owner_reviews: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_code_owner_reviews') }})  
    bypass_pull_request_allowances: Optional[ProtectedBranchPullRequestReviewBypassPullRequestAllowances] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bypass_pull_request_allowances'), 'exclude': lambda f: f is None }})
    r"""Allow specific users, teams, or apps to bypass pull request requirements."""  
    dismissal_restrictions: Optional[ProtectedBranchPullRequestReviewDismissalRestrictions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissal_restrictions'), 'exclude': lambda f: f is None }})  
    required_approving_review_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required_approving_review_count'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    