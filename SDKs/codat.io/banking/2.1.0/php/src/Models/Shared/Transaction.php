<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Transaction - The Banking Transactions data type provides an immutable source of up-to-date information on income and expenditure.
 * 
 * 
 * Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
 * 
 * View the coverage for banking transactions in the [Data Coverage Explorer](https://knowledge.codat.io/supported-features/banking?view=tab-by-data-type&dataType=banking-transactions).
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Transaction
{
    /**
     * The unique identifier of the bank account.
     * 
     * @var string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountId;
    
    /**
     * The amount of the bank transaction.
     * 
     * @var ?float $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $amount = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $authorizedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authorizedDate = null;
    
    /**
     * Code to identify the underlying transaction.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionCodeEnum $code
     */
	#[\JMS\Serializer\Annotation\SerializedName('code')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TransactionCodeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionCodeEnum $code = null;
    
    /**
     * The currency of the bank transaction.
     * 
     * @var string $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $currency;
    
    /**
     * The description of the bank transaction.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The unique identifier of the bank transaction.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * The name of the merchant.
     * 
     * @var ?string $merchantName
     */
	#[\JMS\Serializer\Annotation\SerializedName('merchantName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $merchantName = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $modifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('modifiedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $modifiedDate = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $postedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('postedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $postedDate = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $sourceModifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('sourceModifiedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceModifiedDate = null;
    
    /**
     * An object of bank transaction category reference data.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionCategoryRef $transactionCategoryRef
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionCategoryRef')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionCategoryRef')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionCategoryRef $transactionCategoryRef = null;
    
	public function __construct()
	{
		$this->accountId = "";
		$this->amount = null;
		$this->authorizedDate = null;
		$this->code = null;
		$this->currency = "";
		$this->description = null;
		$this->id = "";
		$this->merchantName = null;
		$this->modifiedDate = null;
		$this->postedDate = null;
		$this->sourceModifiedDate = null;
		$this->transactionCategoryRef = null;
	}
}
