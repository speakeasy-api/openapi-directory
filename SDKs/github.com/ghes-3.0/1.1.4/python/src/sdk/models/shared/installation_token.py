"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import app_permissions as shared_app_permissions
from ..shared import repository as shared_repository
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InstallationTokenRepositorySelectionEnum(str, Enum):
    ALL = 'all'
    SELECTED = 'selected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstallationToken:
    r"""Authentication token for a GitHub App installed on a user or org."""
    
    expires_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_at') }})  
    token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token') }})  
    has_multiple_single_files: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_multiple_single_files'), 'exclude': lambda f: f is None }})  
    permissions: Optional[shared_app_permissions.AppPermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""The permissions granted to the user-to-server access token."""  
    repositories: Optional[list[shared_repository.Repository]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories'), 'exclude': lambda f: f is None }})  
    repository_selection: Optional[InstallationTokenRepositorySelectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_selection'), 'exclude': lambda f: f is None }})  
    single_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_file'), 'exclude': lambda f: f is None }})  
    single_file_paths: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_file_paths'), 'exclude': lambda f: f is None }})  
    