/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * API-specific settings
 */
export class UpdateOrganizationRequestBodyApi extends SpeakeasyBase {
  /**
   * If true, enable the access to the Cisco Meraki Dashboard API
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

export class UpdateOrganizationRequestBodyManagementDetails extends SpeakeasyBase {
  /**
   * Name of management data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Value of management data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Information about the organization's management system
 */
export class UpdateOrganizationRequestBodyManagement extends SpeakeasyBase {
  /**
   * Details related to organization management, possibly empty
   */
  @SpeakeasyMetadata({
    elemType: UpdateOrganizationRequestBodyManagementDetails,
  })
  @Expose({ name: "details" })
  @Type(() => UpdateOrganizationRequestBodyManagementDetails)
  details?: UpdateOrganizationRequestBodyManagementDetails[];
}

export class UpdateOrganizationRequestBody extends SpeakeasyBase {
  /**
   * API-specific settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "api" })
  @Type(() => UpdateOrganizationRequestBodyApi)
  api?: UpdateOrganizationRequestBodyApi;

  /**
   * Information about the organization's management system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "management" })
  @Type(() => UpdateOrganizationRequestBodyManagement)
  management?: UpdateOrganizationRequestBodyManagement;

  /**
   * The name of the organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class UpdateOrganizationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateOrganizationRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;
}

/**
 * API related settings
 */
export class UpdateOrganization200ApplicationJSONApi extends SpeakeasyBase {
  /**
   * Enable API access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * Region info
 */
export class UpdateOrganization200ApplicationJSONCloudRegion extends SpeakeasyBase {
  /**
   * Name of region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Data for this organization
 */
export class UpdateOrganization200ApplicationJSONCloud extends SpeakeasyBase {
  /**
   * Region info
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  @Type(() => UpdateOrganization200ApplicationJSONCloudRegion)
  region?: UpdateOrganization200ApplicationJSONCloudRegion;
}

/**
 * Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
 */
export enum UpdateOrganization200ApplicationJSONLicensingModelEnum {
  CoTerm = "co-term",
  PerDevice = "per-device",
  Subscription = "subscription",
}

/**
 * Licensing related settings
 */
export class UpdateOrganization200ApplicationJSONLicensing extends SpeakeasyBase {
  /**
   * Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  model?: UpdateOrganization200ApplicationJSONLicensingModelEnum;
}

export class UpdateOrganization200ApplicationJSONManagementDetails extends SpeakeasyBase {
  /**
   * Name of management data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Value of management data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Information about the organization's management system
 */
export class UpdateOrganization200ApplicationJSONManagement extends SpeakeasyBase {
  /**
   * Details related to organization management, possibly empty
   */
  @SpeakeasyMetadata({
    elemType: UpdateOrganization200ApplicationJSONManagementDetails,
  })
  @Expose({ name: "details" })
  @Type(() => UpdateOrganization200ApplicationJSONManagementDetails)
  details?: UpdateOrganization200ApplicationJSONManagementDetails[];
}

/**
 * Successful operation
 */
export class UpdateOrganization200ApplicationJSON extends SpeakeasyBase {
  /**
   * API related settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "api" })
  @Type(() => UpdateOrganization200ApplicationJSONApi)
  api?: UpdateOrganization200ApplicationJSONApi;

  /**
   * Data for this organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloud" })
  @Type(() => UpdateOrganization200ApplicationJSONCloud)
  cloud?: UpdateOrganization200ApplicationJSONCloud;

  /**
   * Organization ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Licensing related settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licensing" })
  @Type(() => UpdateOrganization200ApplicationJSONLicensing)
  licensing?: UpdateOrganization200ApplicationJSONLicensing;

  /**
   * Information about the organization's management system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "management" })
  @Type(() => UpdateOrganization200ApplicationJSONManagement)
  management?: UpdateOrganization200ApplicationJSONManagement;

  /**
   * Organization name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Organization URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class UpdateOrganizationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateOrganization200ApplicationJSONObject?: UpdateOrganization200ApplicationJSON;
}
