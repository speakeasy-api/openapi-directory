/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Indicates whether the Dedicated Host supports multiple instance types of the same instance family. If the value is <code>on</code>, the Dedicated Host supports multiple instance types in the instance family. If the value is <code>off</code>, the Dedicated Host supports a single instance type only.
 */
export enum DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum {
  On = "on",
  Off = "off",
}

/**
 * Whether auto-placement is on or off.
 */
export enum DescribeHostsResultHostsAutoPlacementEnum {
  On = "on",
  Off = "off",
}

/**
 * Information about the number of instances that can be launched onto the Dedicated Host.
 */
export class DescribeHostsResultHostsAvailableCapacityAvailableInstanceCapacity extends SpeakeasyBase {
  @SpeakeasyMetadata()
  availableCapacity?: number;

  @SpeakeasyMetadata()
  instanceType?: string;

  @SpeakeasyMetadata()
  totalCapacity?: number;
}

/**
 * Information about the instances running on the Dedicated Host.
 */
export class DescribeHostsResultHostsAvailableCapacity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      DescribeHostsResultHostsAvailableCapacityAvailableInstanceCapacity,
  })
  availableInstanceCapacity?: DescribeHostsResultHostsAvailableCapacityAvailableInstanceCapacity[];

  @SpeakeasyMetadata()
  availableVCpus?: number;
}

/**
 * Indicates whether host maintenance is enabled or disabled for the Dedicated Host.
 */
export enum DescribeHostsResultHostsHostMaintenanceEnum {
  On = "on",
  Off = "off",
}

/**
 * The hardware specifications of the Dedicated Host.
 */
export class DescribeHostsResultHostsHostProperties extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cores?: number;

  @SpeakeasyMetadata()
  instanceFamily?: string;

  @SpeakeasyMetadata()
  instanceType?: string;

  @SpeakeasyMetadata()
  sockets?: number;

  @SpeakeasyMetadata()
  totalVCpus?: number;
}

/**
 * Indicates whether host recovery is enabled or disabled for the Dedicated Host.
 */
export enum DescribeHostsResultHostsHostRecoveryEnum {
  On = "on",
  Off = "off",
}

/**
 * Describes an instance running on a Dedicated Host.
 */
export class DescribeHostsResultHostsInstances extends SpeakeasyBase {
  @SpeakeasyMetadata()
  instanceId?: string;

  @SpeakeasyMetadata()
  instanceType?: string;

  @SpeakeasyMetadata()
  ownerId?: string;
}

/**
 * The Dedicated Host's state.
 */
export enum DescribeHostsResultHostsStateEnum {
  Available = "available",
  UnderAssessment = "under-assessment",
  PermanentFailure = "permanent-failure",
  Released = "released",
  ReleasedPermanentFailure = "released-permanent-failure",
  Pending = "pending",
}

/**
 * Describes a tag.
 */
export class DescribeHostsResultHostsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes the properties of the Dedicated Host.
 */
export class DescribeHostsResultHosts extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allocationTime?: Date;

  @SpeakeasyMetadata()
  allowsMultipleInstanceTypes?: DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum;

  @SpeakeasyMetadata()
  autoPlacement?: DescribeHostsResultHostsAutoPlacementEnum;

  @SpeakeasyMetadata()
  availabilityZone?: string;

  @SpeakeasyMetadata()
  availabilityZoneId?: string;

  @SpeakeasyMetadata()
  availableCapacity?: DescribeHostsResultHostsAvailableCapacity;

  @SpeakeasyMetadata()
  clientToken?: string;

  @SpeakeasyMetadata()
  hostId?: string;

  @SpeakeasyMetadata()
  hostMaintenance?: DescribeHostsResultHostsHostMaintenanceEnum;

  @SpeakeasyMetadata()
  hostProperties?: DescribeHostsResultHostsHostProperties;

  @SpeakeasyMetadata()
  hostRecovery?: DescribeHostsResultHostsHostRecoveryEnum;

  @SpeakeasyMetadata()
  hostReservationId?: string;

  @SpeakeasyMetadata({ elemType: DescribeHostsResultHostsInstances })
  instances?: DescribeHostsResultHostsInstances[];

  @SpeakeasyMetadata()
  memberOfServiceLinkedResourceGroup?: boolean;

  @SpeakeasyMetadata()
  outpostArn?: string;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  releaseTime?: Date;

  @SpeakeasyMetadata()
  state?: DescribeHostsResultHostsStateEnum;

  @SpeakeasyMetadata({ elemType: DescribeHostsResultHostsTags })
  tags?: DescribeHostsResultHostsTags[];
}

/**
 * Success
 */
export class DescribeHostsResult extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: DescribeHostsResultHosts })
  hosts?: DescribeHostsResultHosts[];

  @SpeakeasyMetadata()
  nextToken?: string;
}
