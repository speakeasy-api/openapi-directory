<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new Evaluation in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateResponse
     */
	public function workloadmanagerProjectsLocationsEvaluationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/evaluations', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "evaluationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Executions in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListResponse
     */
	public function workloadmanagerProjectsLocationsEvaluationsExecutionsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/executions', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExecutionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListExecutionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the running result of a single Execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListResponse
     */
	public function workloadmanagerProjectsLocationsEvaluationsExecutionsResultsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/results', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsResultsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExecutionResultsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListExecutionResultsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Execution in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunResponse
     */
	public function workloadmanagerProjectsLocationsEvaluationsExecutionsRun(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/executions:run', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runEvaluationRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all scanned resources for a single Execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListResponse
     */
	public function workloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesList(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/scannedResources', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsExecutionsScannedResourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listScannedResourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListScannedResourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Evaluations in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListResponse
     */
	public function workloadmanagerProjectsLocationsEvaluationsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/evaluations', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsEvaluationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEvaluationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEvaluationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Write the data insights to workload manager data warehouse.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightResponse
     */
	public function workloadmanagerProjectsLocationsInsightsWriteInsight(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{location}/insights:writeInsight', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writeInsightRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsInsightsWriteInsightResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->writeInsightResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListResponse
     */
	public function workloadmanagerProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelResponse
     */
	public function workloadmanagerProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteResponse
     */
	public function workloadmanagerProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetResponse
     */
	public function workloadmanagerProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListResponse
     */
	public function workloadmanagerProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists rules in a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListResponse
     */
	public function workloadmanagerProjectsLocationsRulesList(
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/rules', \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkloadmanagerProjectsLocationsRulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRulesResponse', 'json');
            }
        }

        return $response;
    }
}