/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleChromeManagementV1GraphicsInfo - Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_GRAPHICS_INFO
 */
public class GoogleChromeManagementV1GraphicsInfo {
    /**
     * Information of a graphics adapter (GPU).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adapterInfo")
    public GoogleChromeManagementV1GraphicsAdapterInfo adapterInfo;

    public GoogleChromeManagementV1GraphicsInfo withAdapterInfo(GoogleChromeManagementV1GraphicsAdapterInfo adapterInfo) {
        this.adapterInfo = adapterInfo;
        return this;
    }
    
    /**
     * Output only. Information about the display(s) of the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayDevices")
    public GoogleChromeManagementV1DisplayDevice[] displayDevices;

    public GoogleChromeManagementV1GraphicsInfo withDisplayDevices(GoogleChromeManagementV1DisplayDevice[] displayDevices) {
        this.displayDevices = displayDevices;
        return this;
    }
    
    /**
     * Output only. Is ePrivacy screen supported or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eprivacySupported")
    public Boolean eprivacySupported;

    public GoogleChromeManagementV1GraphicsInfo withEprivacySupported(Boolean eprivacySupported) {
        this.eprivacySupported = eprivacySupported;
        return this;
    }
    
    /**
     * Information on the device touch screen.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("touchScreenInfo")
    public GoogleChromeManagementV1TouchScreenInfo touchScreenInfo;

    public GoogleChromeManagementV1GraphicsInfo withTouchScreenInfo(GoogleChromeManagementV1TouchScreenInfo touchScreenInfo) {
        this.touchScreenInfo = touchScreenInfo;
        return this;
    }
    
    public GoogleChromeManagementV1GraphicsInfo(){}
}
