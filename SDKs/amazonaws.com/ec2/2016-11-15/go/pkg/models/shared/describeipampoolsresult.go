// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum - The address family of the pool.
type DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum string

const (
	DescribeIpamPoolsResultIpamPoolsAddressFamilyEnumIpv4 DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum = "ipv4"
	DescribeIpamPoolsResultIpamPoolsAddressFamilyEnumIpv6 DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum = "ipv6"
)

func (e *DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum: %s", s)
	}
}

// DescribeIpamPoolsResultIpamPoolsAllocationResourceTags - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.
type DescribeIpamPoolsResultIpamPoolsAllocationResourceTags struct {
	Key   *string
	Value *string
}

// DescribeIpamPoolsResultIpamPoolsAwsServiceEnum - Limits which service in Amazon Web Services that the pool can be used in. "ec2", for example, allows users to use space for Elastic IP addresses and VPCs.
type DescribeIpamPoolsResultIpamPoolsAwsServiceEnum string

const (
	DescribeIpamPoolsResultIpamPoolsAwsServiceEnumEc2 DescribeIpamPoolsResultIpamPoolsAwsServiceEnum = "ec2"
)

func (e *DescribeIpamPoolsResultIpamPoolsAwsServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ec2":
		*e = DescribeIpamPoolsResultIpamPoolsAwsServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeIpamPoolsResultIpamPoolsAwsServiceEnum: %s", s)
	}
}

// DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum - In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict.
type DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum string

const (
	DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnumPublic  DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum = "public"
	DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnumPrivate DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum = "private"
)

func (e *DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "public":
		fallthrough
	case "private":
		*e = DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum: %s", s)
	}
}

// DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnum - The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is <code>BYOIP</code>. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/intro-create-ipv6-pools.html">Create IPv6 pools</a> in the <i>Amazon VPC IPAM User Guide</i>. By default, you can add only one Amazon-provided IPv6 CIDR block to a top-level IPv6 pool. For information on increasing the default limit, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html"> Quotas for your IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
type DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnum string

const (
	DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnumAmazon DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnum = "amazon"
	DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnumByoip  DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnum = "byoip"
)

func (e *DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "amazon":
		fallthrough
	case "byoip":
		*e = DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnum: %s", s)
	}
}

// DescribeIpamPoolsResultIpamPoolsStateEnum - The state of the IPAM pool.
type DescribeIpamPoolsResultIpamPoolsStateEnum string

const (
	DescribeIpamPoolsResultIpamPoolsStateEnumCreateInProgress  DescribeIpamPoolsResultIpamPoolsStateEnum = "create-in-progress"
	DescribeIpamPoolsResultIpamPoolsStateEnumCreateComplete    DescribeIpamPoolsResultIpamPoolsStateEnum = "create-complete"
	DescribeIpamPoolsResultIpamPoolsStateEnumCreateFailed      DescribeIpamPoolsResultIpamPoolsStateEnum = "create-failed"
	DescribeIpamPoolsResultIpamPoolsStateEnumModifyInProgress  DescribeIpamPoolsResultIpamPoolsStateEnum = "modify-in-progress"
	DescribeIpamPoolsResultIpamPoolsStateEnumModifyComplete    DescribeIpamPoolsResultIpamPoolsStateEnum = "modify-complete"
	DescribeIpamPoolsResultIpamPoolsStateEnumModifyFailed      DescribeIpamPoolsResultIpamPoolsStateEnum = "modify-failed"
	DescribeIpamPoolsResultIpamPoolsStateEnumDeleteInProgress  DescribeIpamPoolsResultIpamPoolsStateEnum = "delete-in-progress"
	DescribeIpamPoolsResultIpamPoolsStateEnumDeleteComplete    DescribeIpamPoolsResultIpamPoolsStateEnum = "delete-complete"
	DescribeIpamPoolsResultIpamPoolsStateEnumDeleteFailed      DescribeIpamPoolsResultIpamPoolsStateEnum = "delete-failed"
	DescribeIpamPoolsResultIpamPoolsStateEnumIsolateInProgress DescribeIpamPoolsResultIpamPoolsStateEnum = "isolate-in-progress"
	DescribeIpamPoolsResultIpamPoolsStateEnumIsolateComplete   DescribeIpamPoolsResultIpamPoolsStateEnum = "isolate-complete"
	DescribeIpamPoolsResultIpamPoolsStateEnumRestoreInProgress DescribeIpamPoolsResultIpamPoolsStateEnum = "restore-in-progress"
)

func (e *DescribeIpamPoolsResultIpamPoolsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "create-in-progress":
		fallthrough
	case "create-complete":
		fallthrough
	case "create-failed":
		fallthrough
	case "modify-in-progress":
		fallthrough
	case "modify-complete":
		fallthrough
	case "modify-failed":
		fallthrough
	case "delete-in-progress":
		fallthrough
	case "delete-complete":
		fallthrough
	case "delete-failed":
		fallthrough
	case "isolate-in-progress":
		fallthrough
	case "isolate-complete":
		fallthrough
	case "restore-in-progress":
		*e = DescribeIpamPoolsResultIpamPoolsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeIpamPoolsResultIpamPoolsStateEnum: %s", s)
	}
}

// DescribeIpamPoolsResultIpamPoolsTags - Describes a tag.
type DescribeIpamPoolsResultIpamPoolsTags struct {
	Key   *string
	Value *string
}

// DescribeIpamPoolsResultIpamPools - In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools enable you to organize your IP addresses according to your routing and security needs. For example, if you have separate routing and security needs for development and production applications, you can create a pool for each.
type DescribeIpamPoolsResultIpamPools struct {
	AddressFamily                  *DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum
	AllocationDefaultNetmaskLength *int64
	AllocationMaxNetmaskLength     *int64
	AllocationMinNetmaskLength     *int64
	AllocationResourceTags         []DescribeIpamPoolsResultIpamPoolsAllocationResourceTags
	AutoImport                     *bool
	AwsService                     *DescribeIpamPoolsResultIpamPoolsAwsServiceEnum
	Description                    *string
	IpamArn                        *string
	IpamPoolArn                    *string
	IpamPoolID                     *string
	IpamRegion                     *string
	IpamScopeArn                   *string
	IpamScopeType                  *DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum
	Locale                         *string
	OwnerID                        *string
	PoolDepth                      *int64
	PublicIPSource                 *DescribeIpamPoolsResultIpamPoolsPublicIPSourceEnum
	PubliclyAdvertisable           *bool
	SourceIpamPoolID               *string
	State                          *DescribeIpamPoolsResultIpamPoolsStateEnum
	StateMessage                   *string
	Tags                           []DescribeIpamPoolsResultIpamPoolsTags
}

// DescribeIpamPoolsResult - Success
type DescribeIpamPoolsResult struct {
	IpamPools []DescribeIpamPoolsResultIpamPools
	NextToken *string
}
