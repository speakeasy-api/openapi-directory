/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class InventoryBySkuRequest extends SpeakeasyBase {
  /**
   * HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept: string;

  /**
   * Type of the content being sent
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Content-Type",
  })
  contentType: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=skuId",
  })
  skuId: string;
}

export class InventoryBySku200ApplicationJSONBalance extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "hasUnlimitedQuantity" })
  hasUnlimitedQuantity: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "reservedQuantity" })
  reservedQuantity: number;

  @SpeakeasyMetadata()
  @Expose({ name: "totalQuantity" })
  totalQuantity: number;

  @SpeakeasyMetadata()
  @Expose({ name: "warehouseId" })
  warehouseId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "warehouseName" })
  warehouseName: string;
}

export class InventoryBySku200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: InventoryBySku200ApplicationJSONBalance })
  @Expose({ name: "balance" })
  @Type(() => InventoryBySku200ApplicationJSONBalance)
  balance: InventoryBySku200ApplicationJSONBalance[];

  @SpeakeasyMetadata()
  @Expose({ name: "skuId" })
  skuId: string;
}

export class InventoryBySkuResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  inventoryBySku200ApplicationJSONObject?: InventoryBySku200ApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
