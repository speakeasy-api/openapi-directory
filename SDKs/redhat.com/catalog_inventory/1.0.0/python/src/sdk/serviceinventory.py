"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ServiceInventory:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def list_service_inventories(self, request: operations.ListServiceInventoriesRequest) -> operations.ListServiceInventoriesResponse:
        r"""List ServiceInventories
        Returns an array of ServiceInventory objects
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/service_inventories'
        
        query_params = utils.get_query_params(operations.ListServiceInventoriesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListServiceInventoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceInventoriesCollection])
                res.service_inventories_collection = out

        return res

    def list_service_inventory_tags(self, request: operations.ListServiceInventoryTagsRequest) -> operations.ListServiceInventoryTagsResponse:
        r"""List Tags for ServiceInventory
        Returns an array of Tag objects
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListServiceInventoryTagsRequest, base_url, '/service_inventories/{id}/tags', request)
        
        query_params = utils.get_query_params(operations.ListServiceInventoryTagsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListServiceInventoryTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagsCollection])
                res.tags_collection = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorNotFound])
                res.error_not_found = out

        return res

    def show_service_inventory(self, request: operations.ShowServiceInventoryRequest) -> operations.ShowServiceInventoryResponse:
        r"""Show an existing ServiceInventory
        Returns a ServiceInventory object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ShowServiceInventoryRequest, base_url, '/service_inventories/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShowServiceInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceInventory])
                res.service_inventory = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorNotFound])
                res.error_not_found = out

        return res

    def tag_service_inventory(self, request: operations.TagServiceInventoryRequest) -> operations.TagServiceInventoryResponse:
        r"""Tag a ServiceInventory
        Tags a ServiceInventory object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagServiceInventoryRequest, base_url, '/service_inventories/{id}/tag', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagServiceInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Tag]])
                res.tags = out
        elif http_res.status_code == 304:
            pass

        return res

    def untag_service_inventory(self, request: operations.UntagServiceInventoryRequest) -> operations.UntagServiceInventoryResponse:
        r"""Untag a ServiceInventory
        Untags a ServiceInventory object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UntagServiceInventoryRequest, base_url, '/service_inventories/{id}/untag', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UntagServiceInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    