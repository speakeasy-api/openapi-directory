/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class MarketSubscriptionMessage {
    /**
     * Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clk")
    public String clk;

    public MarketSubscriptionMessage withClk(String clk) {
        this.clk = clk;
        return this;
    }
    
    /**
     * Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conflateMs")
    public Long conflateMs;

    public MarketSubscriptionMessage withConflateMs(Long conflateMs) {
        this.conflateMs = conflateMs;
        return this;
    }
    
    /**
     * Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heartbeatMs")
    public Long heartbeatMs;

    public MarketSubscriptionMessage withHeartbeatMs(Long heartbeatMs) {
        this.heartbeatMs = heartbeatMs;
        return this;
    }
    
    /**
     * Client generated unique id to link request with response (like json rpc)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public MarketSubscriptionMessage withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initialClk")
    public String initialClk;

    public MarketSubscriptionMessage withInitialClk(String initialClk) {
        this.initialClk = initialClk;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketDataFilter")
    public MarketDataFilter marketDataFilter;

    public MarketSubscriptionMessage withMarketDataFilter(MarketDataFilter marketDataFilter) {
        this.marketDataFilter = marketDataFilter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketFilter")
    public MarketFilter marketFilter;

    public MarketSubscriptionMessage withMarketFilter(MarketFilter marketFilter) {
        this.marketFilter = marketFilter;
        return this;
    }
    
    /**
     * The operation type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("op")
    public String op;

    public MarketSubscriptionMessage withOp(String op) {
        this.op = op;
        return this;
    }
    
    /**
     * Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segmentationEnabled")
    public Boolean segmentationEnabled;

    public MarketSubscriptionMessage withSegmentationEnabled(Boolean segmentationEnabled) {
        this.segmentationEnabled = segmentationEnabled;
        return this;
    }
    
    public MarketSubscriptionMessage(){}
}
