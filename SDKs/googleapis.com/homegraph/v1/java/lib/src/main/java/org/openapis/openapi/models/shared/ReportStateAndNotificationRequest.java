/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReportStateAndNotificationRequest - Request type for the [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification) call. It may include states, notifications, or both. States and notifications are defined per `device_id` (for example, "123" and "456" in the following example). Example: ```json { "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf", "agentUserId": "1234", "payload": { "devices": { "states": { "123": { "on": true }, "456": { "on": true, "brightness": 10 } }, } } } ```
 */
public class ReportStateAndNotificationRequest {
    /**
     * Required. Third-party user ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentUserId")
    public String agentUserId;
    public ReportStateAndNotificationRequest withAgentUserId(String agentUserId) {
        this.agentUserId = agentUserId;
        return this;
    }
    
    /**
     * Unique identifier per event (for example, a doorbell press).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventId")
    public String eventId;
    public ReportStateAndNotificationRequest withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    /**
     * Deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followUpToken")
    public String followUpToken;
    public ReportStateAndNotificationRequest withFollowUpToken(String followUpToken) {
        this.followUpToken = followUpToken;
        return this;
    }
    
    /**
     * Payload containing the state and notification information for devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payload")
    public StateAndNotificationPayload payload;
    public ReportStateAndNotificationRequest withPayload(StateAndNotificationPayload payload) {
        this.payload = payload;
        return this;
    }
    
    /**
     * Request ID used for debugging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestId")
    public String requestId;
    public ReportStateAndNotificationRequest withRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }
    
}
