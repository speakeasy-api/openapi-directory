"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import schemassecret_scanning_alert_state_enum as shared_schemassecret_scanning_alert_state_enum
from ..shared import secret_scanning_alert_resolution_enum as shared_secret_scanning_alert_resolution_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SecretScanningAlert:
    r"""Response"""
    
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    html_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url'), 'exclude': lambda f: f is None }})
    r"""The GitHub URL of the alert resource."""  
    locations_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locations_url'), 'exclude': lambda f: f is None }})
    r"""The REST API URL of the code locations for this alert."""  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The security alert number."""  
    push_protection_bypassed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_protection_bypassed'), 'exclude': lambda f: f is None }})
    r"""Whether push protection was bypassed for the detected secret."""  
    push_protection_bypassed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_protection_bypassed_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    push_protection_bypassed_by: Optional[shared_nullable_simple_user.NullableSimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_protection_bypassed_by'), 'exclude': lambda f: f is None }})
    r"""A GitHub user."""  
    resolution: Optional[shared_secret_scanning_alert_resolution_enum.SecretScanningAlertResolutionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolution'), 'exclude': lambda f: f is None }})
    r"""**Required when the `state` is `resolved`.** The reason for resolving the alert."""  
    resolved_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolved_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    resolved_by: Optional[shared_nullable_simple_user.NullableSimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolved_by'), 'exclude': lambda f: f is None }})
    r"""A GitHub user."""  
    secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret'), 'exclude': lambda f: f is None }})
    r"""The secret that was detected."""  
    secret_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_type'), 'exclude': lambda f: f is None }})
    r"""The type of secret that secret scanning detected."""  
    secret_type_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_type_display_name'), 'exclude': lambda f: f is None }})
    r"""User-friendly name for the detected secret, matching the `secret_type`.
    For a list of built-in patterns, see \"[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\" 
    """  
    state: Optional[shared_schemassecret_scanning_alert_state_enum.SchemassecretScanningAlertStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`."""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The REST API URL of the alert resource."""  
    