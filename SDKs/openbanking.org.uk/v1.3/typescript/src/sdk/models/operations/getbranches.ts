/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetBranchesRequest extends SpeakeasyBase {
  /**
   * Used for conditional request, to retrieve data only if modified since a given date
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-Modified-Since",
  })
  ifModifiedSince?: string;

  /**
   * Used for conditional request, to retrieve data only if the given Etag value does not match
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-None-Match",
  })
  ifNoneMatch?: string;
}

/**
 * A standard error response.
 */
export class GetBranchesErrorObject extends SpeakeasyBase {
  /**
   * Further details describing the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * This corresponds to the HTTP status code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: string;

  /**
   * A short title of the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;
}

export enum GetBranches503ErrorObjectDescriptionEnum {
  TheServiceIsTemporarilyUnavailable = "The service is temporarily unavailable.",
}

export enum GetBranches503ErrorObjectStatusEnum {
  FiveHundredAndThree = "503",
}

export enum GetBranches503ErrorObjectTitleEnum {
  ServiceTemporarilyUnavailable = "Service temporarily unavailable",
}

/**
 * The service is temporarily unavailable.
 */
export class GetBranches503ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetBranches503ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetBranches503ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetBranches503ErrorObjectTitleEnum;
}

export enum GetBranches500ErrorObjectDescriptionEnum {
  AnErrorOccurredOnTheServerNoFurtherInformationIsAvailable = "An error occurred on the server. No further information is available.",
}

export enum GetBranches500ErrorObjectStatusEnum {
  FiveHundred = "500",
}

export enum GetBranches500ErrorObjectTitleEnum {
  InternalServerError = "Internal server error",
}

/**
 * An error occurred on the server. No further information is available.
 */
export class GetBranches500ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetBranches500ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetBranches500ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetBranches500ErrorObjectTitleEnum;
}

export enum GetBranches429ErrorObjectDescriptionEnum {
  YouHaveRequestedThisResourceTooOftenSlowDown = "You have requested this resource too often. Slow down.",
}

export enum GetBranches429ErrorObjectStatusEnum {
  FourHundredAndTwentyNine = "429",
}

export enum GetBranches429ErrorObjectTitleEnum {
  TooManyRequests = "Too many requests",
}

/**
 * You have requested this resource too often. Slow down.
 */
export class GetBranches429ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetBranches429ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetBranches429ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetBranches429ErrorObjectTitleEnum;
}

export enum GetBranches408ErrorObjectDescriptionEnum {
  YourClientHasFailedToSubmitARequestAndATimeoutHasOccurred = "Your client has failed to submit a request, and a timeout has occurred.",
}

export enum GetBranches408ErrorObjectStatusEnum {
  FourHundredAndEight = "408",
}

export enum GetBranches408ErrorObjectTitleEnum {
  ClientTimeout = "Client timeout",
}

/**
 * Your client has failed to submit a request, and a timeout has occurred.
 */
export class GetBranches408ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetBranches408ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetBranches408ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetBranches408ErrorObjectTitleEnum;
}

export enum GetBranches400ErrorObjectDescriptionEnum {
  YouHaveSentARequestWhichCouldNotBeUnderstood = "You have sent a request which could not be understood.",
}

export enum GetBranches400ErrorObjectStatusEnum {
  FourHundred = "400",
}

export enum GetBranches400ErrorObjectTitleEnum {
  BadRequest = "Bad request",
}

/**
 * You have sent a request which could not be understood.
 */
export class GetBranches400ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetBranches400ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetBranches400ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetBranches400ErrorObjectTitleEnum;
}

/**
 * Information about the accessibility
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAccessibilityTypesEnum {
  AudioCashMachine = "AudioCashMachine",
  AutomaticDoors = "AutomaticDoors",
  ChairAccess = "ChairAccess",
  DriveThru = "DriveThru",
  ExternalRamp = "ExternalRamp",
  InductionLoop = "InductionLoop",
  InternalRamp = "InternalRamp",
  LevelAccess = "LevelAccess",
  LowerLevelCounter = "LowerLevelCounter",
  WheelchairAccess = "WheelchairAccess",
}

/**
 * Postal Address
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAddress extends SpeakeasyBase {
  /**
   * Number or Name that identifies the position of a building on a street
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BuildingNumberOrName" })
  buildingNumberOrName?: string;

  /**
   * Nation with its own government
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Country" })
  country: string;

  /**
   * Identifies a subdivision of a country such as state, region, county
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CountrySubDivision" })
  countrySubDivision?: string;

  /**
   * Directions for customers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OptionalAddressField" })
  optionalAddressField?: string;

  /**
   * Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PostCode" })
  postCode?: string;

  /**
   * Name of a street or thoroughfare
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StreetName" })
  streetName?: string;

  /**
   * Name of a built-up area, with defined boundaries, and a local government
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TownName" })
  townName?: string;
}

/**
 * Alternative Phone Number
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAlternatePhone extends SpeakeasyBase {
  /**
   * Collection of information that identifies a phone number, as defined by telecom services.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AlternateTelephoneNumber" })
  alternateTelephoneNumber?: string;

  /**
   * Description of the telephone number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AlternateTelephoneNumberDescription" })
  alternateTelephoneNumberDescription?: string;
}

/**
 * Information about branch facilities
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchBranchFacilitiesNameEnum {
  BusinessITSupport = "BusinessITSupport",
  CollectionLockers = "CollectionLockers",
  MeetingRooms = "MeetingRooms",
  Parking = "Parking",
  Wifi = "Wifi",
}

/**
 * Information about mediated branch facilities
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchBranchMediatedServiceNameEnum {
  BureauDeChange = "BureauDeChange",
  BusinessCounter = "BusinessCounter",
  CardIssuanceFacility = "CardIssuanceFacility",
  CounterServices = "CounterServices",
  DriveThru = "DriveThru",
  MortgageAdvisor = "MortgageAdvisor",
  NightSafe = "NightSafe",
  OnDemandCurrency = "OnDemandCurrency",
  PremierCounter = "PremierCounter",
  VideoBanking = "VideoBanking",
  WheelChairAccess = "WheelChairAccess",
}

/**
 * Information about self service branch services
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchBranchSelfServeServiceNameEnum {
  AccountVerificationService = "AccountVerificationService",
  AssistedServiceCounter = "AssistedServiceCounter",
  BusinessDepositTerminal = "BusinessDepositTerminal",
  CashChequeDepositMachineCoin = "CashChequeDepositMachineCoin",
  CashChequeDepositMachineNoCoin = "CashChequeDepositMachineNoCoin",
  ExternalAtmAudio = "ExternalAtmAudio",
  ExternalAtmNoAudio = "ExternalAtmNoAudio",
  ExternalQuickServicePoint = "ExternalQuickServicePoint",
  InternalAtmAudio = "InternalAtmAudio",
  InternalAtmNoAudio = "InternalAtmNoAudio",
  InternalQuickServicePoint = "InternalQuickServicePoint",
  LodgementDevice = "LodgementDevice",
  OnlineBankingPoint = "OnlineBankingPoint",
  QuickDeposit = "QuickDeposit",
  SaturdayCounterService = "SaturdayCounterService",
  SelfServiceAccountOpening = "SelfServiceAccountOpening",
  StatementPrinter = "StatementPrinter",
}

/**
 * Information on the type of branch
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchBranchTypeEnum {
  Physical = "Physical",
  Mobile = "Mobile",
}

/**
 * Customer segment which the branch is able to service
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchCustomerSegmentEnum {
  Business = "Business",
  Corporate = "Corporate",
  Personal = "Personal",
  Premier = "Premier",
  Private = "Private",
  Select = "Select",
  Sme = "SME",
  Wealth = "Wealth",
}

/**
 * Geographic Coordinates
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchGeographicLocation extends SpeakeasyBase {
  /**
   * The Latitude measured in decimal format according to ISO 213
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Latitude" })
  latitude: string;

  /**
   * The longitude measured in decimal format according to ISO 213
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Longitude" })
  longitude: string;
}

/**
 * Day of the week
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOpeningTimesOpeningDayEnum {
  Monday = "Monday",
  Tuesday = "Tuesday",
  Wednesday = "Wednesday",
  Thursday = "Thursday",
  Friday = "Friday",
  Saturday = "Saturday",
  Sunday = "Sunday",
  PublicAndBankHoliday = "Public and Bank Holiday",
}

export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOpeningTimes extends SpeakeasyBase {
  /**
   * ISOTime, local time hh:mm:ss.sss or time in utc hh:mm:ss.sssZ or time with timezone hh:mm:ss.sss+hh:mm hh:mm:ss.sss-hh:mm
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClosingTime" })
  closingTime: string;

  /**
   * Day of the week
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDay" })
  openingDay: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOpeningTimesOpeningDayEnum;

  /**
   * ISOTime, local time hh:mm:ss.sss or time in utc hh:mm:ss.sssZ or time with timezone hh:mm:ss.sss+hh:mm hh:mm:ss.sss-hh:mm
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningTime" })
  openingTime: string;

  /**
   * ISOTime, local time hh:mm:ss.sss or time in utc hh:mm:ss.sssZ or time with timezone hh:mm:ss.sss+hh:mm hh:mm:ss.sss-hh:mm
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UnavailableFinishTime" })
  unavailableFinishTime?: string;

  /**
   * ISOTime, local time hh:mm:ss.sss or time in utc hh:mm:ss.sssZ or time with timezone hh:mm:ss.sss+hh:mm hh:mm:ss.sss-hh:mm
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UnavailableStartTime" })
  unavailableStartTime?: string;
}

/**
 * The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationBrandTrademarkIPOCodeEnum {
  Uk = "UK",
  Eu = "EU",
}

/**
 * Brand
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationBrand extends SpeakeasyBase {
  /**
   * The trademark number that has been registered with the Intellectual Property Office. Note: The 2 letter IPO prefix should be omitted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TrademarkID" })
  trademarkID: string;

  /**
   * The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TrademarkIPOCode" })
  trademarkIPOCode: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationBrandTrademarkIPOCodeEnum;
}

/**
 * Organisation Name
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationParentOrganisationOrganisationName extends SpeakeasyBase {
  /**
   * Legal Name of the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LegalName" })
  legalName: string;
}

/**
 * Parent organisation
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationParentOrganisation extends SpeakeasyBase {
  /**
   * The BIC from the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BIC" })
  bic?: string;

  /**
   * The LEI ID of the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LEI" })
  lei?: string;

  /**
   * Organisation Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OrganisationName" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationParentOrganisationOrganisationName
  )
  organisationName: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationParentOrganisationOrganisationName;
}

/**
 * Organisation
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisation extends SpeakeasyBase {
  /**
   * Brand
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Brand" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationBrand
  )
  brand: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationBrand;

  /**
   * Parent organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ParentOrganisation" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationParentOrganisation
  )
  parentOrganisation: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisationParentOrganisation;
}

/**
 * Planned branch closure
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchPlannedBranchClosure extends SpeakeasyBase {
  /**
   * Date when a branch is due to re-open following temporary closure
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EndDate" })
  endDate?: string;

  /**
   * Date when a branch is due to close temporarily or permanently
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartDate" })
  startDate?: string;
}

export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranch extends SpeakeasyBase {
  /**
   * Indicated whether an ATM is at the branch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ATMAtBranch" })
  atmAtBranch: boolean;

  /**
   * Information about the accessibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessibilityTypes" })
  accessibilityTypes?: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAccessibilityTypesEnum;

  /**
   * Postal Address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAddress
  )
  address: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAddress;

  @SpeakeasyMetadata({
    elemType:
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAlternatePhone,
  })
  @Expose({ name: "AlternatePhone" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAlternatePhone
  )
  alternatePhone?: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchAlternatePhone[];

  /**
   * Time that the mobile branch is scheduled to arrive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ArrivalTime" })
  arrivalTime?: string;

  /**
   * Description of the branch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchDescription" })
  branchDescription?: string;

  /**
   * Information about branch facilities
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchFacilitiesName" })
  branchFacilitiesName?: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchBranchFacilitiesNameEnum[];

  /**
   * Unique and unambiguous identification of a retail branch of a financial institution
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchIdentification" })
  branchIdentification: string;

  /**
   * Information about mediated branch facilities
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchMediatedServiceName" })
  branchMediatedServiceName?: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchBranchMediatedServiceNameEnum[];

  /**
   * Name by which a party is known and which is usually used to identify that party
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchName" })
  branchName?: string;

  /**
   * Any other facilities not mentioned in BranchFacilitiesName
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchOtherFacilities" })
  branchOtherFacilities?: string[];

  /**
   * Mediated Services not described in BranchMediatedServiceName
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchOtherMediatedServices" })
  branchOtherMediatedServices?: string[];

  /**
   * Self Services not described in BranchSelfServeServiceName
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchOtherSelfServices" })
  branchOtherSelfServices?: string[];

  /**
   * Image related to the branch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchPhoto" })
  branchPhoto?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "BranchSelfServeServiceName" })
  branchSelfServeServiceName?: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchBranchSelfServeServiceNameEnum[];

  /**
   * Information on the type of branch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchType" })
  branchType: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchBranchTypeEnum;

  /**
   * Customer segment which the branch is able to service
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CustomerSegment" })
  customerSegment: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchCustomerSegmentEnum[];

  /**
   * Description on when the mobile branch is available. e.g. The weekend of Glastonbury festival; or Mondays and during the shrimp season also Wednesdays
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DaysOfTheWeek" })
  daysOfTheWeek?: string;

  /**
   * Time that the mobile branch is scheduled to depart
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DepartureTime" })
  departureTime?: string;

  /**
   * Collection of information that identifies a FAX number, as defined by telecom services.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FaxNumber" })
  faxNumber?: string[];

  /**
   * Geographic Coordinates
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GeographicLocation" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchGeographicLocation
  )
  geographicLocation?: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchGeographicLocation;

  /**
   * Branch Opening Times
   */
  @SpeakeasyMetadata({
    elemType:
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOpeningTimes,
  })
  @Expose({ name: "OpeningTimes" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOpeningTimes
  )
  openingTimes: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOpeningTimes[];

  /**
   * Organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Organisation" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisation
  )
  organisation: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchOrganisation;

  /**
   * Place where the mobile branch is located, such as between the news agent and the church.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ParkingLocation" })
  parkingLocation?: string;

  @SpeakeasyMetadata({
    elemType:
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchPlannedBranchClosure,
  })
  @Expose({ name: "PlannedBranchClosure" })
  @Type(
    () =>
      GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchPlannedBranchClosure
  )
  plannedBranchClosure?: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranchPlannedBranchClosure[];

  /**
   * Name of the stop of the mobile branch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StopName" })
  stopName?: string;

  /**
   * Collection of information that identifies a phone number, as defined by telecom services.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TelephoneNumber" })
  telephoneNumber: string;
}

export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataAgreementEnum {
  UseOfTheAPIsAndAnyRelatedDataWillBeSubjectToTheTermsOfTheOpenLicenceAndSubjectToTermsAndConditions = "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions",
}

/**
 * Open Banking License
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataLicenseEnum {
  HttpsWwwOpenbankingOrgUkOpenLicence = "https://www.openbanking.org.uk/open-licence",
}

/**
 * Open Banking Terms of Use
 */
export enum GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataTermsOfUseEnum {
  HttpsWwwOpenbankingOrgUkTerms = "https://www.openbanking.org.uk/terms",
}

export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Agreement" })
  agreement: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataAgreementEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated: Date;

  /**
   * Open Banking License
   */
  @SpeakeasyMetadata()
  @Expose({ name: "License" })
  license: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataLicenseEnum;

  /**
   * Open Banking Terms of Use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TermsOfUse" })
  termsOfUse: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataTermsOfUseEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TotalResults" })
  totalResults: number;
}

/**
 * Successful response with a list of `Branch` data
 */
export class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJson extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranch,
  })
  @Expose({ name: "data" })
  @Type(() => GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranch)
  data: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonBranch[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(
    () => GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData
  )
  meta: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData;
}

export class GetBranchesResponse extends SpeakeasyBase {
  /**
   * You have sent a request which could not be understood.
   */
  @SpeakeasyMetadata()
  fourHundredErrorObject?: GetBranches400ErrorObject;

  /**
   * Your client has failed to submit a request, and a timeout has occurred.
   */
  @SpeakeasyMetadata()
  fourHundredAndEightErrorObject?: GetBranches408ErrorObject;

  /**
   * You have requested this resource too often. Slow down.
   */
  @SpeakeasyMetadata()
  fourHundredAndTwentyNineErrorObject?: GetBranches429ErrorObject;

  /**
   * An error occurred on the server. No further information is available.
   */
  @SpeakeasyMetadata()
  fiveHundredErrorObject?: GetBranches500ErrorObject;

  /**
   * The service is temporarily unavailable.
   */
  @SpeakeasyMetadata()
  fiveHundredAndThreeErrorObject?: GetBranches503ErrorObject;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * A standard error response.
   */
  @SpeakeasyMetadata()
  errorObject?: GetBranchesErrorObject;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response with a list of `Branch` data
   */
  @SpeakeasyMetadata()
  getBranches200ApplicationPrsOpenbankingOpendataV13PlusJsonObject?: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJson;
}
