"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import backendapiauthtype as shared_backendapiauthtype
from ..shared import createbackendapiresponse as shared_createbackendapiresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateBackendAPIRequestBodyResourceConfigConflictResolutionResolutionStrategyEnum(str, Enum):
    r"""The strategy for conflict resolution."""
    OPTIMISTIC_CONCURRENCY = 'OPTIMISTIC_CONCURRENCY'
    LAMBDA = 'LAMBDA'
    AUTOMERGE = 'AUTOMERGE'
    NONE = 'NONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAPIRequestBodyResourceConfigConflictResolution:
    r"""The conflict resolution strategy for your data stored in the data models."""
    
    resolution_strategy: Optional[CreateBackendAPIRequestBodyResourceConfigConflictResolutionResolutionStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResolutionStrategy'), 'exclude': lambda f: f is None }})  
    
class CreateBackendAPIRequestBodyResourceConfigDefaultAuthTypeModeEnum(str, Enum):
    r"""Describes the authentication mode."""
    API_KEY = 'API_KEY'
    AWS_IAM = 'AWS_IAM'
    AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS'
    OPENID_CONNECT = 'OPENID_CONNECT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAPIRequestBodyResourceConfigDefaultAuthTypeSettings:
    r"""Describes settings for the authentication mode."""
    
    cognito_user_pool_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CognitoUserPoolId'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    expiration_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationTime'), 'exclude': lambda f: f is None }})  
    open_id_auth_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDAuthTTL'), 'exclude': lambda f: f is None }})  
    open_id_client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDClientId'), 'exclude': lambda f: f is None }})  
    open_id_iat_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDIatTTL'), 'exclude': lambda f: f is None }})  
    open_id_issue_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDIssueURL'), 'exclude': lambda f: f is None }})  
    open_id_provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDProviderName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAPIRequestBodyResourceConfigDefaultAuthType:
    r"""The default authentication type for interacting with the configured data models in your Amplify project."""
    
    mode: Optional[CreateBackendAPIRequestBodyResourceConfigDefaultAuthTypeModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mode'), 'exclude': lambda f: f is None }})  
    settings: Optional[CreateBackendAPIRequestBodyResourceConfigDefaultAuthTypeSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAPIRequestBodyResourceConfig:
    r"""The resource config for the data model, configured as a part of the Amplify project."""
    
    additional_auth_types: Optional[list[shared_backendapiauthtype.BackendAPIAuthType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalAuthTypes'), 'exclude': lambda f: f is None }})  
    api_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiName'), 'exclude': lambda f: f is None }})  
    conflict_resolution: Optional[CreateBackendAPIRequestBodyResourceConfigConflictResolution] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConflictResolution'), 'exclude': lambda f: f is None }})  
    default_auth_type: Optional[CreateBackendAPIRequestBodyResourceConfigDefaultAuthType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultAuthType'), 'exclude': lambda f: f is None }})  
    service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Service'), 'exclude': lambda f: f is None }})  
    transform_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformSchema'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAPIRequestBody:
    
    backend_environment_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backendEnvironmentName') }})
    r"""The name of the backend environment."""  
    resource_config: CreateBackendAPIRequestBodyResourceConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceConfig') }})
    r"""The resource config for the data model, configured as a part of the Amplify project."""  
    resource_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName') }})
    r"""The name of this resource."""  
    

@dataclasses.dataclass
class CreateBackendAPIRequest:
    
    app_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'appId', 'style': 'simple', 'explode': False }})
    r"""The app ID."""  
    request_body: CreateBackendAPIRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateBackendAPIResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_backend_api_response: Optional[shared_createbackendapiresponse.CreateBackendAPIResponse] = dataclasses.field(default=None)
    r"""Success"""  
    gateway_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""GatewayTimeoutException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    