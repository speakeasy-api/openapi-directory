/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * DestinyProgressionDestinyFactionProgression - Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.
 */
public class DestinyProgressionDestinyFactionProgression {
    /**
     * This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
     */
    
    public Integer currentProgress;

    public DestinyProgressionDestinyFactionProgression withCurrentProgress(Integer currentProgress) {
        this.currentProgress = currentProgress;
        return this;
    }
    
    /**
     * The number of resets of this progression you've executed this season, if applicable to this progression.
     */
    
    public Integer currentResetCount;

    public DestinyProgressionDestinyFactionProgression withCurrentResetCount(Integer currentResetCount) {
        this.currentResetCount = currentResetCount;
        return this;
    }
    
    /**
     * If this progression has a daily limit, this is that limit.
     */
    
    public Integer dailyLimit;

    public DestinyProgressionDestinyFactionProgression withDailyLimit(Integer dailyLimit) {
        this.dailyLimit = dailyLimit;
        return this;
    }
    
    /**
     * The amount of progress earned today for this progression.
     */
    
    public Integer dailyProgress;

    public DestinyProgressionDestinyFactionProgression withDailyProgress(Integer dailyProgress) {
        this.dailyProgress = dailyProgress;
        return this;
    }
    
    /**
     * The hash identifier of the Faction related to this progression. Use it to look up the DestinyFactionDefinition for more rendering info.
     */
    
    public Long factionHash;

    public DestinyProgressionDestinyFactionProgression withFactionHash(Long factionHash) {
        this.factionHash = factionHash;
        return this;
    }
    
    /**
     * The index of the Faction vendor that is currently available. Will be set to -1 if no vendors are available.
     */
    
    public Integer factionVendorIndex;

    public DestinyProgressionDestinyFactionProgression withFactionVendorIndex(Integer factionVendorIndex) {
        this.factionVendorIndex = factionVendorIndex;
        return this;
    }
    
    /**
     * This is the level of the progression (for instance, the Character Level).
     */
    
    public Integer level;

    public DestinyProgressionDestinyFactionProgression withLevel(Integer level) {
        this.level = level;
        return this;
    }
    
    /**
     * This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
     */
    
    public Integer levelCap;

    public DestinyProgressionDestinyFactionProgression withLevelCap(Integer levelCap) {
        this.levelCap = levelCap;
        return this;
    }
    
    /**
     * The total amount of progression (i.e. "Experience") needed in order to reach the next level.
     */
    
    public Integer nextLevelAt;

    public DestinyProgressionDestinyFactionProgression withNextLevelAt(Integer nextLevelAt) {
        this.nextLevelAt = nextLevelAt;
        return this;
    }
    
    /**
     * The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
     */
    
    public Integer progressToNextLevel;

    public DestinyProgressionDestinyFactionProgression withProgressToNextLevel(Integer progressToNextLevel) {
        this.progressToNextLevel = progressToNextLevel;
        return this;
    }
    
    /**
     * The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
     */
    
    public Long progressionHash;

    public DestinyProgressionDestinyFactionProgression withProgressionHash(Long progressionHash) {
        this.progressionHash = progressionHash;
        return this;
    }
    
    /**
     * Information about historical rewards for this progression, if there is any data for it.
     */
    
    public Integer[] rewardItemStates;

    public DestinyProgressionDestinyFactionProgression withRewardItemStates(Integer[] rewardItemStates) {
        this.rewardItemStates = rewardItemStates;
        return this;
    }
    
    /**
     * Information about historical resets of this progression, if there is any data for it.
     */
    
    public DestinyDestinyProgressionResetEntry[] seasonResets;

    public DestinyProgressionDestinyFactionProgression withSeasonResets(DestinyDestinyProgressionResetEntry[] seasonResets) {
        this.seasonResets = seasonResets;
        return this;
    }
    
    /**
     * Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
     */
    
    public Integer stepIndex;

    public DestinyProgressionDestinyFactionProgression withStepIndex(Integer stepIndex) {
        this.stepIndex = stepIndex;
        return this;
    }
    
    /**
     * If this progression has a weekly limit, this is that limit.
     */
    
    public Integer weeklyLimit;

    public DestinyProgressionDestinyFactionProgression withWeeklyLimit(Integer weeklyLimit) {
        this.weeklyLimit = weeklyLimit;
        return this;
    }
    
    /**
     * The amount of progress earned toward this progression in the current week.
     */
    
    public Integer weeklyProgress;

    public DestinyProgressionDestinyFactionProgression withWeeklyProgress(Integer weeklyProgress) {
        this.weeklyProgress = weeklyProgress;
        return this;
    }
    
    public DestinyProgressionDestinyFactionProgression(){}
}
