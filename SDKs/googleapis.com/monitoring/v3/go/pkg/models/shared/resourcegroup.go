// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ResourceGroupResourceTypeEnum - The resource type of the group members.
type ResourceGroupResourceTypeEnum string

const (
	ResourceGroupResourceTypeEnumResourceTypeUnspecified ResourceGroupResourceTypeEnum = "RESOURCE_TYPE_UNSPECIFIED"
	ResourceGroupResourceTypeEnumInstance                ResourceGroupResourceTypeEnum = "INSTANCE"
	ResourceGroupResourceTypeEnumAwsElbLoadBalancer      ResourceGroupResourceTypeEnum = "AWS_ELB_LOAD_BALANCER"
)

func (e *ResourceGroupResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RESOURCE_TYPE_UNSPECIFIED":
		fallthrough
	case "INSTANCE":
		fallthrough
	case "AWS_ELB_LOAD_BALANCER":
		*e = ResourceGroupResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceGroupResourceTypeEnum: %s", s)
	}
}

// ResourceGroup - The resource submessage for group checks. It can be used instead of a monitored resource, when multiple resources are being monitored.
type ResourceGroup struct {
	// The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
	GroupID *string `json:"groupId,omitempty"`
	// The resource type of the group members.
	ResourceType *ResourceGroupResourceTypeEnum `json:"resourceType,omitempty"`
}
