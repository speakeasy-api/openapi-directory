"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import conversionlist as shared_conversionlist
from typing import Optional


@dataclasses.dataclass
class DoubleclicksearchConversionGetSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DoubleclicksearchConversionGetRequest:
    
    advertiser_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'advertiserId', 'style': 'simple', 'explode': False }})
    r"""Numeric ID of the advertiser."""  
    agency_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'agencyId', 'style': 'simple', 'explode': False }})
    r"""Numeric ID of the agency."""  
    end_date: int = dataclasses.field(metadata={'query_param': { 'field_name': 'endDate', 'style': 'form', 'explode': True }})
    r"""Last date (inclusive) on which to retrieve conversions. Format is yyyymmdd."""  
    engine_account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'engineAccountId', 'style': 'simple', 'explode': False }})
    r"""Numeric ID of the engine account."""  
    row_count: int = dataclasses.field(metadata={'query_param': { 'field_name': 'rowCount', 'style': 'form', 'explode': True }})
    r"""The number of conversions to return per call."""  
    start_date: int = dataclasses.field(metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})
    r"""First date (inclusive) on which to retrieve conversions. Format is yyyymmdd."""  
    start_row: int = dataclasses.field(metadata={'query_param': { 'field_name': 'startRow', 'style': 'form', 'explode': True }})
    r"""The 0-based starting index for retrieving conversions results."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    ad_group_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'adGroupId', 'style': 'form', 'explode': True }})
    r"""Numeric ID of the ad group."""  
    ad_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'adId', 'style': 'form', 'explode': True }})
    r"""Numeric ID of the ad."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'campaignId', 'style': 'form', 'explode': True }})
    r"""Numeric ID of the campaign."""  
    criterion_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'criterionId', 'style': 'form', 'explode': True }})
    r"""Numeric ID of the criterion."""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'customerId', 'style': 'form', 'explode': True }})
    r"""Customer ID of a client account in the new Search Ads 360 experience."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class DoubleclicksearchConversionGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conversion_list: Optional[shared_conversionlist.ConversionList] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    