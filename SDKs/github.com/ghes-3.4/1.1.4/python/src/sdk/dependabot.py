"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Dependabot:
    r"""Endpoints to manage Dependabot."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dependabot_add_selected_repo_to_org_secret(self, request: operations.DependabotAddSelectedRepoToOrgSecretRequest) -> operations.DependabotAddSelectedRepoToOrgSecretResponse:
        r"""Add selected repository to an organization secret
        Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#add-selected-repository-to-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotAddSelectedRepoToOrgSecretRequest, base_url, '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotAddSelectedRepoToOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dependabot_create_or_update_org_secret(self, request: operations.DependabotCreateOrUpdateOrgSecretRequest) -> operations.DependabotCreateOrUpdateOrgSecretResponse:
        r"""Create or update an organization secret
        Creates or updates an organization secret with an encrypted value. Encrypt your secret using
        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
        permission to use this endpoint.
        
        #### Example encrypting a secret using Node.js
        
        Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        
        ```
        const sodium = require('libsodium-wrappers')
        const secret = 'plain-text-secret' // replace with the secret you want to encrypt
        const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
        
        //Check if libsodium is ready and then proceed.
        sodium.ready.then(() => {
          // Convert Secret & Base64 key to Uint8Array.
          let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
          let binsec = sodium.from_string(secret)
        
          //Encrypt the secret using LibSodium
          let encBytes = sodium.crypto_box_seal(binsec, binkey)
        
          // Convert encrypted Uint8Array to Base64
          let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
        
          console.log(output)
        });
        ```
        
        #### Example encrypting a secret using Python
        
        Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        
        ```
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
          \"\"\"Encrypt a Unicode string using the public key.\"\"\"
          public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())
          sealed_box = public.SealedBox(public_key)
          encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))
          return b64encode(encrypted).decode(\"utf-8\")
        ```
        
        #### Example encrypting a secret using C#
        
        Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        
        ```
        var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");
        var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");
        
        var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        
        Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        ```
        
        #### Example encrypting a secret using Ruby
        
        Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        
        ```ruby
        require \"rbnacl\"
        require \"base64\"
        
        key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")
        public_key = RbNaCl::PublicKey.new(key)
        
        box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        encrypted_secret = box.encrypt(\"my_secret\")
        
        # Print the base64 encoded secret
        puts Base64.strict_encode64(encrypted_secret)
        ```
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotCreateOrUpdateOrgSecretRequest, base_url, '/orgs/{org}/dependabot/secrets/{secret_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotCreateOrUpdateOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 204:
            pass

        return res

    def dependabot_create_or_update_repo_secret(self, request: operations.DependabotCreateOrUpdateRepoSecretRequest) -> operations.DependabotCreateOrUpdateRepoSecretResponse:
        r"""Create or update a repository secret
        Creates or updates a repository secret with an encrypted value. Encrypt your secret using
        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
        permission to use this endpoint.
        
        #### Example encrypting a secret using Node.js
        
        Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        
        ```
        const sodium = require('libsodium-wrappers')
        const secret = 'plain-text-secret' // replace with the secret you want to encrypt
        const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
        
        //Check if libsodium is ready and then proceed.
        sodium.ready.then(() => {
          // Convert Secret & Base64 key to Uint8Array.
          let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
          let binsec = sodium.from_string(secret)
        
          //Encrypt the secret using LibSodium
          let encBytes = sodium.crypto_box_seal(binsec, binkey)
        
          // Convert encrypted Uint8Array to Base64
          let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
        
          console.log(output)
        });
        ```
        
        #### Example encrypting a secret using Python
        
        Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        
        ```
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
          \"\"\"Encrypt a Unicode string using the public key.\"\"\"
          public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())
          sealed_box = public.SealedBox(public_key)
          encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))
          return b64encode(encrypted).decode(\"utf-8\")
        ```
        
        #### Example encrypting a secret using C#
        
        Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        
        ```
        var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");
        var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");
        
        var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        
        Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        ```
        
        #### Example encrypting a secret using Ruby
        
        Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        
        ```ruby
        require \"rbnacl\"
        require \"base64\"
        
        key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")
        public_key = RbNaCl::PublicKey.new(key)
        
        box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        encrypted_secret = box.encrypt(\"my_secret\")
        
        # Print the base64 encoded secret
        puts Base64.strict_encode64(encrypted_secret)
        ```
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotCreateOrUpdateRepoSecretRequest, base_url, '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotCreateOrUpdateRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 204:
            pass

        return res

    def dependabot_delete_org_secret(self, request: operations.DependabotDeleteOrgSecretRequest) -> operations.DependabotDeleteOrgSecretResponse:
        r"""Delete an organization secret
        Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#delete-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotDeleteOrgSecretRequest, base_url, '/orgs/{org}/dependabot/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotDeleteOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dependabot_delete_repo_secret(self, request: operations.DependabotDeleteRepoSecretRequest) -> operations.DependabotDeleteRepoSecretResponse:
        r"""Delete a repository secret
        Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#delete-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotDeleteRepoSecretRequest, base_url, '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotDeleteRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dependabot_get_org_public_key(self, request: operations.DependabotGetOrgPublicKeyRequest) -> operations.DependabotGetOrgPublicKeyResponse:
        r"""Get an organization public key
        Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#get-an-organization-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotGetOrgPublicKeyRequest, base_url, '/orgs/{org}/dependabot/secrets/public-key', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotGetOrgPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DependabotPublicKey])
                res.dependabot_public_key = out

        return res

    def dependabot_get_org_secret(self, request: operations.DependabotGetOrgSecretRequest) -> operations.DependabotGetOrgSecretResponse:
        r"""Get an organization secret
        Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#get-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotGetOrgSecretRequest, base_url, '/orgs/{org}/dependabot/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotGetOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrganizationDependabotSecret])
                res.organization_dependabot_secret = out

        return res

    def dependabot_get_repo_public_key(self, request: operations.DependabotGetRepoPublicKeyRequest) -> operations.DependabotGetRepoPublicKeyResponse:
        r"""Get a repository public key
        Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#get-a-repository-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotGetRepoPublicKeyRequest, base_url, '/repos/{owner}/{repo}/dependabot/secrets/public-key', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotGetRepoPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DependabotPublicKey])
                res.dependabot_public_key = out

        return res

    def dependabot_get_repo_secret(self, request: operations.DependabotGetRepoSecretRequest) -> operations.DependabotGetRepoSecretResponse:
        r"""Get a repository secret
        Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#get-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotGetRepoSecretRequest, base_url, '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotGetRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DependabotSecret])
                res.dependabot_secret = out

        return res

    def dependabot_list_org_secrets(self, request: operations.DependabotListOrgSecretsRequest) -> operations.DependabotListOrgSecretsResponse:
        r"""List organization secrets
        Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#list-organization-secrets - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotListOrgSecretsRequest, base_url, '/orgs/{org}/dependabot/secrets', request)
        
        query_params = utils.get_query_params(operations.DependabotListOrgSecretsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotListOrgSecretsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DependabotListOrgSecrets200ApplicationJSON])
                res.dependabot_list_org_secrets_200_application_json_object = out

        return res

    def dependabot_list_repo_secrets(self, request: operations.DependabotListRepoSecretsRequest) -> operations.DependabotListRepoSecretsResponse:
        r"""List repository secrets
        Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#list-repository-secrets - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotListRepoSecretsRequest, base_url, '/repos/{owner}/{repo}/dependabot/secrets', request)
        
        query_params = utils.get_query_params(operations.DependabotListRepoSecretsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotListRepoSecretsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DependabotListRepoSecrets200ApplicationJSON])
                res.dependabot_list_repo_secrets_200_application_json_object = out

        return res

    def dependabot_list_selected_repos_for_org_secret(self, request: operations.DependabotListSelectedReposForOrgSecretRequest) -> operations.DependabotListSelectedReposForOrgSecretResponse:
        r"""List selected repositories for an organization secret
        Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotListSelectedReposForOrgSecretRequest, base_url, '/orgs/{org}/dependabot/secrets/{secret_name}/repositories', request)
        
        query_params = utils.get_query_params(operations.DependabotListSelectedReposForOrgSecretRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotListSelectedReposForOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DependabotListSelectedReposForOrgSecret200ApplicationJSON])
                res.dependabot_list_selected_repos_for_org_secret_200_application_json_object = out

        return res

    def dependabot_remove_selected_repo_from_org_secret(self, request: operations.DependabotRemoveSelectedRepoFromOrgSecretRequest) -> operations.DependabotRemoveSelectedRepoFromOrgSecretResponse:
        r"""Remove selected repository from an organization secret
        Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotRemoveSelectedRepoFromOrgSecretRequest, base_url, '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotRemoveSelectedRepoFromOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dependabot_set_selected_repos_for_org_secret(self, request: operations.DependabotSetSelectedReposForOrgSecretRequest) -> operations.DependabotSetSelectedReposForOrgSecretResponse:
        r"""Set selected repositories for an organization secret
        Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependabotSetSelectedReposForOrgSecretRequest, base_url, '/orgs/{org}/dependabot/secrets/{secret_name}/repositories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependabotSetSelectedReposForOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    