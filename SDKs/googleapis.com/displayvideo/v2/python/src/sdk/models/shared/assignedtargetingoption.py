"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import agerangeassignedtargetingoptiondetails as shared_agerangeassignedtargetingoptiondetails
from ..shared import appassignedtargetingoptiondetails as shared_appassignedtargetingoptiondetails
from ..shared import appcategoryassignedtargetingoptiondetails as shared_appcategoryassignedtargetingoptiondetails
from ..shared import audiencegroupassignedtargetingoptiondetails as shared_audiencegroupassignedtargetingoptiondetails
from ..shared import audiocontenttypeassignedtargetingoptiondetails as shared_audiocontenttypeassignedtargetingoptiondetails
from ..shared import authorizedsellerstatusassignedtargetingoptiondetails as shared_authorizedsellerstatusassignedtargetingoptiondetails
from ..shared import browserassignedtargetingoptiondetails as shared_browserassignedtargetingoptiondetails
from ..shared import businesschainassignedtargetingoptiondetails as shared_businesschainassignedtargetingoptiondetails
from ..shared import carrierandispassignedtargetingoptiondetails as shared_carrierandispassignedtargetingoptiondetails
from ..shared import categoryassignedtargetingoptiondetails as shared_categoryassignedtargetingoptiondetails
from ..shared import channelassignedtargetingoptiondetails as shared_channelassignedtargetingoptiondetails
from ..shared import contentdurationassignedtargetingoptiondetails as shared_contentdurationassignedtargetingoptiondetails
from ..shared import contentgenreassignedtargetingoptiondetails as shared_contentgenreassignedtargetingoptiondetails
from ..shared import contentinstreampositionassignedtargetingoptiondetails as shared_contentinstreampositionassignedtargetingoptiondetails
from ..shared import contentoutstreampositionassignedtargetingoptiondetails as shared_contentoutstreampositionassignedtargetingoptiondetails
from ..shared import contentstreamtypeassignedtargetingoptiondetails as shared_contentstreamtypeassignedtargetingoptiondetails
from ..shared import dayandtimeassignedtargetingoptiondetails as shared_dayandtimeassignedtargetingoptiondetails
from ..shared import devicemakemodelassignedtargetingoptiondetails as shared_devicemakemodelassignedtargetingoptiondetails
from ..shared import devicetypeassignedtargetingoptiondetails as shared_devicetypeassignedtargetingoptiondetails
from ..shared import digitalcontentlabelassignedtargetingoptiondetails as shared_digitalcontentlabelassignedtargetingoptiondetails
from ..shared import environmentassignedtargetingoptiondetails as shared_environmentassignedtargetingoptiondetails
from ..shared import exchangeassignedtargetingoptiondetails as shared_exchangeassignedtargetingoptiondetails
from ..shared import genderassignedtargetingoptiondetails as shared_genderassignedtargetingoptiondetails
from ..shared import georegionassignedtargetingoptiondetails as shared_georegionassignedtargetingoptiondetails
from ..shared import householdincomeassignedtargetingoptiondetails as shared_householdincomeassignedtargetingoptiondetails
from ..shared import inventorysourceassignedtargetingoptiondetails as shared_inventorysourceassignedtargetingoptiondetails
from ..shared import inventorysourcegroupassignedtargetingoptiondetails as shared_inventorysourcegroupassignedtargetingoptiondetails
from ..shared import keywordassignedtargetingoptiondetails as shared_keywordassignedtargetingoptiondetails
from ..shared import languageassignedtargetingoptiondetails as shared_languageassignedtargetingoptiondetails
from ..shared import nativecontentpositionassignedtargetingoptiondetails as shared_nativecontentpositionassignedtargetingoptiondetails
from ..shared import negativekeywordlistassignedtargetingoptiondetails as shared_negativekeywordlistassignedtargetingoptiondetails
from ..shared import omidassignedtargetingoptiondetails as shared_omidassignedtargetingoptiondetails
from ..shared import onscreenpositionassignedtargetingoptiondetails as shared_onscreenpositionassignedtargetingoptiondetails
from ..shared import operatingsystemassignedtargetingoptiondetails as shared_operatingsystemassignedtargetingoptiondetails
from ..shared import parentalstatusassignedtargetingoptiondetails as shared_parentalstatusassignedtargetingoptiondetails
from ..shared import poiassignedtargetingoptiondetails as shared_poiassignedtargetingoptiondetails
from ..shared import proximitylocationlistassignedtargetingoptiondetails as shared_proximitylocationlistassignedtargetingoptiondetails
from ..shared import regionallocationlistassignedtargetingoptiondetails as shared_regionallocationlistassignedtargetingoptiondetails
from ..shared import sensitivecategoryassignedtargetingoptiondetails as shared_sensitivecategoryassignedtargetingoptiondetails
from ..shared import sessionpositionassignedtargetingoptiondetails as shared_sessionpositionassignedtargetingoptiondetails
from ..shared import subexchangeassignedtargetingoptiondetails as shared_subexchangeassignedtargetingoptiondetails
from ..shared import thirdpartyverifierassignedtargetingoptiondetails as shared_thirdpartyverifierassignedtargetingoptiondetails
from ..shared import urlassignedtargetingoptiondetails as shared_urlassignedtargetingoptiondetails
from ..shared import userrewardedcontentassignedtargetingoptiondetails as shared_userrewardedcontentassignedtargetingoptiondetails
from ..shared import videoplayersizeassignedtargetingoptiondetails as shared_videoplayersizeassignedtargetingoptiondetails
from ..shared import viewabilityassignedtargetingoptiondetails as shared_viewabilityassignedtargetingoptiondetails
from ..shared import youtubechannelassignedtargetingoptiondetails as shared_youtubechannelassignedtargetingoptiondetails
from ..shared import youtubevideoassignedtargetingoptiondetails as shared_youtubevideoassignedtargetingoptiondetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AssignedTargetingOptionInheritanceEnum(str, Enum):
    r"""Output only. The inheritance status of the assigned targeting option."""
    INHERITANCE_UNSPECIFIED = 'INHERITANCE_UNSPECIFIED'
    NOT_INHERITED = 'NOT_INHERITED'
    INHERITED_FROM_PARTNER = 'INHERITED_FROM_PARTNER'
    INHERITED_FROM_ADVERTISER = 'INHERITED_FROM_ADVERTISER'

class AssignedTargetingOptionTargetingTypeEnum(str, Enum):
    r"""Output only. Identifies the type of this assigned targeting option."""
    TARGETING_TYPE_UNSPECIFIED = 'TARGETING_TYPE_UNSPECIFIED'
    TARGETING_TYPE_CHANNEL = 'TARGETING_TYPE_CHANNEL'
    TARGETING_TYPE_APP_CATEGORY = 'TARGETING_TYPE_APP_CATEGORY'
    TARGETING_TYPE_APP = 'TARGETING_TYPE_APP'
    TARGETING_TYPE_URL = 'TARGETING_TYPE_URL'
    TARGETING_TYPE_DAY_AND_TIME = 'TARGETING_TYPE_DAY_AND_TIME'
    TARGETING_TYPE_AGE_RANGE = 'TARGETING_TYPE_AGE_RANGE'
    TARGETING_TYPE_REGIONAL_LOCATION_LIST = 'TARGETING_TYPE_REGIONAL_LOCATION_LIST'
    TARGETING_TYPE_PROXIMITY_LOCATION_LIST = 'TARGETING_TYPE_PROXIMITY_LOCATION_LIST'
    TARGETING_TYPE_GENDER = 'TARGETING_TYPE_GENDER'
    TARGETING_TYPE_VIDEO_PLAYER_SIZE = 'TARGETING_TYPE_VIDEO_PLAYER_SIZE'
    TARGETING_TYPE_USER_REWARDED_CONTENT = 'TARGETING_TYPE_USER_REWARDED_CONTENT'
    TARGETING_TYPE_PARENTAL_STATUS = 'TARGETING_TYPE_PARENTAL_STATUS'
    TARGETING_TYPE_CONTENT_INSTREAM_POSITION = 'TARGETING_TYPE_CONTENT_INSTREAM_POSITION'
    TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION = 'TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION'
    TARGETING_TYPE_DEVICE_TYPE = 'TARGETING_TYPE_DEVICE_TYPE'
    TARGETING_TYPE_AUDIENCE_GROUP = 'TARGETING_TYPE_AUDIENCE_GROUP'
    TARGETING_TYPE_BROWSER = 'TARGETING_TYPE_BROWSER'
    TARGETING_TYPE_HOUSEHOLD_INCOME = 'TARGETING_TYPE_HOUSEHOLD_INCOME'
    TARGETING_TYPE_ON_SCREEN_POSITION = 'TARGETING_TYPE_ON_SCREEN_POSITION'
    TARGETING_TYPE_THIRD_PARTY_VERIFIER = 'TARGETING_TYPE_THIRD_PARTY_VERIFIER'
    TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION = 'TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION'
    TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION = 'TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION'
    TARGETING_TYPE_ENVIRONMENT = 'TARGETING_TYPE_ENVIRONMENT'
    TARGETING_TYPE_CARRIER_AND_ISP = 'TARGETING_TYPE_CARRIER_AND_ISP'
    TARGETING_TYPE_OPERATING_SYSTEM = 'TARGETING_TYPE_OPERATING_SYSTEM'
    TARGETING_TYPE_DEVICE_MAKE_MODEL = 'TARGETING_TYPE_DEVICE_MAKE_MODEL'
    TARGETING_TYPE_KEYWORD = 'TARGETING_TYPE_KEYWORD'
    TARGETING_TYPE_NEGATIVE_KEYWORD_LIST = 'TARGETING_TYPE_NEGATIVE_KEYWORD_LIST'
    TARGETING_TYPE_VIEWABILITY = 'TARGETING_TYPE_VIEWABILITY'
    TARGETING_TYPE_CATEGORY = 'TARGETING_TYPE_CATEGORY'
    TARGETING_TYPE_INVENTORY_SOURCE = 'TARGETING_TYPE_INVENTORY_SOURCE'
    TARGETING_TYPE_LANGUAGE = 'TARGETING_TYPE_LANGUAGE'
    TARGETING_TYPE_AUTHORIZED_SELLER_STATUS = 'TARGETING_TYPE_AUTHORIZED_SELLER_STATUS'
    TARGETING_TYPE_GEO_REGION = 'TARGETING_TYPE_GEO_REGION'
    TARGETING_TYPE_INVENTORY_SOURCE_GROUP = 'TARGETING_TYPE_INVENTORY_SOURCE_GROUP'
    TARGETING_TYPE_EXCHANGE = 'TARGETING_TYPE_EXCHANGE'
    TARGETING_TYPE_SUB_EXCHANGE = 'TARGETING_TYPE_SUB_EXCHANGE'
    TARGETING_TYPE_POI = 'TARGETING_TYPE_POI'
    TARGETING_TYPE_BUSINESS_CHAIN = 'TARGETING_TYPE_BUSINESS_CHAIN'
    TARGETING_TYPE_CONTENT_DURATION = 'TARGETING_TYPE_CONTENT_DURATION'
    TARGETING_TYPE_CONTENT_STREAM_TYPE = 'TARGETING_TYPE_CONTENT_STREAM_TYPE'
    TARGETING_TYPE_NATIVE_CONTENT_POSITION = 'TARGETING_TYPE_NATIVE_CONTENT_POSITION'
    TARGETING_TYPE_OMID = 'TARGETING_TYPE_OMID'
    TARGETING_TYPE_AUDIO_CONTENT_TYPE = 'TARGETING_TYPE_AUDIO_CONTENT_TYPE'
    TARGETING_TYPE_CONTENT_GENRE = 'TARGETING_TYPE_CONTENT_GENRE'
    TARGETING_TYPE_YOUTUBE_VIDEO = 'TARGETING_TYPE_YOUTUBE_VIDEO'
    TARGETING_TYPE_YOUTUBE_CHANNEL = 'TARGETING_TYPE_YOUTUBE_CHANNEL'
    TARGETING_TYPE_SESSION_POSITION = 'TARGETING_TYPE_SESSION_POSITION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignedTargetingOption:
    r"""A single assigned targeting option, which defines the state of a targeting option for an entity with targeting settings."""
    
    age_range_details: Optional[shared_agerangeassignedtargetingoptiondetails.AgeRangeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageRangeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable age range. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AGE_RANGE`."""  
    app_category_details: Optional[shared_appcategoryassignedtargetingoptiondetails.AppCategoryAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appCategoryDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned app category targeting option. This will be populated in the app_category_details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP_CATEGORY`."""  
    app_details: Optional[shared_appassignedtargetingoptiondetails.AppAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned app targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP`."""  
    assigned_targeting_option_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedTargetingOptionId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the assigned targeting option. The ID is only unique within a given resource and targeting type. It may be reused in other contexts."""  
    assigned_targeting_option_id_alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedTargetingOptionIdAlias'), 'exclude': lambda f: f is None }})
    r"""Output only. An alias for the assigned_targeting_option_id. This value can be used in place of `assignedTargetingOptionId` when retrieving or deleting existing targeting. This field will only be supported for all assigned targeting options of the following targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY` This field is also supported for line item assigned targeting options of the following targeting types: * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`"""  
    audience_group_details: Optional[shared_audiencegroupassignedtargetingoptiondetails.AudienceGroupAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceGroupDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned audience group targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUDIENCE_GROUP`. The relation between each group is UNION, except for excluded_first_and_third_party_audience_group and excluded_google_audience_group, of which COMPLEMENT is used as an INTERSECTION with other groups."""  
    audio_content_type_details: Optional[shared_audiocontenttypeassignedtargetingoptiondetails.AudioContentTypeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioContentTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for audio content type assigned targeting option. This will be populated in the audio_content_type_details field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`. Explicitly targeting all options is not supported. Remove all audio content type targeting options to achieve this effect."""  
    authorized_seller_status_details: Optional[shared_authorizedsellerstatusassignedtargetingoptiondetails.AuthorizedSellerStatusAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizedSellerStatusDetails'), 'exclude': lambda f: f is None }})
    r"""Represents an assigned authorized seller status. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`."""  
    browser_details: Optional[shared_browserassignedtargetingoptiondetails.BrowserAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned browser targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_BROWSER`."""  
    business_chain_details: Optional[shared_businesschainassignedtargetingoptiondetails.BusinessChainAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessChainDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned Business chain targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`."""  
    carrier_and_isp_details: Optional[shared_carrierandispassignedtargetingoptiondetails.CarrierAndIspAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrierAndIspDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned carrier and ISP targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`."""  
    category_details: Optional[shared_categoryassignedtargetingoptiondetails.CategoryAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned category targeting option details. This will be populated in the category_details field when targeting_type is `TARGETING_TYPE_CATEGORY`."""  
    channel_details: Optional[shared_channelassignedtargetingoptiondetails.ChannelAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned channel targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_CHANNEL`."""  
    content_duration_details: Optional[shared_contentdurationassignedtargetingoptiondetails.ContentDurationAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentDurationDetails'), 'exclude': lambda f: f is None }})
    r"""Details for content duration assigned targeting option. This will be populated in the content_duration_details field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`. Explicitly targeting all options is not supported. Remove all content duration targeting options to achieve this effect."""  
    content_genre_details: Optional[shared_contentgenreassignedtargetingoptiondetails.ContentGenreAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentGenreDetails'), 'exclude': lambda f: f is None }})
    r"""Details for content genre assigned targeting option. This will be populated in the content_genre_details field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`. Explicitly targeting all options is not supported. Remove all content genre targeting options to achieve this effect."""  
    content_instream_position_details: Optional[shared_contentinstreampositionassignedtargetingoptiondetails.ContentInstreamPositionAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentInstreamPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned content instream position targeting option details. This will be populated in the content_instream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`."""  
    content_outstream_position_details: Optional[shared_contentoutstreampositionassignedtargetingoptiondetails.ContentOutstreamPositionAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentOutstreamPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned content outstream position targeting option details. This will be populated in the content_outstream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`."""  
    content_stream_type_details: Optional[shared_contentstreamtypeassignedtargetingoptiondetails.ContentStreamTypeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentStreamTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for content stream type assigned targeting option. This will be populated in the content_stream_type_details field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`. Explicitly targeting all options is not supported. Remove all content stream type targeting options to achieve this effect."""  
    day_and_time_details: Optional[shared_dayandtimeassignedtargetingoptiondetails.DayAndTimeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayAndTimeDetails'), 'exclude': lambda f: f is None }})
    r"""Representation of a segment of time defined on a specific day of the week and with a start and end time. The time represented by `start_hour` must be before the time represented by `end_hour`."""  
    device_make_model_details: Optional[shared_devicemakemodelassignedtargetingoptiondetails.DeviceMakeModelAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceMakeModelDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned device make and model targeting option details. This will be populated in the device_make_model_details field when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`."""  
    device_type_details: Optional[shared_devicetypeassignedtargetingoptiondetails.DeviceTypeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for device type. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_TYPE`."""  
    digital_content_label_exclusion_details: Optional[shared_digitalcontentlabelassignedtargetingoptiondetails.DigitalContentLabelAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digitalContentLabelExclusionDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for digital content label. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`."""  
    environment_details: Optional[shared_environmentassignedtargetingoptiondetails.EnvironmentAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned environment targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_ENVIRONMENT`."""  
    exchange_details: Optional[shared_exchangeassignedtargetingoptiondetails.ExchangeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchangeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned exchange targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_EXCHANGE`."""  
    gender_details: Optional[shared_genderassignedtargetingoptiondetails.GenderAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genderDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned gender targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GENDER`."""  
    geo_region_details: Optional[shared_georegionassignedtargetingoptiondetails.GeoRegionAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoRegionDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned geographic region targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GEO_REGION`."""  
    household_income_details: Optional[shared_householdincomeassignedtargetingoptiondetails.HouseholdIncomeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('householdIncomeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned household income targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_HOUSEHOLD_INCOME`."""  
    inheritance: Optional[AssignedTargetingOptionInheritanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritance'), 'exclude': lambda f: f is None }})
    r"""Output only. The inheritance status of the assigned targeting option."""  
    inventory_source_details: Optional[shared_inventorysourceassignedtargetingoptiondetails.InventorySourceAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for inventory source. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE`."""  
    inventory_source_group_details: Optional[shared_inventorysourcegroupassignedtargetingoptiondetails.InventorySourceGroupAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceGroupDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for inventory source group. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE_GROUP`."""  
    keyword_details: Optional[shared_keywordassignedtargetingoptiondetails.KeywordAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywordDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned keyword targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_KEYWORD`."""  
    language_details: Optional[shared_languageassignedtargetingoptiondetails.LanguageAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned language targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_LANGUAGE`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name for this assigned targeting option."""  
    native_content_position_details: Optional[shared_nativecontentpositionassignedtargetingoptiondetails.NativeContentPositionAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nativeContentPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Details for native content position assigned targeting option. This will be populated in the native_content_position_details field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`. Explicitly targeting all options is not supported. Remove all native content position targeting options to achieve this effect."""  
    negative_keyword_list_details: Optional[shared_negativekeywordlistassignedtargetingoptiondetails.NegativeKeywordListAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negativeKeywordListDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for negative keyword list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST`."""  
    omid_details: Optional[shared_omidassignedtargetingoptiondetails.OmidAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('omidDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable Open Measurement enabled inventory type. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_OMID`."""  
    on_screen_position_details: Optional[shared_onscreenpositionassignedtargetingoptiondetails.OnScreenPositionAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onScreenPositionDetails'), 'exclude': lambda f: f is None }})
    r"""On screen position targeting option details. This will be populated in the on_screen_position_details field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`."""  
    operating_system_details: Optional[shared_operatingsystemassignedtargetingoptiondetails.OperatingSystemAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operatingSystemDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned operating system targeting option details. This will be populated in the operating_system_details field when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`."""  
    parental_status_details: Optional[shared_parentalstatusassignedtargetingoptiondetails.ParentalStatusAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentalStatusDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned parental status targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PARENTAL_STATUS`."""  
    poi_details: Optional[shared_poiassignedtargetingoptiondetails.PoiAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poiDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned POI targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_POI`."""  
    proximity_location_list_details: Optional[shared_proximitylocationlistassignedtargetingoptiondetails.ProximityLocationListAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proximityLocationListDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for proximity location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PROXIMITY_LOCATION_LIST`."""  
    regional_location_list_details: Optional[shared_regionallocationlistassignedtargetingoptiondetails.RegionalLocationListAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionalLocationListDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for regional location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_REGIONAL_LOCATION_LIST`."""  
    sensitive_category_exclusion_details: Optional[shared_sensitivecategoryassignedtargetingoptiondetails.SensitiveCategoryAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensitiveCategoryExclusionDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for sensitive category. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`."""  
    session_position_details: Optional[shared_sessionpositionassignedtargetingoptiondetails.SessionPositionAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Details for session position assigned targeting option. This will be populated in the session_position_details field when targeting_type is `TARGETING_TYPE_SESSION_POSITION`."""  
    sub_exchange_details: Optional[shared_subexchangeassignedtargetingoptiondetails.SubExchangeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subExchangeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned sub-exchange targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_SUB_EXCHANGE`."""  
    targeting_type: Optional[AssignedTargetingOptionTargetingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingType'), 'exclude': lambda f: f is None }})
    r"""Output only. Identifies the type of this assigned targeting option."""  
    third_party_verifier_details: Optional[shared_thirdpartyverifierassignedtargetingoptiondetails.ThirdPartyVerifierAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thirdPartyVerifierDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned third party verifier targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_THIRD_PARTY_VERIFIER`."""  
    url_details: Optional[shared_urlassignedtargetingoptiondetails.URLAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned URL targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_URL`."""  
    user_rewarded_content_details: Optional[shared_userrewardedcontentassignedtargetingoptiondetails.UserRewardedContentAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRewardedContentDetails'), 'exclude': lambda f: f is None }})
    r"""User rewarded content targeting option details. This will be populated in the user_rewarded_content_details field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`."""  
    video_player_size_details: Optional[shared_videoplayersizeassignedtargetingoptiondetails.VideoPlayerSizeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoPlayerSizeDetails'), 'exclude': lambda f: f is None }})
    r"""Video player size targeting option details. This will be populated in the video_player_size_details field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`. Explicitly targeting all options is not supported. Remove all video player size targeting options to achieve this effect."""  
    viewability_details: Optional[shared_viewabilityassignedtargetingoptiondetails.ViewabilityAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewabilityDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned viewability targeting option details. This will be populated in the viewability_details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_VIEWABILITY`."""  
    youtube_channel_details: Optional[shared_youtubechannelassignedtargetingoptiondetails.YoutubeChannelAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('youtubeChannelDetails'), 'exclude': lambda f: f is None }})
    r"""Details for YouTube channel assigned targeting option. This will be populated in the youtube_channel_details field when targeting_type is `TARGETING_TYPE_YOUTUBE_CHANNEL`."""  
    youtube_video_details: Optional[shared_youtubevideoassignedtargetingoptiondetails.YoutubeVideoAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('youtubeVideoDetails'), 'exclude': lambda f: f is None }})
    r"""Details for YouTube video assigned targeting option. This will be populated in the youtube_video_details field when targeting_type is `TARGETING_TYPE_YOUTUBE_VIDEO`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignedTargetingOptionInput:
    r"""A single assigned targeting option, which defines the state of a targeting option for an entity with targeting settings."""
    
    age_range_details: Optional[shared_agerangeassignedtargetingoptiondetails.AgeRangeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageRangeDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable age range. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AGE_RANGE`."""  
    app_category_details: Optional[shared_appcategoryassignedtargetingoptiondetails.AppCategoryAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appCategoryDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned app category targeting option. This will be populated in the app_category_details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP_CATEGORY`."""  
    app_details: Optional[shared_appassignedtargetingoptiondetails.AppAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned app targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP`."""  
    audience_group_details: Optional[shared_audiencegroupassignedtargetingoptiondetails.AudienceGroupAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceGroupDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned audience group targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUDIENCE_GROUP`. The relation between each group is UNION, except for excluded_first_and_third_party_audience_group and excluded_google_audience_group, of which COMPLEMENT is used as an INTERSECTION with other groups."""  
    audio_content_type_details: Optional[shared_audiocontenttypeassignedtargetingoptiondetails.AudioContentTypeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioContentTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for audio content type assigned targeting option. This will be populated in the audio_content_type_details field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`. Explicitly targeting all options is not supported. Remove all audio content type targeting options to achieve this effect."""  
    authorized_seller_status_details: Optional[shared_authorizedsellerstatusassignedtargetingoptiondetails.AuthorizedSellerStatusAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizedSellerStatusDetails'), 'exclude': lambda f: f is None }})
    r"""Represents an assigned authorized seller status. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`."""  
    browser_details: Optional[shared_browserassignedtargetingoptiondetails.BrowserAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned browser targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_BROWSER`."""  
    business_chain_details: Optional[shared_businesschainassignedtargetingoptiondetails.BusinessChainAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessChainDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned Business chain targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`."""  
    carrier_and_isp_details: Optional[shared_carrierandispassignedtargetingoptiondetails.CarrierAndIspAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrierAndIspDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned carrier and ISP targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`."""  
    category_details: Optional[shared_categoryassignedtargetingoptiondetails.CategoryAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned category targeting option details. This will be populated in the category_details field when targeting_type is `TARGETING_TYPE_CATEGORY`."""  
    channel_details: Optional[shared_channelassignedtargetingoptiondetails.ChannelAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned channel targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_CHANNEL`."""  
    content_duration_details: Optional[shared_contentdurationassignedtargetingoptiondetails.ContentDurationAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentDurationDetails'), 'exclude': lambda f: f is None }})
    r"""Details for content duration assigned targeting option. This will be populated in the content_duration_details field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`. Explicitly targeting all options is not supported. Remove all content duration targeting options to achieve this effect."""  
    content_genre_details: Optional[shared_contentgenreassignedtargetingoptiondetails.ContentGenreAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentGenreDetails'), 'exclude': lambda f: f is None }})
    r"""Details for content genre assigned targeting option. This will be populated in the content_genre_details field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`. Explicitly targeting all options is not supported. Remove all content genre targeting options to achieve this effect."""  
    content_instream_position_details: Optional[shared_contentinstreampositionassignedtargetingoptiondetails.ContentInstreamPositionAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentInstreamPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned content instream position targeting option details. This will be populated in the content_instream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`."""  
    content_outstream_position_details: Optional[shared_contentoutstreampositionassignedtargetingoptiondetails.ContentOutstreamPositionAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentOutstreamPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned content outstream position targeting option details. This will be populated in the content_outstream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`."""  
    content_stream_type_details: Optional[shared_contentstreamtypeassignedtargetingoptiondetails.ContentStreamTypeAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentStreamTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for content stream type assigned targeting option. This will be populated in the content_stream_type_details field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`. Explicitly targeting all options is not supported. Remove all content stream type targeting options to achieve this effect."""  
    day_and_time_details: Optional[shared_dayandtimeassignedtargetingoptiondetails.DayAndTimeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayAndTimeDetails'), 'exclude': lambda f: f is None }})
    r"""Representation of a segment of time defined on a specific day of the week and with a start and end time. The time represented by `start_hour` must be before the time represented by `end_hour`."""  
    device_make_model_details: Optional[shared_devicemakemodelassignedtargetingoptiondetails.DeviceMakeModelAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceMakeModelDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned device make and model targeting option details. This will be populated in the device_make_model_details field when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`."""  
    device_type_details: Optional[shared_devicetypeassignedtargetingoptiondetails.DeviceTypeAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceTypeDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for device type. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_TYPE`."""  
    digital_content_label_exclusion_details: Optional[shared_digitalcontentlabelassignedtargetingoptiondetails.DigitalContentLabelAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digitalContentLabelExclusionDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for digital content label. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`."""  
    environment_details: Optional[shared_environmentassignedtargetingoptiondetails.EnvironmentAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned environment targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_ENVIRONMENT`."""  
    exchange_details: Optional[shared_exchangeassignedtargetingoptiondetails.ExchangeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchangeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned exchange targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_EXCHANGE`."""  
    gender_details: Optional[shared_genderassignedtargetingoptiondetails.GenderAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genderDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned gender targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GENDER`."""  
    geo_region_details: Optional[shared_georegionassignedtargetingoptiondetails.GeoRegionAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoRegionDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned geographic region targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GEO_REGION`."""  
    household_income_details: Optional[shared_householdincomeassignedtargetingoptiondetails.HouseholdIncomeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('householdIncomeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned household income targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_HOUSEHOLD_INCOME`."""  
    inventory_source_details: Optional[shared_inventorysourceassignedtargetingoptiondetails.InventorySourceAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for inventory source. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE`."""  
    inventory_source_group_details: Optional[shared_inventorysourcegroupassignedtargetingoptiondetails.InventorySourceGroupAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceGroupDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for inventory source group. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE_GROUP`."""  
    keyword_details: Optional[shared_keywordassignedtargetingoptiondetails.KeywordAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywordDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned keyword targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_KEYWORD`."""  
    language_details: Optional[shared_languageassignedtargetingoptiondetails.LanguageAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned language targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_LANGUAGE`."""  
    native_content_position_details: Optional[shared_nativecontentpositionassignedtargetingoptiondetails.NativeContentPositionAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nativeContentPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Details for native content position assigned targeting option. This will be populated in the native_content_position_details field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`. Explicitly targeting all options is not supported. Remove all native content position targeting options to achieve this effect."""  
    negative_keyword_list_details: Optional[shared_negativekeywordlistassignedtargetingoptiondetails.NegativeKeywordListAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negativeKeywordListDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for negative keyword list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST`."""  
    omid_details: Optional[shared_omidassignedtargetingoptiondetails.OmidAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('omidDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a targetable Open Measurement enabled inventory type. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_OMID`."""  
    on_screen_position_details: Optional[shared_onscreenpositionassignedtargetingoptiondetails.OnScreenPositionAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onScreenPositionDetails'), 'exclude': lambda f: f is None }})
    r"""On screen position targeting option details. This will be populated in the on_screen_position_details field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`."""  
    operating_system_details: Optional[shared_operatingsystemassignedtargetingoptiondetails.OperatingSystemAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operatingSystemDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned operating system targeting option details. This will be populated in the operating_system_details field when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`."""  
    parental_status_details: Optional[shared_parentalstatusassignedtargetingoptiondetails.ParentalStatusAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentalStatusDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned parental status targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PARENTAL_STATUS`."""  
    poi_details: Optional[shared_poiassignedtargetingoptiondetails.PoiAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poiDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned POI targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_POI`."""  
    proximity_location_list_details: Optional[shared_proximitylocationlistassignedtargetingoptiondetails.ProximityLocationListAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proximityLocationListDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for proximity location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PROXIMITY_LOCATION_LIST`."""  
    regional_location_list_details: Optional[shared_regionallocationlistassignedtargetingoptiondetails.RegionalLocationListAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionalLocationListDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for regional location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_REGIONAL_LOCATION_LIST`."""  
    sensitive_category_exclusion_details: Optional[shared_sensitivecategoryassignedtargetingoptiondetails.SensitiveCategoryAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensitiveCategoryExclusionDetails'), 'exclude': lambda f: f is None }})
    r"""Targeting details for sensitive category. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`."""  
    session_position_details: Optional[shared_sessionpositionassignedtargetingoptiondetails.SessionPositionAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionPositionDetails'), 'exclude': lambda f: f is None }})
    r"""Details for session position assigned targeting option. This will be populated in the session_position_details field when targeting_type is `TARGETING_TYPE_SESSION_POSITION`."""  
    sub_exchange_details: Optional[shared_subexchangeassignedtargetingoptiondetails.SubExchangeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subExchangeDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned sub-exchange targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_SUB_EXCHANGE`."""  
    third_party_verifier_details: Optional[shared_thirdpartyverifierassignedtargetingoptiondetails.ThirdPartyVerifierAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thirdPartyVerifierDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned third party verifier targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_THIRD_PARTY_VERIFIER`."""  
    url_details: Optional[shared_urlassignedtargetingoptiondetails.URLAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlDetails'), 'exclude': lambda f: f is None }})
    r"""Details for assigned URL targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_URL`."""  
    user_rewarded_content_details: Optional[shared_userrewardedcontentassignedtargetingoptiondetails.UserRewardedContentAssignedTargetingOptionDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRewardedContentDetails'), 'exclude': lambda f: f is None }})
    r"""User rewarded content targeting option details. This will be populated in the user_rewarded_content_details field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`."""  
    video_player_size_details: Optional[shared_videoplayersizeassignedtargetingoptiondetails.VideoPlayerSizeAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoPlayerSizeDetails'), 'exclude': lambda f: f is None }})
    r"""Video player size targeting option details. This will be populated in the video_player_size_details field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`. Explicitly targeting all options is not supported. Remove all video player size targeting options to achieve this effect."""  
    viewability_details: Optional[shared_viewabilityassignedtargetingoptiondetails.ViewabilityAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewabilityDetails'), 'exclude': lambda f: f is None }})
    r"""Assigned viewability targeting option details. This will be populated in the viewability_details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_VIEWABILITY`."""  
    youtube_channel_details: Optional[shared_youtubechannelassignedtargetingoptiondetails.YoutubeChannelAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('youtubeChannelDetails'), 'exclude': lambda f: f is None }})
    r"""Details for YouTube channel assigned targeting option. This will be populated in the youtube_channel_details field when targeting_type is `TARGETING_TYPE_YOUTUBE_CHANNEL`."""  
    youtube_video_details: Optional[shared_youtubevideoassignedtargetingoptiondetails.YoutubeVideoAssignedTargetingOptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('youtubeVideoDetails'), 'exclude': lambda f: f is None }})
    r"""Details for YouTube video assigned targeting option. This will be populated in the youtube_video_details field when targeting_type is `TARGETING_TYPE_YOUTUBE_VIDEO`."""  
    