"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import optional_link as shared_optional_link
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBatchByExternalIDResponseBodyOptionalLink:
    r"""A link to a related resource, or an empty object if there is no resource to link to"""
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""The URL of the linked resource, if any"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of resource, or the type of relationship to the parent resource"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBatchByExternalIDResponseBodyLabelDownload:
    r"""Reference to the various downloadable file formats for the generated label"""
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""The URL of the linked resource, if any"""  
    pdf: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdf'), 'exclude': lambda f: f is None }})
    r"""The URL for the pdf generated label"""  
    png: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('png'), 'exclude': lambda f: f is None }})
    r"""The URL for the png generated label"""  
    zpl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zpl'), 'exclude': lambda f: f is None }})
    r"""The URL for the zpl generated label"""  
    
class GetBatchByExternalIDResponseBodyLabelFormatEnum(str, Enum):
    r"""The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
    
    |Label Format  | Supported Carriers
    |--------------|-----------------------------------
    |`pdf`         | All carriers
    |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
    |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
    """
    PDF = 'pdf'
    PNG = 'png'
    ZPL = 'zpl'

class GetBatchByExternalIDResponseBodyLabelLayoutEnum(str, Enum):
    r"""The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5\\" x 11\\") is only supported for `pdf` format."""
    FOURX6 = '4x6'
    LETTER = 'letter'

class GetBatchByExternalIDResponseBodyBatchStatusEnum(str, Enum):
    r"""The possible batch status values"""
    OPEN = 'open'
    QUEUED = 'queued'
    PROCESSING = 'processing'
    COMPLETED = 'completed'
    COMPLETED_WITH_ERRORS = 'completed_with_errors'
    ARCHIVED = 'archived'
    NOTIFYING = 'notifying'
    INVALID = 'invalid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBatchByExternalIDResponseBody:
    r"""Batches are an advanced feature of ShipEngine designed for users who need to generate hundreds or
    thousands of labels at a time.
    """
    
    batch_errors_url: GetBatchByExternalIDResponseBodyOptionalLink = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batch_errors_url') }})
    r"""Link to batch errors endpoint"""  
    batch_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batch_id') }})
    r"""A string that uniquely identifies the batch"""  
    batch_labels_url: shared_optional_link.OptionalLink = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batch_labels_url') }})
    r"""Link to batch labels query"""  
    batch_notes: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batch_notes') }})
    r"""Custom notes you can add for each created batch"""  
    batch_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batch_number') }})
    r"""The batch number."""  
    batch_shipments_url: shared_optional_link.OptionalLink = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batch_shipments_url') }})
    r"""The batch shipments endpoint"""  
    completed: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed') }})
    r"""The number of labels generated in the batch"""  
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    r"""The total of errors, warnings, and completed properties"""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the batch was created in ShipEngine"""  
    errors: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors') }})
    r"""The number of errors that occurred while generating the batch"""  
    external_batch_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_batch_id') }})
    r"""A string that uniquely identifies the external batch"""  
    form_download: GetBatchByExternalIDResponseBodyOptionalLink = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_download') }})
    r"""The form download for any customs that are needed"""  
    forms: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forms') }})
    r"""The number of forms for customs that are available for download"""  
    label_download: GetBatchByExternalIDResponseBodyLabelDownload = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_download') }})
    r"""The label download for the batch"""  
    label_format: GetBatchByExternalIDResponseBodyLabelFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_format') }})  
    label_layout: GetBatchByExternalIDResponseBodyLabelLayoutEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_layout') }})
    r"""label layout"""  
    processed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the batch was processed in ShipEngine"""  
    status: GetBatchByExternalIDResponseBodyBatchStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    warnings: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnings') }})
    r"""The number of warnings that occurred while generating the batch"""  
    