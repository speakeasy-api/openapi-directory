"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://trunking.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_credential_list(self, request: operations.CreateCredentialListRequest, security: operations.CreateCredentialListSecurity, server_url: Optional[str] = None) -> operations.CreateCredentialListResponse:
        base_url = operations.CREATE_CREDENTIAL_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateCredentialListRequest, base_url, '/v1/Trunks/{TrunkSid}/CredentialLists', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCredentialListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkCredentialList])
                res.trunking_v1_trunk_credential_list = out

        return res

    def create_ip_access_control_list(self, request: operations.CreateIPAccessControlListRequest, security: operations.CreateIPAccessControlListSecurity, server_url: Optional[str] = None) -> operations.CreateIPAccessControlListResponse:
        r"""Associate an IP Access Control List with a Trunk"""
        base_url = operations.CREATE_IP_ACCESS_CONTROL_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateIPAccessControlListRequest, base_url, '/v1/Trunks/{TrunkSid}/IpAccessControlLists', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateIPAccessControlListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkIPAccessControlList])
                res.trunking_v1_trunk_ip_access_control_list = out

        return res

    def create_origination_url(self, request: operations.CreateOriginationURLRequest, security: operations.CreateOriginationURLSecurity, server_url: Optional[str] = None) -> operations.CreateOriginationURLResponse:
        base_url = operations.CREATE_ORIGINATION_URL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateOriginationURLRequest, base_url, '/v1/Trunks/{TrunkSid}/OriginationUrls', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOriginationURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkOriginationURL])
                res.trunking_v1_trunk_origination_url = out

        return res

    def create_phone_number(self, request: operations.CreatePhoneNumberRequest, security: operations.CreatePhoneNumberSecurity, server_url: Optional[str] = None) -> operations.CreatePhoneNumberResponse:
        base_url = operations.CREATE_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreatePhoneNumberRequest, base_url, '/v1/Trunks/{TrunkSid}/PhoneNumbers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkPhoneNumber])
                res.trunking_v1_trunk_phone_number = out

        return res

    def create_trunk(self, request: operations.CreateTrunkCreateTrunkRequest, security: operations.CreateTrunkSecurity, server_url: Optional[str] = None) -> operations.CreateTrunkResponse:
        base_url = operations.CREATE_TRUNK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Trunks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTrunkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1Trunk])
                res.trunking_v1_trunk = out

        return res

    def delete_credential_list(self, request: operations.DeleteCredentialListRequest, security: operations.DeleteCredentialListSecurity, server_url: Optional[str] = None) -> operations.DeleteCredentialListResponse:
        base_url = operations.DELETE_CREDENTIAL_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteCredentialListRequest, base_url, '/v1/Trunks/{TrunkSid}/CredentialLists/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCredentialListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_ip_access_control_list(self, request: operations.DeleteIPAccessControlListRequest, security: operations.DeleteIPAccessControlListSecurity, server_url: Optional[str] = None) -> operations.DeleteIPAccessControlListResponse:
        r"""Remove an associated IP Access Control List from a Trunk"""
        base_url = operations.DELETE_IP_ACCESS_CONTROL_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteIPAccessControlListRequest, base_url, '/v1/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteIPAccessControlListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_origination_url(self, request: operations.DeleteOriginationURLRequest, security: operations.DeleteOriginationURLSecurity, server_url: Optional[str] = None) -> operations.DeleteOriginationURLResponse:
        base_url = operations.DELETE_ORIGINATION_URL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteOriginationURLRequest, base_url, '/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOriginationURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_phone_number(self, request: operations.DeletePhoneNumberRequest, security: operations.DeletePhoneNumberSecurity, server_url: Optional[str] = None) -> operations.DeletePhoneNumberResponse:
        base_url = operations.DELETE_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeletePhoneNumberRequest, base_url, '/v1/Trunks/{TrunkSid}/PhoneNumbers/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_trunk(self, request: operations.DeleteTrunkRequest, security: operations.DeleteTrunkSecurity, server_url: Optional[str] = None) -> operations.DeleteTrunkResponse:
        base_url = operations.DELETE_TRUNK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteTrunkRequest, base_url, '/v1/Trunks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTrunkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_credential_list(self, request: operations.FetchCredentialListRequest, security: operations.FetchCredentialListSecurity, server_url: Optional[str] = None) -> operations.FetchCredentialListResponse:
        base_url = operations.FETCH_CREDENTIAL_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCredentialListRequest, base_url, '/v1/Trunks/{TrunkSid}/CredentialLists/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCredentialListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkCredentialList])
                res.trunking_v1_trunk_credential_list = out

        return res

    def fetch_ip_access_control_list(self, request: operations.FetchIPAccessControlListRequest, security: operations.FetchIPAccessControlListSecurity, server_url: Optional[str] = None) -> operations.FetchIPAccessControlListResponse:
        base_url = operations.FETCH_IP_ACCESS_CONTROL_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchIPAccessControlListRequest, base_url, '/v1/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchIPAccessControlListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkIPAccessControlList])
                res.trunking_v1_trunk_ip_access_control_list = out

        return res

    def fetch_origination_url(self, request: operations.FetchOriginationURLRequest, security: operations.FetchOriginationURLSecurity, server_url: Optional[str] = None) -> operations.FetchOriginationURLResponse:
        base_url = operations.FETCH_ORIGINATION_URL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchOriginationURLRequest, base_url, '/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchOriginationURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkOriginationURL])
                res.trunking_v1_trunk_origination_url = out

        return res

    def fetch_phone_number(self, request: operations.FetchPhoneNumberRequest, security: operations.FetchPhoneNumberSecurity, server_url: Optional[str] = None) -> operations.FetchPhoneNumberResponse:
        base_url = operations.FETCH_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchPhoneNumberRequest, base_url, '/v1/Trunks/{TrunkSid}/PhoneNumbers/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkPhoneNumber])
                res.trunking_v1_trunk_phone_number = out

        return res

    def fetch_recording(self, request: operations.FetchRecordingRequest, security: operations.FetchRecordingSecurity, server_url: Optional[str] = None) -> operations.FetchRecordingResponse:
        base_url = operations.FETCH_RECORDING_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchRecordingRequest, base_url, '/v1/Trunks/{TrunkSid}/Recording', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchRecordingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkRecording])
                res.trunking_v1_trunk_recording = out

        return res

    def fetch_trunk(self, request: operations.FetchTrunkRequest, security: operations.FetchTrunkSecurity, server_url: Optional[str] = None) -> operations.FetchTrunkResponse:
        base_url = operations.FETCH_TRUNK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTrunkRequest, base_url, '/v1/Trunks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTrunkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1Trunk])
                res.trunking_v1_trunk = out

        return res

    def list_credential_list(self, request: operations.ListCredentialListRequest, security: operations.ListCredentialListSecurity, server_url: Optional[str] = None) -> operations.ListCredentialListResponse:
        base_url = operations.LIST_CREDENTIAL_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListCredentialListRequest, base_url, '/v1/Trunks/{TrunkSid}/CredentialLists', request)
        
        query_params = utils.get_query_params(operations.ListCredentialListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCredentialListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCredentialListListCredentialListResponse])
                res.list_credential_list_response = out

        return res

    def list_ip_access_control_list(self, request: operations.ListIPAccessControlListRequest, security: operations.ListIPAccessControlListSecurity, server_url: Optional[str] = None) -> operations.ListIPAccessControlListResponse:
        r"""List all IP Access Control Lists for a Trunk"""
        base_url = operations.LIST_IP_ACCESS_CONTROL_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListIPAccessControlListRequest, base_url, '/v1/Trunks/{TrunkSid}/IpAccessControlLists', request)
        
        query_params = utils.get_query_params(operations.ListIPAccessControlListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListIPAccessControlListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListIPAccessControlListListIPAccessControlListResponse])
                res.list_ip_access_control_list_response = out

        return res

    def list_origination_url(self, request: operations.ListOriginationURLRequest, security: operations.ListOriginationURLSecurity, server_url: Optional[str] = None) -> operations.ListOriginationURLResponse:
        base_url = operations.LIST_ORIGINATION_URL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListOriginationURLRequest, base_url, '/v1/Trunks/{TrunkSid}/OriginationUrls', request)
        
        query_params = utils.get_query_params(operations.ListOriginationURLRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListOriginationURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListOriginationURLListOriginationURLResponse])
                res.list_origination_url_response = out

        return res

    def list_phone_number(self, request: operations.ListPhoneNumberRequest, security: operations.ListPhoneNumberSecurity, server_url: Optional[str] = None) -> operations.ListPhoneNumberResponse:
        base_url = operations.LIST_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListPhoneNumberRequest, base_url, '/v1/Trunks/{TrunkSid}/PhoneNumbers', request)
        
        query_params = utils.get_query_params(operations.ListPhoneNumberRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPhoneNumberListPhoneNumberResponse])
                res.list_phone_number_response = out

        return res

    def list_trunk(self, request: operations.ListTrunkRequest, security: operations.ListTrunkSecurity, server_url: Optional[str] = None) -> operations.ListTrunkResponse:
        base_url = operations.LIST_TRUNK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Trunks'
        
        query_params = utils.get_query_params(operations.ListTrunkRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTrunkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTrunkListTrunkResponse])
                res.list_trunk_response = out

        return res

    def update_origination_url(self, request: operations.UpdateOriginationURLRequest, security: operations.UpdateOriginationURLSecurity, server_url: Optional[str] = None) -> operations.UpdateOriginationURLResponse:
        base_url = operations.UPDATE_ORIGINATION_URL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateOriginationURLRequest, base_url, '/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOriginationURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkOriginationURL])
                res.trunking_v1_trunk_origination_url = out

        return res

    def update_recording(self, request: operations.UpdateRecordingRequest, security: operations.UpdateRecordingSecurity, server_url: Optional[str] = None) -> operations.UpdateRecordingResponse:
        base_url = operations.UPDATE_RECORDING_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateRecordingRequest, base_url, '/v1/Trunks/{TrunkSid}/Recording', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateRecordingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1TrunkRecording])
                res.trunking_v1_trunk_recording = out

        return res

    def update_trunk(self, request: operations.UpdateTrunkRequest, security: operations.UpdateTrunkSecurity, server_url: Optional[str] = None) -> operations.UpdateTrunkResponse:
        base_url = operations.UPDATE_TRUNK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTrunkRequest, base_url, '/v1/Trunks/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTrunkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrunkingV1Trunk])
                res.trunking_v1_trunk = out

        return res

    