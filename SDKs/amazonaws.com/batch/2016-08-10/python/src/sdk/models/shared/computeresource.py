"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import crallocationstrategy_enum as shared_crallocationstrategy_enum
from ..shared import crtype_enum as shared_crtype_enum
from ..shared import ec2configuration as shared_ec2configuration
from ..shared import launchtemplatespecification as shared_launchtemplatespecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComputeResource:
    r"""An object that represents an Batch compute resource. For more information, see <a href=\\"https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html\\">Compute environments</a> in the <i>Batch User Guide</i>."""
    
    maxv_cpus: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxvCpus') }})  
    subnets: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets') }})  
    type: shared_crtype_enum.CRTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    allocation_strategy: Optional[shared_crallocationstrategy_enum.CRAllocationStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocationStrategy'), 'exclude': lambda f: f is None }})  
    bid_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidPercentage'), 'exclude': lambda f: f is None }})  
    desiredv_cpus: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desiredvCpus'), 'exclude': lambda f: f is None }})  
    ec2_configuration: Optional[list[shared_ec2configuration.Ec2Configuration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2Configuration'), 'exclude': lambda f: f is None }})  
    ec2_key_pair: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2KeyPair'), 'exclude': lambda f: f is None }})  
    image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageId'), 'exclude': lambda f: f is None }})  
    instance_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceRole'), 'exclude': lambda f: f is None }})  
    instance_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceTypes'), 'exclude': lambda f: f is None }})  
    launch_template: Optional[shared_launchtemplatespecification.LaunchTemplateSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchTemplate'), 'exclude': lambda f: f is None }})  
    minv_cpus: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minvCpus'), 'exclude': lambda f: f is None }})  
    placement_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placementGroup'), 'exclude': lambda f: f is None }})  
    security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityGroupIds'), 'exclude': lambda f: f is None }})  
    spot_iam_fleet_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spotIamFleetRole'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    