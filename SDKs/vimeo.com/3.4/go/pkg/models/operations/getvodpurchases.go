// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetVodPurchasesSecurity struct {
	Oauth2 string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetVodPurchasesDirectionEnum - The sort direction of the results.
type GetVodPurchasesDirectionEnum string

const (
	GetVodPurchasesDirectionEnumAsc  GetVodPurchasesDirectionEnum = "asc"
	GetVodPurchasesDirectionEnumDesc GetVodPurchasesDirectionEnum = "desc"
)

func (e *GetVodPurchasesDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetVodPurchasesDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVodPurchasesDirectionEnum: %s", s)
	}
}

// GetVodPurchasesFilterEnum - The type of On Demand videos to show.
//
// Option descriptions:
//   - `important` - Will show all pages which are about to expire.
type GetVodPurchasesFilterEnum string

const (
	GetVodPurchasesFilterEnumAll          GetVodPurchasesFilterEnum = "all"
	GetVodPurchasesFilterEnumExpiringSoon GetVodPurchasesFilterEnum = "expiring_soon"
	GetVodPurchasesFilterEnumFilm         GetVodPurchasesFilterEnum = "film"
	GetVodPurchasesFilterEnumImportant    GetVodPurchasesFilterEnum = "important"
	GetVodPurchasesFilterEnumPurchased    GetVodPurchasesFilterEnum = "purchased"
	GetVodPurchasesFilterEnumRented       GetVodPurchasesFilterEnum = "rented"
	GetVodPurchasesFilterEnumSeries       GetVodPurchasesFilterEnum = "series"
	GetVodPurchasesFilterEnumSubscription GetVodPurchasesFilterEnum = "subscription"
	GetVodPurchasesFilterEnumUnwatched    GetVodPurchasesFilterEnum = "unwatched"
	GetVodPurchasesFilterEnumWatched      GetVodPurchasesFilterEnum = "watched"
)

func (e *GetVodPurchasesFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "expiring_soon":
		fallthrough
	case "film":
		fallthrough
	case "important":
		fallthrough
	case "purchased":
		fallthrough
	case "rented":
		fallthrough
	case "series":
		fallthrough
	case "subscription":
		fallthrough
	case "unwatched":
		fallthrough
	case "watched":
		*e = GetVodPurchasesFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVodPurchasesFilterEnum: %s", s)
	}
}

// GetVodPurchasesSortEnum - The way to sort the results.
type GetVodPurchasesSortEnum string

const (
	GetVodPurchasesSortEnumAdded        GetVodPurchasesSortEnum = "added"
	GetVodPurchasesSortEnumAlphabetical GetVodPurchasesSortEnum = "alphabetical"
	GetVodPurchasesSortEnumDate         GetVodPurchasesSortEnum = "date"
	GetVodPurchasesSortEnumName         GetVodPurchasesSortEnum = "name"
	GetVodPurchasesSortEnumPurchaseTime GetVodPurchasesSortEnum = "purchase_time"
	GetVodPurchasesSortEnumRating       GetVodPurchasesSortEnum = "rating"
	GetVodPurchasesSortEnumReleaseDate  GetVodPurchasesSortEnum = "release_date"
)

func (e *GetVodPurchasesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "added":
		fallthrough
	case "alphabetical":
		fallthrough
	case "date":
		fallthrough
	case "name":
		fallthrough
	case "purchase_time":
		fallthrough
	case "rating":
		fallthrough
	case "release_date":
		*e = GetVodPurchasesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVodPurchasesSortEnum: %s", s)
	}
}

type GetVodPurchasesRequest struct {
	// The sort direction of the results.
	Direction *GetVodPurchasesDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The type of On Demand videos to show.
	//
	// Option descriptions:
	//  * `important` - Will show all pages which are about to expire.
	//
	Filter *GetVodPurchasesFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// The page number of the results to show.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items to show on each page of results, up to a maximum of 100.
	PerPage *float64 `queryParam:"style=form,explode=true,name=per_page"`
	// The way to sort the results.
	Sort *GetVodPurchasesSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetVodPurchasesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The authenticated user can't view the purchases and rentals for another user's account.
	LegacyError *shared.LegacyError
	// The purchases and rentals were returned.
	OnDemandPages []shared.OnDemandPage
}
