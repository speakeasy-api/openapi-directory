"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import runtimeaccessconfig as shared_runtimeaccessconfig
from ..shared import runtimemetrics as shared_runtimemetrics
from ..shared import runtimesoftwareconfig as shared_runtimesoftwareconfig
from ..shared import virtualmachine as shared_virtualmachine
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuntimeInput:
    r"""The definition of a Runtime for a managed notebook instance."""
    
    access_config: Optional[shared_runtimeaccessconfig.RuntimeAccessConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the login configuration for Runtime"""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster."""  
    software_config: Optional[shared_runtimesoftwareconfig.RuntimeSoftwareConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('softwareConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`"""  
    virtual_machine: Optional[shared_virtualmachine.VirtualMachineInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualMachine'), 'exclude': lambda f: f is None }})
    r"""Runtime using Virtual Machine for computing."""  
    
class RuntimeHealthStateEnum(str, Enum):
    r"""Output only. Runtime health_state."""
    HEALTH_STATE_UNSPECIFIED = 'HEALTH_STATE_UNSPECIFIED'
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    AGENT_NOT_INSTALLED = 'AGENT_NOT_INSTALLED'
    AGENT_NOT_RUNNING = 'AGENT_NOT_RUNNING'

class RuntimeStateEnum(str, Enum):
    r"""Output only. Runtime state."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    STARTING = 'STARTING'
    PROVISIONING = 'PROVISIONING'
    ACTIVE = 'ACTIVE'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    DELETING = 'DELETING'
    UPGRADING = 'UPGRADING'
    INITIALIZING = 'INITIALIZING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Runtime:
    r"""The definition of a Runtime for a managed notebook instance."""
    
    access_config: Optional[shared_runtimeaccessconfig.RuntimeAccessConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the login configuration for Runtime"""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Runtime creation time."""  
    health_state: Optional[RuntimeHealthStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthState'), 'exclude': lambda f: f is None }})
    r"""Output only. Runtime health_state."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster."""  
    metrics: Optional[shared_runtimemetrics.RuntimeMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is None }})
    r"""Contains runtime daemon metrics, such as OS and kernels and sessions stats."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`"""  
    software_config: Optional[shared_runtimesoftwareconfig.RuntimeSoftwareConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('softwareConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`"""  
    state: Optional[RuntimeStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Runtime state."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Runtime update time."""  
    virtual_machine: Optional[shared_virtualmachine.VirtualMachine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualMachine'), 'exclude': lambda f: f is None }})
    r"""Runtime using Virtual Machine for computing."""  
    