/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ImageSearchResults - Image search results
 */
public class ImageSearchResults {
    /**
     * List of images
     */
    @JsonProperty("data")
    public Image[] data;

    public ImageSearchResults withData(Image[] data) {
        this.data = data;
        return this;
    }
    
    /**
     * AI-powered insights about an asset, based on the specified audience and objective
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insights")
    public Insights insights;

    public ImageSearchResults withInsights(Insights insights) {
        this.insights = insights;
        return this;
    }
    
    /**
     * Server-generated message, if any
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    public String message;

    public ImageSearchResults withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * Current page that is returned
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    public Long page;

    public ImageSearchResults withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * Number of results per page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("per_page")
    public Long perPage;

    public ImageSearchResults withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Unique identifier for the search request
     */
    @JsonProperty("search_id")
    public String searchId;

    public ImageSearchResults withSearchId(String searchId) {
        this.searchId = searchId;
        return this;
    }
    
    /**
     * Returns information if search phrase has potentially been mistyped or another query would lead to better search results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spellcheck_info")
    public java.util.Map<String, Object> spellcheckInfo;

    public ImageSearchResults withSpellcheckInfo(java.util.Map<String, Object> spellcheckInfo) {
        this.spellcheckInfo = spellcheckInfo;
        return this;
    }
    
    /**
     * Total count of all results across all pages
     */
    @JsonProperty("total_count")
    public Long totalCount;

    public ImageSearchResults withTotalCount(Long totalCount) {
        this.totalCount = totalCount;
        return this;
    }
    
    public ImageSearchResults(@JsonProperty("data") Image[] data, @JsonProperty("search_id") String searchId, @JsonProperty("total_count") Long totalCount) {
        this.data = data;
        this.searchId = searchId;
        this.totalCount = totalCount;
  }
}
