/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The status of the payment in the gateway; use for reconciliation.
 *
 * @remarks
 *
 */
export enum ProxyGetPaymentGatewayStateEnum {
  MarkedForSubmission = "MarkedForSubmission",
  Submitted = "Submitted",
  Settled = "Settled",
  NotSubmitted = "NotSubmitted",
  FailedToSettle = "FailedToSettle",
}

/**
 * How the payment was created, whether through the API, manually, import, or payment run.
 *
 * @remarks
 *
 */
export enum ProxyGetPaymentSourceEnum {
  PaymentRun = "PaymentRun",
  Import = "Import",
  Manually = "Manually",
  Api = "API",
}

/**
 * The status of the payment in Zuora. The value depends on the type of payments.
 *
 * @remarks
 *
 * - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
 * - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
 *
 */
export enum ProxyGetPaymentStatusEnum {
  Processed = "Processed",
  Error = "Error",
  Voided = "Voided",
  Canceled = "Canceled",
}

/**
 * Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
 *
 * @remarks
 *
 */
export enum ProxyGetPaymentTransferredToAccountingEnum {
  Processing = "Processing",
  Yes = "Yes",
  Error = "Error",
  Ignore = "Ignore",
}

/**
 * The type of the payment, whether the payment is external or electronic.
 *
 * @remarks
 *
 */
export enum ProxyGetPaymentTypeEnum {
  External = "External",
  Electronic = "Electronic",
}

/**
 * Container for custom fields of a Payment object.
 *
 * @remarks
 *
 */
export class ProxyGetPayment extends SpeakeasyBase {
  /**
   * The unique account ID for the customer that the payment is for.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountId" })
  accountId?: string;

  /**
   * The accounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountingCode" })
  accountingCode?: string;

  /**
   * The amount of the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Amount" })
  amount?: number;

  /**
   * The applied amount of the payment.
   *
   * @remarks
   *
   * **Note**: This field is only available if you have the Invoice Settlement feature enabled.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AppliedAmount" })
  appliedAmount?: number;

  /**
   * If you have the Invoice Settlement feature disabled, the value of this field is the amount of the payment to apply to a credit balance.
   *
   * @remarks
   *
   * If you have the Invoice Settlement feature enabled, the value of this field returned in the response is `0` for the payments that are created after the enablement.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AppliedCreditBalanceAmount" })
  appliedCreditBalanceAmount?: number;

  /**
   * The authorization transaction ID from the payment gateway.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AuthTransactionId" })
  authTransactionId?: string;

  /**
   * The first six digits of the credit card or debit card used for the payment, when applicable.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BankIdentificationNumber" })
  bankIdentificationNumber?: string;

  /**
   * The date and time when the payment was canceled.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CancelledOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  cancelledOn?: Date;

  /**
   * Additional information related to the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Comment" })
  comment?: string;

  /**
   * The ID of the Zuora user who created the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedById" })
  createdById?: string;

  /**
   * The date and time when the payment was created.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * The date when the payment takes effect.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EffectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveDate?: Date;

  /**
   * The name of the gateway instance that processes the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Gateway" })
  gateway?: string;

  /**
   * A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GatewayOrderId" })
  gatewayOrderId?: string;

  /**
   * The message returned from the payment gateway for the payment. This message is gateway-dependent.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GatewayResponse" })
  gatewayResponse?: string;

  /**
   * The code returned from the payment gateway for the payment. This code is gateway-dependent.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GatewayResponseCode" })
  gatewayResponseCode?: string;

  /**
   * The status of the payment in the gateway; use for reconciliation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GatewayState" })
  gatewayState?: ProxyGetPaymentGatewayStateEnum;

  /**
   * The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  /**
   * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IntegrationId__NS" })
  integrationIdNS?: string;

  /**
   * Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IntegrationStatus__NS" })
  integrationStatusNS?: string;

  /**
   * The date and time when a payment was marked and waiting for batch submission to the payment process.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MarkedForSubmissionOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  markedForSubmissionOn?: Date;

  /**
   * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Origin__NS" })
  originNS?: string;

  /**
   * The ID of the payment method used for the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentMethodId" })
  paymentMethodId?: string;

  /**
   * The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentMethodSnapshotId" })
  paymentMethodSnapshotId?: string;

  /**
   * The unique identification number of the payment. For example, P-00000028.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentNumber" })
  paymentNumber?: string;

  /**
   * The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReferenceId" })
  referenceId?: string;

  /**
   * The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RefundAmount" })
  refundAmount?: number;

  /**
   * The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SecondPaymentReferenceId" })
  secondPaymentReferenceId?: string;

  /**
   * The date and time when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SettledOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  settledOn?: Date;

  /**
   * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SoftDescriptor" })
  softDescriptor?: string;

  /**
   * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SoftDescriptorPhone" })
  softDescriptorPhone?: string;

  /**
   * How the payment was created, whether through the API, manually, import, or payment run.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Source" })
  source?: ProxyGetPaymentSourceEnum;

  /**
   * The name of the source. The value is a Payment Run number or a file name.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SourceName" })
  sourceName?: string;

  /**
   * The status of the payment in Zuora. The value depends on the type of payments.
   *
   * @remarks
   *
   * - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
   * - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: ProxyGetPaymentStatusEnum;

  /**
   * The date and time when the payment was submitted.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SubmittedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  submittedOn?: Date;

  /**
   * Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SyncDate__NS" })
  syncDateNS?: string;

  /**
   * Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Transaction__NS" })
  transactionNS?: string;

  /**
   * Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TransferredToAccounting" })
  transferredToAccounting?: ProxyGetPaymentTransferredToAccountingEnum;

  /**
   * The type of the payment, whether the payment is external or electronic.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type?: ProxyGetPaymentTypeEnum;

  /**
   * The unapplied amount of the payment.
   *
   * @remarks
   *
   * **Note**: This field is only available if you have the Invoice Settlement feature enabled.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UnappliedAmount" })
  unappliedAmount?: number;

  /**
   * The ID of the Zuora user who last updated the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedById" })
  updatedById?: string;

  /**
   * The date and time when the payment was last updated.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedDate?: Date;
}
