"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import parallelinstruction as shared_parallelinstruction
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StreamingComputationConfig:
    r"""Configuration information for a single streaming computation."""
    
    computation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computationId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for this computation."""  
    instructions: Optional[list[shared_parallelinstruction.ParallelInstruction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions'), 'exclude': lambda f: f is None }})
    r"""Instructions that comprise the computation."""  
    stage_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stageName'), 'exclude': lambda f: f is None }})
    r"""Stage name of this computation."""  
    system_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemName'), 'exclude': lambda f: f is None }})
    r"""System defined name for this computation."""  
    transform_user_name_to_state_family: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformUserNameToStateFamily'), 'exclude': lambda f: f is None }})
    r"""Map from user name of stateful transforms in this stage to their state family."""  
    