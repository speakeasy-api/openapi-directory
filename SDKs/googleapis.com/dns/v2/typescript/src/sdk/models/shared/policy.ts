/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PolicyAlternativeNameServerConfig } from "./policyalternativenameserverconfig";
import { PolicyNetwork } from "./policynetwork";
import { Expose, Type } from "class-transformer";

/**
 * A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
 */
export class Policy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alternativeNameServerConfig" })
  @Type(() => PolicyAlternativeNameServerConfig)
  alternativeNameServerConfig?: PolicyAlternativeNameServerConfig;

  /**
   * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableInboundForwarding" })
  enableInboundForwarding?: boolean;

  /**
   * Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableLogging" })
  enableLogging?: boolean;

  /**
   * Unique identifier for the resource; defined by the server (output only).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * User-assigned name for this policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * List of network names specifying networks to which this policy is applied.
   */
  @SpeakeasyMetadata({ elemType: PolicyNetwork })
  @Expose({ name: "networks" })
  @Type(() => PolicyNetwork)
  networks?: PolicyNetwork[];
}
