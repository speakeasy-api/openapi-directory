/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Service - A managed metastore service that serves metadata queries.
 */
public class Service {
    /**
     * Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artifactGcsUri")
    public String artifactGcsUri;
    public Service withArtifactGcsUri(String artifactGcsUri) {
        this.artifactGcsUri = artifactGcsUri;
        return this;
    }
    
    /**
     * Output only. The time when the metastore service was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Service withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Immutable. The database type that the Metastore service stores its data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databaseType")
    public ServiceDatabaseTypeEnum databaseType;
    public Service withDatabaseType(ServiceDatabaseTypeEnum databaseType) {
        this.databaseType = databaseType;
        return this;
    }
    
    /**
     * Encryption settings for the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionConfig")
    public EncryptionConfig encryptionConfig;
    public Service withEncryptionConfig(EncryptionConfig encryptionConfig) {
        this.encryptionConfig = encryptionConfig;
        return this;
    }
    
    /**
     * Output only. The URI of the endpoint used to access the metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpointUri")
    public String endpointUri;
    public Service withEndpointUri(String endpointUri) {
        this.endpointUri = endpointUri;
        return this;
    }
    
    /**
     * Specifies configuration information specific to running Hive metastore software as the metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiveMetastoreConfig")
    public HiveMetastoreConfig hiveMetastoreConfig;
    public Service withHiveMetastoreConfig(HiveMetastoreConfig hiveMetastoreConfig) {
        this.hiveMetastoreConfig = hiveMetastoreConfig;
        return this;
    }
    
    /**
     * User-defined labels for the metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Service withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenanceWindow")
    public MaintenanceWindow maintenanceWindow;
    public Service withMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
        this.maintenanceWindow = maintenanceWindow;
        return this;
    }
    
    /**
     * Specifies how metastore metadata should be integrated with external services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadataIntegration")
    public MetadataIntegration metadataIntegration;
    public Service withMetadataIntegration(MetadataIntegration metadataIntegration) {
        this.metadataIntegration = metadataIntegration;
        return this;
    }
    
    /**
     * The metadata management activities of the metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadataManagementActivity")
    public MetadataManagementActivity metadataManagementActivity;
    public Service withMetadataManagementActivity(MetadataManagementActivity metadataManagementActivity) {
        this.metadataManagementActivity = metadataManagementActivity;
        return this;
    }
    
    /**
     * Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Service withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;
    public Service withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Network configuration for the Dataproc Metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkConfig")
    public NetworkConfig networkConfig;
    public Service withNetworkConfig(NetworkConfig networkConfig) {
        this.networkConfig = networkConfig;
        return this;
    }
    
    /**
     * The TCP port at which the metastore service is reached. Default: 9083.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    public Integer port;
    public Service withPort(Integer port) {
        this.port = port;
        return this;
    }
    
    /**
     * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseChannel")
    public ServiceReleaseChannelEnum releaseChannel;
    public Service withReleaseChannel(ServiceReleaseChannelEnum releaseChannel) {
        this.releaseChannel = releaseChannel;
        return this;
    }
    
    /**
     * Represents the scaling configuration of a metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scalingConfig")
    public ScalingConfig scalingConfig;
    public Service withScalingConfig(ScalingConfig scalingConfig) {
        this.scalingConfig = scalingConfig;
        return this;
    }
    
    /**
     * Output only. The current state of the metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ServiceStateEnum state;
    public Service withState(ServiceStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Additional information about the current state of the metastore service, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateMessage")
    public String stateMessage;
    public Service withStateMessage(String stateMessage) {
        this.stateMessage = stateMessage;
        return this;
    }
    
    /**
     * Telemetry Configuration for the Dataproc Metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telemetryConfig")
    public TelemetryConfig telemetryConfig;
    public Service withTelemetryConfig(TelemetryConfig telemetryConfig) {
        this.telemetryConfig = telemetryConfig;
        return this;
    }
    
    /**
     * The tier of the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tier")
    public ServiceTierEnum tier;
    public Service withTier(ServiceTierEnum tier) {
        this.tier = tier;
        return this;
    }
    
    /**
     * Output only. The globally unique resource identifier of the metastore service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public Service withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. The time when the metastore service was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Service withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
