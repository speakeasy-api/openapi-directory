// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LcsagSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LcsagRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration Number
	RegNum string `json:"RegNum"`
	// Aadhaar number
	UID string `json:"UID"`
}

// LcsagRequestBodyFormatEnum - The format of the certificate in response.
type LcsagRequestBodyFormatEnum string

const (
	LcsagRequestBodyFormatEnumPdf LcsagRequestBodyFormatEnum = "pdf"
)

func (e *LcsagRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = LcsagRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LcsagRequestBodyFormatEnum: %s", s)
	}
}

// LcsagRequestBody - Request format
type LcsagRequestBody struct {
	CertificateParameters *LcsagRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LcsagRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Lcsag504ApplicationJSONErrorEnum string

const (
	Lcsag504ApplicationJSONErrorEnumGatewayTimeout Lcsag504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Lcsag504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Lcsag504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag504ApplicationJSONErrorEnum: %s", s)
	}
}

type Lcsag504ApplicationJSONErrorDescriptionEnum string

const (
	Lcsag504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Lcsag504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Lcsag504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Lcsag504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lcsag504ApplicationJSON - Gateway timeout
type Lcsag504ApplicationJSON struct {
	Error            *Lcsag504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lcsag504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lcsag503ApplicationJSONErrorEnum string

const (
	Lcsag503ApplicationJSONErrorEnumServiceUnavailable Lcsag503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Lcsag503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Lcsag503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag503ApplicationJSONErrorEnum: %s", s)
	}
}

type Lcsag503ApplicationJSONErrorDescriptionEnum string

const (
	Lcsag503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Lcsag503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Lcsag503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Lcsag503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lcsag503ApplicationJSON - Service unavailable
type Lcsag503ApplicationJSON struct {
	Error            *Lcsag503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lcsag503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lcsag502ApplicationJSONErrorEnum string

const (
	Lcsag502ApplicationJSONErrorEnumBadGatewy Lcsag502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Lcsag502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Lcsag502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag502ApplicationJSONErrorEnum: %s", s)
	}
}

type Lcsag502ApplicationJSONErrorDescriptionEnum string

const (
	Lcsag502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Lcsag502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Lcsag502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Lcsag502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lcsag502ApplicationJSON - Bad gateway
type Lcsag502ApplicationJSON struct {
	Error            *Lcsag502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lcsag502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lcsag500ApplicationJSONErrorEnum string

const (
	Lcsag500ApplicationJSONErrorEnumInternalServerError Lcsag500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Lcsag500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Lcsag500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag500ApplicationJSONErrorEnum: %s", s)
	}
}

type Lcsag500ApplicationJSONErrorDescriptionEnum string

const (
	Lcsag500ApplicationJSONErrorDescriptionEnumInternalServerError Lcsag500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Lcsag500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Lcsag500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lcsag500ApplicationJSON - Internal server error
type Lcsag500ApplicationJSON struct {
	Error            *Lcsag500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lcsag500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lcsag404ApplicationJSONErrorEnum string

const (
	Lcsag404ApplicationJSONErrorEnumRecordNotFound Lcsag404ApplicationJSONErrorEnum = "record_not_found"
	Lcsag404ApplicationJSONErrorEnumURLNotFound    Lcsag404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Lcsag404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Lcsag404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag404ApplicationJSONErrorEnum: %s", s)
	}
}

type Lcsag404ApplicationJSONErrorDescriptionEnum string

const (
	Lcsag404ApplicationJSONErrorDescriptionEnumNoRecordFound               Lcsag404ApplicationJSONErrorDescriptionEnum = "No record found"
	Lcsag404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Lcsag404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Lcsag404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Lcsag404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lcsag404ApplicationJSON - No record found
type Lcsag404ApplicationJSON struct {
	Error            *Lcsag404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lcsag404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lcsag401ApplicationJSONErrorEnum string

const (
	Lcsag401ApplicationJSONErrorEnumInvalidAuthentication Lcsag401ApplicationJSONErrorEnum = "invalid_authentication"
	Lcsag401ApplicationJSONErrorEnumInvalidAuthorization  Lcsag401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Lcsag401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Lcsag401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag401ApplicationJSONErrorEnum: %s", s)
	}
}

type Lcsag401ApplicationJSONErrorDescriptionEnum string

const (
	Lcsag401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Lcsag401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Lcsag401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Lcsag401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Lcsag401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Lcsag401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lcsag401ApplicationJSON - Unauthorized access
type Lcsag401ApplicationJSON struct {
	Error            *Lcsag401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lcsag401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lcsag400ApplicationJSONErrorEnum string

const (
	Lcsag400ApplicationJSONErrorEnumMissingParameter Lcsag400ApplicationJSONErrorEnum = "missing_parameter"
	Lcsag400ApplicationJSONErrorEnumInvalidParameter Lcsag400ApplicationJSONErrorEnum = "invalid_parameter"
	Lcsag400ApplicationJSONErrorEnumInvalidFormat    Lcsag400ApplicationJSONErrorEnum = "invalid_format"
	Lcsag400ApplicationJSONErrorEnumInvalidTxnid     Lcsag400ApplicationJSONErrorEnum = "invalid_txnid"
	Lcsag400ApplicationJSONErrorEnumInvalidConsentid Lcsag400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Lcsag400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Lcsag400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag400ApplicationJSONErrorEnum: %s", s)
	}
}

type Lcsag400ApplicationJSONErrorDescriptionEnum string

const (
	Lcsag400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Lcsag400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Lcsag400ApplicationJSONErrorDescriptionEnumBadRequest                              Lcsag400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Lcsag400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Lcsag400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Lcsag400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Lcsag400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Lcsag400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Lcsag400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Lcsag400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Lcsag400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lcsag400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lcsag400ApplicationJSON - Bad request
type Lcsag400ApplicationJSON struct {
	Error            *Lcsag400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lcsag400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LcsagResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Lcsag400ApplicationJSONObject *Lcsag400ApplicationJSON
	// Unauthorized access
	Lcsag401ApplicationJSONObject *Lcsag401ApplicationJSON
	// No record found
	Lcsag404ApplicationJSONObject *Lcsag404ApplicationJSON
	// Internal server error
	Lcsag500ApplicationJSONObject *Lcsag500ApplicationJSON
	// Bad gateway
	Lcsag502ApplicationJSONObject *Lcsag502ApplicationJSON
	// Service unavailable
	Lcsag503ApplicationJSONObject *Lcsag503ApplicationJSON
	// Gateway timeout
	Lcsag504ApplicationJSONObject *Lcsag504ApplicationJSON
}
