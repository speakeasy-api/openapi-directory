/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Attributes } from "./attributes";
import { Calendars } from "./calendars";
import { Commands } from "./commands";
import { Devices } from "./devices";
import { Drivers } from "./drivers";
import { Events } from "./events";
import { Geofences } from "./geofences";
import { Groups } from "./groups";
import { Maintenance } from "./maintenance";
import * as shared from "./models/shared";
import { Notifications } from "./notifications";
import { Permissions } from "./permissions";
import { Positions } from "./positions";
import { Reports } from "./reports";
import { Server } from "./server";
import { Session } from "./session";
import { Statistics } from "./statistics";
import { Users } from "./users";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * Demo Server 1
   */
  "https://demo.traccar.org/api",
  /**
   * Demo Server 2
   */
  "https://demo2.traccar.org/api",
  /**
   * Demo Server 3
   */
  "https://demo3.traccar.org/api",
  /**
   * Demo Server 4
   */
  "https://demo4.traccar.org/api",
  /**
   * Subscription Server
   */
  "https://server.traccar.org/api",
  /**
   * Other Server
   */
  "http://{host}:{port}/api",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Open Source GPS Tracking Platform
 */
export class SDK {
  /**
   * Computed attributes management
   */
  public attributes: Attributes;
  /**
   * Calendar management
   */
  public calendars: Calendars;
  /**
   * Sending commands to devices and stored command management
   */
  public commands: Commands;
  /**
   * Device management
   */
  public devices: Devices;
  /**
   * Drivers management
   */
  public drivers: Drivers;
  /**
   * Retrieving event information
   */
  public events: Events;
  /**
   * Geofence management
   */
  public geofences: Geofences;
  /**
   * Group management
   */
  public groups: Groups;
  /**
   * Maintenance management
   */
  public maintenance: Maintenance;
  /**
   * User notifications management
   */
  public notifications: Notifications;
  /**
   * User permissions and other object linking
   */
  public permissions: Permissions;
  /**
   * Retrieving raw location information
   */
  public positions: Positions;
  /**
   * Reports generation
   */
  public reports: Reports;
  /**
   * Server information
   */
  public server: Server;
  /**
   * User session management
   */
  public session: Session;
  /**
   * Retrieving server statistics
   */
  public statistics: Statistics;
  /**
   * User management
   */
  public users: Users;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.attributes = new Attributes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.calendars = new Calendars(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.commands = new Commands(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.devices = new Devices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.drivers = new Drivers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.events = new Events(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.geofences = new Geofences(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.groups = new Groups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.maintenance = new Maintenance(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.notifications = new Notifications(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.permissions = new Permissions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.positions = new Positions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reports = new Reports(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.server = new Server(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.session = new Session(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.statistics = new Statistics(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.users = new Users(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
