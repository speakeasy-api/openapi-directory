"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import derivedsource as shared_derivedsource
from ..shared import sourcesplitshard as shared_sourcesplitshard
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SourceSplitResponseOutcomeEnum(str, Enum):
    r"""Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed \\"as is\\" without splitting. \\"bundles\\" is ignored in this case. If this is SPLITTING_HAPPENED, then \\"bundles\\" contains a list of bundles into which the source was split."""
    SOURCE_SPLIT_OUTCOME_UNKNOWN = 'SOURCE_SPLIT_OUTCOME_UNKNOWN'
    SOURCE_SPLIT_OUTCOME_USE_CURRENT = 'SOURCE_SPLIT_OUTCOME_USE_CURRENT'
    SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED = 'SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSplitResponse:
    r"""The response to a SourceSplitRequest."""
    
    bundles: Optional[list[shared_derivedsource.DerivedSource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundles'), 'exclude': lambda f: f is None }})
    r"""If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input."""  
    outcome: Optional[SourceSplitResponseOutcomeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outcome'), 'exclude': lambda f: f is None }})
    r"""Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed \\"as is\\" without splitting. \\"bundles\\" is ignored in this case. If this is SPLITTING_HAPPENED, then \\"bundles\\" contains a list of bundles into which the source was split."""  
    shards: Optional[list[shared_sourcesplitshard.SourceSplitShard]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shards'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED in favor of bundles."""  
    