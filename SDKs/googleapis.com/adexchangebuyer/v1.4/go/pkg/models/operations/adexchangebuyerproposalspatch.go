// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AdexchangebuyerProposalsPatchSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

// AdexchangebuyerProposalsPatchUpdateActionEnum - The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.
type AdexchangebuyerProposalsPatchUpdateActionEnum string

const (
	AdexchangebuyerProposalsPatchUpdateActionEnumAccept           AdexchangebuyerProposalsPatchUpdateActionEnum = "accept"
	AdexchangebuyerProposalsPatchUpdateActionEnumCancel           AdexchangebuyerProposalsPatchUpdateActionEnum = "cancel"
	AdexchangebuyerProposalsPatchUpdateActionEnumPropose          AdexchangebuyerProposalsPatchUpdateActionEnum = "propose"
	AdexchangebuyerProposalsPatchUpdateActionEnumProposeAndAccept AdexchangebuyerProposalsPatchUpdateActionEnum = "proposeAndAccept"
	AdexchangebuyerProposalsPatchUpdateActionEnumUnknownAction    AdexchangebuyerProposalsPatchUpdateActionEnum = "unknownAction"
	AdexchangebuyerProposalsPatchUpdateActionEnumUpdateNonTerms   AdexchangebuyerProposalsPatchUpdateActionEnum = "updateNonTerms"
)

func (e *AdexchangebuyerProposalsPatchUpdateActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accept":
		fallthrough
	case "cancel":
		fallthrough
	case "propose":
		fallthrough
	case "proposeAndAccept":
		fallthrough
	case "unknownAction":
		fallthrough
	case "updateNonTerms":
		*e = AdexchangebuyerProposalsPatchUpdateActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdexchangebuyerProposalsPatchUpdateActionEnum: %s", s)
	}
}

type AdexchangebuyerProposalsPatchRequest struct {
	Proposal *shared.Proposal `request:"mediaType=application/json"`
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// The proposal id to update.
	ProposalID string `pathParam:"style=simple,explode=false,name=proposalId"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.
	RevisionNumber string `pathParam:"style=simple,explode=false,name=revisionNumber"`
	// The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.
	UpdateAction AdexchangebuyerProposalsPatchUpdateActionEnum `pathParam:"style=simple,explode=false,name=updateAction"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
}

type AdexchangebuyerProposalsPatchResponse struct {
	ContentType string
	// Successful response
	Proposal    *shared.Proposal
	StatusCode  int
	RawResponse *http.Response
}
