"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clientrepresentation as shared_clientrepresentation
from ..shared import grouprepresentation as shared_grouprepresentation
from ..shared import identityproviderrepresentation as shared_identityproviderrepresentation
from ..shared import rolesrepresentation as shared_rolesrepresentation
from ..shared import userrepresentation as shared_userrepresentation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PartialImportRepresentationPolicyEnum(str, Enum):
    SKIP = 'SKIP'
    OVERWRITE = 'OVERWRITE'
    FAIL = 'FAIL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PartialImportRepresentation:
    
    clients: Optional[list[shared_clientrepresentation.ClientRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clients'), 'exclude': lambda f: f is None }})  
    groups: Optional[list[shared_grouprepresentation.GroupRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})  
    identity_providers: Optional[list[shared_identityproviderrepresentation.IdentityProviderRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityProviders'), 'exclude': lambda f: f is None }})  
    if_resource_exists: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ifResourceExists'), 'exclude': lambda f: f is None }})  
    policy: Optional[PartialImportRepresentationPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})  
    roles: Optional[shared_rolesrepresentation.RolesRepresentation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})  
    users: Optional[list[shared_userrepresentation.UserRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})  
    