/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VoterInfoResponse - The result of a voter info lookup query.
 */
public class VoterInfoResponse {
    /**
     * Contests that will appear on the voter's ballot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contests")
    public Contest[] contests;
    public VoterInfoResponse withContests(Contest[] contests) {
        this.contests = contests;
        return this;
    }
    
    /**
     * Locations where a voter is eligible to drop off a completed ballot. The voter must have received and completed a ballot prior to arriving at the location. The location may not have ballots available on the premises. These locations could be open on or before election day as indicated in the pollingHours field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropOffLocations")
    public PollingLocation[] dropOffLocations;
    public VoterInfoResponse withDropOffLocations(PollingLocation[] dropOffLocations) {
        this.dropOffLocations = dropOffLocations;
        return this;
    }
    
    /**
     * Locations where the voter is eligible to vote early, prior to election day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earlyVoteSites")
    public PollingLocation[] earlyVoteSites;
    public VoterInfoResponse withEarlyVoteSites(PollingLocation[] earlyVoteSites) {
        this.earlyVoteSites = earlyVoteSites;
        return this;
    }
    
    /**
     * Information about the election that was queried.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("election")
    public Election election;
    public VoterInfoResponse withElection(Election election) {
        this.election = election;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "civicinfo#voterInfoResponse".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public VoterInfoResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Specifies whether voters in the precinct vote only by mailing their ballots (with the possible option of dropping off their ballots as well).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mailOnly")
    public Boolean mailOnly;
    public VoterInfoResponse withMailOnly(Boolean mailOnly) {
        this.mailOnly = mailOnly;
        return this;
    }
    
    /**
     * A simple representation of an address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("normalizedInput")
    public SimpleAddressType normalizedInput;
    public VoterInfoResponse withNormalizedInput(SimpleAddressType normalizedInput) {
        this.normalizedInput = normalizedInput;
        return this;
    }
    
    /**
     * When there are multiple elections for a voter address, the otherElections field is populated in the API response and there are two possibilities: 1. If the earliest election is not the intended election, specify the election ID of the desired election in a second API request using the electionId field. 2. If these elections occur on the same day, the API doesn?t return any polling location, contest, or election official information to ensure that an additional query is made. For user-facing applications, we recommend displaying these elections to the user to disambiguate. A second API request using the electionId field should be made for the election that is relevant to the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otherElections")
    public Election[] otherElections;
    public VoterInfoResponse withOtherElections(Election[] otherElections) {
        this.otherElections = otherElections;
        return this;
    }
    
    /**
     * Locations where the voter is eligible to vote on election day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pollingLocations")
    public PollingLocation[] pollingLocations;
    public VoterInfoResponse withPollingLocations(PollingLocation[] pollingLocations) {
        this.pollingLocations = pollingLocations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("precinctId")
    public String precinctId;
    public VoterInfoResponse withPrecinctId(String precinctId) {
        this.precinctId = precinctId;
        return this;
    }
    
    /**
     * The precincts that match this voter's address. Will only be returned for project IDs which have been whitelisted as "partner projects".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("precincts")
    public Precinct[] precincts;
    public VoterInfoResponse withPrecincts(Precinct[] precincts) {
        this.precincts = precincts;
        return this;
    }
    
    /**
     * Local Election Information for the state that the voter votes in. For the US, there will only be one element in this array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public AdministrationRegion[] state;
    public VoterInfoResponse withState(AdministrationRegion[] state) {
        this.state = state;
        return this;
    }
    
}
