"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authenticationconfiguration as shared_authenticationconfiguration
from ..shared import proxyconfiguration as shared_proxyconfiguration
from ..shared import urls as shared_urls
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebCrawlerConfiguration:
    r"""Provides the configuration information required for Amazon Kendra Web Crawler."""
    
    urls: shared_urls.Urls = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Urls') }})  
    authentication_configuration: Optional[shared_authenticationconfiguration.AuthenticationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthenticationConfiguration'), 'exclude': lambda f: f is None }})  
    crawl_depth: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlDepth'), 'exclude': lambda f: f is None }})  
    max_content_size_per_page_in_mega_bytes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxContentSizePerPageInMegaBytes'), 'exclude': lambda f: f is None }})  
    max_links_per_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxLinksPerPage'), 'exclude': lambda f: f is None }})  
    max_urls_per_minute_crawl_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxUrlsPerMinuteCrawlRate'), 'exclude': lambda f: f is None }})  
    proxy_configuration: Optional[shared_proxyconfiguration.ProxyConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProxyConfiguration'), 'exclude': lambda f: f is None }})  
    url_exclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UrlExclusionPatterns'), 'exclude': lambda f: f is None }})  
    url_inclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UrlInclusionPatterns'), 'exclude': lambda f: f is None }})  
    