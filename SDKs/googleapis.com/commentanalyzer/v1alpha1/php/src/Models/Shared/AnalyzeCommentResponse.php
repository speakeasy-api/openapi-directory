<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AnalyzeCommentResponse - The comment analysis response message.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AnalyzeCommentResponse
{
    /**
     * Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example "ATTACK_ON_AUTHOR", "INFLAMMATORY", etc).
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\AttributeScores> $attributeScores
     */
	#[\JMS\Serializer\Annotation\SerializedName('attributeScores')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\AttributeScores>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $attributeScores = null;
    
    /**
     * Same token from the original AnalyzeCommentRequest.
     * 
     * @var ?string $clientToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientToken = null;
    
    /**
     * Contains the languages detected from the text content, sorted in order of likelihood.
     * 
     * @var ?array<string> $detectedLanguages
     */
	#[\JMS\Serializer\Annotation\SerializedName('detectedLanguages')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $detectedLanguages = null;
    
    /**
     * The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called "effective_languages". The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages = Request.languages else effective_languages = detected_languages[0]
     * 
     * @var ?array<string> $languages
     */
	#[\JMS\Serializer\Annotation\SerializedName('languages')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $languages = null;
    
	public function __construct()
	{
		$this->attributeScores = null;
		$this->clientToken = null;
		$this->detectedLanguages = null;
		$this->languages = null;
	}
}
