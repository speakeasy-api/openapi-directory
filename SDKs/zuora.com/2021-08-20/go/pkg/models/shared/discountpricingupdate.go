// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DiscountPricingUpdateApplyDiscountToEnum - Specifies which type of charge the discount charge applies to.
type DiscountPricingUpdateApplyDiscountToEnum string

const (
	DiscountPricingUpdateApplyDiscountToEnumOnetime               DiscountPricingUpdateApplyDiscountToEnum = "ONETIME"
	DiscountPricingUpdateApplyDiscountToEnumRecurring             DiscountPricingUpdateApplyDiscountToEnum = "RECURRING"
	DiscountPricingUpdateApplyDiscountToEnumUsage                 DiscountPricingUpdateApplyDiscountToEnum = "USAGE"
	DiscountPricingUpdateApplyDiscountToEnumOnetimerecurring      DiscountPricingUpdateApplyDiscountToEnum = "ONETIMERECURRING"
	DiscountPricingUpdateApplyDiscountToEnumOnetimeusage          DiscountPricingUpdateApplyDiscountToEnum = "ONETIMEUSAGE"
	DiscountPricingUpdateApplyDiscountToEnumRecurringusage        DiscountPricingUpdateApplyDiscountToEnum = "RECURRINGUSAGE"
	DiscountPricingUpdateApplyDiscountToEnumOnetimerecurringusage DiscountPricingUpdateApplyDiscountToEnum = "ONETIMERECURRINGUSAGE"
)

func (e *DiscountPricingUpdateApplyDiscountToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ONETIME":
		fallthrough
	case "RECURRING":
		fallthrough
	case "USAGE":
		fallthrough
	case "ONETIMERECURRING":
		fallthrough
	case "ONETIMEUSAGE":
		fallthrough
	case "RECURRINGUSAGE":
		fallthrough
	case "ONETIMERECURRINGUSAGE":
		*e = DiscountPricingUpdateApplyDiscountToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscountPricingUpdateApplyDiscountToEnum: %s", s)
	}
}

// DiscountPricingUpdateDiscountLevelEnum - Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
type DiscountPricingUpdateDiscountLevelEnum string

const (
	DiscountPricingUpdateDiscountLevelEnumRateplan     DiscountPricingUpdateDiscountLevelEnum = "rateplan"
	DiscountPricingUpdateDiscountLevelEnumSubscription DiscountPricingUpdateDiscountLevelEnum = "subscription"
	DiscountPricingUpdateDiscountLevelEnumAccount      DiscountPricingUpdateDiscountLevelEnum = "account"
)

func (e *DiscountPricingUpdateDiscountLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "rateplan":
		fallthrough
	case "subscription":
		fallthrough
	case "account":
		*e = DiscountPricingUpdateDiscountLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscountPricingUpdateDiscountLevelEnum: %s", s)
	}
}

// DiscountPricingUpdatePriceChangeOptionEnum - Specifies how Zuora changes the price of the charge each time the subscription renews.
type DiscountPricingUpdatePriceChangeOptionEnum string

const (
	DiscountPricingUpdatePriceChangeOptionEnumNoChange                       DiscountPricingUpdatePriceChangeOptionEnum = "NoChange"
	DiscountPricingUpdatePriceChangeOptionEnumUseLatestProductCatalogPricing DiscountPricingUpdatePriceChangeOptionEnum = "UseLatestProductCatalogPricing"
)

func (e *DiscountPricingUpdatePriceChangeOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NoChange":
		fallthrough
	case "UseLatestProductCatalogPricing":
		*e = DiscountPricingUpdatePriceChangeOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscountPricingUpdatePriceChangeOptionEnum: %s", s)
	}
}

type DiscountPricingUpdate struct {
	// Specifies which type of charge the discount charge applies to.
	//
	ApplyDiscountTo *DiscountPricingUpdateApplyDiscountToEnum `json:"applyDiscountTo,omitempty"`
	// Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
	//
	DiscountLevel *DiscountPricingUpdateDiscountLevelEnum `json:"discountLevel,omitempty"`
	// The amount of the discount as a percentage. This field is only used for percentage discounts.
	//
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	// Specifies how Zuora changes the price of the charge each time the subscription renews.
	//
	PriceChangeOption *DiscountPricingUpdatePriceChangeOptionEnum `json:"priceChangeOption,omitempty"`
}
