// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntitlementUnitEnum string

const (
	EntitlementUnitEnumCount           EntitlementUnitEnum = "Count"
	EntitlementUnitEnumNone            EntitlementUnitEnum = "None"
	EntitlementUnitEnumSeconds         EntitlementUnitEnum = "Seconds"
	EntitlementUnitEnumMicroseconds    EntitlementUnitEnum = "Microseconds"
	EntitlementUnitEnumMilliseconds    EntitlementUnitEnum = "Milliseconds"
	EntitlementUnitEnumBytes           EntitlementUnitEnum = "Bytes"
	EntitlementUnitEnumKilobytes       EntitlementUnitEnum = "Kilobytes"
	EntitlementUnitEnumMegabytes       EntitlementUnitEnum = "Megabytes"
	EntitlementUnitEnumGigabytes       EntitlementUnitEnum = "Gigabytes"
	EntitlementUnitEnumTerabytes       EntitlementUnitEnum = "Terabytes"
	EntitlementUnitEnumBits            EntitlementUnitEnum = "Bits"
	EntitlementUnitEnumKilobits        EntitlementUnitEnum = "Kilobits"
	EntitlementUnitEnumMegabits        EntitlementUnitEnum = "Megabits"
	EntitlementUnitEnumGigabits        EntitlementUnitEnum = "Gigabits"
	EntitlementUnitEnumTerabits        EntitlementUnitEnum = "Terabits"
	EntitlementUnitEnumPercent         EntitlementUnitEnum = "Percent"
	EntitlementUnitEnumBytesSecond     EntitlementUnitEnum = "Bytes/Second"
	EntitlementUnitEnumKilobytesSecond EntitlementUnitEnum = "Kilobytes/Second"
	EntitlementUnitEnumMegabytesSecond EntitlementUnitEnum = "Megabytes/Second"
	EntitlementUnitEnumGigabytesSecond EntitlementUnitEnum = "Gigabytes/Second"
	EntitlementUnitEnumTerabytesSecond EntitlementUnitEnum = "Terabytes/Second"
	EntitlementUnitEnumBitsSecond      EntitlementUnitEnum = "Bits/Second"
	EntitlementUnitEnumKilobitsSecond  EntitlementUnitEnum = "Kilobits/Second"
	EntitlementUnitEnumMegabitsSecond  EntitlementUnitEnum = "Megabits/Second"
	EntitlementUnitEnumGigabitsSecond  EntitlementUnitEnum = "Gigabits/Second"
	EntitlementUnitEnumTerabitsSecond  EntitlementUnitEnum = "Terabits/Second"
	EntitlementUnitEnumCountSecond     EntitlementUnitEnum = "Count/Second"
)

func (e *EntitlementUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Count":
		fallthrough
	case "None":
		fallthrough
	case "Seconds":
		fallthrough
	case "Microseconds":
		fallthrough
	case "Milliseconds":
		fallthrough
	case "Bytes":
		fallthrough
	case "Kilobytes":
		fallthrough
	case "Megabytes":
		fallthrough
	case "Gigabytes":
		fallthrough
	case "Terabytes":
		fallthrough
	case "Bits":
		fallthrough
	case "Kilobits":
		fallthrough
	case "Megabits":
		fallthrough
	case "Gigabits":
		fallthrough
	case "Terabits":
		fallthrough
	case "Percent":
		fallthrough
	case "Bytes/Second":
		fallthrough
	case "Kilobytes/Second":
		fallthrough
	case "Megabytes/Second":
		fallthrough
	case "Gigabytes/Second":
		fallthrough
	case "Terabytes/Second":
		fallthrough
	case "Bits/Second":
		fallthrough
	case "Kilobits/Second":
		fallthrough
	case "Megabits/Second":
		fallthrough
	case "Gigabits/Second":
		fallthrough
	case "Terabits/Second":
		fallthrough
	case "Count/Second":
		*e = EntitlementUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EntitlementUnitEnum: %s", s)
	}
}
