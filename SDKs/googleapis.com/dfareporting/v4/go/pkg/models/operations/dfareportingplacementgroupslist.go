// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DfareportingPlacementGroupsListSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DfareportingPlacementGroupsListActiveStatusEnum string

const (
	DfareportingPlacementGroupsListActiveStatusEnumPlacementStatusUnknown             DfareportingPlacementGroupsListActiveStatusEnum = "PLACEMENT_STATUS_UNKNOWN"
	DfareportingPlacementGroupsListActiveStatusEnumPlacementStatusActive              DfareportingPlacementGroupsListActiveStatusEnum = "PLACEMENT_STATUS_ACTIVE"
	DfareportingPlacementGroupsListActiveStatusEnumPlacementStatusInactive            DfareportingPlacementGroupsListActiveStatusEnum = "PLACEMENT_STATUS_INACTIVE"
	DfareportingPlacementGroupsListActiveStatusEnumPlacementStatusArchived            DfareportingPlacementGroupsListActiveStatusEnum = "PLACEMENT_STATUS_ARCHIVED"
	DfareportingPlacementGroupsListActiveStatusEnumPlacementStatusPermanentlyArchived DfareportingPlacementGroupsListActiveStatusEnum = "PLACEMENT_STATUS_PERMANENTLY_ARCHIVED"
)

func (e DfareportingPlacementGroupsListActiveStatusEnum) ToPointer() *DfareportingPlacementGroupsListActiveStatusEnum {
	return &e
}

func (e *DfareportingPlacementGroupsListActiveStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLACEMENT_STATUS_UNKNOWN":
		fallthrough
	case "PLACEMENT_STATUS_ACTIVE":
		fallthrough
	case "PLACEMENT_STATUS_INACTIVE":
		fallthrough
	case "PLACEMENT_STATUS_ARCHIVED":
		fallthrough
	case "PLACEMENT_STATUS_PERMANENTLY_ARCHIVED":
		*e = DfareportingPlacementGroupsListActiveStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DfareportingPlacementGroupsListActiveStatusEnum: %v", v)
	}
}

// DfareportingPlacementGroupsListPlacementGroupTypeEnum - Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
type DfareportingPlacementGroupsListPlacementGroupTypeEnum string

const (
	DfareportingPlacementGroupsListPlacementGroupTypeEnumPlacementPackage   DfareportingPlacementGroupsListPlacementGroupTypeEnum = "PLACEMENT_PACKAGE"
	DfareportingPlacementGroupsListPlacementGroupTypeEnumPlacementRoadblock DfareportingPlacementGroupsListPlacementGroupTypeEnum = "PLACEMENT_ROADBLOCK"
)

func (e DfareportingPlacementGroupsListPlacementGroupTypeEnum) ToPointer() *DfareportingPlacementGroupsListPlacementGroupTypeEnum {
	return &e
}

func (e *DfareportingPlacementGroupsListPlacementGroupTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLACEMENT_PACKAGE":
		fallthrough
	case "PLACEMENT_ROADBLOCK":
		*e = DfareportingPlacementGroupsListPlacementGroupTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DfareportingPlacementGroupsListPlacementGroupTypeEnum: %v", v)
	}
}

type DfareportingPlacementGroupsListPricingTypesEnum string

const (
	DfareportingPlacementGroupsListPricingTypesEnumPricingTypeCpm                 DfareportingPlacementGroupsListPricingTypesEnum = "PRICING_TYPE_CPM"
	DfareportingPlacementGroupsListPricingTypesEnumPricingTypeCpc                 DfareportingPlacementGroupsListPricingTypesEnum = "PRICING_TYPE_CPC"
	DfareportingPlacementGroupsListPricingTypesEnumPricingTypeCpa                 DfareportingPlacementGroupsListPricingTypesEnum = "PRICING_TYPE_CPA"
	DfareportingPlacementGroupsListPricingTypesEnumPricingTypeFlatRateImpressions DfareportingPlacementGroupsListPricingTypesEnum = "PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
	DfareportingPlacementGroupsListPricingTypesEnumPricingTypeFlatRateClicks      DfareportingPlacementGroupsListPricingTypesEnum = "PRICING_TYPE_FLAT_RATE_CLICKS"
	DfareportingPlacementGroupsListPricingTypesEnumPricingTypeCpmActiveview       DfareportingPlacementGroupsListPricingTypesEnum = "PRICING_TYPE_CPM_ACTIVEVIEW"
)

func (e DfareportingPlacementGroupsListPricingTypesEnum) ToPointer() *DfareportingPlacementGroupsListPricingTypesEnum {
	return &e
}

func (e *DfareportingPlacementGroupsListPricingTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRICING_TYPE_CPM":
		fallthrough
	case "PRICING_TYPE_CPC":
		fallthrough
	case "PRICING_TYPE_CPA":
		fallthrough
	case "PRICING_TYPE_FLAT_RATE_IMPRESSIONS":
		fallthrough
	case "PRICING_TYPE_FLAT_RATE_CLICKS":
		fallthrough
	case "PRICING_TYPE_CPM_ACTIVEVIEW":
		*e = DfareportingPlacementGroupsListPricingTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DfareportingPlacementGroupsListPricingTypesEnum: %v", v)
	}
}

// DfareportingPlacementGroupsListSortFieldEnum - Field by which to sort the list.
type DfareportingPlacementGroupsListSortFieldEnum string

const (
	DfareportingPlacementGroupsListSortFieldEnumID   DfareportingPlacementGroupsListSortFieldEnum = "ID"
	DfareportingPlacementGroupsListSortFieldEnumName DfareportingPlacementGroupsListSortFieldEnum = "NAME"
)

func (e DfareportingPlacementGroupsListSortFieldEnum) ToPointer() *DfareportingPlacementGroupsListSortFieldEnum {
	return &e
}

func (e *DfareportingPlacementGroupsListSortFieldEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ID":
		fallthrough
	case "NAME":
		*e = DfareportingPlacementGroupsListSortFieldEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DfareportingPlacementGroupsListSortFieldEnum: %v", v)
	}
}

// DfareportingPlacementGroupsListSortOrderEnum - Order of sorted results.
type DfareportingPlacementGroupsListSortOrderEnum string

const (
	DfareportingPlacementGroupsListSortOrderEnumAscending  DfareportingPlacementGroupsListSortOrderEnum = "ASCENDING"
	DfareportingPlacementGroupsListSortOrderEnumDescending DfareportingPlacementGroupsListSortOrderEnum = "DESCENDING"
)

func (e DfareportingPlacementGroupsListSortOrderEnum) ToPointer() *DfareportingPlacementGroupsListSortOrderEnum {
	return &e
}

func (e *DfareportingPlacementGroupsListSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASCENDING":
		fallthrough
	case "DESCENDING":
		*e = DfareportingPlacementGroupsListSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DfareportingPlacementGroupsListSortOrderEnum: %v", v)
	}
}

type DfareportingPlacementGroupsListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Select only placements with these active statuses.
	ActiveStatus []DfareportingPlacementGroupsListActiveStatusEnum `queryParam:"style=form,explode=true,name=activeStatus"`
	// Select only placement groups that belong to these advertisers.
	AdvertiserIds []string `queryParam:"style=form,explode=true,name=advertiserIds"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Select only placement groups that belong to these campaigns.
	CampaignIds []string `queryParam:"style=form,explode=true,name=campaignIds"`
	// Select only placement groups that are associated with these content categories.
	ContentCategoryIds []string `queryParam:"style=form,explode=true,name=contentCategoryIds"`
	// Select only placement groups that are associated with these directory sites.
	DirectorySiteIds []string `queryParam:"style=form,explode=true,name=directorySiteIds"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Select only placement groups with these IDs.
	Ids []string `queryParam:"style=form,explode=true,name=ids"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
	MaxEndDate *string `queryParam:"style=form,explode=true,name=maxEndDate"`
	// Maximum number of results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
	MaxStartDate *string `queryParam:"style=form,explode=true,name=maxStartDate"`
	// Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
	MinEndDate *string `queryParam:"style=form,explode=true,name=minEndDate"`
	// Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
	MinStartDate *string `queryParam:"style=form,explode=true,name=minStartDate"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Value of the nextPageToken from the previous result page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
	PlacementGroupType *DfareportingPlacementGroupsListPlacementGroupTypeEnum `queryParam:"style=form,explode=true,name=placementGroupType"`
	// Select only placement groups that are associated with these placement strategies.
	PlacementStrategyIds []string `queryParam:"style=form,explode=true,name=placementStrategyIds"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Select only placement groups with these pricing types.
	PricingTypes []DfareportingPlacementGroupsListPricingTypesEnum `queryParam:"style=form,explode=true,name=pricingTypes"`
	// User profile ID associated with this request.
	ProfileID string `pathParam:"style=simple,explode=false,name=profileId"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
	SearchString *string `queryParam:"style=form,explode=true,name=searchString"`
	// Select only placement groups that are associated with these sites.
	SiteIds []string `queryParam:"style=form,explode=true,name=siteIds"`
	// Field by which to sort the list.
	SortField *DfareportingPlacementGroupsListSortFieldEnum `queryParam:"style=form,explode=true,name=sortField"`
	// Order of sorted results.
	SortOrder *DfareportingPlacementGroupsListSortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type DfareportingPlacementGroupsListResponse struct {
	ContentType string
	// Successful response
	PlacementGroupsListResponse *shared.PlacementGroupsListResponse
	StatusCode                  int
	RawResponse                 *http.Response
}
