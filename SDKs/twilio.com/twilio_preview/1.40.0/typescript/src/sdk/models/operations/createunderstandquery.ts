/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateUnderstandQueryServerList = [
  "https://preview.twilio.com",
] as const;

export class CreateUnderstandQuerySecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateUnderstandQueryCreateUnderstandQueryRequest extends SpeakeasyBase {
  /**
   * Constraints the query to a given Field with an task. Useful when you know the Field you are expecting. It accepts one field in the format *task-unique-name-1*:*field-unique-name*
   */
  @SpeakeasyMetadata({ data: "form, name=Field" })
  field?: string;

  /**
   * An ISO language-country string of the sample.
   */
  @SpeakeasyMetadata({ data: "form, name=Language" })
  language: string;

  /**
   * The Model Build Sid or unique name of the Model Build to be queried.
   */
  @SpeakeasyMetadata({ data: "form, name=ModelBuild" })
  modelBuild?: string;

  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. It can be up to 2048 characters long.
   */
  @SpeakeasyMetadata({ data: "form, name=Query" })
  query: string;

  /**
   * Constraints the query to a set of tasks. Useful when you need to constrain the paths the user can take. Tasks should be comma separated *task-unique-name-1*, *task-unique-name-2*
   */
  @SpeakeasyMetadata({ data: "form, name=Tasks" })
  tasks?: string;
}

export class CreateUnderstandQueryRequest extends SpeakeasyBase {
  /**
   * The unique ID of the parent Assistant.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=AssistantSid",
  })
  assistantSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateUnderstandQueryCreateUnderstandQueryRequest;
}

export class CreateUnderstandQueryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  previewUnderstandAssistantQuery?: shared.PreviewUnderstandAssistantQuery;
}
