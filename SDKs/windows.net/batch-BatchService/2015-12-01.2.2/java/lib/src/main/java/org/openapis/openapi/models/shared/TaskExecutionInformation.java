/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TaskExecutionInformation - Information about the execution of a task.
 */
public class TaskExecutionInformation {
    /**
     * Gets or sets the time at which the task completed. This property is set only if the task is in the Completed state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;
    public TaskExecutionInformation withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Gets or sets the exit code of the task. This property is set only if the task is in completed state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exitCode")
    public Integer exitCode;
    public TaskExecutionInformation withExitCode(Integer exitCode) {
        this.exitCode = exitCode;
        return this;
    }
    
    /**
     * Gets or sets the most recent time at which the task has been requeued by the Batch service as the result of a user request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastRequeueTime")
    public OffsetDateTime lastRequeueTime;
    public TaskExecutionInformation withLastRequeueTime(OffsetDateTime lastRequeueTime) {
        this.lastRequeueTime = lastRequeueTime;
        return this;
    }
    
    /**
     * Gets or sets the most recent time at which a retry of the task started running.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastRetryTime")
    public OffsetDateTime lastRetryTime;
    public TaskExecutionInformation withLastRetryTime(OffsetDateTime lastRetryTime) {
        this.lastRetryTime = lastRetryTime;
        return this;
    }
    
    /**
     * Gets or sets the number of times the task has been requeued by the Batch service as the result of a user request.
     */
    @JsonProperty("requeueCount")
    public Integer requeueCount;
    public TaskExecutionInformation withRequeueCount(Integer requeueCount) {
        this.requeueCount = requeueCount;
        return this;
    }
    
    /**
     * Gets or sets the number of times the task has been retried by the Batch service.
     */
    @JsonProperty("retryCount")
    public Integer retryCount;
    public TaskExecutionInformation withRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
        return this;
    }
    
    /**
     * Information about an error when scheduling a task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingError")
    public TaskSchedulingError schedulingError;
    public TaskExecutionInformation withSchedulingError(TaskSchedulingError schedulingError) {
        this.schedulingError = schedulingError;
        return this;
    }
    
    /**
     * Gets or sets the time at which the task started running. If the task has been restarted or retried, this is the most recent time at which the task started running.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;
    public TaskExecutionInformation withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
}
