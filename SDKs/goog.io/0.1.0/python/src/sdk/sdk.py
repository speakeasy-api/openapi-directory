"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://api.goog.io",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# Intoduction
    
    This is the OpenAPI V3 documentation for https://api.goog.io
    
    An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.
    
    Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.
    
    Googio is the ultimate search API for Google Searches, Google News, and Google SERP.
    # Docs
    
    > An Unofficial Google Search API
    
    An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.
    
    Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.
    
    # Example Code
    
     Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.
    
    # Authentication
    
    ### API Key
    
    Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.
    
    Authenticated requests must include an `apikey` header containing your subscription's API Key.
    
    | Security Schema Type | Header Name | Example Token |
    | --- | --- | --- |
    | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |
    
    In the following example, `YOU_APIKEY` represents the auth token for your account.
    
    ```
    curl --header 'apikey: YOU_APIKEY'
    ```
    
    You can view and manage your API keys in the [Dashboard](/dashboard).
    
    Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.
    
    Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.
    
    
    ## Rate Limits
    
    API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:
    
    | Header | Description |
    | ------ | ----------- |
    | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. |
    | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |
    | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |
    
    When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":
    
    ```json
    {
      \"error\": {
        \"code\": \"too_many_requests\",
        \"message\": \"Rate limit exceeded\"
      }
    }
    ```
    
    
    
    ## Errors
    
    This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def crawl(self, request: operations.CrawlRequest) -> operations.CrawlResponse:
        r"""Crawl
        Perform Google Search
        
         Parameters
        ----------
        query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating
        
        Returns
        -------
        json: a the html source of the results page
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrawlRequest, base_url, '/v1/crawl/{query}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrawlResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Crawl200ApplicationJSON])
                res.crawl_200_application_json_object = out
        elif http_res.status_code in [404, 429]:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def get_the_status_of_the_api_service(self) -> operations.GetTheStatusOfTheAPIServiceResponse:
        r"""Status
        It \"status\" == true then API is up, else the API is down
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTheStatusOfTheAPIServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTheStatusOfTheAPIService200ApplicationJSON])
                res.get_the_status_of_the_api_service_200_application_json_object = out
        elif http_res.status_code == 404:
            pass

        return res

    def images(self, request: operations.ImagesRequest) -> operations.ImagesResponse:
        r"""Images
        Perform Google Image Search
        
        Parameters
        ----------
        query : the string query to perform search. supports advance queries.
        
        Returns
        -------
        json: a list of results with the link, description, and title for each result
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImagesRequest, base_url, '/v1/images/{query}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Images200ApplicationJSON])
                res.images_200_application_json_object = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def news(self, request: operations.NewsRequest) -> operations.NewsResponse:
        r"""News
        Perform Google News Search
        
         Parameters
        ----------
        query : the string query to perform search for Google news. A simple query for `president` will be `q=president`. An example of multiple keyword would be `q=news+about+presdient+trump`. News can also be filtered by country and language. For `US` news and in English the query will be `q=trump&ceid=US:en` for news in Great Britian the query will be `q=trump&ceid=GB:en`
        
        Returns
        -------
        json: {\"feed\": { \"title\" : \"trump\" ...} , \"entites\": [ {\"title\" : \"Trump doubles down on divisive messaging in speech to honor Independence Day - CNN\", \"links\": []} ...]}
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.NewsRequest, base_url, '/v1/news/{query}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.News200ApplicationJSON])
                res.news_200_application_json_object = out
        elif http_res.status_code in [404, 429]:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def search(self, request: operations.SearchRequest) -> operations.SearchResponse:
        r"""Search
        Perform Google Search
        
        Parameters
        ----------
        query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating
        
        Returns
        -------
        json: a list of results with the link, description, and title for each result
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SearchRequest, base_url, '/v1/search/{query}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Search200ApplicationJSON])
                res.search_200_application_json_object = out
        elif http_res.status_code in [404, 429]:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def serp(self, request: shared.SerpData) -> operations.SerpResponse:
        r"""SERP
        Perform Google Search and search for website in Search Engine Results Pages (SERP)
        
        Parameters
        ----------
        query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formatting, it is recommended to set the query `&num=100`
        
        Returns
        -------
        json: a list of results with the query, website, searched_results, and position. json[\"position\"] will be set to -1 if website is not found in results
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/serp/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SerpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Serp200ApplicationJSON])
                res.serp_200_application_json_object = out
        elif http_res.status_code in [404, 429]:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    