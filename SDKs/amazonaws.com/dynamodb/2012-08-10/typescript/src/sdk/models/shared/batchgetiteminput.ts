/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { KeysAndAttributes } from "./keysandattributes";
import { ReturnConsumedCapacityEnum } from "./returnconsumedcapacityenum";
import { Expose, Transform } from "class-transformer";

/**
 * Represents the input of a <code>BatchGetItem</code> operation.
 */
export class BatchGetItemInput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: KeysAndAttributes })
  @Expose({ name: "RequestItems" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, KeysAndAttributes> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], KeysAndAttributes);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  requestItems: Record<string, KeysAndAttributes>;

  /**
   * <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p> <ul> <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li> <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li> <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReturnConsumedCapacity" })
  returnConsumedCapacity?: ReturnConsumedCapacityEnum;
}
