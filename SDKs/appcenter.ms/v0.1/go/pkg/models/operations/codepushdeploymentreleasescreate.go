// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CodePushDeploymentReleasesCreateSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// CodePushDeploymentReleasesCreateRequestBodyReleaseUpload - The upload metadata from the release initialization step.
type CodePushDeploymentReleasesCreateRequestBodyReleaseUpload struct {
	// The ID for the newly created upload. It is going to be required later in the process.
	ID string `json:"id"`
	// The URL encoded token used for upload permissions.
	Token string `json:"token"`
	// The URL domain used to upload the release.
	UploadDomain string `json:"upload_domain"`
}

// CodePushDeploymentReleasesCreateRequestBody - The necessary information required to download the bundle and being the release process.
type CodePushDeploymentReleasesCreateRequestBody struct {
	// This specifies which deployment you want to release the update to. Default is Staging.
	DeploymentName *string `json:"deployment_name,omitempty"`
	// This provides an optional "change log" for the deployment.
	Description *string `json:"description,omitempty"`
	// This specifies whether an update should be downloadable by end users or not.
	Disabled *bool `json:"disabled,omitempty"`
	// This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).
	Mandatory *bool `json:"mandatory,omitempty"`
	// This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.
	NoDuplicateReleaseError *bool `json:"no_duplicate_release_error,omitempty"`
	// The upload metadata from the release initialization step.
	ReleaseUpload CodePushDeploymentReleasesCreateRequestBodyReleaseUpload `json:"release_upload"`
	// This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.
	Rollout *int64 `json:"rollout,omitempty"`
	// the binary version of the application
	TargetBinaryVersion string `json:"target_binary_version"`
}

type CodePushDeploymentReleasesCreateRequest struct {
	// The necessary information required to download the bundle and being the release process.
	RequestBody CodePushDeploymentReleasesCreateRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// deployment name
	DeploymentName string `pathParam:"style=simple,explode=false,name=deployment_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// CodePushDeploymentReleasesCreateDefaultApplicationJSON - Error
type CodePushDeploymentReleasesCreateDefaultApplicationJSON struct {
	Message string `json:"message"`
}

type CodePushDeploymentReleasesCreate201ApplicationJSONDiffPackageMap struct {
	Size float64 `json:"size"`
	URL  string  `json:"url"`
}

// CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum - The release method is unknown if unspecified
type CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum string

const (
	CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnumUpload   CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum = "Upload"
	CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnumPromote  CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum = "Promote"
	CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnumRollback CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum = "Rollback"
)

func (e CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum) ToPointer() *CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum {
	return &e
}

func (e *CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Upload":
		fallthrough
	case "Promote":
		fallthrough
	case "Rollback":
		*e = CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum: %v", v)
	}
}

// CodePushDeploymentReleasesCreate201ApplicationJSON - Success
type CodePushDeploymentReleasesCreate201ApplicationJSON struct {
	BlobURL        *string                                                                     `json:"blob_url,omitempty"`
	Description    *string                                                                     `json:"description,omitempty"`
	DiffPackageMap map[string]CodePushDeploymentReleasesCreate201ApplicationJSONDiffPackageMap `json:"diff_package_map,omitempty"`
	IsDisabled     *bool                                                                       `json:"is_disabled,omitempty"`
	IsMandatory    *bool                                                                       `json:"is_mandatory,omitempty"`
	Label          *string                                                                     `json:"label,omitempty"`
	// Set on 'Promote'
	OriginalDeployment *string `json:"original_deployment,omitempty"`
	// Set on 'Promote' and 'Rollback'
	OriginalLabel *string `json:"original_label,omitempty"`
	PackageHash   *string `json:"package_hash,omitempty"`
	// The release method is unknown if unspecified
	ReleaseMethod     *CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum `json:"release_method,omitempty"`
	ReleasedBy        *string                                                              `json:"released_by,omitempty"`
	Rollout           *int64                                                               `json:"rollout,omitempty"`
	Size              *float64                                                             `json:"size,omitempty"`
	TargetBinaryRange *string                                                              `json:"target_binary_range,omitempty"`
	UploadTime        *int64                                                               `json:"upload_time,omitempty"`
}

type CodePushDeploymentReleasesCreateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	CodePushDeploymentReleasesCreate201ApplicationJSONObject *CodePushDeploymentReleasesCreate201ApplicationJSON
	// Error
	CodePushDeploymentReleasesCreateDefaultApplicationJSONObject *CodePushDeploymentReleasesCreateDefaultApplicationJSON
}
