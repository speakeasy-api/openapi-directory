// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutInsightSelectorsXAmzTargetEnum
type PutInsightSelectorsXAmzTargetEnum string

const (
	PutInsightSelectorsXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101PutInsightSelectors PutInsightSelectorsXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutInsightSelectors"
)

func (e *PutInsightSelectorsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutInsightSelectors":
		*e = PutInsightSelectorsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutInsightSelectorsXAmzTargetEnum: %s", s)
	}
}

type PutInsightSelectorsRequest struct {
	PutInsightSelectorsRequest shared.PutInsightSelectorsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 PutInsightSelectorsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutInsightSelectorsResponse struct {
	// CloudTrailARNInvalidException
	CloudTrailARNInvalidException interface{}
	ContentType                   string
	// InsufficientEncryptionPolicyException
	InsufficientEncryptionPolicyException interface{}
	// InsufficientS3BucketPolicyException
	InsufficientS3BucketPolicyException interface{}
	// InvalidHomeRegionException
	InvalidHomeRegionException interface{}
	// InvalidInsightSelectorsException
	InvalidInsightSelectorsException interface{}
	// InvalidTrailNameException
	InvalidTrailNameException interface{}
	// KmsException
	KmsException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// NotOrganizationMasterAccountException
	NotOrganizationMasterAccountException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// Success
	PutInsightSelectorsResponse *shared.PutInsightSelectorsResponse
	// S3BucketDoesNotExistException
	S3BucketDoesNotExistException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// TrailNotFoundException
	TrailNotFoundException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
