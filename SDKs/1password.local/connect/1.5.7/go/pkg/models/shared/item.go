// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ItemCategoryEnum string

const (
	ItemCategoryEnumLogin                ItemCategoryEnum = "LOGIN"
	ItemCategoryEnumPassword             ItemCategoryEnum = "PASSWORD"
	ItemCategoryEnumAPICredential        ItemCategoryEnum = "API_CREDENTIAL"
	ItemCategoryEnumServer               ItemCategoryEnum = "SERVER"
	ItemCategoryEnumDatabase             ItemCategoryEnum = "DATABASE"
	ItemCategoryEnumCreditCard           ItemCategoryEnum = "CREDIT_CARD"
	ItemCategoryEnumMembership           ItemCategoryEnum = "MEMBERSHIP"
	ItemCategoryEnumPassport             ItemCategoryEnum = "PASSPORT"
	ItemCategoryEnumSoftwareLicense      ItemCategoryEnum = "SOFTWARE_LICENSE"
	ItemCategoryEnumOutdoorLicense       ItemCategoryEnum = "OUTDOOR_LICENSE"
	ItemCategoryEnumSecureNote           ItemCategoryEnum = "SECURE_NOTE"
	ItemCategoryEnumWirelessRouter       ItemCategoryEnum = "WIRELESS_ROUTER"
	ItemCategoryEnumBankAccount          ItemCategoryEnum = "BANK_ACCOUNT"
	ItemCategoryEnumDriverLicense        ItemCategoryEnum = "DRIVER_LICENSE"
	ItemCategoryEnumIdentity             ItemCategoryEnum = "IDENTITY"
	ItemCategoryEnumRewardProgram        ItemCategoryEnum = "REWARD_PROGRAM"
	ItemCategoryEnumDocument             ItemCategoryEnum = "DOCUMENT"
	ItemCategoryEnumEmailAccount         ItemCategoryEnum = "EMAIL_ACCOUNT"
	ItemCategoryEnumSocialSecurityNumber ItemCategoryEnum = "SOCIAL_SECURITY_NUMBER"
	ItemCategoryEnumMedicalRecord        ItemCategoryEnum = "MEDICAL_RECORD"
	ItemCategoryEnumSSHKey               ItemCategoryEnum = "SSH_KEY"
	ItemCategoryEnumCustom               ItemCategoryEnum = "CUSTOM"
)

func (e *ItemCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOGIN":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "API_CREDENTIAL":
		fallthrough
	case "SERVER":
		fallthrough
	case "DATABASE":
		fallthrough
	case "CREDIT_CARD":
		fallthrough
	case "MEMBERSHIP":
		fallthrough
	case "PASSPORT":
		fallthrough
	case "SOFTWARE_LICENSE":
		fallthrough
	case "OUTDOOR_LICENSE":
		fallthrough
	case "SECURE_NOTE":
		fallthrough
	case "WIRELESS_ROUTER":
		fallthrough
	case "BANK_ACCOUNT":
		fallthrough
	case "DRIVER_LICENSE":
		fallthrough
	case "IDENTITY":
		fallthrough
	case "REWARD_PROGRAM":
		fallthrough
	case "DOCUMENT":
		fallthrough
	case "EMAIL_ACCOUNT":
		fallthrough
	case "SOCIAL_SECURITY_NUMBER":
		fallthrough
	case "MEDICAL_RECORD":
		fallthrough
	case "SSH_KEY":
		fallthrough
	case "CUSTOM":
		*e = ItemCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemCategoryEnum: %s", s)
	}
}

type ItemStateEnum string

const (
	ItemStateEnumArchived ItemStateEnum = "ARCHIVED"
	ItemStateEnumDeleted  ItemStateEnum = "DELETED"
)

func (e *ItemStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ARCHIVED":
		fallthrough
	case "DELETED":
		*e = ItemStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemStateEnum: %s", s)
	}
}

type ItemUrls struct {
	Href    string  `json:"href"`
	Label   *string `json:"label,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

type ItemVault struct {
	ID string `json:"id"`
}

type Item struct {
	Category     ItemCategoryEnum `json:"category"`
	CreatedAt    *time.Time       `json:"createdAt,omitempty"`
	Favorite     *bool            `json:"favorite,omitempty"`
	ID           *string          `json:"id,omitempty"`
	LastEditedBy *string          `json:"lastEditedBy,omitempty"`
	State        *ItemStateEnum   `json:"state,omitempty"`
	Tags         []string         `json:"tags,omitempty"`
	Title        *string          `json:"title,omitempty"`
	UpdatedAt    *time.Time       `json:"updatedAt,omitempty"`
	Urls         []ItemUrls       `json:"urls,omitempty"`
	Vault        ItemVault        `json:"vault"`
	Version      *int64           `json:"version,omitempty"`
}
