// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type PepMonitorUpdateSecurity struct {
	UserKey shared.SchemeUserKey `security:"scheme,type=apiKey,subtype=header"`
}

type PepMonitorUpdatePathParams struct {
	// The identifier of the Monitor
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// PepMonitorUpdateRequestBody - Pass new Webhook as post parameter
type PepMonitorUpdateRequestBody struct {
	// If Monitoring is enabled this parameter is required. This is where updates will be sent to
	Webhook *string `form:"name=Webhook"`
}

type PepMonitorUpdateRequest struct {
	PathParams PepMonitorUpdatePathParams
	// Pass new Webhook as post parameter
	Request  *PepMonitorUpdateRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	Security PepMonitorUpdateSecurity
}

// PepMonitorUpdateDefaultApplicationJSON - Detailed information about the error
type PepMonitorUpdateDefaultApplicationJSON struct {
	Code    int     `json:"code"`
	Fault   *string `json:"fault,omitempty"`
	Message string  `json:"message"`
	Tag     string  `json:"tag"`
}

// PepMonitorUpdate200ApplicationJSON - View a monitor for a Pep Sanction Report
type PepMonitorUpdate200ApplicationJSON struct {
	Active     *bool       `json:"active,omitempty"`
	CaseID     *string     `json:"caseId,omitempty"`
	Created    *types.Date `json:"created,omitempty"`
	Identifier *string     `json:"identifier,omitempty"`
	Structured *string     `json:"structured,omitempty"`
	Updated    *string     `json:"updated,omitempty"`
	Webhook    *string     `json:"webhook,omitempty"`
}

type PepMonitorUpdateResponse struct {
	ContentType string
	// View a monitor for a Pep Sanction Report
	PepMonitorUpdate200ApplicationJSONObject *PepMonitorUpdate200ApplicationJSON
	// Detailed information about the error
	PepMonitorUpdateDefaultApplicationJSONObject *PepMonitorUpdateDefaultApplicationJSON
	StatusCode                                   int
	RawResponse                                  *http.Response
}
