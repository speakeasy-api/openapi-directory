"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import audiostream as shared_audiostream
from ..shared import textstream as shared_textstream
from ..shared import videostream as shared_videostream
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ElementaryStream:
    r"""Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats."""
    
    audio_stream: Optional[shared_audiostream.AudioStream] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioStream'), 'exclude': lambda f: f is None }})
    r"""Audio stream resource."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""A unique key for this elementary stream."""  
    text_stream: Optional[shared_textstream.TextStream] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textStream'), 'exclude': lambda f: f is None }})
    r"""Encoding of a text stream. For example, closed captions or subtitles."""  
    video_stream: Optional[shared_videostream.VideoStream] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoStream'), 'exclude': lambda f: f is None }})
    r"""Video stream resource."""  
    