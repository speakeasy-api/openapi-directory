// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ComparisonOperatorEnum string

const (
	ComparisonOperatorEnumLessThan          ComparisonOperatorEnum = "less-than"
	ComparisonOperatorEnumLessThanEquals    ComparisonOperatorEnum = "less-than-equals"
	ComparisonOperatorEnumGreaterThan       ComparisonOperatorEnum = "greater-than"
	ComparisonOperatorEnumGreaterThanEquals ComparisonOperatorEnum = "greater-than-equals"
	ComparisonOperatorEnumInCidrSet         ComparisonOperatorEnum = "in-cidr-set"
	ComparisonOperatorEnumNotInCidrSet      ComparisonOperatorEnum = "not-in-cidr-set"
	ComparisonOperatorEnumInPortSet         ComparisonOperatorEnum = "in-port-set"
	ComparisonOperatorEnumNotInPortSet      ComparisonOperatorEnum = "not-in-port-set"
	ComparisonOperatorEnumInSet             ComparisonOperatorEnum = "in-set"
	ComparisonOperatorEnumNotInSet          ComparisonOperatorEnum = "not-in-set"
)

func (e ComparisonOperatorEnum) ToPointer() *ComparisonOperatorEnum {
	return &e
}

func (e *ComparisonOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "less-than":
		fallthrough
	case "less-than-equals":
		fallthrough
	case "greater-than":
		fallthrough
	case "greater-than-equals":
		fallthrough
	case "in-cidr-set":
		fallthrough
	case "not-in-cidr-set":
		fallthrough
	case "in-port-set":
		fallthrough
	case "not-in-port-set":
		fallthrough
	case "in-set":
		fallthrough
	case "not-in-set":
		*e = ComparisonOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComparisonOperatorEnum: %v", v)
	}
}
