/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints for listing properties.
 */
export class Properties {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get account properties
   *
   * @remarks
   * Endpoint to list account properties.
   */
  getAccountProperties(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountPropertiesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/properties/accounts";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountPropertiesResponse =
        new operations.GetAccountPropertiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAccountProperties200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAccountProperties200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAccountProperties400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAccountProperties400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAccountProperties401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAccountProperties401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAccountProperties403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAccountProperties403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAccountProperties429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAccountProperties429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAccountProperties500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAccountProperties500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get user properties
   *
   * @remarks
   * Endpoint to list user properties.
   */
  getUserProperties(
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserPropertiesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/properties/users";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserPropertiesResponse =
        new operations.GetUserPropertiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserProperties200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetUserProperties200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserProperties400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetUserProperties400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserProperties401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetUserProperties401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserProperties403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetUserProperties403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserProperties429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetUserProperties429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserProperties500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetUserProperties500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
