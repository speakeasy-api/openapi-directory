"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SpotInsertions:
    r"""Spot insertions define spots to play when a cue is received."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_api_v2_spotinsertions_id_(self, request: operations.DeleteAPIV2SpotinsertionsIDRequest, security: operations.DeleteAPIV2SpotinsertionsIDSecurity) -> operations.DeleteAPIV2SpotinsertionsIDResponse:
        r"""Deletes the spot insertion with the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIV2SpotinsertionsIDRequest, base_url, '/api/v2/spotinsertions/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIV2SpotinsertionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_api_v2_spotinsertions(self, request: operations.GetAPIV2SpotinsertionsRequest, security: operations.GetAPIV2SpotinsertionsSecurity) -> operations.GetAPIV2SpotinsertionsResponse:
        r"""Returns the spot insertions matching the query parameters."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/spotinsertions'
        
        query_params = utils.get_query_params(operations.GetAPIV2SpotinsertionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2SpotinsertionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SpotInsertion]])
                res.spot_insertions = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_api_v2_spotinsertions_id_(self, request: operations.GetAPIV2SpotinsertionsIDRequest, security: operations.GetAPIV2SpotinsertionsIDSecurity) -> operations.GetAPIV2SpotinsertionsIDResponse:
        r"""Returns the spot insertion matching the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2SpotinsertionsIDRequest, base_url, '/api/v2/spotinsertions/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2SpotinsertionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SpotInsertion])
                res.spot_insertion = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v2_spotinsertions(self, request: shared.SpotInsertionInput, security: operations.PostAPIV2SpotinsertionsSecurity) -> operations.PostAPIV2SpotinsertionsResponse:
        r"""Creates a new spot insertion."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/spotinsertions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV2SpotinsertionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SpotInsertion])
                res.spot_insertion = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    