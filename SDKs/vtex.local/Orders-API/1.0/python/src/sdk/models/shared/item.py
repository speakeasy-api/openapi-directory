"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import additionalinfo as shared_additionalinfo
from ..shared import itemattachment as shared_itemattachment
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItemAttachmentOfferings:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the attachment."""  
    required: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required') }})
    r"""If the attachment is required (`true`) or not (`false`)."""  
    schema: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schema') }})
    r"""Schema of the content declared in the field `attachmentOfferings`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItemPriceDefinitionsSellingPrices:
    
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})
    r"""Quantity of items."""  
    value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Total value of items in cents."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItemPriceDefinitions:
    r"""Item's price information."""
    
    calculated_selling_price: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calculatedSellingPrice') }})
    r"""Item's calculated unitary selling price in cents."""  
    selling_prices: list[ItemPriceDefinitionsSellingPrices] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrices') }})
    r"""Details on item's selling price."""  
    total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""Total value of all item's units in cents."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Item:
    
    additional_info: shared_additionalinfo.AdditionalInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfo') }})
    r"""Additional information about the item."""  
    assemblies: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assemblies') }})
    r"""Retrieves information about orders item's customizations."""  
    attachment_offerings: list[ItemAttachmentOfferings] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachmentOfferings') }})
    r"""List of attachments details."""  
    attachments: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments') }})
    r"""Array containing information on attachments."""  
    bundle_items: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundleItems') }})
    r"""Information on services sold along with the item's SKU. For example, a gift package."""  
    call_center_operator: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callCenterOperator') }})
    r"""Call center operator responsible for the order."""  
    commission: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commission') }})
    r"""Commission value registered for the seller."""  
    components: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components') }})
    r"""Item's components."""  
    cost_price: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costPrice') }})
    r"""Item's cost price."""  
    detail_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailUrl') }})
    r"""URL slug of the item."""  
    ean: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ean') }})
    r"""EAN of the SKU."""  
    freight_commission: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freightCommission') }})
    r"""Value of the freight commission."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Item's SKU ID, which is a unique numerical identifier."""  
    image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl') }})
    r"""Item's SKU image URL."""  
    is_gift: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isGift') }})
    r"""This field is `true` when the item is a gift in order context and `false` when it is not."""  
    item_attachment: shared_itemattachment.ItemAttachment = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemAttachment') }})
    r"""Information about attachments, if it applies."""  
    list_price: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice') }})
    r"""Item's list price."""  
    lock_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockId') }})
    r"""Reservation ID."""  
    manual_price: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manualPrice') }})
    r"""Item's manual price."""  
    measurement_unit: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementUnit') }})
    r"""Item's measurement unit."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Item's name."""  
    offerings: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerings') }})
    r"""Item's offerings, which are services related to the item. For example, guarantee or installation."""  
    params: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('params') }})
    r"""Information about params."""  
    parent_assembly_binding: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentAssemblyBinding') }})
    r"""Parent assembly binding."""  
    parent_item_index: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentItemIndex') }})
    r"""Parent item index."""  
    pre_sale_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preSaleDate') }})
    r"""Item's pre sale date."""  
    price: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""Item's price."""  
    price_definitions: ItemPriceDefinitions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDefinitions') }})
    r"""Item's price information."""  
    price_tags: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceTags') }})
    r"""List of objects with item's price modifiers."""  
    price_valid_until: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceValidUntil') }})
    r"""Date until when the price is going to be valid if there is a promotion."""  
    product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId') }})
    r"""ID of the Product associated with the item."""  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})
    r"""Quantity of items."""  
    ref_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refId') }})
    r"""Product referencial code associated with the item."""  
    reward_value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rewardValue') }})
    r"""Item's reward value."""  
    seller: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller') }})
    r"""Seller related to the order."""  
    seller_sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerSku') }})
    r"""SKU ID from the seller perspective."""  
    selling_price: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrice') }})
    r"""Item's selling price."""  
    serial_numbers: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumbers') }})
    r"""This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control."""  
    shipping_price: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingPrice') }})
    r"""Item's shipping price."""  
    tax: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax') }})
    r"""Item's tax."""  
    tax_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode') }})
    r"""Item's tax code."""  
    unique_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueId') }})
    r"""Unique ID is an alphanumeric sequence that identifies an SKU in a given order."""  
    unit_multiplier: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitMultiplier') }})
    r"""Item's unit multiplier."""  
    