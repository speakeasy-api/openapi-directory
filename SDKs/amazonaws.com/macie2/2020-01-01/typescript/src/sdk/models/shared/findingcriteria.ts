/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { CriterionAdditionalProperties } from "./criterionadditionalproperties";
import { Expose, Transform } from "class-transformer";

/**
 * Specifies, as a map, one or more property-based conditions that filter the results of a query for findings.
 */
export class FindingCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: CriterionAdditionalProperties })
  @Expose({ name: "criterion" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, CriterionAdditionalProperties> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], CriterionAdditionalProperties);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  criterion?: Record<string, CriterionAdditionalProperties>;
}
