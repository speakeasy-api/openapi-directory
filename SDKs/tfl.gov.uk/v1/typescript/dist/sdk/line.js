"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Line = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var Line = /** @class */ (function () {
    function Line(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Get the list of arrival predictions for given line ids based at the given stop
     */
    Line.prototype.lineArrivals = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineArrivalsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{ids}/Arrivals/{stopPointId}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineArrivalsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesPredictions = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesPredictions = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesPrediction, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesPredictions = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesPredictions = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesPrediction, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get disruptions for the given line ids
     */
    Line.prototype.lineDisruption = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineDisruptionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{ids}/Disruption", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineDisruptionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesDisruptions = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesDisruptions = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesDisruption, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesDisruptions = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesDisruptions = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesDisruption, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get disruptions for all lines of the given modes.
     */
    Line.prototype.lineDisruptionByMode = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineDisruptionByModeRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/Mode/{modes}/Disruption", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineDisruptionByModeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesDisruptions = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesDisruptions = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesDisruption, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesDisruptions = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesDisruptions = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesDisruption, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets lines that match the specified line ids.
     */
    Line.prototype.lineGet = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{ids}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets lines that serve the given modes.
     */
    Line.prototype.lineGetByMode = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineGetByModeRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/Mode/{modes}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineGetByModeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     */
    Line.prototype.lineLineRoutesByIds = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineLineRoutesByIdsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{ids}/Route", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineLineRoutesByIdsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets a list of valid disruption categories
     */
    Line.prototype.lineMetaDisruptionCategories = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/Line/Meta/DisruptionCategories";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineMetaDisruptionCategoriesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.lineMetaDisruptionCategories200ApplicationJSONStrings =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.lineMetaDisruptionCategories200TextJSONStrings =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets a list of valid modes
     */
    Line.prototype.lineMetaModes = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/Line/Meta/Modes";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineMetaModesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesModes = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesModes = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesMode, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesModes = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesModes = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesMode, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets a list of valid ServiceTypes to filter on
     */
    Line.prototype.lineMetaServiceTypes = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/Line/Meta/ServiceTypes";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineMetaServiceTypesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.lineMetaServiceTypes200ApplicationJSONStrings =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.lineMetaServiceTypes200TextJSONStrings = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets a list of valid severity codes
     */
    Line.prototype.lineMetaSeverity = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/Line/Meta/Severity";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineMetaSeverityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesStatusSeverities = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesStatusSeverities =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesStatusSeverity, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesStatusSeverities = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesStatusSeverities =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesStatusSeverity, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     */
    Line.prototype.lineRoute = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineRouteRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/Line/Route";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineRouteResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     */
    Line.prototype.lineRouteByMode = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineRouteByModeRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/Mode/{modes}/Route", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineRouteByModeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     */
    Line.prototype.lineRouteSequence = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineRouteSequenceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{id}/Route/Sequence/{direction}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineRouteSequenceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesRouteSequence = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesRouteSequence);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesRouteSequence = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesRouteSequence);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Search for lines or routes matching the query string
     */
    Line.prototype.lineSearch = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineSearchRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/Search/{query}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineSearchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesRouteSearchResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesRouteSearchResponse);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesRouteSearchResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesRouteSearchResponse);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     */
    Line.prototype.lineStatus = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineStatusRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{ids}/Status/{StartDate}/to/{EndDate}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineStatusResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets the line status of for given line ids e.g Minor Delays
     */
    Line.prototype.lineStatusByIds = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineStatusByIdsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{ids}/Status", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineStatusByIdsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets the line status of for all lines for the given modes
     */
    Line.prototype.lineStatusByMode = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineStatusByModeRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/Mode/{modes}/Status", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineStatusByModeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets the line status for all lines with a given severity
     *             A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     */
    Line.prototype.lineStatusBySeverity = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineStatusBySeverityRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/Status/{severity}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineStatusBySeverityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesLines = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesLines = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesLine, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets a list of the stations that serve the given line id
     */
    Line.prototype.lineStopPoints = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineStopPointsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{id}/StopPoints", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineStopPointsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesStopPoints = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesStopPoint, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesStopPoints = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesStopPoint, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets the timetable for a specified station on the give line
     */
    Line.prototype.lineTimetable = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineTimetableRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{id}/Timetable/{fromStopPointId}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineTimetableResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesTimetableResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesTimetableResponse);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesTimetableResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesTimetableResponse);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets the timetable for a specified station on the give line with specified destination
     */
    Line.prototype.lineTimetableTo = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LineTimetableToRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LineTimetableToResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tflApiPresentationEntitiesTimetableResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesTimetableResponse);
                    }
                    if (utils.matchContentType(contentType, "text/json")) {
                        res.tflApiPresentationEntitiesTimetableResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TflApiPresentationEntitiesTimetableResponse);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    return Line;
}());
exports.Line = Line;
