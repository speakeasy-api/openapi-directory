/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DeviceInPast - Container Class for the Web API. Conatinas the MeterValues in the Past
 */
public class DeviceInPast {
    /**
     * The Meter Counter Reading (Total Energy used)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReading")
    public Double counterReading;
    public DeviceInPast withCounterReading(Double counterReading) {
        this.counterReading = counterReading;
        return this;
    }
    
    /**
     * The Meter Counter Reading Export
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingExport")
    public Double counterReadingExport;
    public DeviceInPast withCounterReadingExport(Double counterReadingExport) {
        this.counterReadingExport = counterReadingExport;
        return this;
    }
    
    /**
     * The Meter Counter Reading Export Tariff 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingExportT1")
    public Double counterReadingExportT1;
    public DeviceInPast withCounterReadingExportT1(Double counterReadingExportT1) {
        this.counterReadingExportT1 = counterReadingExportT1;
        return this;
    }
    
    /**
     * The Meter Counter Reading Export Tariff 2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingExportT2")
    public Double counterReadingExportT2;
    public DeviceInPast withCounterReadingExportT2(Double counterReadingExportT2) {
        this.counterReadingExportT2 = counterReadingExportT2;
        return this;
    }
    
    /**
     * The Meter Counter Reading Export Tariff 3
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingExportT3")
    public Double counterReadingExportT3;
    public DeviceInPast withCounterReadingExportT3(Double counterReadingExportT3) {
        this.counterReadingExportT3 = counterReadingExportT3;
        return this;
    }
    
    /**
     * The Meter Counter Reading Export Tariff 4
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingExportT4")
    public Double counterReadingExportT4;
    public DeviceInPast withCounterReadingExportT4(Double counterReadingExportT4) {
        this.counterReadingExportT4 = counterReadingExportT4;
        return this;
    }
    
    /**
     * The Meter Counter Reading Import
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingImport")
    public Double counterReadingImport;
    public DeviceInPast withCounterReadingImport(Double counterReadingImport) {
        this.counterReadingImport = counterReadingImport;
        return this;
    }
    
    /**
     * The Meter Counter Reading Import Tariff 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingImportT1")
    public Double counterReadingImportT1;
    public DeviceInPast withCounterReadingImportT1(Double counterReadingImportT1) {
        this.counterReadingImportT1 = counterReadingImportT1;
        return this;
    }
    
    /**
     * The Meter Counter Reading Import Tariff 2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingImportT2")
    public Double counterReadingImportT2;
    public DeviceInPast withCounterReadingImportT2(Double counterReadingImportT2) {
        this.counterReadingImportT2 = counterReadingImportT2;
        return this;
    }
    
    /**
     * The Meter Counter Reading Import Tariff 3
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingImportT3")
    public Double counterReadingImportT3;
    public DeviceInPast withCounterReadingImportT3(Double counterReadingImportT3) {
        this.counterReadingImportT3 = counterReadingImportT3;
        return this;
    }
    
    /**
     * The Meter Counter Reading Import Tariff 4
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingImportT4")
    public Double counterReadingImportT4;
    public DeviceInPast withCounterReadingImportT4(Double counterReadingImportT4) {
        this.counterReadingImportT4 = counterReadingImportT4;
        return this;
    }
    
    /**
     * The Meter Counter Reading Tariff 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingT1")
    public Double counterReadingT1;
    public DeviceInPast withCounterReadingT1(Double counterReadingT1) {
        this.counterReadingT1 = counterReadingT1;
        return this;
    }
    
    /**
     * The Meter Counter Reading Tariff 2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingT2")
    public Double counterReadingT2;
    public DeviceInPast withCounterReadingT2(Double counterReadingT2) {
        this.counterReadingT2 = counterReadingT2;
        return this;
    }
    
    /**
     * The Meter Counter Reading Tariff 3
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingT3")
    public Double counterReadingT3;
    public DeviceInPast withCounterReadingT3(Double counterReadingT3) {
        this.counterReadingT3 = counterReadingT3;
        return this;
    }
    
    /**
     * The Meter Counter Reading Tariff 4
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingT4")
    public Double counterReadingT4;
    public DeviceInPast withCounterReadingT4(Double counterReadingT4) {
        this.counterReadingT4 = counterReadingT4;
        return this;
    }
    
    /**
     * The Unit of the Counter Reading
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingUnit")
    public String counterReadingUnit;
    public DeviceInPast withCounterReadingUnit(String counterReadingUnit) {
        this.counterReadingUnit = counterReadingUnit;
        return this;
    }
    
    /**
     * The Date of the Values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("Date")
    public OffsetDateTime date;
    public DeviceInPast withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    /**
     * The ID of the device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public DeviceInPast withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The Serial number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Serial")
    public Long serial;
    public DeviceInPast withSerial(Long serial) {
        this.serial = serial;
        return this;
    }
    
}
