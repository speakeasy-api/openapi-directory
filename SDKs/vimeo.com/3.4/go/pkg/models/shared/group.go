// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GroupMetadataConnectionsUsers - Information about the members or moderators of this group.
type GroupMetadataConnectionsUsers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupMetadataConnectionsVideos - Information about the videos contained within this group.
type GroupMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupMetadataConnections - A collection of information that is connected to this resource.
type GroupMetadataConnections struct {
	// Information about the members or moderators of this group.
	Users GroupMetadataConnectionsUsers `json:"users"`
	// Information about the videos contained within this group.
	Videos GroupMetadataConnectionsVideos `json:"videos"`
}

// GroupMetadataInteractionsJoinTypeEnum - Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.
//
// Option descriptions:
//   - `member` - The authenticated user is a member.
//   - `moderator` - The authenticated user is a moderator.
type GroupMetadataInteractionsJoinTypeEnum string

const (
	GroupMetadataInteractionsJoinTypeEnumMember    GroupMetadataInteractionsJoinTypeEnum = "member"
	GroupMetadataInteractionsJoinTypeEnumModerator GroupMetadataInteractionsJoinTypeEnum = "moderator"
)

func (e *GroupMetadataInteractionsJoinTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "member":
		fallthrough
	case "moderator":
		*e = GroupMetadataInteractionsJoinTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupMetadataInteractionsJoinTypeEnum: %s", s)
	}
}

// GroupMetadataInteractionsJoin - An action indicating that someone has joined the group. This data requires a bearer token with the `private` scope.
type GroupMetadataInteractionsJoin struct {
	// Whether the authenticated user has followed this group. This data requires a bearer token with the `private` scope.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the user joined this group. This data requires a bearer token with the `private` scope.
	AddedTime string `json:"added_time"`
	// The user's title, or the null value if not applicable. This data requires a bearer token with the `private` scope.
	Title string `json:"title"`
	// Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.
	//
	// Option descriptions:
	//  * `member` - The authenticated user is a member.
	//  * `moderator` - The authenticated user is a moderator.
	//
	Type GroupMetadataInteractionsJoinTypeEnum `json:"type"`
	// The URI for following. PUT to this URI to follow, or DELETE to this URI to unfollow. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// GroupMetadataInteractions - User actions that have involved the group. This data requires a bearer token with the `private` scope.
type GroupMetadataInteractions struct {
	// An action indicating that someone has joined the group. This data requires a bearer token with the `private` scope.
	Join GroupMetadataInteractionsJoin `json:"join"`
}

// GroupMetadata - Metadata about the group.
type GroupMetadata struct {
	// A collection of information that is connected to this resource.
	Connections GroupMetadataConnections `json:"connections"`
	// User actions that have involved the group. This data requires a bearer token with the `private` scope.
	Interactions GroupMetadataInteractions `json:"interactions"`
}

// GroupPrivacyCommentEnum - Who can comment on the group:
//
// Option descriptions:
//   - `all` - Anyone can comment on the group.
//   - `members` - Only members can comment on the group.
type GroupPrivacyCommentEnum string

const (
	GroupPrivacyCommentEnumAll     GroupPrivacyCommentEnum = "all"
	GroupPrivacyCommentEnumMembers GroupPrivacyCommentEnum = "members"
)

func (e *GroupPrivacyCommentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "members":
		*e = GroupPrivacyCommentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupPrivacyCommentEnum: %s", s)
	}
}

// GroupPrivacyInviteEnum - Who can invite new members to the group:
//
// Option descriptions:
//   - `all` - Anyone can invite new members to join.
//   - `members` - Only group members can invite new members to join.
type GroupPrivacyInviteEnum string

const (
	GroupPrivacyInviteEnumAll     GroupPrivacyInviteEnum = "all"
	GroupPrivacyInviteEnumMembers GroupPrivacyInviteEnum = "members"
)

func (e *GroupPrivacyInviteEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "members":
		*e = GroupPrivacyInviteEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupPrivacyInviteEnum: %s", s)
	}
}

// GroupPrivacyJoinEnum - Who can join the group:
//
// Option descriptions:
//   - `anybody` - Anyone can join the group.
//   - `members` - Only people with a Vimeo account can join the group.
type GroupPrivacyJoinEnum string

const (
	GroupPrivacyJoinEnumAnybody GroupPrivacyJoinEnum = "anybody"
	GroupPrivacyJoinEnumMembers GroupPrivacyJoinEnum = "members"
)

func (e *GroupPrivacyJoinEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "members":
		*e = GroupPrivacyJoinEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupPrivacyJoinEnum: %s", s)
	}
}

// GroupPrivacyVideosEnum - Who can add videos to the group:
//
// Option descriptions:
//   - `all` - Anyone can add videos to the group.
//   - `members` - Only group members can add videos to the group.
type GroupPrivacyVideosEnum string

const (
	GroupPrivacyVideosEnumAll     GroupPrivacyVideosEnum = "all"
	GroupPrivacyVideosEnumMembers GroupPrivacyVideosEnum = "members"
)

func (e *GroupPrivacyVideosEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "members":
		*e = GroupPrivacyVideosEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupPrivacyVideosEnum: %s", s)
	}
}

// GroupPrivacyViewEnum - Who can view the group:
//
// Option descriptions:
//   - `anybody` - Anyone can view the group.
//   - `members` - Only group members can view the group.
type GroupPrivacyViewEnum string

const (
	GroupPrivacyViewEnumAnybody GroupPrivacyViewEnum = "anybody"
	GroupPrivacyViewEnumMembers GroupPrivacyViewEnum = "members"
)

func (e *GroupPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "members":
		*e = GroupPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupPrivacyViewEnum: %s", s)
	}
}

// GroupPrivacy - The group's privacy settings.
type GroupPrivacy struct {
	// Who can comment on the group:
	//
	// Option descriptions:
	//  * `all` - Anyone can comment on the group.
	//  * `members` - Only members can comment on the group.
	//
	Comment GroupPrivacyCommentEnum `json:"comment"`
	// Who can invite new members to the group:
	//
	// Option descriptions:
	//  * `all` - Anyone can invite new members to join.
	//  * `members` - Only group members can invite new members to join.
	//
	Invite GroupPrivacyInviteEnum `json:"invite"`
	// Who can join the group:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can join the group.
	//  * `members` - Only people with a Vimeo account can join the group.
	//
	Join GroupPrivacyJoinEnum `json:"join"`
	// Who can add videos to the group:
	//
	// Option descriptions:
	//  * `all` - Anyone can add videos to the group.
	//  * `members` - Only group members can add videos to the group.
	//
	Videos GroupPrivacyVideosEnum `json:"videos"`
	// Who can view the group:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the group.
	//  * `members` - Only group members can view the group.
	//
	View GroupPrivacyViewEnum `json:"view"`
}

// GroupUserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type GroupUserAccountEnum string

const (
	GroupUserAccountEnumBasic        GroupUserAccountEnum = "basic"
	GroupUserAccountEnumBusiness     GroupUserAccountEnum = "business"
	GroupUserAccountEnumLiveBusiness GroupUserAccountEnum = "live_business"
	GroupUserAccountEnumLivePremium  GroupUserAccountEnum = "live_premium"
	GroupUserAccountEnumLivePro      GroupUserAccountEnum = "live_pro"
	GroupUserAccountEnumPlus         GroupUserAccountEnum = "plus"
	GroupUserAccountEnumPro          GroupUserAccountEnum = "pro"
	GroupUserAccountEnumProUnlimited GroupUserAccountEnum = "pro_unlimited"
	GroupUserAccountEnumProducer     GroupUserAccountEnum = "producer"
)

func (e *GroupUserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = GroupUserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupUserAccountEnum: %s", s)
	}
}

// GroupUserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type GroupUserContentFilterEnum string

const (
	GroupUserContentFilterEnumDrugs    GroupUserContentFilterEnum = "drugs"
	GroupUserContentFilterEnumLanguage GroupUserContentFilterEnum = "language"
	GroupUserContentFilterEnumNudity   GroupUserContentFilterEnum = "nudity"
	GroupUserContentFilterEnumSafe     GroupUserContentFilterEnum = "safe"
	GroupUserContentFilterEnumUnrated  GroupUserContentFilterEnum = "unrated"
	GroupUserContentFilterEnumViolence GroupUserContentFilterEnum = "violence"
)

func (e *GroupUserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = GroupUserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupUserContentFilterEnum: %s", s)
	}
}

// GroupUserMetadataConnectionsAlbums - Information about the albums created by this user.
type GroupUserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type GroupUserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type GroupUserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsCategories - Information about this user's followed categories.
type GroupUserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsChannels - Information about this user's subscribed channels.
type GroupUserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsFeed - Information about this user's feed.
type GroupUserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsFolders - Information about this user's folders.
type GroupUserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsFollowers - Information about the user's followers.
type GroupUserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsFollowing - Information about the users that the current user is following.
type GroupUserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsGroups - Information about the groups created by this user.
type GroupUserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsLikes - Information about the videos that this user has liked.
type GroupUserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type GroupUserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsPictures - Information about this user's portraits.
type GroupUserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsPortfolios - Information about this user's portfolios.
type GroupUserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type GroupUserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type GroupUserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type GroupUserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type GroupUserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type GroupUserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type GroupUserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// GroupUserMetadataConnections - The list of resource URIs related to the user.
type GroupUserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums GroupUserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances GroupUserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block GroupUserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories GroupUserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels GroupUserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed GroupUserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders GroupUserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers GroupUserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following GroupUserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups GroupUserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes GroupUserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels GroupUserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures GroupUserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios GroupUserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels GroupUserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers GroupUserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared GroupUserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos GroupUserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos GroupUserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater GroupUserMetadataConnectionsWatchlater `json:"watchlater"`
}

type GroupUserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// GroupUserMetadataInteractionsBlock - Information related to the block status of this user.
type GroupUserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// GroupUserMetadataInteractionsFollow - Information related to the followed status of this user.
type GroupUserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// GroupUserMetadataInteractionsReport - Information regarding where and how to report a user.
type GroupUserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type GroupUserMetadataInteractions struct {
	AddPrivacyUser *GroupUserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block GroupUserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow GroupUserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report GroupUserMetadataInteractionsReport `json:"report"`
}

// GroupUserMetadata - The user's metadata.
type GroupUserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  GroupUserMetadataConnections  `json:"connections"`
	Interactions GroupUserMetadataInteractions `json:"interactions"`
}

// GroupUserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type GroupUserPreferencesVideosPrivacyCommentsEnum string

const (
	GroupUserPreferencesVideosPrivacyCommentsEnumAnybody  GroupUserPreferencesVideosPrivacyCommentsEnum = "anybody"
	GroupUserPreferencesVideosPrivacyCommentsEnumContacts GroupUserPreferencesVideosPrivacyCommentsEnum = "contacts"
	GroupUserPreferencesVideosPrivacyCommentsEnumNobody   GroupUserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *GroupUserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = GroupUserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupUserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// GroupUserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type GroupUserPreferencesVideosPrivacyEmbedEnum string

const (
	GroupUserPreferencesVideosPrivacyEmbedEnumPrivate   GroupUserPreferencesVideosPrivacyEmbedEnum = "private"
	GroupUserPreferencesVideosPrivacyEmbedEnumPublic    GroupUserPreferencesVideosPrivacyEmbedEnum = "public"
	GroupUserPreferencesVideosPrivacyEmbedEnumWhitelist GroupUserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *GroupUserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = GroupUserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupUserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// GroupUserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type GroupUserPreferencesVideosPrivacyViewEnum string

const (
	GroupUserPreferencesVideosPrivacyViewEnumAnybody  GroupUserPreferencesVideosPrivacyViewEnum = "anybody"
	GroupUserPreferencesVideosPrivacyViewEnumContacts GroupUserPreferencesVideosPrivacyViewEnum = "contacts"
	GroupUserPreferencesVideosPrivacyViewEnumDisable  GroupUserPreferencesVideosPrivacyViewEnum = "disable"
	GroupUserPreferencesVideosPrivacyViewEnumNobody   GroupUserPreferencesVideosPrivacyViewEnum = "nobody"
	GroupUserPreferencesVideosPrivacyViewEnumPassword GroupUserPreferencesVideosPrivacyViewEnum = "password"
	GroupUserPreferencesVideosPrivacyViewEnumUnlisted GroupUserPreferencesVideosPrivacyViewEnum = "unlisted"
	GroupUserPreferencesVideosPrivacyViewEnumUsers    GroupUserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *GroupUserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = GroupUserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupUserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type GroupUserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *GroupUserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *GroupUserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *GroupUserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type GroupUserPreferencesVideos struct {
	Privacy *GroupUserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type GroupUserPreferences struct {
	Videos *GroupUserPreferencesVideos `json:"videos,omitempty"`
}

// GroupUserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type GroupUserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// GroupUserUploadQuotaPeriodic - Information about the user's usage for the current period.
type GroupUserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// GroupUserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type GroupUserUploadQuotaSpaceShowingEnum string

const (
	GroupUserUploadQuotaSpaceShowingEnumLifetime GroupUserUploadQuotaSpaceShowingEnum = "lifetime"
	GroupUserUploadQuotaSpaceShowingEnumPeriodic GroupUserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *GroupUserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = GroupUserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupUserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// GroupUserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type GroupUserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing GroupUserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// GroupUserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type GroupUserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime GroupUserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic GroupUserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space GroupUserUploadQuotaSpace `json:"space"`
}

type GroupUserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// GroupUser - The owner of the group.
type GroupUser struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account GroupUserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *GroupUserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata GroupUserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture               `json:"pictures"`
	Preferences *GroupUserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota GroupUserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []GroupUserWebsites `json:"websites"`
}

// Group - The group was created.
type Group struct {
	// The time in ISO 8601 format when the group was created.
	CreatedTime string `json:"created_time"`
	// The group's description.
	Description string `json:"description"`
	// The link to the group.
	Link string `json:"link"`
	// Metadata about the group.
	Metadata GroupMetadata `json:"metadata"`
	// The time in ISO 8601 format when the group was last modified.
	ModifiedTime string `json:"modified_time"`
	// The group's display name.
	Name string `json:"name"`
	// The active picture for this group.
	Pictures Picture `json:"pictures"`
	// The group's privacy settings.
	Privacy GroupPrivacy `json:"privacy"`
	// The resource key of the group.
	ResourceKey string `json:"resource_key"`
	// The canonical relative URI of this group.
	URI string `json:"uri"`
	// The owner of the group.
	User *GroupUser `json:"user,omitempty"`
}
