"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import notificationcollectionresponse as shared_notificationcollectionresponse
from enum import Enum
from typing import Optional

class ListNotificationsActionEnum(str, Enum):
    r"""The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all** 
    
    **Note** The **all** action matches notifications set to \"all\", not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action=all
    """
    CONNECT = 'connect'
    DOWNLOAD = 'download'
    UPLOAD = 'upload'
    DELETE = 'delete'
    ALL = 'all'

class ListNotificationsIncludeEnum(str, Enum):
    r"""Related records to include in the response. Valid options are **ownerUser**, **resource**, **share**"""
    RESOURCE = 'resource'
    SHARE = 'share'
    USER = 'user'

class ListNotificationsTypeEnum(str, Enum):
    r"""Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**
    
    If this parameter is not used, only **file** and **folder** type notifications are included in the list.
    """
    FILE = 'file'
    FOLDER = 'folder'
    SHARED_FOLDER = 'shared_folder'
    SEND_RECEIPT = 'send_receipt'
    SHARE_RECEIPT = 'share_receipt'
    FILE_DROP = 'file_drop'


@dataclasses.dataclass
class ListNotificationsRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access token required to make the API call."""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API Key required to make the API call."""  
    action: Optional[ListNotificationsActionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'action', 'style': 'form', 'explode': True }})
    r"""The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all** 
    
    **Note** The **all** action matches notifications set to \"all\", not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action=all
    """  
    include: Optional[ListNotificationsIncludeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include', 'style': 'form', 'explode': True }})
    r"""Related records to include in the response. Valid options are **ownerUser**, **resource**, **share**"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of notification records to return. Can be used for pagination."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Starting notification record in the result set. Can be used for pagination."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.
    
    You can chose multiple options for the sort by separating them with commmas, such as \"type,-date\" to sort by type, then most recent.
    """  
    type: Optional[ListNotificationsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**
    
    If this parameter is not used, only **file** and **folder** type notifications are included in the list.
    """  
    

@dataclasses.dataclass
class ListNotificationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    notification_collection_response: Optional[shared_notificationcollectionresponse.NotificationCollectionResponse] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    