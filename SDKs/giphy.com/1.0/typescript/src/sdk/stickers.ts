/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Stickers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Random Sticker
   *
   * @remarks
   * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
   *
   */
  randomSticker(
    req: operations.RandomStickerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RandomStickerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RandomStickerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/stickers/random";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RandomStickerResponse =
        new operations.RandomStickerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.randomSticker200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.RandomSticker200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Search Stickers
   *
   * @remarks
   * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs.
   *
   */
  searchStickers(
    req: operations.SearchStickersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchStickersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchStickersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/stickers/search";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchStickersResponse =
        new operations.SearchStickersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchStickers200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SearchStickers200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Translate phrase to Sticker
   *
   * @remarks
   * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
   *
   */
  translateSticker(
    req: operations.TranslateStickerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TranslateStickerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TranslateStickerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/stickers/translate";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TranslateStickerResponse =
        new operations.TranslateStickerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.translateSticker200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TranslateSticker200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Trending Stickers
   *
   * @remarks
   * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default.
   *
   */
  trendingStickers(
    req: operations.TrendingStickersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TrendingStickersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TrendingStickersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/stickers/trending";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TrendingStickersResponse =
        new operations.TrendingStickersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trendingStickers200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TrendingStickers200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
