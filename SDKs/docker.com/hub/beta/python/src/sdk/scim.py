"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Scim:
    r"""SCIM is a provisioning system that lets you manage users within your identity provider (IdP).
    For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v2_scim_2_0_resource_types(self) -> operations.GetV2Scim20ResourceTypesResponse:
        r"""List resource types
        Returns all resource types supported for the SCIM configuration.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/scim/2.0/ResourceTypes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2Scim20ResourceTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20ResourceTypes200ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_resource_types_200_application_scim_plus_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20ResourceTypes401ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_resource_types_401_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20ResourceTypes500ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_resource_types_500_application_scim_plus_json_object = out

        return res

    def get_v2_scim_2_0_resource_types_name_(self, request: operations.GetV2Scim20ResourceTypesNameRequest) -> operations.GetV2Scim20ResourceTypesNameResponse:
        r"""Get a resource type
        Returns a resource type by name.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2Scim20ResourceTypesNameRequest, base_url, '/v2/scim/2.0/ResourceTypes/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2Scim20ResourceTypesNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimResourceType])
                res.scim_resource_type = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20ResourceTypesName401ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_resource_types_name_401_application_scim_plus_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20ResourceTypesName404ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_resource_types_name_404_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20ResourceTypesName500ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_resource_types_name_500_application_scim_plus_json_object = out

        return res

    def get_v2_scim_2_0_schemas(self) -> operations.GetV2Scim20SchemasResponse:
        r"""List schemas
        Returns all schemas supported for the SCIM configuration.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/scim/2.0/Schemas'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2Scim20SchemasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Schemas200ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_schemas_200_application_scim_plus_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Schemas401ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_schemas_401_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Schemas500ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_schemas_500_application_scim_plus_json_object = out

        return res

    def get_v2_scim_2_0_schemas_id_(self, request: operations.GetV2Scim20SchemasIDRequest) -> operations.GetV2Scim20SchemasIDResponse:
        r"""Get a schema
        Returns a schema by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2Scim20SchemasIDRequest, base_url, '/v2/scim/2.0/Schemas/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2Scim20SchemasIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimSchema])
                res.scim_schema = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20SchemasID401ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_schemas_id_401_application_scim_plus_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20SchemasID404ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_schemas_id_404_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20SchemasID500ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_schemas_id_500_application_scim_plus_json_object = out

        return res

    def get_v2_scim_2_0_service_provider_config(self) -> operations.GetV2Scim20ServiceProviderConfigResponse:
        r"""Get service provider config
        Returns a service provider config for Docker's configuration.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/scim/2.0/ServiceProviderConfig'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2Scim20ServiceProviderConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimServiceProviderConfig])
                res.scim_service_provider_config = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20ServiceProviderConfig401ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_service_provider_config_401_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20ServiceProviderConfig500ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_service_provider_config_500_application_scim_plus_json_object = out

        return res

    def get_v2_scim_2_0_users(self, request: operations.GetV2Scim20UsersRequest) -> operations.GetV2Scim20UsersResponse:
        r"""List users
        List users, returns paginated users for an organization. Use `startIndex`
        and `count` query parameters to receive paginated results.
        
        **Sorting:**<br>
        Sorting lets you to specify the order of returned resources by specifying
        a combination of `sortBy` and `sortOrder` query parameters.
        
        The `sortBy` parameter specifies the attribute whose value will be used
        to order the returned responses. The `sortOrder` parameter defines the
        order in which the `sortBy` parameter is applied. Allowed values are
        \"ascending\" and \"descending\".
        
        **Filtering:**<br>
        You can request a subset of resources by specifying the `filter` query
        parameter containing a filter expression. Attribute names and attribute
        operators used in filters are case insensitive. The filter parameter
        must contain at least one valid expression. Each expression must contain
        an attribute name followed by an attribute operator and an optional
        value.
        
        Supported operators are listed below.
        
        - `eq` equal
        - `ne` not equal
        - `co` contains
        - `sw` starts with
        - `and` Logical \"and\"
        - `or` Logical \"or\"
        - `not` \"Not\" function
        - `()` Precedence grouping
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/scim/2.0/Users'
        
        query_params = utils.get_query_params(operations.GetV2Scim20UsersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2Scim20UsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Users200ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_200_application_scim_plus_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Users400ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_400_application_scim_plus_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Users401ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_401_application_scim_plus_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Users403ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_403_application_scim_plus_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Users404ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_404_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20Users500ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_500_application_scim_plus_json_object = out

        return res

    def get_v2_scim_2_0_users_id_(self, request: operations.GetV2Scim20UsersIDRequest) -> operations.GetV2Scim20UsersIDResponse:
        r"""Get a user
        Returns a user by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2Scim20UsersIDRequest, base_url, '/v2/scim/2.0/Users/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2Scim20UsersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimUser])
                res.scim_user = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20UsersID400ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_id_400_application_scim_plus_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20UsersID401ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_id_401_application_scim_plus_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20UsersID403ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_id_403_application_scim_plus_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20UsersID404ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_id_404_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2Scim20UsersID500ApplicationScimPlusJSON])
                res.get_v2_scim_2_0_users_id_500_application_scim_plus_json_object = out

        return res

    def post_v2_scim_2_0_users(self, request: operations.PostV2Scim20UsersRequestBody) -> operations.PostV2Scim20UsersResponse:
        r"""Create user
        Creates a user. If the user already exists by email, they are assigned
        to the organization on the \"company\" team.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/scim/2.0/Users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2Scim20UsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimUser])
                res.scim_user = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostV2Scim20Users400ApplicationScimPlusJSON])
                res.post_v2_scim_2_0_users_400_application_scim_plus_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostV2Scim20Users401ApplicationScimPlusJSON])
                res.post_v2_scim_2_0_users_401_application_scim_plus_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostV2Scim20Users403ApplicationScimPlusJSON])
                res.post_v2_scim_2_0_users_403_application_scim_plus_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostV2Scim20Users404ApplicationScimPlusJSON])
                res.post_v2_scim_2_0_users_404_application_scim_plus_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostV2Scim20Users409ApplicationScimPlusJSON])
                res.post_v2_scim_2_0_users_409_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostV2Scim20Users500ApplicationScimPlusJSON])
                res.post_v2_scim_2_0_users_500_application_scim_plus_json_object = out

        return res

    def put_v2_scim_2_0_users_id_(self, request: operations.PutV2Scim20UsersIDRequest) -> operations.PutV2Scim20UsersIDResponse:
        r"""Update a user
        Updates a user. Use this route to change the user's name, activate,
        and deactivate the user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2Scim20UsersIDRequest, base_url, '/v2/scim/2.0/Users/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2Scim20UsersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimUser])
                res.scim_user = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutV2Scim20UsersID400ApplicationScimPlusJSON])
                res.put_v2_scim_2_0_users_id_400_application_scim_plus_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutV2Scim20UsersID401ApplicationScimPlusJSON])
                res.put_v2_scim_2_0_users_id_401_application_scim_plus_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutV2Scim20UsersID403ApplicationScimPlusJSON])
                res.put_v2_scim_2_0_users_id_403_application_scim_plus_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutV2Scim20UsersID404ApplicationScimPlusJSON])
                res.put_v2_scim_2_0_users_id_404_application_scim_plus_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutV2Scim20UsersID409ApplicationScimPlusJSON])
                res.put_v2_scim_2_0_users_id_409_application_scim_plus_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutV2Scim20UsersID500ApplicationScimPlusJSON])
                res.put_v2_scim_2_0_users_id_500_application_scim_plus_json_object = out

        return res

    