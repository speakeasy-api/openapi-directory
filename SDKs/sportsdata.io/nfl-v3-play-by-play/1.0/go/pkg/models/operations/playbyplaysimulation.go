// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PlayByPlaySimulationFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type PlayByPlaySimulationFormatEnum string

const (
	PlayByPlaySimulationFormatEnumXML  PlayByPlaySimulationFormatEnum = "XML"
	PlayByPlaySimulationFormatEnumJSON PlayByPlaySimulationFormatEnum = "JSON"
)

func (e *PlayByPlaySimulationFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "XML":
		fallthrough
	case "JSON":
		*e = PlayByPlaySimulationFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayByPlaySimulationFormatEnum: %s", s)
	}
}

type PlayByPlaySimulationPathParams struct {
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format PlayByPlaySimulationFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// The number of plays to progress in this NFL live game simulation. Example entries are <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>150</code>, <code>200</code>, etc.
	Numberofplays string `pathParam:"style=simple,explode=false,name=numberofplays"`
}

type PlayByPlaySimulationRequest struct {
	PathParams PlayByPlaySimulationPathParams
}

type PlayByPlaySimulationResponse struct {
	ContentType string
	PlayByPlays []shared.PlayByPlay
	StatusCode  int
	RawResponse *http.Response
}
