// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type OscerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type OscerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// OscerRequestBodyFormatEnum - The format of the certificate in response.
type OscerRequestBodyFormatEnum string

const (
	OscerRequestBodyFormatEnumPdf OscerRequestBodyFormatEnum = "pdf"
)

func (e OscerRequestBodyFormatEnum) ToPointer() *OscerRequestBodyFormatEnum {
	return &e
}

func (e *OscerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = OscerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OscerRequestBodyFormatEnum: %v", v)
	}
}

// OscerRequestBody - Request format
type OscerRequestBody struct {
	CertificateParameters *OscerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format OscerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Oscer504ApplicationJSONErrorEnum string

const (
	Oscer504ApplicationJSONErrorEnumGatewayTimeout Oscer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Oscer504ApplicationJSONErrorEnum) ToPointer() *Oscer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Oscer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Oscer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Oscer504ApplicationJSONErrorDescriptionEnum string

const (
	Oscer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Oscer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Oscer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Oscer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Oscer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Oscer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Oscer504ApplicationJSON - Gateway timeout
type Oscer504ApplicationJSON struct {
	Error            *Oscer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Oscer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Oscer503ApplicationJSONErrorEnum string

const (
	Oscer503ApplicationJSONErrorEnumServiceUnavailable Oscer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Oscer503ApplicationJSONErrorEnum) ToPointer() *Oscer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Oscer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Oscer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Oscer503ApplicationJSONErrorDescriptionEnum string

const (
	Oscer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Oscer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Oscer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Oscer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Oscer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Oscer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Oscer503ApplicationJSON - Service unavailable
type Oscer503ApplicationJSON struct {
	Error            *Oscer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Oscer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Oscer502ApplicationJSONErrorEnum string

const (
	Oscer502ApplicationJSONErrorEnumBadGatewy Oscer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Oscer502ApplicationJSONErrorEnum) ToPointer() *Oscer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Oscer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Oscer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Oscer502ApplicationJSONErrorDescriptionEnum string

const (
	Oscer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Oscer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Oscer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Oscer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Oscer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Oscer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Oscer502ApplicationJSON - Bad gateway
type Oscer502ApplicationJSON struct {
	Error            *Oscer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Oscer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Oscer500ApplicationJSONErrorEnum string

const (
	Oscer500ApplicationJSONErrorEnumInternalServerError Oscer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Oscer500ApplicationJSONErrorEnum) ToPointer() *Oscer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Oscer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Oscer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Oscer500ApplicationJSONErrorDescriptionEnum string

const (
	Oscer500ApplicationJSONErrorDescriptionEnumInternalServerError Oscer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Oscer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Oscer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Oscer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Oscer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Oscer500ApplicationJSON - Internal server error
type Oscer500ApplicationJSON struct {
	Error            *Oscer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Oscer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Oscer404ApplicationJSONErrorEnum string

const (
	Oscer404ApplicationJSONErrorEnumRecordNotFound Oscer404ApplicationJSONErrorEnum = "record_not_found"
	Oscer404ApplicationJSONErrorEnumURLNotFound    Oscer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Oscer404ApplicationJSONErrorEnum) ToPointer() *Oscer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Oscer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Oscer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Oscer404ApplicationJSONErrorDescriptionEnum string

const (
	Oscer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Oscer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Oscer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Oscer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Oscer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Oscer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Oscer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Oscer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Oscer404ApplicationJSON - No record found
type Oscer404ApplicationJSON struct {
	Error            *Oscer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Oscer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Oscer401ApplicationJSONErrorEnum string

const (
	Oscer401ApplicationJSONErrorEnumInvalidAuthentication Oscer401ApplicationJSONErrorEnum = "invalid_authentication"
	Oscer401ApplicationJSONErrorEnumInvalidAuthorization  Oscer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Oscer401ApplicationJSONErrorEnum) ToPointer() *Oscer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Oscer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Oscer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Oscer401ApplicationJSONErrorDescriptionEnum string

const (
	Oscer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Oscer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Oscer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Oscer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Oscer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Oscer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Oscer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Oscer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Oscer401ApplicationJSON - Unauthorized access
type Oscer401ApplicationJSON struct {
	Error            *Oscer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Oscer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Oscer400ApplicationJSONErrorEnum string

const (
	Oscer400ApplicationJSONErrorEnumMissingParameter Oscer400ApplicationJSONErrorEnum = "missing_parameter"
	Oscer400ApplicationJSONErrorEnumInvalidParameter Oscer400ApplicationJSONErrorEnum = "invalid_parameter"
	Oscer400ApplicationJSONErrorEnumInvalidFormat    Oscer400ApplicationJSONErrorEnum = "invalid_format"
	Oscer400ApplicationJSONErrorEnumInvalidTxnid     Oscer400ApplicationJSONErrorEnum = "invalid_txnid"
	Oscer400ApplicationJSONErrorEnumInvalidConsentid Oscer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Oscer400ApplicationJSONErrorEnum) ToPointer() *Oscer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Oscer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Oscer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Oscer400ApplicationJSONErrorDescriptionEnum string

const (
	Oscer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Oscer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Oscer400ApplicationJSONErrorDescriptionEnumBadRequest                              Oscer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Oscer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Oscer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Oscer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Oscer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Oscer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Oscer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Oscer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Oscer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Oscer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Oscer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oscer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Oscer400ApplicationJSON - Bad request
type Oscer400ApplicationJSON struct {
	Error            *Oscer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Oscer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type OscerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Oscer400ApplicationJSONObject *Oscer400ApplicationJSON
	// Unauthorized access
	Oscer401ApplicationJSONObject *Oscer401ApplicationJSON
	// No record found
	Oscer404ApplicationJSONObject *Oscer404ApplicationJSON
	// Internal server error
	Oscer500ApplicationJSONObject *Oscer500ApplicationJSON
	// Bad gateway
	Oscer502ApplicationJSONObject *Oscer502ApplicationJSON
	// Service unavailable
	Oscer503ApplicationJSONObject *Oscer503ApplicationJSON
	// Gateway timeout
	Oscer504ApplicationJSONObject *Oscer504ApplicationJSON
}
