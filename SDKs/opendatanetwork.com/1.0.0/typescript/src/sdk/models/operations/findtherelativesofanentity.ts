/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * The type of relation to find.
 */
export enum FindTheRelativesOfAnEntityRelationEnum {
  Parent = "parent",
  Child = "child",
  Sibling = "sibling",
  Peer = "peer",
}

export class FindTheRelativesOfAnEntityRequest extends SpeakeasyBase {
  /**
   * e.g. cQovpGcdUT1CSzgYk0KPYdAI0
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-App-Token",
  })
  xAppToken?: string;

  /**
   * The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
   *
   * @remarks
   * used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=app_token",
  })
  appToken?: string;

  /**
   * ID of the target entity.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=entity_id",
  })
  entityId: string;

  /**
   * Maximum number of entities in each group.
   *
   * @remarks
   * Must be an integer from 1 to 1000.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * The type of relation to find.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=relation",
  })
  relation: FindTheRelativesOfAnEntityRelationEnum;

  /**
   * If this parameter is included, only entities with data for the given
   *
   * @remarks
   * variable will be returned. Note that this may cause the number of
   * entities returned to be less than the specified `limit`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=variable_id",
  })
  variableId?: string;
}

export class FindTheRelativesOfAnEntityResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
