"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCellularSimsRequestBodySimFailover:
    r"""SIM Failover settings."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Failover to secondary SIM (optional)"""  
    
class UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum(str, Enum):
    r"""APN auth type."""
    CHAP = 'chap'
    NONE = 'none'
    PAP = 'pap'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCellularSimsRequestBodySimsApnsAuthentication:
    r"""APN authentication configurations."""
    
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""APN password, if type is set (if APN password is not supplied, the password is left unchanged)."""  
    type: Optional[UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""APN auth type."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""APN username, if type is set."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCellularSimsRequestBodySimsApns:
    
    allowed_ip_types: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIpTypes') }})
    r"""IP versions to support (permitted values include 'ipv4', 'ipv6')."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""APN name."""  
    authentication: Optional[UpdateDeviceCellularSimsRequestBodySimsApnsAuthentication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication'), 'exclude': lambda f: f is None }})
    r"""APN authentication configurations."""  
    
class UpdateDeviceCellularSimsRequestBodySimsSlotEnum(str, Enum):
    r"""SIM slot being configured. Must be 'sim1' on single-sim devices."""
    SIM1 = 'sim1'
    SIM2 = 'sim2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCellularSimsRequestBodySims:
    
    apns: Optional[list[UpdateDeviceCellularSimsRequestBodySimsApns]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apns'), 'exclude': lambda f: f is None }})
    r"""APN configurations. If empty, the default APN will be used."""  
    is_primary: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPrimary'), 'exclude': lambda f: f is None }})
    r"""If true, this SIM is used for boot. Must be true on single-sim devices."""  
    slot: Optional[UpdateDeviceCellularSimsRequestBodySimsSlotEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slot'), 'exclude': lambda f: f is None }})
    r"""SIM slot being configured. Must be 'sim1' on single-sim devices."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCellularSimsRequestBody:
    
    sim_failover: Optional[UpdateDeviceCellularSimsRequestBodySimFailover] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simFailover'), 'exclude': lambda f: f is None }})
    r"""SIM Failover settings."""  
    sims: Optional[list[UpdateDeviceCellularSimsRequestBodySims]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sims'), 'exclude': lambda f: f is None }})
    r"""List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged."""  
    

@dataclasses.dataclass
class UpdateDeviceCellularSimsRequest:
    
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateDeviceCellularSimsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateDeviceCellularSimsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_device_cellular_sims_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    