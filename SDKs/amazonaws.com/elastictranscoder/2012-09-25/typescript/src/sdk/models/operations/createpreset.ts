/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Parameters required for transcoding audio.
 */
export class CreatePresetRequestBodyAudio extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AudioPackingMode" })
  audioPackingMode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "BitRate" })
  bitRate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Channels" })
  channels?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Codec" })
  codec?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CodecOptions" })
  @Type(() => shared.AudioCodecOptions)
  codecOptions?: shared.AudioCodecOptions;

  @SpeakeasyMetadata()
  @Expose({ name: "SampleRate" })
  sampleRate?: string;
}

/**
 * Thumbnails for videos.
 */
export class CreatePresetRequestBodyThumbnails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AspectRatio" })
  aspectRatio?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Format" })
  format?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Interval" })
  interval?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxHeight" })
  maxHeight?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxWidth" })
  maxWidth?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PaddingPolicy" })
  paddingPolicy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Resolution" })
  resolution?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SizingPolicy" })
  sizingPolicy?: string;
}

/**
 * The <code>VideoParameters</code> structure.
 */
export class CreatePresetRequestBodyVideo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AspectRatio" })
  aspectRatio?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "BitRate" })
  bitRate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Codec" })
  codec?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CodecOptions" })
  codecOptions?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "DisplayAspectRatio" })
  displayAspectRatio?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FixedGOP" })
  fixedGOP?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FrameRate" })
  frameRate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "KeyframesMaxDist" })
  keyframesMaxDist?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxFrameRate" })
  maxFrameRate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxHeight" })
  maxHeight?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxWidth" })
  maxWidth?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PaddingPolicy" })
  paddingPolicy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Resolution" })
  resolution?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SizingPolicy" })
  sizingPolicy?: string;

  @SpeakeasyMetadata({ elemType: shared.PresetWatermark })
  @Expose({ name: "Watermarks" })
  @Type(() => shared.PresetWatermark)
  watermarks?: shared.PresetWatermark[];
}

export class CreatePresetRequestBody extends SpeakeasyBase {
  /**
   * Parameters required for transcoding audio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Audio" })
  @Type(() => CreatePresetRequestBodyAudio)
  audio?: CreatePresetRequestBodyAudio;

  /**
   * The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Container" })
  container: string;

  /**
   * A description of the preset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * The name of the preset. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * Thumbnails for videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Thumbnails" })
  @Type(() => CreatePresetRequestBodyThumbnails)
  thumbnails?: CreatePresetRequestBodyThumbnails;

  /**
   * The <code>VideoParameters</code> structure.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Video" })
  @Type(() => CreatePresetRequestBodyVideo)
  video?: CreatePresetRequestBodyVideo;
}

export class CreatePresetRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreatePresetRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreatePresetResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createPresetResponse?: shared.CreatePresetResponse;

  /**
   * IncompatibleVersionException
   */
  @SpeakeasyMetadata()
  incompatibleVersionException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
