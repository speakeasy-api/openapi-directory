/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateCompositionHookServerList = [
  "https://video.twilio.com",
] as const;

export class UpdateCompositionHookSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
 */
export enum UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class UpdateCompositionHookUpdateCompositionHookRequest extends SpeakeasyBase {
  /**
   * An array of track names from the same group room to merge into the compositions created by the composition hook. Can include zero or more track names. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.
   */
  @SpeakeasyMetadata({ data: "form, name=AudioSources" })
  audioSources?: string[];

  /**
   * An array of track names to exclude. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
   */
  @SpeakeasyMetadata({ data: "form, name=AudioSourcesExcluded" })
  audioSourcesExcluded?: string[];

  /**
   * Whether the composition hook is active. When `true`, the composition hook will be triggered for every completed Group Room in the account. When `false`, the composition hook never triggers.
   */
  @SpeakeasyMetadata({ data: "form, name=Enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata({ data: "form, name=Format" })
  format?: shared.CompositionHookEnumFormatEnum;

  /**
   * A descriptive string that you create to describe the resource. It can be up to  100 characters long and it must be unique within the account.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName: string;

  /**
   * A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`.
   *
   * @remarks
   * The string's format is `{width}x{height}` where:
   *
   * * 16 <= `{width}` <= 1280
   * * 16 <= `{height}` <= 1280
   * * `{width}` * `{height}` <= 921,600
   *
   * Typical values are:
   *
   * * HD = `1280x720`
   * * PAL = `1024x576`
   * * VGA = `640x480`
   * * CIF = `320x240`
   *
   * Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
   */
  @SpeakeasyMetadata({ data: "form, name=Resolution" })
  resolution?: string;

  /**
   * The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallback" })
  statusCallback?: string;

  /**
   * The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallbackMethod" })
  statusCallbackMethod?: UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum;

  /**
   * Whether to clip the intervals where there is no active media in the compositions triggered by the composition hook. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
   */
  @SpeakeasyMetadata({ data: "form, name=Trim" })
  trim?: boolean;

  /**
   * A JSON object that describes the video layout of the composition hook in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
   */
  @SpeakeasyMetadata({ data: "form, name=VideoLayout" })
  videoLayout?: any;
}

export class UpdateCompositionHookRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateCompositionHookUpdateCompositionHookRequest;

  /**
   * The SID of the CompositionHook resource to update.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Sid" })
  sid: string;
}

export class UpdateCompositionHookResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  videoV1CompositionHook?: shared.VideoV1CompositionHook;
}
