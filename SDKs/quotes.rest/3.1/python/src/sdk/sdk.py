"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .private_quotes import PrivateQuotes
from .qshow import Qshow
from .quote import Quote
from .quote_images import QuoteImages
from .quote_of_the_day import QuoteOfTheDay

SERVERS = [
    "https://quotes.rest",
    "http://quotes.rest",
    "http://api01.quotes.rest",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console add 'X-TheySaidSo-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://theysaidso.com/api."""
    private_quotes: PrivateQuotes
    r"""Create and manage your own Quotes. You need an API key to access this service."""
    qshow: Qshow
    r"""Access Qshow - quote collection service. Create curated quotes collection. You can group quotes by any way you want and access them as a single unit. You need an API key to access this service."""
    quote: Quote
    r"""Access random quote service. Use this to get random quotes , quotes filtered by authors or tags etc. You need an API key to access this service."""
    quote_images: QuoteImages
    r"""Create beatiful quote images or get one of the premade images. You need an API key to access this service.
    https://theysaidso.com/api/quote#image - Find out more about image
    """
    quote_of_the_day: QuoteOfTheDay
    r"""Access quote of the day service. Use this to get the quote of the day in various categories. This is a free API that is available to public. You must credit They Said So if you are using the free version.
    https://theysaidso.com/api/quote#qod - Find out more
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.private_quotes = PrivateQuotes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.qshow = Qshow(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.quote = Quote(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.quote_images = QuoteImages(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.quote_of_the_day = QuoteOfTheDay(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    