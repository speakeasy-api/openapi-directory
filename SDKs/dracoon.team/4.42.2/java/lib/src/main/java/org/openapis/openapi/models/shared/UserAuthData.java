/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UserAuthData - User Authentication Data
 */
public class UserAuthData {
    /**
     * ID of the user's Active Directory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adConfigId")
    public Integer adConfigId;
    public UserAuthData withAdConfigId(Integer adConfigId) {
        this.adConfigId = adConfigId;
        return this;
    }
    
    /**
     * User login name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login")
    public String login;
    public UserAuthData withLogin(String login) {
        this.login = login;
        return this;
    }
    
    /**
     * Authentication method
     * 
     * 
     * 
     * Authentication methods:
     * 
     * * `basic`
     * 
     * * `active_directory`
     * 
     * * `radius`
     * 
     * * `openid`
     */
    @JsonProperty("method")
    public String method;
    public UserAuthData withMethod(String method) {
        this.method = method;
        return this;
    }
    
    /**
     * Determines whether user has to change his / her password
     * 
     * * default: `true` for `basic` auth type
     * 
     * * default: `false` for `active_directory`, `openid` and `radius` auth types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mustChangePassword")
    public Boolean mustChangePassword;
    public UserAuthData withMustChangePassword(Boolean mustChangePassword) {
        this.mustChangePassword = mustChangePassword;
        return this;
    }
    
    /**
     * ID of the user's OIDC provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oidConfigId")
    public Integer oidConfigId;
    public UserAuthData withOidConfigId(Integer oidConfigId) {
        this.oidConfigId = oidConfigId;
        return this;
    }
    
    /**
     * Password (only relevant for `basic` authentication type)
     * 
     * *NOT* your Active Directory, OpenID or RADIUS password!
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public UserAuthData withPassword(String password) {
        this.password = password;
        return this;
    }
    
}
