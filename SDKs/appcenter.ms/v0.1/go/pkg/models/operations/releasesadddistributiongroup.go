// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesAddDistributionGroupSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ReleasesAddDistributionGroupRequestBody - The release information.
type ReleasesAddDistributionGroupRequestBody struct {
	// Unique id of the release destination
	ID string `json:"id"`
	// Flag to mark the release for the provided destinations as mandatory
	MandatoryUpdate *bool `json:"mandatory_update,omitempty"`
	// Flag to enable or disable notifications to testers
	NotifyTesters *bool `json:"notify_testers,omitempty"`
}

type ReleasesAddDistributionGroupRequest struct {
	// The release information.
	RequestBody ReleasesAddDistributionGroupRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release
	ReleaseID int64 `pathParam:"style=simple,explode=false,name=release_id"`
}

type ReleasesAddDistributionGroup404ApplicationJSONCodeEnum string

const (
	ReleasesAddDistributionGroup404ApplicationJSONCodeEnumBadRequest          ReleasesAddDistributionGroup404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesAddDistributionGroup404ApplicationJSONCodeEnumConflict            ReleasesAddDistributionGroup404ApplicationJSONCodeEnum = "Conflict"
	ReleasesAddDistributionGroup404ApplicationJSONCodeEnumNotAcceptable       ReleasesAddDistributionGroup404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesAddDistributionGroup404ApplicationJSONCodeEnumNotFound            ReleasesAddDistributionGroup404ApplicationJSONCodeEnum = "NotFound"
	ReleasesAddDistributionGroup404ApplicationJSONCodeEnumInternalServerError ReleasesAddDistributionGroup404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesAddDistributionGroup404ApplicationJSONCodeEnumUnauthorized        ReleasesAddDistributionGroup404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesAddDistributionGroup404ApplicationJSONCodeEnumTooManyRequests     ReleasesAddDistributionGroup404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesAddDistributionGroup404ApplicationJSONCodeEnum) ToPointer() *ReleasesAddDistributionGroup404ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesAddDistributionGroup404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesAddDistributionGroup404ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAddDistributionGroup404ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesAddDistributionGroup404ApplicationJSON - Release not found
type ReleasesAddDistributionGroup404ApplicationJSON struct {
	Code    ReleasesAddDistributionGroup404ApplicationJSONCodeEnum `json:"code"`
	Message string                                                 `json:"message"`
}

type ReleasesAddDistributionGroup400ApplicationJSONCodeEnum string

const (
	ReleasesAddDistributionGroup400ApplicationJSONCodeEnumBadRequest          ReleasesAddDistributionGroup400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesAddDistributionGroup400ApplicationJSONCodeEnumConflict            ReleasesAddDistributionGroup400ApplicationJSONCodeEnum = "Conflict"
	ReleasesAddDistributionGroup400ApplicationJSONCodeEnumNotAcceptable       ReleasesAddDistributionGroup400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesAddDistributionGroup400ApplicationJSONCodeEnumNotFound            ReleasesAddDistributionGroup400ApplicationJSONCodeEnum = "NotFound"
	ReleasesAddDistributionGroup400ApplicationJSONCodeEnumInternalServerError ReleasesAddDistributionGroup400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesAddDistributionGroup400ApplicationJSONCodeEnumUnauthorized        ReleasesAddDistributionGroup400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesAddDistributionGroup400ApplicationJSONCodeEnumTooManyRequests     ReleasesAddDistributionGroup400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesAddDistributionGroup400ApplicationJSONCodeEnum) ToPointer() *ReleasesAddDistributionGroup400ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesAddDistributionGroup400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesAddDistributionGroup400ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAddDistributionGroup400ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesAddDistributionGroup400ApplicationJSON - Failure
type ReleasesAddDistributionGroup400ApplicationJSON struct {
	Code    ReleasesAddDistributionGroup400ApplicationJSONCodeEnum `json:"code"`
	Message string                                                 `json:"message"`
}

// ReleasesAddDistributionGroup201ApplicationJSON - Created
type ReleasesAddDistributionGroup201ApplicationJSON struct {
	// Unique id for the release destination
	ID string `json:"id"`
	// Flag to mark the release for the provided destinations as mandatory
	MandatoryUpdate bool `json:"mandatory_update"`
	// The url to check provisioning status.
	ProvisioningStatusURL *string `json:"provisioning_status_url,omitempty"`
}

type ReleasesAddDistributionGroupResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	ReleasesAddDistributionGroup201ApplicationJSONObject *ReleasesAddDistributionGroup201ApplicationJSON
	// Failure
	ReleasesAddDistributionGroup400ApplicationJSONObject *ReleasesAddDistributionGroup400ApplicationJSON
	// Release not found
	ReleasesAddDistributionGroup404ApplicationJSONObject *ReleasesAddDistributionGroup404ApplicationJSON
}
