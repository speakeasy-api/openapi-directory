// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ClaimIntoOrganizationPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

// ClaimIntoOrganizationRequestBodyLicensesModeEnum - Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled.
type ClaimIntoOrganizationRequestBodyLicensesModeEnum string

const (
	ClaimIntoOrganizationRequestBodyLicensesModeEnumAddDevices ClaimIntoOrganizationRequestBodyLicensesModeEnum = "addDevices"
	ClaimIntoOrganizationRequestBodyLicensesModeEnumRenew      ClaimIntoOrganizationRequestBodyLicensesModeEnum = "renew"
)

func (e *ClaimIntoOrganizationRequestBodyLicensesModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "addDevices":
		fallthrough
	case "renew":
		*e = ClaimIntoOrganizationRequestBodyLicensesModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ClaimIntoOrganizationRequestBodyLicensesModeEnum: %s", s)
	}
}

type ClaimIntoOrganizationRequestBodyLicenses struct {
	// The key of the license
	Key string `json:"key"`
	// Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled.
	Mode *ClaimIntoOrganizationRequestBodyLicensesModeEnum `json:"mode,omitempty"`
}

type ClaimIntoOrganizationRequestBody struct {
	// The licenses that should be claimed
	Licenses []ClaimIntoOrganizationRequestBodyLicenses `json:"licenses,omitempty"`
	// The numbers of the orders that should be claimed
	Orders []string `json:"orders,omitempty"`
	// The serials of the devices that should be claimed
	Serials []string `json:"serials,omitempty"`
}

type ClaimIntoOrganizationRequest struct {
	PathParams ClaimIntoOrganizationPathParams
	Request    *ClaimIntoOrganizationRequestBody `request:"mediaType=application/json"`
}

type ClaimIntoOrganizationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	ClaimIntoOrganization200ApplicationJSONObject map[string]interface{}
}
