"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import annotation as shared_annotation
from ..shared import messageevent as shared_messageevent
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TimeEvent:
    r"""A time-stamped annotation or message event in the Span."""
    
    annotation: Optional[shared_annotation.Annotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotation'), 'exclude': lambda f: f is None }})
    r"""Text annotation with a set of attributes."""  
    message_event: Optional[shared_messageevent.MessageEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageEvent'), 'exclude': lambda f: f is None }})
    r"""An event describing a message sent/received between Spans."""  
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The timestamp indicating the time the event occurred."""  
    