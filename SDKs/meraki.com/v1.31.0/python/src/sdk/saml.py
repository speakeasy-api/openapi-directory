"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Saml:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_organization_saml_idp(self, request: operations.CreateOrganizationSamlIdpRequest) -> operations.CreateOrganizationSamlIdpResponse:
        r"""Create a SAML IdP for your organization.
        Create a SAML IdP for your organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationSamlIdpRequest, base_url, '/organizations/{organizationId}/saml/idps', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationSamlIdpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CreateOrganizationSamlIdp201ApplicationJSON]])
                res.create_organization_saml_idp_201_application_json_objects = out

        return res

    def delete_organization_saml_idp(self, request: operations.DeleteOrganizationSamlIdpRequest) -> operations.DeleteOrganizationSamlIdpResponse:
        r"""Remove a SAML IdP in your organization.
        Remove a SAML IdP in your organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganizationSamlIdpRequest, base_url, '/organizations/{organizationId}/saml/idps/{idpId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganizationSamlIdpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_organization_saml(self, request: operations.GetOrganizationSamlRequest) -> operations.GetOrganizationSamlResponse:
        r"""Returns the SAML SSO enabled settings for an organization.
        Returns the SAML SSO enabled settings for an organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSamlRequest, base_url, '/organizations/{organizationId}/saml', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSamlResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationSaml200ApplicationJSON])
                res.get_organization_saml_200_application_json_object = out

        return res

    def get_organization_saml_idp(self, request: operations.GetOrganizationSamlIdpRequest) -> operations.GetOrganizationSamlIdpResponse:
        r"""Get a SAML IdP from your organization.
        Get a SAML IdP from your organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSamlIdpRequest, base_url, '/organizations/{organizationId}/saml/idps/{idpId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSamlIdpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationSamlIdp200ApplicationJSON])
                res.get_organization_saml_idp_200_application_json_object = out

        return res

    def get_organization_saml_idps(self, request: operations.GetOrganizationSamlIdpsRequest) -> operations.GetOrganizationSamlIdpsResponse:
        r"""List the SAML IdPs in your organization.
        List the SAML IdPs in your organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSamlIdpsRequest, base_url, '/organizations/{organizationId}/saml/idps', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSamlIdpsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSamlIdps200ApplicationJSON]])
                res.get_organization_saml_idps_200_application_json_objects = out

        return res

    def update_organization_saml(self, request: operations.UpdateOrganizationSamlRequest) -> operations.UpdateOrganizationSamlResponse:
        r"""Updates the SAML SSO enabled settings for an organization.
        Updates the SAML SSO enabled settings for an organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationSamlRequest, base_url, '/organizations/{organizationId}/saml', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationSamlResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateOrganizationSaml200ApplicationJSON])
                res.update_organization_saml_200_application_json_object = out

        return res

    def update_organization_saml_idp(self, request: operations.UpdateOrganizationSamlIdpRequest) -> operations.UpdateOrganizationSamlIdpResponse:
        r"""Update a SAML IdP in your organization
        Update a SAML IdP in your organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationSamlIdpRequest, base_url, '/organizations/{organizationId}/saml/idps/{idpId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationSamlIdpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.UpdateOrganizationSamlIdp200ApplicationJSON]])
                res.update_organization_saml_idp_200_application_json_objects = out

        return res

    