"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dynamiclinkinfo as shared_dynamiclinkinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ManagedShortLinkFlaggedAttributeEnum(str, Enum):
    UNSPECIFIED_ATTRIBUTE = 'UNSPECIFIED_ATTRIBUTE'
    SPAM = 'SPAM'

class ManagedShortLinkVisibilityEnum(str, Enum):
    r"""Visibility status of link."""
    UNSPECIFIED_VISIBILITY = 'UNSPECIFIED_VISIBILITY'
    UNARCHIVED = 'UNARCHIVED'
    ARCHIVED = 'ARCHIVED'
    NEVER_SHOWN = 'NEVER_SHOWN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ManagedShortLink:
    r"""Managed Short Link."""
    
    creation_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'exclude': lambda f: f is None }})
    r"""Creation timestamp of the short link."""  
    flagged_attribute: Optional[list[ManagedShortLinkFlaggedAttributeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flaggedAttribute'), 'exclude': lambda f: f is None }})
    r"""Attributes that have been flagged about this short url."""  
    info: Optional[shared_dynamiclinkinfo.DynamicLinkInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is None }})
    r"""Information about a Dynamic Link."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""Short durable link url, for example, \\"https://sample.app.goo.gl/xyz123\\". Required."""  
    link_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkName'), 'exclude': lambda f: f is None }})
    r"""Link name defined by the creator. Required."""  
    visibility: Optional[ManagedShortLinkVisibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""Visibility status of link."""  
    