"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Events:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_network_firmware_upgrades_staged_event(self, request: operations.CreateNetworkFirmwareUpgradesStagedEventRequest) -> operations.CreateNetworkFirmwareUpgradesStagedEventResponse:
        r"""Create a Staged Upgrade Event for a network
        Create a Staged Upgrade Event for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkFirmwareUpgradesStagedEventRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkFirmwareUpgradesStagedEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON])
                res.create_network_firmware_upgrades_staged_event_200_application_json_object = out

        return res

    def defer_network_firmware_upgrades_staged_events(self, request: operations.DeferNetworkFirmwareUpgradesStagedEventsRequest) -> operations.DeferNetworkFirmwareUpgradesStagedEventsResponse:
        r"""Postpone by 1 week all pending staged upgrade stages for a network
        Postpone by 1 week all pending staged upgrade stages for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeferNetworkFirmwareUpgradesStagedEventsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events/defer', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeferNetworkFirmwareUpgradesStagedEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeferNetworkFirmwareUpgradesStagedEvents200ApplicationJSON])
                res.defer_network_firmware_upgrades_staged_events_200_application_json_object = out

        return res

    def get_network_appliance_client_security_events(self, request: operations.GetNetworkApplianceClientSecurityEventsRequest) -> operations.GetNetworkApplianceClientSecurityEventsResponse:
        r"""List the security events for a client
        List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkApplianceClientSecurityEventsRequest, base_url, '/networks/{networkId}/appliance/clients/{clientId}/security/events', request)
        
        query_params = utils.get_query_params(operations.GetNetworkApplianceClientSecurityEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkApplianceClientSecurityEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_appliance_client_security_events_200_application_json_objects = out

        return res

    def get_network_appliance_security_events(self, request: operations.GetNetworkApplianceSecurityEventsRequest) -> operations.GetNetworkApplianceSecurityEventsResponse:
        r"""List the security events for a network
        List the security events for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkApplianceSecurityEventsRequest, base_url, '/networks/{networkId}/appliance/security/events', request)
        
        query_params = utils.get_query_params(operations.GetNetworkApplianceSecurityEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkApplianceSecurityEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_appliance_security_events_200_application_json_objects = out

        return res

    def get_network_events(self, request: operations.GetNetworkEventsRequest) -> operations.GetNetworkEventsResponse:
        r"""List the events for the network
        List the events for the network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkEventsRequest, base_url, '/networks/{networkId}/events', request)
        
        query_params = utils.get_query_params(operations.GetNetworkEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkEvents200ApplicationJSON])
                res.get_network_events_200_application_json_object = out

        return res

    def get_network_events_event_types(self, request: operations.GetNetworkEventsEventTypesRequest) -> operations.GetNetworkEventsEventTypesResponse:
        r"""List the event type to human-readable description
        List the event type to human-readable description
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkEventsEventTypesRequest, base_url, '/networks/{networkId}/events/eventTypes', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkEventsEventTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkEventsEventTypes200ApplicationJSON]])
                res.get_network_events_event_types_200_application_json_objects = out

        return res

    def get_network_firmware_upgrades_staged_events(self, request: operations.GetNetworkFirmwareUpgradesStagedEventsRequest) -> operations.GetNetworkFirmwareUpgradesStagedEventsResponse:
        r"""Get the Staged Upgrade Event from a network
        Get the Staged Upgrade Event from a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkFirmwareUpgradesStagedEventsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkFirmwareUpgradesStagedEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkFirmwareUpgradesStagedEvents200ApplicationJSON])
                res.get_network_firmware_upgrades_staged_events_200_application_json_object = out

        return res

    def get_organization_appliance_security_events(self, request: operations.GetOrganizationApplianceSecurityEventsRequest) -> operations.GetOrganizationApplianceSecurityEventsResponse:
        r"""List the security events for an organization
        List the security events for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationApplianceSecurityEventsRequest, base_url, '/organizations/{organizationId}/appliance/security/events', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationApplianceSecurityEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationApplianceSecurityEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_appliance_security_events_200_application_json_objects = out

        return res

    def rollbacks_network_firmware_upgrades_staged_events(self, request: operations.RollbacksNetworkFirmwareUpgradesStagedEventsRequest) -> operations.RollbacksNetworkFirmwareUpgradesStagedEventsResponse:
        r"""Rollback a Staged Upgrade Event for a network
        Rollback a Staged Upgrade Event for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RollbacksNetworkFirmwareUpgradesStagedEventsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RollbacksNetworkFirmwareUpgradesStagedEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSON])
                res.rollbacks_network_firmware_upgrades_staged_events_200_application_json_object = out

        return res

    def update_network_firmware_upgrades_staged_events(self, request: operations.UpdateNetworkFirmwareUpgradesStagedEventsRequest) -> operations.UpdateNetworkFirmwareUpgradesStagedEventsResponse:
        r"""Update the Staged Upgrade Event for a network
        Update the Staged Upgrade Event for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkFirmwareUpgradesStagedEventsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkFirmwareUpgradesStagedEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateNetworkFirmwareUpgradesStagedEvents200ApplicationJSON])
                res.update_network_firmware_upgrades_staged_events_200_application_json_object = out

        return res

    