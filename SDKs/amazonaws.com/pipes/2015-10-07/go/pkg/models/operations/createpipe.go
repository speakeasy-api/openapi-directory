// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreatePipePathParams struct {
	// The name of the pipe.
	Name string `pathParam:"style=simple,explode=false,name=Name"`
}

type CreatePipeHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreatePipeRequestBodyDesiredStateEnum - The state the pipe should be in.
type CreatePipeRequestBodyDesiredStateEnum string

const (
	CreatePipeRequestBodyDesiredStateEnumRunning CreatePipeRequestBodyDesiredStateEnum = "RUNNING"
	CreatePipeRequestBodyDesiredStateEnumStopped CreatePipeRequestBodyDesiredStateEnum = "STOPPED"
)

func (e *CreatePipeRequestBodyDesiredStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RUNNING":
		fallthrough
	case "STOPPED":
		*e = CreatePipeRequestBodyDesiredStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePipeRequestBodyDesiredStateEnum: %s", s)
	}
}

// CreatePipeRequestBodyEnrichmentParameters - The parameters required to set up enrichment on your pipe.
type CreatePipeRequestBodyEnrichmentParameters struct {
	HTTPParameters *shared.PipeEnrichmentHTTPParameters `json:"HttpParameters,omitempty"`
	InputTemplate  *string                              `json:"InputTemplate,omitempty"`
}

// CreatePipeRequestBodySourceParameters - The parameters required to set up a source for your pipe.
type CreatePipeRequestBodySourceParameters struct {
	ActiveMQBrokerParameters        *shared.PipeSourceActiveMQBrokerParameters        `json:"ActiveMQBrokerParameters,omitempty"`
	DynamoDBStreamParameters        *shared.PipeSourceDynamoDBStreamParameters        `json:"DynamoDBStreamParameters,omitempty"`
	FilterCriteria                  *shared.FilterCriteria                            `json:"FilterCriteria,omitempty"`
	KinesisStreamParameters         *shared.PipeSourceKinesisStreamParameters         `json:"KinesisStreamParameters,omitempty"`
	ManagedStreamingKafkaParameters *shared.PipeSourceManagedStreamingKafkaParameters `json:"ManagedStreamingKafkaParameters,omitempty"`
	RabbitMQBrokerParameters        *shared.PipeSourceRabbitMQBrokerParameters        `json:"RabbitMQBrokerParameters,omitempty"`
	SelfManagedKafkaParameters      *shared.PipeSourceSelfManagedKafkaParameters      `json:"SelfManagedKafkaParameters,omitempty"`
	SqsQueueParameters              *shared.PipeSourceSqsQueueParameters              `json:"SqsQueueParameters,omitempty"`
}

// CreatePipeRequestBodyTargetParameters - The parameters required to set up a target for your pipe.
type CreatePipeRequestBodyTargetParameters struct {
	BatchJobParameters                 *shared.PipeTargetBatchJobParameters            `json:"BatchJobParameters,omitempty"`
	CloudWatchLogsParameters           *shared.PipeTargetCloudWatchLogsParameters      `json:"CloudWatchLogsParameters,omitempty"`
	EcsTaskParameters                  *shared.PipeTargetEcsTaskParameters             `json:"EcsTaskParameters,omitempty"`
	EventBridgeEventBusParameters      *shared.PipeTargetEventBridgeEventBusParameters `json:"EventBridgeEventBusParameters,omitempty"`
	HTTPParameters                     *shared.PipeTargetHTTPParameters                `json:"HttpParameters,omitempty"`
	InputTemplate                      *string                                         `json:"InputTemplate,omitempty"`
	KinesisStreamParameters            *shared.PipeTargetKinesisStreamParameters       `json:"KinesisStreamParameters,omitempty"`
	LambdaFunctionParameters           *shared.PipeTargetLambdaFunctionParameters      `json:"LambdaFunctionParameters,omitempty"`
	RedshiftDataParameters             *shared.PipeTargetRedshiftDataParameters        `json:"RedshiftDataParameters,omitempty"`
	SageMakerPipelineParameters        *shared.PipeTargetSageMakerPipelineParameters   `json:"SageMakerPipelineParameters,omitempty"`
	SqsQueueParameters                 *shared.PipeTargetSqsQueueParameters            `json:"SqsQueueParameters,omitempty"`
	StepFunctionStateMachineParameters *shared.PipeTargetStateMachineParameters        `json:"StepFunctionStateMachineParameters,omitempty"`
}

type CreatePipeRequestBody struct {
	// A description of the pipe.
	Description *string `json:"Description,omitempty"`
	// The state the pipe should be in.
	DesiredState *CreatePipeRequestBodyDesiredStateEnum `json:"DesiredState,omitempty"`
	// The ARN of the enrichment resource.
	Enrichment *string `json:"Enrichment,omitempty"`
	// The parameters required to set up enrichment on your pipe.
	EnrichmentParameters *CreatePipeRequestBodyEnrichmentParameters `json:"EnrichmentParameters,omitempty"`
	// The ARN of the role that allows the pipe to send data to the target.
	RoleArn string `json:"RoleArn"`
	// The ARN of the source resource.
	Source string `json:"Source"`
	// The parameters required to set up a source for your pipe.
	SourceParameters *CreatePipeRequestBodySourceParameters `json:"SourceParameters,omitempty"`
	// The list of key-value pairs to associate with the pipe.
	Tags map[string]string `json:"Tags,omitempty"`
	// The ARN of the target resource.
	Target string `json:"Target"`
	// The parameters required to set up a target for your pipe.
	TargetParameters *CreatePipeRequestBodyTargetParameters `json:"TargetParameters,omitempty"`
}

type CreatePipeRequest struct {
	PathParams CreatePipePathParams
	Headers    CreatePipeHeaders
	Request    CreatePipeRequestBody `request:"mediaType=application/json"`
}

type CreatePipeResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreatePipeResponse *shared.CreatePipeResponse
	// InternalException
	InternalException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
