// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InterfaceConnectionConnectionStatusLabelEnum string

const (
	InterfaceConnectionConnectionStatusLabelEnumNotConnected InterfaceConnectionConnectionStatusLabelEnum = "Not Connected"
	InterfaceConnectionConnectionStatusLabelEnumConnected    InterfaceConnectionConnectionStatusLabelEnum = "Connected"
)

func (e *InterfaceConnectionConnectionStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Not Connected":
		fallthrough
	case "Connected":
		*e = InterfaceConnectionConnectionStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InterfaceConnectionConnectionStatusLabelEnum: %s", s)
	}
}

type InterfaceConnectionConnectionStatusValueEnum string

const (
	InterfaceConnectionConnectionStatusValueEnumFalse InterfaceConnectionConnectionStatusValueEnum = "false"
	InterfaceConnectionConnectionStatusValueEnumTrue  InterfaceConnectionConnectionStatusValueEnum = "true"
)

func (e *InterfaceConnectionConnectionStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = InterfaceConnectionConnectionStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InterfaceConnectionConnectionStatusValueEnum: %s", s)
	}
}

type InterfaceConnectionConnectionStatus struct {
	Label InterfaceConnectionConnectionStatusLabelEnum `json:"label"`
	Value InterfaceConnectionConnectionStatusValueEnum `json:"value"`
}

type InterfaceConnection struct {
	ConnectionStatus *InterfaceConnectionConnectionStatus `json:"connection_status,omitempty"`
	InterfaceA       *NestedInterface                     `json:"interface_a,omitempty"`
	InterfaceB       NestedInterface                      `json:"interface_b"`
}
