/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Caste Certificate
   *
   * @remarks
   * API to verify Caste Certificate.
   */
  ctcer(
    req: operations.CtcerRequestBody,
    security: operations.CtcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CtcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CtcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ctcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CtcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CtcerResponse = new operations.CtcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ctcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ctcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ctcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ctcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ctcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ctcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ctcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ctcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ctcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ctcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ctcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ctcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ctcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ctcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Economically Weaker Section Certificate
   *
   * @remarks
   * API to verify Economically Weaker Section Certificate.
   */
  ewcer(
    req: operations.EwcerRequestBody,
    security: operations.EwcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EwcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EwcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ewcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EwcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EwcerResponse = new operations.EwcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ewcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ewcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ewcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ewcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ewcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ewcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ewcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ewcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ewcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ewcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ewcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ewcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ewcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ewcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Legal Heir Certificate
   *
   * @remarks
   * API to verify Legal Heir Certificate.
   */
  lhcer(
    req: operations.LhcerRequestBody,
    security: operations.LhcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LhcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LhcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/lhcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LhcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LhcerResponse = new operations.LhcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * OBC Certificate
   *
   * @remarks
   * API to verify OBC Certificate.
   */
  obcer(
    req: operations.ObcerRequestBody,
    security: operations.ObcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ObcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/obcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ObcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObcerResponse = new operations.ObcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Records of Rights
   *
   * @remarks
   * API to verify Records of Rights.
   */
  ror1b(
    req: operations.Ror1bRequestBody,
    security: operations.Ror1bSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Ror1bResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Ror1bRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ror1b/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Ror1bSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Ror1bResponse = new operations.Ror1bResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ror1b400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ror1b400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ror1b401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ror1b401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ror1b404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ror1b404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ror1b500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ror1b500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ror1b502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ror1b502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ror1b503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ror1b503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ror1b504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ror1b504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Solvency Certificate
   *
   * @remarks
   * API to verify Solvency Certificate.
   */
  slcer(
    req: operations.SlcerRequestBody,
    security: operations.SlcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SlcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SlcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/slcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SlcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SlcerResponse = new operations.SlcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Slcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Slcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Slcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Slcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Slcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Slcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Slcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
