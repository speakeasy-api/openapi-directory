"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import auditcontext as shared_auditcontext
from ..shared import permissiontype_enum as shared_permissiontype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUnfilteredTableMetadataRequest:
    
    catalog_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogId') }})  
    database_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseName') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    supported_permission_types: list[shared_permissiontype_enum.PermissionTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedPermissionTypes') }})  
    audit_context: Optional[shared_auditcontext.AuditContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuditContext'), 'exclude': lambda f: f is None }})  
    