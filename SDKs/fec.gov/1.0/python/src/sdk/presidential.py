"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Presidential:
    r"""Data supporting fec.gov's presidential map.
    
     For more information about the presidential map data available to download from fec.gov, please visit: https://www.fec.gov/campaign-finance-data/presidential-map-data/
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_presidential_contributions_by_candidate_(self, request: operations.GetPresidentialContributionsByCandidateRequest) -> operations.GetPresidentialContributionsByCandidateResponse:
        r"""Net receipts per candidate.
        
        Filter with `contributor_state='US'` for national totals
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/presidential/contributions/by_candidate/'
        
        query_params = utils.get_query_params(operations.GetPresidentialContributionsByCandidateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPresidentialContributionsByCandidateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PresidentialByCandidatePage])
                res.presidential_by_candidate_page = out

        return res

    def get_presidential_contributions_by_size_(self, request: operations.GetPresidentialContributionsBySizeRequest) -> operations.GetPresidentialContributionsBySizeResponse:
        r"""Contribution receipts by size per candidate.
        
        Filter by candidate_id, election_year and/or size
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/presidential/contributions/by_size/'
        
        query_params = utils.get_query_params(operations.GetPresidentialContributionsBySizeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPresidentialContributionsBySizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PresidentialBySizePage])
                res.presidential_by_size_page = out

        return res

    def get_presidential_contributions_by_state_(self, request: operations.GetPresidentialContributionsByStateRequest) -> operations.GetPresidentialContributionsByStateResponse:
        r"""Contribution receipts by state per candidate.
        
        Filter by candidate_id and/or election_year
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/presidential/contributions/by_state/'
        
        query_params = utils.get_query_params(operations.GetPresidentialContributionsByStateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPresidentialContributionsByStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PresidentialByStatePage])
                res.presidential_by_state_page = out

        return res

    def get_presidential_coverage_end_date_(self, request: operations.GetPresidentialCoverageEndDateRequest) -> operations.GetPresidentialCoverageEndDateResponse:
        r"""Coverage end date per candidate.
        
        Filter by candidate_id and/or election_year
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/presidential/coverage_end_date/'
        
        query_params = utils.get_query_params(operations.GetPresidentialCoverageEndDateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPresidentialCoverageEndDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PresidentialCoveragePage])
                res.presidential_coverage_page = out

        return res

    def get_presidential_financial_summary_(self, request: operations.GetPresidentialFinancialSummaryRequest) -> operations.GetPresidentialFinancialSummaryResponse:
        r"""Financial summary per candidate.
        
        Filter by candidate_id and/or election_year
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/presidential/financial_summary/'
        
        query_params = utils.get_query_params(operations.GetPresidentialFinancialSummaryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPresidentialFinancialSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PresidentialSummaryPage])
                res.presidential_summary_page = out

        return res

    