"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils

class CheckDepositCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'

class CheckDepositCheckDepositAcceptanceCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckDepositCheckDepositAcceptance:
    r"""If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check."""
    
    account_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_number') }})
    r"""The account number printed on the check."""  
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents."""  
    auxiliary_on_us: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auxiliary_on_us') }})
    r"""An additional line of metadata printed on the check. This typically includes the check number for business checks."""  
    check_deposit_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_deposit_id') }})
    r"""The ID of the Check Deposit that was accepted."""  
    currency: CheckDepositCheckDepositAcceptanceCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency."""  
    routing_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routing_number') }})
    r"""The routing number printed on the check."""  
    serial_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial_number') }})
    r"""The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field."""  
    
class CheckDepositCheckDepositRejectionCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'

class CheckDepositCheckDepositRejectionReasonEnum(str, Enum):
    r"""Why the check deposit was rejected."""
    INCOMPLETE_IMAGE = 'incomplete_image'
    DUPLICATE = 'duplicate'
    POOR_IMAGE_QUALITY = 'poor_image_quality'
    INCORRECT_AMOUNT = 'incorrect_amount'
    INCORRECT_RECIPIENT = 'incorrect_recipient'
    NOT_ELIGIBLE_FOR_MOBILE_DEPOSIT = 'not_eligible_for_mobile_deposit'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckDepositCheckDepositRejection:
    r"""If your deposit is rejected by Increase, this will contain details as to why it was rejected."""
    
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The rejected amount in the minor unit of check's currency. For dollars, for example, this is cents."""  
    currency: CheckDepositCheckDepositRejectionCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency."""  
    reason: CheckDepositCheckDepositRejectionReasonEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""Why the check deposit was rejected."""  
    rejected_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejected_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was rejected."""  
    
class CheckDepositCheckDepositReturnCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'

class CheckDepositCheckDepositReturnReturnReasonEnum(str, Enum):
    ACH_CONVERSION_NOT_SUPPORTED = 'ach_conversion_not_supported'
    CLOSED_ACCOUNT = 'closed_account'
    DUPLICATE_SUBMISSION = 'duplicate_submission'
    INSUFFICIENT_FUNDS = 'insufficient_funds'
    NO_ACCOUNT = 'no_account'
    NOT_AUTHORIZED = 'not_authorized'
    STALE_DATED = 'stale_dated'
    STOP_PAYMENT = 'stop_payment'
    UNKNOWN_REASON = 'unknown_reason'
    UNMATCHED_DETAILS = 'unmatched_details'
    UNREADABLE_IMAGE = 'unreadable_image'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckDepositCheckDepositReturn:
    r"""If your deposit is returned, this will contain details as to why it was returned."""
    
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents."""  
    check_deposit_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_deposit_id') }})
    r"""The identifier of the Check Deposit that was returned."""  
    currency: CheckDepositCheckDepositReturnCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency."""  
    return_reason: CheckDepositCheckDepositReturnReturnReasonEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_reason') }})  
    returned_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returned_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned."""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""The identifier of the transaction that reversed the original check deposit transaction."""  
    
class CheckDepositStatusEnum(str, Enum):
    r"""The status of the Check Deposit."""
    PENDING = 'pending'
    SUBMITTED = 'submitted'
    REJECTED = 'rejected'
    RETURNED = 'returned'

class CheckDepositTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `check_deposit`."""
    CHECK_DEPOSIT = 'check_deposit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckDeposit:
    r"""Check Deposits allow you to deposit images of paper checks into your account."""
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""The Account the check was deposited into."""  
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents."""  
    back_image_file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('back_image_file_id') }})
    r"""The ID for the File containing the image of the back of the check."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created."""  
    currency: CheckDepositCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit."""  
    deposit_acceptance: CheckDepositCheckDepositAcceptance = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deposit_acceptance') }})
    r"""If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check."""  
    deposit_rejection: CheckDepositCheckDepositRejection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deposit_rejection') }})
    r"""If your deposit is rejected by Increase, this will contain details as to why it was rejected."""  
    deposit_return: CheckDepositCheckDepositReturn = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deposit_return') }})
    r"""If your deposit is returned, this will contain details as to why it was returned."""  
    front_image_file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('front_image_file_id') }})
    r"""The ID for the File containing the image of the front of the check."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The deposit's identifier."""  
    status: CheckDepositStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the Check Deposit."""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""The ID for the Transaction created by the deposit."""  
    type: CheckDepositTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `check_deposit`."""  
    