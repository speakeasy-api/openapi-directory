/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Debugger {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes the breakpoint from the debuggee.
   */
  clouddebuggerDebuggerDebuggeesBreakpointsDelete(
    req: operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest,
    security: operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteResponse =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets breakpoint information.
   */
  clouddebuggerDebuggerDebuggeesBreakpointsGet(
    req: operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest,
    security: operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetResponse =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBreakpointResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetBreakpointResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all breakpoints for the debuggee.
   */
  clouddebuggerDebuggerDebuggeesBreakpointsList(
    req: operations.ClouddebuggerDebuggerDebuggeesBreakpointsListRequest,
    security: operations.ClouddebuggerDebuggerDebuggeesBreakpointsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddebuggerDebuggerDebuggeesBreakpointsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddebuggerDebuggerDebuggeesBreakpointsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/debugger/debuggees/{debuggeeId}/breakpoints",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddebuggerDebuggerDebuggeesBreakpointsListResponse =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listBreakpointsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListBreakpointsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the breakpoint to the debuggee.
   */
  clouddebuggerDebuggerDebuggeesBreakpointsSet(
    req: operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest,
    security: operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/debugger/debuggees/{debuggeeId}/breakpoints/set",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "breakpoint",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetResponse =
        new operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setBreakpointResponse = utils.objectToClass(
              httpRes?.data,
              shared.SetBreakpointResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the debuggees that the user has access to.
   */
  clouddebuggerDebuggerDebuggeesList(
    req: operations.ClouddebuggerDebuggerDebuggeesListRequest,
    security: operations.ClouddebuggerDebuggerDebuggeesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddebuggerDebuggerDebuggeesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddebuggerDebuggerDebuggeesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/debugger/debuggees";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ClouddebuggerDebuggerDebuggeesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddebuggerDebuggerDebuggeesListResponse =
        new operations.ClouddebuggerDebuggerDebuggeesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDebuggeesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDebuggeesResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
