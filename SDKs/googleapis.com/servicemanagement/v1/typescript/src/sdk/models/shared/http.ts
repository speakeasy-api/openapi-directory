/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HttpRule } from "./httprule";
import { Expose, Type } from "class-transformer";

/**
 * Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
 */
export class Http extends SpeakeasyBase {
  /**
   * When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where "%2F" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fullyDecodeReservedExpansion" })
  fullyDecodeReservedExpansion?: boolean;

  /**
   * A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
   */
  @SpeakeasyMetadata({ elemType: HttpRule })
  @Expose({ name: "rules" })
  @Type(() => HttpRule)
  rules?: HttpRule[];
}
