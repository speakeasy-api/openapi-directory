<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InfoRequests 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getAllERC20Balance
     * 
     * Get the balance of an ERC20 address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getallerc20balanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getallerc20balanceResponse
     */
	public function getallerc20balance(
        \OpenAPI\OpenAPI\Models\Operations\Getallerc20balanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getallerc20balanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/balances/{address}/erc20/{erc20_token}', \OpenAPI\OpenAPI\Models\Operations\Getallerc20balanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getallerc20balanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getallerc20balance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getallerc20balance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBlock
     * 
     * Get information of a specific block
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetblockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetblockResponse
     */
	public function getblock(
        \OpenAPI\OpenAPI\Models\Operations\GetblockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetblockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/blocks/{block}', \OpenAPI\OpenAPI\Models\Operations\GetblockRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetblockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblock200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblock200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getERC20
     * 
     * Get information about an ERC20 token
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Geterc20Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Geterc20Response
     */
	public function geterc20(
        \OpenAPI\OpenAPI\Models\Operations\Geterc20Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Geterc20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/erc20/{erc20_token}', \OpenAPI\OpenAPI\Models\Operations\Geterc20Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Geterc20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->geterc20200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Geterc20200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getEthereumBalance
     * 
     * Get the balance of an address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetethereumbalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetethereumbalanceResponse
     */
	public function getethereumbalance(
        \OpenAPI\OpenAPI\Models\Operations\GetethereumbalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetethereumbalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/balances/{address}', \OpenAPI\OpenAPI\Models\Operations\GetethereumbalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetethereumbalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getethereumbalance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getethereumbalance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getGasPrice
     * 
     * Get gas price
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetgaspriceResponse
     */
	public function getgasprice(
    ): \OpenAPI\OpenAPI\Models\Operations\GetgaspriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/gasprice');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetgaspriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getgasprice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getgasprice200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getLastBlockNumber
     * 
     * Get the latest block number
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetlastblocknumberResponse
     */
	public function getlastblocknumber(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetlastblocknumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/blocks/number');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetlastblocknumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getlastblocknumber200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getNFTOwner
     * 
     * Get the Owner of an NFT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetnftownerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetnftownerResponse
     */
	public function getnftowner(
        \OpenAPI\OpenAPI\Models\Operations\GetnftownerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetnftownerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/nfts/{contract}/owner/{token_id}', \OpenAPI\OpenAPI\Models\Operations\GetnftownerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetnftownerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getnftowner200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getnftowner200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getNFTUri
     * 
     * Get the URI of an NFT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetnfturiRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetnfturiResponse
     */
	public function getnfturi(
        \OpenAPI\OpenAPI\Models\Operations\GetnfturiRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetnfturiResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/nfts/{contract}/uri/{token_id}', \OpenAPI\OpenAPI\Models\Operations\GetnfturiRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetnfturiResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getnfturi200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getnfturi200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransaction
     * 
     * Get info about a transaction
     * 
     * You can choose if you want to get the Transaction encoded or decoded by add /decoded to your request. See examlpes for details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GettransactionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GettransactionResponse
     */
	public function gettransaction(
        \OpenAPI\OpenAPI\Models\Operations\GettransactionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GettransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/transactions/{transaction}/decoded', \OpenAPI\OpenAPI\Models\Operations\GettransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GettransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransaction200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransaction200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransactionReceipt
     * 
     * Get info about a transaction receipt
     * 
     * You can choose if you want to get the Transaction encoded or decoded by add /decoded to your request. See examlpes for details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GettransactionreceiptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GettransactionreceiptResponse
     */
	public function gettransactionreceipt(
        \OpenAPI\OpenAPI\Models\Operations\GettransactionreceiptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GettransactionreceiptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ethereum/transactions/{transaction}/receipt/decoded', \OpenAPI\OpenAPI\Models\Operations\GettransactionreceiptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GettransactionreceiptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransactionreceipt200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}