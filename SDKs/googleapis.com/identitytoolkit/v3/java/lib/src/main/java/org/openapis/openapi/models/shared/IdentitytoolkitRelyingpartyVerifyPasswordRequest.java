/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IdentitytoolkitRelyingpartyVerifyPasswordRequest - Request to verify the password.
 */
public class IdentitytoolkitRelyingpartyVerifyPasswordRequest {
    /**
     * The captcha challenge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captchaChallenge")
    public String captchaChallenge;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withCaptchaChallenge(String captchaChallenge) {
        this.captchaChallenge = captchaChallenge;
        return this;
    }
    
    /**
     * Response to the captcha.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captchaResponse")
    public String captchaResponse;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withCaptchaResponse(String captchaResponse) {
        this.captchaResponse = captchaResponse;
        return this;
    }
    
    /**
     * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delegatedProjectNumber")
    public String delegatedProjectNumber;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withDelegatedProjectNumber(String delegatedProjectNumber) {
        this.delegatedProjectNumber = delegatedProjectNumber;
        return this;
    }
    
    /**
     * The email of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The GITKit token of the authenticated user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idToken")
    public String idToken;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withIdToken(String idToken) {
        this.idToken = idToken;
        return this;
    }
    
    /**
     * Instance id token of the app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceId")
    public String instanceId;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }
    
    /**
     * The password inputed by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * The GITKit token for the non-trusted IDP, which is to be confirmed by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingIdToken")
    public String pendingIdToken;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withPendingIdToken(String pendingIdToken) {
        this.pendingIdToken = pendingIdToken;
        return this;
    }
    
    /**
     * Whether return sts id token and refresh token instead of gitkit token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnSecureToken")
    public Boolean returnSecureToken;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withReturnSecureToken(Boolean returnSecureToken) {
        this.returnSecureToken = returnSecureToken;
        return this;
    }
    
    /**
     * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenantId")
    public String tenantId;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }
    
    /**
     * Tenant project number to be used for idp discovery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenantProjectNumber")
    public String tenantProjectNumber;

    public IdentitytoolkitRelyingpartyVerifyPasswordRequest withTenantProjectNumber(String tenantProjectNumber) {
        this.tenantProjectNumber = tenantProjectNumber;
        return this;
    }
    
    public IdentitytoolkitRelyingpartyVerifyPasswordRequest(){}
}
