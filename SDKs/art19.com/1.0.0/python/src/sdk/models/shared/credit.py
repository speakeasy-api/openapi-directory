"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import resourceidentifier as shared_resourceidentifier
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CreditAttributesTypeEnum(str, Enum):
    r"""The type of credit the linked person has on the referenced entity"""
    ANCHOR_CREDIT = 'AnchorCredit'
    ASSOCIATE_PRODUCER_CREDIT = 'AssociateProducerCredit'
    AUTHOR_CREDIT = 'AuthorCredit'
    CAST_CREDIT = 'CastCredit'
    CO_HOST_CREDIT = 'CoHostCredit'
    COMPOSER_CREDIT = 'ComposerCredit'
    CREATOR_CREDIT = 'CreatorCredit'
    CREDIT = 'Credit'
    DIRECTOR_CREDIT = 'DirectorCredit'
    EDITOR_CREDIT = 'EditorCredit'
    ENGINEER_CREDIT = 'EngineerCredit'
    EXECUTIVE_PRODUCER_CREDIT = 'ExecutiveProducerCredit'
    GUEST_CO_HOST_CREDIT = 'GuestCoHostCredit'
    GUEST_CREDIT = 'GuestCredit'
    GUEST_HOST_CREDIT = 'GuestHostCredit'
    HEAD_WRITER_CREDIT = 'HeadWriterCredit'
    HOST_CREDIT = 'HostCredit'
    PRODUCER_CREDIT = 'ProducerCredit'
    REPORTER_CREDIT = 'ReporterCredit'
    SENIOR_PRODUCER_CREDIT = 'SeniorProducerCredit'
    SIDEKICK_CREDIT = 'SidekickCredit'
    VIDEO_PRODUCER_CREDIT = 'VideoProducerCredit'
    WRITER_CREDIT = 'WriterCredit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreditAttributes:
    
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    position: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""The order of this credit within all credits of the referenced creditable entity"""  
    type: Optional[CreditAttributesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of credit the linked person has on the referenced entity"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreditRelationshipsCreditable:
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreditRelationshipsPerson:
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreditRelationships:
    
    creditable: Optional[CreditRelationshipsCreditable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditable'), 'exclude': lambda f: f is None }})  
    person: Optional[CreditRelationshipsPerson] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('person'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Credit:
    r"""A credit links a specific person to a series, season, or episode in a specific role."""
    
    attributes: Optional[CreditAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[CreditRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of resource. This is always `credits`"""  
    