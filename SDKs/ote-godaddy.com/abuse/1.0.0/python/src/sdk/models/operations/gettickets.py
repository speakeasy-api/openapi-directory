"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetTicketsTypeEnum(str, Enum):
    r"""The type of abuse."""
    A_RECORD = 'A_RECORD'
    CHILD_ABUSE = 'CHILD_ABUSE'
    CONTENT = 'CONTENT'
    FRAUD_WIRE = 'FRAUD_WIRE'
    IP_BLOCK = 'IP_BLOCK'
    MALWARE = 'MALWARE'
    NETWORK_ABUSE = 'NETWORK_ABUSE'
    PHISHING = 'PHISHING'
    SPAM = 'SPAM'


@dataclasses.dataclass
class GetTicketsRequest:
    
    closed: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'closed', 'style': 'form', 'explode': True }})
    r"""Is this abuse ticket closed?"""  
    created_end: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdEnd', 'style': 'form', 'explode': True }})
    r"""The latest abuse ticket creation date to pull abuse tickets for"""  
    created_start: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdStart', 'style': 'form', 'explode': True }})
    r"""The earliest abuse ticket creation date to pull abuse tickets for"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of abuse ticket numbers to return."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The earliest result set record number to pull abuse tickets for"""  
    source_domain_or_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceDomainOrIp', 'style': 'form', 'explode': True }})
    r"""The domain name or ip address the abuse originated from"""  
    target: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'target', 'style': 'form', 'explode': True }})
    r"""The brand/company the abuse is targeting. ie: brand name/bank name"""  
    type: Optional[GetTicketsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""The type of abuse."""  
    

@dataclasses.dataclass
class GetTicketsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    