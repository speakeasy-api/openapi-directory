"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .addons import Addons
from .base import Base
from .citations import Citations
from .collections import Collections
from .comments import Comments
from .draft_registrations import DraftRegistrations
from .files import Files
from .institutions import Institutions
from .licenses import Licenses
from .logs import Logs
from .nodes import Nodes
from .preprint_providers import PreprintProviders
from .preprints import Preprints
from .registration_schema_blocks import RegistrationSchemaBlocks
from .registration_schemas import RegistrationSchemas
from .registrations import Registrations
from .schema_response_actions import SchemaResponseActions
from .schema_responses import SchemaResponses
from .taxonomies import Taxonomies
from .users import Users
from .view_only_links import ViewOnlyLinks
from .wikis import Wikis

SERVERS = [
    "https://api.test.osf.io/v2",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    addons: Addons
    r"""Addons represent a user connection to an external service, some addons allow for additional storage, some modify user authentication or add a redirect link to a project."""
    base: Base
    r"""This is the \\"home page\\" of the API you can get important autentication information for the user making the request and get links to other resources."""
    citations: Citations
    collections: Collections
    comments: Comments
    draft_registrations: DraftRegistrations
    r"""A Draft Registration is a object that allows a user to edit and revise a registration before it is registered. Draft Registrations allow contributors to coordinate on a single registration, so they can upload files and change Registration metadata before the Registration is archived."""
    files: Files
    institutions: Institutions
    licenses: Licenses
    logs: Logs
    nodes: Nodes
    preprint_providers: PreprintProviders
    preprints: Preprints
    registration_schema_blocks: RegistrationSchemaBlocks
    r"""Registration Schema Blocks are read-only entities, they represent question prompts and form inputs known as \\"blocks\\" that make up a Registration Schemas. Each block has a designated `block_type` that determines what type of information that Schema Block's corresponding block in the Schema Response."""
    registration_schemas: RegistrationSchemas
    r"""A Registration Schemas defines the range of valid responses to a registration. Each Registration Schema is composed of <a href=\\"#tag/Registration-Schema-Blocks\\">\\"blocks\\"</a> that define the individual questions a user responds to. Registration Schemas are created by the Center for Open Science or an affiliated institution and periodically migrated into the system. Registration Schemas are updated and deactivated using an internal versioning system."""
    registrations: Registrations
    schema_response_actions: SchemaResponseActions
    r"""Schema Response Actions are objects that when created cause state transitions for Schema Responses. Users use state transitions to submit, approve, and revise new Schema Responses.
    
    Schema Response Actions have a  few different triggers to cause state transitions:
    
      - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,
      this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's
      Registration to either approved or reject the Schema Response.
    
      - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this
      makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that
      are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger
      will transition the Schema Response to `pending_moderation`.
    
      - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`
      state. This trigger is only valid for Schema Responses that are associated with a Registration that has
      Registration Provider a moderated workflow and only possible for a user designated as moderator of a
      Registration Provider.
    
      - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an
      `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.
    
      - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an
      `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration
      that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a
      Registration Provider.
    """
    schema_responses: SchemaResponses
    r"""Schema Responses contain user supplied responses to a Registration Schema. A Schema Response aggregates all of the the responses for a given version of a Registration's Registration Schema. Schema Responses are created when a Registration is completed. Once a Registration is completed the Schema Responses for a Registration can be revisied and updated by using it's associated action endpoints.
    
    There are a few states for Schema Responses:
    
      - `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you
      must create a Schema Response Action that triggers a new submission.
    
      - `in_progess` is the state of a Schema Response where the response is editable and still private, Schema
      Responses are editted via a PATCH request as specified below.
    
      - `unapproved` is the state of a Schema Response where edits have been made and \"locked-in\", now contributors
      have the ability to reject the changes, however if they are not rejected changes are automatically approved
      after 48 hours. If `unapproved` Schema Responses are rejected, they are returned to the `in_progress` state. If
      `unapproved` Schema Responses are approved they either enter an `approved` state or go into a
      `pending_moderation` to be accepted or denied by a moderator.
    
      - `pending_moderation` is the state of a Schema Response where moderators have an opportunity to reject or
      approve a Schema Response that has been approved by it's contributors. This state is only reachable for Schema
      Responses that are associated with a Registration that has Registration Provider a moderated workflow.
    
      - `approved` is the state of a Schema Response where it is public and immutable, in order to update an approved
      Schema Response a new one must be created.
    """
    taxonomies: Taxonomies
    users: Users
    view_only_links: ViewOnlyLinks
    wikis: Wikis

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.addons = Addons(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.base = Base(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.citations = Citations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.collections = Collections(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.comments = Comments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.draft_registrations = DraftRegistrations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.files = Files(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.institutions = Institutions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.licenses = Licenses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.logs = Logs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.nodes = Nodes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.preprint_providers = PreprintProviders(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.preprints = Preprints(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.registration_schema_blocks = RegistrationSchemaBlocks(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.registration_schemas = RegistrationSchemas(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.registrations = Registrations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.schema_response_actions = SchemaResponseActions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.schema_responses = SchemaResponses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.taxonomies = Taxonomies(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users = Users(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.view_only_links = ViewOnlyLinks(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.wikis = Wikis(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    