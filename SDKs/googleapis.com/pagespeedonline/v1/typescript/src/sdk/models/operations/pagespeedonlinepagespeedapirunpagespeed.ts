/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The analysis strategy to use
 */
export enum PagespeedonlinePagespeedapiRunpagespeedStrategyEnum {
  Desktop = "desktop",
  Mobile = "mobile",
}

export class PagespeedonlinePagespeedapiRunpagespeedRequest extends SpeakeasyBase {
  /**
   * Data format for the response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * Indicates if third party resources should be filtered out before PageSpeed analysis.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_third_party_resources",
  })
  filterThirdPartyResources?: boolean;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * The locale used to localize formatted results
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=locale",
  })
  locale?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * A PageSpeed rule to run; if none are given, all rules are run
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=rule" })
  rule?: string[];

  /**
   * Indicates if binary data containing a screenshot should be included
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=screenshot",
  })
  screenshot?: boolean;

  /**
   * The analysis strategy to use
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=strategy",
  })
  strategy?: PagespeedonlinePagespeedapiRunpagespeedStrategyEnum;

  /**
   * The URL to fetch and analyze
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=url" })
  url: string;

  /**
   * Deprecated. Please use quotaUser instead.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=userIp",
  })
  userIp?: string;
}

export class PagespeedonlinePagespeedapiRunpagespeedResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
