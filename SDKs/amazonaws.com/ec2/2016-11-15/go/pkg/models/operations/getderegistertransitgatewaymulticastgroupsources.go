// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum
type GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum string

const (
	GETDeregisterTransitGatewayMulticastGroupSourcesActionEnumDeregisterTransitGatewayMulticastGroupSources GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum = "DeregisterTransitGatewayMulticastGroupSources"
)

func (e GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum) ToPointer() *GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum {
	return &e
}

func (e *GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeregisterTransitGatewayMulticastGroupSources":
		*e = GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum: %v", v)
	}
}

// GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum
type GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum string

const (
	GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnumTwoThousandAndSixteen1115 GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum = "2016-11-15"
)

func (e GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum) ToPointer() *GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum {
	return &e
}

func (e *GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum: %v", v)
	}
}

type GETDeregisterTransitGatewayMulticastGroupSourcesRequest struct {
	Action GETDeregisterTransitGatewayMulticastGroupSourcesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The IP address assigned to the transit gateway multicast group.
	GroupIPAddress *string `queryParam:"style=form,explode=true,name=GroupIpAddress"`
	// The IDs of the group sources' network interfaces.
	NetworkInterfaceIds []string `queryParam:"style=form,explode=true,name=NetworkInterfaceIds"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainID *string                                                     `queryParam:"style=form,explode=true,name=TransitGatewayMulticastDomainId"`
	Version                         GETDeregisterTransitGatewayMulticastGroupSourcesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm                   *string                                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256               *string                                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                  *string                                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                        *string                                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken               *string                                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                   *string                                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders               *string                                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeregisterTransitGatewayMulticastGroupSourcesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
