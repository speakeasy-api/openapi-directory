/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * With these endpoints you can manage your Members.
 *
 * @remarks
 *
 * <a href="https://configcat.com/docs/advanced/team-collaboration" target="_blank" rel="noopener noreferrer">Here</a> you can read more about Team Collaboration.
 */
export class Members {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Update Member Permissions
   *
   * @remarks
   * This endpoint adds a Member identified by the `userId` to one or more Permission Groups.
   * This endpoint can also be used to move a Member between Permission Groups within a Product.
   * Only a single Permission Group can be set per Product.
   */
  addMemberToGroup(
    req: operations.AddMemberToGroupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddMemberToGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddMemberToGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/organizations/{organizationId}/members/{userId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addUserToGroupRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddMemberToGroupResponse =
        new operations.AddMemberToGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete Member from Organization
   *
   * @remarks
   * This endpoint removes a Member identified by the `userId` from the
   * given Organization identified by the `organizationId` parameter.
   */
  deleteOrganizationMember(
    req: operations.DeleteOrganizationMemberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOrganizationMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteOrganizationMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/organizations/{organizationId}/members/{userId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOrganizationMemberResponse =
        new operations.DeleteOrganizationMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete Member from Product
   *
   * @remarks
   * This endpoint removes a Member identified by the `userId` from the
   * given Product identified by the `productId` parameter.
   */
  deleteProductMember(
    req: operations.DeleteProductMemberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteProductMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteProductMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/products/{productId}/members/{userId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteProductMemberResponse =
        new operations.DeleteProductMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List Organization Members
   *
   * @remarks
   * This endpoint returns the list of Members that belongs
   * to the given Organization, identified by the `organizationId` parameter.
   */
  getOrganizationMembers(
    req: operations.GetOrganizationMembersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganizationMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrganizationMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/organizations/{organizationId}/members",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganizationMembersResponse =
        new operations.GetOrganizationMembersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.userModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userModels = utils.objectToClass(
              httpRes?.data,
              shared.UserModel,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userModels = utils.objectToClass(
              httpRes?.data,
              shared.UserModel,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List Product Members
   *
   * @remarks
   * This endpoint returns the list of Members that belongs
   * to the given Product, identified by the `productId` parameter.
   */
  getProductMembers(
    req: operations.GetProductMembersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProductMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProductMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/products/{productId}/members",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProductMembersResponse =
        new operations.GetProductMembersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.memberModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberModels = utils.objectToClass(
              httpRes?.data,
              shared.MemberModel,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.memberModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberModels = utils.objectToClass(
              httpRes?.data,
              shared.MemberModel,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Invite Member
   *
   * @remarks
   * This endpoint invites a Member into the given Product identified by the `productId` parameter.
   */
  inviteMember(
    req: operations.InviteMemberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InviteMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InviteMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/products/{productId}/members/invite",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "inviteMembersRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InviteMemberResponse =
        new operations.InviteMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
