/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ArchivalTieringSpec {
    /**
     * The set of storage classes that support Cold tiering during smart or instant tiering.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coldStorageClass")
    public CloudStorageColdTierEnum coldStorageClass;

    public ArchivalTieringSpec withColdStorageClass(CloudStorageColdTierEnum coldStorageClass) {
        this.coldStorageClass = coldStorageClass;
        return this;
    }
    
    /**
     * A Boolean value that determines whether to immediately tier uploaded snapshots to cold storage. When this value is 'true,' uploaded snapshots are immediately tiered to cold storage. When this value is 'false,' snapshots are marked as eligible for tiering to cold storage after their time on the archival location exceeds the configured minimum accessible duration.
     * 
     */
    @JsonProperty("isInstantTieringEnabled")
    public Boolean isInstantTieringEnabled;

    public ArchivalTieringSpec withIsInstantTieringEnabled(Boolean isInstantTieringEnabled) {
        this.isInstantTieringEnabled = isInstantTieringEnabled;
        return this;
    }
    
    /**
     * Specifies an interval in seconds. Uploaded snapshots are accessible for instant recovery for the duration of the specified interval. This value is ignored when Instant Tiering is enabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minAccessibleDurationInSeconds")
    public Long minAccessibleDurationInSeconds;

    public ArchivalTieringSpec withMinAccessibleDurationInSeconds(Long minAccessibleDurationInSeconds) {
        this.minAccessibleDurationInSeconds = minAccessibleDurationInSeconds;
        return this;
    }
    
    /**
     * Indicates if existing snapshots for all objects protected by the SLA should be tiered. If not specified, this defaults to false. Only the snapshots that exist in the archival location associated with the SLA will be tiered.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shouldTierExistingSnapshots")
    public Boolean shouldTierExistingSnapshots;

    public ArchivalTieringSpec withShouldTierExistingSnapshots(Boolean shouldTierExistingSnapshots) {
        this.shouldTierExistingSnapshots = shouldTierExistingSnapshots;
        return this;
    }
    
    public ArchivalTieringSpec(@JsonProperty("isInstantTieringEnabled") Boolean isInstantTieringEnabled) {
        this.isInstantTieringEnabled = isInstantTieringEnabled;
  }
}
