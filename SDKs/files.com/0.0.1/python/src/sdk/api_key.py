"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class APIKey:
    r"""Operations about api_keys"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def api_key_delete_current(self) -> operations.APIKeyDeleteCurrentResponse:
        r"""Delete current API key.  (Requires current API connection to be using an API key.)
        Delete current API key.  (Requires current API connection to be using an API key.)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api_key'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeyDeleteCurrentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def api_key_find_current(self) -> operations.APIKeyFindCurrentResponse:
        r"""Show information about current API key.  (Requires current API connection to be using an API key.)
        Show information about current API key.  (Requires current API connection to be using an API key.)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api_key'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeyFindCurrentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKeyEntity])
                res.api_key_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def api_key_update_current(self, request: operations.APIKeyUpdateCurrentRequestBody) -> operations.APIKeyUpdateCurrentResponse:
        r"""Update current API key.  (Requires current API connection to be using an API key.)
        Update current API key.  (Requires current API connection to be using an API key.)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api_key'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeyUpdateCurrentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKeyEntity])
                res.api_key_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    