/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://media.twilio.com",
	};
    /**
	 * CREATE_MEDIA_PROCESSOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MEDIA_PROCESSOR_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * CREATE_PLAYER_STREAMER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PLAYER_STREAMER_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * CREATE_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * DELETE_MEDIA_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_MEDIA_RECORDING_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * FETCH_MEDIA_PROCESSOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MEDIA_PROCESSOR_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * FETCH_MEDIA_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MEDIA_RECORDING_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * FETCH_PLAYER_STREAMER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_PLAYER_STREAMER_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * FETCH_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * LIST_MEDIA_PROCESSOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MEDIA_PROCESSOR_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * LIST_MEDIA_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MEDIA_RECORDING_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * LIST_PLAYER_STREAMER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PLAYER_STREAMER_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * UPDATE_MEDIA_PROCESSOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MEDIA_PROCESSOR_SERVERS = {
        "https://media.twilio.com",
    };
	
    /**
	 * UPDATE_PLAYER_STREAMER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_PLAYER_STREAMER_SERVERS = {
        "https://media.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    public org.openapis.openapi.models.operations.CreateMediaProcessorResponse createMediaProcessor(org.openapis.openapi.models.operations.CreateMediaProcessorCreateMediaProcessorRequest request, org.openapis.openapi.models.operations.CreateMediaProcessorSecurity security) throws Exception {
        return this.createMediaProcessor(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateMediaProcessorResponse createMediaProcessor(org.openapis.openapi.models.operations.CreateMediaProcessorCreateMediaProcessorRequest request, org.openapis.openapi.models.operations.CreateMediaProcessorSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_MEDIA_PROCESSOR_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/MediaProcessors");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMediaProcessorResponse res = new org.openapis.openapi.models.operations.CreateMediaProcessorResponse(contentType, httpRes.statusCode()) {{
            mediaV1MediaProcessor = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1MediaProcessor out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1MediaProcessor.class);
                res.mediaV1MediaProcessor = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreatePlayerStreamerResponse createPlayerStreamer(org.openapis.openapi.models.operations.CreatePlayerStreamerCreatePlayerStreamerRequest request, org.openapis.openapi.models.operations.CreatePlayerStreamerSecurity security) throws Exception {
        return this.createPlayerStreamer(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreatePlayerStreamerResponse createPlayerStreamer(org.openapis.openapi.models.operations.CreatePlayerStreamerCreatePlayerStreamerRequest request, org.openapis.openapi.models.operations.CreatePlayerStreamerSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_PLAYER_STREAMER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/PlayerStreamers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreatePlayerStreamerResponse res = new org.openapis.openapi.models.operations.CreatePlayerStreamerResponse(contentType, httpRes.statusCode()) {{
            mediaV1PlayerStreamer = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1PlayerStreamer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1PlayerStreamer.class);
                res.mediaV1PlayerStreamer = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantResponse createPlayerStreamerPlaybackGrant(org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantRequest request, org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantSecurity security) throws Exception {
        return this.createPlayerStreamerPlaybackGrant(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantResponse createPlayerStreamerPlaybackGrant(org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantRequest request, org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantRequest.class, baseUrl, "/v1/PlayerStreamers/{Sid}/PlaybackGrant", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantResponse res = new org.openapis.openapi.models.operations.CreatePlayerStreamerPlaybackGrantResponse(contentType, httpRes.statusCode()) {{
            mediaV1PlayerStreamerPlayerStreamerPlaybackGrant = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant.class);
                res.mediaV1PlayerStreamerPlayerStreamerPlaybackGrant = out;
            }
        }

        return res;
    }

    /**
     * Deletes a MediaRecording resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMediaRecordingResponse deleteMediaRecording(org.openapis.openapi.models.operations.DeleteMediaRecordingRequest request, org.openapis.openapi.models.operations.DeleteMediaRecordingSecurity security) throws Exception {
        return this.deleteMediaRecording(request, security, null);
    }

    /**
     * Deletes a MediaRecording resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMediaRecordingResponse deleteMediaRecording(org.openapis.openapi.models.operations.DeleteMediaRecordingRequest request, org.openapis.openapi.models.operations.DeleteMediaRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_MEDIA_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMediaRecordingRequest.class, baseUrl, "/v1/MediaRecordings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMediaRecordingResponse res = new org.openapis.openapi.models.operations.DeleteMediaRecordingResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Returns a single MediaProcessor resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMediaProcessorResponse fetchMediaProcessor(org.openapis.openapi.models.operations.FetchMediaProcessorRequest request, org.openapis.openapi.models.operations.FetchMediaProcessorSecurity security) throws Exception {
        return this.fetchMediaProcessor(request, security, null);
    }

    /**
     * Returns a single MediaProcessor resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMediaProcessorResponse fetchMediaProcessor(org.openapis.openapi.models.operations.FetchMediaProcessorRequest request, org.openapis.openapi.models.operations.FetchMediaProcessorSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MEDIA_PROCESSOR_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMediaProcessorRequest.class, baseUrl, "/v1/MediaProcessors/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMediaProcessorResponse res = new org.openapis.openapi.models.operations.FetchMediaProcessorResponse(contentType, httpRes.statusCode()) {{
            mediaV1MediaProcessor = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1MediaProcessor out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1MediaProcessor.class);
                res.mediaV1MediaProcessor = out;
            }
        }

        return res;
    }

    /**
     * Returns a single MediaRecording resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMediaRecordingResponse fetchMediaRecording(org.openapis.openapi.models.operations.FetchMediaRecordingRequest request, org.openapis.openapi.models.operations.FetchMediaRecordingSecurity security) throws Exception {
        return this.fetchMediaRecording(request, security, null);
    }

    /**
     * Returns a single MediaRecording resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMediaRecordingResponse fetchMediaRecording(org.openapis.openapi.models.operations.FetchMediaRecordingRequest request, org.openapis.openapi.models.operations.FetchMediaRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MEDIA_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMediaRecordingRequest.class, baseUrl, "/v1/MediaRecordings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMediaRecordingResponse res = new org.openapis.openapi.models.operations.FetchMediaRecordingResponse(contentType, httpRes.statusCode()) {{
            mediaV1MediaRecording = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1MediaRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1MediaRecording.class);
                res.mediaV1MediaRecording = out;
            }
        }

        return res;
    }

    /**
     * Returns a single PlayerStreamer resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchPlayerStreamerResponse fetchPlayerStreamer(org.openapis.openapi.models.operations.FetchPlayerStreamerRequest request, org.openapis.openapi.models.operations.FetchPlayerStreamerSecurity security) throws Exception {
        return this.fetchPlayerStreamer(request, security, null);
    }

    /**
     * Returns a single PlayerStreamer resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchPlayerStreamerResponse fetchPlayerStreamer(org.openapis.openapi.models.operations.FetchPlayerStreamerRequest request, org.openapis.openapi.models.operations.FetchPlayerStreamerSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_PLAYER_STREAMER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchPlayerStreamerRequest.class, baseUrl, "/v1/PlayerStreamers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchPlayerStreamerResponse res = new org.openapis.openapi.models.operations.FetchPlayerStreamerResponse(contentType, httpRes.statusCode()) {{
            mediaV1PlayerStreamer = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1PlayerStreamer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1PlayerStreamer.class);
                res.mediaV1PlayerStreamer = out;
            }
        }

        return res;
    }

    /**
     * **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantResponse fetchPlayerStreamerPlaybackGrant(org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantRequest request, org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantSecurity security) throws Exception {
        return this.fetchPlayerStreamerPlaybackGrant(request, security, null);
    }

    /**
     * **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantResponse fetchPlayerStreamerPlaybackGrant(org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantRequest request, org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantRequest.class, baseUrl, "/v1/PlayerStreamers/{Sid}/PlaybackGrant", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantResponse res = new org.openapis.openapi.models.operations.FetchPlayerStreamerPlaybackGrantResponse(contentType, httpRes.statusCode()) {{
            mediaV1PlayerStreamerPlayerStreamerPlaybackGrant = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant.class);
                res.mediaV1PlayerStreamerPlayerStreamerPlaybackGrant = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of MediaProcessors.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMediaProcessorResponse listMediaProcessor(org.openapis.openapi.models.operations.ListMediaProcessorRequest request, org.openapis.openapi.models.operations.ListMediaProcessorSecurity security) throws Exception {
        return this.listMediaProcessor(request, security, null);
    }

    /**
     * Returns a list of MediaProcessors.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMediaProcessorResponse listMediaProcessor(org.openapis.openapi.models.operations.ListMediaProcessorRequest request, org.openapis.openapi.models.operations.ListMediaProcessorSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MEDIA_PROCESSOR_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/MediaProcessors");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMediaProcessorRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMediaProcessorResponse res = new org.openapis.openapi.models.operations.ListMediaProcessorResponse(contentType, httpRes.statusCode()) {{
            listMediaProcessorResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMediaProcessorListMediaProcessorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMediaProcessorListMediaProcessorResponse.class);
                res.listMediaProcessorResponse = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of MediaRecordings.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMediaRecordingResponse listMediaRecording(org.openapis.openapi.models.operations.ListMediaRecordingRequest request, org.openapis.openapi.models.operations.ListMediaRecordingSecurity security) throws Exception {
        return this.listMediaRecording(request, security, null);
    }

    /**
     * Returns a list of MediaRecordings.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMediaRecordingResponse listMediaRecording(org.openapis.openapi.models.operations.ListMediaRecordingRequest request, org.openapis.openapi.models.operations.ListMediaRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MEDIA_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/MediaRecordings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMediaRecordingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMediaRecordingResponse res = new org.openapis.openapi.models.operations.ListMediaRecordingResponse(contentType, httpRes.statusCode()) {{
            listMediaRecordingResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMediaRecordingListMediaRecordingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMediaRecordingListMediaRecordingResponse.class);
                res.listMediaRecordingResponse = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of PlayerStreamers.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListPlayerStreamerResponse listPlayerStreamer(org.openapis.openapi.models.operations.ListPlayerStreamerRequest request, org.openapis.openapi.models.operations.ListPlayerStreamerSecurity security) throws Exception {
        return this.listPlayerStreamer(request, security, null);
    }

    /**
     * Returns a list of PlayerStreamers.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListPlayerStreamerResponse listPlayerStreamer(org.openapis.openapi.models.operations.ListPlayerStreamerRequest request, org.openapis.openapi.models.operations.ListPlayerStreamerSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_PLAYER_STREAMER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/PlayerStreamers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListPlayerStreamerRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListPlayerStreamerResponse res = new org.openapis.openapi.models.operations.ListPlayerStreamerResponse(contentType, httpRes.statusCode()) {{
            listPlayerStreamerResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListPlayerStreamerListPlayerStreamerResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListPlayerStreamerListPlayerStreamerResponse.class);
                res.listPlayerStreamerResponse = out;
            }
        }

        return res;
    }

    /**
     * Updates a MediaProcessor resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMediaProcessorResponse updateMediaProcessor(org.openapis.openapi.models.operations.UpdateMediaProcessorRequest request, org.openapis.openapi.models.operations.UpdateMediaProcessorSecurity security) throws Exception {
        return this.updateMediaProcessor(request, security, null);
    }

    /**
     * Updates a MediaProcessor resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMediaProcessorResponse updateMediaProcessor(org.openapis.openapi.models.operations.UpdateMediaProcessorRequest request, org.openapis.openapi.models.operations.UpdateMediaProcessorSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_MEDIA_PROCESSOR_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMediaProcessorRequest.class, baseUrl, "/v1/MediaProcessors/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMediaProcessorResponse res = new org.openapis.openapi.models.operations.UpdateMediaProcessorResponse(contentType, httpRes.statusCode()) {{
            mediaV1MediaProcessor = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1MediaProcessor out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1MediaProcessor.class);
                res.mediaV1MediaProcessor = out;
            }
        }

        return res;
    }

    /**
     * Updates a PlayerStreamer resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePlayerStreamerResponse updatePlayerStreamer(org.openapis.openapi.models.operations.UpdatePlayerStreamerRequest request, org.openapis.openapi.models.operations.UpdatePlayerStreamerSecurity security) throws Exception {
        return this.updatePlayerStreamer(request, security, null);
    }

    /**
     * Updates a PlayerStreamer resource identified by a SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePlayerStreamerResponse updatePlayerStreamer(org.openapis.openapi.models.operations.UpdatePlayerStreamerRequest request, org.openapis.openapi.models.operations.UpdatePlayerStreamerSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_PLAYER_STREAMER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdatePlayerStreamerRequest.class, baseUrl, "/v1/PlayerStreamers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdatePlayerStreamerResponse res = new org.openapis.openapi.models.operations.UpdatePlayerStreamerResponse(contentType, httpRes.statusCode()) {{
            mediaV1PlayerStreamer = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaV1PlayerStreamer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaV1PlayerStreamer.class);
                res.mediaV1PlayerStreamer = out;
            }
        }

        return res;
    }
}