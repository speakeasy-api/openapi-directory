<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ServiceInventory 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List ServiceInventories
     * 
     * Returns an array of ServiceInventory objects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoriesResponse
     */
	public function listServiceInventories(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_inventories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceInventoriesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceInventoriesCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceInventoriesCollection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Tags for ServiceInventory
     * 
     * Returns an array of Tag objects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoryTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoryTagsResponse
     */
	public function listServiceInventoryTags(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoryTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoryTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_inventories/{id}/tags', \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoryTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceInventoryTagsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceInventoryTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagsCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagsCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorNotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show an existing ServiceInventory
     * 
     * Returns a ServiceInventory object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ShowServiceInventoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ShowServiceInventoryResponse
     */
	public function showServiceInventory(
        \OpenAPI\OpenAPI\Models\Operations\ShowServiceInventoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ShowServiceInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_inventories/{id}', \OpenAPI\OpenAPI\Models\Operations\ShowServiceInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ShowServiceInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceInventory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceInventory', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorNotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tag a ServiceInventory
     * 
     * Tags a ServiceInventory object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagServiceInventoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TagServiceInventoryResponse
     */
	public function tagServiceInventory(
        \OpenAPI\OpenAPI\Models\Operations\TagServiceInventoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TagServiceInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_inventories/{id}/tag', \OpenAPI\OpenAPI\Models\Operations\TagServiceInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagServiceInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Tag>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }

        return $response;
    }
	
    /**
     * Untag a ServiceInventory
     * 
     * Untags a ServiceInventory object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UntagServiceInventoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UntagServiceInventoryResponse
     */
	public function untagServiceInventory(
        \OpenAPI\OpenAPI\Models\Operations\UntagServiceInventoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UntagServiceInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_inventories/{id}/untag', \OpenAPI\OpenAPI\Models\Operations\UntagServiceInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UntagServiceInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}