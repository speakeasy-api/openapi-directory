/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Metadata - Metadata of a matched search result.
 */
public class Metadata {
    /**
     * The creation time for this document or object in the search result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Metadata withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayOptions")
    public ResultDisplayMetadata displayOptions;
    public Metadata withDisplayOptions(ResultDisplayMetadata displayOptions) {
        this.displayOptions = displayOptions;
        return this;
    }
    
    /**
     * Indexed fields in structured data, returned as a generic named property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public NamedProperty[] fields;
    public Metadata withFields(NamedProperty[] fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Mime type of the search result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    public String mimeType;
    public Metadata withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * Object type of the search result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    public String objectType;
    public Metadata withObjectType(String objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * Object to represent a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public Person owner;
    public Metadata withOwner(Person owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Defines sources for the suggest/search APIs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public Source source;
    public Metadata withSource(Source source) {
        this.source = source;
        return this;
    }
    
    /**
     * The thumbnail URL of the result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailUrl")
    public String thumbnailUrl;
    public Metadata withThumbnailUrl(String thumbnailUrl) {
        this.thumbnailUrl = thumbnailUrl;
        return this;
    }
    
    /**
     * The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Metadata withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
