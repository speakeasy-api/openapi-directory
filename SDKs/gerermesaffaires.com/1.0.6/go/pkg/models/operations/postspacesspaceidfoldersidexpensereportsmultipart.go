// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostSpacesSpaceIDFoldersIDExpenseReportsMultipartSecurity struct {
	GmaAuth shared.SchemeGmaAuth `security:"scheme,type=oauth2"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsMultipartPathParams struct {
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccounting struct {
	AccountedOn *string                                                                          `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                          `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

// PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormData1 - expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)
type PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormData1 struct {
	Accounting     *PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Author         *string                                                              `multipartForm:"name=Author"`
	BeforeVAT      *float64                                                             `multipartForm:"name=BeforeVAT"`
	Code           *string                                                              `multipartForm:"name=Code"`
	Comment        *string                                                              `multipartForm:"name=Comment"`
	Date           *string                                                              `multipartForm:"name=Date"`
	ExpenseDate    *string                                                              `multipartForm:"name=ExpenseDate"`
	File           PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormDataFile        `multipartForm:"file"`
	InclVAT        *float64                                                             `multipartForm:"name=InclVAT"`
	ProcessingDate *string                                                              `multipartForm:"name=ProcessingDate"`
	Title          string                                                               `multipartForm:"name=Title"`
	Vat            *float64                                                             `multipartForm:"name=VAT"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsMultipartRequest struct {
	PathParams PostSpacesSpaceIDFoldersIDExpenseReportsMultipartPathParams
	// expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)
	Request  PostSpacesSpaceIDFoldersIDExpenseReportsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	Security PostSpacesSpaceIDFoldersIDExpenseReportsMultipartSecurity
}

// PostSpacesSpaceIDFoldersIDExpenseReportsMultipart201ApplicationJSON - Id of expense report created
type PostSpacesSpaceIDFoldersIDExpenseReportsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of expense report created
	PostSpacesSpaceIDFoldersIDExpenseReportsMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDExpenseReportsMultipart201ApplicationJSON
}
