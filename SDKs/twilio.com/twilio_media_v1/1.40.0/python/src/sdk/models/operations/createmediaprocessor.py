"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import media_v1_media_processor as shared_media_v1_media_processor
from enum import Enum
from typing import Any, Optional

CREATE_MEDIA_PROCESSOR_SERVERS = [
	"https://media.twilio.com",
]


@dataclasses.dataclass
class CreateMediaProcessorSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class CreateMediaProcessorCreateMediaProcessorRequestStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class CreateMediaProcessorCreateMediaProcessorRequest:
    
    extension: str = dataclasses.field(metadata={'form': { 'field_name': 'Extension' }})
    r"""The [Media Extension](/docs/live/api/media-extensions-overview) name or URL. Ex: `video-composer-v2`"""  
    extension_context: str = dataclasses.field(metadata={'form': { 'field_name': 'ExtensionContext' }})
    r"""The context of the Media Extension, represented as a JSON dictionary. See the documentation for the specific [Media Extension](/docs/live/api/media-extensions-overview) you are using for more information about the context to send."""  
    extension_environment: Optional[Any] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ExtensionEnvironment' }})
    r"""User-defined environment variables for the Media Extension, represented as a JSON dictionary of key/value strings. See the documentation for the specific [Media Extension](/docs/live/api/media-extensions-overview) you are using for more information about whether you need to provide this."""  
    max_duration: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MaxDuration' }})
    r"""The maximum time, in seconds, that the MediaProcessor can run before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the MediaProcessor, regardless of whether media is still streaming."""  
    status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallback' }})
    r"""The URL to which Twilio will send asynchronous webhook requests for every MediaProcessor event. See [Status Callbacks](/docs/live/status-callbacks) for details."""  
    status_callback_method: Optional[CreateMediaProcessorCreateMediaProcessorRequestStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackMethod' }})
    r"""The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`."""  
    

@dataclasses.dataclass
class CreateMediaProcessorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    media_v1_media_processor: Optional[shared_media_v1_media_processor.MediaV1MediaProcessor] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    