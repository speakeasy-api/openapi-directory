"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Cam:
    r"""Operations on GO Causal Activity Models (GO-CAMs)"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_activity_collection(self, request: operations.GetActivityCollectionRequest) -> operations.GetActivityCollectionResponse:
        r"""Returns list of models"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cam/activity'
        
        query_params = utils.get_query_params(operations.GetActivityCollectionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetActivityCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_instance_object(self, request: operations.GetInstanceObjectRequest) -> operations.GetInstanceObjectResponse:
        r"""Returns list of matches"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInstanceObjectRequest, base_url, '/cam/instance/{id}', request)
        
        query_params = utils.get_query_params(operations.GetInstanceObjectRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInstanceObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Association]])
                res.associations = out

        return res

    def get_model_collection(self) -> operations.GetModelCollectionResponse:
        r"""Returns list of ALL models"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cam/model'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetModelCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_model_contributors(self) -> operations.GetModelContributorsResponse:
        r"""Returns list of all contributors across all models"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cam/model/contributors'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetModelContributorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_model_instances(self) -> operations.GetModelInstancesResponse:
        r"""Returns list of all instances"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cam/instances'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetModelInstancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_model_object(self, request: operations.GetModelObjectRequest) -> operations.GetModelObjectResponse:
        r"""Returns a complete model"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetModelObjectRequest, base_url, '/cam/model/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetModelObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_model_properties(self, request: operations.GetModelPropertiesRequest) -> operations.GetModelPropertiesResponse:
        r"""Returns list of all properties used across all models"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cam/model/properties'
        
        query_params = utils.get_query_params(operations.GetModelPropertiesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetModelPropertiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_model_property_values(self, request: operations.GetModelPropertyValuesRequest) -> operations.GetModelPropertyValuesResponse:
        r"""Returns list property-values for all models"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cam/model/property_values'
        
        query_params = utils.get_query_params(operations.GetModelPropertyValuesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetModelPropertyValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_model_query(self, request: operations.GetModelQueryRequest) -> operations.GetModelQueryResponse:
        r"""Returns list of models matching query"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cam/model/query'
        
        query_params = utils.get_query_params(operations.GetModelQueryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetModelQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_physical_interaction(self, request: operations.GetPhysicalInteractionRequest) -> operations.GetPhysicalInteractionResponse:
        r"""Returns list of models"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cam/physical_interaction'
        
        query_params = utils.get_query_params(operations.GetPhysicalInteractionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPhysicalInteractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    