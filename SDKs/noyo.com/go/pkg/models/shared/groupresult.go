// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GroupResultBusinessDetailsEmployerTypeEnum - Type or classification of the group as an employer
type GroupResultBusinessDetailsEmployerTypeEnum string

const (
	GroupResultBusinessDetailsEmployerTypeEnumForeignGovernment GroupResultBusinessDetailsEmployerTypeEnum = "foreign_government"
	GroupResultBusinessDetailsEmployerTypeEnumPrivateSector     GroupResultBusinessDetailsEmployerTypeEnum = "private_sector"
	GroupResultBusinessDetailsEmployerTypeEnumReligiousEmployer GroupResultBusinessDetailsEmployerTypeEnum = "religious_employer"
	GroupResultBusinessDetailsEmployerTypeEnumStateGovernment   GroupResultBusinessDetailsEmployerTypeEnum = "state_government"
	GroupResultBusinessDetailsEmployerTypeEnumTribalGovernment  GroupResultBusinessDetailsEmployerTypeEnum = "tribal_government"
)

func (e *GroupResultBusinessDetailsEmployerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "foreign_government":
		fallthrough
	case "private_sector":
		fallthrough
	case "religious_employer":
		fallthrough
	case "state_government":
		fallthrough
	case "tribal_government":
		*e = GroupResultBusinessDetailsEmployerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupResultBusinessDetailsEmployerTypeEnum: %s", s)
	}
}

// GroupResultBusinessDetailsEntityTypeEnum - Type of legal or business entity
type GroupResultBusinessDetailsEntityTypeEnum string

const (
	GroupResultBusinessDetailsEntityTypeEnumCCorp       GroupResultBusinessDetailsEntityTypeEnum = "c_corp"
	GroupResultBusinessDetailsEntityTypeEnumLlc         GroupResultBusinessDetailsEntityTypeEnum = "llc"
	GroupResultBusinessDetailsEntityTypeEnumLlp         GroupResultBusinessDetailsEntityTypeEnum = "llp"
	GroupResultBusinessDetailsEntityTypeEnumPartnership GroupResultBusinessDetailsEntityTypeEnum = "partnership"
	GroupResultBusinessDetailsEntityTypeEnumSCorp       GroupResultBusinessDetailsEntityTypeEnum = "s_corp"
)

func (e *GroupResultBusinessDetailsEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "c_corp":
		fallthrough
	case "llc":
		fallthrough
	case "llp":
		fallthrough
	case "partnership":
		fallthrough
	case "s_corp":
		*e = GroupResultBusinessDetailsEntityTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupResultBusinessDetailsEntityTypeEnum: %s", s)
	}
}

// GroupResultBusinessDetails - Details about business or industry of the group
type GroupResultBusinessDetails struct {
	// General description of the type of business
	CompanyDescription *string `json:"company_description,omitempty"`
	// Date the company was established
	DateEstablished *string `json:"date_established,omitempty"`
	// Type or classification of the group as an employer
	EmployerType *GroupResultBusinessDetailsEmployerTypeEnum `json:"employer_type,omitempty"`
	// Type of legal or business entity
	EntityType *GroupResultBusinessDetailsEntityTypeEnum `json:"entity_type,omitempty"`
}

// GroupResultInsuranceDetails - General details about the group insurance offerings
type GroupResultInsuranceDetails struct {
	// True if the group is compliant with ERISA regulation
	IsErisaCompliant *bool `json:"is_erisa_compliant,omitempty"`
	// True if company is subject to ERISA regulation
	IsErisaSubject *bool `json:"is_erisa_subject,omitempty"`
}

// GroupResult - Successful Response - Returns the new Group
type GroupResult struct {
	// Details about business or industry of the group
	BusinessDetails *GroupResultBusinessDetails `json:"business_details,omitempty"`
	// The date the record was created
	Created int64 `json:"created"`
	// DBA name for the company, if applicable
	DbaName *string `json:"dba_name,omitempty"`
	// Federal Employer Identification Number for the group/company
	FederalEin *string `json:"federal_ein,omitempty"`
	// Unique identifier of the record in Noyo
	ID string `json:"id"`
	// General details about the group insurance offerings
	InsuranceDetails *GroupResultInsuranceDetails `json:"insurance_details,omitempty"`
	// The date the record was last updated
	Modified int64 `json:"modified"`
	// Name of the group/company
	Name string `json:"name"`
	// Unique identifier of the platform or broker organization in the Noyo system
	OrganizationID string `json:"organization_id"`
	// SIC Code for the group/company
	SicCode *string `json:"sic_code,omitempty"`
	// Current version of the record
	Version string `json:"version"`
}
