"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import simresult as shared_simresult
from enum import Enum
from typing import Optional

class GetSimCompareMetricEnum(str, Enum):
    r"""Metric for computing similarity"""
    PHENODIGM = 'phenodigm'
    JACCARD = 'jaccard'
    SIM_GIC = 'simGIC'
    RESNIK = 'resnik'
    SYMMETRIC_RESNIK = 'symmetric_resnik'


@dataclasses.dataclass
class GetSimCompareRequest:
    
    is_feature_set: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_feature_set', 'style': 'form', 'explode': True }})
    r"""set to true if *all* input ids are phenotypic features, else set to false"""  
    metric: Optional[GetSimCompareMetricEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'metric', 'style': 'form', 'explode': True }})
    r"""Metric for computing similarity"""  
    query_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query_id', 'style': 'form', 'explode': True }})
    r"""A phenotype or identifier that is composed of phenotypes (eg disease, gene)"""  
    ref_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ref_id', 'style': 'form', 'explode': True }})
    r"""A phenotype or identifier that is composed of phenotypes (eg disease, gene)"""  
    

@dataclasses.dataclass
class GetSimCompareResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    sim_result: Optional[shared_simresult.SimResult] = dataclasses.field(default=None)
    r"""Success"""  
    