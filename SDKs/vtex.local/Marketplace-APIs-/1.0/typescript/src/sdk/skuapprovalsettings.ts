/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class SKUApprovalSettings {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Account's Approval Settings
   *
   * @remarks
   * This endpoint retrieves the current approval settings of a marketplace's Received SKUs module. Its response includes:
   *
   * - `Score`: Matcher scores for approving and rejecting SKUs received from sellers.
   *
   * - `Matchers`: All Matchers configured on the marketplace, and their respective details.
   *
   * - `SpecificationsMapping`: Mapping of product and SKU specifications, per seller.
   *
   * - `MatchFlux`: This field determines the type of approval configuration applied to SKUs received from a seller.
   *
   * The possible values include:
   *
   * -`default`, where the Matcher reviews the SKU, and approves it based on its score.
   *
   * -`manual`, for manual approvals through the Received SKU UI, or Match API.
   *
   * -`autoApprove`, for every SKU received from a given seller to be approved automatically, regardless of their Matcher Score.
   */
  getaccountconfig(
    req: operations.GetaccountconfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetaccountconfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetaccountconfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/suggestions/configuration";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetaccountconfigResponse =
        new operations.GetaccountconfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getaccountconfig200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Getaccountconfig200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get autoApprove Status in Account Settings
   *
   * @remarks
   * This endpoint can be used to check whether the autoapprove setting is active or not, for a specific seller.
   *
   * If the response is `true`, the autoapprove setting is active. If the response is `false`, it is inactive.
   */
  getautoApprovevaluefromconfig(
    req: operations.GetautoApprovevaluefromconfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetautoApprovevaluefromconfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetautoApprovevaluefromconfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/suggestions/configuration/autoapproval/toggle";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetautoApprovevaluefromconfigResponse =
        new operations.GetautoApprovevaluefromconfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getautoApprovevaluefromconfig200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetautoApprovevaluefromconfig200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Seller's Approval Settings
   *
   * @remarks
   * This endpoint retrieves the current Received SKUs approval settings applied to a specific seller. Its response includes:
   *
   * - `sellerId`: A string that identifies the seller in the marketplace.
   *
   * - `accountId`: Marketplace’s account ID.
   *
   * - `accountName`: Marketplace’s account name.
   *
   * - `mapping`: Mapping of SKU and product Specifications.
   *
   * - `matchFlux`: This field determines the type of approval configuration applied to SKUs received  from a seller.
   *
   * The possible values include:
   *
   * -`default`, where the Matcher reviews the SKU, and approves it based on its score.
   *
   * -`manual`, for manual approvals through the Received SKU UI and Match API.
   *
   * -`autoApprove`, for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.
   */
  getselleraccountconfig(
    req: operations.GetselleraccountconfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetselleraccountconfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetselleraccountconfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/suggestions/configuration/seller/{sellerId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetselleraccountconfigResponse =
        new operations.GetselleraccountconfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Save Seller's Approval Settings
   *
   * @remarks
   * Marketplaces use this endpoint to create or update approval settings to a specific seller, on the Received SKUs module.
   *
   * The request includes all the details necessary to implement the chosen approval settings.
   */
  putselleraccountconfig(
    req: operations.PutselleraccountconfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutselleraccountconfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutselleraccountconfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/suggestions/configuration/seller/{sellerId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "putselleraccountconfigRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutselleraccountconfigResponse =
        new operations.PutselleraccountconfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Save Account's Approval Settings
   *
   * @remarks
   * Marketplaces use this endpoint to create or update approval settings on their Received SKUs module.
   *
   * The request includes all the details necessary to implement the chosen approval settings.
   */
  saveaccountconfig(
    req: operations.SaveaccountconfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveaccountconfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveaccountconfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/suggestions/configuration";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "saveaccountconfigRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveaccountconfigResponse =
        new operations.SaveaccountconfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveaccountconfig200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Saveaccountconfig200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Activate autoApprove in Marketplace's Account
   *
   * @remarks
   * This endpoint enables the autoapprove rule to a marketplace's whole Received SKUs module. Once enabling the rule, received SKUs will be automatically approved on your store, regardless of the seller.
   *
   *  For the autoapprove rule to work as expected, the approval [Matcher score](https://help.vtex.com/en/tutorial/entendendo-a-pontuacao-do-vtex-matcher--tutorials_424) should be set up as 80 (default value), but you can configure a different number through the field `Score` in [Save Account's Approval Settings](https://developers.vtex.com/vtex-rest-api/reference/saveaccountconfig).
   */
  saveautoapproveforaccount(
    req: operations.SaveautoapproveforaccountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveautoapproveforaccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveautoapproveforaccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/suggestions/configuration/autoapproval/toggle";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "saveautoapproveforaccountRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveautoapproveforaccountResponse =
        new operations.SaveautoapproveforaccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveautoapproveforaccount200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.Saveautoapproveforaccount200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Activate autoApprove Setting for a Seller
   *
   * @remarks
   * This endpoint enables the auto approve setting to received SKUs from a specific seller. Be aware that once enabling the rule through this request, all received SKUs from that seller will be automatically approved on your store, regardless of the Matcher Score.
   */
  saveautoapproveforaccountseller(
    req: operations.SaveautoapproveforaccountsellerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveautoapproveforaccountsellerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveautoapproveforaccountsellerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/suggestions/configuration/autoapproval/toggle/seller/{sellerId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "saveautoapproveforaccountsellerRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveautoapproveforaccountsellerResponse =
        new operations.SaveautoapproveforaccountsellerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
