/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AuditCheckConfiguration } from "./auditcheckconfiguration";
import { AuditNotificationTarget } from "./auditnotificationtarget";
import { Expose, Transform } from "class-transformer";

/**
 * Success
 */
export class DescribeAccountAuditConfigurationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AuditCheckConfiguration })
  @Expose({ name: "auditCheckConfigurations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AuditCheckConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AuditCheckConfiguration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  auditCheckConfigurations?: Record<string, AuditCheckConfiguration>;

  @SpeakeasyMetadata({ elemType: AuditNotificationTarget })
  @Expose({ name: "auditNotificationTargetConfigurations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AuditNotificationTarget> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AuditNotificationTarget);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  auditNotificationTargetConfigurations?: Record<
    string,
    AuditNotificationTarget
  >;

  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;
}
