<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Schemas 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete schema by name
     * 
     * Deletes an existing schema for a given data entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteschemabynameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteschemabynameResponse
     */
	public function deleteschemabyname(
        \OpenAPI\OpenAPI\Models\Operations\DeleteschemabynameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteschemabynameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/schemas/{schemaName}', \OpenAPI\OpenAPI\Models\Operations\DeleteschemabynameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteschemabynameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get schema by name
     * 
     * Returns an existing schema for a given data entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetschemabynameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetschemabynameResponse
     */
	public function getschemabyname(
        \OpenAPI\OpenAPI\Models\Operations\GetschemabynameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetschemabynameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/schemas/{schemaName}', \OpenAPI\OpenAPI\Models\Operations\GetschemabynameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetschemabynameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get schemas
     * 
     * Return the schemas saved.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetschemasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetschemasResponse
     */
	public function getschemas(
        \OpenAPI\OpenAPI\Models\Operations\GetschemasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetschemasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/schemas', \OpenAPI\OpenAPI\Models\Operations\GetschemasRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetschemasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Save schema by name
     * 
     * Creates or edits a data entity schema. Learn more about [Master Data schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle)
     * 
     * > Note that if you send a `schemaName` that does not exist for that data entity, this request will create it.
     * 
     * This request can also be used to [create or edit Master Data v2 triggers](https://developers.vtex.com/vtex-rest-api/docs/setting-up-triggers-in-master-data-v2).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveschemabynameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveschemabynameResponse
     */
	public function saveschemabyname(
        \OpenAPI\OpenAPI\Models\Operations\SaveschemabynameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveschemabynameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/schemas/{schemaName}', \OpenAPI\OpenAPI\Models\Operations\SaveschemabynameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "saveschemabynameRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveschemabynameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}