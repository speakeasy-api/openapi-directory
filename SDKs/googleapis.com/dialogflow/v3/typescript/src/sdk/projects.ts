/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns the list of Changelogs.
   */
  dialogflowProjectsLocationsAgentsChangelogsList(
    req: operations.DialogflowProjectsLocationsAgentsChangelogsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsChangelogsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsChangelogsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsChangelogsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/changelogs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsChangelogsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsChangelogsListResponse =
        new operations.DialogflowProjectsLocationsAgentsChangelogsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListChangelogsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListChangelogsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an agent in the specified location. Note: You should always train flows prior to sending them queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  dialogflowProjectsLocationsAgentsCreate(
    req: operations.DialogflowProjectsLocationsAgentsCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/agents", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3Agent",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DialogflowProjectsLocationsAgentsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3Agent = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3Agent
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetches a list of continuous test results for a given environment.
   */
  dialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsList(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/continuousTestResults",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListContinuousTestResultsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListContinuousTestResultsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an Environment in the specified Agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment
   */
  dialogflowProjectsLocationsAgentsEnvironmentsCreate(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/environments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3EnvironmentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deploys a flow to the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployFlowMetadata - `response`: DeployFlowResponse
   */
  dialogflowProjectsLocationsAgentsEnvironmentsDeployFlow(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{environment}:deployFlow",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3DeployFlowRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all deployments in the specified Environment.
   */
  dialogflowProjectsLocationsAgentsEnvironmentsDeploymentsList(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/deployments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListDeploymentsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListDeploymentsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an Experiment in the specified Environment.
   */
  dialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreate(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/experiments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3Experiment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3Experiment = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3Experiment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all experiments in the specified Environment.
   */
  dialogflowProjectsLocationsAgentsEnvironmentsExperimentsList(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/experiments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListExperimentsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListExperimentsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts the specified Experiment. This rpc only changes the state of experiment from PENDING to RUNNING.
   */
  dialogflowProjectsLocationsAgentsEnvironmentsExperimentsStart(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:start", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3Experiment = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3Experiment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Stops the specified Experiment. This rpc only changes the state of experiment from RUNNING to DONE.
   */
  dialogflowProjectsLocationsAgentsEnvironmentsExperimentsStop(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:stop", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3Experiment = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3Experiment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all environments in the specified Agent.
   */
  dialogflowProjectsLocationsAgentsEnvironmentsList(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/environments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsListResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListEnvironmentsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListEnvironmentsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Looks up the history of the specified Environment.
   */
  dialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistory(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{name}:lookupEnvironmentHistory",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistorySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3LookupEnvironmentHistoryResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3LookupEnvironmentHistoryResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Kicks off a continuous test under the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunContinuousTestMetadata - `response`: RunContinuousTestResponse
   */
  dialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTest(
    req: operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest,
    security: operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{environment}:runContinuousTest",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestResponse =
        new operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a flow in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  dialogflowProjectsLocationsAgentsFlowsCreate(
    req: operations.DialogflowProjectsLocationsAgentsFlowsCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsFlowsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/flows", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3FlowInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3Flow = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3Flow
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Exports the specified flow to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportFlowResponse Note that resources (e.g. intents, entities, webhooks) that the flow references will also be exported.
   */
  dialogflowProjectsLocationsAgentsFlowsExport(
    req: operations.DialogflowProjectsLocationsAgentsFlowsExportRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsExportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsFlowsExportRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:export", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3ExportFlowRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsExportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsExportResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsExportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports the specified flow to the specified agent from a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ImportFlowResponse Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  dialogflowProjectsLocationsAgentsFlowsImport(
    req: operations.DialogflowProjectsLocationsAgentsFlowsImportRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsFlowsImportRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/flows:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3ImportFlowRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsImportResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsImportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all flows in the specified agent.
   */
  dialogflowProjectsLocationsAgentsFlowsList(
    req: operations.DialogflowProjectsLocationsAgentsFlowsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsFlowsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/flows", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsListResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListFlowsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListFlowsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a page in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  dialogflowProjectsLocationsAgentsFlowsPagesCreate(
    req: operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/pages", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3PageInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3Page = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3Page
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all pages in the specified flow.
   */
  dialogflowProjectsLocationsAgentsFlowsPagesList(
    req: operations.DialogflowProjectsLocationsAgentsFlowsPagesListRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsPagesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsPagesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsPagesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/pages", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsPagesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsPagesListResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsPagesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListPagesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListPagesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Trains the specified flow. Note that only the flow in 'draft' environment is trained. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  dialogflowProjectsLocationsAgentsFlowsTrain(
    req: operations.DialogflowProjectsLocationsAgentsFlowsTrainRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsTrainSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsTrainResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsFlowsTrainRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:train", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsTrainSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsTrainResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsTrainResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an TransitionRouteGroup in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  dialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreate(
    req: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/transitionRouteGroups",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3TransitionRouteGroupInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3TransitionRouteGroup =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3TransitionRouteGroup
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all transition route groups in the specified flow.
   */
  dialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsList(
    req: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/transitionRouteGroups",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListTransitionRouteGroupsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListTransitionRouteGroupsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Validates the specified flow and creates or updates validation results. Please call this API after the training is completed to get the complete validation results.
   */
  dialogflowProjectsLocationsAgentsFlowsValidate(
    req: operations.DialogflowProjectsLocationsAgentsFlowsValidateRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsValidateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsValidateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsValidateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:validate", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3ValidateFlowRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsValidateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsValidateResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsValidateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3FlowValidationResult =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3FlowValidationResult
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Compares the specified base version with target version.
   */
  dialogflowProjectsLocationsAgentsFlowsVersionsCompareVersions(
    req: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{baseVersion}:compareVersions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3CompareVersionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3CompareVersionsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3CompareVersionsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Version in the specified Flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateVersionOperationMetadata - `response`: Version
   */
  dialogflowProjectsLocationsAgentsFlowsVersionsCreate(
    req: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/versions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3VersionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all versions in the specified Flow.
   */
  dialogflowProjectsLocationsAgentsFlowsVersionsList(
    req: operations.DialogflowProjectsLocationsAgentsFlowsVersionsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsVersionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsVersionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/versions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsVersionsListResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListVersionsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListVersionsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Loads resources in the specified version to the draft flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   */
  dialogflowProjectsLocationsAgentsFlowsVersionsLoad(
    req: operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest,
    security: operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:load", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3LoadVersionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadResponse =
        new operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an intent in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  dialogflowProjectsLocationsAgentsIntentsCreate(
    req: operations.DialogflowProjectsLocationsAgentsIntentsCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsIntentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsIntentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsIntentsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/intents", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3Intent",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsIntentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsIntentsCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsIntentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3Intent = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3Intent
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all intents in the specified agent.
   */
  dialogflowProjectsLocationsAgentsIntentsList(
    req: operations.DialogflowProjectsLocationsAgentsIntentsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsIntentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsIntentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsIntentsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/intents", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsIntentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsIntentsListResponse =
        new operations.DialogflowProjectsLocationsAgentsIntentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListIntentsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListIntentsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all agents in the specified location.
   */
  dialogflowProjectsLocationsAgentsList(
    req: operations.DialogflowProjectsLocationsAgentsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/agents", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DialogflowProjectsLocationsAgentsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsListResponse =
        new operations.DialogflowProjectsLocationsAgentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListAgentsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListAgentsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restores the specified agent from a binary file. Replaces the current agent with a new one. Note that all existing resources in agent (e.g. intents, entity types, flows) will be removed. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train flows prior to sending them queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  dialogflowProjectsLocationsAgentsRestore(
    req: operations.DialogflowProjectsLocationsAgentsRestoreRequest,
    security: operations.DialogflowProjectsLocationsAgentsRestoreSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsRestoreResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsRestoreRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:restore", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3RestoreAgentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsRestoreSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsRestoreResponse =
        new operations.DialogflowProjectsLocationsAgentsRestoreResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).
   */
  dialogflowProjectsLocationsAgentsSessionsDetectIntent(
    req: operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest,
    security: operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{session}:detectIntent",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3DetectIntentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentResponse =
        new operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3DetectIntentResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3DetectIntentResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a session entity type.
   */
  dialogflowProjectsLocationsAgentsSessionsEntityTypesCreate(
    req: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/entityTypes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3SessionEntityType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3SessionEntityType =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3SessionEntityType
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all session entity types in the specified session.
   */
  dialogflowProjectsLocationsAgentsSessionsEntityTypesList(
    req: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest,
    security: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/entityTypes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListResponse =
        new operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListSessionEntityTypesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListSessionEntityTypesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined.
   */
  dialogflowProjectsLocationsAgentsSessionsFulfillIntent(
    req: operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest,
    security: operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{session}:fulfillIntent",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3FulfillIntentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentResponse =
        new operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3FulfillIntentResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3FulfillIntentResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns preliminary intent match results, doesn't change the session status.
   */
  dialogflowProjectsLocationsAgentsSessionsMatchIntent(
    req: operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest,
    security: operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{session}:matchIntent",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3MatchIntentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentResponse =
        new operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3MatchIntentResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3MatchIntentResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Batch deletes test cases.
   */
  dialogflowProjectsLocationsAgentsTestCasesBatchDelete(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/testCases:batchDelete",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3BatchDeleteTestCasesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Kicks off a batch run of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: BatchRunTestCasesMetadata - `response`: BatchRunTestCasesResponse
   */
  dialogflowProjectsLocationsAgentsTestCasesBatchRun(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/testCases:batchRun",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3BatchRunTestCasesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Calculates the test coverage for an agent.
   */
  dialogflowProjectsLocationsAgentsTestCasesCalculateCoverage(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{agent}/testCases:calculateCoverage",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3CalculateCoverageResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3CalculateCoverageResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a test case for the given agent.
   */
  dialogflowProjectsLocationsAgentsTestCasesCreate(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsTestCasesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/testCases",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3TestCaseInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3TestCase = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3TestCase
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Exports the test cases under the agent to a Cloud Storage bucket or a local file. Filter can be applied to export a subset of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ExportTestCasesMetadata - `response`: ExportTestCasesResponse
   */
  dialogflowProjectsLocationsAgentsTestCasesExport(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesExportRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesExportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsTestCasesExportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/testCases:export",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3ExportTestCasesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesExportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesExportResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesExportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports the test cases from a Cloud Storage bucket or a local file. It always creates new test cases and won't overwrite any existing ones. The provided ID in the imported test case is neglected. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportTestCasesMetadata - `response`: ImportTestCasesResponse
   */
  dialogflowProjectsLocationsAgentsTestCasesImport(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesImportRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsTestCasesImportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/testCases:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3ImportTestCasesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesImportResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesImportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetches a list of test cases for a given agent.
   */
  dialogflowProjectsLocationsAgentsTestCasesList(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesListRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsTestCasesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/testCases",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesListResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListTestCasesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListTestCasesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetches a list of results for a given test case.
   */
  dialogflowProjectsLocationsAgentsTestCasesResultsList(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesResultsListRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesResultsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesResultsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsTestCasesResultsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{parent}/results", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesResultsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesResultsListResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesResultsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListTestCaseResultsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListTestCaseResultsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Kicks off a test case run. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunTestCaseMetadata - `response`: RunTestCaseResponse
   */
  dialogflowProjectsLocationsAgentsTestCasesRun(
    req: operations.DialogflowProjectsLocationsAgentsTestCasesRunRequest,
    security: operations.DialogflowProjectsLocationsAgentsTestCasesRunSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsTestCasesRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsTestCasesRunRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:run", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3RunTestCaseRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsTestCasesRunSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsTestCasesRunResponse =
        new operations.DialogflowProjectsLocationsAgentsTestCasesRunResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a webhook in the specified agent.
   */
  dialogflowProjectsLocationsAgentsWebhooksCreate(
    req: operations.DialogflowProjectsLocationsAgentsWebhooksCreateRequest,
    security: operations.DialogflowProjectsLocationsAgentsWebhooksCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsWebhooksCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsAgentsWebhooksCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/webhooks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3Webhook",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsWebhooksCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsWebhooksCreateResponse =
        new operations.DialogflowProjectsLocationsAgentsWebhooksCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3Webhook = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3Webhook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all webhooks in the specified agent.
   */
  dialogflowProjectsLocationsAgentsWebhooksList(
    req: operations.DialogflowProjectsLocationsAgentsWebhooksListRequest,
    security: operations.DialogflowProjectsLocationsAgentsWebhooksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsAgentsWebhooksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsAgentsWebhooksListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/webhooks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsAgentsWebhooksListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsAgentsWebhooksListResponse =
        new operations.DialogflowProjectsLocationsAgentsWebhooksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListWebhooksResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListWebhooksResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  dialogflowProjectsLocationsList(
    req: operations.DialogflowProjectsLocationsListRequest,
    security: operations.DialogflowProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}/locations", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DialogflowProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsListResponse =
        new operations.DialogflowProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudLocationListLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudLocationListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create security settings in the specified location.
   */
  dialogflowProjectsLocationsSecuritySettingsCreate(
    req: operations.DialogflowProjectsLocationsSecuritySettingsCreateRequest,
    security: operations.DialogflowProjectsLocationsSecuritySettingsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsSecuritySettingsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsSecuritySettingsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/securitySettings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3SecuritySettings",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsSecuritySettingsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsSecuritySettingsCreateResponse =
        new operations.DialogflowProjectsLocationsSecuritySettingsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3SecuritySettings = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3SecuritySettings
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified SecuritySettings.
   */
  dialogflowProjectsLocationsSecuritySettingsDelete(
    req: operations.DialogflowProjectsLocationsSecuritySettingsDeleteRequest,
    security: operations.DialogflowProjectsLocationsSecuritySettingsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsSecuritySettingsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsSecuritySettingsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsSecuritySettingsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsSecuritySettingsDeleteResponse =
        new operations.DialogflowProjectsLocationsSecuritySettingsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all security settings in the specified location.
   */
  dialogflowProjectsLocationsSecuritySettingsList(
    req: operations.DialogflowProjectsLocationsSecuritySettingsListRequest,
    security: operations.DialogflowProjectsLocationsSecuritySettingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsSecuritySettingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsSecuritySettingsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/securitySettings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsSecuritySettingsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsSecuritySettingsListResponse =
        new operations.DialogflowProjectsLocationsSecuritySettingsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3ListSecuritySettingsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDialogflowCxV3ListSecuritySettingsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the specified SecuritySettings.
   */
  dialogflowProjectsLocationsSecuritySettingsPatch(
    req: operations.DialogflowProjectsLocationsSecuritySettingsPatchRequest,
    security: operations.DialogflowProjectsLocationsSecuritySettingsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsLocationsSecuritySettingsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DialogflowProjectsLocationsSecuritySettingsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDialogflowCxV3SecuritySettings",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DialogflowProjectsLocationsSecuritySettingsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsLocationsSecuritySettingsPatchResponse =
        new operations.DialogflowProjectsLocationsSecuritySettingsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDialogflowCxV3SecuritySettings = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDialogflowCxV3SecuritySettings
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  dialogflowProjectsOperationsCancel(
    req: operations.DialogflowProjectsOperationsCancelRequest,
    security: operations.DialogflowProjectsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsOperationsCancelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}:cancel", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DialogflowProjectsOperationsCancelSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsOperationsCancelResponse =
        new operations.DialogflowProjectsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
   */
  dialogflowProjectsOperationsGet(
    req: operations.DialogflowProjectsOperationsGetRequest,
    security: operations.DialogflowProjectsOperationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsOperationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsOperationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DialogflowProjectsOperationsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsOperationsGetResponse =
        new operations.DialogflowProjectsOperationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  dialogflowProjectsOperationsList(
    req: operations.DialogflowProjectsOperationsListRequest,
    security: operations.DialogflowProjectsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DialogflowProjectsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DialogflowProjectsOperationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DialogflowProjectsOperationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DialogflowProjectsOperationsListResponse =
        new operations.DialogflowProjectsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningListOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
