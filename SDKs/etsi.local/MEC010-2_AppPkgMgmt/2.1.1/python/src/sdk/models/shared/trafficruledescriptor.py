"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import action_enum as shared_action_enum
from ..shared import filtertype_enum as shared_filtertype_enum
from ..shared import interfacedescriptor as shared_interfacedescriptor
from ..shared import trafficfilter as shared_trafficfilter
from typing import Optional


@dataclasses.dataclass
class TrafficRuleDescriptor:
    
    action: shared_action_enum.ActionEnum = dataclasses.field()
    r"""'Identifies the action of the MEC host data plane, when a packet matches the trafficFilter.'"""  
    filter_type: shared_filtertype_enum.FilterTypeEnum = dataclasses.field()
    r"""Definition of filter type: per FLOW or PACKET"""  
    priority: int = dataclasses.field()
    r"""Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence."""  
    traffic_filter: list[shared_trafficfilter.TrafficFilter] = dataclasses.field()
    r"""The filter used to identify specific flow/packets that need to be handled by the MEC host."""  
    traffic_rule_id: str = dataclasses.field()
    r"""Identifies the traffic rule."""  
    dst_interface: Optional[list[shared_interfacedescriptor.InterfaceDescriptor]] = dataclasses.field(default=None)  
    