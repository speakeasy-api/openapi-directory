<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AuditNodeInfo - Audit node info
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AuditNodeInfo
{
    /**
     * Number of direct children
     * 
     * 
     * (no recursion; for rooms only)
     * 
     * @var ?int $countChildren
     */
	#[\JMS\Serializer\Annotation\SerializedName('countChildren')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $countChildren = null;
    
    /**
     * Node ID
     * 
     * @var int $nodeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('nodeId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $nodeId;
    
    /**
     * Encryption state
     * 
     * @var ?bool $nodeIsEncrypted
     */
	#[\JMS\Serializer\Annotation\SerializedName('nodeIsEncrypted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $nodeIsEncrypted = null;
    
    /**
     * Node name
     * 
     * @var string $nodeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('nodeName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nodeName;
    
    /**
     * Parent room ID
     * 
     * @var ?int $nodeParentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('nodeParentId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $nodeParentId = null;
    
    /**
     * Parent node path
     * 
     * 
     * `/` if node is a root node (room)
     * 
     * @var string $nodeParentPath
     */
	#[\JMS\Serializer\Annotation\SerializedName('nodeParentPath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nodeParentPath;
    
	public function __construct()
	{
		$this->countChildren = null;
		$this->nodeId = 0;
		$this->nodeIsEncrypted = null;
		$this->nodeName = "";
		$this->nodeParentId = null;
		$this->nodeParentPath = "";
	}
}
