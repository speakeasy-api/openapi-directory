"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class IssueResolutionEnum(str, Enum):
    r"""What needs to happen to resolve the issue."""
    RESOLUTION_UNSPECIFIED = 'RESOLUTION_UNSPECIFIED'
    USER_ACTION = 'USER_ACTION'
    PENDING_PROCESSING = 'PENDING_PROCESSING'

class IssueSeverityEnum(str, Enum):
    r"""The severity of the issue."""
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Issue:
    r"""Product issue."""
    
    attribute: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute'), 'exclude': lambda f: f is None }})
    r"""If present, the attribute that triggered the issue. For more information about attributes, see https://support.google.com/manufacturers/answer/6124116."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Longer description of the issue focused on how to resolve it."""  
    destination: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""The destination this issue applies to."""  
    resolution: Optional[IssueResolutionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolution'), 'exclude': lambda f: f is None }})
    r"""What needs to happen to resolve the issue."""  
    severity: Optional[IssueSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""The severity of the issue."""  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""The timestamp when this issue appeared."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short title describing the nature of the issue."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The server-generated type of the issue, for example, “INCORRECT_TEXT_FORMATTING”, “IMAGE_NOT_SERVEABLE”, etc."""  
    