"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PotsHoldingsAndTransactions:
    r"""Pots allows a wealth manager to compartmentalise investments made by (or on behalf of) an investor to represent different savings goals, risk appetite and investment instructions (e.g. model portfolios).
    An Investor can have multiple pots for a financial product (e.g within the General Investment Account, one pot could be to target a house purchase goal whereas another pot could target savings for school fees etc.). Each pot consists of cash,  investment product holdings, both cash and investments or nothing (empty pot - pending investments). 
    <!--Creating or updating a pot with a linked portfolio template - `portfolio_template_id`  will allow WealthOS to carry out actions such as automated investing based on portfolio, portfolio rebalancing etc. for a pot. 
    -->
    This end point also returns key information related to the pot (e.g. value, total holdings etc.) as well as transaction history for the pot.
    
    ### Current Holdings and Transaction History
    #### Current Holding
    * Cash : `investment_product_id` will be specified as `cash`. For cash holdings, `free_quantity` and `free_value` will return the cash that is settled and available, while `locked_quantity` and `locked_value`  returns the value of cash which is locked (i.e unsettled, ringfenced for a fee deduction etc.) and cannot be used.`total_quantity` and `total_value` will be the total of free and locked. 
    
    * Investment Products : For investment product holdings,  `total_quantity`  return the total number of units held of an investment product within the pot, `locked-quantity` returns the total number of unit which are locked (e.g. ringfenced to be sold) and `free-quantity` returns number of units available for trading. Value of the holdings are calculated using latest available price. So the formula to calculate the value of the investment products holdings will be `quantity`*`price`.
    
    #### Pending Transactions
    * Cash : `type : pending`,`direction : in` (if cash is inbound) or `out` (if cash is withdrawn - functionality not available yet).
    
    * Investment products : `type : pending`,`direction : in`(buy instruction) or `out` (sell instruction).
    
    #### Archived Transactions (historical)
    
    * Cash : `type = archived`, `direction= in` (if cash is inbound) or `out` (if cash is withdrawn - functionality not available yet) and `sub-type : \"rejected\" or \"cancelled\"`for a failed transaction, and `sub-type = \"confirmed\"or \"settled\"` for a successful transaction.  
    
    * Investment Products : `type = archived`, `direction= in` (buy instruction) or `out` (sell instruction) and `sub-type = \"rejected\"or \"cancelled\"` for a failed transaction, and `sub-type = \"confirmed\"or \"settled\"` for a successful transaction.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def update_pot(self, request: operations.UpdatePotRequest, security: operations.UpdatePotSecurity) -> operations.UpdatePotResponse:
        r"""Update existing Pot details
        Update an existing Pot. WealthOS will update only the fields sent in the payload.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePotRequest, base_url, '/tenant/pots/v1/{pot_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePot200ApplicationJSON])
                res.update_pot_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePot400ApplicationJSON])
                res.update_pot_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePot401ApplicationJSON])
                res.update_pot_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePot403ApplicationJSON])
                res.update_pot_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePot404ApplicationJSON])
                res.update_pot_404_application_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePot409ApplicationJSON])
                res.update_pot_409_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePot429ApplicationJSON])
                res.update_pot_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePot500ApplicationJSON])
                res.update_pot_500_application_json_object = out

        return res

    def create_pot(self, request: operations.CreatePotRequest, security: operations.CreatePotSecurity) -> operations.CreatePotResponse:
        r"""Create new pot"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/pots/v1'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePot201ApplicationJSON])
                res.create_pot_201_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePot400ApplicationJSON])
                res.create_pot_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePot401ApplicationJSON])
                res.create_pot_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePot403ApplicationJSON])
                res.create_pot_403_application_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePot409ApplicationJSON])
                res.create_pot_409_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePot429ApplicationJSON])
                res.create_pot_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePot500ApplicationJSON])
                res.create_pot_500_application_json_object = out

        return res

    def get_pot(self, request: operations.GetPotRequest, security: operations.GetPotSecurity) -> operations.GetPotResponse:
        r"""Retrive existing pot from pot id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPotRequest, base_url, '/tenant/pots/v1/{pot_id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPot200ApplicationJSON])
                res.get_pot_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPot401ApplicationJSON])
                res.get_pot_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPot403ApplicationJSON])
                res.get_pot_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPot404ApplicationJSON])
                res.get_pot_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPot429ApplicationJSON])
                res.get_pot_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPot500ApplicationJSON])
                res.get_pot_500_application_json_object = out

        return res

    def get_pot_holdings(self, request: operations.GetPotHoldingsRequest, security: operations.GetPotHoldingsSecurity) -> operations.GetPotHoldingsResponse:
        r"""Get current holdings of a pot
        Get a breakdown of all the holdings of a pot (cash and investment product holdings)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPotHoldingsRequest, base_url, '/tenant/pots/v1/{pot_id}/getHoldings', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPotHoldingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotHoldings200ApplicationJSON])
                res.get_pot_holdings_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotHoldings400ApplicationJSON])
                res.get_pot_holdings_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotHoldings401ApplicationJSON])
                res.get_pot_holdings_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotHoldings403ApplicationJSON])
                res.get_pot_holdings_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotHoldings404ApplicationJSON])
                res.get_pot_holdings_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotHoldings429ApplicationJSON])
                res.get_pot_holdings_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotHoldings500ApplicationJSON])
                res.get_pot_holdings_500_application_json_object = out

        return res

    def get_pot_transactions(self, request: operations.GetPotTransactionsRequest, security: operations.GetPotTransactionsSecurity) -> operations.GetPotTransactionsResponse:
        r"""Get pending & past transactions of a pot
        Get a list of pending and archived transactions of the pot by date range. Only last 1000 records will be recieved if the result contain more that 1000 transactions. In that case, the pagination should be used.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPotTransactionsRequest, base_url, '/tenant/pots/v1/{pot_id}/getTransactions', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPotTransactionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPotTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotTransactions200ApplicationJSON])
                res.get_pot_transactions_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotTransactions401ApplicationJSON])
                res.get_pot_transactions_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotTransactions403ApplicationJSON])
                res.get_pot_transactions_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotTransactions404ApplicationJSON])
                res.get_pot_transactions_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotTransactions429ApplicationJSON])
                res.get_pot_transactions_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotTransactions500ApplicationJSON])
                res.get_pot_transactions_500_application_json_object = out

        return res

    def get_pot_value(self, request: operations.GetPotValueRequest, security: operations.GetPotValueSecurity) -> operations.GetPotValueResponse:
        r"""Get current value of a pot
        Get the current value of the pot (including cash and investment product holdings)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPotValueRequest, base_url, '/tenant/pots/v1/{pot_id}/getValue', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPotValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotValue200ApplicationJSON])
                res.get_pot_value_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotValue400ApplicationJSON])
                res.get_pot_value_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotValue401ApplicationJSON])
                res.get_pot_value_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotValue403ApplicationJSON])
                res.get_pot_value_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotValue404ApplicationJSON])
                res.get_pot_value_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotValue429ApplicationJSON])
                res.get_pot_value_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotValue500ApplicationJSON])
                res.get_pot_value_500_application_json_object = out

        return res

    def get_pots(self, request: operations.GetPotsRequest, security: operations.GetPotsSecurity) -> operations.GetPotsResponse:
        r"""Get all pots for an investor
        Get all Investment Pots of the investor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPotsRequest, base_url, '/tenant/pots/v1/getInvestorPots/{investor_id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPotsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPotsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPots200ApplicationJSON])
                res.get_pots_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPots400ApplicationJSON])
                res.get_pots_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPots401ApplicationJSON])
                res.get_pots_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPots403ApplicationJSON])
                res.get_pots_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPots404ApplicationJSON])
                res.get_pots_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPots429ApplicationJSON])
                res.get_pots_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPots500ApplicationJSON])
                res.get_pots_500_application_json_object = out

        return res

    def get_total_pot_holdings(self, request: operations.GetTotalPotHoldingsRequest, security: operations.GetTotalPotHoldingsSecurity) -> operations.GetTotalPotHoldingsResponse:
        r"""Get total holdings of an Investor
        Get a breakdown of all the holdings(cash and investment product holdings) of an investor organised by the pot they belong to.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTotalPotHoldingsRequest, base_url, '/tenant/pots/v1/all/getHoldings/{investor_id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTotalPotHoldingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotHoldings200ApplicationJSON])
                res.get_total_pot_holdings_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotHoldings401ApplicationJSON])
                res.get_total_pot_holdings_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotHoldings403ApplicationJSON])
                res.get_total_pot_holdings_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotHoldings404ApplicationJSON])
                res.get_total_pot_holdings_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotHoldings429ApplicationJSON])
                res.get_total_pot_holdings_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotHoldings500ApplicationJSON])
                res.get_total_pot_holdings_500_application_json_object = out

        return res

    def get_total_pot_value(self, request: operations.GetTotalPotValueRequest, security: operations.GetTotalPotValueSecurity) -> operations.GetTotalPotValueResponse:
        r"""Get total value of all pots of an investor
        Get the current value of all the investor’s pots broken down by currency (including cash and investment product holdings)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTotalPotValueRequest, base_url, '/tenant/pots/v1/all/getValue/{investor_id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTotalPotValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotValue200ApplicationJSON])
                res.get_total_pot_value_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotValue400ApplicationJSON])
                res.get_total_pot_value_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotValue401ApplicationJSON])
                res.get_total_pot_value_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotValue403ApplicationJSON])
                res.get_total_pot_value_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotValue404ApplicationJSON])
                res.get_total_pot_value_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotValue429ApplicationJSON])
                res.get_total_pot_value_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTotalPotValue500ApplicationJSON])
                res.get_total_pot_value_500_application_json_object = out

        return res

    