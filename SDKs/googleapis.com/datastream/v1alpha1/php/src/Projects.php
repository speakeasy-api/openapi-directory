<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Use this method to create a connection profile in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateResponse
     */
	public function datastreamProjectsLocationsConnectionProfilesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/connectionProfiles', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "connectionProfileInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects under a parent data object that's optionally supplied in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverResponse
     */
	public function datastreamProjectsLocationsConnectionProfilesDiscover(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/connectionProfiles:discover', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "discoverConnectionProfileRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesDiscoverResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->discoverConnectionProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiscoverConnectionProfileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to list connection profiles created in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListResponse
     */
	public function datastreamProjectsLocationsConnectionProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/connectionProfiles', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsConnectionProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectionProfilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConnectionProfilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The FetchStaticIps API call exposes the static IP addresses used by Datastream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsResponse
     */
	public function datastreamProjectsLocationsFetchStaticIps(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:fetchStaticIps', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsFetchStaticIpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchStaticIpsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchStaticIpsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListResponse
     */
	public function datastreamProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelResponse
     */
	public function datastreamProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListResponse
     */
	public function datastreamProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to create a private connectivity configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateResponse
     */
	public function datastreamProjectsLocationsPrivateConnectionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/privateConnections', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "privateConnectionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to list private connectivity configurations in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListResponse
     */
	public function datastreamProjectsLocationsPrivateConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/privateConnections', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPrivateConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPrivateConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to create a route for a private connectivity in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateResponse
     */
	public function datastreamProjectsLocationsPrivateConnectionsRoutesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/routes', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "routeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to list routes created for a private connectivity in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListResponse
     */
	public function datastreamProjectsLocationsPrivateConnectionsRoutesList(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/routes', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsPrivateConnectionsRoutesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoutesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRoutesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to create a stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateResponse
     */
	public function datastreamProjectsLocationsStreamsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/streams', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "streamInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to delete a stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteResponse
     */
	public function datastreamProjectsLocationsStreamsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to fetch any errors associated with a stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsResponse
     */
	public function datastreamProjectsLocationsStreamsFetchErrors(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{stream}:fetchErrors', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsFetchErrorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to list streams in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListResponse
     */
	public function datastreamProjectsLocationsStreamsList(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/streams', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listStreamsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListStreamsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to get details about a stream object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetResponse
     */
	public function datastreamProjectsLocationsStreamsObjectsGet(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->streamObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StreamObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to list the objects of a specific stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListResponse
     */
	public function datastreamProjectsLocationsStreamsObjectsList(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/objects', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listStreamObjectsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListStreamObjectsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts backfill job for the specified stream object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobResponse
     */
	public function datastreamProjectsLocationsStreamsObjectsStartBackfillJob(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{object}:startBackfillJob', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStartBackfillJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->startBackfillJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StartBackfillJobResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops the backfill job for the specified stream object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobResponse
     */
	public function datastreamProjectsLocationsStreamsObjectsStopBackfillJob(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{object}:stopBackfillJob', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsObjectsStopBackfillJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stopBackfillJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StopBackfillJobResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this method to update the configuration of a stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchResponse
     */
	public function datastreamProjectsLocationsStreamsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "streamInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastreamProjectsLocationsStreamsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}