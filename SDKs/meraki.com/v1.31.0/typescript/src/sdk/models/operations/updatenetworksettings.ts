/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A hash of Local Status page(s)' authentication options applied to the Network.
 */
export class UpdateNetworkSettingsRequestBodyLocalStatusPageAuthentication extends SpeakeasyBase {
  /**
   * Enables / disables the authentication on Local Status page(s).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * The password used for Local Status Page(s). Set this to null to clear the password.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;
}

/**
 * A hash of Local Status page(s)' authentication options applied to the Network.
 */
export class UpdateNetworkSettingsRequestBodyLocalStatusPage extends SpeakeasyBase {
  /**
   * A hash of Local Status page(s)' authentication options applied to the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication" })
  @Type(() => UpdateNetworkSettingsRequestBodyLocalStatusPageAuthentication)
  authentication?: UpdateNetworkSettingsRequestBodyLocalStatusPageAuthentication;
}

/**
 * A hash of SecureConnect options applied to the Network.
 */
export class UpdateNetworkSettingsRequestBodySecurePort extends SpeakeasyBase {
  /**
   * Enables / disables SecureConnect on the network. Optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

export class UpdateNetworkSettingsRequestBody extends SpeakeasyBase {
  /**
   * A hash of Local Status page(s)' authentication options applied to the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localStatusPage" })
  @Type(() => UpdateNetworkSettingsRequestBodyLocalStatusPage)
  localStatusPage?: UpdateNetworkSettingsRequestBodyLocalStatusPage;

  /**
   * Enables / disables the local device status pages (<a target='_blank' href='http://my.meraki.com/'>my.meraki.com, </a><a target='_blank' href='http://ap.meraki.com/'>ap.meraki.com, </a><a target='_blank' href='http://switch.meraki.com/'>switch.meraki.com, </a><a target='_blank' href='http://wired.meraki.com/'>wired.meraki.com</a>). Optional (defaults to false)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localStatusPageEnabled" })
  localStatusPageEnabled?: boolean;

  /**
   * Enables / disables access to the device status page (<a target='_blank'>http://[device's LAN IP])</a>. Optional. Can only be set if localStatusPageEnabled is set to true
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remoteStatusPageEnabled" })
  remoteStatusPageEnabled?: boolean;

  /**
   * A hash of SecureConnect options applied to the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "securePort" })
  @Type(() => UpdateNetworkSettingsRequestBodySecurePort)
  securePort?: UpdateNetworkSettingsRequestBodySecurePort;
}

export class UpdateNetworkSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * Privacy settings
 */
export class UpdateNetworkSettings200ApplicationJSONClientPrivacy extends SpeakeasyBase {
  /**
   * The date to expire the data before
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireDataBefore" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expireDataBefore?: Date;

  /**
   * The number of days, weeks, or months in Epoch time to expire the data before
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireDataOlderThan" })
  expireDataOlderThan?: number;
}

/**
 * A hash of FIPS options applied to the Network
 */
export class UpdateNetworkSettings200ApplicationJSONFips extends SpeakeasyBase {
  /**
   * Enables / disables FIPS on the network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * A hash of Local Status page(s)' authentication options applied to the Network.
 */
export class UpdateNetworkSettings200ApplicationJSONLocalStatusPageAuthentication extends SpeakeasyBase {
  /**
   * Enables / disables the authentication on Local Status page(s).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * The username used for Local Status Page(s).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}

/**
 * A hash of Local Status page(s)' authentication options applied to the Network.
 */
export class UpdateNetworkSettings200ApplicationJSONLocalStatusPage extends SpeakeasyBase {
  /**
   * A hash of Local Status page(s)' authentication options applied to the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication" })
  @Type(
    () => UpdateNetworkSettings200ApplicationJSONLocalStatusPageAuthentication
  )
  authentication?: UpdateNetworkSettings200ApplicationJSONLocalStatusPageAuthentication;
}

/**
 * A hash of Named VLANs options applied to the Network.
 */
export class UpdateNetworkSettings200ApplicationJSONNamedVlans extends SpeakeasyBase {
  /**
   * Enables / disables Named VLANs on the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;
}

/**
 * A hash of SecureConnect options applied to the Network.
 */
export class UpdateNetworkSettings200ApplicationJSONSecurePort extends SpeakeasyBase {
  /**
   * Enables / disables SecureConnect on the network. Optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * Successful operation
 */
export class UpdateNetworkSettings200ApplicationJSON extends SpeakeasyBase {
  /**
   * Privacy settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientPrivacy" })
  @Type(() => UpdateNetworkSettings200ApplicationJSONClientPrivacy)
  clientPrivacy?: UpdateNetworkSettings200ApplicationJSONClientPrivacy;

  /**
   * A hash of FIPS options applied to the Network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fips" })
  @Type(() => UpdateNetworkSettings200ApplicationJSONFips)
  fips?: UpdateNetworkSettings200ApplicationJSONFips;

  /**
   * A hash of Local Status page(s)' authentication options applied to the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localStatusPage" })
  @Type(() => UpdateNetworkSettings200ApplicationJSONLocalStatusPage)
  localStatusPage?: UpdateNetworkSettings200ApplicationJSONLocalStatusPage;

  /**
   * Enables / disables the local device status pages (<a target='_blank' href='http://my.meraki.com/'>my.meraki.com, </a><a target='_blank' href='http://ap.meraki.com/'>ap.meraki.com, </a><a target='_blank' href='http://switch.meraki.com/'>switch.meraki.com, </a><a target='_blank' href='http://wired.meraki.com/'>wired.meraki.com</a>). Optional (defaults to false)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localStatusPageEnabled" })
  localStatusPageEnabled?: boolean;

  /**
   * A hash of Named VLANs options applied to the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "namedVlans" })
  @Type(() => UpdateNetworkSettings200ApplicationJSONNamedVlans)
  namedVlans?: UpdateNetworkSettings200ApplicationJSONNamedVlans;

  /**
   * Enables / disables access to the device status page (<a target='_blank'>http://[device's LAN IP])</a>. Optional. Can only be set if localStatusPageEnabled is set to true
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remoteStatusPageEnabled" })
  remoteStatusPageEnabled?: boolean;

  /**
   * A hash of SecureConnect options applied to the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "securePort" })
  @Type(() => UpdateNetworkSettings200ApplicationJSONSecurePort)
  securePort?: UpdateNetworkSettings200ApplicationJSONSecurePort;
}

export class UpdateNetworkSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkSettings200ApplicationJSONObject?: UpdateNetworkSettings200ApplicationJSON;
}
