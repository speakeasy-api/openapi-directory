"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "http://azure-api.sportsdata.io/v3/nba/projections",
    "https://azure-api.sportsdata.io/v3/nba/projections",
];
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
    }
    /**
     * Depth Charts
     *
     * @remarks
     * This endpoint provides a depth chart for each NBA team.
     */
    SDK.prototype.depthCharts = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DepthChartsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/DepthCharts", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DepthChartsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teamDepthCharts = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teamDepthCharts = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TeamDepthChart, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DFS Slates by Date
     */
    SDK.prototype.dfsSlatesByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DfsSlatesByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/DfsSlatesByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DfsSlatesByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.dfsSlates = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.dfsSlates = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DfsSlate, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Injured Players
     *
     * @remarks
     * This endpoint provides all currently injured NBA players, along with injury details.
     */
    SDK.prototype.injuredPlayers = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.InjuredPlayersRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/InjuredPlayers", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.InjuredPlayersResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.players = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.players = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Projected Player Game Stats by Date (w/ Injuries, DFS Salaries)
     */
    SDK.prototype.projectedPlayerGameStatsByDateWInjuriesDfsSalaries = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.ProjectedPlayerGameStatsByDateWInjuriesDfsSalariesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerGameProjectionStatsByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ProjectedPlayerGameStatsByDateWInjuriesDfsSalariesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerGameProjections = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerGameProjections = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerGameProjection, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Projected Player Game Stats by Player (w/ Injuries, DFS Salaries)
     */
    SDK.prototype.projectedPlayerGameStatsByPlayerWInjuriesDfsSalaries = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.ProjectedPlayerGameStatsByPlayerWInjuriesDfsSalariesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerGameProjectionStatsByPlayer/{date}/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ProjectedPlayerGameStatsByPlayerWInjuriesDfsSalariesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerGameProjection = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerGameProjection);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Projected Player Season Stats
     */
    SDK.prototype.projectedPlayerSeasonStats = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ProjectedPlayerSeasonStatsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonProjectionStats/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ProjectedPlayerSeasonStatsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasonProjections = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasonProjections = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeasonProjection, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Projected Player Season Stats by Player
     */
    SDK.prototype.projectedPlayerSeasonStatsByPlayer = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ProjectedPlayerSeasonStatsByPlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonProjectionStatsByPlayer/{season}/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ProjectedPlayerSeasonStatsByPlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasonProjection = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeasonProjection);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Projected Player Season Stats by Team
     */
    SDK.prototype.projectedPlayerSeasonStatsByTeam = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ProjectedPlayerSeasonStatsByTeamRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonProjectionStatsByTeam/{season}/{team}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ProjectedPlayerSeasonStatsByTeamResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasonProjections = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasonProjections = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeasonProjection, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Starting Lineups by Date
     *
     * @remarks
     * This endpoint provides the projected & confirmed starting lineups for NBA games on a given date.
     */
    SDK.prototype.startingLineupsByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.StartingLineupsByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/StartingLineupsByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.StartingLineupsByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.startingLineups = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.startingLineups = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.StartingLineups, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
