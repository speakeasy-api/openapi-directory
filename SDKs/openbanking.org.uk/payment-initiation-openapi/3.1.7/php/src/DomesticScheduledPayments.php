<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DomesticScheduledPayments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Domestic Scheduled Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsJsonResponse
     */
	public function createDomesticScheduledPaymentConsentsJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-scheduled-payment-consents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "obWriteDomesticScheduledConsent4", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledConsentResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledConsentResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Scheduled Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsRawResponse
     */
	public function createDomesticScheduledPaymentConsentsRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-scheduled-payment-consents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentConsentsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledConsentResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledConsentResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Scheduled Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsJsonResponse
     */
	public function createDomesticScheduledPaymentsJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-scheduled-payments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "obWriteDomesticScheduled2", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Scheduled Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsRawResponse
     */
	public function createDomesticScheduledPaymentsRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-scheduled-payments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticScheduledPaymentsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get Domestic Scheduled Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentConsentsConsentIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentConsentsConsentIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentConsentsConsentIdResponse
     */
	public function getDomesticScheduledPaymentConsentsConsentId(
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentConsentsConsentIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentConsentsConsentIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentConsentsConsentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-scheduled-payment-consents/{ConsentId}', \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentConsentsConsentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentConsentsConsentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledConsentResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledConsentResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get Domestic Scheduled Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentsDomesticScheduledPaymentIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentsDomesticScheduledPaymentIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentsDomesticScheduledPaymentIdResponse
     */
	public function getDomesticScheduledPaymentsDomesticScheduledPaymentId(
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentsDomesticScheduledPaymentIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentsDomesticScheduledPaymentIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentsDomesticScheduledPaymentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-scheduled-payments/{DomesticScheduledPaymentId}', \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentsDomesticScheduledPaymentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomesticScheduledPaymentsDomesticScheduledPaymentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticScheduledResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticScheduledResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
}