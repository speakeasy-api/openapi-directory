// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EventRepeatTypeEnum - The repeat type of the event.
type EventRepeatTypeEnum string

const (
	EventRepeatTypeEnumOnce        EventRepeatTypeEnum = "once"
	EventRepeatTypeEnumDaily       EventRepeatTypeEnum = "daily"
	EventRepeatTypeEnumWeekly      EventRepeatTypeEnum = "weekly"
	EventRepeatTypeEnumFortnightly EventRepeatTypeEnum = "fortnightly"
	EventRepeatTypeEnumMonthly     EventRepeatTypeEnum = "monthly"
	EventRepeatTypeEnumYearly      EventRepeatTypeEnum = "yearly"
	EventRepeatTypeEnumEachWeekday EventRepeatTypeEnum = "each weekday"
)

func (e EventRepeatTypeEnum) ToPointer() *EventRepeatTypeEnum {
	return &e
}

func (e *EventRepeatTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "once":
		fallthrough
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "fortnightly":
		fallthrough
	case "monthly":
		fallthrough
	case "yearly":
		fallthrough
	case "each weekday":
		*e = EventRepeatTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventRepeatTypeEnum: %v", v)
	}
}

// Event - Success
type Event struct {
	// The amount of the event.
	Amount *float64 `json:"amount,omitempty"`
	// The amount of the event in the user's base currency.
	AmountInBaseCurrency *float64  `json:"amount_in_base_currency,omitempty"`
	Category             *Category `json:"category,omitempty"`
	// The CSS hex-style colour of the event.
	Colour *string `json:"colour,omitempty"`
	// The currency code of the event.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// The date of the event.
	Date *string `json:"date,omitempty"`
	// The unique identifier of the event.
	ID *string `json:"id,omitempty"`
	// Whether the event repeats and does not have an end date.
	InfiniteSeries *bool `json:"infinite_series,omitempty"`
	// The note of the event.
	Note *string `json:"note,omitempty"`
	// The repeat interval of how often the event takes place.
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// The repeat type of the event.
	RepeatType *EventRepeatTypeEnum `json:"repeat_type,omitempty"`
	Scenario   *Scenario            `json:"scenario,omitempty"`
	// The unique identifier of the series that the event belongs to.
	SeriesID *int64 `json:"series_id,omitempty"`
	// The unique identifier of the series followed by the series's start date.
	SeriesStartID *string `json:"series_start_id,omitempty"`
}
