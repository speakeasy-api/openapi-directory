/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ConnectionSource - Successful DELETE on ConnectionSource resource
 */
public class ConnectionSource {
    /**
     * Expiration date of the access
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("access_expire")
    public OffsetDateTime accessExpire;
    public ConnectionSource withAccessExpire(OffsetDateTime accessExpire) {
        this.accessExpire = accessExpire;
        return this;
    }
    
    /**
     * Creation date of the connection source
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;
    public ConnectionSource withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    /**
     * This source is not used to synchronize the connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("disabled")
    public OffsetDateTime disabled;
    public ConnectionSource withDisabled(OffsetDateTime disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * Expiration of the connection source. Used to purge the connection in case completion was not finished
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expire")
    public OffsetDateTime expire;
    public ConnectionSource withExpire(OffsetDateTime expire) {
        this.expire = expire;
        return this;
    }
    
    /**
     * ID of connection
     */
    @JsonProperty("id")
    public Long id;
    public ConnectionSource withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the related connection
     */
    @JsonProperty("id_connection")
    public Long idConnection;
    public ConnectionSource withIdConnection(Long idConnection) {
        this.idConnection = idConnection;
        return this;
    }
    
    /**
     * ID of the related connector source
     */
    @JsonProperty("id_connector_source")
    public Long idConnectorSource;
    public ConnectionSource withIdConnectorSource(Long idConnectorSource) {
        this.idConnectorSource = idConnectorSource;
        return this;
    }
    
    /**
     * Last successful update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_update")
    public OffsetDateTime lastUpdate;
    public ConnectionSource withLastUpdate(OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    /**
     * Name of the connection source
     */
    @JsonProperty("name")
    public String name;
    public ConnectionSource withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Date of next synchronization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("next_try")
    public OffsetDateTime nextTry;
    public ConnectionSource withNextTry(OffsetDateTime nextTry) {
        this.nextTry = nextTry;
        return this;
    }
    
    /**
     * If the last update has failed, the state code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;
    public ConnectionSource withState(String state) {
        this.state = state;
        return this;
    }
    
}
