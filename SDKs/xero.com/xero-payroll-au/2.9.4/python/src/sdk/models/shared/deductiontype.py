"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DeductionTypeDeductionCategoryEnum(str, Enum):
    NONE = 'NONE'
    UNIONFEES = 'UNIONFEES'
    WORKPLACEGIVING = 'WORKPLACEGIVING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeductionType:
    
    account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountCode'), 'exclude': lambda f: f is None }})
    r"""See Accounts"""  
    current_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentRecord'), 'exclude': lambda f: f is None }})
    r"""Is the current record"""  
    deduction_category: Optional[DeductionTypeDeductionCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeductionCategory'), 'exclude': lambda f: f is None }})  
    deduction_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeductionTypeID'), 'exclude': lambda f: f is None }})
    r"""Xero identifier"""  
    is_exempt_from_w1: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsExemptFromW1'), 'exclude': lambda f: f is None }})
    r"""Boolean to determine if the deduction type is reportable or exempt from W1"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name of the earnings rate (max length = 100)"""  
    reduces_super: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReducesSuper'), 'exclude': lambda f: f is None }})
    r"""Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this."""  
    reduces_tax: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReducesTax'), 'exclude': lambda f: f is None }})
    r"""Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee."""  
    updated_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDateUTC'), 'exclude': lambda f: f is None }})
    r"""Last modified timestamp"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeductionTypeInput:
    
    account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountCode'), 'exclude': lambda f: f is None }})
    r"""See Accounts"""  
    current_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentRecord'), 'exclude': lambda f: f is None }})
    r"""Is the current record"""  
    deduction_category: Optional[DeductionTypeDeductionCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeductionCategory'), 'exclude': lambda f: f is None }})  
    deduction_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeductionTypeID'), 'exclude': lambda f: f is None }})
    r"""Xero identifier"""  
    is_exempt_from_w1: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsExemptFromW1'), 'exclude': lambda f: f is None }})
    r"""Boolean to determine if the deduction type is reportable or exempt from W1"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name of the earnings rate (max length = 100)"""  
    reduces_super: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReducesSuper'), 'exclude': lambda f: f is None }})
    r"""Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this."""  
    reduces_tax: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReducesTax'), 'exclude': lambda f: f is None }})
    r"""Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee."""  
    