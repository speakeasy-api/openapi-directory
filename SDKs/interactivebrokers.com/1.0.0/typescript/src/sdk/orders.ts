/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Orders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Cancel Order
   *
   * @remarks
   * Cancels the order with the referenced Customer Order ID for the account passed in the URL.
   */
  deleteAccountsAccountOrdersCustomerOrderId(
    req: operations.DeleteAccountsAccountOrdersCustomerOrderIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAccountsAccountOrdersCustomerOrderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteAccountsAccountOrdersCustomerOrderIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{account}/orders/{CustomerOrderId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAccountsAccountOrdersCustomerOrderIdResponse =
        new operations.DeleteAccountsAccountOrdersCustomerOrderIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAccountsAccountOrdersCustomerOrderId200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.deleteAccountsAccountOrdersCustomerOrderId200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteAccountsAccountOrdersCustomerOrderId200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        case [202, 204, 400, 401, 403, 408].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Open Orders
   *
   * @remarks
   * Returns a list of orders for the account passed in the URL
   */
  getAccountsAccountOrders(
    req: operations.GetAccountsAccountOrdersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountsAccountOrdersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountsAccountOrdersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{account}/orders",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountsAccountOrdersResponse =
        new operations.GetAccountsAccountOrdersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderStates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.orderStates = utils.objectToClass(
              httpRes?.data,
              shared.OrderState,
              resFieldDepth
            );
          }
          break;
        case [202, 204, 400, 401, 403, 408].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Return specific order info
   *
   * @remarks
   * Returns the order with the referenced Customer Order ID for the account passed in the URL.
   */
  getAccountsAccountOrdersCustomerOrderId(
    req: operations.GetAccountsAccountOrdersCustomerOrderIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountsAccountOrdersCustomerOrderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountsAccountOrdersCustomerOrderIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{account}/orders/{CustomerOrderId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountsAccountOrdersCustomerOrderIdResponse =
        new operations.GetAccountsAccountOrdersCustomerOrderIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderStates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.orderStates = utils.objectToClass(
              httpRes?.data,
              shared.OrderState,
              resFieldDepth
            );
          }
          break;
        case [202, 204, 400, 401, 403, 408].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Place Order
   *
   * @remarks
   * Places order
   */
  postAccountsAccountOrders(
    req: operations.PostAccountsAccountOrdersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAccountsAccountOrdersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostAccountsAccountOrdersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{account}/orders",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAccountsAccountOrdersResponse =
        new operations.PostAccountsAccountOrdersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderStates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.orderStates = utils.objectToClass(
              httpRes?.data,
              shared.OrderState,
              resFieldDepth
            );
          }
          break;
        case [202, 204, 400, 401, 403, 408].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Modify Order
   *
   * @remarks
   * Allows the caller to modify the order with the referenced Customer Order ID specified in the URL. A separate Customer Order ID must be provided in the request body for the modification.
   */
  putAccountsAccountOrdersCustomerOrderId(
    req: operations.PutAccountsAccountOrdersCustomerOrderIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutAccountsAccountOrdersCustomerOrderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutAccountsAccountOrdersCustomerOrderIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{account}/orders/{CustomerOrderId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutAccountsAccountOrdersCustomerOrderIdResponse =
        new operations.PutAccountsAccountOrdersCustomerOrderIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putAccountsAccountOrdersCustomerOrderId200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.putAccountsAccountOrdersCustomerOrderId200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.PutAccountsAccountOrdersCustomerOrderId200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        case [202, 204, 400, 401, 403, 408].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
