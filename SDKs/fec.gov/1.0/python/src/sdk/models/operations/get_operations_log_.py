"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import operationslogpage as shared_operationslogpage
from datetime import date
from enum import Enum
from typing import Optional

class GetOperationsLogStatusNumEnum(str, Enum):
    ZERO = '0'
    ONE = '1'


@dataclasses.dataclass
class GetOperationsLogRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    amendment_indicator: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'amendment_indicator', 'style': 'form', 'explode': True }})
    r"""Amendent types:
        -N   new
        -A   amendment
        -T   terminated
        -C   consolidated
        -M   multi-candidate
        -S   secondary
    
    NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
    """  
    beginning_image_number: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'beginning_image_number', 'style': 'form', 'explode': True }})
    r"""Unique identifier for the electronic or paper report. This number is used to construct
    PDF URLs to the original document.
    """  
    candidate_committee_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_committee_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier of the registered filer."""  
    form_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'form_type', 'style': 'form', 'explode': True }})
    r"""The form where the underlying data comes from, for example, Form 1 would appear as F1:
        - F1   Statement of Organization
        - F1M  Notification of Multicandidate Status
        - F2   Statement of Candidacy
        - F3   Report of Receipts and Disbursements for an Authorized Committee
        - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
        - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
        - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
        - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
        - F5   Report of Independent Expenditures Made and Contributions Received
        - F6   48 Hour Notice of Contributions/Loans Received
        - F7   Report of Communication Costs by Corporations and Membership Organizations
        - F8   Debt Settlement Plan
        - F9   24 Hour Notice of Disbursements for Electioneering Communications
        - F13  Report of Donations Accepted for Inaugural Committee
        - F99  Miscellaneous Text
        - FRQ  Request for Additional Information
    """  
    max_coverage_end_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_coverage_end_date', 'style': 'form', 'explode': True }})
    r"""Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD)"""  
    max_receipt_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_receipt_date', 'style': 'form', 'explode': True }})
    r"""Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)"""  
    max_transaction_data_complete_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_transaction_data_complete_date', 'style': 'form', 'explode': True }})
    r"""Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_coverage_end_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_coverage_end_date', 'style': 'form', 'explode': True }})
    r"""Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_receipt_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_receipt_date', 'style': 'form', 'explode': True }})
    r"""Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_transaction_data_complete_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_transaction_data_complete_date', 'style': 'form', 'explode': True }})
    r"""Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD)"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    report_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'report_type', 'style': 'form', 'explode': True }})
    r"""Name of report where the underlying data comes from:
        - 10D Pre-Election
        - 10G Pre-General
        - 10P Pre-Primary
        - 10R Pre-Run-Off
        - 10S Pre-Special
        - 12C Pre-Convention
        - 12G Pre-General
        - 12P Pre-Primary
        - 12R Pre-Run-Off
        - 12S Pre-Special
        - 30D Post-Election
        - 30G Post-General
        - 30P Post-Primary
        - 30R Post-Run-Off
        - 30S Post-Special
        - 60D Post-Convention
        - M1  January Monthly
        - M10 October Monthly
        - M11 November Monthly
        - M12 December Monthly
        - M2  February Monthly
        - M3  March Monthly
        - M4  April Monthly
        - M5  May Monthly
        - M6  June Monthly
        - M7  July Monthly
        - M8  August Monthly
        - M9  September Monthly
        - MY  Mid-Year Report
        - Q1  April Quarterly
        - Q2  July Quarterly
        - Q3  October Quarterly
        - TER Termination Report
        - YE  Year-End
        - ADJ COMP ADJUST AMEND
        - CA  COMPREHENSIVE AMEND
        - 90S Post Inaugural Supplement
        - 90D Post Inaugural
        - 48  48 Hour Notification
        - 24  24 Hour Notification
        - M7S July Monthly/Semi-Annual
        - MSA Monthly Semi-Annual (MY)
        - MYS Monthly Year End/Semi-Annual
        - Q2S July Quarterly/Semi-Annual
        - QSA Quarterly Semi-Annual (MY)
        - QYS Quarterly Year End/Semi-Annual
        - QYE Quarterly Semi-Annual (YE)
        - QMS Quarterly Mid-Year/ Semi-Annual
        - MSY Monthly Semi-Annual (YE)
    """  
    report_year: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'report_year', 'style': 'form', 'explode': True }})
    r"""Forms with coverage date -
        year from the coverage ending date.
    Forms without coverage date - 
        year from the receipt date.
    """  
    sort: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order. ex: `-case_no`"""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    status_num: Optional[list[GetOperationsLogStatusNumEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status_num', 'style': 'form', 'explode': True }})
    r"""Status of the transactional report.
        -0- Transaction is entered 
              into the system.
              But not verified.
        -1- Transaction is verified.
    """  
    

@dataclasses.dataclass
class GetOperationsLogResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    operations_log_page: Optional[shared_operationslogpage.OperationsLogPage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    