// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsEventsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// AnalyticsEventsDollarInlinecountEnum - Controls whether or not to include a count of all the items across all pages.
type AnalyticsEventsDollarInlinecountEnum string

const (
	AnalyticsEventsDollarInlinecountEnumAllpages AnalyticsEventsDollarInlinecountEnum = "allpages"
	AnalyticsEventsDollarInlinecountEnumNone     AnalyticsEventsDollarInlinecountEnum = "none"
)

func (e AnalyticsEventsDollarInlinecountEnum) ToPointer() *AnalyticsEventsDollarInlinecountEnum {
	return &e
}

func (e *AnalyticsEventsDollarInlinecountEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allpages":
		fallthrough
	case "none":
		*e = AnalyticsEventsDollarInlinecountEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsEventsDollarInlinecountEnum: %v", v)
	}
}

type AnalyticsEventsRequest struct {
	// Controls whether or not to include a count of all the items across all pages.
	DollarInlinecount *AnalyticsEventsDollarInlinecountEnum `queryParam:"style=form,explode=true,name=$inlinecount"`
	// controls the sorting order and sorting based on which column
	DollarOrderby *string `queryParam:"style=form,explode=true,name=$orderby"`
	// The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
	DollarSkip *int64 `queryParam:"style=form,explode=true,name=$skip"`
	// The maximum number of results to return. (0 will fetch all results)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// To select the specific events.
	EventName []string `queryParam:"style=pipeDelimited,explode=true,name=event_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
	// To select specific application versions
	Versions []string `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

// AnalyticsEventsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsEventsDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsEventsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsEventsDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsEventsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsEventsDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsEventsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsEventsDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsEventsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsEventsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsEventsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsEventsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsEventsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsEventsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsEventsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsEventsDefaultApplicationJSON - Error
type AnalyticsEventsDefaultApplicationJSON struct {
	Error *AnalyticsEventsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsEvents200ApplicationJSONEvents struct {
	Count           *int64   `json:"count,omitempty"`
	CountPerDevice  *float64 `json:"count_per_device,omitempty"`
	CountPerSession *float64 `json:"count_per_session,omitempty"`
	DeviceCount     *int64   `json:"device_count,omitempty"`
	ID              *string  `json:"id,omitempty"`
	Name            *string  `json:"name,omitempty"`
	// The event count of previous time range of the event.
	PreviousCount *int64 `json:"previous_count,omitempty"`
	// The device count of previous time range of the event.
	PreviousDeviceCount *int64 `json:"previous_device_count,omitempty"`
}

// AnalyticsEvents200ApplicationJSON - Count of active events in the time range ordered by event.
type AnalyticsEvents200ApplicationJSON struct {
	Events []AnalyticsEvents200ApplicationJSONEvents `json:"events,omitempty"`
	// The total count of events.
	Total *int64 `json:"total,omitempty"`
	// The active device over this period.
	TotalDevices *int64 `json:"total_devices,omitempty"`
}

type AnalyticsEventsResponse struct {
	// Count of active events in the time range ordered by event.
	AnalyticsEvents200ApplicationJSONObject *AnalyticsEvents200ApplicationJSON
	// Error code with reason.
	AnalyticsEventsDefaultApplicationJSONObject *AnalyticsEventsDefaultApplicationJSON
	ContentType                                 string
	StatusCode                                  int
	RawResponse                                 *http.Response
}
