/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NHItem - A JSON object describing the item.
 */
public class NHItem {
    /**
     * Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availability")
    public NHItemAvailability[] availability;

    public NHItem withAvailability(NHItemAvailability[] availability) {
        this.availability = availability;
        return this;
    }
    
    /**
     * An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buy")
    public NHItemBuy[] buy;

    public NHItem withBuy(NHItemBuy[] buy) {
        this.buy = buy;
        return this;
    }
    
    /**
     * Whether the item is edible or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("edible")
    public Boolean edible;

    public NHItem withEdible(Boolean edible) {
        this.edible = edible;
        return this;
    }
    
    /**
     * The base value that the item provides to a player's Happy Home Academy score when placed in their home.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hha_base")
    public Long hhaBase;

    public NHItem withHhaBase(Long hhaBase) {
        this.hhaBase = hhaBase;
        return this;
    }
    
    /**
     * Image of the interior.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    public String imageUrl;

    public NHItem withImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
        return this;
    }
    
    /**
     * Whether or not the item is a fence or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_fence")
    public Boolean isFence;

    public NHItem withIsFence(Boolean isFence) {
        this.isFence = isFence;
        return this;
    }
    
    /**
     * (WIP)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("material_name_sort")
    public Long materialNameSort;

    public NHItem withMaterialNameSort(Long materialNameSort) {
        this.materialNameSort = materialNameSort;
        return this;
    }
    
    /**
     * (WIP)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("material_seasonality")
    public String materialSeasonality;

    public NHItem withMaterialSeasonality(String materialSeasonality) {
        this.materialSeasonality = materialSeasonality;
        return this;
    }
    
    /**
     * (WIP)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("material_seasonality_sort")
    public Long materialSeasonalitySort;

    public NHItem withMaterialSeasonalitySort(Long materialSeasonalitySort) {
        this.materialSeasonalitySort = materialSeasonalitySort;
        return this;
    }
    
    /**
     * (WIP)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("material_sort")
    public Long materialSort;

    public NHItem withMaterialSort(Long materialSort) {
        this.materialSort = materialSort;
        return this;
    }
    
    /**
     * (WIP)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("material_type")
    public NHItemMaterialTypeEnum materialType;

    public NHItem withMaterialType(NHItemMaterialTypeEnum materialType) {
        this.materialType = materialType;
        return this;
    }
    
    /**
     * The name of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public NHItem withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Any additional miscellaneous information about the item, such as a name change from a past update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public NHItem withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * (WIP)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plant_type")
    public NHItemPlantTypeEnum plantType;

    public NHItem withPlantType(NHItemPlantTypeEnum plantType) {
        this.plantType = plantType;
        return this;
    }
    
    /**
     * The number of bells the item can be sold to Nook's store for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sell")
    public Long sell;

    public NHItem withSell(Long sell) {
        this.sell = sell;
        return this;
    }
    
    /**
     * How much the item can stack up to in a single inventory slot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stack")
    public Long stack;

    public NHItem withStack(Long stack) {
        this.stack = stack;
        return this;
    }
    
    /**
     * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unlocked")
    public Boolean unlocked;

    public NHItem withUnlocked(Boolean unlocked) {
        this.unlocked = unlocked;
        return this;
    }
    
    /**
     * Link to the respective Nookipedia article.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public NHItem withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version_added")
    public String versionAdded;

    public NHItem withVersionAdded(String versionAdded) {
        this.versionAdded = versionAdded;
        return this;
    }
    
    public NHItem(){}
}
