// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AllowedOperationEnum string

const (
	AllowedOperationEnumCreateGrant              AllowedOperationEnum = "CreateGrant"
	AllowedOperationEnumCheckoutLicense          AllowedOperationEnum = "CheckoutLicense"
	AllowedOperationEnumCheckoutBorrowLicense    AllowedOperationEnum = "CheckoutBorrowLicense"
	AllowedOperationEnumCheckInLicense           AllowedOperationEnum = "CheckInLicense"
	AllowedOperationEnumExtendConsumptionLicense AllowedOperationEnum = "ExtendConsumptionLicense"
	AllowedOperationEnumListPurchasedLicenses    AllowedOperationEnum = "ListPurchasedLicenses"
	AllowedOperationEnumCreateToken              AllowedOperationEnum = "CreateToken"
)

func (e AllowedOperationEnum) ToPointer() *AllowedOperationEnum {
	return &e
}

func (e *AllowedOperationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateGrant":
		fallthrough
	case "CheckoutLicense":
		fallthrough
	case "CheckoutBorrowLicense":
		fallthrough
	case "CheckInLicense":
		fallthrough
	case "ExtendConsumptionLicense":
		fallthrough
	case "ListPurchasedLicenses":
		fallthrough
	case "CreateToken":
		*e = AllowedOperationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AllowedOperationEnum: %v", v)
	}
}
