"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Pages:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def blogger_pages_delete(self, request: operations.BloggerPagesDeleteRequest, security: operations.BloggerPagesDeleteSecurity) -> operations.BloggerPagesDeleteResponse:
        r"""Deletes a page by blog id and page id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPagesDeleteRequest, base_url, '/v3/blogs/{blogId}/pages/{pageId}', request)
        
        query_params = utils.get_query_params(operations.BloggerPagesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPagesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def blogger_pages_get(self, request: operations.BloggerPagesGetRequest, security: operations.BloggerPagesGetSecurity) -> operations.BloggerPagesGetResponse:
        r"""Gets a page by blog id and page id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPagesGetRequest, base_url, '/v3/blogs/{blogId}/pages/{pageId}', request)
        
        query_params = utils.get_query_params(operations.BloggerPagesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPagesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out

        return res

    def blogger_pages_insert(self, request: operations.BloggerPagesInsertRequest, security: operations.BloggerPagesInsertSecurity) -> operations.BloggerPagesInsertResponse:
        r"""Inserts a page."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPagesInsertRequest, base_url, '/v3/blogs/{blogId}/pages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "page", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BloggerPagesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPagesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out

        return res

    def blogger_pages_list(self, request: operations.BloggerPagesListRequest, security: operations.BloggerPagesListSecurity) -> operations.BloggerPagesListResponse:
        r"""Lists pages."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPagesListRequest, base_url, '/v3/blogs/{blogId}/pages', request)
        
        query_params = utils.get_query_params(operations.BloggerPagesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPagesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageList])
                res.page_list = out

        return res

    def blogger_pages_patch(self, request: operations.BloggerPagesPatchRequest, security: operations.BloggerPagesPatchSecurity) -> operations.BloggerPagesPatchResponse:
        r"""Patches a page."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPagesPatchRequest, base_url, '/v3/blogs/{blogId}/pages/{pageId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "page", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BloggerPagesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPagesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out

        return res

    def blogger_pages_publish(self, request: operations.BloggerPagesPublishRequest, security: operations.BloggerPagesPublishSecurity) -> operations.BloggerPagesPublishResponse:
        r"""Publishes a page."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPagesPublishRequest, base_url, '/v3/blogs/{blogId}/pages/{pageId}/publish', request)
        
        query_params = utils.get_query_params(operations.BloggerPagesPublishRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPagesPublishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out

        return res

    def blogger_pages_revert(self, request: operations.BloggerPagesRevertRequest, security: operations.BloggerPagesRevertSecurity) -> operations.BloggerPagesRevertResponse:
        r"""Reverts a published or scheduled page to draft state."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPagesRevertRequest, base_url, '/v3/blogs/{blogId}/pages/{pageId}/revert', request)
        
        query_params = utils.get_query_params(operations.BloggerPagesRevertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPagesRevertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out

        return res

    def blogger_pages_update(self, request: operations.BloggerPagesUpdateRequest, security: operations.BloggerPagesUpdateSecurity) -> operations.BloggerPagesUpdateResponse:
        r"""Updates a page by blog id and page id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPagesUpdateRequest, base_url, '/v3/blogs/{blogId}/pages/{pageId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "page", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BloggerPagesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPagesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out

        return res

    