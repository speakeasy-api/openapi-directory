// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ErrorsDeleteErrorSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsDeleteErrorRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The id of the error
	ErrorID string `pathParam:"style=simple,explode=false,name=errorId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnumConflict            ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum) ToPointer() *ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type ErrorsDeleteErrorDefaultApplicationJSONError struct {
	Code    ErrorsDeleteErrorDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                               `json:"message"`
}

// ErrorsDeleteErrorDefaultApplicationJSON - Error code with reason
type ErrorsDeleteErrorDefaultApplicationJSON struct {
	Error ErrorsDeleteErrorDefaultApplicationJSONError `json:"error"`
}

// ErrorsDeleteError200ApplicationJSON - Success.
type ErrorsDeleteError200ApplicationJSON struct {
	AppID              *string `json:"appId,omitempty"`
	AttachmentsDeleted *int64  `json:"attachmentsDeleted,omitempty"`
	BlobsFailed        *int64  `json:"blobsFailed,omitempty"`
	BlobsSucceeded     *int64  `json:"blobsSucceeded,omitempty"`
	ErrorGroupID       *string `json:"errorGroupId,omitempty"`
	ErrorID            *string `json:"errorId,omitempty"`
	ErrorsDeleted      *int64  `json:"errorsDeleted,omitempty"`
}

type ErrorsDeleteErrorResponse struct {
	ContentType string
	// Success.
	ErrorsDeleteError200ApplicationJSONObject *ErrorsDeleteError200ApplicationJSON
	// Error code with reason
	ErrorsDeleteErrorDefaultApplicationJSONObject *ErrorsDeleteErrorDefaultApplicationJSON
	StatusCode                                    int
	RawResponse                                   *http.Response
}
