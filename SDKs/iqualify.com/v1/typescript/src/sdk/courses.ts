/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Courses {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Find courses
   *
   * @remarks
   * Responds with all courses (draft and published.)
   */
  getCourses(
    config?: AxiosRequestConfig
  ): Promise<operations.GetCoursesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/courses";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCoursesResponse =
        new operations.GetCoursesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.courseResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.courseResponses = utils.objectToClass(
              httpRes?.data,
              shared.CourseResponse,
              resFieldDepth
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find course by contentId
   *
   * @remarks
   * Responds with a course matching the contentId.
   */
  getCoursesContentId(
    req: operations.GetCoursesContentIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCoursesContentIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCoursesContentIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/courses/{contentId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCoursesContentIdResponse =
        new operations.GetCoursesContentIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.courseMetaResponse = utils.objectToClass(
              httpRes?.data,
              shared.CourseMetaResponse
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find activations for a contentId
   *
   * @remarks
   * Responds with all activations for the contentId provided.
   */
  getCoursesContentIdActivations(
    req: operations.GetCoursesContentIdActivationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCoursesContentIdActivationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCoursesContentIdActivationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/courses/{contentId}/activations",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCoursesContentIdActivationsResponse =
        new operations.GetCoursesContentIdActivationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.activationResponse = utils.objectToClass(
              httpRes?.data,
              shared.ActivationResponse
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find users who have access to the contentId provided
   *
   * @remarks
   * Responds with users who have access to a specific course by contentId.
   */
  getCoursesContentIdPermissions(
    req: operations.GetCoursesContentIdPermissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCoursesContentIdPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCoursesContentIdPermissionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/courses/{contentId}/permissions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCoursesContentIdPermissionsResponse =
        new operations.GetCoursesContentIdPermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userPermission = utils.objectToClass(
              httpRes?.data,
              shared.UserPermission
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update course access
   *
   * @remarks
   * Provide a user with access to a specific course by rootContentId.
   */
  postCoursesRootContentIdPermissionsUserEmail(
    req: operations.PostCoursesRootContentIdPermissionsUserEmailRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostCoursesRootContentIdPermissionsUserEmailResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostCoursesRootContentIdPermissionsUserEmailRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/courses/{rootContentId}/permissions/{userEmail}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostCoursesRootContentIdPermissionsUserEmailResponse =
        new operations.PostCoursesRootContentIdPermissionsUserEmailResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postCoursesRootContentIdPermissionsUserEmail201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostCoursesRootContentIdPermissionsUserEmail201ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
