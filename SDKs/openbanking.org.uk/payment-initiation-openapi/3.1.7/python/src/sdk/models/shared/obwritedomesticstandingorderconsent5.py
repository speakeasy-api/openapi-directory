"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import obrisk1 as shared_obrisk1
from ..shared import obscasupportdata1 as shared_obscasupportdata1
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class OBWriteDomesticStandingOrderConsent5DataAuthorisationAuthorisationTypeEnum(str, Enum):
    r"""Type of authorisation flow requested."""
    ANY = 'Any'
    SINGLE = 'Single'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5DataAuthorisation:
    r"""The authorisation type request from the TPP."""
    
    authorisation_type: OBWriteDomesticStandingOrderConsent5DataAuthorisationAuthorisationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorisationType') }})
    r"""Type of authorisation flow requested."""  
    completion_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletionDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5DataInitiationCreditorAccount:
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The account name is the name or names of the account owner(s) represented at an account level.
    Note, the account name is not the product name or the nickname of the account.
    OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
    """  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5DataInitiationDebtorAccount:
    r"""Provides the details to identify the debtor account."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
    Note, the account name is not the product name or the nickname of the account.
    """  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5DataInitiationFinalPaymentAmount:
    r"""The amount of the final Standing Order"""
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency') }})
    r"""A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \\"Codes for the representation of currencies and funds\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5DataInitiationFirstPaymentAmount:
    r"""The amount of the first Standing Order"""
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency') }})
    r"""A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \\"Codes for the representation of currencies and funds\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5DataInitiationRecurringPaymentAmount:
    r"""The amount of the recurring Standing Order"""
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency') }})
    r"""A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \\"Codes for the representation of currencies and funds\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5DataInitiation:
    r"""The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order."""
    
    creditor_account: OBWriteDomesticStandingOrderConsent5DataInitiationCreditorAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditorAccount') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    first_payment_amount: OBWriteDomesticStandingOrderConsent5DataInitiationFirstPaymentAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstPaymentAmount') }})
    r"""The amount of the first Standing Order"""  
    first_payment_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstPaymentDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    frequency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Frequency') }})
    r"""Individual Definitions:
    EvryDay - Every day
    EvryWorkgDay - Every working day
    IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
    WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
    IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
    QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
    ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
    SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
    RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
    Individual Patterns:
    EvryDay (ScheduleCode)
    EvryWorkgDay (ScheduleCode)
    IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
    WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
    IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
    QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
    The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
    EvryDay
    EvryWorkgDay
    IntrvlWkDay:0[1-9]:0[1-7]
    WkInMnthDay:0[1-5]:0[1-7]
    IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
    QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
    Full Regular Expression:
    ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
    """  
    debtor_account: Optional[OBWriteDomesticStandingOrderConsent5DataInitiationDebtorAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebtorAccount'), 'exclude': lambda f: f is None }})
    r"""Provides the details to identify the debtor account."""  
    final_payment_amount: Optional[OBWriteDomesticStandingOrderConsent5DataInitiationFinalPaymentAmount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FinalPaymentAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the final Standing Order"""  
    final_payment_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FinalPaymentDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    number_of_payments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfPayments'), 'exclude': lambda f: f is None }})
    r"""Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date."""  
    recurring_payment_amount: Optional[OBWriteDomesticStandingOrderConsent5DataInitiationRecurringPaymentAmount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurringPaymentAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the recurring Standing Order"""  
    recurring_payment_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurringPaymentDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the first recurring payment for a Standing Order schedule will be made.
    Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reference'), 'exclude': lambda f: f is None }})
    r"""Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
    Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
    If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
    """  
    supplementary_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupplementaryData'), 'exclude': lambda f: f is None }})
    r"""Additional information that can not be captured in the structured fields and/or any other specific block."""  
    
class OBWriteDomesticStandingOrderConsent5DataPermissionEnum(str, Enum):
    r"""Specifies the Open Banking service request types."""
    CREATE = 'Create'

class OBWriteDomesticStandingOrderConsent5DataReadRefundAccountEnum(str, Enum):
    r"""Specifies to share the refund account details with PISP"""
    NO = 'No'
    YES = 'Yes'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5Data:
    
    initiation: OBWriteDomesticStandingOrderConsent5DataInitiation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Initiation') }})
    r"""The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order."""  
    permission: OBWriteDomesticStandingOrderConsent5DataPermissionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Permission') }})
    r"""Specifies the Open Banking service request types."""  
    authorisation: Optional[OBWriteDomesticStandingOrderConsent5DataAuthorisation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Authorisation'), 'exclude': lambda f: f is None }})
    r"""The authorisation type request from the TPP."""  
    read_refund_account: Optional[OBWriteDomesticStandingOrderConsent5DataReadRefundAccountEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadRefundAccount'), 'exclude': lambda f: f is None }})
    r"""Specifies to share the refund account details with PISP"""  
    sca_support_data: Optional[shared_obscasupportdata1.OBSCASupportData1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SCASupportData'), 'exclude': lambda f: f is None }})
    r"""Supporting Data provided by TPP, when requesting SCA Exemption."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticStandingOrderConsent5:
    
    data: OBWriteDomesticStandingOrderConsent5Data = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Data') }})  
    risk: shared_obrisk1.OBRisk1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Risk') }})
    r"""The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments."""  
    