"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class RolesByID:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_roles_by_id_role_id_(self, request: operations.DeleteRealmRolesByIDRoleIDRequest) -> operations.DeleteRealmRolesByIDRoleIDResponse:
        r"""Delete the role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmRolesByIDRoleIDRequest, base_url, '/{realm}/roles-by-id/{role-id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmRolesByIDRoleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_roles_by_id_role_id_composites(self, request: operations.DeleteRealmRolesByIDRoleIDCompositesRequest) -> operations.DeleteRealmRolesByIDRoleIDCompositesResponse:
        r"""Remove a set of roles from the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmRolesByIDRoleIDCompositesRequest, base_url, '/{realm}/roles-by-id/{role-id}/composites', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmRolesByIDRoleIDCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_roles_by_id_role_id_(self, request: operations.GetRealmRolesByIDRoleIDRequest) -> operations.GetRealmRolesByIDRoleIDResponse:
        r"""Get a specific role’s representation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesByIDRoleIDRequest, base_url, '/{realm}/roles-by-id/{role-id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesByIDRoleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoleRepresentation])
                res.role_representation = out

        return res

    def get_realm_roles_by_id_role_id_composites(self, request: operations.GetRealmRolesByIDRoleIDCompositesRequest) -> operations.GetRealmRolesByIDRoleIDCompositesResponse:
        r"""Get role’s children   Returns a set of role’s children provided the role is a composite."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesByIDRoleIDCompositesRequest, base_url, '/{realm}/roles-by-id/{role-id}/composites', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesByIDRoleIDCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_roles_by_id_role_id_composites_clients_client_(self, request: operations.GetRealmRolesByIDRoleIDCompositesClientsClientRequest) -> operations.GetRealmRolesByIDRoleIDCompositesClientsClientResponse:
        r"""Get client-level roles for the client that are in the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesByIDRoleIDCompositesClientsClientRequest, base_url, '/{realm}/roles-by-id/{role-id}/composites/clients/{client}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesByIDRoleIDCompositesClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_roles_by_id_role_id_composites_realm(self, request: operations.GetRealmRolesByIDRoleIDCompositesRealmRequest) -> operations.GetRealmRolesByIDRoleIDCompositesRealmResponse:
        r"""Get realm-level roles that are in the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesByIDRoleIDCompositesRealmRequest, base_url, '/{realm}/roles-by-id/{role-id}/composites/realm', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesByIDRoleIDCompositesRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_roles_by_id_role_id_management_permissions(self, request: operations.GetRealmRolesByIDRoleIDManagementPermissionsRequest) -> operations.GetRealmRolesByIDRoleIDManagementPermissionsResponse:
        r"""Return object stating whether role Authoirzation permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesByIDRoleIDManagementPermissionsRequest, base_url, '/{realm}/roles-by-id/{role-id}/management/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesByIDRoleIDManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    def post_realm_roles_by_id_role_id_composites(self, request: operations.PostRealmRolesByIDRoleIDCompositesRequest) -> operations.PostRealmRolesByIDRoleIDCompositesResponse:
        r"""Make the role a composite role by associating some child roles"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmRolesByIDRoleIDCompositesRequest, base_url, '/{realm}/roles-by-id/{role-id}/composites', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmRolesByIDRoleIDCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_roles_by_id_role_id_(self, request: operations.PutRealmRolesByIDRoleIDRequest) -> operations.PutRealmRolesByIDRoleIDResponse:
        r"""Update the role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmRolesByIDRoleIDRequest, base_url, '/{realm}/roles-by-id/{role-id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmRolesByIDRoleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_roles_by_id_role_id_management_permissions(self, request: operations.PutRealmRolesByIDRoleIDManagementPermissionsRequest) -> operations.PutRealmRolesByIDRoleIDManagementPermissionsResponse:
        r"""Return object stating whether role Authoirzation permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmRolesByIDRoleIDManagementPermissionsRequest, base_url, '/{realm}/roles-by-id/{role-id}/management/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "management_permission_reference", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmRolesByIDRoleIDManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    