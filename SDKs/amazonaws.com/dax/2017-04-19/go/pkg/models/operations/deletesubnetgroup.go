// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteSubnetGroupXAmzTargetEnum
type DeleteSubnetGroupXAmzTargetEnum string

const (
	DeleteSubnetGroupXAmzTargetEnumAmazonDaxv3DeleteSubnetGroup DeleteSubnetGroupXAmzTargetEnum = "AmazonDAXV3.DeleteSubnetGroup"
)

func (e *DeleteSubnetGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonDAXV3.DeleteSubnetGroup":
		*e = DeleteSubnetGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteSubnetGroupXAmzTargetEnum: %s", s)
	}
}

type DeleteSubnetGroupRequest struct {
	DeleteSubnetGroupRequest shared.DeleteSubnetGroupRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               DeleteSubnetGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteSubnetGroupResponse struct {
	ContentType string
	// Success
	DeleteSubnetGroupResponse *shared.DeleteSubnetGroupResponse
	StatusCode                int
	RawResponse               *http.Response
	// ServiceLinkedRoleNotFoundFault
	ServiceLinkedRoleNotFoundFault interface{}
	// SubnetGroupInUseFault
	SubnetGroupInUseFault interface{}
	// SubnetGroupNotFoundFault
	SubnetGroupNotFoundFault interface{}
}
