// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeregisterCertificateXAmzTargetEnum
type DeregisterCertificateXAmzTargetEnum string

const (
	DeregisterCertificateXAmzTargetEnumDirectoryService20150416DeregisterCertificate DeregisterCertificateXAmzTargetEnum = "DirectoryService_20150416.DeregisterCertificate"
)

func (e *DeregisterCertificateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DirectoryService_20150416.DeregisterCertificate":
		*e = DeregisterCertificateXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeregisterCertificateXAmzTargetEnum: %s", s)
	}
}

type DeregisterCertificateRequest struct {
	DeregisterCertificateRequest shared.DeregisterCertificateRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256            *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential               *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                     *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken            *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders            *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                   DeregisterCertificateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeregisterCertificateResponse struct {
	// CertificateDoesNotExistException
	CertificateDoesNotExistException interface{}
	// CertificateInUseException
	CertificateInUseException interface{}
	// ClientException
	ClientException interface{}
	ContentType     string
	// Success
	DeregisterCertificateResult map[string]interface{}
	// DirectoryDoesNotExistException
	DirectoryDoesNotExistException interface{}
	// DirectoryUnavailableException
	DirectoryUnavailableException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
