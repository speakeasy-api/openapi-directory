"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VideosTextTracks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_text_track(self, request: operations.CreateTextTrackRequest, security: operations.CreateTextTrackSecurity) -> operations.CreateTextTrackResponse:
        r"""Add a text track to a video
        For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateTextTrackRequest, base_url, '/videos/{video_id}/texttracks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTextTrackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TextTrack])
                res.text_track = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def create_text_track_alt1(self, request: operations.CreateTextTrackAlt1Request, security: operations.CreateTextTrackAlt1Security) -> operations.CreateTextTrackAlt1Response:
        r"""Add a text track to a video
        For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateTextTrackAlt1Request, base_url, '/channels/{channel_id}/videos/{video_id}/texttracks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTextTrackAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TextTrack])
                res.text_track = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_text_track(self, request: operations.DeleteTextTrackRequest, security: operations.DeleteTextTrackSecurity) -> operations.DeleteTextTrackResponse:
        r"""Delete a text track"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTextTrackRequest, base_url, '/videos/{video_id}/texttracks/{texttrack_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTextTrackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def edit_text_track(self, request: operations.EditTextTrackRequest, security: operations.EditTextTrackSecurity) -> operations.EditTextTrackResponse:
        r"""Edit a text track"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditTextTrackRequest, base_url, '/videos/{video_id}/texttracks/{texttrack_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditTextTrackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TextTrack])
                res.text_track = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_text_track(self, request: operations.GetTextTrackRequest) -> operations.GetTextTrackResponse:
        r"""Get a specific text track"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTextTrackRequest, base_url, '/videos/{video_id}/texttracks/{texttrack_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTextTrackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TextTrack])
                res.text_track = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_text_tracks(self, request: operations.GetTextTracksRequest) -> operations.GetTextTracksResponse:
        r"""Get all the text tracks of a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTextTracksRequest, base_url, '/videos/{video_id}/texttracks', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTextTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TextTrack]])
                res.text_tracks = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_text_tracks_alt1(self, request: operations.GetTextTracksAlt1Request) -> operations.GetTextTracksAlt1Response:
        r"""Get all the text tracks of a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTextTracksAlt1Request, base_url, '/channels/{channel_id}/videos/{video_id}/texttracks', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTextTracksAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TextTrack]])
                res.text_tracks = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video.texttrack+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    