"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountaccess as shared_accountaccess
from ..shared import consentstatus_enum as shared_consentstatus_enum
from ..shared import hreftype as shared_hreftype
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentInformationResponse200JSON:
    r"""Body of the JSON response for a successfull get consent request."""
    
    access: shared_accountaccess.AccountAccess = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access') }})
    r"""Requested access services for a consent."""  
    consent_status: shared_consentstatus_enum.ConsentStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentStatus') }})
    r"""This is the overall lifecycle status of the consent.
    
    Valid values are:
      - 'received': The consent data have been received and are technically correct.
        The data is not authorised yet.
      - 'rejected': The consent data have been rejected e.g. since no successful authorisation has taken place.
      - 'valid': The consent is accepted and valid for GET account data calls and others as specified in the consent object.
      - 'revokedByPsu': The consent has been revoked by the PSU towards the ASPSP.
      - 'expired': The consent expired.
      - 'terminatedByTpp': The corresponding TPP has terminated the consent by applying the DELETE method to the consent resource.
      - 'partiallyAuthorised': The consent is due to a multi-level authorisation, some but not all mandated authorisations have been performed yet.
    
    The ASPSP might add further codes. These codes then shall be contained in the ASPSP's documentation of the XS2A interface 
    and has to be added to this API definition as well.
    """  
    frequency_per_day: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequencyPerDay') }})
    r"""This field indicates the requested maximum frequency for an access without PSU involvement per day.
    For a one-off access, this attribute is set to \"1\".
    
    The frequency needs to be greater equal to one.
    
    If not otherwise agreed bilaterally between TPP and ASPSP, the frequency is less equal to 4.
    """  
    last_action_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastActionDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""This date is containing the date of the last action on the consent object either through
    the XS2A interface or the PSU/ASPSP interface having an impact on the status.
    """  
    recurring_indicator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringIndicator') }})
    r"""\\"true\\", if the consent is for recurring access to the account data.
    
    \"false\", if the consent is for one access to the account data.
    """  
    valid_until: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validUntil'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""This parameter is defining a valid until date (including the mentioned date) for the requested consent.
    The content is the local ASPSP date in ISO-Date format, e.g. 2017-10-30.
    
    Future dates might get adjusted by ASPSP. 
    
    If a maximal available date is requested, a date in far future is to be used: \"9999-12-31\". 
    
    In both cases the consent object to be retrieved by the get consent request will contain the adjusted date.
    """  
    links: Optional[dict[str, shared_hreftype.HrefType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})
    r"""A list of hyperlinks to be recognised by the TPP.
    
    Links of type \"account\" and/or \"cardAccount\", depending on the nature of the consent.
    """  
    