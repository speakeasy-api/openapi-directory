"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class UsersAddonsReadRequest:
    
    provider: str = dataclasses.field(metadata={'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the addon provider."""  
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the user."""  
    

@dataclasses.dataclass
class UsersAddonsReadUserAddonAttributes:
    r"""The properties of the user addon entity."""
    
    user_has_auth: bool = dataclasses.field()
    r"""Whether or not the user has access to this user addon."""  
    

@dataclasses.dataclass
class UsersAddonsReadUserAddonLinks:
    r"""URLs to alternative representations of the user addon entity."""
    
    accounts: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""A dictionary with addon_account id as key, an array of connected nodes and link to user account as value"""  
    self_: Optional[str] = dataclasses.field(default=None)
    r"""The canonical API endpoint to this user addon."""  
    

@dataclasses.dataclass
class UsersAddonsReadUserAddon:
    r"""OK"""
    
    attributes: UsersAddonsReadUserAddonAttributes = dataclasses.field()
    r"""The properties of the user addon entity."""  
    id: str = dataclasses.field()
    r"""The unique identifier of the user addon entity."""  
    links: UsersAddonsReadUserAddonLinks = dataclasses.field()
    r"""URLs to alternative representations of the user addon entity."""  
    type: str = dataclasses.field()
    r"""The type identifier of the user addon entity (`user_addons`)."""  
    

@dataclasses.dataclass
class UsersAddonsReadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    