// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteSubnetCidrReservationActionEnum
type GETDeleteSubnetCidrReservationActionEnum string

const (
	GETDeleteSubnetCidrReservationActionEnumDeleteSubnetCidrReservation GETDeleteSubnetCidrReservationActionEnum = "DeleteSubnetCidrReservation"
)

func (e GETDeleteSubnetCidrReservationActionEnum) ToPointer() *GETDeleteSubnetCidrReservationActionEnum {
	return &e
}

func (e *GETDeleteSubnetCidrReservationActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeleteSubnetCidrReservation":
		*e = GETDeleteSubnetCidrReservationActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteSubnetCidrReservationActionEnum: %v", v)
	}
}

// GETDeleteSubnetCidrReservationVersionEnum
type GETDeleteSubnetCidrReservationVersionEnum string

const (
	GETDeleteSubnetCidrReservationVersionEnumTwoThousandAndSixteen1115 GETDeleteSubnetCidrReservationVersionEnum = "2016-11-15"
)

func (e GETDeleteSubnetCidrReservationVersionEnum) ToPointer() *GETDeleteSubnetCidrReservationVersionEnum {
	return &e
}

func (e *GETDeleteSubnetCidrReservationVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDeleteSubnetCidrReservationVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteSubnetCidrReservationVersionEnum: %v", v)
	}
}

type GETDeleteSubnetCidrReservationRequest struct {
	Action GETDeleteSubnetCidrReservationActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the subnet CIDR reservation.
	SubnetCidrReservationID string                                    `queryParam:"style=form,explode=true,name=SubnetCidrReservationId"`
	Version                 GETDeleteSubnetCidrReservationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm           *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteSubnetCidrReservationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
