"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PaymentGatewayReconciliation:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_reconcile_refund(self, request: operations.POSTReconcileRefundRequest) -> operations.POSTReconcileRefundResponse:
        r"""Reconcile a refund
        Reconciles a refund when receiving the gateway reconciliation request or event.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.POSTReconcileRefundRequest, base_url, '/v1/refunds/{refund-id}/reconcile', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "post_reconcile_refund_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTReconcileRefundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.POSTReconcileRefundResponse])
                res.post_reconcile_refund_response = out

        return res

    def post_reject_payment(self, request: operations.POSTRejectPaymentRequest) -> operations.POSTRejectPaymentResponse:
        r"""Reject a payment
        Sets the Payment status to \"Rejected\", creates a refund for the payment amount, and returns the Refund object as response.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.POSTRejectPaymentRequest, base_url, '/v1/gateway-settlement/payments/{payment-id}/reject', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "post_reject_payment_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTRejectPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.POSTRejectPaymentResponse])
                res.post_reject_payment_response = out

        return res

    def post_reverse_payment(self, request: operations.POSTReversePaymentRequest) -> operations.POSTReversePaymentResponse:
        r"""Reverse a payment
        Sets the Payment status to \"Reversed\", creates a refund for the amount specified in the request, and returns the Refund object as response.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.POSTReversePaymentRequest, base_url, '/v1/gateway-settlement/payments/{payment-id}/chargeback', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "post_reverse_payment_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTReversePaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.POSTReversePaymentResponse])
                res.post_reverse_payment_response = out

        return res

    def post_settle_payment(self, request: operations.POSTSettlePaymentRequest) -> operations.POSTSettlePaymentResponse:
        r"""Settle a payment
        Sets the Payment status to \"Settled\" and returns the Payment object as response.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.POSTSettlePaymentRequest, base_url, '/v1/gateway-settlement/payments/{payment-id}/settle', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "post_settle_payment_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTSettlePaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.POSTSettlePaymentResponse])
                res.post_settle_payment_response = out

        return res

    