<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PeriodicPaymentInitiationWithStatusResponse - Generic JSON response body consistion of the corresponding periodic payment initation JSON body together with an optional transaction status field.
 * 
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PeriodicPaymentInitiationWithStatusResponse
{
    /**
     * Reference to an account by either
     * 
     *   * IBAN, of a payment accounts, or
     *   * otherAccountIdentification, for payment accounts if there is no IBAN
     * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AccountReference16CH $creditorAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorAccount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountReference16CH')]
    public AccountReference16CH $creditorAccount;
    
	#[\JMS\Serializer\Annotation\SerializedName('creditorAddress')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $creditorAddress = null;
    
    /**
     * Reference to an creditorAgent by either
     * 
     *   * BIC, of the creditor bank, or
     *   * IID, of the creditor bank, or
     *   * IID and optional name and address of the creditor bank or
     *   * Name and address of the creditor bank
     * adapted from ISO pain.001.001.03.ch.02 FinancialInstitutionIdentification7-CH
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CreditorAgent7CH $creditorAgent
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorAgent')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CreditorAgent7CH')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreditorAgent7CH $creditorAgent = null;
    
    /**
     * Creditor name.
     * 
     * @var string $creditorName
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $creditorName;
    
    /**
     * Day of execution as string.
     * 
     * 
     * This string consists of up two characters.
     * Leading zeroes are not allowed.
     * 
     * 31 is ultimo of the month.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DayOfExecutionEnum $dayOfExecution
     */
	#[\JMS\Serializer\Annotation\SerializedName('dayOfExecution')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DayOfExecutionEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DayOfExecutionEnum $dayOfExecution = null;
    
    /**
     * Reference to an account by either
     * 
     *   * IBAN, of a payment accounts, or
     *   * otherAccountIdentification, for payment accounts if there is no IBAN
     * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AccountReference16CH $debtorAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('debtorAccount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountReference16CH')]
    public AccountReference16CH $debtorAccount;
    
    /**
     * The last applicable day of execution.
     * 
     * If not given, it is an infinite standing order.
     * 
     * 
     * @var ?\DateTime $endDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('endDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $endDate = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('endToEndIdentification')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $endToEndIdentification = null;
    
    /**
     * "following" or "preceding" supported as values.
     * 
     * This data attribute defines the behaviour when recurring payment dates falls on a weekend or bank holiday.
     * The payment is then executed either the "preceding" or "following" working day.
     * ASPSP might reject the request due to the communicated value, if rules in Online-Banking are not supporting
     * this execution rule.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExecutionRuleEnum $executionRule
     */
	#[\JMS\Serializer\Annotation\SerializedName('executionRule')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExecutionRuleEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExecutionRuleEnum $executionRule = null;
    
    /**
     * The following codes from the "EventFrequency7Code" of ISO 20022 are supported:
     * 
     * - "Daily"
     * - "Weekly"
     * - "EveryTwoWeeks"
     * - "Monthly"
     * - "EveryTwoMonths"
     * - "Quarterly"
     * - "SemiAnnual"
     * - "Annual"
     * - "MonthlyVariable"
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\FrequencyCodeEnum $frequency
     */
	#[\JMS\Serializer\Annotation\SerializedName('frequency')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\FrequencyCodeEnum>')]
    public FrequencyCodeEnum $frequency;
    
	#[\JMS\Serializer\Annotation\SerializedName('instructedAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    public Amount $instructedAmount;
    
    /**
     * ExternalPurpose1Code from ISO 20022.
     * 
     * 
     * Values from ISO 20022 External Code List ExternalCodeSets_1Q2018 June 2018.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PurposeCodeEnum $purposeCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('purposeCode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PurposeCodeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PurposeCodeEnum $purposeCode = null;
    
    /**
     * Structured remittance information.
     * 
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RemittanceInformationStructured $remittanceInformationStructured
     */
	#[\JMS\Serializer\Annotation\SerializedName('remittanceInformationStructured')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RemittanceInformationStructured')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RemittanceInformationStructured $remittanceInformationStructured = null;
    
    /**
     * Unstructured remittance information.
     * 
     * 
     * 
     * @var ?string $remittanceInformationUnstructured
     */
	#[\JMS\Serializer\Annotation\SerializedName('remittanceInformationUnstructured')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $remittanceInformationUnstructured = null;
    
    /**
     * Array of unstructured remittance information.
     * 
     * 
     * 
     * @var ?array<string> $remittanceInformationUnstructuredArray
     */
	#[\JMS\Serializer\Annotation\SerializedName('remittanceInformationUnstructuredArray')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $remittanceInformationUnstructuredArray = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('requestedExecutionDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $requestedExecutionDate = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('requestedExecutionTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $requestedExecutionTime = null;
    
    /**
     * The first applicable day of execution starting from this date is the first payment.
     * 
     * 
     * 
     * @var \DateTime $startDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('startDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $startDate;
    
    /**
     * The transaction status is filled with codes of the ISO 20022 data table:
     * 
     * - 'ACCC': 'AcceptedSettlementCompleted' -
     *   Settlement on the creditor's account has been completed.
     * - 'ACCP': 'AcceptedCustomerProfile' -
     *   Preceding check of technical validation was successful.
     *   Customer profile check was also successful.
     * - 'ACSC': 'AcceptedSettlementCompleted' -
     *   Settlement on the debtoro?=s account has been completed.
     * 
     *   **Usage:** this can be used by the first agent to report to the debtor that the transaction has been completed.
     * 
     *   **Warning:** this status is provided for transaction status reasons, not for financial information.
     *   It can only be used after bilateral agreement.
     * - 'ACSP': 'AcceptedSettlementInProcess' -
     *   All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.
     * - 'ACTC': 'AcceptedTechnicalValidation' -
     *   Authentication and syntactical and semantical validation are successful.
     * - 'ACWC': 'AcceptedWithChange' -
     *   Instruction is accepted but a change will be made, such as date or remittance not sent.
     * - 'ACWP': 'AcceptedWithoutPosting' -
     *   Payment instruction included in the credit transfer is accepted without being posted to the creditor customero?=s account.
     * - 'RCVD': 'Received' -
     *   Payment initiation has been received by the receiving agent.
     * - 'PDNG': 'Pending' -
     *   Payment initiation or individual transaction included in the payment initiation is pending.
     *   Further checks and status update will be performed.
     * - 'RJCT': 'Rejected' -
     *   Payment initiation or individual transaction included in the payment initiation has been rejected.
     * - 'CANC': 'Cancelled'
     *   Payment initiation has been cancelled before execution
     *   Remark: This codeis accepted as new code by ISO20022.
     * - 'ACFC': 'AcceptedFundsChecked' -
     *   Preceding check of technical validation and customer profile was successful and an automatic funds check was positive .
     *   Remark: This code is accepted as new code by ISO20022.
     * - 'PATC': 'PartiallyAcceptedTechnical'
     *   Correct The payment initiation needs multiple authentications, where some but not yet all have been performed. Syntactical and semantical validations are successful.
     *   Remark: This code is accepted as new code by ISO20022.
     * - 'PART': 'PartiallyAccepted' -
     *   A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status.
     *   Remark: This code may be used only in case of bulk payments. It is only used in a situation where all mandated authorisations have been applied, but some payments have been rejected.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionStatusEnum $transactionStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionStatus')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TransactionStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionStatusEnum $transactionStatus = null;
    
    /**
     * Ultimate creditor.
     * 
     * @var ?string $ultimateCreditor
     */
	#[\JMS\Serializer\Annotation\SerializedName('ultimateCreditor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ultimateCreditor = null;
    
    /**
     * Ultimate debtor.
     * 
     * @var ?string $ultimateDebtor
     */
	#[\JMS\Serializer\Annotation\SerializedName('ultimateDebtor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ultimateDebtor = null;
    
	public function __construct()
	{
		$this->creditorAccount = new \OpenAPI\OpenAPI\Models\Shared\AccountReference16CH();
		$this->creditorAddress = null;
		$this->creditorAgent = null;
		$this->creditorName = "";
		$this->dayOfExecution = null;
		$this->debtorAccount = new \OpenAPI\OpenAPI\Models\Shared\AccountReference16CH();
		$this->endDate = null;
		$this->endToEndIdentification = null;
		$this->executionRule = null;
		$this->frequency = \OpenAPI\OpenAPI\Models\Shared\FrequencyCodeEnum::DAILY;
		$this->instructedAmount = new \OpenAPI\OpenAPI\Models\Shared\Amount();
		$this->purposeCode = null;
		$this->remittanceInformationStructured = null;
		$this->remittanceInformationUnstructured = null;
		$this->remittanceInformationUnstructuredArray = null;
		$this->requestedExecutionDate = null;
		$this->requestedExecutionTime = null;
		$this->startDate = new \DateTime();
		$this->transactionStatus = null;
		$this->ultimateCreditor = null;
		$this->ultimateDebtor = null;
	}
}
