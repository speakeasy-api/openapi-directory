/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get the ContainerThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetContainerThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateContainerThreatDetectionSettings for this purpose.
   */
  securitycenterProjectsLocationsClustersGetContainerThreatDetectionSettings(
    req: operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest,
    security: operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsResponse =
        new operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.containerThreatDetectionSettings = utils.objectToClass(
              httpRes?.data,
              shared.ContainerThreatDetectionSettings
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the ContainerThreatDetectionSettings resource.
   */
  securitycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettings(
    req: operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest,
    security: operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta2/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "containerThreatDetectionSettingsInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsResponse =
        new operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.containerThreatDetectionSettings = utils.objectToClass(
              httpRes?.data,
              shared.ContainerThreatDetectionSettings
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail.
   */
  securitycenterProjectsWebSecurityScannerSettingsCalculate(
    req: operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest,
    security: operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{name}:calculate",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateResponse =
        new operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webSecurityScannerSettings = utils.objectToClass(
              httpRes?.data,
              shared.WebSecurityScannerSettings
            );
          }
          break;
      }

      return res;
    });
  }
}
