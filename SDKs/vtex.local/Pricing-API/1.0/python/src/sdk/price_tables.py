"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PriceTables:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def getrulesforapricetable(self, request: operations.GetrulesforapricetableRequest, server_url: Optional[str] = None) -> operations.GetrulesforapricetableResponse:
        r"""Get rules for a price table
        This method will retrieve the rules from a specific Price Table.
        
        ## Response body example
        
        ```json
        {
            \"tradePolicyId\": \"b2c\",
            \"rules\": [{
                \"id\": 0,
                \"context\": {
                    \"categories\": {},
                    \"brands\": {
                        \"2000009\": \"Whiskas\"
                    },
                    \"stockStatuses\": null,
                    \"internalCategories\": null,
                    \"markupRange\": null,
                    \"dateRange\": null
                },
                \"percentualModifier\": 15
            }]
        }
        ```
        """
        base_url = operations.GETRULESFORAPRICETABLE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.GetrulesforapricetableRequest, base_url, '/pricing/pipeline/catalog/{priceTableId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetrulesforapricetableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Getrulesforapricetable200ApplicationJSON])
                res.getrulesforapricetable_200_application_json_object = out
        elif http_res.status_code in [401, 403, 429]:
            pass

        return res

    def listpricetables(self, request: operations.ListpricetablesRequest, server_url: Optional[str] = None) -> operations.ListpricetablesResponse:
        r"""List price tables
        This method will list all price tables.
        
        ## Response body example
        
        ```json
        [
            \"1\",
            \"2\",
            \"3\",
            \"b2c\",
            \"b2b\",
            \"gold\"
        ]
        ```
        """
        base_url = operations.LISTPRICETABLES_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/pricing/tables'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListpricetablesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.listpricetables_200_application_json_strings = out

        return res

    def getallpricetablesandrules(self, request: operations.GetallpricetablesandrulesRequest, server_url: Optional[str] = None) -> operations.GetallpricetablesandrulesResponse:
        r"""Get all price tables and their rules
        This method will retrieve all price tables and their rules.
        
        ## Response body example
        
        ```json
        [
            {
                \"tradePolicyId\": \"2\",
                \"rules\": [
                    {
                        \"id\": 0,
                        \"context\": {
                            \"categories\": {},
                            \"brands\": {},
                            \"stockStatuses\": null,
                            \"internalCategories\": null,
                            \"markupRange\": null,
                            \"dateRange\": null
                        },
                        \"percentualModifier\": 20
                    }
                ]
            },
            {
                \"tradePolicyId\": \"b2c\",
                \"rules\": [
                    {
                        \"id\": 0,
                        \"context\": {
                            \"categories\": {},
                            \"brands\": {
                                \"2000009\": \"Whiskas\"
                            },
                            \"stockStatuses\": null,
                            \"internalCategories\": null,
                            \"markupRange\": null,
                            \"dateRange\": null
                        },
                        \"percentualModifier\": 15
                    }
                ]
            }
        ]
        ```
        """
        base_url = operations.GETALLPRICETABLESANDRULES_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/pricing/pipeline/catalog'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetallpricetablesandrulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.Getallpricetablesandrules200ApplicationJSON]])
                res.getallpricetablesandrules_200_application_json_objects = out

        return res

    def put_pricing_pipeline_catalog_price_table_id_(self, request: operations.PutPricingPipelineCatalogPriceTableIDRequest) -> operations.PutPricingPipelineCatalogPriceTableIDResponse:
        r"""Update rules for a price table
        This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.
        
        ## Request body example
        
        ```json
        {
            \"rules\": [
                  {
                       \"id\": 1,
                       \"context\": {
                            \"categories\": {
                                 \"Category ID\": \"1\",
                                 \"Category Name\": \"Alimentação\"
                            },
                            \"brands\": {
                                 \"Brand ID\": \"2000002\",
                                 \"Brand Name\": \"Whiskas\"
                            },
                            \"markupRange\": {
                                 \"from\": 0,
                                 \"to\": 200
                            },
                            \"dateRange\": {
                                 \"from\": \"2022-01-23T19:00:00.000Z\",
                                 \"to\": \"2023-10-26T00:00:00.000Z\"
                            }
                       },
                       \"percentualModifier\": 0
                  }
            ]
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPricingPipelineCatalogPriceTableIDRequest, base_url, '/pricing/pipeline/catalog/{priceTableId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPricingPipelineCatalogPriceTableIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    