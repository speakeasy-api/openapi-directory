/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { KeyView } from "./keyview";
import { Expose, Transform, Type } from "class-transformer";

export class SubscriptionView extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action: string;

  @SpeakeasyMetadata()
  @Expose({ name: "callbackOnModify" })
  callbackOnModify: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "callbackUrl" })
  callbackUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commenced" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  commenced: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "custom" })
  custom?: any;

  @SpeakeasyMetadata()
  @Expose({ name: "frequency" })
  frequency: string;

  @SpeakeasyMetadata({ elemType: KeyView })
  @Expose({ name: "keys" })
  @Type(() => KeyView)
  keys?: KeyView[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updated?: Date;
}
