"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import reference as shared_reference
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class FieldDataTypeEnum(str, Enum):
    r"""The data type of the Field."""
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    INT = 'INT'
    SMALLINT = 'SMALLINT'
    DOUBLE = 'DOUBLE'
    DATE = 'DATE'
    DATETIME = 'DATETIME'
    TIME = 'TIME'
    STRING = 'STRING'
    LONG = 'LONG'
    BOOLEAN = 'BOOLEAN'
    DECIMAL = 'DECIMAL'
    UUID = 'UUID'
    BLOB = 'BLOB'
    BIT = 'BIT'
    TINYINT = 'TINYINT'
    INTEGER = 'INTEGER'
    BIGINT = 'BIGINT'
    FLOAT = 'FLOAT'
    REAL = 'REAL'
    NUMERIC = 'NUMERIC'
    CHAR = 'CHAR'
    VARCHAR = 'VARCHAR'
    LONGVARCHAR = 'LONGVARCHAR'
    TIMESTAMP = 'TIMESTAMP'
    NCHAR = 'NCHAR'
    NVARCHAR = 'NVARCHAR'
    LONGNVARCHAR = 'LONGNVARCHAR'
    NULL = 'NULL'
    OTHER = 'OTHER'
    JAVA_OBJECT = 'JAVA_OBJECT'
    DISTINCT = 'DISTINCT'
    STRUCT = 'STRUCT'
    ARRAY = 'ARRAY'
    CLOB = 'CLOB'
    REF = 'REF'
    DATALINK = 'DATALINK'
    ROWID = 'ROWID'
    BINARY = 'BINARY'
    VARBINARY = 'VARBINARY'
    LONGVARBINARY = 'LONGVARBINARY'
    NCLOB = 'NCLOB'
    SQLXML = 'SQLXML'
    REF_CURSOR = 'REF_CURSOR'
    TIME_WITH_TIMEZONE = 'TIME_WITH_TIMEZONE'
    TIMESTAMP_WITH_TIMEZONE = 'TIMESTAMP_WITH_TIMEZONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Field:
    r"""Message contains EntityType's Field metadata."""
    
    additional_details: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalDetails'), 'exclude': lambda f: f is None }})
    r"""The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields."""  
    data_type: Optional[FieldDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType'), 'exclude': lambda f: f is None }})
    r"""The data type of the Field."""  
    default_value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValue'), 'exclude': lambda f: f is None }})
    r"""The following field specifies the default value of the Field provided by the external system if a value is not provided."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A brief description of the Field."""  
    key: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the Field."""  
    nullable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nullable'), 'exclude': lambda f: f is None }})
    r"""Specifies whether a null value is allowed."""  
    reference: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})  
    