"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import connectoroperator as shared_connectoroperator
from ..shared import tasktype_enum as shared_tasktype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Task:
    r"""A class for modeling different type of tasks. Task implementation varies based on the <code>TaskType</code>."""
    
    source_fields: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceFields') }})  
    task_type: shared_tasktype_enum.TaskTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskType') }})  
    connector_operator: Optional[shared_connectoroperator.ConnectorOperator] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorOperator'), 'exclude': lambda f: f is None }})  
    destination_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationField'), 'exclude': lambda f: f is None }})  
    task_properties: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskProperties'), 'exclude': lambda f: f is None }})  
    