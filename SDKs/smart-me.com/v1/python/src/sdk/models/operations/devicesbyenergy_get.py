"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import device as shared_device
from enum import Enum
from typing import Optional

class DevicesByEnergyGetMeterEnergyTypeEnum(str, Enum):
    METER_TYPE_UNKNOWN = 'MeterTypeUnknown'
    METER_TYPE_ELECTRICITY = 'MeterTypeElectricity'
    METER_TYPE_WATER = 'MeterTypeWater'
    METER_TYPE_GAS = 'MeterTypeGas'
    METER_TYPE_HEAT = 'MeterTypeHeat'
    METER_TYPE_HCA = 'MeterTypeHCA'
    METER_TYPE_ALL_METERS = 'MeterTypeAllMeters'
    METER_TYPE_TEMPERATURE = 'MeterTypeTemperature'
    METER_TYPE_M_BUS_GATEWAY = 'MeterTypeMBusGateway'
    METER_TYPE_RS485_GATEWAY = 'MeterTypeRS485Gateway'
    METER_TYPE_CUSTOM_DEVICE = 'MeterTypeCustomDevice'
    METER_TYPE_COMPRESSED_AIR = 'MeterTypeCompressedAir'
    METER_TYPE_SOLAR_LOG = 'MeterTypeSolarLog'
    METER_TYPE_VIRTUAL_METER = 'MeterTypeVirtualMeter'
    METER_TYPE_WM_BUS_GATEWAY = 'MeterTypeWMBusGateway'


@dataclasses.dataclass
class DevicesByEnergyGetRequest:
    
    meter_energy_type: DevicesByEnergyGetMeterEnergyTypeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'meterEnergyType', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class DevicesByEnergyGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    devices: Optional[list[shared_device.Device]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    