// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetConnectionsXAmzTargetEnum
type GetConnectionsXAmzTargetEnum string

const (
	GetConnectionsXAmzTargetEnumAwsGlueGetConnections GetConnectionsXAmzTargetEnum = "AWSGlue.GetConnections"
)

func (e GetConnectionsXAmzTargetEnum) ToPointer() *GetConnectionsXAmzTargetEnum {
	return &e
}

func (e *GetConnectionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSGlue.GetConnections":
		*e = GetConnectionsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionsXAmzTargetEnum: %v", v)
	}
}

type GetConnectionsRequest struct {
	GetConnectionsRequest shared.GetConnectionsRequest `request:"mediaType=application/json"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                      `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetConnectionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetConnectionsResponse struct {
	ContentType string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// Success
	GetConnectionsResponse *shared.GetConnectionsResponse
	// GlueEncryptionException
	GlueEncryptionException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
