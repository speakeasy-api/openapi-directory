<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Qshow 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a qshow.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQshowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQshowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteQshowResponse
     */
	public function deleteQshow(
        \OpenAPI\OpenAPI\Models\Operations\DeleteQshowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteQshowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteQshowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qshow');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteQshowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteQshowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Gets a details about a qshow.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQshowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQshowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQshowResponse
     */
	public function getQshow(
        \OpenAPI\OpenAPI\Models\Operations\GetQshowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQshowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQshowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qshow');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQshowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQshowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get the list of Qshows in They Said So platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQshowListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQshowListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQshowListResponse
     */
	public function getQshowList(
        \OpenAPI\OpenAPI\Models\Operations\GetQshowListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQshowListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQshowListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qshow/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQshowListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQshowListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get the quotes in a given Qshow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQshowQuotesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQshowQuotesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQshowQuotesResponse
     */
	public function getQshowQuotes(
        \OpenAPI\OpenAPI\Models\Operations\GetQshowQuotesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQshowQuotesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQshowQuotesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qshow/quotes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQshowQuotesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQshowQuotesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update an existing qshow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchQshowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchQshowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchQshowResponse
     */
	public function patchQshow(
        \OpenAPI\OpenAPI\Models\Operations\PatchQshowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchQshowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchQshowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qshow');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchQshowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchQshowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Add a quote to a given Qshow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesAddResponse
     */
	public function postQshowQuotesAdd(
        \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qshow/quotes/add');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesAddRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove a quote to a given Qshow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesRemoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesRemoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesRemoveResponse
     */
	public function postQshowQuotesRemove(
        \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesRemoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesRemoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qshow/quotes/remove');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesRemoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQshowQuotesRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create and add a new qshow to your private collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutQshowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutQshowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutQshowResponse
     */
	public function putQshow(
        \OpenAPI\OpenAPI\Models\Operations\PutQshowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutQshowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutQshowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qshow');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutQshowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutQshowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}