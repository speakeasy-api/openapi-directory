/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Jobs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a job and returns it.
   */
  youtubereportingJobsCreate(
    req: operations.YoutubereportingJobsCreateRequest,
    security: operations.YoutubereportingJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubereportingJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubereportingJobsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/jobs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "job",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubereportingJobsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubereportingJobsCreateResponse =
        new operations.YoutubereportingJobsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a job.
   */
  youtubereportingJobsDelete(
    req: operations.YoutubereportingJobsDeleteRequest,
    security: operations.YoutubereportingJobsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubereportingJobsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubereportingJobsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/jobs/{jobId}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubereportingJobsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubereportingJobsDeleteResponse =
        new operations.YoutubereportingJobsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a job.
   */
  youtubereportingJobsGet(
    req: operations.YoutubereportingJobsGetRequest,
    security: operations.YoutubereportingJobsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubereportingJobsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubereportingJobsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/jobs/{jobId}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubereportingJobsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubereportingJobsGetResponse =
        new operations.YoutubereportingJobsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists jobs.
   */
  youtubereportingJobsList(
    req: operations.YoutubereportingJobsListRequest,
    security: operations.YoutubereportingJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubereportingJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubereportingJobsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/jobs";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubereportingJobsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubereportingJobsListResponse =
        new operations.YoutubereportingJobsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the metadata of a specific report.
   */
  youtubereportingJobsReportsGet(
    req: operations.YoutubereportingJobsReportsGetRequest,
    security: operations.YoutubereportingJobsReportsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubereportingJobsReportsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubereportingJobsReportsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/jobs/{jobId}/reports/{reportId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubereportingJobsReportsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubereportingJobsReportsGetResponse =
        new operations.YoutubereportingJobsReportsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.report = utils.objectToClass(httpRes?.data, shared.Report);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists reports created by a specific job. Returns NOT_FOUND if the job does not exist.
   */
  youtubereportingJobsReportsList(
    req: operations.YoutubereportingJobsReportsListRequest,
    security: operations.YoutubereportingJobsReportsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubereportingJobsReportsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubereportingJobsReportsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/jobs/{jobId}/reports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubereportingJobsReportsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubereportingJobsReportsListResponse =
        new operations.YoutubereportingJobsReportsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReportsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListReportsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
