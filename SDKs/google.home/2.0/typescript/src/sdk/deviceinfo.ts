/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints in this folder give information about the device.
 */
export class DeviceInfo {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * App Device ID
   *
   * @remarks
   * This gives "app device id", "certificate" and "signed data".
   * The `app_id` in the request is mandatory and refers to Chromecast backdrop/screensaver app. It has to be set to `E8C28D3C`.
   *
   * The certificate is valid and issued by `Chromecast ICA 6 (Audio Assist), Google Inc`.
   *
   * Not sure what the other two are.
   */
  appDeviceID(
    req: shared.AppDeviceIDRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppDeviceIDResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.AppDeviceIDRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/get_app_device_id";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppDeviceIDResponse =
        new operations.AppDeviceIDResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example11 = utils.objectToClass(
              httpRes?.data,
              shared.Example11
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Check Ready Status
   *
   * @remarks
   * **Update:** This seems to have changed now and is no longer possible. The error is also new.
   *
   * Setting `play_ready_message` to true plays a welcome message on the device saying "Hi, I'm your Google Assistant. I'm here to help. To learn a few things you can do, continue in the Google Home app."
   */
  checkReadyStatus(
    req: shared.CheckReadyStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CheckReadyStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CheckReadyStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/assistant/check_ready_status";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckReadyStatusResponse =
        new operations.CheckReadyStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example13 = utils.objectToClass(
              httpRes?.data,
              shared.Example13
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Eureka Info
   *
   * @remarks
   * This gives most of the device info. The GET parameter `param` is a comma separated list of json keys to fetch. Currently, these params are known: `version,audio,name,build_info,detail,device_info,net,wifi,setup,settings,opt_in,opencast,multizone,proxy,night_mode_params,user_eq,room_equalizer,sign,aogh,ultrasound,mesh`
   *
   * Nested items can also be filtered using the dot notation. Example: `audio.digital`
   *
   * The `options` GET parameter is always set to `detail` or `detail,sign`. `sign` signs the `nonce` and returns some value.
   *
   * The `nonce` GET parameter is an integer value signed with needed (see `option` parameter above).
   */
  eurekaInfo(
    req: operations.EurekaInfoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EurekaInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EurekaInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/eureka_info";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EurekaInfoResponse =
        new operations.EurekaInfoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example1 = utils.objectToClass(httpRes?.data, shared.Example1);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Locales
   *
   * @remarks
   * Simply returns a list of all supported locales.
   */
  locales(config?: AxiosRequestConfig): Promise<operations.LocalesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/supported_locales";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocalesResponse = new operations.LocalesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example15s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.example15s = utils.objectToClass(
              httpRes?.data,
              shared.Example15,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Offer
   *
   * @remarks
   * This gives a token which is used by the Home app to get offers. The offers themselves are not stored on the device.
   * A new token is generated for every request.
   */
  offer(config?: AxiosRequestConfig): Promise<operations.OfferResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/offer";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OfferResponse = new operations.OfferResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example12 = utils.objectToClass(
              httpRes?.data,
              shared.Example12
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Test Internet Download Speed
   *
   * @remarks
   * **Update:** This seems to have been removed. Returns 404 Not Found.
   *
   * This endpoint tests internet download speed. Any sample file URL can be provided.
   */
  testInternetDownloadSpeed(
    req: shared.TestInternetDownloadSpeedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestInternetDownloadSpeedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.TestInternetDownloadSpeedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/test_internet_download_speed";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestInternetDownloadSpeedResponse =
        new operations.TestInternetDownloadSpeedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example16 = utils.objectToClass(
              httpRes?.data,
              shared.Example16
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Timezones
   *
   * @remarks
   * Simply returns a list of all supported timezones.
   */
  timezones(
    config?: AxiosRequestConfig
  ): Promise<operations.TimezonesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/supported_timezones";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TimezonesResponse =
        new operations.TimezonesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example14s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.example14s = utils.objectToClass(
              httpRes?.data,
              shared.Example14,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
