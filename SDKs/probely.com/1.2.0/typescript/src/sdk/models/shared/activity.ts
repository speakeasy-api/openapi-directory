/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChangedBy } from "./changedby";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Type of change:
 *
 * @remarks
 *   * created - First time the issue is found
 *   * comment - User left a comment in the timeline
 *   * found - Found again in a later scan
 *   * changed - One of the parameters of the finding was changed
 *    (e.g. severity)
 *
 */
export enum ActivityChangeEnum {
  Created = "created",
  Comment = "comment",
  Found = "found",
  Changed = "changed",
}

export class Activity extends SpeakeasyBase {
  /**
   * Type of change:
   *
   * @remarks
   *   * created - First time the issue is found
   *   * comment - User left a comment in the timeline
   *   * found - Found again in a later scan
   *   * changed - One of the parameters of the finding was changed
   *    (e.g. severity)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "change" })
  change?: ActivityChangeEnum;

  /**
   * Date time of the last change
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  changed?: Date;

  /**
   * User that last modified the object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed_by" })
  @Type(() => ChangedBy)
  changedBy?: ChangedBy;

  /**
   * Field that was changed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  /**
   * Previous value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "old_value" })
  oldValue?: string;

  /**
   * New value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}
