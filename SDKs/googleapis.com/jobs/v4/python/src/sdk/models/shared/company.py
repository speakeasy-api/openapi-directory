"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import companyderivedinfo as shared_companyderivedinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CompanySizeEnum(str, Enum):
    r"""The employer's company size."""
    COMPANY_SIZE_UNSPECIFIED = 'COMPANY_SIZE_UNSPECIFIED'
    MINI = 'MINI'
    SMALL = 'SMALL'
    SMEDIUM = 'SMEDIUM'
    MEDIUM = 'MEDIUM'
    BIG = 'BIG'
    BIGGER = 'BIGGER'
    GIANT = 'GIANT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Company:
    r"""A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position."""
    
    career_site_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('careerSiteUri'), 'exclude': lambda f: f is None }})
    r"""The URI to employer's career site or careers page on the employer's web site, for example, \\"https://careers.google.com\\"."""  
    derived_info: Optional[shared_companyderivedinfo.CompanyDerivedInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('derivedInfo'), 'exclude': lambda f: f is None }})
    r"""Derived details about the company."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the company, for example, \\"Google LLC\\"."""  
    eeo_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eeoText'), 'exclude': lambda f: f is None }})
    r"""Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500."""  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalId'), 'exclude': lambda f: f is None }})
    r"""Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255."""  
    headquarters_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headquartersAddress'), 'exclude': lambda f: f is None }})
    r"""The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location."""  
    hiring_agency: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiringAgency'), 'exclude': lambda f: f is None }})
    r"""Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided."""  
    image_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUri'), 'exclude': lambda f: f is None }})
    r"""A URI that hosts the employer's company logo."""  
    keyword_searchable_job_custom_attributes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywordSearchableJobCustomAttributes'), 'exclude': lambda f: f is None }})
    r"""This field is deprecated. Please set the searchability of the custom attribute in the Job.custom_attributes going forward. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword searches. Jobs with `string_values` under these specified field keys are returned if any of the values match the search keyword. Custom field values with parenthesis, brackets and special symbols are not searchable as-is, and those keyword queries must be surrounded by quotes."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \\"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\\", for example, \\"projects/foo/tenants/bar/companies/baz\\"."""  
    size: Optional[CompanySizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The employer's company size."""  
    suspended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy."""  
    website_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websiteUri'), 'exclude': lambda f: f is None }})
    r"""The URI representing the company's primary web site or home page, for example, \\"https://www.google.com\\". The maximum number of allowed characters is 255."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompanyInput:
    r"""A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position."""
    
    career_site_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('careerSiteUri'), 'exclude': lambda f: f is None }})
    r"""The URI to employer's career site or careers page on the employer's web site, for example, \\"https://careers.google.com\\"."""  
    derived_info: Optional[shared_companyderivedinfo.CompanyDerivedInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('derivedInfo'), 'exclude': lambda f: f is None }})
    r"""Derived details about the company."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the company, for example, \\"Google LLC\\"."""  
    eeo_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eeoText'), 'exclude': lambda f: f is None }})
    r"""Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500."""  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalId'), 'exclude': lambda f: f is None }})
    r"""Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255."""  
    headquarters_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headquartersAddress'), 'exclude': lambda f: f is None }})
    r"""The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location."""  
    hiring_agency: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiringAgency'), 'exclude': lambda f: f is None }})
    r"""Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided."""  
    image_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUri'), 'exclude': lambda f: f is None }})
    r"""A URI that hosts the employer's company logo."""  
    keyword_searchable_job_custom_attributes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywordSearchableJobCustomAttributes'), 'exclude': lambda f: f is None }})
    r"""This field is deprecated. Please set the searchability of the custom attribute in the Job.custom_attributes going forward. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword searches. Jobs with `string_values` under these specified field keys are returned if any of the values match the search keyword. Custom field values with parenthesis, brackets and special symbols are not searchable as-is, and those keyword queries must be surrounded by quotes."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \\"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\\", for example, \\"projects/foo/tenants/bar/companies/baz\\"."""  
    size: Optional[CompanySizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The employer's company size."""  
    website_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websiteUri'), 'exclude': lambda f: f is None }})
    r"""The URI representing the company's primary web site or home page, for example, \\"https://www.google.com\\". The maximum number of allowed characters is 255."""  
    