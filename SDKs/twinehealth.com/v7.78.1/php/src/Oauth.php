<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Oauth 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an oauth token
     * 
     * Create an OAuth 2.0 Bearer token. A valid bearer token is required for all other API requests.
     * 
     * Be sure to set the header `Content-Type: "application/vnd.api+json"`. Otherwise, you will get an error
     * 403 Forbidden. Using `Content-Type: "application/json"` is permitted (to support older oauth clients) but when
     * using `application/json` the body should have a body in the following format instead of nesting under
     * `data.attributes`:
     * ```
     * {
     *   "grant_type": "client_credentials",
     *   "client_id": "95c78ab2-167f-40b8-8bec-8398d4b87454",
     *   "client_secret": "35d18dc9-a3dd-4948-b787-063a490b9354"
     * }
     * ```
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTokenResponse
     */
	public function createToken(
        \OpenAPI\OpenAPI\Models\Operations\CreateTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth/token');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createTokenRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTokenResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrUpdateErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateOrUpdateErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the groups for a token
     * 
     * Get the list of groups a token can be used to access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTokenGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTokenGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTokenGroupsResponse
     */
	public function fetchTokenGroups(
        \OpenAPI\OpenAPI\Models\Operations\FetchTokenGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTokenGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTokenGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth/token/{id}/groups', \OpenAPI\OpenAPI\Models\Operations\FetchTokenGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTokenGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchGroupsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the organization for a token
     * 
     * Get the organization a token can be used to access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTokenOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTokenOrganizationResponse
     */
	public function fetchTokenOrganization(
        \OpenAPI\OpenAPI\Models\Operations\FetchTokenOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTokenOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth/token/{id}/organization', \OpenAPI\OpenAPI\Models\Operations\FetchTokenOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTokenOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchOrganizationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchOrganizationResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchErrorResponse', 'json');
            }
        }

        return $response;
    }
}