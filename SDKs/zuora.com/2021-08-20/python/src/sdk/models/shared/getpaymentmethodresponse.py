"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import getpmaccountholderinfo as shared_getpmaccountholderinfo
from ..shared import postpmmandateinfo as shared_postpmmandateinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GETPaymentMethodResponseBankAccountTypeEnum(str, Enum):
    r"""The type of bank account associated with the ACH payment. This field is only required if the `type` field is set to `ACH`."""
    BUSINESS_CHECKING = 'BusinessChecking'
    CHECKING = 'Checking'
    SAVING = 'Saving'

class GETPaymentMethodResponseStatusEnum(str, Enum):
    r"""The status of the payment method."""
    ACTIVE = 'Active'
    CLOSED = 'Closed'
    SCRUBBED = 'Scrubbed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETPaymentMethodResponse:
    r"""Container for custom fields of a payment method object."""
    
    account_holder_info: Optional[shared_getpmaccountholderinfo.GETPMAccountHolderInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderInfo'), 'exclude': lambda f: f is None }})
    r"""The account holder information."""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""The number of the customer's bank account and it is masked."""  
    baid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BAID'), 'exclude': lambda f: f is None }})
    r"""ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9."""  
    bank_aba_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankABACode'), 'exclude': lambda f: f is None }})
    r"""The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`."""  
    bank_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankAccountName'), 'exclude': lambda f: f is None }})
    r"""The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`."""  
    bank_account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankAccountNumber'), 'exclude': lambda f: f is None }})
    r"""The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`."""  
    bank_account_type: Optional[GETPaymentMethodResponseBankAccountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankAccountType'), 'exclude': lambda f: f is None }})
    r"""The type of bank account associated with the ACH payment. This field is only required if the `type` field is set to `ACH`."""  
    bank_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankCode'), 'exclude': lambda f: f is None }})
    r"""The sort code or number that identifies the bank. This is also known as the sort code."""  
    bank_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankName'), 'exclude': lambda f: f is None }})
    r"""The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`."""  
    bank_transfer_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankTransferType'), 'exclude': lambda f: f is None }})
    r"""The type of the Bank Transfer payment method. For example, `SEPA`."""  
    branch_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branchCode'), 'exclude': lambda f: f is None }})
    r"""The branch code of the bank used for Direct Debit."""  
    business_identification_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessIdentificationCode'), 'exclude': lambda f: f is None }})
    r"""The BIC code used for SEPA. The value is masked."""  
    card_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardNumber'), 'exclude': lambda f: f is None }})
    r"""The masked credit card number."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address associated with the PayPal payment method."""  
    expiration_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationMonth'), 'exclude': lambda f: f is None }})
    r"""One or two digits expiration month (1-12)."""  
    expiration_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationYear'), 'exclude': lambda f: f is None }})
    r"""Four-digit expiration year."""  
    iban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IBAN'), 'exclude': lambda f: f is None }})
    r"""The International Bank Account Number used to create the SEPA payment method. The value is masked."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The payment method ID."""  
    identity_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityNumber'), 'exclude': lambda f: f is None }})
    r"""The identity number used for Bank Transfer."""  
    is_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDefault'), 'exclude': lambda f: f is None }})
    r"""Indicates whether this payment method is the default payment method for the account."""  
    mandate_info: Optional[shared_postpmmandateinfo.POSTPMMandateInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateInfo'), 'exclude': lambda f: f is None }})
    r"""The mandate information for the Credit Card, ACH, or Bank Transfer payment method.
    
    The following mandate fields are specific to the ACH and Bank Transfer payment methods:
    * `mandateId`
    * `mandateReceivedStatus`
    * `existingMandateStatus`
    * `mandateCreationDate`
    * `mandateUpdateDate`
    * `mandateStatus`
    * `mandateReason`
    
    The following mandate fields are specific to the Credit Card payment method:
    * `mitTransactionId`
    * `mitProfileAgreedOn`
    * `mitConsentAgreementRef`
    * `mitConsentAgreementSrc`
    * `mitProfileType`
    * `mitProfileAction`
    """  
    preapproval_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preapprovalKey'), 'exclude': lambda f: f is None }})
    r"""The PayPal preapproval key."""  
    security_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityCode'), 'exclude': lambda f: f is None }})
    r"""The CVV or CVV2 security code for the credit card or debit card.
                Only required if changing expirationMonth, expirationYear, or cardHolderName.
                To ensure PCI compliance, this value isn''t stored and can''t be queried.
    """  
    status: Optional[GETPaymentMethodResponseStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the payment method."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the payment method. For example, `CreditCard`."""  
    