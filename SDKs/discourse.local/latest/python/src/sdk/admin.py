"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Admin:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def admin_get_user(self, request: operations.AdminGetUserRequest) -> operations.AdminGetUserResponse:
        r"""Get a user by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminGetUserRequest, base_url, '/admin/users/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminGetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AdminGetUser200ApplicationJSON])
                res.admin_get_user_200_application_json_object = out

        return res

    def admin_list_users(self, request: operations.AdminListUsersRequest) -> operations.AdminListUsersResponse:
        r"""Get a list of users"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminListUsersRequest, base_url, '/admin/users/list/{flag}.json', request)
        
        query_params = utils.get_query_params(operations.AdminListUsersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminListUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.AdminListUsers200ApplicationJSON]])
                res.admin_list_users_200_application_json_objects = out

        return res

    def anonymize_user(self, request: operations.AnonymizeUserRequest) -> operations.AnonymizeUserResponse:
        r"""Anonymize a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnonymizeUserRequest, base_url, '/admin/users/{id}/anonymize.json', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnonymizeUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AnonymizeUser200ApplicationJSON])
                res.anonymize_user_200_application_json_object = out

        return res

    def delete_user(self, request: operations.DeleteUserRequest) -> operations.DeleteUserResponse:
        r"""Delete a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserRequest, base_url, '/admin/users/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteUser200ApplicationJSON])
                res.delete_user_200_application_json_object = out

        return res

    def log_out_user(self, request: operations.LogOutUserRequest) -> operations.LogOutUserResponse:
        r"""Log a user out"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LogOutUserRequest, base_url, '/admin/users/{id}/log_out.json', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LogOutUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LogOutUser200ApplicationJSON])
                res.log_out_user_200_application_json_object = out

        return res

    def refresh_gravatar(self, request: operations.RefreshGravatarRequest) -> operations.RefreshGravatarResponse:
        r"""Refresh gravatar"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RefreshGravatarRequest, base_url, '/user_avatar/{username}/refresh_gravatar.json', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RefreshGravatarResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RefreshGravatar200ApplicationJSON])
                res.refresh_gravatar_200_application_json_object = out

        return res

    def silence_user(self, request: operations.SilenceUserRequest) -> operations.SilenceUserResponse:
        r"""Silence a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SilenceUserRequest, base_url, '/admin/users/{id}/silence.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SilenceUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SilenceUser200ApplicationJSON])
                res.silence_user_200_application_json_object = out

        return res

    def suspend_user(self, request: operations.SuspendUserRequest) -> operations.SuspendUserResponse:
        r"""Suspend a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuspendUserRequest, base_url, '/admin/users/{id}/suspend.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuspendUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SuspendUser200ApplicationJSON])
                res.suspend_user_200_application_json_object = out

        return res

    