"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from ..shared import joblist as shared_joblist
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class BigqueryJobsListSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class BigqueryJobsListSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class BigqueryJobsListSecurityOption3:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class BigqueryJobsListSecurity:
    
    option1: Optional[BigqueryJobsListSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[BigqueryJobsListSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option3: Optional[BigqueryJobsListSecurityOption3] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class BigqueryJobsListProjectionEnum(str, Enum):
    r"""Restrict information returned to a set of selected fields"""
    FULL = 'full'
    MINIMAL = 'minimal'

class BigqueryJobsListStateFilterEnum(str, Enum):
    DONE = 'done'
    PENDING = 'pending'
    RUNNING = 'running'


@dataclasses.dataclass
class BigqueryJobsListRequest:
    
    project_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'projectId', 'style': 'simple', 'explode': False }})
    r"""Project ID of the jobs to list"""  
    all_users: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'allUsers', 'style': 'form', 'explode': True }})
    r"""Whether to display jobs owned by all users in the project. Default false"""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_creation_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxCreationTime', 'style': 'form', 'explode': True }})
    r"""Max value for job creation time, in milliseconds since the POSIX epoch. If set, only jobs created before or at this timestamp are returned"""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return"""  
    min_creation_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minCreationTime', 'style': 'form', 'explode': True }})
    r"""Min value for job creation time, in milliseconds since the POSIX epoch. If set, only jobs created after or at this timestamp are returned"""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""Page token, returned by a previous call, to request the next page of results"""  
    parent_job_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parentJobId', 'style': 'form', 'explode': True }})
    r"""If set, retrieves only jobs whose parent is this job. Otherwise, retrieves only jobs which have no parent"""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    projection: Optional[BigqueryJobsListProjectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'projection', 'style': 'form', 'explode': True }})
    r"""Restrict information returned to a set of selected fields"""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    state_filter: Optional[list[BigqueryJobsListStateFilterEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stateFilter', 'style': 'form', 'explode': True }})
    r"""Filter for job state"""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    

@dataclasses.dataclass
class BigqueryJobsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    job_list: Optional[shared_joblist.JobList] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    