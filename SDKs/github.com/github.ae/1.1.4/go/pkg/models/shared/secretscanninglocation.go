// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SecretScanningLocationDetailsType string

const (
	SecretScanningLocationDetailsTypeSecretScanningLocationCommit       SecretScanningLocationDetailsType = "secret-scanning-location-commit"
	SecretScanningLocationDetailsTypeSecretScanningLocationIssueTitle   SecretScanningLocationDetailsType = "secret-scanning-location-issue-title"
	SecretScanningLocationDetailsTypeSecretScanningLocationIssueBody    SecretScanningLocationDetailsType = "secret-scanning-location-issue-body"
	SecretScanningLocationDetailsTypeSecretScanningLocationIssueComment SecretScanningLocationDetailsType = "secret-scanning-location-issue-comment"
)

type SecretScanningLocationDetails struct {
	SecretScanningLocationCommit       *SecretScanningLocationCommit
	SecretScanningLocationIssueTitle   *SecretScanningLocationIssueTitle
	SecretScanningLocationIssueBody    *SecretScanningLocationIssueBody
	SecretScanningLocationIssueComment *SecretScanningLocationIssueComment

	Type SecretScanningLocationDetailsType
}

func CreateSecretScanningLocationDetailsSecretScanningLocationCommit(secretScanningLocationCommit SecretScanningLocationCommit) SecretScanningLocationDetails {
	typ := SecretScanningLocationDetailsTypeSecretScanningLocationCommit

	return SecretScanningLocationDetails{
		SecretScanningLocationCommit: &secretScanningLocationCommit,
		Type:                         typ,
	}
}

func CreateSecretScanningLocationDetailsSecretScanningLocationIssueTitle(secretScanningLocationIssueTitle SecretScanningLocationIssueTitle) SecretScanningLocationDetails {
	typ := SecretScanningLocationDetailsTypeSecretScanningLocationIssueTitle

	return SecretScanningLocationDetails{
		SecretScanningLocationIssueTitle: &secretScanningLocationIssueTitle,
		Type:                             typ,
	}
}

func CreateSecretScanningLocationDetailsSecretScanningLocationIssueBody(secretScanningLocationIssueBody SecretScanningLocationIssueBody) SecretScanningLocationDetails {
	typ := SecretScanningLocationDetailsTypeSecretScanningLocationIssueBody

	return SecretScanningLocationDetails{
		SecretScanningLocationIssueBody: &secretScanningLocationIssueBody,
		Type:                            typ,
	}
}

func CreateSecretScanningLocationDetailsSecretScanningLocationIssueComment(secretScanningLocationIssueComment SecretScanningLocationIssueComment) SecretScanningLocationDetails {
	typ := SecretScanningLocationDetailsTypeSecretScanningLocationIssueComment

	return SecretScanningLocationDetails{
		SecretScanningLocationIssueComment: &secretScanningLocationIssueComment,
		Type:                               typ,
	}
}

func (u *SecretScanningLocationDetails) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	secretScanningLocationCommit := new(SecretScanningLocationCommit)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&secretScanningLocationCommit); err == nil {
		u.SecretScanningLocationCommit = secretScanningLocationCommit
		u.Type = SecretScanningLocationDetailsTypeSecretScanningLocationCommit
		return nil
	}

	secretScanningLocationIssueTitle := new(SecretScanningLocationIssueTitle)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&secretScanningLocationIssueTitle); err == nil {
		u.SecretScanningLocationIssueTitle = secretScanningLocationIssueTitle
		u.Type = SecretScanningLocationDetailsTypeSecretScanningLocationIssueTitle
		return nil
	}

	secretScanningLocationIssueBody := new(SecretScanningLocationIssueBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&secretScanningLocationIssueBody); err == nil {
		u.SecretScanningLocationIssueBody = secretScanningLocationIssueBody
		u.Type = SecretScanningLocationDetailsTypeSecretScanningLocationIssueBody
		return nil
	}

	secretScanningLocationIssueComment := new(SecretScanningLocationIssueComment)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&secretScanningLocationIssueComment); err == nil {
		u.SecretScanningLocationIssueComment = secretScanningLocationIssueComment
		u.Type = SecretScanningLocationDetailsTypeSecretScanningLocationIssueComment
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SecretScanningLocationDetails) MarshalJSON() ([]byte, error) {
	if u.SecretScanningLocationCommit != nil {
		return json.Marshal(u.SecretScanningLocationCommit)
	}

	if u.SecretScanningLocationIssueTitle != nil {
		return json.Marshal(u.SecretScanningLocationIssueTitle)
	}

	if u.SecretScanningLocationIssueBody != nil {
		return json.Marshal(u.SecretScanningLocationIssueBody)
	}

	if u.SecretScanningLocationIssueComment != nil {
		return json.Marshal(u.SecretScanningLocationIssueComment)
	}

	return nil, nil
}

// SecretScanningLocationTypeEnum - The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
type SecretScanningLocationTypeEnum string

const (
	SecretScanningLocationTypeEnumCommit       SecretScanningLocationTypeEnum = "commit"
	SecretScanningLocationTypeEnumIssueTitle   SecretScanningLocationTypeEnum = "issue_title"
	SecretScanningLocationTypeEnumIssueBody    SecretScanningLocationTypeEnum = "issue_body"
	SecretScanningLocationTypeEnumIssueComment SecretScanningLocationTypeEnum = "issue_comment"
)

func (e SecretScanningLocationTypeEnum) ToPointer() *SecretScanningLocationTypeEnum {
	return &e
}

func (e *SecretScanningLocationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "commit":
		fallthrough
	case "issue_title":
		fallthrough
	case "issue_body":
		fallthrough
	case "issue_comment":
		*e = SecretScanningLocationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecretScanningLocationTypeEnum: %v", v)
	}
}

type SecretScanningLocation struct {
	Details SecretScanningLocationDetails `json:"details"`
	// The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
	Type SecretScanningLocationTypeEnum `json:"type"`
}
