"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import logsetup as shared_logsetup
from ..shared import updateclusterconfigresponse as shared_updateclusterconfigresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateClusterConfigRequestBodyLogging:
    r"""An object representing the logging configuration for resources in your cluster."""
    
    cluster_logging: Optional[list[shared_logsetup.LogSetup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterLogging'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateClusterConfigRequestBodyResourcesVpcConfig:
    r"""An object representing the VPC configuration to use for an Amazon EKS cluster."""
    
    endpoint_private_access: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointPrivateAccess'), 'exclude': lambda f: f is None }})  
    endpoint_public_access: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointPublicAccess'), 'exclude': lambda f: f is None }})  
    public_access_cidrs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicAccessCidrs'), 'exclude': lambda f: f is None }})  
    security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityGroupIds'), 'exclude': lambda f: f is None }})  
    subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetIds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateClusterConfigRequestBody:
    
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientRequestToken'), 'exclude': lambda f: f is None }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."""  
    logging: Optional[UpdateClusterConfigRequestBodyLogging] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logging'), 'exclude': lambda f: f is None }})
    r"""An object representing the logging configuration for resources in your cluster."""  
    resources_vpc_config: Optional[UpdateClusterConfigRequestBodyResourcesVpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourcesVpcConfig'), 'exclude': lambda f: f is None }})
    r"""An object representing the VPC configuration to use for an Amazon EKS cluster."""  
    

@dataclasses.dataclass
class UpdateClusterConfigRequest:
    
    name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'name', 'style': 'simple', 'explode': False }})
    r"""The name of the Amazon EKS cluster to update."""  
    request_body: UpdateClusterConfigRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateClusterConfigResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServerException"""  
    update_cluster_config_response: Optional[shared_updateclusterconfigresponse.UpdateClusterConfigResponse] = dataclasses.field(default=None)
    r"""Success"""  
    