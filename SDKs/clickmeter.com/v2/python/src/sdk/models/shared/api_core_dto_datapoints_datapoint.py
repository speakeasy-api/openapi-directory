"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import api_core_dto_datapoints_trackinglinkspecifics as shared_api_core_dto_datapoints_trackinglinkspecifics
from ..shared import api_core_dto_datapoints_trackingpixelspecifics as shared_api_core_dto_datapoints_trackingpixelspecifics
from ..shared import api_core_dto_tags_tag as shared_api_core_dto_tags_tag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class APICoreDtoDatapointsDatapointStatusEnum(str, Enum):
    ACTIVE = 'Active'
    PAUSED = 'Paused'
    ABUSE = 'Abuse'
    DELETED = 'Deleted'

class APICoreDtoDatapointsDatapointTypeEnum(str, Enum):
    TRACKING_LINK = 'TrackingLink'
    TRACKING_PIXEL = 'TrackingPixel'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APICoreDtoDatapointsDatapoint:
    r"""The body of the datapoint"""
    
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'creationDate' }})
    r"""(A date in \\"YmdHis\\" format)"""  
    encode_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encodeIp'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'encodeIp' }})  
    fifth_conversion_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fifthConversionId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'fifthConversionId' }})  
    fifth_conversion_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fifthConversionName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'fifthConversionName' }})  
    first_conversion_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstConversionId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'firstConversionId' }})  
    first_conversion_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstConversionName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'firstConversionName' }})  
    fourth_conversion_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fourthConversionId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'fourthConversionId' }})  
    fourth_conversion_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fourthConversionName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'fourthConversionName' }})  
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'groupId' }})  
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'groupName' }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'id' }})  
    is_public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPublic'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'isPublic' }})  
    is_secured: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSecured'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'isSecured' }})  
    light_tracking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lightTracking'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'lightTracking' }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'name' }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'notes' }})  
    preferred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'preferred' }})  
    redirect_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectOnly'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'redirectOnly' }})  
    second_conversion_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondConversionId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'secondConversionId' }})  
    second_conversion_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondConversionName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'secondConversionName' }})  
    status: Optional[APICoreDtoDatapointsDatapointStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'status' }})  
    tags: Optional[list[shared_api_core_dto_tags_tag.APICoreDtoTagsTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'tags', 'json': True }})  
    third_conversion_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thirdConversionId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'thirdConversionId' }})  
    third_conversion_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thirdConversionName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'thirdConversionName' }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'title' }})  
    tracking_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingCode'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'trackingCode' }})  
    type: Optional[APICoreDtoDatapointsDatapointTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'type' }})  
    type_tl: Optional[shared_api_core_dto_datapoints_trackinglinkspecifics.APICoreDtoDatapointsTrackingLinkSpecifics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeTL'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'typeTL', 'json': True }})  
    type_tp: Optional[shared_api_core_dto_datapoints_trackingpixelspecifics.APICoreDtoDatapointsTrackingPixelSpecifics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeTP'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'typeTP', 'json': True }})  
    write_permited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('writePermited'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'writePermited' }})  
    