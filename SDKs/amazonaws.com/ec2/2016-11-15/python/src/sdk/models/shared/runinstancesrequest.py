"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import capacityreservationspecification as shared_capacityreservationspecification
from ..shared import cpuoptionsrequest as shared_cpuoptionsrequest
from ..shared import creditspecificationrequest as shared_creditspecificationrequest
from ..shared import elasticgpuspecifications as shared_elasticgpuspecifications
from ..shared import enclaveoptionsrequest as shared_enclaveoptionsrequest
from ..shared import hibernationoptionsrequest as shared_hibernationoptionsrequest
from ..shared import instancemaintenanceoptionsrequest as shared_instancemaintenanceoptionsrequest
from ..shared import instancemarketoptionsrequest as shared_instancemarketoptionsrequest
from ..shared import instancemetadataoptionsrequest as shared_instancemetadataoptionsrequest
from ..shared import instancetype_enum as shared_instancetype_enum
from ..shared import launchtemplatespecification as shared_launchtemplatespecification
from ..shared import placement as shared_placement
from ..shared import privatednsnameoptionsrequest as shared_privatednsnameoptionsrequest
from ..shared import runinstancesmonitoringenabled as shared_runinstancesmonitoringenabled
from enum import Enum
from typing import Optional

class RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum(str, Enum):
    r"""The volume type. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\\">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports."""
    STANDARD = 'standard'
    IO1 = 'io1'
    IO2 = 'io2'
    GP2 = 'gp2'
    SC1 = 'sc1'
    ST1 = 'st1'
    GP3 = 'gp3'


@dataclasses.dataclass
class RunInstancesRequestBlockDeviceMappingsEbs:
    r"""Parameters used to automatically set up EBS volumes when the instance is launched."""
    
    delete_on_termination: Optional[bool] = dataclasses.field(default=None)  
    encrypted: Optional[bool] = dataclasses.field(default=None)  
    iops: Optional[int] = dataclasses.field(default=None)  
    kms_key_id: Optional[str] = dataclasses.field(default=None)  
    outpost_arn: Optional[str] = dataclasses.field(default=None)  
    snapshot_id: Optional[str] = dataclasses.field(default=None)  
    throughput: Optional[int] = dataclasses.field(default=None)  
    volume_size: Optional[int] = dataclasses.field(default=None)  
    volume_type: Optional[RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestBlockDeviceMappings:
    r"""Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch."""
    
    device_name: Optional[str] = dataclasses.field(default=None)  
    ebs: Optional[RunInstancesRequestBlockDeviceMappingsEbs] = dataclasses.field(default=None)  
    no_device: Optional[str] = dataclasses.field(default=None)  
    virtual_name: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestElasticInferenceAccelerators:
    r"""Describes an elastic inference accelerator."""
    
    type: str = dataclasses.field()  
    count: Optional[int] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestIamInstanceProfile:
    r"""The name or Amazon Resource Name (ARN) of an IAM instance profile."""
    
    arn: Optional[str] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    
class RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum(str, Enum):
    r"""<p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>"""
    STOP = 'stop'
    TERMINATE = 'terminate'


@dataclasses.dataclass
class RunInstancesRequestIpv6Addresses:
    r"""Describes an IPv6 address."""
    
    ipv6_address: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestLicenseSpecifications:
    r"""Describes a license configuration."""
    
    license_configuration_arn: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestNetworkInterfacesIpv4Prefixes:
    r"""Describes the IPv4 prefix option for a network interface."""
    
    ipv4_prefix: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestNetworkInterfacesIpv6Addresses:
    r"""Describes an IPv6 address."""
    
    ipv6_address: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestNetworkInterfacesIpv6Prefixes:
    r"""Describes the IPv4 prefix option for a network interface."""
    
    ipv6_prefix: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestNetworkInterfacesPrivateIPAddresses:
    r"""Describes a secondary private IPv4 address for a network interface."""
    
    primary: Optional[bool] = dataclasses.field(default=None)  
    private_ip_address: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestNetworkInterfaces:
    r"""Describes a network interface."""
    
    associate_carrier_ip_address: Optional[bool] = dataclasses.field(default=None)  
    associate_public_ip_address: Optional[bool] = dataclasses.field(default=None)  
    delete_on_termination: Optional[bool] = dataclasses.field(default=None)  
    description: Optional[str] = dataclasses.field(default=None)  
    device_index: Optional[int] = dataclasses.field(default=None)  
    groups: Optional[list[str]] = dataclasses.field(default=None)  
    interface_type: Optional[str] = dataclasses.field(default=None)  
    ipv4_prefix_count: Optional[int] = dataclasses.field(default=None)  
    ipv4_prefixes: Optional[list[RunInstancesRequestNetworkInterfacesIpv4Prefixes]] = dataclasses.field(default=None)  
    ipv6_address_count: Optional[int] = dataclasses.field(default=None)  
    ipv6_addresses: Optional[list[RunInstancesRequestNetworkInterfacesIpv6Addresses]] = dataclasses.field(default=None)  
    ipv6_prefix_count: Optional[int] = dataclasses.field(default=None)  
    ipv6_prefixes: Optional[list[RunInstancesRequestNetworkInterfacesIpv6Prefixes]] = dataclasses.field(default=None)  
    network_card_index: Optional[int] = dataclasses.field(default=None)  
    network_interface_id: Optional[str] = dataclasses.field(default=None)  
    private_ip_address: Optional[str] = dataclasses.field(default=None)  
    private_ip_addresses: Optional[list[RunInstancesRequestNetworkInterfacesPrivateIPAddresses]] = dataclasses.field(default=None)  
    secondary_private_ip_address_count: Optional[int] = dataclasses.field(default=None)  
    subnet_id: Optional[str] = dataclasses.field(default=None)  
    
class RunInstancesRequestTagSpecificationsResourceTypeEnum(str, Enum):
    r"""The type of resource to tag on creation."""
    CAPACITY_RESERVATION = 'capacity-reservation'
    CLIENT_VPN_ENDPOINT = 'client-vpn-endpoint'
    CUSTOMER_GATEWAY = 'customer-gateway'
    CARRIER_GATEWAY = 'carrier-gateway'
    COIP_POOL = 'coip-pool'
    DEDICATED_HOST = 'dedicated-host'
    DHCP_OPTIONS = 'dhcp-options'
    EGRESS_ONLY_INTERNET_GATEWAY = 'egress-only-internet-gateway'
    ELASTIC_IP = 'elastic-ip'
    ELASTIC_GPU = 'elastic-gpu'
    EXPORT_IMAGE_TASK = 'export-image-task'
    EXPORT_INSTANCE_TASK = 'export-instance-task'
    FLEET = 'fleet'
    FPGA_IMAGE = 'fpga-image'
    HOST_RESERVATION = 'host-reservation'
    IMAGE = 'image'
    IMPORT_IMAGE_TASK = 'import-image-task'
    IMPORT_SNAPSHOT_TASK = 'import-snapshot-task'
    INSTANCE = 'instance'
    INSTANCE_EVENT_WINDOW = 'instance-event-window'
    INTERNET_GATEWAY = 'internet-gateway'
    IPAM = 'ipam'
    IPAM_POOL = 'ipam-pool'
    IPAM_SCOPE = 'ipam-scope'
    IPV4POOL_EC2 = 'ipv4pool-ec2'
    IPV6POOL_EC2 = 'ipv6pool-ec2'
    KEY_PAIR = 'key-pair'
    LAUNCH_TEMPLATE = 'launch-template'
    LOCAL_GATEWAY = 'local-gateway'
    LOCAL_GATEWAY_ROUTE_TABLE = 'local-gateway-route-table'
    LOCAL_GATEWAY_VIRTUAL_INTERFACE = 'local-gateway-virtual-interface'
    LOCAL_GATEWAY_VIRTUAL_INTERFACE_GROUP = 'local-gateway-virtual-interface-group'
    LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION = 'local-gateway-route-table-vpc-association'
    LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATION = 'local-gateway-route-table-virtual-interface-group-association'
    NATGATEWAY = 'natgateway'
    NETWORK_ACL = 'network-acl'
    NETWORK_INTERFACE = 'network-interface'
    NETWORK_INSIGHTS_ANALYSIS = 'network-insights-analysis'
    NETWORK_INSIGHTS_PATH = 'network-insights-path'
    NETWORK_INSIGHTS_ACCESS_SCOPE = 'network-insights-access-scope'
    NETWORK_INSIGHTS_ACCESS_SCOPE_ANALYSIS = 'network-insights-access-scope-analysis'
    PLACEMENT_GROUP = 'placement-group'
    PREFIX_LIST = 'prefix-list'
    REPLACE_ROOT_VOLUME_TASK = 'replace-root-volume-task'
    RESERVED_INSTANCES = 'reserved-instances'
    ROUTE_TABLE = 'route-table'
    SECURITY_GROUP = 'security-group'
    SECURITY_GROUP_RULE = 'security-group-rule'
    SNAPSHOT = 'snapshot'
    SPOT_FLEET_REQUEST = 'spot-fleet-request'
    SPOT_INSTANCES_REQUEST = 'spot-instances-request'
    SUBNET = 'subnet'
    SUBNET_CIDR_RESERVATION = 'subnet-cidr-reservation'
    TRAFFIC_MIRROR_FILTER = 'traffic-mirror-filter'
    TRAFFIC_MIRROR_SESSION = 'traffic-mirror-session'
    TRAFFIC_MIRROR_TARGET = 'traffic-mirror-target'
    TRANSIT_GATEWAY = 'transit-gateway'
    TRANSIT_GATEWAY_ATTACHMENT = 'transit-gateway-attachment'
    TRANSIT_GATEWAY_CONNECT_PEER = 'transit-gateway-connect-peer'
    TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'transit-gateway-multicast-domain'
    TRANSIT_GATEWAY_POLICY_TABLE = 'transit-gateway-policy-table'
    TRANSIT_GATEWAY_ROUTE_TABLE = 'transit-gateway-route-table'
    TRANSIT_GATEWAY_ROUTE_TABLE_ANNOUNCEMENT = 'transit-gateway-route-table-announcement'
    VOLUME = 'volume'
    VPC = 'vpc'
    VPC_ENDPOINT = 'vpc-endpoint'
    VPC_ENDPOINT_CONNECTION = 'vpc-endpoint-connection'
    VPC_ENDPOINT_SERVICE = 'vpc-endpoint-service'
    VPC_ENDPOINT_SERVICE_PERMISSION = 'vpc-endpoint-service-permission'
    VPC_PEERING_CONNECTION = 'vpc-peering-connection'
    VPN_CONNECTION = 'vpn-connection'
    VPN_GATEWAY = 'vpn-gateway'
    VPC_FLOW_LOG = 'vpc-flow-log'
    CAPACITY_RESERVATION_FLEET = 'capacity-reservation-fleet'
    TRAFFIC_MIRROR_FILTER_RULE = 'traffic-mirror-filter-rule'
    VPC_ENDPOINT_CONNECTION_DEVICE_TYPE = 'vpc-endpoint-connection-device-type'
    VERIFIED_ACCESS_INSTANCE = 'verified-access-instance'
    VERIFIED_ACCESS_GROUP = 'verified-access-group'
    VERIFIED_ACCESS_ENDPOINT = 'verified-access-endpoint'
    VERIFIED_ACCESS_POLICY = 'verified-access-policy'
    VERIFIED_ACCESS_TRUST_PROVIDER = 'verified-access-trust-provider'
    VPN_CONNECTION_DEVICE_TYPE = 'vpn-connection-device-type'
    VPC_BLOCK_PUBLIC_ACCESS_EXCLUSION = 'vpc-block-public-access-exclusion'
    IPAM_RESOURCE_DISCOVERY = 'ipam-resource-discovery'
    IPAM_RESOURCE_DISCOVERY_ASSOCIATION = 'ipam-resource-discovery-association'


@dataclasses.dataclass
class RunInstancesRequestTagSpecificationsTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequestTagSpecifications:
    r"""<p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>"""
    
    resource_type: Optional[RunInstancesRequestTagSpecificationsResourceTypeEnum] = dataclasses.field(default=None)  
    tags: Optional[list[RunInstancesRequestTagSpecificationsTags]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class RunInstancesRequest:
    
    max_count: int = dataclasses.field()  
    min_count: int = dataclasses.field()  
    additional_info: Optional[str] = dataclasses.field(default=None)  
    block_device_mappings: Optional[list[RunInstancesRequestBlockDeviceMappings]] = dataclasses.field(default=None)  
    capacity_reservation_specification: Optional[shared_capacityreservationspecification.CapacityReservationSpecification] = dataclasses.field(default=None)  
    client_token: Optional[str] = dataclasses.field(default=None)  
    cpu_options: Optional[shared_cpuoptionsrequest.CPUOptionsRequest] = dataclasses.field(default=None)  
    credit_specification: Optional[shared_creditspecificationrequest.CreditSpecificationRequest] = dataclasses.field(default=None)  
    disable_api_stop: Optional[bool] = dataclasses.field(default=None)  
    disable_api_termination: Optional[bool] = dataclasses.field(default=None)  
    dry_run: Optional[bool] = dataclasses.field(default=None)  
    ebs_optimized: Optional[bool] = dataclasses.field(default=None)  
    elastic_gpu_specification: Optional[list[shared_elasticgpuspecifications.ElasticGpuSpecifications]] = dataclasses.field(default=None)  
    elastic_inference_accelerators: Optional[list[RunInstancesRequestElasticInferenceAccelerators]] = dataclasses.field(default=None)  
    enclave_options: Optional[shared_enclaveoptionsrequest.EnclaveOptionsRequest] = dataclasses.field(default=None)  
    hibernation_options: Optional[shared_hibernationoptionsrequest.HibernationOptionsRequest] = dataclasses.field(default=None)  
    iam_instance_profile: Optional[RunInstancesRequestIamInstanceProfile] = dataclasses.field(default=None)  
    image_id: Optional[str] = dataclasses.field(default=None)  
    instance_initiated_shutdown_behavior: Optional[RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum] = dataclasses.field(default=None)  
    instance_market_options: Optional[shared_instancemarketoptionsrequest.InstanceMarketOptionsRequest] = dataclasses.field(default=None)  
    instance_type: Optional[shared_instancetype_enum.InstanceTypeEnum] = dataclasses.field(default=None)  
    ipv6_address_count: Optional[int] = dataclasses.field(default=None)  
    ipv6_addresses: Optional[list[RunInstancesRequestIpv6Addresses]] = dataclasses.field(default=None)  
    kernel_id: Optional[str] = dataclasses.field(default=None)  
    key_name: Optional[str] = dataclasses.field(default=None)  
    launch_template: Optional[shared_launchtemplatespecification.LaunchTemplateSpecification] = dataclasses.field(default=None)  
    license_specifications: Optional[list[RunInstancesRequestLicenseSpecifications]] = dataclasses.field(default=None)  
    maintenance_options: Optional[shared_instancemaintenanceoptionsrequest.InstanceMaintenanceOptionsRequest] = dataclasses.field(default=None)  
    metadata_options: Optional[shared_instancemetadataoptionsrequest.InstanceMetadataOptionsRequest] = dataclasses.field(default=None)  
    monitoring: Optional[shared_runinstancesmonitoringenabled.RunInstancesMonitoringEnabled] = dataclasses.field(default=None)  
    network_interfaces: Optional[list[RunInstancesRequestNetworkInterfaces]] = dataclasses.field(default=None)  
    placement: Optional[shared_placement.Placement] = dataclasses.field(default=None)  
    private_dns_name_options: Optional[shared_privatednsnameoptionsrequest.PrivateDNSNameOptionsRequest] = dataclasses.field(default=None)  
    private_ip_address: Optional[str] = dataclasses.field(default=None)  
    ramdisk_id: Optional[str] = dataclasses.field(default=None)  
    security_group_ids: Optional[list[str]] = dataclasses.field(default=None)  
    security_groups: Optional[list[str]] = dataclasses.field(default=None)  
    subnet_id: Optional[str] = dataclasses.field(default=None)  
    tag_specifications: Optional[list[RunInstancesRequestTagSpecifications]] = dataclasses.field(default=None)  
    user_data: Optional[str] = dataclasses.field(default=None)  
    