// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRegistrationSecurity struct {
	GmaAuth shared.SchemeGmaAuth `security:"scheme,type=oauth2"`
}

type GetRegistrationQueryParams struct {
	// Code of the invitation
	Code string `queryParam:"style=form,explode=true,name=Code"`
}

type GetRegistrationRequest struct {
	QueryParams GetRegistrationQueryParams
	Security    GetRegistrationSecurity
}

type GetRegistration200ApplicationJSON2 struct {
	URL *string `json:"url,omitempty"`
}

type GetRegistration200ApplicationJSON1 struct {
	Message *string `json:"Message,omitempty"`
}

type GetRegistration200ApplicationJSONType string

const (
	GetRegistration200ApplicationJSONTypeGetRegistration200ApplicationJSON1 GetRegistration200ApplicationJSONType = "get_/registration_200ApplicationJSON_1"
	GetRegistration200ApplicationJSONTypeGetRegistration200ApplicationJSON2 GetRegistration200ApplicationJSONType = "get_/registration_200ApplicationJSON_2"
)

type GetRegistration200ApplicationJSON struct {
	GetRegistration200ApplicationJSON1 *GetRegistration200ApplicationJSON1
	GetRegistration200ApplicationJSON2 *GetRegistration200ApplicationJSON2

	Type GetRegistration200ApplicationJSONType
}

func CreateGetRegistration200ApplicationJSONGetRegistration200ApplicationJSON1(getRegistration200ApplicationJSON1 GetRegistration200ApplicationJSON1) GetRegistration200ApplicationJSON {
	typ := GetRegistration200ApplicationJSONTypeGetRegistration200ApplicationJSON1

	return GetRegistration200ApplicationJSON{
		GetRegistration200ApplicationJSON1: &getRegistration200ApplicationJSON1,
		Type:                               typ,
	}
}

func CreateGetRegistration200ApplicationJSONGetRegistration200ApplicationJSON2(getRegistration200ApplicationJSON2 GetRegistration200ApplicationJSON2) GetRegistration200ApplicationJSON {
	typ := GetRegistration200ApplicationJSONTypeGetRegistration200ApplicationJSON2

	return GetRegistration200ApplicationJSON{
		GetRegistration200ApplicationJSON2: &getRegistration200ApplicationJSON2,
		Type:                               typ,
	}
}

func (u *GetRegistration200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getRegistration200ApplicationJSON1 := new(GetRegistration200ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRegistration200ApplicationJSON1); err == nil {
		u.GetRegistration200ApplicationJSON1 = getRegistration200ApplicationJSON1
		u.Type = GetRegistration200ApplicationJSONTypeGetRegistration200ApplicationJSON1
		return nil
	}

	getRegistration200ApplicationJSON2 := new(GetRegistration200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRegistration200ApplicationJSON2); err == nil {
		u.GetRegistration200ApplicationJSON2 = getRegistration200ApplicationJSON2
		u.Type = GetRegistration200ApplicationJSONTypeGetRegistration200ApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRegistration200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GetRegistration200ApplicationJSON1 != nil {
		return json.Marshal(u.GetRegistration200ApplicationJSON1)
	}

	if u.GetRegistration200ApplicationJSON2 != nil {
		return json.Marshal(u.GetRegistration200ApplicationJSON2)
	}

	return nil, nil
}

type GetRegistrationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// the method to get the validation code or the registration link
	GetRegistration200ApplicationJSONOneOf *GetRegistration200ApplicationJSON
}
