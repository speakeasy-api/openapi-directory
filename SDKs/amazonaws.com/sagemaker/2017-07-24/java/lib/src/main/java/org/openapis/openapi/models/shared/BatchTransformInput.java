/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BatchTransformInput - Input object for the batch transform job.
 */
public class BatchTransformInput {
    @JsonProperty("DataCapturedDestinationS3Uri")
    public String dataCapturedDestinationS3Uri;

    public BatchTransformInput withDataCapturedDestinationS3Uri(String dataCapturedDestinationS3Uri) {
        this.dataCapturedDestinationS3Uri = dataCapturedDestinationS3Uri;
        return this;
    }
    
    @JsonProperty("DatasetFormat")
    public MonitoringDatasetFormat datasetFormat;

    public BatchTransformInput withDatasetFormat(MonitoringDatasetFormat datasetFormat) {
        this.datasetFormat = datasetFormat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EndTimeOffset")
    public String endTimeOffset;

    public BatchTransformInput withEndTimeOffset(String endTimeOffset) {
        this.endTimeOffset = endTimeOffset;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FeaturesAttribute")
    public String featuresAttribute;

    public BatchTransformInput withFeaturesAttribute(String featuresAttribute) {
        this.featuresAttribute = featuresAttribute;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InferenceAttribute")
    public String inferenceAttribute;

    public BatchTransformInput withInferenceAttribute(String inferenceAttribute) {
        this.inferenceAttribute = inferenceAttribute;
        return this;
    }
    
    @JsonProperty("LocalPath")
    public String localPath;

    public BatchTransformInput withLocalPath(String localPath) {
        this.localPath = localPath;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ProbabilityAttribute")
    public String probabilityAttribute;

    public BatchTransformInput withProbabilityAttribute(String probabilityAttribute) {
        this.probabilityAttribute = probabilityAttribute;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ProbabilityThresholdAttribute")
    public Double probabilityThresholdAttribute;

    public BatchTransformInput withProbabilityThresholdAttribute(Double probabilityThresholdAttribute) {
        this.probabilityThresholdAttribute = probabilityThresholdAttribute;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3DataDistributionType")
    public ProcessingS3DataDistributionTypeEnum s3DataDistributionType;

    public BatchTransformInput withS3DataDistributionType(ProcessingS3DataDistributionTypeEnum s3DataDistributionType) {
        this.s3DataDistributionType = s3DataDistributionType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3InputMode")
    public ProcessingS3InputModeEnum s3InputMode;

    public BatchTransformInput withS3InputMode(ProcessingS3InputModeEnum s3InputMode) {
        this.s3InputMode = s3InputMode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StartTimeOffset")
    public String startTimeOffset;

    public BatchTransformInput withStartTimeOffset(String startTimeOffset) {
        this.startTimeOffset = startTimeOffset;
        return this;
    }
    
    public BatchTransformInput(@JsonProperty("DataCapturedDestinationS3Uri") String dataCapturedDestinationS3Uri, @JsonProperty("DatasetFormat") MonitoringDatasetFormat datasetFormat, @JsonProperty("LocalPath") String localPath) {
        this.dataCapturedDestinationS3Uri = dataCapturedDestinationS3Uri;
        this.datasetFormat = datasetFormat;
        this.localPath = localPath;
  }
}
