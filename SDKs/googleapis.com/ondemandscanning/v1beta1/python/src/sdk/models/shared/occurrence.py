"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attestationoccurrence as shared_attestationoccurrence
from ..shared import buildoccurrence as shared_buildoccurrence
from ..shared import complianceoccurrence as shared_complianceoccurrence
from ..shared import deploymentoccurrence as shared_deploymentoccurrence
from ..shared import discoveryoccurrence as shared_discoveryoccurrence
from ..shared import dsseattestationoccurrence as shared_dsseattestationoccurrence
from ..shared import envelope as shared_envelope
from ..shared import imageoccurrence as shared_imageoccurrence
from ..shared import packageoccurrence as shared_packageoccurrence
from ..shared import upgradeoccurrence as shared_upgradeoccurrence
from ..shared import vulnerabilityoccurrence as shared_vulnerabilityoccurrence
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OccurrenceKindEnum(str, Enum):
    r"""Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests."""
    NOTE_KIND_UNSPECIFIED = 'NOTE_KIND_UNSPECIFIED'
    VULNERABILITY = 'VULNERABILITY'
    BUILD = 'BUILD'
    IMAGE = 'IMAGE'
    PACKAGE = 'PACKAGE'
    DEPLOYMENT = 'DEPLOYMENT'
    DISCOVERY = 'DISCOVERY'
    ATTESTATION = 'ATTESTATION'
    UPGRADE = 'UPGRADE'
    COMPLIANCE = 'COMPLIANCE'
    DSSE_ATTESTATION = 'DSSE_ATTESTATION'
    VULNERABILITY_ASSESSMENT = 'VULNERABILITY_ASSESSMENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Occurrence:
    r"""An instance of an analysis type that has been found on a resource."""
    
    attestation: Optional[shared_attestationoccurrence.AttestationOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attestation'), 'exclude': lambda f: f is None }})
    r"""Occurrence that represents a single \\"attestation\\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign."""  
    build: Optional[shared_buildoccurrence.BuildOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build'), 'exclude': lambda f: f is None }})
    r"""Details of a build occurrence."""  
    compliance: Optional[shared_complianceoccurrence.ComplianceOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compliance'), 'exclude': lambda f: f is None }})
    r"""An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this occurrence was created."""  
    deployment: Optional[shared_deploymentoccurrence.DeploymentOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployment'), 'exclude': lambda f: f is None }})
    r"""The period during which some deployable was active in a runtime."""  
    discovery: Optional[shared_discoveryoccurrence.DiscoveryOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discovery'), 'exclude': lambda f: f is None }})
    r"""Provides information about the analysis status of a discovered resource."""  
    dsse_attestation: Optional[shared_dsseattestationoccurrence.DSSEAttestationOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dsseAttestation'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence."""  
    envelope: Optional[shared_envelope.Envelope] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('envelope'), 'exclude': lambda f: f is None }})
    r"""MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type."""  
    image: Optional[shared_imageoccurrence.ImageOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM ."""  
    kind: Optional[OccurrenceKindEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."""  
    note_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noteName'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests."""  
    package: Optional[shared_packageoccurrence.PackageOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package'), 'exclude': lambda f: f is None }})
    r"""Details on how a particular software package was installed on a system."""  
    remediation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remediation'), 'exclude': lambda f: f is None }})
    r"""A description of actions that can be taken to remedy the note."""  
    resource_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceUri'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this occurrence was last updated."""  
    upgrade: Optional[shared_upgradeoccurrence.UpgradeOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgrade'), 'exclude': lambda f: f is None }})
    r"""An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update."""  
    vulnerability: Optional[shared_vulnerabilityoccurrence.VulnerabilityOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vulnerability'), 'exclude': lambda f: f is None }})
    r"""An occurrence of a severity vulnerability on a resource."""  
    