"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Interconnect = exports.InterconnectStateEnum = exports.InterconnectOperationalStatusEnum = exports.InterconnectLinkTypeEnum = exports.InterconnectInterconnectTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var interconnectcircuitinfo_1 = require("./interconnectcircuitinfo");
var interconnectmacsec_1 = require("./interconnectmacsec");
var interconnectoutagenotification_1 = require("./interconnectoutagenotification");
var class_transformer_1 = require("class-transformer");
/**
 * Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
 */
var InterconnectInterconnectTypeEnum;
(function (InterconnectInterconnectTypeEnum) {
    InterconnectInterconnectTypeEnum["Dedicated"] = "DEDICATED";
    InterconnectInterconnectTypeEnum["ItPrivate"] = "IT_PRIVATE";
    InterconnectInterconnectTypeEnum["Partner"] = "PARTNER";
})(InterconnectInterconnectTypeEnum = exports.InterconnectInterconnectTypeEnum || (exports.InterconnectInterconnectTypeEnum = {}));
/**
 * Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
 */
var InterconnectLinkTypeEnum;
(function (InterconnectLinkTypeEnum) {
    InterconnectLinkTypeEnum["LinkTypeEthernet100GLr"] = "LINK_TYPE_ETHERNET_100G_LR";
    InterconnectLinkTypeEnum["LinkTypeEthernet10GLr"] = "LINK_TYPE_ETHERNET_10G_LR";
})(InterconnectLinkTypeEnum = exports.InterconnectLinkTypeEnum || (exports.InterconnectLinkTypeEnum = {}));
/**
 * [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
 */
var InterconnectOperationalStatusEnum;
(function (InterconnectOperationalStatusEnum) {
    InterconnectOperationalStatusEnum["OsActive"] = "OS_ACTIVE";
    InterconnectOperationalStatusEnum["OsUnprovisioned"] = "OS_UNPROVISIONED";
})(InterconnectOperationalStatusEnum = exports.InterconnectOperationalStatusEnum || (exports.InterconnectOperationalStatusEnum = {}));
/**
 * [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
 */
var InterconnectStateEnum;
(function (InterconnectStateEnum) {
    InterconnectStateEnum["Active"] = "ACTIVE";
    InterconnectStateEnum["Unprovisioned"] = "UNPROVISIONED";
})(InterconnectStateEnum = exports.InterconnectStateEnum || (exports.InterconnectStateEnum = {}));
/**
 * Represents an Interconnect resource. An Interconnect resource is a dedicated connection between the GCP network and your on-premises network. For more information, read the Dedicated Interconnect Overview.
 */
var Interconnect = /** @class */ (function (_super) {
    __extends(Interconnect, _super);
    function Interconnect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "adminEnabled" }),
        __metadata("design:type", Boolean)
    ], Interconnect.prototype, "adminEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: interconnectcircuitinfo_1.InterconnectCircuitInfo }),
        (0, class_transformer_1.Expose)({ name: "circuitInfos" }),
        (0, class_transformer_1.Type)(function () { return interconnectcircuitinfo_1.InterconnectCircuitInfo; }),
        __metadata("design:type", Array)
    ], Interconnect.prototype, "circuitInfos", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customerName" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "customerName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: interconnectoutagenotification_1.InterconnectOutageNotification }),
        (0, class_transformer_1.Expose)({ name: "expectedOutages" }),
        (0, class_transformer_1.Type)(function () { return interconnectoutagenotification_1.InterconnectOutageNotification; }),
        __metadata("design:type", Array)
    ], Interconnect.prototype, "expectedOutages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "googleIpAddress" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "googleIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "googleReferenceId" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "googleReferenceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interconnectAttachments" }),
        __metadata("design:type", Array)
    ], Interconnect.prototype, "interconnectAttachments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interconnectType" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "interconnectType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labelFingerprint" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "labelFingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], Interconnect.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "linkType" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "linkType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "location" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "location", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "macsec" }),
        (0, class_transformer_1.Type)(function () { return interconnectmacsec_1.InterconnectMacsec; }),
        __metadata("design:type", interconnectmacsec_1.InterconnectMacsec)
    ], Interconnect.prototype, "macsec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "macsecEnabled" }),
        __metadata("design:type", Boolean)
    ], Interconnect.prototype, "macsecEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nocContactEmail" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "nocContactEmail", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "operationalStatus" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "operationalStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "peerIpAddress" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "peerIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "provisionedLinkCount" }),
        __metadata("design:type", Number)
    ], Interconnect.prototype, "provisionedLinkCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "remoteLocation" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "remoteLocation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "requestedLinkCount" }),
        __metadata("design:type", Number)
    ], Interconnect.prototype, "requestedLinkCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "satisfiesPzs" }),
        __metadata("design:type", Boolean)
    ], Interconnect.prototype, "satisfiesPzs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLinkWithId" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "selfLinkWithId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], Interconnect.prototype, "state", void 0);
    return Interconnect;
}(utils_1.SpeakeasyBase));
exports.Interconnect = Interconnect;
