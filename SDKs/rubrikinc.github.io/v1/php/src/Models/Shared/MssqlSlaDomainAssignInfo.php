<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MssqlSlaDomainAssignInfo - Update information.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MssqlSlaDomainAssignInfo
{
    /**
     * SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.
     * 
     * @var ?string $configuredSlaDomainId
     */
	#[\JMS\Serializer\Annotation\SerializedName('configuredSlaDomainId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $configuredSlaDomainId = null;
    
    /**
     * Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
     * 
     * @var ?bool $copyOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('copyOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $copyOnly = null;
    
    /**
     * Specifies the retention policy to apply to existing snapshots when unprotecting an object.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExistingSnapshotRetentionEnum $existingSnapshotRetention
     */
	#[\JMS\Serializer\Annotation\SerializedName('existingSnapshotRetention')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExistingSnapshotRetentionEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExistingSnapshotRetentionEnum $existingSnapshotRetention = null;
    
    /**
     * List of SQL Server object IDs which should be assigned these properties.
     * 
     * 
     * 
     * @var array<string> $ids
     */
	#[\JMS\Serializer\Annotation\SerializedName('ids')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $ids;
    
    /**
     * Seconds between two log backups. A value of 0 disables log backup.
     * 
     * @var ?int $logBackupFrequencyInSeconds
     */
	#[\JMS\Serializer\Annotation\SerializedName('logBackupFrequencyInSeconds')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $logBackupFrequencyInSeconds = null;
    
    /**
     * Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
     * 
     * @var ?int $logRetentionHours
     */
	#[\JMS\Serializer\Annotation\SerializedName('logRetentionHours')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $logRetentionHours = null;
    
    /**
     * Determines whether to use the configured default value of log backup retention.
     * 
     * @var ?bool $useConfiguredDefaultLogRetention
     */
	#[\JMS\Serializer\Annotation\SerializedName('useConfiguredDefaultLogRetention')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useConfiguredDefaultLogRetention = null;
    
	public function __construct()
	{
		$this->configuredSlaDomainId = null;
		$this->copyOnly = null;
		$this->existingSnapshotRetention = null;
		$this->ids = [];
		$this->logBackupFrequencyInSeconds = null;
		$this->logRetentionHours = null;
		$this->useConfiguredDefaultLogRetention = null;
	}
}
