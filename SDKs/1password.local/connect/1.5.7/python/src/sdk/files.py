"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Files:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def download_file_by_id(self, request: operations.DownloadFileByIDRequest, security: operations.DownloadFileByIDSecurity) -> operations.DownloadFileByIDResponse:
        r"""Get the content of a File"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadFileByIDRequest, base_url, '/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadFileByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.download_file_by_id_200_application_octet_stream_binary_string = http_res.content
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_details_of_file_by_id(self, request: operations.GetDetailsOfFileByIDRequest, security: operations.GetDetailsOfFileByIDSecurity) -> operations.GetDetailsOfFileByIDResponse:
        r"""Get the details of a File"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDetailsOfFileByIDRequest, base_url, '/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}', request)
        
        query_params = utils.get_query_params(operations.GetDetailsOfFileByIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDetailsOfFileByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out
        elif http_res.status_code in [401, 403, 404, 413]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_item_files(self, request: operations.GetItemFilesRequest, security: operations.GetItemFilesSecurity) -> operations.GetItemFilesResponse:
        r"""Get all the files inside an Item"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetItemFilesRequest, base_url, '/vaults/{vaultUuid}/items/{itemUuid}/files', request)
        
        query_params = utils.get_query_params(operations.GetItemFilesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItemFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.File]])
                res.files = out
        elif http_res.status_code in [401, 404, 413]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    