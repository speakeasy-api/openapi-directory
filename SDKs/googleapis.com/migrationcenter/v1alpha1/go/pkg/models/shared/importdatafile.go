// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImportDataFileFormatEnum - The payload format.
type ImportDataFileFormatEnum string

const (
	ImportDataFileFormatEnumImportJobFormatUnspecified      ImportDataFileFormatEnum = "IMPORT_JOB_FORMAT_UNSPECIFIED"
	ImportDataFileFormatEnumImportJobFormatCmdb             ImportDataFileFormatEnum = "IMPORT_JOB_FORMAT_CMDB"
	ImportDataFileFormatEnumImportJobFormatRvtoolsXlsx      ImportDataFileFormatEnum = "IMPORT_JOB_FORMAT_RVTOOLS_XLSX"
	ImportDataFileFormatEnumImportJobFormatRvtoolsCsv       ImportDataFileFormatEnum = "IMPORT_JOB_FORMAT_RVTOOLS_CSV"
	ImportDataFileFormatEnumImportJobFormatExportedAwsCsv   ImportDataFileFormatEnum = "IMPORT_JOB_FORMAT_EXPORTED_AWS_CSV"
	ImportDataFileFormatEnumImportJobFormatExportedAzureCsv ImportDataFileFormatEnum = "IMPORT_JOB_FORMAT_EXPORTED_AZURE_CSV"
	ImportDataFileFormatEnumImportJobFormatManualCsv        ImportDataFileFormatEnum = "IMPORT_JOB_FORMAT_MANUAL_CSV"
)

func (e *ImportDataFileFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IMPORT_JOB_FORMAT_UNSPECIFIED":
		fallthrough
	case "IMPORT_JOB_FORMAT_CMDB":
		fallthrough
	case "IMPORT_JOB_FORMAT_RVTOOLS_XLSX":
		fallthrough
	case "IMPORT_JOB_FORMAT_RVTOOLS_CSV":
		fallthrough
	case "IMPORT_JOB_FORMAT_EXPORTED_AWS_CSV":
		fallthrough
	case "IMPORT_JOB_FORMAT_EXPORTED_AZURE_CSV":
		fallthrough
	case "IMPORT_JOB_FORMAT_MANUAL_CSV":
		*e = ImportDataFileFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportDataFileFormatEnum: %s", s)
	}
}

// ImportDataFileStateEnum - Output only. The state of the import data file.
type ImportDataFileStateEnum string

const (
	ImportDataFileStateEnumStateUnspecified ImportDataFileStateEnum = "STATE_UNSPECIFIED"
	ImportDataFileStateEnumCreating         ImportDataFileStateEnum = "CREATING"
	ImportDataFileStateEnumActive           ImportDataFileStateEnum = "ACTIVE"
)

func (e *ImportDataFileStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "ACTIVE":
		*e = ImportDataFileStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportDataFileStateEnum: %s", s)
	}
}

// ImportDataFile - A resource that represents a payload file in an import job.
type ImportDataFile struct {
	// Output only. The timestamp when the file was created.
	CreateTime *string `json:"createTime,omitempty"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `json:"displayName,omitempty"`
	// The payload format.
	Format *ImportDataFileFormatEnum `json:"format,omitempty"`
	// Output only. The name of the file.
	Name *string `json:"name,omitempty"`
	// Output only. The state of the import data file.
	State *ImportDataFileStateEnum `json:"state,omitempty"`
	// A resource that contains a URI to which a data file can be uploaded.
	UploadFileInfo *UploadFileInfo `json:"uploadFileInfo,omitempty"`
}

// ImportDataFileInput - A resource that represents a payload file in an import job.
type ImportDataFileInput struct {
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `json:"displayName,omitempty"`
	// The payload format.
	Format *ImportDataFileFormatEnum `json:"format,omitempty"`
}
