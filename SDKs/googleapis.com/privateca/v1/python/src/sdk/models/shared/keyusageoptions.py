"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KeyUsageOptions:
    r"""KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3."""
    
    cert_sign: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certSign'), 'exclude': lambda f: f is None }})
    r"""The key may be used to sign certificates."""  
    content_commitment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentCommitment'), 'exclude': lambda f: f is None }})
    r"""The key may be used for cryptographic commitments. Note that this may also be referred to as \\"non-repudiation\\"."""  
    crl_sign: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crlSign'), 'exclude': lambda f: f is None }})
    r"""The key may be used sign certificate revocation lists."""  
    data_encipherment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataEncipherment'), 'exclude': lambda f: f is None }})
    r"""The key may be used to encipher data."""  
    decipher_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decipherOnly'), 'exclude': lambda f: f is None }})
    r"""The key may be used to decipher only."""  
    digital_signature: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digitalSignature'), 'exclude': lambda f: f is None }})
    r"""The key may be used for digital signatures."""  
    encipher_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encipherOnly'), 'exclude': lambda f: f is None }})
    r"""The key may be used to encipher only."""  
    key_agreement: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyAgreement'), 'exclude': lambda f: f is None }})
    r"""The key may be used in a key agreement protocol."""  
    key_encipherment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyEncipherment'), 'exclude': lambda f: f is None }})
    r"""The key may be used to encipher other keys."""  
    