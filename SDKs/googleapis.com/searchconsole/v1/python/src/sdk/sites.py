"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Sites:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def webmasters_sites_add(self, request: operations.WebmastersSitesAddRequest, security: operations.WebmastersSitesAddSecurity) -> operations.WebmastersSitesAddResponse:
        r"""Adds a site to the set of the user's sites in Search Console."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebmastersSitesAddRequest, base_url, '/webmasters/v3/sites/{siteUrl}', request)
        
        query_params = utils.get_query_params(operations.WebmastersSitesAddRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebmastersSitesAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def webmasters_sites_delete(self, request: operations.WebmastersSitesDeleteRequest, security: operations.WebmastersSitesDeleteSecurity) -> operations.WebmastersSitesDeleteResponse:
        r"""Removes a site from the set of the user's Search Console sites."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebmastersSitesDeleteRequest, base_url, '/webmasters/v3/sites/{siteUrl}', request)
        
        query_params = utils.get_query_params(operations.WebmastersSitesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebmastersSitesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def webmasters_sites_get(self, request: operations.WebmastersSitesGetRequest, security: operations.WebmastersSitesGetSecurity) -> operations.WebmastersSitesGetResponse:
        r"""Retrieves information about specific site."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebmastersSitesGetRequest, base_url, '/webmasters/v3/sites/{siteUrl}', request)
        
        query_params = utils.get_query_params(operations.WebmastersSitesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebmastersSitesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WmxSite])
                res.wmx_site = out

        return res

    def webmasters_sites_list(self, request: operations.WebmastersSitesListRequest, security: operations.WebmastersSitesListSecurity) -> operations.WebmastersSitesListResponse:
        r"""Lists the user's Search Console sites."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webmasters/v3/sites'
        
        query_params = utils.get_query_params(operations.WebmastersSitesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebmastersSitesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SitesListResponse])
                res.sites_list_response = out

        return res

    