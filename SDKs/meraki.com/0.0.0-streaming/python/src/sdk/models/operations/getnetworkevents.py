"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class GetNetworkEventsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    client_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clientIp', 'style': 'form', 'explode': True }})
    r"""The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks."""  
    client_mac: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clientMac', 'style': 'form', 'explode': True }})
    r"""The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks."""  
    client_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clientName', 'style': 'form', 'explode': True }})
    r"""The name, or partial name, of the client which the list of events will be filtered with"""  
    device_mac: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deviceMac', 'style': 'form', 'explode': True }})
    r"""The MAC address of the Meraki device which the list of events will be filtered with"""  
    device_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deviceName', 'style': 'form', 'explode': True }})
    r"""The name of the Meraki device which the list of events will be filtered with"""  
    device_serial: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deviceSerial', 'style': 'form', 'explode': True }})
    r"""The serial of the Meraki device which the list of events will be filtered with"""  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    excluded_event_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'excludedEventTypes', 'style': 'form', 'explode': False }})
    r"""A list of event types. The returned events will be filtered to exclude events with these types."""  
    included_event_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includedEventTypes', 'style': 'form', 'explode': False }})
    r"""A list of event types. The returned events will be filtered to only include events with these types."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10."""  
    product_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'productType', 'style': 'form', 'explode': True }})
    r"""The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental"""  
    sm_device_mac: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'smDeviceMac', 'style': 'form', 'explode': True }})
    r"""The MAC address of the Systems Manager device which the list of events will be filtered with"""  
    sm_device_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'smDeviceName', 'style': 'form', 'explode': True }})
    r"""The name of the Systems Manager device which the list of events will be filtered with"""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    

@dataclasses.dataclass
class GetNetworkEventsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_events_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    