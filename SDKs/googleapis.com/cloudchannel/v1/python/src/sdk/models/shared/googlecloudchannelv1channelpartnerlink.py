"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudchannelv1cloudidentityinfo as shared_googlecloudchannelv1cloudidentityinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudChannelV1ChannelPartnerLinkLinkStateEnum(str, Enum):
    r"""Required. State of the channel partner link."""
    CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED = 'CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED'
    INVITED = 'INVITED'
    ACTIVE = 'ACTIVE'
    REVOKED = 'REVOKED'
    SUSPENDED = 'SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudChannelV1ChannelPartnerLink:
    r"""Entity representing a link between distributors and their indirect resellers in an n-tier resale channel."""
    
    channel_partner_cloud_identity_info: Optional[shared_googlecloudchannelv1cloudidentityinfo.GoogleCloudChannelV1CloudIdentityInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelPartnerCloudIdentityInfo'), 'exclude': lambda f: f is None }})
    r"""Cloud Identity information for the Cloud Channel Customer."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp of when the channel partner link is created."""  
    invite_link_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inviteLinkUri'), 'exclude': lambda f: f is None }})
    r"""Output only. URI of the web page where partner accepts the link invitation."""  
    link_state: Optional[GoogleCloudChannelV1ChannelPartnerLinkLinkStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkState'), 'exclude': lambda f: f is None }})
    r"""Required. State of the channel partner link."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name for the channel partner link, in the format accounts/{account_id}/channelPartnerLinks/{id}."""  
    public_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicId'), 'exclude': lambda f: f is None }})
    r"""Output only. Public identifier that a customer must use to generate a transfer token to move to this distributor-reseller combination."""  
    reseller_cloud_identity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resellerCloudIdentityId'), 'exclude': lambda f: f is None }})
    r"""Required. Cloud Identity ID of the linked reseller."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp of when the channel partner link is updated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudChannelV1ChannelPartnerLinkInput:
    r"""Entity representing a link between distributors and their indirect resellers in an n-tier resale channel."""
    
    channel_partner_cloud_identity_info: Optional[shared_googlecloudchannelv1cloudidentityinfo.GoogleCloudChannelV1CloudIdentityInfoInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelPartnerCloudIdentityInfo'), 'exclude': lambda f: f is None }})
    r"""Cloud Identity information for the Cloud Channel Customer."""  
    link_state: Optional[GoogleCloudChannelV1ChannelPartnerLinkLinkStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkState'), 'exclude': lambda f: f is None }})
    r"""Required. State of the channel partner link."""  
    reseller_cloud_identity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resellerCloudIdentityId'), 'exclude': lambda f: f is None }})
    r"""Required. Cloud Identity ID of the linked reseller."""  
    