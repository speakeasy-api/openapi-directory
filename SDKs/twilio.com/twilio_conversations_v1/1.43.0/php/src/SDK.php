<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_CONFIGURATION_ADDRESS_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_CREDENTIAL_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_SERVICE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_SERVICE_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_SERVICE_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_SERVICE_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_SERVICE_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const CREATE_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_CONFIGURATION_ADDRESS_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_CREDENTIAL_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_BINDING_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_SERVICE_USER_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const DELETE_USER_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CONFIGURATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CONFIGURATION_ADDRESS_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CONFIGURATION_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CONVERSATION_MESSAGE_RECEIPT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_CREDENTIAL_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_BINDING_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_CONFIGURATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_NOTIFICATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_USER_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_SERVICE_WEBHOOK_CONFIGURATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const FETCH_USER_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_CONFIGURATION_ADDRESS_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_CONVERSATION_MESSAGE_RECEIPT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_CREDENTIAL_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_PARTICIPANT_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_BINDING_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_PARTICIPANT_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_SERVICE_USER_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const LIST_USER_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_CONFIGURATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_CONFIGURATION_ADDRESS_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_CONFIGURATION_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_CREDENTIAL_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_CONFIGURATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_CONVERSATION_MESSAGE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_NOTIFICATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_ROLE_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_USER_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_SERVICE_WEBHOOK_CONFIGURATION_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_USER_SERVERS = [
		'https://conversations.twilio.com',
	];
	
	public const UPDATE_USER_CONVERSATION_SERVERS = [
		'https://conversations.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a new address configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConfigurationAddressCreateConfigurationAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConfigurationAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateConfigurationAddressResponse
     */
	public function createConfigurationAddress(
        \OpenAPI\OpenAPI\Models\Operations\CreateConfigurationAddressCreateConfigurationAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateConfigurationAddressSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateConfigurationAddressResponse
    {
        $baseUrl = SDK::CREATE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration/Addresses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateConfigurationAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConfigurationAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConfigurationAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new conversation in your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateConversationResponse
     */
	public function createConversation(
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateConversationResponse
    {
        $baseUrl = SDK::CREATE_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Conversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Conversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new message to the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateConversationMessageResponse
     */
	public function createConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateConversationMessageResponse
    {
        $baseUrl = SDK::CREATE_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Messages', \OpenAPI\OpenAPI\Models\Operations\CreateConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new participant to the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateConversationParticipantResponse
     */
	public function createConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateConversationParticipantResponse
    {
        $baseUrl = SDK::CREATE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\CreateConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new webhook scoped to the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateConversationScopedWebhookResponse
     */
	public function createConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateConversationScopedWebhookResponse
    {
        $baseUrl = SDK::CREATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Webhooks', \OpenAPI\OpenAPI\Models\Operations\CreateConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationScopedWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationScopedWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new push notification credential to your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialCreateCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse
     */
	public function createCredential(
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialCreateCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse
    {
        $baseUrl = SDK::CREATE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new user role in your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRoleCreateRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse
     */
	public function createRole(
        \OpenAPI\OpenAPI\Models\Operations\CreateRoleCreateRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse
    {
        $baseUrl = SDK::CREATE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Roles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Role = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Role', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new conversation service on your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new conversation in your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationResponse
     */
	public function createServiceConversation(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations', \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new message to the conversation in a specific service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationMessageResponse
     */
	public function createServiceConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationMessageResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages', \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new participant to the conversation in a specific service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationParticipantResponse
     */
	public function createServiceConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationParticipantResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new webhook scoped to the conversation in a specific service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationScopedWebhookResponse
     */
	public function createServiceConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationScopedWebhookResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks', \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new user role in your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceRoleResponse
     */
	public function createServiceRole(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceRoleResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Roles', \OpenAPI\OpenAPI\Models\Operations\CreateServiceRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new conversation user to your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceUserResponse
     */
	public function createServiceUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceUserResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users', \OpenAPI\OpenAPI\Models\Operations\CreateServiceUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new conversation user to your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse
     */
	public function createUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse
    {
        $baseUrl = SDK::CREATE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1User = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an existing address configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConfigurationAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConfigurationAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConfigurationAddressResponse
     */
	public function deleteConfigurationAddress(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConfigurationAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConfigurationAddressSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConfigurationAddressResponse
    {
        $baseUrl = SDK::DELETE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration/Addresses/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteConfigurationAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConfigurationAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a conversation from your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse
     */
	public function deleteConversation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse
    {
        $baseUrl = SDK::DELETE_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a message from the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConversationMessageResponse
     */
	public function deleteConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConversationMessageResponse
    {
        $baseUrl = SDK::DELETE_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a participant from the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConversationParticipantResponse
     */
	public function deleteConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConversationParticipantResponse
    {
        $baseUrl = SDK::DELETE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an existing webhook scoped to the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConversationScopedWebhookResponse
     */
	public function deleteConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConversationScopedWebhookResponse
    {
        $baseUrl = SDK::DELETE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a push notification credential from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse
     */
	public function deleteCredential(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse
    {
        $baseUrl = SDK::DELETE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a user role from your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse
     */
	public function deleteRole(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse
    {
        $baseUrl = SDK::DELETE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a conversation service with all its nested resources from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a push notification binding from the conversation service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceBindingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceBindingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceBindingResponse
     */
	public function deleteServiceBinding(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceBindingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceBindingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceBindingResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_BINDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Bindings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceBindingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceBindingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a conversation from your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationResponse
     */
	public function deleteServiceConversation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a message from the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationMessageResponse
     */
	public function deleteServiceConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationMessageResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a participant from the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationParticipantResponse
     */
	public function deleteServiceConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationParticipantResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an existing webhook scoped to the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationScopedWebhookResponse
     */
	public function deleteServiceConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationScopedWebhookResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a user role from your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRoleResponse
     */
	public function deleteServiceRole(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRoleResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a conversation user from your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserResponse
     */
	public function deleteServiceUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific User Conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserConversationResponse
     */
	public function deleteServiceUserConversation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserConversationResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceUserConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a conversation user from your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse
     */
	public function deleteUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse
    {
        $baseUrl = SDK::DELETE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific User Conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserConversationResponse
     */
	public function deleteUserConversation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserConversationResponse
    {
        $baseUrl = SDK::DELETE_USER_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users/{UserSid}/Conversations/{ConversationSid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch the global configuration of conversations on your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationResponse
     */
	public function fetchConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationResponse
    {
        $baseUrl = SDK::FETCH_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Configuration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Configuration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an address configuration 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationAddressResponse
     */
	public function fetchConfigurationAddress(
        \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationAddressSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationAddressResponse
    {
        $baseUrl = SDK::FETCH_CONFIGURATION_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration/Addresses/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConfigurationAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConfigurationAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchConfigurationWebhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationWebhookResponse
     */
	public function fetchConfigurationWebhook(
        \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationWebhookResponse
    {
        $baseUrl = SDK::FETCH_CONFIGURATION_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration/Webhooks');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConfigurationConfigurationWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConfigurationConfigurationWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a conversation from your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConversationResponse
     */
	public function fetchConversation(
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConversationResponse
    {
        $baseUrl = SDK::FETCH_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Conversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Conversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a message from the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageResponse
     */
	public function fetchConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageResponse
    {
        $baseUrl = SDK::FETCH_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the delivery and read receipts of the conversation message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageReceiptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageReceiptSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageReceiptResponse
     */
	public function fetchConversationMessageReceipt(
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageReceiptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageReceiptSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageReceiptResponse
    {
        $baseUrl = SDK::FETCH_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageReceiptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConversationMessageReceiptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationMessageConversationMessageReceipt = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationMessageConversationMessageReceipt', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a participant of the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConversationParticipantResponse
     */
	public function fetchConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConversationParticipantResponse
    {
        $baseUrl = SDK::FETCH_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the configuration of a conversation-scoped webhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConversationScopedWebhookResponse
     */
	public function fetchConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConversationScopedWebhookResponse
    {
        $baseUrl = SDK::FETCH_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationScopedWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationScopedWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a push notification credential from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse
     */
	public function fetchCredential(
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse
    {
        $baseUrl = SDK::FETCH_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a user role from your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoleResponse
     */
	public function fetchRole(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoleResponse
    {
        $baseUrl = SDK::FETCH_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Role = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Role', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a conversation service from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
     */
	public function fetchService(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a push notification binding from the conversation service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceBindingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceBindingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceBindingResponse
     */
	public function fetchServiceBinding(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceBindingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceBindingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceBindingResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_BINDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Bindings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceBindingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceBindingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceBinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceBinding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the configuration of a conversation service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceConfigurationResponse
     */
	public function fetchServiceConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceConfigurationResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Configuration', \OpenAPI\OpenAPI\Models\Operations\FetchServiceConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a conversation from your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationResponse
     */
	public function fetchServiceConversation(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a message from the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageResponse
     */
	public function fetchServiceConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the delivery and read receipts of the conversation message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageReceiptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageReceiptSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageReceiptResponse
     */
	public function fetchServiceConversationMessageReceipt(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageReceiptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageReceiptSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageReceiptResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageReceiptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationMessageReceiptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a participant of the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationParticipantResponse
     */
	public function fetchServiceConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationParticipantResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the configuration of a conversation-scoped webhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationScopedWebhookResponse
     */
	public function fetchServiceConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationScopedWebhookResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch push notification service settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceNotificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceNotificationResponse
     */
	public function fetchServiceNotification(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceNotificationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceNotificationResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_NOTIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Configuration/Notifications', \OpenAPI\OpenAPI\Models\Operations\FetchServiceNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConfigurationServiceNotification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConfigurationServiceNotification', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a user role from your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceRoleResponse
     */
	public function fetchServiceRole(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceRoleResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a conversation user from your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserResponse
     */
	public function fetchServiceUser(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific User Conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserConversationResponse
     */
	public function fetchServiceUserConversation(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserConversationResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceUserConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceUserServiceUserConversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceUserServiceUserConversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific service webhook configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceWebhookConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceWebhookConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceWebhookConfigurationResponse
     */
	public function fetchServiceWebhookConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceWebhookConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceWebhookConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceWebhookConfigurationResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_WEBHOOK_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Configuration/Webhooks', \OpenAPI\OpenAPI\Models\Operations\FetchServiceWebhookConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceWebhookConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a conversation user from your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUserResponse
     */
	public function fetchUser(
        \OpenAPI\OpenAPI\Models\Operations\FetchUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUserResponse
    {
        $baseUrl = SDK::FETCH_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1User = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific User Conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUserConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUserConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUserConversationResponse
     */
	public function fetchUserConversation(
        \OpenAPI\OpenAPI\Models\Operations\FetchUserConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUserConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUserConversationResponse
    {
        $baseUrl = SDK::FETCH_USER_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users/{UserSid}/Conversations/{ConversationSid}', \OpenAPI\OpenAPI\Models\Operations\FetchUserConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUserConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1UserUserConversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1UserUserConversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of address configurations for an account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressResponse
     */
	public function listConfigurationAddress(
        \OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressResponse
    {
        $baseUrl = SDK::LIST_CONFIGURATION_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration/Addresses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConfigurationAddressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConfigurationAddressListConfigurationAddressResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of conversations in your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConversationResponse
     */
	public function listConversation(
        \OpenAPI\OpenAPI\Models\Operations\ListConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConversationResponse
    {
        $baseUrl = SDK::LIST_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConversationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConversationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConversationListConversationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all messages in the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageResponse
     */
	public function listConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageResponse
    {
        $baseUrl = SDK::LIST_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Messages', \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConversationMessageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConversationMessageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConversationMessageListConversationMessageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptResponse
     */
	public function listConversationMessageReceipt(
        \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptResponse
    {
        $baseUrl = SDK::LIST_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts', \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConversationMessageReceiptResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConversationMessageReceiptListConversationMessageReceiptResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all participants of the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantResponse
     */
	public function listConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantResponse
    {
        $baseUrl = SDK::LIST_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConversationParticipantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConversationParticipantListConversationParticipantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookResponse
     */
	public function listConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookResponse
    {
        $baseUrl = SDK::LIST_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Webhooks', \OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConversationScopedWebhookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConversationScopedWebhookListConversationScopedWebhookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all push notification credentials on your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse
     */
	public function listCredential(
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse
    {
        $baseUrl = SDK::LIST_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCredentialResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCredentialListCredentialResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Conversations that this Participant belongs to by identity or by address. Only one parameter should be specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationResponse
     */
	public function listParticipantConversation(
        \OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationResponse
    {
        $baseUrl = SDK::LIST_PARTICIPANT_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ParticipantConversations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listParticipantConversationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListParticipantConversationListParticipantConversationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all user roles in your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRoleResponse
     */
	public function listRole(
        \OpenAPI\OpenAPI\Models\Operations\ListRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRoleResponse
    {
        $baseUrl = SDK::LIST_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Roles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRoleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRoleListRoleResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all conversation services on your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
     */
	public function listService(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
    {
        $baseUrl = SDK::LIST_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceListServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all push notification bindings in the conversation service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceBindingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceBindingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceBindingResponse
     */
	public function listServiceBinding(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceBindingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceBindingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceBindingResponse
    {
        $baseUrl = SDK::LIST_SERVICE_BINDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Bindings', \OpenAPI\OpenAPI\Models\Operations\ListServiceBindingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceBindingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceBindingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceBindingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceBindingListServiceBindingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of conversations in your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationResponse
     */
	public function listServiceConversation(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationResponse
    {
        $baseUrl = SDK::LIST_SERVICE_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations', \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceConversationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceConversationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceConversationListServiceConversationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all messages in the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageResponse
     */
	public function listServiceConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageResponse
    {
        $baseUrl = SDK::LIST_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages', \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceConversationMessageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageListServiceConversationMessageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptResponse
     */
	public function listServiceConversationMessageReceipt(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptResponse
    {
        $baseUrl = SDK::LIST_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts', \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceConversationMessageReceiptResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceConversationMessageReceiptListServiceConversationMessageReceiptResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all participants of the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantResponse
     */
	public function listServiceConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantResponse
    {
        $baseUrl = SDK::LIST_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceConversationParticipantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceConversationParticipantListServiceConversationParticipantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookResponse
     */
	public function listServiceConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookResponse
    {
        $baseUrl = SDK::LIST_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks', \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceConversationScopedWebhookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceConversationScopedWebhookListServiceConversationScopedWebhookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Conversations that this Participant belongs to by identity or by address. Only one parameter should be specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationResponse
     */
	public function listServiceParticipantConversation(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationResponse
    {
        $baseUrl = SDK::LIST_SERVICE_PARTICIPANT_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/ParticipantConversations', \OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceParticipantConversationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceParticipantConversationListServiceParticipantConversationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all user roles in your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceRoleResponse
     */
	public function listServiceRole(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceRoleResponse
    {
        $baseUrl = SDK::LIST_SERVICE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Roles', \OpenAPI\OpenAPI\Models\Operations\ListServiceRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRoleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceRoleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceRoleListServiceRoleResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all conversation users in your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceUserResponse
     */
	public function listServiceUser(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceUserResponse
    {
        $baseUrl = SDK::LIST_SERVICE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users', \OpenAPI\OpenAPI\Models\Operations\ListServiceUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceUserListServiceUserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all User Conversations for the User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationResponse
     */
	public function listServiceUserConversation(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationResponse
    {
        $baseUrl = SDK::LIST_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations', \OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceUserConversationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceUserConversationListServiceUserConversationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all conversation users in your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUserResponse
     */
	public function listUser(
        \OpenAPI\OpenAPI\Models\Operations\ListUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUserResponse
    {
        $baseUrl = SDK::LIST_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUserListUserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all User Conversations for the User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUserConversationResponse
     */
	public function listUserConversation(
        \OpenAPI\OpenAPI\Models\Operations\ListUserConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUserConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUserConversationResponse
    {
        $baseUrl = SDK::LIST_USER_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users/{UserSid}/Conversations', \OpenAPI\OpenAPI\Models\Operations\ListUserConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUserConversationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUserConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserConversationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUserConversationListUserConversationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the global configuration of conversations on your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationUpdateConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationResponse
     */
	public function updateConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationUpdateConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationResponse
    {
        $baseUrl = SDK::UPDATE_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Configuration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Configuration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing address configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationAddressResponse
     */
	public function updateConfigurationAddress(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationAddressSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationAddressResponse
    {
        $baseUrl = SDK::UPDATE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration/Addresses/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConfigurationAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConfigurationAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateConfigurationWebhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationWebhookUpdateConfigurationWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationWebhookResponse
     */
	public function updateConfigurationWebhook(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationWebhookUpdateConfigurationWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationWebhookResponse
    {
        $baseUrl = SDK::UPDATE_CONFIGURATION_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration/Webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConfigurationWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConfigurationConfigurationWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConfigurationConfigurationWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing conversation in your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConversationResponse
     */
	public function updateConversation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConversationResponse
    {
        $baseUrl = SDK::UPDATE_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Conversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Conversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing message in the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConversationMessageResponse
     */
	public function updateConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConversationMessageResponse
    {
        $baseUrl = SDK::UPDATE_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing participant in the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConversationParticipantResponse
     */
	public function updateConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConversationParticipantResponse
    {
        $baseUrl = SDK::UPDATE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing conversation-scoped webhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConversationScopedWebhookResponse
     */
	public function updateConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConversationScopedWebhookResponse
    {
        $baseUrl = SDK::UPDATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conversations/{ConversationSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ConversationConversationScopedWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ConversationConversationScopedWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing push notification credential on your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse
     */
	public function updateCredential(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse
    {
        $baseUrl = SDK::UPDATE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing user role in your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse
     */
	public function updateRole(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse
    {
        $baseUrl = SDK::UPDATE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1Role = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1Role', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update configuration settings of a conversation service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConfigurationResponse
     */
	public function updateServiceConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConfigurationResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Configuration', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing conversation in your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationResponse
     */
	public function updateServiceConversation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing message in the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationMessageResponse
     */
	public function updateServiceConversationMessage(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationMessageResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing participant in the conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationParticipantResponse
     */
	public function updateServiceConversationParticipant(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationParticipantResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing conversation-scoped webhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationScopedWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationScopedWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationScopedWebhookResponse
     */
	public function updateServiceConversationScopedWebhook(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationScopedWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationScopedWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationScopedWebhookResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationScopedWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceConversationScopedWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update push notification service settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceNotificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceNotificationResponse
     */
	public function updateServiceNotification(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceNotificationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceNotificationResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_NOTIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Configuration/Notifications', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConfigurationServiceNotification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConfigurationServiceNotification', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing user role in your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRoleResponse
     */
	public function updateServiceRole(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRoleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRoleResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing conversation user in your service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserResponse
     */
	public function updateServiceUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific User Conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserConversationResponse
     */
	public function updateServiceUserConversation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserConversationResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceUserConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceUserServiceUserConversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceUserServiceUserConversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Webhook.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceWebhookConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceWebhookConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceWebhookConfigurationResponse
     */
	public function updateServiceWebhookConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceWebhookConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceWebhookConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceWebhookConfigurationResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_WEBHOOK_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ChatServiceSid}/Configuration/Webhooks', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceWebhookConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceWebhookConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing conversation user in your account's default service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse
     */
	public function updateUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse
    {
        $baseUrl = SDK::UPDATE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1User = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific User Conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserConversationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserConversationResponse
     */
	public function updateUserConversation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserConversationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserConversationResponse
    {
        $baseUrl = SDK::UPDATE_USER_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Users/{UserSid}/Conversations/{ConversationSid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUserConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsV1UserUserConversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversationsV1UserUserConversation', 'json');
            }
        }

        return $response;
    }
}