/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection } from "./catalogcustomattributedefinitionselectionconfigcustomattributeselection";
import { Expose, Type } from "class-transformer";

/**
 * Configuration associated with `SELECTION`-type custom attribute definitions.
 */
export class CatalogCustomAttributeDefinitionSelectionConfig extends SpeakeasyBase {
  /**
   * The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100
   *
   * @remarks
   * selections can be defined. Can be modified.
   */
  @SpeakeasyMetadata({
    elemType:
      CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection,
  })
  @Expose({ name: "allowed_selections" })
  @Type(
    () =>
      CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection
  )
  allowedSelections?: CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection[];

  /**
   * The maximum number of selections that can be set. The maximum value for this
   *
   * @remarks
   * attribute is 100. The default value is 1. The value can be modified, but changing the value will not
   * affect existing custom attribute values on objects. Clients need to
   * handle custom attributes with more selected values than allowed by this limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max_allowed_selections" })
  maxAllowedSelections?: number;
}
