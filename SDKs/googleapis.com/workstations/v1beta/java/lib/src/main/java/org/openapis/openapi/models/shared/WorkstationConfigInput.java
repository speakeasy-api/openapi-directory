/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WorkstationConfigInput - A set of configuration options describing how a workstation will be run. Workstation configurations are intended to be shared across multiple workstations.
 */
public class WorkstationConfigInput {
    /**
     * Client-specified annotations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public java.util.Map<String, String> annotations;
    public WorkstationConfigInput withAnnotations(java.util.Map<String, String> annotations) {
        this.annotations = annotations;
        return this;
    }
    
    /**
     * A Docker container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("container")
    public Container container;
    public WorkstationConfigInput withContainer(Container container) {
        this.container = container;
        return this;
    }
    
    /**
     * Human-readable name for this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public WorkstationConfigInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * A customer-managed encryption key for the Compute Engine resources of this workstation configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionKey")
    public CustomerEncryptionKey encryptionKey;
    public WorkstationConfigInput withEncryptionKey(CustomerEncryptionKey encryptionKey) {
        this.encryptionKey = encryptionKey;
        return this;
    }
    
    /**
     * Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public WorkstationConfigInput withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Runtime host for a workstation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public Host host;
    public WorkstationConfigInput withHost(Host host) {
        this.host = host;
        return this;
    }
    
    /**
     * How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idleTimeout")
    public String idleTimeout;
    public WorkstationConfigInput withIdleTimeout(String idleTimeout) {
        this.idleTimeout = idleTimeout;
        return this;
    }
    
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public WorkstationConfigInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Full name of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public WorkstationConfigInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Directories to persist across workstation sessions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("persistentDirectories")
    public PersistentDirectory[] persistentDirectories;
    public WorkstationConfigInput withPersistentDirectories(PersistentDirectory[] persistentDirectories) {
        this.persistentDirectories = persistentDirectories;
        return this;
    }
    
    /**
     * How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this configuration should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runningTimeout")
    public String runningTimeout;
    public WorkstationConfigInput withRunningTimeout(String runningTimeout) {
        this.runningTimeout = runningTimeout;
        return this;
    }
    
}
