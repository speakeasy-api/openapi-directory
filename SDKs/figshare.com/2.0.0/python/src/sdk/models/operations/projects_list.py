"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import project as shared_project
from enum import Enum
from typing import Optional

class ProjectsListOrderEnum(str, Enum):
    r"""The field by which to order. Default varies by endpoint/resource."""
    PUBLISHED_DATE = 'published_date'
    MODIFIED_DATE = 'modified_date'
    VIEWS = 'views'

class ProjectsListOrderDirectionEnum(str, Enum):
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class ProjectsListRequest:
    
    group: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group', 'style': 'form', 'explode': True }})
    r"""only return collections from this group"""  
    institution: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'institution', 'style': 'form', 'explode': True }})
    r"""only return collections from this institution"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of results included on a page. Used for pagination with query"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Where to start the listing(the offset of the first result). Used for pagination with limit"""  
    order: Optional[ProjectsListOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""The field by which to order. Default varies by endpoint/resource."""  
    order_direction: Optional[ProjectsListOrderDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_direction', 'style': 'form', 'explode': True }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number. Used for pagination with page_size"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of results included on a page. Used for pagination with page"""  
    published_since: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'published_since', 'style': 'form', 'explode': True }})
    r"""Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD"""  
    x_cursor: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Cursor', 'style': 'simple', 'explode': False }})
    r"""Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected."""  
    

@dataclasses.dataclass
class ProjectsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    projects: Optional[list[shared_project.Project]] = dataclasses.field(default=None)
    r"""OK. An array of projects"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    