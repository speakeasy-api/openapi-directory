// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SasPortalDeviceGrantChannelTypeEnum - Type of channel used.
type SasPortalDeviceGrantChannelTypeEnum string

const (
	SasPortalDeviceGrantChannelTypeEnumChannelTypeUnspecified SasPortalDeviceGrantChannelTypeEnum = "CHANNEL_TYPE_UNSPECIFIED"
	SasPortalDeviceGrantChannelTypeEnumChannelTypeGaa         SasPortalDeviceGrantChannelTypeEnum = "CHANNEL_TYPE_GAA"
	SasPortalDeviceGrantChannelTypeEnumChannelTypePal         SasPortalDeviceGrantChannelTypeEnum = "CHANNEL_TYPE_PAL"
)

func (e *SasPortalDeviceGrantChannelTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CHANNEL_TYPE_UNSPECIFIED":
		fallthrough
	case "CHANNEL_TYPE_GAA":
		fallthrough
	case "CHANNEL_TYPE_PAL":
		*e = SasPortalDeviceGrantChannelTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SasPortalDeviceGrantChannelTypeEnum: %s", s)
	}
}

// SasPortalDeviceGrantStateEnum - State of the grant.
type SasPortalDeviceGrantStateEnum string

const (
	SasPortalDeviceGrantStateEnumGrantStateUnspecified SasPortalDeviceGrantStateEnum = "GRANT_STATE_UNSPECIFIED"
	SasPortalDeviceGrantStateEnumGrantStateGranted     SasPortalDeviceGrantStateEnum = "GRANT_STATE_GRANTED"
	SasPortalDeviceGrantStateEnumGrantStateTerminated  SasPortalDeviceGrantStateEnum = "GRANT_STATE_TERMINATED"
	SasPortalDeviceGrantStateEnumGrantStateSuspended   SasPortalDeviceGrantStateEnum = "GRANT_STATE_SUSPENDED"
	SasPortalDeviceGrantStateEnumGrantStateAuthorized  SasPortalDeviceGrantStateEnum = "GRANT_STATE_AUTHORIZED"
	SasPortalDeviceGrantStateEnumGrantStateExpired     SasPortalDeviceGrantStateEnum = "GRANT_STATE_EXPIRED"
)

func (e *SasPortalDeviceGrantStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GRANT_STATE_UNSPECIFIED":
		fallthrough
	case "GRANT_STATE_GRANTED":
		fallthrough
	case "GRANT_STATE_TERMINATED":
		fallthrough
	case "GRANT_STATE_SUSPENDED":
		fallthrough
	case "GRANT_STATE_AUTHORIZED":
		fallthrough
	case "GRANT_STATE_EXPIRED":
		*e = SasPortalDeviceGrantStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SasPortalDeviceGrantStateEnum: %s", s)
	}
}

// SasPortalDeviceGrant - Device grant. It is an authorization provided by the Spectrum Access System to a device to transmit using specified operating parameters after a successful heartbeat by the device.
type SasPortalDeviceGrant struct {
	// Type of channel used.
	ChannelType *SasPortalDeviceGrantChannelTypeEnum `json:"channelType,omitempty"`
	// The expiration time of the grant.
	ExpireTime *string `json:"expireTime,omitempty"`
	// Frequency range from `low_frequency` to `high_frequency`.
	FrequencyRange *SasPortalFrequencyRange `json:"frequencyRange,omitempty"`
	// Grant Id.
	GrantID *string `json:"grantId,omitempty"`
	// The transmit expiration time of the last heartbeat.
	LastHeartbeatTransmitExpireTime *string `json:"lastHeartbeatTransmitExpireTime,omitempty"`
	// Maximum Equivalent Isotropically Radiated Power (EIRP) permitted by the grant. The maximum EIRP is in units of dBm/MHz. The value of `maxEirp` represents the average (RMS) EIRP that would be measured by the procedure defined in FCC part 96.41(e)(3).
	MaxEirp *float64 `json:"maxEirp,omitempty"`
	// The DPA move lists on which this grant appears.
	MoveList []SasPortalDpaMoveList `json:"moveList,omitempty"`
	// State of the grant.
	State *SasPortalDeviceGrantStateEnum `json:"state,omitempty"`
	// If the grant is suspended, the reason(s) for suspension.
	SuspensionReason []string `json:"suspensionReason,omitempty"`
}
