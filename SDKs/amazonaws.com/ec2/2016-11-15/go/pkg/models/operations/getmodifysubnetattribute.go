// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifySubnetAttributeActionEnum
type GETModifySubnetAttributeActionEnum string

const (
	GETModifySubnetAttributeActionEnumModifySubnetAttribute GETModifySubnetAttributeActionEnum = "ModifySubnetAttribute"
)

func (e *GETModifySubnetAttributeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifySubnetAttribute":
		*e = GETModifySubnetAttributeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifySubnetAttributeActionEnum: %s", s)
	}
}

// GETModifySubnetAttributeAssignIpv6AddressOnCreation - Describes a value for a resource attribute that is a Boolean value.
type GETModifySubnetAttributeAssignIpv6AddressOnCreation struct {
	Value *bool `queryParam:"name=Value"`
}

// GETModifySubnetAttributeDisableLniAtDeviceIndex - Describes a value for a resource attribute that is a Boolean value.
type GETModifySubnetAttributeDisableLniAtDeviceIndex struct {
	Value *bool `queryParam:"name=Value"`
}

// GETModifySubnetAttributeEnableDns64 - Describes a value for a resource attribute that is a Boolean value.
type GETModifySubnetAttributeEnableDns64 struct {
	Value *bool `queryParam:"name=Value"`
}

// GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch - Describes a value for a resource attribute that is a Boolean value.
type GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch struct {
	Value *bool `queryParam:"name=Value"`
}

// GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch - Describes a value for a resource attribute that is a Boolean value.
type GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch struct {
	Value *bool `queryParam:"name=Value"`
}

// GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch - Describes a value for a resource attribute that is a Boolean value.
type GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch struct {
	Value *bool `queryParam:"name=Value"`
}

// GETModifySubnetAttributeMapPublicIPOnLaunch - Describes a value for a resource attribute that is a Boolean value.
type GETModifySubnetAttributeMapPublicIPOnLaunch struct {
	Value *bool `queryParam:"name=Value"`
}

// GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum - The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).
type GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum string

const (
	GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnumIPName       GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum = "ip-name"
	GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnumResourceName GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum = "resource-name"
)

func (e *GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ip-name":
		fallthrough
	case "resource-name":
		*e = GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum: %s", s)
	}
}

// GETModifySubnetAttributeVersionEnum
type GETModifySubnetAttributeVersionEnum string

const (
	GETModifySubnetAttributeVersionEnumTwoThousandAndSixteen1115 GETModifySubnetAttributeVersionEnum = "2016-11-15"
)

func (e *GETModifySubnetAttributeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifySubnetAttributeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifySubnetAttributeVersionEnum: %s", s)
	}
}

type GETModifySubnetAttributeRequest struct {
	Action GETModifySubnetAttributeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>Specify <code>true</code> to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address). </p> <p>If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version <code>2016-11-15</code> or later of the Amazon EC2 API.</p>
	AssignIpv6AddressOnCreation *GETModifySubnetAttributeAssignIpv6AddressOnCreation `queryParam:"style=form,explode=true,name=AssignIpv6AddressOnCreation"`
	// <p>The customer-owned IPv4 address pool associated with the subnet.</p> <p>You must set this value when you specify <code>true</code> for <code>MapCustomerOwnedIpOnLaunch</code>.</p>
	CustomerOwnedIpv4Pool *string `queryParam:"style=form,explode=true,name=CustomerOwnedIpv4Pool"`
	//  Specify <code>true</code> to indicate that local network interfaces at the current position should be disabled.
	DisableLniAtDeviceIndex *GETModifySubnetAttributeDisableLniAtDeviceIndex `queryParam:"style=form,explode=true,name=DisableLniAtDeviceIndex"`
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.
	EnableDns64 *GETModifySubnetAttributeEnableDns64 `queryParam:"style=form,explode=true,name=EnableDns64"`
	//  Indicates the device position for local network interfaces in this subnet. For example, <code>1</code> indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
	EnableLniAtDeviceIndex *int64 `queryParam:"style=form,explode=true,name=EnableLniAtDeviceIndex"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
	EnableResourceNameDNSAAAARecordOnLaunch *GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch `queryParam:"style=form,explode=true,name=EnableResourceNameDnsAAAARecordOnLaunch"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
	EnableResourceNameDNSARecordOnLaunch *GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch `queryParam:"style=form,explode=true,name=EnableResourceNameDnsARecordOnLaunch"`
	// <p>Specify <code>true</code> to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address.</p> <p>When this value is <code>true</code>, you must specify the customer-owned IP pool using <code>CustomerOwnedIpv4Pool</code>.</p>
	MapCustomerOwnedIPOnLaunch *GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch `queryParam:"style=form,explode=true,name=MapCustomerOwnedIpOnLaunch"`
	// Specify <code>true</code> to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address.
	MapPublicIPOnLaunch *GETModifySubnetAttributeMapPublicIPOnLaunch `queryParam:"style=form,explode=true,name=MapPublicIpOnLaunch"`
	// The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).
	PrivateDNSHostnameTypeOnLaunch *GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum `queryParam:"style=form,explode=true,name=PrivateDnsHostnameTypeOnLaunch"`
	// The ID of the subnet.
	SubnetID          string                              `queryParam:"style=form,explode=true,name=SubnetId"`
	Version           GETModifySubnetAttributeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifySubnetAttributeResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
