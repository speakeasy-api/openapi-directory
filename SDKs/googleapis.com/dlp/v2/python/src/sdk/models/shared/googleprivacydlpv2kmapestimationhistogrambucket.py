"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2kmapestimationquasiidvalues as shared_googleprivacydlpv2kmapestimationquasiidvalues
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2KMapEstimationHistogramBucket:
    r"""A KMapEstimationHistogramBucket message with the following values: min_anonymity: 3 max_anonymity: 5 frequency: 42 means that there are 42 records whose quasi-identifier values correspond to 3, 4 or 5 people in the overlying population. An important particular case is when min_anonymity = max_anonymity = 1: the frequency field then corresponds to the number of uniquely identifiable records."""
    
    bucket_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketSize'), 'exclude': lambda f: f is None }})
    r"""Number of records within these anonymity bounds."""  
    bucket_value_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketValueCount'), 'exclude': lambda f: f is None }})
    r"""Total number of distinct quasi-identifier tuple values in this bucket."""  
    bucket_values: Optional[list[shared_googleprivacydlpv2kmapestimationquasiidvalues.GooglePrivacyDlpV2KMapEstimationQuasiIDValues]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketValues'), 'exclude': lambda f: f is None }})
    r"""Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20."""  
    max_anonymity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxAnonymity'), 'exclude': lambda f: f is None }})
    r"""Always greater than or equal to min_anonymity."""  
    min_anonymity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minAnonymity'), 'exclude': lambda f: f is None }})
    r"""Always positive."""  
    