"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class DeveloperAccountsFindAndModifyDeveloperAccounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_developer_accounts_developer_account_id_(self, request: operations.DeleteDeveloperAccountsDeveloperAccountIDRequest) -> operations.DeleteDeveloperAccountsDeveloperAccountIDResponse:
        r"""Removes the developer account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDeveloperAccountsDeveloperAccountIDRequest, base_url, '/developerAccounts/{developerAccountId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDeveloperAccountsDeveloperAccountIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_developer_accounts(self, request: operations.GetDeveloperAccountsRequest) -> operations.GetDeveloperAccountsResponse:
        r"""Returns a paginated list of developerAccounts
        - Results are paginated and the default is value is 1000 if no limit is provided
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/developerAccounts'
        
        query_params = utils.get_query_params(operations.GetDeveloperAccountsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeveloperAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_developer_accounts_developer_account_id_(self, request: operations.GetDeveloperAccountsDeveloperAccountIDRequest) -> operations.GetDeveloperAccountsDeveloperAccountIDResponse:
        r"""Returns a single developer account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeveloperAccountsDeveloperAccountIDRequest, base_url, '/developerAccounts/{developerAccountId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeveloperAccountsDeveloperAccountIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 404]:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def patch_developer_accounts_developer_account_id_(self, request: operations.PatchDeveloperAccountsDeveloperAccountIDRequest) -> operations.PatchDeveloperAccountsDeveloperAccountIDResponse:
        r"""Updates the developer account fields"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchDeveloperAccountsDeveloperAccountIDRequest, base_url, '/developerAccounts/{developerAccountId}', request)
        
        query_params = utils.get_query_params(operations.PatchDeveloperAccountsDeveloperAccountIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchDeveloperAccountsDeveloperAccountIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 404]:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_developer_accounts_developer_account_id_(self, request: operations.PostDeveloperAccountsDeveloperAccountIDRequest) -> operations.PostDeveloperAccountsDeveloperAccountIDResponse:
        r"""Updates the developer account or adds the developer account if it doesn't exist"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostDeveloperAccountsDeveloperAccountIDRequest, base_url, '/developerAccounts/{developerAccountId}', request)
        
        query_params = utils.get_query_params(operations.PostDeveloperAccountsDeveloperAccountIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDeveloperAccountsDeveloperAccountIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    