"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import errorproto as shared_errorproto
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ErrorsCodeEnum(str, Enum):
    r"""Global error code. Deprecated and ignored. Set custom error codes in ErrorProto.domain and ErrorProto.code instead."""
    BAD_REQUEST = 'BAD_REQUEST'
    FORBIDDEN = 'FORBIDDEN'
    NOT_FOUND = 'NOT_FOUND'
    CONFLICT = 'CONFLICT'
    GONE = 'GONE'
    PRECONDITION_FAILED = 'PRECONDITION_FAILED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Errors:
    r"""Request Error information. The presence of an error field signals that the operation has failed."""
    
    code: Optional[ErrorsCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Global error code. Deprecated and ignored. Set custom error codes in ErrorProto.domain and ErrorProto.code instead."""  
    error: Optional[list[shared_errorproto.ErrorProto]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Specific error description and codes"""  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})
    r"""Request identifier generated by the service, which can be used to identify the error in the logs"""  
    