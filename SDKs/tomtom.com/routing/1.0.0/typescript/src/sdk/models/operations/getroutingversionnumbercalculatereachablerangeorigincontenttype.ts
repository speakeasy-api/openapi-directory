/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Engine type of the vehicle.
 */
export enum GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeVehicleEngineTypeEnum {
  Combustion = "combustion",
  Electric = "electric",
}

export class GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest extends SpeakeasyBase {
  /**
   * Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=accelerationEfficiency",
  })
  accelerationEfficiency?: number;

  /**
   * The date and time of arrival at the destination point. It must be specified as a dateTime.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=arriveAt",
  })
  arriveAt?: string;

  /**
   * Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=auxiliaryPowerInLitersPerHour",
  })
  auxiliaryPowerInLitersPerHour?: number;

  /**
   * Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
   *
   * @remarks
   * Possible values:
   *   - tollRoads
   *   - motorways
   *   - ferries
   *   - unpavedRoads
   *   - carpools
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=avoid" })
  avoid?: string;

  /**
   * Specifies the jsonp callback method.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=constantSpeedConsumptionInLitersPerHundredkm",
  })
  constantSpeedConsumptionInLitersPerHundredkm?: string;

  /**
   * Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=constantSpeedConsumptionInkWhPerHundredkm",
  })
  constantSpeedConsumptionInkWhPerHundredkm?: string;

  /**
   * The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=contentType",
  })
  contentType: shared.ContentTypeEnum;

  /**
   * Specifies the current supply of fuel in liters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=currentFuelInLiters",
  })
  currentFuelInLiters?: number;

  /**
   * Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=decelerationEfficiency",
  })
  decelerationEfficiency?: number;

  /**
   * The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=departAt",
  })
  departAt?: string;

  /**
   * Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=downhillEfficiency",
  })
  downhillEfficiency?: number;

  /**
   * Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=energyBudgetInkWh",
  })
  energyBudgetInkWh?: number;

  /**
   * Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fuelBudgetInLiters",
  })
  fuelBudgetInLiters?: number;

  /**
   * Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fuelEnergyDensityInMJoulesPerLiter",
  })
  fuelEnergyDensityInMJoulesPerLiter?: number;

  /**
   * Degree of hilliness for calculating a thrilling route.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=hilliness",
  })
  hilliness?: shared.HillinessEnum;

  /**
   * Point from which the range calculation should start.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=origin",
  })
  origin: string;

  /**
   * Specifies which data should be reported for diagnosis purposes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=report",
  })
  report?: shared.ReportEnum;

  /**
   * The type of route requested.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=routeType",
  })
  routeType?: shared.RouteTypeEnum;

  /**
   * Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=timeBudgetInSec",
  })
  timeBudgetInSec?: number;

  /**
   * Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=traffic",
  })
  traffic?: boolean;

  /**
   * The mode of travel for the requested route.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=travelMode",
  })
  travelMode?: shared.TravelModeEnum;

  /**
   * Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uphillEfficiency",
  })
  uphillEfficiency?: number;

  /**
   * Weight per axle of the vehicle in kg.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleAxleWeight",
  })
  vehicleAxleWeight?: number;

  /**
   * Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleCommercial",
  })
  vehicleCommercial?: boolean;

  /**
   * Engine type of the vehicle.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleEngineType",
  })
  vehicleEngineType?: GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeVehicleEngineTypeEnum;

  /**
   * Height of the vehicle in meters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleHeight",
  })
  vehicleHeight?: number;

  /**
   * Length of the vehicle in meters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleLength",
  })
  vehicleLength?: number;

  /**
   * Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
   *
   * @remarks
   * Use these for routing in the US:
   *
   *   - <i>USHazmatClass1</i> Explosives
   *   - <i>USHazmatClass2</i> Compressed gas
   *   - <i>USHazmatClass3</i> Flammable liquids
   *   - <i>USHazmatClass4</i> Flammable solids
   *   - <i>USHazmatClass5</i> Oxidizers
   *   - <i>USHazmatClass6</i> Poisons
   *   - <i>USHazmatClass7</i> Radioactive
   *   - <i>USHazmatClass8</i> Corrosives
   *   - <i>USHazmatClass9</i> Miscellaneous
   *
   * Use these for routing in all other countries:
   *
   *   - <i>otherHazmatExplosive</i> Explosives
   *   - <i>otherHazmatGeneral</i> Miscellaneous
   *   - <i>otherHazmatHarmfulToWater</i> Harmful to water
   *
   * vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleLoadType",
  })
  vehicleLoadType?: string;

  /**
   * Maximum speed of the vehicle in km/hour.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleMaxSpeed",
  })
  vehicleMaxSpeed?: number;

  /**
   * Weight of the vehicle in kilograms.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleWeight",
  })
  vehicleWeight?: number;

  /**
   * Width of the vehicle in meters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleWidth",
  })
  vehicleWidth?: number;

  /**
   * Service version number. The current value is 1.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=versionNumber",
  })
  versionNumber: shared.VersionNumberEnum;

  /**
   * Amount that a thrilling route should wind.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=windingness",
  })
  windingness?: shared.WindingnessEnum;
}

export class GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
