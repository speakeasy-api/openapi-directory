/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Edits {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
   */
  androidpublisherEditsApksAddexternallyhosted(
    req: operations.AndroidpublisherEditsApksAddexternallyhostedRequest,
    security: operations.AndroidpublisherEditsApksAddexternallyhostedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsApksAddexternallyhostedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsApksAddexternallyhostedRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apksAddExternallyHostedRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherEditsApksAddexternallyhostedSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsApksAddexternallyhostedResponse =
        new operations.AndroidpublisherEditsApksAddexternallyhostedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apksAddExternallyHostedResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApksAddExternallyHostedResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all current APKs of the app and edit.
   */
  androidpublisherEditsApksList(
    req: operations.AndroidpublisherEditsApksListRequest,
    security: operations.AndroidpublisherEditsApksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsApksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsApksListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsApksListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsApksListResponse =
        new operations.AndroidpublisherEditsApksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apksListResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApksListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads an APK and adds to the current edit.
   */
  androidpublisherEditsApksUpload(
    req: operations.AndroidpublisherEditsApksUploadRequest,
    security: operations.AndroidpublisherEditsApksUploadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsApksUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsApksUploadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsApksUploadSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsApksUploadResponse =
        new operations.AndroidpublisherEditsApksUploadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apk = utils.objectToClass(httpRes?.data, shared.Apk);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all current Android App Bundles of the app and edit.
   */
  androidpublisherEditsBundlesList(
    req: operations.AndroidpublisherEditsBundlesListRequest,
    security: operations.AndroidpublisherEditsBundlesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsBundlesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsBundlesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsBundlesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsBundlesListResponse =
        new operations.AndroidpublisherEditsBundlesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bundlesListResponse = utils.objectToClass(
              httpRes?.data,
              shared.BundlesListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
   */
  androidpublisherEditsBundlesUpload(
    req: operations.AndroidpublisherEditsBundlesUploadRequest,
    security: operations.AndroidpublisherEditsBundlesUploadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsBundlesUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsBundlesUploadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsBundlesUploadSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsBundlesUploadResponse =
        new operations.AndroidpublisherEditsBundlesUploadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bundle = utils.objectToClass(httpRes?.data, shared.Bundle);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Commits an app edit.
   */
  androidpublisherEditsCommit(
    req: operations.AndroidpublisherEditsCommitRequest,
    security: operations.AndroidpublisherEditsCommitSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsCommitResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsCommitRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}:commit",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsCommitSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsCommitResponse =
        new operations.AndroidpublisherEditsCommitResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appEdit = utils.objectToClass(httpRes?.data, shared.AppEdit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets country availability.
   */
  androidpublisherEditsCountryavailabilityGet(
    req: operations.AndroidpublisherEditsCountryavailabilityGetRequest,
    security: operations.AndroidpublisherEditsCountryavailabilityGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsCountryavailabilityGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsCountryavailabilityGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherEditsCountryavailabilityGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsCountryavailabilityGetResponse =
        new operations.AndroidpublisherEditsCountryavailabilityGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trackCountryAvailability = utils.objectToClass(
              httpRes?.data,
              shared.TrackCountryAvailability
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an app edit.
   */
  androidpublisherEditsDelete(
    req: operations.AndroidpublisherEditsDeleteRequest,
    security: operations.AndroidpublisherEditsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsDeleteResponse =
        new operations.AndroidpublisherEditsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Uploads a new deobfuscation file and attaches to the specified APK.
   */
  androidpublisherEditsDeobfuscationfilesUpload(
    req: operations.AndroidpublisherEditsDeobfuscationfilesUploadRequest,
    security: operations.AndroidpublisherEditsDeobfuscationfilesUploadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsDeobfuscationfilesUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsDeobfuscationfilesUploadRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherEditsDeobfuscationfilesUploadSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsDeobfuscationfilesUploadResponse =
        new operations.AndroidpublisherEditsDeobfuscationfilesUploadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deobfuscationFilesUploadResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeobfuscationFilesUploadResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of an app.
   */
  androidpublisherEditsDetailsGet(
    req: operations.AndroidpublisherEditsDetailsGetRequest,
    security: operations.AndroidpublisherEditsDetailsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsDetailsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsDetailsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsDetailsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsDetailsGetResponse =
        new operations.AndroidpublisherEditsDetailsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appDetails = utils.objectToClass(
              httpRes?.data,
              shared.AppDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches details of an app.
   */
  androidpublisherEditsDetailsPatch(
    req: operations.AndroidpublisherEditsDetailsPatchRequest,
    security: operations.AndroidpublisherEditsDetailsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsDetailsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsDetailsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/details",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "appDetails",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsDetailsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsDetailsPatchResponse =
        new operations.AndroidpublisherEditsDetailsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appDetails = utils.objectToClass(
              httpRes?.data,
              shared.AppDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates details of an app.
   */
  androidpublisherEditsDetailsUpdate(
    req: operations.AndroidpublisherEditsDetailsUpdateRequest,
    security: operations.AndroidpublisherEditsDetailsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsDetailsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsDetailsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/details",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "appDetails",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsDetailsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsDetailsUpdateResponse =
        new operations.AndroidpublisherEditsDetailsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appDetails = utils.objectToClass(
              httpRes?.data,
              shared.AppDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetches the expansion file configuration for the specified APK.
   */
  androidpublisherEditsExpansionfilesGet(
    req: operations.AndroidpublisherEditsExpansionfilesGetRequest,
    security: operations.AndroidpublisherEditsExpansionfilesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsExpansionfilesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsExpansionfilesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsExpansionfilesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsExpansionfilesGetResponse =
        new operations.AndroidpublisherEditsExpansionfilesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.expansionFile = utils.objectToClass(
              httpRes?.data,
              shared.ExpansionFile
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.
   */
  androidpublisherEditsExpansionfilesPatch(
    req: operations.AndroidpublisherEditsExpansionfilesPatchRequest,
    security: operations.AndroidpublisherEditsExpansionfilesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsExpansionfilesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsExpansionfilesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "expansionFile",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherEditsExpansionfilesPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsExpansionfilesPatchResponse =
        new operations.AndroidpublisherEditsExpansionfilesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.expansionFile = utils.objectToClass(
              httpRes?.data,
              shared.ExpansionFile
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.
   */
  androidpublisherEditsExpansionfilesUpdate(
    req: operations.AndroidpublisherEditsExpansionfilesUpdateRequest,
    security: operations.AndroidpublisherEditsExpansionfilesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsExpansionfilesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsExpansionfilesUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "expansionFile",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherEditsExpansionfilesUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsExpansionfilesUpdateResponse =
        new operations.AndroidpublisherEditsExpansionfilesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.expansionFile = utils.objectToClass(
              httpRes?.data,
              shared.ExpansionFile
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads a new expansion file and attaches to the specified APK.
   */
  androidpublisherEditsExpansionfilesUpload(
    req: operations.AndroidpublisherEditsExpansionfilesUploadRequest,
    security: operations.AndroidpublisherEditsExpansionfilesUploadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsExpansionfilesUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsExpansionfilesUploadRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherEditsExpansionfilesUploadSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsExpansionfilesUploadResponse =
        new operations.AndroidpublisherEditsExpansionfilesUploadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.expansionFilesUploadResponse = utils.objectToClass(
              httpRes?.data,
              shared.ExpansionFilesUploadResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets an app edit.
   */
  androidpublisherEditsGet(
    req: operations.AndroidpublisherEditsGetRequest,
    security: operations.AndroidpublisherEditsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsGetResponse =
        new operations.AndroidpublisherEditsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appEdit = utils.objectToClass(httpRes?.data, shared.AppEdit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the image (specified by id) from the edit.
   */
  androidpublisherEditsImagesDelete(
    req: operations.AndroidpublisherEditsImagesDeleteRequest,
    security: operations.AndroidpublisherEditsImagesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsImagesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsImagesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsImagesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsImagesDeleteResponse =
        new operations.AndroidpublisherEditsImagesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Deletes all images for the specified language and image type. Returns an empty response if no images are found.
   */
  androidpublisherEditsImagesDeleteall(
    req: operations.AndroidpublisherEditsImagesDeleteallRequest,
    security: operations.AndroidpublisherEditsImagesDeleteallSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsImagesDeleteallResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsImagesDeleteallRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsImagesDeleteallSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsImagesDeleteallResponse =
        new operations.AndroidpublisherEditsImagesDeleteallResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.imagesDeleteAllResponse = utils.objectToClass(
              httpRes?.data,
              shared.ImagesDeleteAllResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all images. The response may be empty.
   */
  androidpublisherEditsImagesList(
    req: operations.AndroidpublisherEditsImagesListRequest,
    security: operations.AndroidpublisherEditsImagesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsImagesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsImagesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsImagesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsImagesListResponse =
        new operations.AndroidpublisherEditsImagesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.imagesListResponse = utils.objectToClass(
              httpRes?.data,
              shared.ImagesListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads an image of the specified language and image type, and adds to the edit.
   */
  androidpublisherEditsImagesUpload(
    req: operations.AndroidpublisherEditsImagesUploadRequest,
    security: operations.AndroidpublisherEditsImagesUploadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsImagesUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsImagesUploadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsImagesUploadSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsImagesUploadResponse =
        new operations.AndroidpublisherEditsImagesUploadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.imagesUploadResponse = utils.objectToClass(
              httpRes?.data,
              shared.ImagesUploadResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new edit for an app.
   */
  androidpublisherEditsInsert(
    req: operations.AndroidpublisherEditsInsertRequest,
    security: operations.AndroidpublisherEditsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsInsertResponse =
        new operations.AndroidpublisherEditsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appEdit = utils.objectToClass(httpRes?.data, shared.AppEdit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a localized store listing.
   */
  androidpublisherEditsListingsDelete(
    req: operations.AndroidpublisherEditsListingsDeleteRequest,
    security: operations.AndroidpublisherEditsListingsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsListingsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsListingsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsListingsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsListingsDeleteResponse =
        new operations.AndroidpublisherEditsListingsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Deletes all store listings.
   */
  androidpublisherEditsListingsDeleteall(
    req: operations.AndroidpublisherEditsListingsDeleteallRequest,
    security: operations.AndroidpublisherEditsListingsDeleteallSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsListingsDeleteallResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsListingsDeleteallRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsListingsDeleteallSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsListingsDeleteallResponse =
        new operations.AndroidpublisherEditsListingsDeleteallResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a localized store listing.
   */
  androidpublisherEditsListingsGet(
    req: operations.AndroidpublisherEditsListingsGetRequest,
    security: operations.AndroidpublisherEditsListingsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsListingsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsListingsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsListingsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsListingsGetResponse =
        new operations.AndroidpublisherEditsListingsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listing = utils.objectToClass(httpRes?.data, shared.Listing);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all localized store listings.
   */
  androidpublisherEditsListingsList(
    req: operations.AndroidpublisherEditsListingsListRequest,
    security: operations.AndroidpublisherEditsListingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsListingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsListingsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsListingsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsListingsListResponse =
        new operations.AndroidpublisherEditsListingsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingsListResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListingsListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a localized store listing.
   */
  androidpublisherEditsListingsPatch(
    req: operations.AndroidpublisherEditsListingsPatchRequest,
    security: operations.AndroidpublisherEditsListingsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsListingsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsListingsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "listing",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsListingsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsListingsPatchResponse =
        new operations.AndroidpublisherEditsListingsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listing = utils.objectToClass(httpRes?.data, shared.Listing);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates or updates a localized store listing.
   */
  androidpublisherEditsListingsUpdate(
    req: operations.AndroidpublisherEditsListingsUpdateRequest,
    security: operations.AndroidpublisherEditsListingsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsListingsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsListingsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "listing",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsListingsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsListingsUpdateResponse =
        new operations.AndroidpublisherEditsListingsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listing = utils.objectToClass(httpRes?.data, shared.Listing);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets testers. Note: Testers resource does not support email lists.
   */
  androidpublisherEditsTestersGet(
    req: operations.AndroidpublisherEditsTestersGetRequest,
    security: operations.AndroidpublisherEditsTestersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsTestersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsTestersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsTestersGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsTestersGetResponse =
        new operations.AndroidpublisherEditsTestersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testers = utils.objectToClass(httpRes?.data, shared.Testers);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches testers. Note: Testers resource does not support email lists.
   */
  androidpublisherEditsTestersPatch(
    req: operations.AndroidpublisherEditsTestersPatchRequest,
    security: operations.AndroidpublisherEditsTestersPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsTestersPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsTestersPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testers",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsTestersPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsTestersPatchResponse =
        new operations.AndroidpublisherEditsTestersPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testers = utils.objectToClass(httpRes?.data, shared.Testers);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates testers. Note: Testers resource does not support email lists.
   */
  androidpublisherEditsTestersUpdate(
    req: operations.AndroidpublisherEditsTestersUpdateRequest,
    security: operations.AndroidpublisherEditsTestersUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsTestersUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsTestersUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testers",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsTestersUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsTestersUpdateResponse =
        new operations.AndroidpublisherEditsTestersUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testers = utils.objectToClass(httpRes?.data, shared.Testers);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a track.
   */
  androidpublisherEditsTracksGet(
    req: operations.AndroidpublisherEditsTracksGetRequest,
    security: operations.AndroidpublisherEditsTracksGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsTracksGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsTracksGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsTracksGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsTracksGetResponse =
        new operations.AndroidpublisherEditsTracksGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.track = utils.objectToClass(httpRes?.data, shared.Track);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all tracks.
   */
  androidpublisherEditsTracksList(
    req: operations.AndroidpublisherEditsTracksListRequest,
    security: operations.AndroidpublisherEditsTracksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsTracksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsTracksListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsTracksListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsTracksListResponse =
        new operations.AndroidpublisherEditsTracksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tracksListResponse = utils.objectToClass(
              httpRes?.data,
              shared.TracksListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a track.
   */
  androidpublisherEditsTracksPatch(
    req: operations.AndroidpublisherEditsTracksPatchRequest,
    security: operations.AndroidpublisherEditsTracksPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsTracksPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsTracksPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "track1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsTracksPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsTracksPatchResponse =
        new operations.AndroidpublisherEditsTracksPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.track = utils.objectToClass(httpRes?.data, shared.Track);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a track.
   */
  androidpublisherEditsTracksUpdate(
    req: operations.AndroidpublisherEditsTracksUpdateRequest,
    security: operations.AndroidpublisherEditsTracksUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsTracksUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsTracksUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "track1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsTracksUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsTracksUpdateResponse =
        new operations.AndroidpublisherEditsTracksUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.track = utils.objectToClass(httpRes?.data, shared.Track);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Validates an app edit.
   */
  androidpublisherEditsValidate(
    req: operations.AndroidpublisherEditsValidateRequest,
    security: operations.AndroidpublisherEditsValidateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherEditsValidateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherEditsValidateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/{packageName}/edits/{editId}:validate",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherEditsValidateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherEditsValidateResponse =
        new operations.AndroidpublisherEditsValidateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appEdit = utils.objectToClass(httpRes?.data, shared.AppEdit);
          }
          break;
      }

      return res;
    });
  }
}
