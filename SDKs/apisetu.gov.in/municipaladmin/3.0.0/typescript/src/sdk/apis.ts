/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Khatha Extract / Certificate
   *
   * @remarks
   * API to verify Khatha Extract / Certificate.
   */
  kecer(
    req: operations.KecerRequestBody,
    security: operations.KecerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KecerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KecerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kecer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KecerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KecerResponse = new operations.KecerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.kecer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Kecer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.kecer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Kecer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.kecer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Kecer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.kecer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Kecer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.kecer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Kecer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.kecer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Kecer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.kecer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Kecer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * New Tap Connection
   *
   * @remarks
   * API to verify New Tap Connection.
   */
  tapcn(
    req: operations.TapcnRequestBody,
    security: operations.TapcnSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TapcnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TapcnRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tapcn/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TapcnSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TapcnResponse = new operations.TapcnResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tapcn400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tapcn400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tapcn401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tapcn401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tapcn404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tapcn404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tapcn500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tapcn500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tapcn502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tapcn502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tapcn503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tapcn503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tapcn504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tapcn504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Trade License/ Certificate
   *
   * @remarks
   * API to verify Trade License/ Certificate.
   */
  tdlcs(
    req: operations.TdlcsRequestBody,
    security: operations.TdlcsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TdlcsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TdlcsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tdlcs/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TdlcsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TdlcsResponse = new operations.TdlcsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tdlcs400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tdlcs400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tdlcs401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tdlcs401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tdlcs404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tdlcs404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tdlcs500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tdlcs500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tdlcs502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tdlcs502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tdlcs503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tdlcs503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tdlcs504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tdlcs504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Jalanidhi - New UGD Connection
   *
   * @remarks
   * API to verify Jalanidhi - New UGD Connection.
   */
  ugdcn(
    req: operations.UgdcnRequestBody,
    security: operations.UgdcnSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UgdcnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UgdcnRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ugdcn/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UgdcnSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UgdcnResponse = new operations.UgdcnResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ugdcn400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ugdcn400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ugdcn401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ugdcn401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ugdcn404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ugdcn404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ugdcn500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ugdcn500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ugdcn502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ugdcn502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ugdcn503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ugdcn503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ugdcn504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ugdcn504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
