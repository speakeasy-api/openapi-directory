"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import messagetype_enum as shared_messagetype_enum
from ..shared import numbercapability_enum as shared_numbercapability_enum
from ..shared import requestablenumbertype_enum as shared_requestablenumbertype_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RequestPhoneNumberRequest:
    
    iso_country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsoCountryCode') }})  
    message_type: shared_messagetype_enum.MessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageType') }})  
    number_capabilities: list[shared_numbercapability_enum.NumberCapabilityEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberCapabilities') }})  
    number_type: shared_requestablenumbertype_enum.RequestableNumberTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberType') }})  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken'), 'exclude': lambda f: f is None }})  
    deletion_protection_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeletionProtectionEnabled'), 'exclude': lambda f: f is None }})  
    opt_out_list_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptOutListName'), 'exclude': lambda f: f is None }})  
    pool_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PoolId'), 'exclude': lambda f: f is None }})  
    registration_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegistrationId'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    