<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Members 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugResponse
     */
	public function deleteWorkspaceSlugMembersMemberSlug(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Remove identity from a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugIdentitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugIdentitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugIdentitiesResponse
     */
	public function deleteWorkspaceSlugMembersMemberSlugIdentities(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugIdentitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugIdentitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugIdentitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}/identities', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugIdentitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identity", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugIdentitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * List members in a workspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersResponse
     */
	public function getWorkspaceSlugMembers(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find a member by an identity
     * 
     * Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindResponse
     */
	public function getWorkspaceSlugMembersFind(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/find', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersFindResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugResponse
     */
	public function getWorkspaceSlugMembersMemberSlug(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List members in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersResponse
     */
	public function getWorkspaceSlugOrganizationsOrganizationIdMembers(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/organizations/{organization_id}/members', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create or update a member
     * 
     * This method is useful when you know a member's identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersResponse
     */
	public function postWorkspaceSlugMembers(
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members', \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "memberAndIdentity", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Add identity to a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugIdentitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugIdentitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugIdentitiesResponse
     */
	public function postWorkspaceSlugMembersMemberSlugIdentities(
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugIdentitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugIdentitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugIdentitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}/identities', \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugIdentitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identity", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugIdentitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Update a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugResponse
     */
	public function putWorkspaceSlugMembersMemberSlug(
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}', \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "member", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}