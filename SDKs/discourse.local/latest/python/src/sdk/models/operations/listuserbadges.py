"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListUserBadgesRequest:
    
    username: str = dataclasses.field(metadata={'path_param': { 'field_name': 'username', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUserBadges200ApplicationJSONBadgeTypes:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    sort_order: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_order') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUserBadges200ApplicationJSONBadges:
    
    allow_title: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_title') }})  
    badge_grouping_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_grouping_id') }})  
    badge_type_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_type_id') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})  
    grant_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_count') }})  
    icon: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url') }})  
    listable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listable') }})  
    manually_grantable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manually_grantable') }})  
    multiple_grant: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiple_grant') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    system: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUserBadges200ApplicationJSONGrantedBies:
    
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    flair_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_name') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    moderator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderator') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    trust_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUserBadges200ApplicationJSONUserBadges:
    
    badge_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_id') }})  
    can_favorite: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_favorite') }})  
    granted_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('granted_at') }})  
    granted_by_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('granted_by_id') }})  
    grouping_position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grouping_position') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    is_favorite: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_favorite') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUserBadges200ApplicationJSON:
    r"""success response"""
    
    user_badges: list[ListUserBadges200ApplicationJSONUserBadges] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_badges') }})  
    badge_types: Optional[list[ListUserBadges200ApplicationJSONBadgeTypes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_types'), 'exclude': lambda f: f is None }})  
    badges: Optional[list[ListUserBadges200ApplicationJSONBadges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badges'), 'exclude': lambda f: f is None }})  
    granted_bies: Optional[list[ListUserBadges200ApplicationJSONGrantedBies]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('granted_bies'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListUserBadgesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_user_badges_200_application_json_object: Optional[ListUserBadges200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    