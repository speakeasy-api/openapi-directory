"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customerfieldswithbillingaddressandshippingaddressfields as shared_customerfieldswithbillingaddressandshippingaddressfields
from ..shared import orderproductordercreate as shared_orderproductordercreate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OrderCreateFieldsStatusEnum(str, Enum):
    r"""Status of the Order"""
    ABANDONED = 'Abandoned'
    CANCELED = 'Canceled'
    PENDING_PAYMENT = 'Pending Payment'
    PAID = 'Paid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderCreateFields:
    
    customer: Optional[shared_customerfieldswithbillingaddressandshippingaddressfields.CustomerFieldsWithBillingAddressAndShippingAddressFields] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer'), 'exclude': lambda f: f is None }})  
    products: Optional[list[shared_orderproductordercreate.OrderProductOrderCreate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})  
    shipping_method_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_method_id'), 'exclude': lambda f: f is None }})
    r"""Shipping method id"""  
    shipping_method_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_method_name'), 'exclude': lambda f: f is None }})
    r"""Shipping method name e.g. Royal Mail"""  
    shipping_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_price'), 'exclude': lambda f: f is None }})
    r"""Shipping method's price (applicable if shipping_method_name is provided instead of a shipping_method_id)"""  
    status: Optional[OrderCreateFieldsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the Order"""  
    