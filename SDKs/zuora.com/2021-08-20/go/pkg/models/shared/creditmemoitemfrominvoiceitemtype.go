// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// CreditMemoItemFromInvoiceItemTypeFinanceInformation - Container for the finance information related to the credit memo item.
type CreditMemoItemFromInvoiceItemTypeFinanceInformation struct {
	// The accounting code for the deferred revenue, such as Monthly Recurring Liability.
	//
	DeferredRevenueAccountingCode *string `json:"deferredRevenueAccountingCode,omitempty"`
	// The accounting code that maps to an on account in your accounting system.
	//
	OnAccountAccountingCode *string `json:"onAccountAccountingCode,omitempty"`
	// The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
	//
	RecognizedRevenueAccountingCode *string `json:"recognizedRevenueAccountingCode,omitempty"`
	// The name of the revenue recognition rule governing the revenue schedule.
	//
	RevenueRecognitionRuleName *string `json:"revenueRecognitionRuleName,omitempty"`
}

// CreditMemoItemFromInvoiceItemTypeTaxModeEnum - The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
//
// **Note**: You can set this field to `TaxInclusive` only if the `taxAutoCalculation` field is set to `true`.
//
// If you set `taxMode` to `TaxInclusive`, you cannot input tax amounts for credit memo items. The corresponding invoice item must use the same tax engine as the credit memo item to calculate tax amounts.
type CreditMemoItemFromInvoiceItemTypeTaxModeEnum string

const (
	CreditMemoItemFromInvoiceItemTypeTaxModeEnumTaxExclusive CreditMemoItemFromInvoiceItemTypeTaxModeEnum = "TaxExclusive"
	CreditMemoItemFromInvoiceItemTypeTaxModeEnumTaxInclusive CreditMemoItemFromInvoiceItemTypeTaxModeEnum = "TaxInclusive"
)

func (e *CreditMemoItemFromInvoiceItemTypeTaxModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TaxExclusive":
		fallthrough
	case "TaxInclusive":
		*e = CreditMemoItemFromInvoiceItemTypeTaxModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditMemoItemFromInvoiceItemTypeTaxModeEnum: %s", s)
	}
}

// CreditMemoItemFromInvoiceItemType - Container for custom fields of a Credit Memo Item object.
type CreditMemoItemFromInvoiceItemType struct {
	// The amount of the credit memo item.
	//
	Amount float64 `json:"amount"`
	// Comments about the credit memo item.
	//
	// **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.
	//
	Comment *string `json:"comment,omitempty"`
	// The description of the credit memo item.
	//
	// **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.
	//
	Description *string `json:"description,omitempty"`
	// Container for the finance information related to the credit memo item.
	//
	FinanceInformation *CreditMemoItemFromInvoiceItemTypeFinanceInformation `json:"financeInformation,omitempty"`
	// The ID of the invoice item.
	//
	InvoiceItemID *string `json:"invoiceItemId,omitempty"`
	// The number of units for the credit memo item.
	//
	Quantity *float64 `json:"quantity,omitempty"`
	// The service end date of the credit memo item.
	//
	ServiceEndDate *types.Date `json:"serviceEndDate,omitempty"`
	// The service start date of the credit memo item.
	//
	ServiceStartDate *types.Date `json:"serviceStartDate,omitempty"`
	// The name of the charge associated with the invoice.
	//
	SkuName string `json:"skuName"`
	// Container for taxation items.
	//
	TaxItems []CreditMemoTaxItemFromInvoiceTaxItemType `json:"taxItems,omitempty"`
	// The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
	//
	// **Note**: You can set this field to `TaxInclusive` only if the `taxAutoCalculation` field is set to `true`.
	//
	// If you set `taxMode` to `TaxInclusive`, you cannot input tax amounts for credit memo items. The corresponding invoice item must use the same tax engine as the credit memo item to calculate tax amounts.
	//
	TaxMode *CreditMemoItemFromInvoiceItemTypeTaxModeEnum `json:"taxMode,omitempty"`
	// The definable unit that you measure when determining charges.
	//
	UnitOfMeasure *string `json:"unitOfMeasure,omitempty"`
}
