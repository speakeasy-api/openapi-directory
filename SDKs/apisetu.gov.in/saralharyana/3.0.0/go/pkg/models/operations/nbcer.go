// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NbcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NbcerRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// NbcerRequestBodyFormatEnum - The format of the certificate in response.
type NbcerRequestBodyFormatEnum string

const (
	NbcerRequestBodyFormatEnumPdf NbcerRequestBodyFormatEnum = "pdf"
)

func (e NbcerRequestBodyFormatEnum) ToPointer() *NbcerRequestBodyFormatEnum {
	return &e
}

func (e *NbcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = NbcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NbcerRequestBodyFormatEnum: %v", v)
	}
}

// NbcerRequestBody - Request format
type NbcerRequestBody struct {
	CertificateParameters *NbcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NbcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Nbcer504ApplicationJSONErrorEnum string

const (
	Nbcer504ApplicationJSONErrorEnumGatewayTimeout Nbcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Nbcer504ApplicationJSONErrorEnum) ToPointer() *Nbcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Nbcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Nbcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Nbcer504ApplicationJSONErrorDescriptionEnum string

const (
	Nbcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Nbcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Nbcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Nbcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nbcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Nbcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nbcer504ApplicationJSON - Gateway timeout
type Nbcer504ApplicationJSON struct {
	Error            *Nbcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nbcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nbcer503ApplicationJSONErrorEnum string

const (
	Nbcer503ApplicationJSONErrorEnumServiceUnavailable Nbcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Nbcer503ApplicationJSONErrorEnum) ToPointer() *Nbcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Nbcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Nbcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Nbcer503ApplicationJSONErrorDescriptionEnum string

const (
	Nbcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Nbcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Nbcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Nbcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nbcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Nbcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nbcer503ApplicationJSON - Service unavailable
type Nbcer503ApplicationJSON struct {
	Error            *Nbcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nbcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nbcer502ApplicationJSONErrorEnum string

const (
	Nbcer502ApplicationJSONErrorEnumBadGatewy Nbcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Nbcer502ApplicationJSONErrorEnum) ToPointer() *Nbcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Nbcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Nbcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Nbcer502ApplicationJSONErrorDescriptionEnum string

const (
	Nbcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Nbcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Nbcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Nbcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nbcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Nbcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nbcer502ApplicationJSON - Bad gateway
type Nbcer502ApplicationJSON struct {
	Error            *Nbcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nbcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nbcer500ApplicationJSONErrorEnum string

const (
	Nbcer500ApplicationJSONErrorEnumInternalServerError Nbcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Nbcer500ApplicationJSONErrorEnum) ToPointer() *Nbcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Nbcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Nbcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Nbcer500ApplicationJSONErrorDescriptionEnum string

const (
	Nbcer500ApplicationJSONErrorDescriptionEnumInternalServerError Nbcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Nbcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Nbcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nbcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Nbcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nbcer500ApplicationJSON - Internal server error
type Nbcer500ApplicationJSON struct {
	Error            *Nbcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nbcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nbcer404ApplicationJSONErrorEnum string

const (
	Nbcer404ApplicationJSONErrorEnumRecordNotFound Nbcer404ApplicationJSONErrorEnum = "record_not_found"
	Nbcer404ApplicationJSONErrorEnumURLNotFound    Nbcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Nbcer404ApplicationJSONErrorEnum) ToPointer() *Nbcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Nbcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Nbcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Nbcer404ApplicationJSONErrorDescriptionEnum string

const (
	Nbcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Nbcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Nbcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Nbcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Nbcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Nbcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nbcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Nbcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nbcer404ApplicationJSON - No record found
type Nbcer404ApplicationJSON struct {
	Error            *Nbcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nbcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nbcer401ApplicationJSONErrorEnum string

const (
	Nbcer401ApplicationJSONErrorEnumInvalidAuthentication Nbcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Nbcer401ApplicationJSONErrorEnumInvalidAuthorization  Nbcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Nbcer401ApplicationJSONErrorEnum) ToPointer() *Nbcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Nbcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Nbcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Nbcer401ApplicationJSONErrorDescriptionEnum string

const (
	Nbcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Nbcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Nbcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Nbcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Nbcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Nbcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nbcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Nbcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nbcer401ApplicationJSON - Unauthorized access
type Nbcer401ApplicationJSON struct {
	Error            *Nbcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nbcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nbcer400ApplicationJSONErrorEnum string

const (
	Nbcer400ApplicationJSONErrorEnumMissingParameter Nbcer400ApplicationJSONErrorEnum = "missing_parameter"
	Nbcer400ApplicationJSONErrorEnumInvalidParameter Nbcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Nbcer400ApplicationJSONErrorEnumInvalidFormat    Nbcer400ApplicationJSONErrorEnum = "invalid_format"
	Nbcer400ApplicationJSONErrorEnumInvalidTxnid     Nbcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Nbcer400ApplicationJSONErrorEnumInvalidConsentid Nbcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Nbcer400ApplicationJSONErrorEnum) ToPointer() *Nbcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Nbcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Nbcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Nbcer400ApplicationJSONErrorDescriptionEnum string

const (
	Nbcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Nbcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Nbcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Nbcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Nbcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Nbcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Nbcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Nbcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Nbcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Nbcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Nbcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Nbcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nbcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Nbcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nbcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nbcer400ApplicationJSON - Bad request
type Nbcer400ApplicationJSON struct {
	Error            *Nbcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nbcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NbcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Nbcer400ApplicationJSONObject *Nbcer400ApplicationJSON
	// Unauthorized access
	Nbcer401ApplicationJSONObject *Nbcer401ApplicationJSON
	// No record found
	Nbcer404ApplicationJSONObject *Nbcer404ApplicationJSON
	// Internal server error
	Nbcer500ApplicationJSONObject *Nbcer500ApplicationJSON
	// Bad gateway
	Nbcer502ApplicationJSONObject *Nbcer502ApplicationJSON
	// Service unavailable
	Nbcer503ApplicationJSONObject *Nbcer503ApplicationJSON
	// Gateway timeout
	Nbcer504ApplicationJSONObject *Nbcer504ApplicationJSON
}
