"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountaggregationsource as shared_accountaggregationsource
from ..shared import organizationaggregationsource as shared_organizationaggregationsource
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutConfigurationAggregatorRequest:
    
    configuration_aggregator_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationAggregatorName') }})  
    account_aggregation_sources: Optional[list[shared_accountaggregationsource.AccountAggregationSource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountAggregationSources'), 'exclude': lambda f: f is None }})  
    organization_aggregation_source: Optional[shared_organizationaggregationsource.OrganizationAggregationSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationAggregationSource'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    