"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TransactionRules:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_transaction_rules_transaction_rule_id(self, request: operations.DeleteTransactionRulesTransactionRuleIDRequest, security: operations.DeleteTransactionRulesTransactionRuleIDSecurity) -> operations.DeleteTransactionRulesTransactionRuleIDResponse:
        r"""Delete a transaction rule
        Deletes a transaction rule.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTransactionRulesTransactionRuleIDRequest, base_url, '/transactionRules/{transactionRuleId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTransactionRulesTransactionRuleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionRule])
                res.transaction_rule = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_transaction_rules_transaction_rule_id(self, request: operations.GetTransactionRulesTransactionRuleIDRequest, security: operations.GetTransactionRulesTransactionRuleIDSecurity) -> operations.GetTransactionRulesTransactionRuleIDResponse:
        r"""Get a transaction rule
        Returns the details of a transaction rule.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionRulesTransactionRuleIDRequest, base_url, '/transactionRules/{transactionRuleId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionRulesTransactionRuleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionRuleResponse])
                res.transaction_rule_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_transaction_rules_transaction_rule_id(self, request: operations.PatchTransactionRulesTransactionRuleIDRequest, security: operations.PatchTransactionRulesTransactionRuleIDSecurity) -> operations.PatchTransactionRulesTransactionRuleIDResponse:
        r"""Update a transaction rule
        Updates a transaction rule. 
        
        * To update only the status of a transaction rule, send only the `status` parameter. All other parameters not provided in the request are left unchanged.
        
        * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchTransactionRulesTransactionRuleIDRequest, base_url, '/transactionRules/{transactionRuleId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "transaction_rule_info", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchTransactionRulesTransactionRuleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionRule])
                res.transaction_rule = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_transaction_rules(self, request: shared.TransactionRuleInfo, security: operations.PostTransactionRulesSecurity) -> operations.PostTransactionRulesResponse:
        r"""Create a transaction rule
        Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/transactionRules'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTransactionRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionRule])
                res.transaction_rule = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    