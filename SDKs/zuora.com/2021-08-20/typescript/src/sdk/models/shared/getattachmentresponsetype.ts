/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class GETAttachmentResponseType extends SpeakeasyBase {
  /**
   * Zuora user id who added this attachment to the object.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  /**
   * Date and time when the attachment was added to the object.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdOn?: Date;

  /**
   * Description of the attachment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * File type.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileContentType" })
  fileContentType?: string;

  /**
   * File ID of the attached file. Use this file ID with [Get files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) to download the file.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileId" })
  fileId?: string;

  /**
   * Attachment file name.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileName" })
  fileName?: string;

  /**
   * Id of this attachment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Returns `true` if the request was processed successfully.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * Zuora user id who last updated the attachment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  updatedBy?: string;

  /**
   * Date and time when the attachment was last updated.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedOn?: Date;
}
