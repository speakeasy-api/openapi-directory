// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LegalEntityCapabilityAllowedLevelEnum - The capability level that is allowed for the legal entity.
//
// Possible values: **notApplicable**, **low**, **medium**, **high**.
type LegalEntityCapabilityAllowedLevelEnum string

const (
	LegalEntityCapabilityAllowedLevelEnumHigh          LegalEntityCapabilityAllowedLevelEnum = "high"
	LegalEntityCapabilityAllowedLevelEnumLow           LegalEntityCapabilityAllowedLevelEnum = "low"
	LegalEntityCapabilityAllowedLevelEnumMedium        LegalEntityCapabilityAllowedLevelEnum = "medium"
	LegalEntityCapabilityAllowedLevelEnumNotApplicable LegalEntityCapabilityAllowedLevelEnum = "notApplicable"
)

func (e *LegalEntityCapabilityAllowedLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "high":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "notApplicable":
		*e = LegalEntityCapabilityAllowedLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityCapabilityAllowedLevelEnum: %s", s)
	}
}

// LegalEntityCapabilityRequestedLevelEnum - The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
//
// Possible values: **notApplicable**, **low**, **medium**, **high**.
type LegalEntityCapabilityRequestedLevelEnum string

const (
	LegalEntityCapabilityRequestedLevelEnumHigh          LegalEntityCapabilityRequestedLevelEnum = "high"
	LegalEntityCapabilityRequestedLevelEnumLow           LegalEntityCapabilityRequestedLevelEnum = "low"
	LegalEntityCapabilityRequestedLevelEnumMedium        LegalEntityCapabilityRequestedLevelEnum = "medium"
	LegalEntityCapabilityRequestedLevelEnumNotApplicable LegalEntityCapabilityRequestedLevelEnum = "notApplicable"
)

func (e *LegalEntityCapabilityRequestedLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "high":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "notApplicable":
		*e = LegalEntityCapabilityRequestedLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityCapabilityRequestedLevelEnum: %s", s)
	}
}

type LegalEntityCapability struct {
	// Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful
	Allowed *bool `json:"allowed,omitempty"`
	// The capability level that is allowed for the legal entity.
	//
	// Possible values: **notApplicable**, **low**, **medium**, **high**.
	AllowedLevel    *LegalEntityCapabilityAllowedLevelEnum `json:"allowedLevel,omitempty"`
	AllowedSettings *CapabilitySettings                    `json:"allowedSettings,omitempty"`
	// Indicates whether the capability is requested. To check whether the Legal Entity is permitted to use the capability,
	Requested *bool `json:"requested,omitempty"`
	// The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
	//
	// Possible values: **notApplicable**, **low**, **medium**, **high**.
	RequestedLevel    *LegalEntityCapabilityRequestedLevelEnum `json:"requestedLevel,omitempty"`
	RequestedSettings *CapabilitySettings                      `json:"requestedSettings,omitempty"`
	// Capability status for transfer instruments associated with legal entity
	TransferInstruments []SupportingEntityCapability `json:"transferInstruments,omitempty"`
	// The status of the verification checks for the capability.
	//
	// Possible values:
	//
	// * **pending**: Adyen is running the verification.
	//
	// * **invalid**: The verification failed. Check if the `errors` array contains more information.
	//
	// * **valid**: The verification has been successfully completed.
	//
	// * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
	//
	VerificationStatus *string `json:"verificationStatus,omitempty"`
}
