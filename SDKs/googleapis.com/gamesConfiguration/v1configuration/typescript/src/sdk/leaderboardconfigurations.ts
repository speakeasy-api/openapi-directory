/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class LeaderboardConfigurations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete the leaderboard configuration with the given ID.
   */
  gamesConfigurationLeaderboardConfigurationsDelete(
    req: operations.GamesConfigurationLeaderboardConfigurationsDeleteRequest,
    security: operations.GamesConfigurationLeaderboardConfigurationsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesConfigurationLeaderboardConfigurationsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GamesConfigurationLeaderboardConfigurationsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1configuration/leaderboards/{leaderboardId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesConfigurationLeaderboardConfigurationsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesConfigurationLeaderboardConfigurationsDeleteResponse =
        new operations.GamesConfigurationLeaderboardConfigurationsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the metadata of the leaderboard configuration with the given ID.
   */
  gamesConfigurationLeaderboardConfigurationsGet(
    req: operations.GamesConfigurationLeaderboardConfigurationsGetRequest,
    security: operations.GamesConfigurationLeaderboardConfigurationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesConfigurationLeaderboardConfigurationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GamesConfigurationLeaderboardConfigurationsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1configuration/leaderboards/{leaderboardId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesConfigurationLeaderboardConfigurationsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesConfigurationLeaderboardConfigurationsGetResponse =
        new operations.GamesConfigurationLeaderboardConfigurationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaderboardConfiguration = utils.objectToClass(
              httpRes?.data,
              shared.LeaderboardConfiguration
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insert a new leaderboard configuration in this application.
   */
  gamesConfigurationLeaderboardConfigurationsInsert(
    req: operations.GamesConfigurationLeaderboardConfigurationsInsertRequest,
    security: operations.GamesConfigurationLeaderboardConfigurationsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesConfigurationLeaderboardConfigurationsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GamesConfigurationLeaderboardConfigurationsInsertRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1configuration/applications/{applicationId}/leaderboards",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "leaderboardConfiguration",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesConfigurationLeaderboardConfigurationsInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesConfigurationLeaderboardConfigurationsInsertResponse =
        new operations.GamesConfigurationLeaderboardConfigurationsInsertResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaderboardConfiguration = utils.objectToClass(
              httpRes?.data,
              shared.LeaderboardConfiguration
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of the leaderboard configurations in this application.
   */
  gamesConfigurationLeaderboardConfigurationsList(
    req: operations.GamesConfigurationLeaderboardConfigurationsListRequest,
    security: operations.GamesConfigurationLeaderboardConfigurationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesConfigurationLeaderboardConfigurationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GamesConfigurationLeaderboardConfigurationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1configuration/applications/{applicationId}/leaderboards",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesConfigurationLeaderboardConfigurationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesConfigurationLeaderboardConfigurationsListResponse =
        new operations.GamesConfigurationLeaderboardConfigurationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaderboardConfigurationListResponse = utils.objectToClass(
              httpRes?.data,
              shared.LeaderboardConfigurationListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the metadata of the leaderboard configuration with the given ID.
   */
  gamesConfigurationLeaderboardConfigurationsUpdate(
    req: operations.GamesConfigurationLeaderboardConfigurationsUpdateRequest,
    security: operations.GamesConfigurationLeaderboardConfigurationsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesConfigurationLeaderboardConfigurationsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GamesConfigurationLeaderboardConfigurationsUpdateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1configuration/leaderboards/{leaderboardId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "leaderboardConfiguration",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesConfigurationLeaderboardConfigurationsUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesConfigurationLeaderboardConfigurationsUpdateResponse =
        new operations.GamesConfigurationLeaderboardConfigurationsUpdateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaderboardConfiguration = utils.objectToClass(
              httpRes?.data,
              shared.LeaderboardConfiguration
            );
          }
          break;
      }

      return res;
    });
  }
}
