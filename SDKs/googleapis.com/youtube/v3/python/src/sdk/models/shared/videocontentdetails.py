"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accesspolicy as shared_accesspolicy
from ..shared import contentrating as shared_contentrating
from ..shared import videocontentdetailsregionrestriction as shared_videocontentdetailsregionrestriction
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VideoContentDetailsCaptionEnum(str, Enum):
    r"""The value of captions indicates whether the video has captions or not."""
    TRUE = 'true'
    FALSE = 'false'

class VideoContentDetailsDefinitionEnum(str, Enum):
    r"""The value of definition indicates whether the video is available in high definition or only in standard definition."""
    SD = 'sd'
    HD = 'hd'

class VideoContentDetailsProjectionEnum(str, Enum):
    r"""Specifies the projection format of the video."""
    RECTANGULAR = 'rectangular'
    THREE_HUNDRED_AND_SIXTY = '360'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoContentDetails:
    r"""Details about the content of a YouTube Video."""
    
    caption: Optional[VideoContentDetailsCaptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caption'), 'exclude': lambda f: f is None }})
    r"""The value of captions indicates whether the video has captions or not."""  
    content_rating: Optional[shared_contentrating.ContentRating] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentRating'), 'exclude': lambda f: f is None }})
    r"""Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange"""  
    country_restriction: Optional[shared_accesspolicy.AccessPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryRestriction'), 'exclude': lambda f: f is None }})
    r"""Rights management policy for YouTube resources."""  
    definition: Optional[VideoContentDetailsDefinitionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})
    r"""The value of definition indicates whether the video is available in high definition or only in standard definition."""  
    dimension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension'), 'exclude': lambda f: f is None }})
    r"""The value of dimension indicates whether the video is available in 3D or in 2D."""  
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long."""  
    has_custom_thumbnail: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasCustomThumbnail'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader."""  
    licensed_content: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licensedContent'), 'exclude': lambda f: f is None }})
    r"""The value of is_license_content indicates whether the video is licensed content."""  
    projection: Optional[VideoContentDetailsProjectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projection'), 'exclude': lambda f: f is None }})
    r"""Specifies the projection format of the video."""  
    region_restriction: Optional[shared_videocontentdetailsregionrestriction.VideoContentDetailsRegionRestriction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionRestriction'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED Region restriction of the video."""  
    