"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Search:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def search_bus_schedules(self, request: operations.SearchBusSchedulesRequest) -> operations.SearchBusSchedulesResponse:
        r"""Searches the bus schedules folder on S3 for a given bus number."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Search/BusSchedules'
        
        query_params = utils.get_query_params(operations.SearchBusSchedulesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchBusSchedulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesSearchResponse])
                res.tfl_api_presentation_entities_search_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesSearchResponse])
                res.tfl_api_presentation_entities_search_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def search_get(self, request: operations.SearchGetRequest) -> operations.SearchGetResponse:
        r"""Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size
                    of 100. To return subsequent pages, use the paginated overload.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Search'
        
        query_params = utils.get_query_params(operations.SearchGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesSearchResponse])
                res.tfl_api_presentation_entities_search_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesSearchResponse])
                res.tfl_api_presentation_entities_search_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def search_meta_categories(self) -> operations.SearchMetaCategoriesResponse:
        r"""Gets the available search categories."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Search/Meta/Categories'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchMetaCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.search_meta_categories_200_application_json_strings = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.search_meta_categories_200_text_json_strings = out

        return res

    def search_meta_search_providers(self) -> operations.SearchMetaSearchProvidersResponse:
        r"""Gets the available searchProvider names."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Search/Meta/SearchProviders'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchMetaSearchProvidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.search_meta_search_providers_200_application_json_strings = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.search_meta_search_providers_200_text_json_strings = out

        return res

    def search_meta_sorts(self) -> operations.SearchMetaSortsResponse:
        r"""Gets the available sorting options."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Search/Meta/Sorts'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchMetaSortsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.search_meta_sorts_200_application_json_strings = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.search_meta_sorts_200_text_json_strings = out

        return res

    