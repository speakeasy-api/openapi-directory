/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UserPasswordValidationPolicy - User level password validation policy.
 */
public class UserPasswordValidationPolicy {
    /**
     * Number of failed login attempts allowed before user get locked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedFailedAttempts")
    public Integer allowedFailedAttempts;
    public UserPasswordValidationPolicy withAllowedFailedAttempts(Integer allowedFailedAttempts) {
        this.allowedFailedAttempts = allowedFailedAttempts;
        return this;
    }
    
    /**
     * If true, failed login attempts check will be enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableFailedAttemptsCheck")
    public Boolean enableFailedAttemptsCheck;
    public UserPasswordValidationPolicy withEnableFailedAttemptsCheck(Boolean enableFailedAttemptsCheck) {
        this.enableFailedAttemptsCheck = enableFailedAttemptsCheck;
        return this;
    }
    
    /**
     * If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enablePasswordVerification")
    public Boolean enablePasswordVerification;
    public UserPasswordValidationPolicy withEnablePasswordVerification(Boolean enablePasswordVerification) {
        this.enablePasswordVerification = enablePasswordVerification;
        return this;
    }
    
    /**
     * Expiration duration after password is updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordExpirationDuration")
    public String passwordExpirationDuration;
    public UserPasswordValidationPolicy withPasswordExpirationDuration(String passwordExpirationDuration) {
        this.passwordExpirationDuration = passwordExpirationDuration;
        return this;
    }
    
    /**
     * Read-only password status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public PasswordStatus status;
    public UserPasswordValidationPolicy withStatus(PasswordStatus status) {
        this.status = status;
        return this;
    }
    
}
