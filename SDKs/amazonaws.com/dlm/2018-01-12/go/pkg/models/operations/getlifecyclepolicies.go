// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetLifecyclePoliciesStateEnum - The activation state.
type GetLifecyclePoliciesStateEnum string

const (
	GetLifecyclePoliciesStateEnumEnabled  GetLifecyclePoliciesStateEnum = "ENABLED"
	GetLifecyclePoliciesStateEnumDisabled GetLifecyclePoliciesStateEnum = "DISABLED"
	GetLifecyclePoliciesStateEnumError    GetLifecyclePoliciesStateEnum = "ERROR"
)

func (e *GetLifecyclePoliciesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "ERROR":
		*e = GetLifecyclePoliciesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLifecyclePoliciesStateEnum: %s", s)
	}
}

type GetLifecyclePoliciesRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The identifiers of the data lifecycle policies.
	PolicyIds []string `queryParam:"style=form,explode=true,name=policyIds"`
	// The resource type.
	ResourceTypes []shared.ResourceTypeValuesEnum `queryParam:"style=form,explode=true,name=resourceTypes"`
	// The activation state.
	State *GetLifecyclePoliciesStateEnum `queryParam:"style=form,explode=true,name=state"`
	// <p>The tags to add to objects created by the policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p> <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>
	TagsToAdd []string `queryParam:"style=form,explode=true,name=tagsToAdd"`
	// <p>The target tag for a policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p>
	TargetTags []string `queryParam:"style=form,explode=true,name=targetTags"`
}

type GetLifecyclePoliciesResponse struct {
	ContentType string
	// Success
	GetLifecyclePoliciesResponse *shared.GetLifecyclePoliciesResponse
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
