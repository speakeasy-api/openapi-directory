"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ThreeDSAvailabilityRequest:
    
    merchant_account: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantAccount') }})
    r"""The merchant account identifier."""  
    additional_data: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalData'), 'exclude': lambda f: f is None }})
    r"""This field contains additional data, which may be required for a particular request.
    
    The `additionalData` object consists of entries, each of which includes the key and value.
    """  
    brands: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brands'), 'exclude': lambda f: f is None }})
    r"""List of brands."""  
    card_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardNumber'), 'exclude': lambda f: f is None }})
    r"""Card number or BIN."""  
    recurring_detail_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringDetailReference'), 'exclude': lambda f: f is None }})
    r"""A recurring detail reference corresponding to a card."""  
    shopper_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperReference'), 'exclude': lambda f: f is None }})
    r"""The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID)."""  
    