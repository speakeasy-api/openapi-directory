"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import asset as shared_asset
from ..shared import statementtemplate as shared_statementtemplate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BulkCheckRequest:
    r"""Message used to check for the existence of multiple digital asset links within a single RPC."""
    
    allow_google_internal_data_sources: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowGoogleInternalDataSources'), 'exclude': lambda f: f is None }})
    r"""Same configuration as in Check request, all statements checks will use same configurations."""  
    default_relation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultRelation'), 'exclude': lambda f: f is None }})
    r"""If specified, will be used in any given template statement that doesnâ€™t specify a relation."""  
    default_source: Optional[shared_asset.Asset] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultSource'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies an asset. A digital asset is an identifiable and addressable online entity that typically provides some service or content. Examples of assets are websites, Android apps, Twitter feeds, and Plus Pages."""  
    default_target: Optional[shared_asset.Asset] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultTarget'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies an asset. A digital asset is an identifiable and addressable online entity that typically provides some service or content. Examples of assets are websites, Android apps, Twitter feeds, and Plus Pages."""  
    skip_cache_lookup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipCacheLookup'), 'exclude': lambda f: f is None }})
    r"""Same configuration as in Check request, all statements checks will use same configurations."""  
    statements: Optional[list[shared_statementtemplate.StatementTemplate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statements'), 'exclude': lambda f: f is None }})
    r"""List of statements to check. For each statement, you can omit a field if the corresponding default_* field below was supplied. Minimum 1 statement; maximum 1,000 statements. Any additional statements will be ignored."""  
    