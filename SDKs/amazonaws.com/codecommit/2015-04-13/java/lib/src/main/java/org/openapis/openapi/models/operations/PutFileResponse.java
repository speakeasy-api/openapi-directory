/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class PutFileResponse {
    /**
     * BranchDoesNotExistException
     */
    
    public Object branchDoesNotExistException;

    public PutFileResponse withBranchDoesNotExistException(Object branchDoesNotExistException) {
        this.branchDoesNotExistException = branchDoesNotExistException;
        return this;
    }
    
    /**
     * BranchNameIsTagNameException
     */
    
    public Object branchNameIsTagNameException;

    public PutFileResponse withBranchNameIsTagNameException(Object branchNameIsTagNameException) {
        this.branchNameIsTagNameException = branchNameIsTagNameException;
        return this;
    }
    
    /**
     * BranchNameRequiredException
     */
    
    public Object branchNameRequiredException;

    public PutFileResponse withBranchNameRequiredException(Object branchNameRequiredException) {
        this.branchNameRequiredException = branchNameRequiredException;
        return this;
    }
    
    /**
     * CommitMessageLengthExceededException
     */
    
    public Object commitMessageLengthExceededException;

    public PutFileResponse withCommitMessageLengthExceededException(Object commitMessageLengthExceededException) {
        this.commitMessageLengthExceededException = commitMessageLengthExceededException;
        return this;
    }
    
    
    public String contentType;

    public PutFileResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * DirectoryNameConflictsWithFileNameException
     */
    
    public Object directoryNameConflictsWithFileNameException;

    public PutFileResponse withDirectoryNameConflictsWithFileNameException(Object directoryNameConflictsWithFileNameException) {
        this.directoryNameConflictsWithFileNameException = directoryNameConflictsWithFileNameException;
        return this;
    }
    
    /**
     * EncryptionIntegrityChecksFailedException
     */
    
    public Object encryptionIntegrityChecksFailedException;

    public PutFileResponse withEncryptionIntegrityChecksFailedException(Object encryptionIntegrityChecksFailedException) {
        this.encryptionIntegrityChecksFailedException = encryptionIntegrityChecksFailedException;
        return this;
    }
    
    /**
     * EncryptionKeyAccessDeniedException
     */
    
    public Object encryptionKeyAccessDeniedException;

    public PutFileResponse withEncryptionKeyAccessDeniedException(Object encryptionKeyAccessDeniedException) {
        this.encryptionKeyAccessDeniedException = encryptionKeyAccessDeniedException;
        return this;
    }
    
    /**
     * EncryptionKeyDisabledException
     */
    
    public Object encryptionKeyDisabledException;

    public PutFileResponse withEncryptionKeyDisabledException(Object encryptionKeyDisabledException) {
        this.encryptionKeyDisabledException = encryptionKeyDisabledException;
        return this;
    }
    
    /**
     * EncryptionKeyNotFoundException
     */
    
    public Object encryptionKeyNotFoundException;

    public PutFileResponse withEncryptionKeyNotFoundException(Object encryptionKeyNotFoundException) {
        this.encryptionKeyNotFoundException = encryptionKeyNotFoundException;
        return this;
    }
    
    /**
     * EncryptionKeyUnavailableException
     */
    
    public Object encryptionKeyUnavailableException;

    public PutFileResponse withEncryptionKeyUnavailableException(Object encryptionKeyUnavailableException) {
        this.encryptionKeyUnavailableException = encryptionKeyUnavailableException;
        return this;
    }
    
    /**
     * FileContentRequiredException
     */
    
    public Object fileContentRequiredException;

    public PutFileResponse withFileContentRequiredException(Object fileContentRequiredException) {
        this.fileContentRequiredException = fileContentRequiredException;
        return this;
    }
    
    /**
     * FileContentSizeLimitExceededException
     */
    
    public Object fileContentSizeLimitExceededException;

    public PutFileResponse withFileContentSizeLimitExceededException(Object fileContentSizeLimitExceededException) {
        this.fileContentSizeLimitExceededException = fileContentSizeLimitExceededException;
        return this;
    }
    
    /**
     * FileNameConflictsWithDirectoryNameException
     */
    
    public Object fileNameConflictsWithDirectoryNameException;

    public PutFileResponse withFileNameConflictsWithDirectoryNameException(Object fileNameConflictsWithDirectoryNameException) {
        this.fileNameConflictsWithDirectoryNameException = fileNameConflictsWithDirectoryNameException;
        return this;
    }
    
    /**
     * FilePathConflictsWithSubmodulePathException
     */
    
    public Object filePathConflictsWithSubmodulePathException;

    public PutFileResponse withFilePathConflictsWithSubmodulePathException(Object filePathConflictsWithSubmodulePathException) {
        this.filePathConflictsWithSubmodulePathException = filePathConflictsWithSubmodulePathException;
        return this;
    }
    
    /**
     * FolderContentSizeLimitExceededException
     */
    
    public Object folderContentSizeLimitExceededException;

    public PutFileResponse withFolderContentSizeLimitExceededException(Object folderContentSizeLimitExceededException) {
        this.folderContentSizeLimitExceededException = folderContentSizeLimitExceededException;
        return this;
    }
    
    /**
     * InvalidBranchNameException
     */
    
    public Object invalidBranchNameException;

    public PutFileResponse withInvalidBranchNameException(Object invalidBranchNameException) {
        this.invalidBranchNameException = invalidBranchNameException;
        return this;
    }
    
    /**
     * InvalidDeletionParameterException
     */
    
    public Object invalidDeletionParameterException;

    public PutFileResponse withInvalidDeletionParameterException(Object invalidDeletionParameterException) {
        this.invalidDeletionParameterException = invalidDeletionParameterException;
        return this;
    }
    
    /**
     * InvalidEmailException
     */
    
    public Object invalidEmailException;

    public PutFileResponse withInvalidEmailException(Object invalidEmailException) {
        this.invalidEmailException = invalidEmailException;
        return this;
    }
    
    /**
     * InvalidFileModeException
     */
    
    public Object invalidFileModeException;

    public PutFileResponse withInvalidFileModeException(Object invalidFileModeException) {
        this.invalidFileModeException = invalidFileModeException;
        return this;
    }
    
    /**
     * InvalidParentCommitIdException
     */
    
    public Object invalidParentCommitIdException;

    public PutFileResponse withInvalidParentCommitIdException(Object invalidParentCommitIdException) {
        this.invalidParentCommitIdException = invalidParentCommitIdException;
        return this;
    }
    
    /**
     * InvalidPathException
     */
    
    public Object invalidPathException;

    public PutFileResponse withInvalidPathException(Object invalidPathException) {
        this.invalidPathException = invalidPathException;
        return this;
    }
    
    /**
     * InvalidRepositoryNameException
     */
    
    public Object invalidRepositoryNameException;

    public PutFileResponse withInvalidRepositoryNameException(Object invalidRepositoryNameException) {
        this.invalidRepositoryNameException = invalidRepositoryNameException;
        return this;
    }
    
    /**
     * NameLengthExceededException
     */
    
    public Object nameLengthExceededException;

    public PutFileResponse withNameLengthExceededException(Object nameLengthExceededException) {
        this.nameLengthExceededException = nameLengthExceededException;
        return this;
    }
    
    /**
     * ParentCommitDoesNotExistException
     */
    
    public Object parentCommitDoesNotExistException;

    public PutFileResponse withParentCommitDoesNotExistException(Object parentCommitDoesNotExistException) {
        this.parentCommitDoesNotExistException = parentCommitDoesNotExistException;
        return this;
    }
    
    /**
     * ParentCommitIdOutdatedException
     */
    
    public Object parentCommitIdOutdatedException;

    public PutFileResponse withParentCommitIdOutdatedException(Object parentCommitIdOutdatedException) {
        this.parentCommitIdOutdatedException = parentCommitIdOutdatedException;
        return this;
    }
    
    /**
     * ParentCommitIdRequiredException
     */
    
    public Object parentCommitIdRequiredException;

    public PutFileResponse withParentCommitIdRequiredException(Object parentCommitIdRequiredException) {
        this.parentCommitIdRequiredException = parentCommitIdRequiredException;
        return this;
    }
    
    /**
     * PathRequiredException
     */
    
    public Object pathRequiredException;

    public PutFileResponse withPathRequiredException(Object pathRequiredException) {
        this.pathRequiredException = pathRequiredException;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.PutFileOutput putFileOutput;

    public PutFileResponse withPutFileOutput(org.openapis.openapi.models.shared.PutFileOutput putFileOutput) {
        this.putFileOutput = putFileOutput;
        return this;
    }
    
    /**
     * RepositoryDoesNotExistException
     */
    
    public Object repositoryDoesNotExistException;

    public PutFileResponse withRepositoryDoesNotExistException(Object repositoryDoesNotExistException) {
        this.repositoryDoesNotExistException = repositoryDoesNotExistException;
        return this;
    }
    
    /**
     * RepositoryNameRequiredException
     */
    
    public Object repositoryNameRequiredException;

    public PutFileResponse withRepositoryNameRequiredException(Object repositoryNameRequiredException) {
        this.repositoryNameRequiredException = repositoryNameRequiredException;
        return this;
    }
    
    
    public Integer statusCode;

    public PutFileResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public PutFileResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * SameFileContentException
     */
    
    public Object sameFileContentException;

    public PutFileResponse withSameFileContentException(Object sameFileContentException) {
        this.sameFileContentException = sameFileContentException;
        return this;
    }
    
    public PutFileResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
