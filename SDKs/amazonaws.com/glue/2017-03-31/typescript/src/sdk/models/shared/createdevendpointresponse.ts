/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { WorkerTypeEnum } from "./workertypeenum";
import { Expose, Transform } from "class-transformer";

/**
 * Success
 */
export class CreateDevEndpointResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Arguments" })
  arguments?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "AvailabilityZone" })
  availabilityZone?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "EndpointName" })
  endpointName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExtraJarsS3Path" })
  extraJarsS3Path?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExtraPythonLibsS3Path" })
  extraPythonLibsS3Path?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FailureReason" })
  failureReason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "GlueVersion" })
  glueVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfNodes" })
  numberOfNodes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfWorkers" })
  numberOfWorkers?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "RoleArn" })
  roleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SecurityConfiguration" })
  securityConfiguration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SecurityGroupIds" })
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SubnetId" })
  subnetId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "VpcId" })
  vpcId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "WorkerType" })
  workerType?: WorkerTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "YarnEndpointAddress" })
  yarnEndpointAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ZeppelinRemoteSparkInterpreterPort" })
  zeppelinRemoteSparkInterpreterPort?: number;
}
