<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EmailLists 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create new email list
     * 
     * Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddEmailListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddEmailListResponse
     */
	public function addEmailList(
        \OpenAPI\OpenAPI\Models\Operations\AddEmailListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddEmailListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/email-lists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddEmailListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emailListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmailListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an email group with given id
     * 
     * Permanently delete an email group. This action is not reversible. We recommend making a user confirm this action before sending the API call. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEmailListByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEmailListByIdResponse
     */
	public function deleteEmailListById(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEmailListByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEmailListByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/email-lists/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteEmailListByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEmailListByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emptyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmptyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get individual email group
     * 
     * Retrieve all the details of a specific email list including it's name, when it was created and all the email addresses that belong to the group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmailListByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEmailListByIdResponse
     */
	public function getEmailListById(
        \OpenAPI\OpenAPI\Models\Operations\GetEmailListByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEmailListByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/email-lists/{id}', \OpenAPI\OpenAPI\Models\Operations\GetEmailListByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEmailListByIdRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEmailListByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emailListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmailListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all email groups
     * 
     * List all email groups for authenticated user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmailListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEmailListsResponse
     */
	public function getEmailLists(
        \OpenAPI\OpenAPI\Models\Operations\GetEmailListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEmailListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/email-lists');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEmailListsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEmailListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emailListCollectionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmailListCollectionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an email group
     * 
     * Add or remove emails from an email list that can be used to send and share files with groups. 
     * 
     * **Notes**
     * 
     * *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEmailListByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateEmailListByIdResponse
     */
	public function updateEmailListById(
        \OpenAPI\OpenAPI\Models\Operations\UpdateEmailListByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateEmailListByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/email-lists/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateEmailListByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateEmailListByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emailListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmailListResponse', 'json');
            }
        }

        return $response;
    }
}