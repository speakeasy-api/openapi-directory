/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class AppsactivityActivitiesListRequest {
    /**
     * Data format for the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public AppsactivityActivitiesListRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * Identifies the Drive folder containing the items for which to return activities.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=drive.ancestorId")
    public String driveAncestorId;
    public AppsactivityActivitiesListRequest withDriveAncestorId(String driveAncestorId) {
        this.driveAncestorId = driveAncestorId;
        return this;
    }
    
    /**
     * Identifies the Drive item to return activities for.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=drive.fileId")
    public String driveFileId;
    public AppsactivityActivitiesListRequest withDriveFileId(String driveFileId) {
        this.driveFileId = driveFileId;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public AppsactivityActivitiesListRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=groupingStrategy")
    public AppsactivityActivitiesListGroupingStrategyEnum groupingStrategy;
    public AppsactivityActivitiesListRequest withGroupingStrategy(AppsactivityActivitiesListGroupingStrategyEnum groupingStrategy) {
        this.groupingStrategy = groupingStrategy;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public AppsactivityActivitiesListRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public AppsactivityActivitiesListRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * The maximum number of events to return on a page. The response includes a continuation token if there are more events.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    public Long pageSize;
    public AppsactivityActivitiesListRequest withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * A token to retrieve a specific page of results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;
    public AppsactivityActivitiesListRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public AppsactivityActivitiesListRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public AppsactivityActivitiesListRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * The Google service from which to return activities. Possible values of source are: 
     * - drive.google.com
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=source")
    public String source;
    public AppsactivityActivitiesListRequest withSource(String source) {
        this.source = source;
        return this;
    }
    
    /**
     * The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userId")
    public String userId;
    public AppsactivityActivitiesListRequest withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Deprecated. Please use quotaUser instead.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userIp")
    public String userIp;
    public AppsactivityActivitiesListRequest withUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }
    
}
