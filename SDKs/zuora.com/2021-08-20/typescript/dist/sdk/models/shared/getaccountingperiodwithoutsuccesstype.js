"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GETAccountingPeriodWithoutSuccessType = exports.GETAccountingPeriodWithoutSuccessTypeFileIds = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) REST API call.
 *
 * @remarks
 *
 */
var GETAccountingPeriodWithoutSuccessTypeFileIds = /** @class */ (function (_super) {
    __extends(GETAccountingPeriodWithoutSuccessTypeFileIds, _super);
    function GETAccountingPeriodWithoutSuccessTypeFileIds() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountsReceivableAccountAgingDetailExportFileId" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessTypeFileIds.prototype, "accountsReceivableAccountAgingDetailExportFileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountsReceivableInvoiceAgingDetailExportFileId" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessTypeFileIds.prototype, "accountsReceivableInvoiceAgingDetailExportFileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "arRollForwardDetailExportFileId" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessTypeFileIds.prototype, "arRollForwardDetailExportFileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fxRealizedGainAndLossDetailExportFileId" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessTypeFileIds.prototype, "fxRealizedGainAndLossDetailExportFileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fxUnrealizedGainAndLossDetailExportFileId" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessTypeFileIds.prototype, "fxUnrealizedGainAndLossDetailExportFileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "revenueDetailCsvFileId" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessTypeFileIds.prototype, "revenueDetailCsvFileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "revenueDetailExcelFileId" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessTypeFileIds.prototype, "revenueDetailExcelFileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "unprocessedChargesFileId" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessTypeFileIds.prototype, "unprocessedChargesFileId", void 0);
    return GETAccountingPeriodWithoutSuccessTypeFileIds;
}(utils_1.SpeakeasyBase));
exports.GETAccountingPeriodWithoutSuccessTypeFileIds = GETAccountingPeriodWithoutSuccessTypeFileIds;
/**
 * Container for custom fields of an Accounting Period object.
 *
 * @remarks
 *
 */
var GETAccountingPeriodWithoutSuccessType = /** @class */ (function (_super) {
    __extends(GETAccountingPeriodWithoutSuccessType, _super);
    function GETAccountingPeriodWithoutSuccessType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdBy" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "createdBy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdOn" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "createdOn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "endDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "endDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fileIds" }),
        (0, class_transformer_1.Type)(function () { return GETAccountingPeriodWithoutSuccessTypeFileIds; }),
        __metadata("design:type", GETAccountingPeriodWithoutSuccessTypeFileIds)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "fileIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fiscalYear" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "fiscalYear", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fiscal_quarter" }),
        __metadata("design:type", Number)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "fiscalQuarter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "notes" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "notes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "runTrialBalanceEnd" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "runTrialBalanceEnd", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "runTrialBalanceErrorMessage" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "runTrialBalanceErrorMessage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "runTrialBalanceStart" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "runTrialBalanceStart", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "runTrialBalanceStatus" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "runTrialBalanceStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "startDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatedBy" }),
        __metadata("design:type", String)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "updatedBy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatedOn" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GETAccountingPeriodWithoutSuccessType.prototype, "updatedOn", void 0);
    return GETAccountingPeriodWithoutSuccessType;
}(utils_1.SpeakeasyBase));
exports.GETAccountingPeriodWithoutSuccessType = GETAccountingPeriodWithoutSuccessType;
