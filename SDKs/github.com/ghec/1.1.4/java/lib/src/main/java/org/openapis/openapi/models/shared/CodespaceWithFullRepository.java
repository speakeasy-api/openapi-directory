/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CodespaceWithFullRepository - A codespace.
 */
public class CodespaceWithFullRepository {
    /**
     * A GitHub user.
     */
    @JsonProperty("billable_owner")
    public SimpleUser billableOwner;
    public CodespaceWithFullRepository withBillableOwner(SimpleUser billableOwner) {
        this.billableOwner = billableOwner;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public CodespaceWithFullRepository withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Path to devcontainer.json from repo root used to create Codespace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("devcontainer_path")
    public String devcontainerPath;
    public CodespaceWithFullRepository withDevcontainerPath(String devcontainerPath) {
        this.devcontainerPath = devcontainerPath;
        return this;
    }
    
    /**
     * Display name for this codespace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    public String displayName;
    public CodespaceWithFullRepository withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * UUID identifying this codespace's environment.
     */
    @JsonProperty("environment_id")
    public String environmentId;
    public CodespaceWithFullRepository withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }
    
    /**
     * Details about the codespace's git repository.
     */
    @JsonProperty("git_status")
    public CodespaceWithFullRepositoryGitStatus gitStatus;
    public CodespaceWithFullRepository withGitStatus(CodespaceWithFullRepositoryGitStatus gitStatus) {
        this.gitStatus = gitStatus;
        return this;
    }
    
    @JsonProperty("id")
    public Long id;
    public CodespaceWithFullRepository withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The number of minutes of inactivity after which this codespace will be automatically stopped.
     */
    @JsonProperty("idle_timeout_minutes")
    public Long idleTimeoutMinutes;
    public CodespaceWithFullRepository withIdleTimeoutMinutes(Long idleTimeoutMinutes) {
        this.idleTimeoutMinutes = idleTimeoutMinutes;
        return this;
    }
    
    /**
     * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idle_timeout_notice")
    public String idleTimeoutNotice;
    public CodespaceWithFullRepository withIdleTimeoutNotice(String idleTimeoutNotice) {
        this.idleTimeoutNotice = idleTimeoutNotice;
        return this;
    }
    
    /**
     * Last known time this codespace was started.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_used_at")
    public OffsetDateTime lastUsedAt;
    public CodespaceWithFullRepository withLastUsedAt(OffsetDateTime lastUsedAt) {
        this.lastUsedAt = lastUsedAt;
        return this;
    }
    
    /**
     * The Azure region where this codespace is located.
     */
    @JsonProperty("location")
    public CodespaceWithFullRepositoryLocationEnum location;
    public CodespaceWithFullRepository withLocation(CodespaceWithFullRepositoryLocationEnum location) {
        this.location = location;
        return this;
    }
    
    /**
     * A description of the machine powering a codespace.
     */
    @JsonProperty("machine")
    public NullableCodespaceMachine machine;
    public CodespaceWithFullRepository withMachine(NullableCodespaceMachine machine) {
        this.machine = machine;
        return this;
    }
    
    /**
     * API URL to access available alternate machine types for this codespace.
     */
    @JsonProperty("machines_url")
    public String machinesUrl;
    public CodespaceWithFullRepository withMachinesUrl(String machinesUrl) {
        this.machinesUrl = machinesUrl;
        return this;
    }
    
    /**
     * Automatically generated name of this codespace.
     */
    @JsonProperty("name")
    public String name;
    public CodespaceWithFullRepository withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A GitHub user.
     */
    @JsonProperty("owner")
    public SimpleUser owner;
    public CodespaceWithFullRepository withOwner(SimpleUser owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_operation")
    public Boolean pendingOperation;
    public CodespaceWithFullRepository withPendingOperation(Boolean pendingOperation) {
        this.pendingOperation = pendingOperation;
        return this;
    }
    
    /**
     * Text to show user when codespace is disabled by a pending operation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_operation_disabled_reason")
    public String pendingOperationDisabledReason;
    public CodespaceWithFullRepository withPendingOperationDisabledReason(String pendingOperationDisabledReason) {
        this.pendingOperationDisabledReason = pendingOperationDisabledReason;
        return this;
    }
    
    /**
     * Whether the codespace was created from a prebuild.
     */
    @JsonProperty("prebuild")
    public Boolean prebuild;
    public CodespaceWithFullRepository withPrebuild(Boolean prebuild) {
        this.prebuild = prebuild;
        return this;
    }
    
    /**
     * API URL to publish this codespace to a new repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publish_url")
    public String publishUrl;
    public CodespaceWithFullRepository withPublishUrl(String publishUrl) {
        this.publishUrl = publishUrl;
        return this;
    }
    
    /**
     * API URL for the Pull Request associated with this codespace, if any.
     */
    @JsonProperty("pulls_url")
    public String pullsUrl;
    public CodespaceWithFullRepository withPullsUrl(String pullsUrl) {
        this.pullsUrl = pullsUrl;
        return this;
    }
    
    @JsonProperty("recent_folders")
    public String[] recentFolders;
    public CodespaceWithFullRepository withRecentFolders(String[] recentFolders) {
        this.recentFolders = recentFolders;
        return this;
    }
    
    /**
     * Full Repository
     */
    @JsonProperty("repository")
    public FullRepository repository;
    public CodespaceWithFullRepository withRepository(FullRepository repository) {
        this.repository = repository;
        return this;
    }
    
    /**
     * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("retention_expires_at")
    public OffsetDateTime retentionExpiresAt;
    public CodespaceWithFullRepository withRetentionExpiresAt(OffsetDateTime retentionExpiresAt) {
        this.retentionExpiresAt = retentionExpiresAt;
        return this;
    }
    
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retention_period_minutes")
    public Long retentionPeriodMinutes;
    public CodespaceWithFullRepository withRetentionPeriodMinutes(Long retentionPeriodMinutes) {
        this.retentionPeriodMinutes = retentionPeriodMinutes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtime_constraints")
    public CodespaceWithFullRepositoryRuntimeConstraints runtimeConstraints;
    public CodespaceWithFullRepository withRuntimeConstraints(CodespaceWithFullRepositoryRuntimeConstraints runtimeConstraints) {
        this.runtimeConstraints = runtimeConstraints;
        return this;
    }
    
    /**
     * API URL to start this codespace.
     */
    @JsonProperty("start_url")
    public String startUrl;
    public CodespaceWithFullRepository withStartUrl(String startUrl) {
        this.startUrl = startUrl;
        return this;
    }
    
    /**
     * State of this codespace.
     */
    @JsonProperty("state")
    public CodespaceWithFullRepositoryStateEnum state;
    public CodespaceWithFullRepository withState(CodespaceWithFullRepositoryStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * API URL to stop this codespace.
     */
    @JsonProperty("stop_url")
    public String stopUrl;
    public CodespaceWithFullRepository withStopUrl(String stopUrl) {
        this.stopUrl = stopUrl;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public CodespaceWithFullRepository withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * API URL for this codespace.
     */
    @JsonProperty("url")
    public String url;
    public CodespaceWithFullRepository withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * URL to access this codespace on the web.
     */
    @JsonProperty("web_url")
    public String webUrl;
    public CodespaceWithFullRepository withWebUrl(String webUrl) {
        this.webUrl = webUrl;
        return this;
    }
    
}
