<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Agr 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get affected genomic models (rat strains with gene alleles) submitted by RGD to AGR by taxonId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAffectedGenomicModelsUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAffectedGenomicModelsUsingGETResponse
     */
	public function getAffectedGenomicModelsUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAffectedGenomicModelsUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAffectedGenomicModelsUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/agr/affectedGenomicModels/{taxonId}', \OpenAPI\OpenAPI\Models\Operations\GETAffectedGenomicModelsUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAffectedGenomicModelsUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get gene allele records submitted by RGD to AGR by taxonId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAllelesForTaxonUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAllelesForTaxonUsingGETResponse
     */
	public function getAllelesForTaxonUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAllelesForTaxonUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAllelesForTaxonUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/agr/alleles/{taxonId}', \OpenAPI\OpenAPI\Models\Operations\GETAllelesForTaxonUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAllelesForTaxonUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get expression annotations submitted by RGD to AGR by taxonId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETExpressionForTaxonUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETExpressionForTaxonUsingGETResponse
     */
	public function getExpressionForTaxonUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETExpressionForTaxonUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETExpressionForTaxonUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/agr/expression/{taxonId}', \OpenAPI\OpenAPI\Models\Operations\GETExpressionForTaxonUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETExpressionForTaxonUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get gene records submitted by RGD to AGR by taxonId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenesForLatestAssemblyUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenesForLatestAssemblyUsingGETResponse
     */
	public function getGenesForLatestAssemblyUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenesForLatestAssemblyUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenesForLatestAssemblyUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/agr/{taxonId}', \OpenAPI\OpenAPI\Models\Operations\GETGenesForLatestAssemblyUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenesForLatestAssemblyUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get phenotype annotations submitted by RGD to AGR by taxonId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETPhenotypesForTaxonUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETPhenotypesForTaxonUsingGETResponse
     */
	public function getPhenotypesForTaxonUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETPhenotypesForTaxonUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETPhenotypesForTaxonUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/agr/phenotypes/{taxonId}', \OpenAPI\OpenAPI\Models\Operations\GETPhenotypesForTaxonUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETPhenotypesForTaxonUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get basic variant records submitted by RGD to AGR by taxonId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETVariantsForTaxonUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETVariantsForTaxonUsingGETResponse
     */
	public function getVariantsForTaxonUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETVariantsForTaxonUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETVariantsForTaxonUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/agr/variants/{taxonId}', \OpenAPI\OpenAPI\Models\Operations\GETVariantsForTaxonUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETVariantsForTaxonUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}