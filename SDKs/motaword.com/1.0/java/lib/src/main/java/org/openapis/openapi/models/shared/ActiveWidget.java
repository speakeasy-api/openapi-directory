/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ActiveWidget - Updated widget details
 */
public class ActiveWidget {
    /**
     * When true, hash params are included in filenames. When false, params are ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_hash_in_url")
    public Boolean allowHashInUrl;
    public ActiveWidget withAllowHashInUrl(Boolean allowHashInUrl) {
        this.allowHashInUrl = allowHashInUrl;
        return this;
    }
    
    /**
     * When true, query params are included in filenames. When false, params are ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_query_in_url")
    public Boolean allowQueryInUrl;
    public ActiveWidget withAllowQueryInUrl(Boolean allowQueryInUrl) {
        this.allowQueryInUrl = allowQueryInUrl;
        return this;
    }
    
    /**
     * When true, we will ignore the source language of your project and try to automatically detect the source language of the given content. This is especially useful in environments with unpredictable source contents, such as a chat environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_detect_source_language")
    public Boolean autoDetectSourceLanguage;
    public ActiveWidget withAutoDetectSourceLanguage(Boolean autoDetectSourceLanguage) {
        this.autoDetectSourceLanguage = autoDetectSourceLanguage;
        return this;
    }
    
    /**
     * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public ActiveWidget withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Continuous project exclusive elements and rules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elements")
    public String elements;
    public ActiveWidget withElements(String elements) {
        this.elements = elements;
        return this;
    }
    
    /**
     * Specify whether we should follow the user around in your website and automatically translate pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("follow_user")
    public Boolean followUser;
    public ActiveWidget withFollowUser(Boolean followUser) {
        this.followUser = followUser;
        return this;
    }
    
    /**
     * Determines whether to force-refresh local browser cache of your translations in certain period of times, no matter if there is a new activity in the project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("force_cache_refresh_interval")
    public Boolean forceCacheRefreshInterval;
    public ActiveWidget withForceCacheRefreshInterval(Boolean forceCacheRefreshInterval) {
        this.forceCacheRefreshInterval = forceCacheRefreshInterval;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public ActiveWidget withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Continuous project language mappings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language_mappings")
    public String languageMappings;
    public ActiveWidget withLanguageMappings(String languageMappings) {
        this.languageMappings = languageMappings;
        return this;
    }
    
    /**
     * Whether ActiveJS should be considered live in an embedded site. Use `false` if you are still testing Active. Go to your Active dashboard and follow links to your website to actually test Active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("live")
    public Boolean live;
    public ActiveWidget withLive(Boolean live) {
        this.live = live;
        return this;
    }
    
    /**
     * We can automatically localize the same-domain URLs in your page. The way we localize the URL depends on urlMode configuration. We can either add/update the locale query parameter, or add/update the path of the URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modify_links")
    public Boolean modifyLinks;
    public ActiveWidget withModifyLinks(Boolean modifyLinks) {
        this.modifyLinks = modifyLinks;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ActiveWidget withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * When true, Active ecosystem will optimize the script and data flows per page, rather than per project. This decreases the bandwidth usage per script, but makes translation publishing more complex and script serving per-page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optimize_per_page")
    public Boolean optimizePerPage;
    public ActiveWidget withOptimizePerPage(Boolean optimizePerPage) {
        this.optimizePerPage = optimizePerPage;
        return this;
    }
    
    /**
     * Continuous project page rules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pages")
    public String pages;
    public ActiveWidget withPages(String pages) {
        this.pages = pages;
        return this;
    }
    
    /**
     * Custom regex for path-type URL mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path_regex")
    public String pathRegex;
    public ActiveWidget withPathRegex(String pathRegex) {
        this.pathRegex = pathRegex;
        return this;
    }
    
    /**
     * Options are "bottom-left", "bottom-right", "in-place"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public String position;
    public ActiveWidget withPosition(String position) {
        this.position = position;
        return this;
    }
    
    /**
     * Query parameter name to be used with query-type URL mode. Default is 'locale'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_name")
    public String queryName;
    public ActiveWidget withQueryName(String queryName) {
        this.queryName = queryName;
        return this;
    }
    
    /**
     * When true, Active ecosystem reboots itself when url changes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reboot_on_url_change")
    public Boolean rebootOnUrlChange;
    public ActiveWidget withRebootOnUrlChange(Boolean rebootOnUrlChange) {
        this.rebootOnUrlChange = rebootOnUrlChange;
        return this;
    }
    
    /**
     * JSON string for a list of domains that this widget's API interactions are limited to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restricted_domains")
    public String restrictedDomains;
    public ActiveWidget withRestrictedDomains(String restrictedDomains) {
        this.restrictedDomains = restrictedDomains;
        return this;
    }
    
    /**
     * Continuous project section rules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sections")
    public String sections;
    public ActiveWidget withSections(String sections) {
        this.sections = sections;
        return this;
    }
    
    /**
     * Is the Active Widget in test mode? This changes a couple behaviors in the widget to make it easier for you to test and develop your Active integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test_mode")
    public Boolean testMode;
    public ActiveWidget withTestMode(Boolean testMode) {
        this.testMode = testMode;
        return this;
    }
    
    /**
     * \"light\", \"dark\" OR custom JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("theme")
    public String theme;
    public ActiveWidget withTheme(String theme) {
        this.theme = theme;
        return this;
    }
    
    /**
     * Token that you should use when you are using this widget on your website.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    public String token;
    public ActiveWidget withToken(String token) {
        this.token = token;
        return this;
    }
    
    /**
     * When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can do this by actually redirecting the user to the new page, or by simply changing the URL in the address bar via browser's History API. When NULL, we won't apply any URL changes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url_change_mode")
    public String urlChangeMode;
    public ActiveWidget withUrlChangeMode(String urlChangeMode) {
        this.urlChangeMode = urlChangeMode;
        return this;
    }
    
    /**
     * When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can either change the path of the URL to prefix it with the locale code, or we can add a query parameter to the URL. We also use this mode to detect the locale for the current page when a user directly loads a page. When NULL, locale detection from URL will be disabled (even then, if the user has selected a locale manually, and followUser is enabled, we will still automatically translate the page in user's locale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url_mode")
    public String urlMode;
    public ActiveWidget withUrlMode(String urlMode) {
        this.urlMode = urlMode;
        return this;
    }
    
    /**
     * Should we make use of local browser cache for your visitors? We will refresh the cache when Active JS detects new activity in your project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_cache")
    public Boolean useCache;
    public ActiveWidget withUseCache(Boolean useCache) {
        this.useCache = useCache;
        return this;
    }
    
    /**
     * When enabled, we will translate your website with dummy content, rather than actually using MT/TM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_dummy_translations")
    public Boolean useDummyTranslations;
    public ActiveWidget withUseDummyTranslations(Boolean useDummyTranslations) {
        this.useDummyTranslations = useDummyTranslations;
        return this;
    }
    
    /**
     * Continuous project variable definitions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variables")
    public String variables;
    public ActiveWidget withVariables(String variables) {
        this.variables = variables;
        return this;
    }
    
}
