// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeDBClusterSnapshotsActionEnum
type POSTDescribeDBClusterSnapshotsActionEnum string

const (
	POSTDescribeDBClusterSnapshotsActionEnumDescribeDbClusterSnapshots POSTDescribeDBClusterSnapshotsActionEnum = "DescribeDBClusterSnapshots"
)

func (e *POSTDescribeDBClusterSnapshotsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeDBClusterSnapshots":
		*e = POSTDescribeDBClusterSnapshotsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBClusterSnapshotsActionEnum: %s", s)
	}
}

// POSTDescribeDBClusterSnapshotsVersionEnum
type POSTDescribeDBClusterSnapshotsVersionEnum string

const (
	POSTDescribeDBClusterSnapshotsVersionEnumTwoThousandAndFourteen1031 POSTDescribeDBClusterSnapshotsVersionEnum = "2014-10-31"
)

func (e *POSTDescribeDBClusterSnapshotsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2014-10-31":
		*e = POSTDescribeDBClusterSnapshotsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBClusterSnapshotsVersionEnum: %s", s)
	}
}

type POSTDescribeDBClusterSnapshotsQueryParams struct {
	Action POSTDescribeDBClusterSnapshotsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords *string                                   `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version    POSTDescribeDBClusterSnapshotsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeDBClusterSnapshotsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeDBClusterSnapshotsRequest struct {
	QueryParams POSTDescribeDBClusterSnapshotsQueryParams
	Headers     POSTDescribeDBClusterSnapshotsHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeDBClusterSnapshotsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
