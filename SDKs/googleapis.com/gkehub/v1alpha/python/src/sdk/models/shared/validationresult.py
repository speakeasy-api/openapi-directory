"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ValidationResultValidatorEnum(str, Enum):
    r"""Validator type to validate membership with."""
    VALIDATOR_TYPE_UNSPECIFIED = 'VALIDATOR_TYPE_UNSPECIFIED'
    MEMBERSHIP_ID = 'MEMBERSHIP_ID'
    CROSS_PROJECT_PERMISSION = 'CROSS_PROJECT_PERMISSION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValidationResult:
    r"""ValidationResults are results set by each validator running during ValidateCreateMembership."""
    
    result: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""Additional information for the validation."""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""Whether the validation is passed or not."""  
    validator: Optional[ValidationResultValidatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validator'), 'exclude': lambda f: f is None }})
    r"""Validator type to validate membership with."""  
    