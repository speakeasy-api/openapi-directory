/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold - Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
public class GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold {
    /**
     * Door open threshold. 'open' must be provided and set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("door")
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor door;
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold withDoor(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor door) {
        this.door = door;
        return this;
    }
    
    /**
     * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("humidity")
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity humidity;
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold withHumidity(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity humidity) {
        this.humidity = humidity;
        return this;
    }
    
    /**
     * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indoorAirQuality")
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality indoorAirQuality;
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold withIndoorAirQuality(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality indoorAirQuality) {
        this.indoorAirQuality = indoorAirQuality;
        return this;
    }
    
    /**
     * Noise threshold. 'ambient' must be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("noise")
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise noise;
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold withNoise(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise noise) {
        this.noise = noise;
        return this;
    }
    
    /**
     * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pm25")
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 pm25;
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold withPm25(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 pm25) {
        this.pm25 = pm25;
        return this;
    }
    
    /**
     * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature temperature;
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold withTemperature(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tvoc")
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc tvoc;
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold withTvoc(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc tvoc) {
        this.tvoc = tvoc;
        return this;
    }
    
    /**
     * Water detection threshold. 'present' must be provided and set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("water")
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater water;
    public GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold withWater(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater water) {
        this.water = water;
        return this;
    }
    
}
