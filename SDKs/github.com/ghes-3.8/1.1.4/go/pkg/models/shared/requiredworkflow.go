// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// RequiredWorkflowScopeEnum - Scope of the required workflow
type RequiredWorkflowScopeEnum string

const (
	RequiredWorkflowScopeEnumAll      RequiredWorkflowScopeEnum = "all"
	RequiredWorkflowScopeEnumSelected RequiredWorkflowScopeEnum = "selected"
)

func (e RequiredWorkflowScopeEnum) ToPointer() *RequiredWorkflowScopeEnum {
	return &e
}

func (e *RequiredWorkflowScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "selected":
		*e = RequiredWorkflowScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequiredWorkflowScopeEnum: %v", v)
	}
}

// RequiredWorkflowStateEnum - State of the required workflow
type RequiredWorkflowStateEnum string

const (
	RequiredWorkflowStateEnumActive  RequiredWorkflowStateEnum = "active"
	RequiredWorkflowStateEnumDeleted RequiredWorkflowStateEnum = "deleted"
)

func (e RequiredWorkflowStateEnum) ToPointer() *RequiredWorkflowStateEnum {
	return &e
}

func (e *RequiredWorkflowStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "deleted":
		*e = RequiredWorkflowStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequiredWorkflowStateEnum: %v", v)
	}
}

// RequiredWorkflow - Response
type RequiredWorkflow struct {
	CreatedAt time.Time `json:"created_at"`
	// Unique identifier for a required workflow
	ID float64 `json:"id"`
	// Name present in the workflow file
	Name string `json:"name"`
	// Path of the workflow file
	Path string `json:"path"`
	// Ref at which the workflow file will be selected
	Ref string `json:"ref"`
	// Minimal Repository
	Repository MinimalRepository `json:"repository"`
	// Scope of the required workflow
	Scope                   RequiredWorkflowScopeEnum `json:"scope"`
	SelectedRepositoriesURL *string                   `json:"selected_repositories_url,omitempty"`
	// State of the required workflow
	State     RequiredWorkflowStateEnum `json:"state"`
	UpdatedAt time.Time                 `json:"updated_at"`
}
