"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlechromemanagementv1cputemperatureinfo as shared_googlechromemanagementv1cputemperatureinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1CPUStatusReport:
    r"""Provides information about the status of the CPU. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Every 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A"""
    
    cpu_temperature_info: Optional[list[shared_googlechromemanagementv1cputemperatureinfo.GoogleChromeManagementV1CPUTemperatureInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuTemperatureInfo'), 'exclude': lambda f: f is None }})
    r"""Output only. CPU temperature sample info per CPU core in Celsius"""  
    cpu_utilization_pct: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuUtilizationPct'), 'exclude': lambda f: f is None }})
    r"""Output only. Sample of CPU utilization (0-100 percent)."""  
    report_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp in milliseconds representing time at which this report was sampled."""  
    sample_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleFrequency'), 'exclude': lambda f: f is None }})
    r"""Output only. Frequency the report is sampled."""  
    