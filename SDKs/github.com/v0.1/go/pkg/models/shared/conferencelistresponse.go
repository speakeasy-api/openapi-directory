// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferenceListResponseMessageEnum - Response message
type ConferenceListResponseMessageEnum string

const (
	ConferenceListResponseMessageEnumConferenceListExecuted            ConferenceListResponseMessageEnum = "Conference List Executed"
	ConferenceListResponseMessageEnumConferenceListFailedToParseResult ConferenceListResponseMessageEnum = "Conference List Failed to parse result"
)

func (e ConferenceListResponseMessageEnum) ToPointer() *ConferenceListResponseMessageEnum {
	return &e
}

func (e *ConferenceListResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Conference List Executed":
		fallthrough
	case "Conference List Failed to parse result":
		*e = ConferenceListResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceListResponseMessageEnum: %v", v)
	}
}

// ConferenceListResponse - Response
type ConferenceListResponse struct {
	// List of established conferences
	List map[string]interface{} `json:"List"`
	// Response message
	Message ConferenceListResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
