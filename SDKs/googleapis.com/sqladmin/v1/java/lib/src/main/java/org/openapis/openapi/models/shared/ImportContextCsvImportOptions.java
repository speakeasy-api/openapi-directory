/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ImportContextCsvImportOptions - Options for importing data as CSV.
 */
public class ImportContextCsvImportOptions {
    /**
     * The columns to which CSV data is imported. If not specified, all columns of the database table are loaded with CSV data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columns")
    public String[] columns;

    public ImportContextCsvImportOptions withColumns(String[] columns) {
        this.columns = columns;
        return this;
    }
    
    /**
     * Specifies the character that should appear before a data character that needs to be escaped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("escapeCharacter")
    public String escapeCharacter;

    public ImportContextCsvImportOptions withEscapeCharacter(String escapeCharacter) {
        this.escapeCharacter = escapeCharacter;
        return this;
    }
    
    /**
     * Specifies the character that separates columns within each row (line) of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fieldsTerminatedBy")
    public String fieldsTerminatedBy;

    public ImportContextCsvImportOptions withFieldsTerminatedBy(String fieldsTerminatedBy) {
        this.fieldsTerminatedBy = fieldsTerminatedBy;
        return this;
    }
    
    /**
     * This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linesTerminatedBy")
    public String linesTerminatedBy;

    public ImportContextCsvImportOptions withLinesTerminatedBy(String linesTerminatedBy) {
        this.linesTerminatedBy = linesTerminatedBy;
        return this;
    }
    
    /**
     * Specifies the quoting character to be used when a data value is quoted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quoteCharacter")
    public String quoteCharacter;

    public ImportContextCsvImportOptions withQuoteCharacter(String quoteCharacter) {
        this.quoteCharacter = quoteCharacter;
        return this;
    }
    
    /**
     * The table to which CSV data is imported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("table")
    public String table;

    public ImportContextCsvImportOptions withTable(String table) {
        this.table = table;
        return this;
    }
    
    public ImportContextCsvImportOptions(){}
}
