"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class ProgrammesTLEOs:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_broadcasts_by_channel_(self, request: operations.GetBroadcastsByChannelRequest) -> operations.GetBroadcastsByChannelResponse:
        r"""Get broadcasts by channel
        Get broadcasts by channel
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBroadcastsByChannelRequest, base_url, '/channels/{channel}/broadcasts', request)
        
        query_params = utils.get_query_params(operations.GetBroadcastsByChannelRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBroadcastsByChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_highlights_by_category_(self, request: operations.GetHighlightsByCategoryRequest) -> operations.GetHighlightsByCategoryResponse:
        r"""List the highlights for a category.
        Get the editorial highlights of a given category in TV & iPlayer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHighlightsByCategoryRequest, base_url, '/categories/{category}/highlights', request)
        
        query_params = utils.get_query_params(operations.GetHighlightsByCategoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHighlightsByCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_programme_highlights_(self, request: operations.GetProgrammeHighlightsRequest) -> operations.GetProgrammeHighlightsResponse:
        r"""Get programme highlights
        Get programme highlights
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/home/highlights'
        
        query_params = utils.get_query_params(operations.GetProgrammeHighlightsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgrammeHighlightsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_programmes_by_category_(self, request: operations.GetProgrammesByCategoryRequest) -> operations.GetProgrammesByCategoryResponse:
        r"""List all the programmes for a category.
        Get the list of all the Programmes (TLEOs) for a given category in TV & iPlayer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProgrammesByCategoryRequest, base_url, '/categories/{category}/programmes', request)
        
        query_params = utils.get_query_params(operations.GetProgrammesByCategoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgrammesByCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_programmes_by_channel_(self, request: operations.GetProgrammesByChannelRequest) -> operations.GetProgrammesByChannelResponse:
        r"""Get programmes by channel
        Get programmes by channel
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProgrammesByChannelRequest, base_url, '/channels/{channel}/programmes', request)
        
        query_params = utils.get_query_params(operations.GetProgrammesByChannelRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgrammesByChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_programmes_by_parent_pid_(self, request: operations.GetProgrammesByParentPIDRequest) -> operations.GetProgrammesByParentPIDResponse:
        r"""Programme for a given pid.
        Get the programme for a given programme identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProgrammesByParentPIDRequest, base_url, '/programmes/{pid}', request)
        
        query_params = utils.get_query_params(operations.GetProgrammesByParentPIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgrammesByParentPIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    