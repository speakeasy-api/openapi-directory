/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CloudWatchOutputConfig } from "./cloudwatchoutputconfig";
import { CommandInvocationStatusEnum } from "./commandinvocationstatusenum";
import { Expose, Type } from "class-transformer";

/**
 * Success
 */
export class GetCommandInvocationResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CloudWatchOutputConfig" })
  @Type(() => CloudWatchOutputConfig)
  cloudWatchOutputConfig?: CloudWatchOutputConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "CommandId" })
  commandId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Comment" })
  comment?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentName" })
  documentName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentVersion" })
  documentVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExecutionElapsedTime" })
  executionElapsedTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExecutionEndDateTime" })
  executionEndDateTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExecutionStartDateTime" })
  executionStartDateTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "InstanceId" })
  instanceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PluginName" })
  pluginName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ResponseCode" })
  responseCode?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "StandardErrorContent" })
  standardErrorContent?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StandardErrorUrl" })
  standardErrorUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StandardOutputContent" })
  standardOutputContent?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StandardOutputUrl" })
  standardOutputUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: CommandInvocationStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "StatusDetails" })
  statusDetails?: string;
}
