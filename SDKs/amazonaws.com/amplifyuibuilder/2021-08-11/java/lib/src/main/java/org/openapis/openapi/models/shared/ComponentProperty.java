/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ComponentProperty - Describes the configuration for all of a component's properties. Use &lt;code&gt;ComponentProperty&lt;/code&gt; to specify the values to render or bind by default.
 */
public class ComponentProperty {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bindingProperties")
    public ComponentPropertyBindingProperties bindingProperties;
    public ComponentProperty withBindingProperties(ComponentPropertyBindingProperties bindingProperties) {
        this.bindingProperties = bindingProperties;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bindings")
    public java.util.Map<String, FormBindingElement> bindings;
    public ComponentProperty withBindings(java.util.Map<String, FormBindingElement> bindings) {
        this.bindings = bindings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collectionBindingProperties")
    public ComponentPropertyBindingProperties collectionBindingProperties;
    public ComponentProperty withCollectionBindingProperties(ComponentPropertyBindingProperties collectionBindingProperties) {
        this.collectionBindingProperties = collectionBindingProperties;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("componentName")
    public String componentName;
    public ComponentProperty withComponentName(String componentName) {
        this.componentName = componentName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concat")
    public ComponentProperty[] concat;
    public ComponentProperty withConcat(ComponentProperty[] concat) {
        this.concat = concat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition")
    public ComponentConditionProperty condition;
    public ComponentProperty withCondition(ComponentConditionProperty condition) {
        this.condition = condition;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configured")
    public Boolean configured;
    public ComponentProperty withConfigured(Boolean configured) {
        this.configured = configured;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultValue")
    public String defaultValue;
    public ComponentProperty withDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event")
    public String event;
    public ComponentProperty withEvent(String event) {
        this.event = event;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("importedValue")
    public String importedValue;
    public ComponentProperty withImportedValue(String importedValue) {
        this.importedValue = importedValue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    public String model;
    public ComponentProperty withModel(String model) {
        this.model = model;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("property")
    public String property;
    public ComponentProperty withProperty(String property) {
        this.property = property;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public ComponentProperty withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAttribute")
    public String userAttribute;
    public ComponentProperty withUserAttribute(String userAttribute) {
        this.userAttribute = userAttribute;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    public String value;
    public ComponentProperty withValue(String value) {
        this.value = value;
        return this;
    }
    
}
