// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
	"time"
)

type ImChatSessionsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ImChatSessionsRequest struct {
	// Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
	From types.Date `queryParam:"style=form,explode=true,name=from"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// End date.
	To types.Date `queryParam:"style=form,explode=true,name=to"`
}

// ImChatSessions200ApplicationXMLSessionsTypeEnum - IM chat session type.
type ImChatSessions200ApplicationXMLSessionsTypeEnum string

const (
	ImChatSessions200ApplicationXMLSessionsTypeEnumGroup ImChatSessions200ApplicationXMLSessionsTypeEnum = "Group"
	ImChatSessions200ApplicationXMLSessionsTypeEnumOne1  ImChatSessions200ApplicationXMLSessionsTypeEnum = "1:1"
)

func (e *ImChatSessions200ApplicationXMLSessionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Group":
		fallthrough
	case "1:1":
		*e = ImChatSessions200ApplicationXMLSessionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImChatSessions200ApplicationXMLSessionsTypeEnum: %s", s)
	}
}

type ImChatSessions200ApplicationXMLSessions struct {
	// Last message sent time.
	LastMessageSentTime *time.Time
	// Meeting topic.
	Name *string
	// IM chat session ID.
	SessionID *string
	// IM chat session type.
	Type *ImChatSessions200ApplicationXMLSessionsTypeEnum
}

// ImChatSessions200ApplicationXML - Pagination object.
type ImChatSessions200ApplicationXML struct {
	// Start date.
	From *types.Date
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.
	NextPageToken *string
	// The amount of records returns within a single API call.
	PageSize *int64
	// Array of session objects.
	Sessions []ImChatSessions200ApplicationXMLSessions
	// End date.
	To *types.Date
}

// ImChatSessions200ApplicationJSONSessionsTypeEnum - IM chat session type.
type ImChatSessions200ApplicationJSONSessionsTypeEnum string

const (
	ImChatSessions200ApplicationJSONSessionsTypeEnumGroup ImChatSessions200ApplicationJSONSessionsTypeEnum = "Group"
	ImChatSessions200ApplicationJSONSessionsTypeEnumOne1  ImChatSessions200ApplicationJSONSessionsTypeEnum = "1:1"
)

func (e *ImChatSessions200ApplicationJSONSessionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Group":
		fallthrough
	case "1:1":
		*e = ImChatSessions200ApplicationJSONSessionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImChatSessions200ApplicationJSONSessionsTypeEnum: %s", s)
	}
}

type ImChatSessions200ApplicationJSONSessions struct {
	// Last message sent time.
	LastMessageSentTime *time.Time `json:"last_message_sent_time,omitempty"`
	// Meeting topic.
	Name *string `json:"name,omitempty"`
	// IM chat session ID.
	SessionID *string `json:"session_id,omitempty"`
	// IM chat session type.
	Type *ImChatSessions200ApplicationJSONSessionsTypeEnum `json:"type,omitempty"`
}

// ImChatSessions200ApplicationJSON - Pagination object.
type ImChatSessions200ApplicationJSON struct {
	// Start date.
	From *types.Date `json:"from,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The amount of records returns within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// Array of session objects.
	Sessions []ImChatSessions200ApplicationJSONSessions `json:"sessions,omitempty"`
	// End date.
	To *types.Date `json:"to,omitempty"`
}

type ImChatSessionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` <br>
	// Archived IM chat sessions returned.
	ImChatSessions200ApplicationJSONObject *ImChatSessions200ApplicationJSON
}
