<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Document 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a list of subjects of projects
     * 
     * Get a list of subjects of projects
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllDocumentSubjectsResponse
     */
	public function getAllDocumentSubjects(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllDocumentSubjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/subjects');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllDocumentSubjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentSubjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DocumentSubjects>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View a single document
     * 
     * View a single document from your MotaWord account with its translation info.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDocumentResponse
     */
	public function getDocument(
        \OpenAPI\OpenAPI\Models\Operations\GetDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\GetDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View a document translation progress
     * 
     * View the translation or proofreading progress of a document in your account. You can also track the progress of a document under the project that it was ordered with.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocumentProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDocumentProgressResponse
     */
	public function getDocumentProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetDocumentProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDocumentProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/{documentId}/progress', \OpenAPI\OpenAPI\Models\Operations\GetDocumentProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDocumentProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->progress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Progress', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your documents
     * 
     * View a list of files and documents that you have translations for. This endpoint lets you view your MotaWord account as a multilingual translated file repository, without needing to go through your projects to interact with files in them.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDocumentsResponse
     */
	public function getDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/documents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDocumentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DocumentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find documents similar to this document.
     * 
     * Find documents similar to this document. Optionally, include translation information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSimilarDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSimilarDocumentsResponse
     */
	public function getSimilarDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetSimilarDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSimilarDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/{documentId}/similars', \OpenAPI\OpenAPI\Models\Operations\GetSimilarDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSimilarDocumentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSimilarDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DocumentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of your documents
     * 
     * Get a list of your documents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserDocumentsResponse
     */
	public function getUserDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetUserDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/documents', \OpenAPI\OpenAPI\Models\Operations\GetUserDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserDocumentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DocumentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Regenerate preview and return preview URL for given file
     * 
     * Regenerate preview and return preview URL for given file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RegeneratePreviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RegeneratePreviewResponse
     */
	public function regeneratePreview(
        \OpenAPI\OpenAPI\Models\Operations\RegeneratePreviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RegeneratePreviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/{documentId}/regenerate_preview', \OpenAPI\OpenAPI\Models\Operations\RegeneratePreviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RegeneratePreviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regeneratePreviewResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegeneratePreviewResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use the translation of given source manual document as manual draft source for the given target document.
     * 
     * Use the translation of given source manual document as manual draft source for the given target document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UseAsDraftRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UseAsDraftResponse
     */
	public function useAsDraft(
        \OpenAPI\OpenAPI\Models\Operations\UseAsDraftRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UseAsDraftResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/{documentId}/use_as_draft', \OpenAPI\OpenAPI\Models\Operations\UseAsDraftRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "useAsDraftPayload", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UseAsDraftResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use the translation of the given manual document as a regular file.
     * 
     * Use the translation of the given manual document as a regular file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UseAsRegularRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UseAsRegularResponse
     */
	public function useAsRegular(
        \OpenAPI\OpenAPI\Models\Operations\UseAsRegularRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UseAsRegularResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/{documentId}/use_as_regular', \OpenAPI\OpenAPI\Models\Operations\UseAsRegularRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "useAsRegularPayload", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UseAsRegularResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }

        return $response;
    }
}