<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoIntegerFieldInfo - The profile information for an integer type field.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoIntegerFieldInfo
{
    /**
     * Average of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     * @var ?float $average
     */
	#[\JMS\Serializer\Annotation\SerializedName('average')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $average = null;
    
    /**
     * Maximum of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     * @var ?string $max
     */
	#[\JMS\Serializer\Annotation\SerializedName('max')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $max = null;
    
    /**
     * Minimum of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     * @var ?string $min
     */
	#[\JMS\Serializer\Annotation\SerializedName('min')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $min = null;
    
    /**
     * A quartile divides the number of data points into four parts, or quarters, of more-or-less equal size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below this point. Here, the quartiles is provided as an ordered list of quartile values for the scanned data, occurring in order Q1, median, Q3.
     * 
     * @var ?array<string> $quartiles
     */
	#[\JMS\Serializer\Annotation\SerializedName('quartiles')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $quartiles = null;
    
    /**
     * Standard deviation of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     * @var ?float $standardDeviation
     */
	#[\JMS\Serializer\Annotation\SerializedName('standardDeviation')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $standardDeviation = null;
    
	public function __construct()
	{
		$this->average = null;
		$this->max = null;
		$this->min = null;
		$this->quartiles = null;
		$this->standardDeviation = null;
	}
}
