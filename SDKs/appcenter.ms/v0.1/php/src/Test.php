<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Test 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Logically deletes a test run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunResponse
     */
	public function testArchiveTestRun(
        \OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}', \OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestArchiveTestRunTestRun', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Creates a short ID for a list of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionResponse
     */
	public function testCreateDeviceSelection(
        \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/device_selection', \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSelection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionDeviceSelection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCloudErrorDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSelectionTestCloudErrorDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a device set belonging to the owner
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerResponse
     */
	public function testCreateDeviceSetOfOwner(
        \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets', \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerDeviceSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCloudErrorDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfOwnerTestCloudErrorDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a device set belonging to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserResponse
     */
	public function testCreateDeviceSetOfUser(
        \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets', \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserDeviceSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCloudErrorDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateDeviceSetOfUserTestCloudErrorDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accept a free trial subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionResponse
     */
	public function testCreateSubscription(
        \OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/subscriptions', \OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateSubscriptionSubscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new test run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateTestRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateTestRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestCreateTestRunResponse
     */
	public function testCreateTestRun(
        \OpenAPI\OpenAPI\Models\Operations\TestCreateTestRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestCreateTestRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestCreateTestRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs', \OpenAPI\OpenAPI\Models\Operations\TestCreateTestRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestCreateTestRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Creates new test series for an application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesResponse
     */
	public function testCreateTestSeries(
        \OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_series', \OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testSeries = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesTestSeries', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCloudErrorDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestCreateTestSeriesTestCloudErrorDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a device set belonging to the owner
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfOwnerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfOwnerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfOwnerResponse
     */
	public function testDeleteDeviceSetOfOwner(
        \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfOwnerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfOwnerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Deletes a device set belonging to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfUserResponse
     */
	public function testDeleteDeviceSetOfUser(
        \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestDeleteDeviceSetOfUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Deletes a single test series
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestDeleteTestSeriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestDeleteTestSeriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestDeleteTestSeriesResponse
     */
	public function testDeleteTestSeries(
        \OpenAPI\OpenAPI\Models\Operations\TestDeleteTestSeriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestDeleteTestSeriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestDeleteTestSeriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}', \OpenAPI\OpenAPI\Models\Operations\TestDeleteTestSeriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestDeleteTestSeriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Lists account data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountResponse
     */
	public function testGdprExportAccount(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/account/test/export/accounts');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportAccount200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccount200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the endpoints available for Test accounts data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountsResponse
     */
	public function testGdprExportAccounts(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/account/test/export');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportAccounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportAccounts200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists app data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppResponse
     */
	public function testGdprExportApp(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test/export/apps', \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportApp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportApp200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the endpoints available for Test apps data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppsResponse
     */
	public function testGdprExportApps(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test/export', \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportApps200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportApps200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists feature flag data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFeatureFlagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFeatureFlagResponse
     */
	public function testGdprExportFeatureFlag(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFeatureFlagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFeatureFlagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/account/test/export/featureFlags');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFeatureFlagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportFeatureFlag200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportFeatureFlag200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists file set file data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFileResponse
     */
	public function testGdprExportFileSetFile(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles', \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportFileSetFile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportFileSetFile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists hash file data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFileResponse
     */
	public function testGdprExportHashFile(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles', \OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportHashFile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportHashFile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists pipeline test data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTestResponse
     */
	public function testGdprExportPipelineTest(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests', \OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportPipelineTest200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportPipelineTest200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists test run data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRunResponse
     */
	public function testGdprExportTestRun(
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns', \OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGdprExportTestRun200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGdprExportTestRun200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of all test runs for a given test series
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesResponse
     */
	public function testGetAllTestRunsForSeries(
        \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs', \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testRuns = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TestGetAllTestRunsForSeriesTestRun>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of all test series for an application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesResponse
     */
	public function testGetAllTestSeries(
        \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_series', \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testSeries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TestGetAllTestSeriesTestSeries>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of available devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsResponse
     */
	public function testGetDeviceConfigurations(
        \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/device_configurations', \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGetDeviceConfigurations200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TestGetDeviceConfigurations200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a device set belonging to the owner
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerResponse
     */
	public function testGetDeviceSetOfOwner(
        \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfOwnerDeviceSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Gets a device set belonging to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserResponse
     */
	public function testGetDeviceSetOfUser(
        \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGetDeviceSetOfUserDeviceSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get information about the currently active subscriptions, if any
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsResponse
     */
	public function testGetSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/subscriptions', \OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGetSubscriptionsSubscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single test report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetTestReportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetTestReportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetTestReportResponse
     */
	public function testGetTestReport(
        \OpenAPI\OpenAPI\Models\Operations\TestGetTestReportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetTestReportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetTestReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report', \OpenAPI\OpenAPI\Models\Operations\TestGetTestReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetTestReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testGetTestReport200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGetTestReport200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single test runs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunResponse
     */
	public function testGetTestRun(
        \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}', \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGetTestRunTestRun', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets state of the test run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateResponse
     */
	public function testGetTestRunState(
        \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state', \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testRunState = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestGetTestRunStateTestRunState', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of test runs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsResponse
     */
	public function testGetTestRuns(
        \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs', \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testRuns = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TestGetTestRunsTestRun>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists device sets belonging to the owner
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerResponse
     */
	public function testListDeviceSetsOfOwner(
        \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets', \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfOwnerDeviceSet>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists device sets belonging to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserResponse
     */
	public function testListDeviceSetsOfUser(
        \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets', \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TestListDeviceSetsOfUserDeviceSet>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates name and slug of a test series
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesResponse
     */
	public function testPatchTestSeries(
        \OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}', \OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testSeries = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestPatchTestSeriesTestSeries', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Starts test run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestStartTestRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestStartTestRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestStartTestRunResponse
     */
	public function testStartTestRun(
        \OpenAPI\OpenAPI\Models\Operations\TestStartTestRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestStartTestRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestStartTestRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start', \OpenAPI\OpenAPI\Models\Operations\TestStartTestRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestStartTestRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCloudTestRunStartResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestStartTestRunTestCloudTestRunStartResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads file for a test run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestStartUploadingFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestStartUploadingFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestStartUploadingFileResponse
     */
	public function testStartUploadingFile(
        \OpenAPI\OpenAPI\Models\Operations\TestStartUploadingFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestStartUploadingFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestStartUploadingFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files', \OpenAPI\OpenAPI\Models\Operations\TestStartUploadingFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestStartUploadingFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Stop a test run execution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestStopTestRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestStopTestRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestStopTestRunResponse
     */
	public function testStopTestRun(
        \OpenAPI\OpenAPI\Models\Operations\TestStopTestRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestStopTestRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestStopTestRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop', \OpenAPI\OpenAPI\Models\Operations\TestStopTestRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestStopTestRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestStopTestRunTestRun', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Updates a device set belonging to the owner
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerResponse
     */
	public function testUpdateDeviceSetOfOwner(
        \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerDeviceSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCloudErrorDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfOwnerTestCloudErrorDetails', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Updates a device set belonging to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserResponse
     */
	public function testUpdateDeviceSetOfUser(
        \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserDeviceSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCloudErrorDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TestUpdateDeviceSetOfUserTestCloudErrorDetails', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Adds file with the given hash to a test run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUploadHashRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUploadHashSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestUploadHashResponse
     */
	public function testUploadHash(
        \OpenAPI\OpenAPI\Models\Operations\TestUploadHashRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestUploadHashSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestUploadHashResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes', \OpenAPI\OpenAPI\Models\Operations\TestUploadHashRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestUploadHashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 412) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Adds file with the given hash to a test run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchResponse
     */
	public function testUploadHashesBatch(
        \OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch', \OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCloudFileHashResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TestUploadHashesBatchTestCloudFileHashResponse>', 'json');
            }
        }

        return $response;
    }
}