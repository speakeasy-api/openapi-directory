// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AemtwSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type AemtwRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// AemtwRequestBodyFormatEnum - The format of the certificate in response.
type AemtwRequestBodyFormatEnum string

const (
	AemtwRequestBodyFormatEnumPdf AemtwRequestBodyFormatEnum = "pdf"
)

func (e *AemtwRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = AemtwRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AemtwRequestBodyFormatEnum: %s", s)
	}
}

// AemtwRequestBody - Request format
type AemtwRequestBody struct {
	CertificateParameters *AemtwRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format AemtwRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type AemtwRequest struct {
	// Request format
	Request  *AemtwRequestBody `request:"mediaType=application/json"`
	Security AemtwSecurity
}

type Aemtw504ApplicationJSONErrorEnum string

const (
	Aemtw504ApplicationJSONErrorEnumGatewayTimeout Aemtw504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Aemtw504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Aemtw504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw504ApplicationJSONErrorEnum: %s", s)
	}
}

type Aemtw504ApplicationJSONErrorDescriptionEnum string

const (
	Aemtw504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Aemtw504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Aemtw504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Aemtw504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aemtw504ApplicationJSON - Gateway timeout
type Aemtw504ApplicationJSON struct {
	Error            *Aemtw504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aemtw504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aemtw503ApplicationJSONErrorEnum string

const (
	Aemtw503ApplicationJSONErrorEnumServiceUnavailable Aemtw503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Aemtw503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Aemtw503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw503ApplicationJSONErrorEnum: %s", s)
	}
}

type Aemtw503ApplicationJSONErrorDescriptionEnum string

const (
	Aemtw503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Aemtw503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Aemtw503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Aemtw503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aemtw503ApplicationJSON - Service unavailable
type Aemtw503ApplicationJSON struct {
	Error            *Aemtw503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aemtw503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aemtw502ApplicationJSONErrorEnum string

const (
	Aemtw502ApplicationJSONErrorEnumBadGatewy Aemtw502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Aemtw502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Aemtw502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw502ApplicationJSONErrorEnum: %s", s)
	}
}

type Aemtw502ApplicationJSONErrorDescriptionEnum string

const (
	Aemtw502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Aemtw502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Aemtw502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Aemtw502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aemtw502ApplicationJSON - Bad gateway
type Aemtw502ApplicationJSON struct {
	Error            *Aemtw502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aemtw502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aemtw500ApplicationJSONErrorEnum string

const (
	Aemtw500ApplicationJSONErrorEnumInternalServerError Aemtw500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Aemtw500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Aemtw500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw500ApplicationJSONErrorEnum: %s", s)
	}
}

type Aemtw500ApplicationJSONErrorDescriptionEnum string

const (
	Aemtw500ApplicationJSONErrorDescriptionEnumInternalServerError Aemtw500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Aemtw500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Aemtw500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aemtw500ApplicationJSON - Internal server error
type Aemtw500ApplicationJSON struct {
	Error            *Aemtw500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aemtw500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aemtw404ApplicationJSONErrorEnum string

const (
	Aemtw404ApplicationJSONErrorEnumRecordNotFound Aemtw404ApplicationJSONErrorEnum = "record_not_found"
	Aemtw404ApplicationJSONErrorEnumURLNotFound    Aemtw404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Aemtw404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Aemtw404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw404ApplicationJSONErrorEnum: %s", s)
	}
}

type Aemtw404ApplicationJSONErrorDescriptionEnum string

const (
	Aemtw404ApplicationJSONErrorDescriptionEnumNoRecordFound               Aemtw404ApplicationJSONErrorDescriptionEnum = "No record found"
	Aemtw404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Aemtw404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Aemtw404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Aemtw404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aemtw404ApplicationJSON - No record found
type Aemtw404ApplicationJSON struct {
	Error            *Aemtw404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aemtw404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aemtw401ApplicationJSONErrorEnum string

const (
	Aemtw401ApplicationJSONErrorEnumInvalidAuthentication Aemtw401ApplicationJSONErrorEnum = "invalid_authentication"
	Aemtw401ApplicationJSONErrorEnumInvalidAuthorization  Aemtw401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Aemtw401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Aemtw401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw401ApplicationJSONErrorEnum: %s", s)
	}
}

type Aemtw401ApplicationJSONErrorDescriptionEnum string

const (
	Aemtw401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Aemtw401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Aemtw401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Aemtw401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Aemtw401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Aemtw401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aemtw401ApplicationJSON - Unauthorized access
type Aemtw401ApplicationJSON struct {
	Error            *Aemtw401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aemtw401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aemtw400ApplicationJSONErrorEnum string

const (
	Aemtw400ApplicationJSONErrorEnumMissingParameter Aemtw400ApplicationJSONErrorEnum = "missing_parameter"
	Aemtw400ApplicationJSONErrorEnumInvalidParameter Aemtw400ApplicationJSONErrorEnum = "invalid_parameter"
	Aemtw400ApplicationJSONErrorEnumInvalidFormat    Aemtw400ApplicationJSONErrorEnum = "invalid_format"
	Aemtw400ApplicationJSONErrorEnumInvalidTxnid     Aemtw400ApplicationJSONErrorEnum = "invalid_txnid"
	Aemtw400ApplicationJSONErrorEnumInvalidConsentid Aemtw400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Aemtw400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Aemtw400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw400ApplicationJSONErrorEnum: %s", s)
	}
}

type Aemtw400ApplicationJSONErrorDescriptionEnum string

const (
	Aemtw400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Aemtw400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Aemtw400ApplicationJSONErrorDescriptionEnumBadRequest                              Aemtw400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Aemtw400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Aemtw400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Aemtw400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Aemtw400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Aemtw400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Aemtw400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Aemtw400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Aemtw400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aemtw400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aemtw400ApplicationJSON - Bad request
type Aemtw400ApplicationJSON struct {
	Error            *Aemtw400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aemtw400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type AemtwResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Aemtw400ApplicationJSONObject *Aemtw400ApplicationJSON
	// Unauthorized access
	Aemtw401ApplicationJSONObject *Aemtw401ApplicationJSON
	// No record found
	Aemtw404ApplicationJSONObject *Aemtw404ApplicationJSON
	// Internal server error
	Aemtw500ApplicationJSONObject *Aemtw500ApplicationJSON
	// Bad gateway
	Aemtw502ApplicationJSONObject *Aemtw502ApplicationJSON
	// Service unavailable
	Aemtw503ApplicationJSONObject *Aemtw503ApplicationJSON
	// Gateway timeout
	Aemtw504ApplicationJSONObject *Aemtw504ApplicationJSON
}
