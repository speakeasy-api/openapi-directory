// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type BankAccountInfoAccountIdentificationType string

const (
	BankAccountInfoAccountIdentificationTypeAULocalAccountIdentification      BankAccountInfoAccountIdentificationType = "AULocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeCALocalAccountIdentification      BankAccountInfoAccountIdentificationType = "CALocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeCZLocalAccountIdentification      BankAccountInfoAccountIdentificationType = "CZLocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeDKLocalAccountIdentification      BankAccountInfoAccountIdentificationType = "DKLocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeHULocalAccountIdentification      BankAccountInfoAccountIdentificationType = "HULocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeIbanAccountIdentification         BankAccountInfoAccountIdentificationType = "IbanAccountIdentification"
	BankAccountInfoAccountIdentificationTypeNOLocalAccountIdentification      BankAccountInfoAccountIdentificationType = "NOLocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeNumberAndBicAccountIdentification BankAccountInfoAccountIdentificationType = "NumberAndBicAccountIdentification"
	BankAccountInfoAccountIdentificationTypePLLocalAccountIdentification      BankAccountInfoAccountIdentificationType = "PLLocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeSELocalAccountIdentification      BankAccountInfoAccountIdentificationType = "SELocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeUKLocalAccountIdentification      BankAccountInfoAccountIdentificationType = "UKLocalAccountIdentification"
	BankAccountInfoAccountIdentificationTypeUSLocalAccountIdentification      BankAccountInfoAccountIdentificationType = "USLocalAccountIdentification"
)

type BankAccountInfoAccountIdentification struct {
	AULocalAccountIdentification      *AULocalAccountIdentification
	CALocalAccountIdentification      *CALocalAccountIdentification
	CZLocalAccountIdentification      *CZLocalAccountIdentification
	DKLocalAccountIdentification      *DKLocalAccountIdentification
	HULocalAccountIdentification      *HULocalAccountIdentification
	IbanAccountIdentification         *IbanAccountIdentification
	NOLocalAccountIdentification      *NOLocalAccountIdentification
	NumberAndBicAccountIdentification *NumberAndBicAccountIdentification
	PLLocalAccountIdentification      *PLLocalAccountIdentification
	SELocalAccountIdentification      *SELocalAccountIdentification
	UKLocalAccountIdentification      *UKLocalAccountIdentification
	USLocalAccountIdentification      *USLocalAccountIdentification

	Type BankAccountInfoAccountIdentificationType
}

func CreateBankAccountInfoAccountIdentificationAULocalAccountIdentification(auLocalAccountIdentification AULocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeAULocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		AULocalAccountIdentification: &auLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationCALocalAccountIdentification(caLocalAccountIdentification CALocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeCALocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		CALocalAccountIdentification: &caLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationCZLocalAccountIdentification(czLocalAccountIdentification CZLocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeCZLocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		CZLocalAccountIdentification: &czLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationDKLocalAccountIdentification(dkLocalAccountIdentification DKLocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeDKLocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		DKLocalAccountIdentification: &dkLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationHULocalAccountIdentification(huLocalAccountIdentification HULocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeHULocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		HULocalAccountIdentification: &huLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationIbanAccountIdentification(ibanAccountIdentification IbanAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeIbanAccountIdentification

	return BankAccountInfoAccountIdentification{
		IbanAccountIdentification: &ibanAccountIdentification,
		Type:                      typ,
	}
}

func CreateBankAccountInfoAccountIdentificationNOLocalAccountIdentification(noLocalAccountIdentification NOLocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeNOLocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		NOLocalAccountIdentification: &noLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationNumberAndBicAccountIdentification(numberAndBicAccountIdentification NumberAndBicAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeNumberAndBicAccountIdentification

	return BankAccountInfoAccountIdentification{
		NumberAndBicAccountIdentification: &numberAndBicAccountIdentification,
		Type:                              typ,
	}
}

func CreateBankAccountInfoAccountIdentificationPLLocalAccountIdentification(plLocalAccountIdentification PLLocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypePLLocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		PLLocalAccountIdentification: &plLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationSELocalAccountIdentification(seLocalAccountIdentification SELocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeSELocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		SELocalAccountIdentification: &seLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationUKLocalAccountIdentification(ukLocalAccountIdentification UKLocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeUKLocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		UKLocalAccountIdentification: &ukLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountInfoAccountIdentificationUSLocalAccountIdentification(usLocalAccountIdentification USLocalAccountIdentification) BankAccountInfoAccountIdentification {
	typ := BankAccountInfoAccountIdentificationTypeUSLocalAccountIdentification

	return BankAccountInfoAccountIdentification{
		USLocalAccountIdentification: &usLocalAccountIdentification,
		Type:                         typ,
	}
}

func (u *BankAccountInfoAccountIdentification) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	auLocalAccountIdentification := new(AULocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&auLocalAccountIdentification); err == nil {
		u.AULocalAccountIdentification = auLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeAULocalAccountIdentification
		return nil
	}

	caLocalAccountIdentification := new(CALocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&caLocalAccountIdentification); err == nil {
		u.CALocalAccountIdentification = caLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeCALocalAccountIdentification
		return nil
	}

	czLocalAccountIdentification := new(CZLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&czLocalAccountIdentification); err == nil {
		u.CZLocalAccountIdentification = czLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeCZLocalAccountIdentification
		return nil
	}

	dkLocalAccountIdentification := new(DKLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dkLocalAccountIdentification); err == nil {
		u.DKLocalAccountIdentification = dkLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeDKLocalAccountIdentification
		return nil
	}

	huLocalAccountIdentification := new(HULocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&huLocalAccountIdentification); err == nil {
		u.HULocalAccountIdentification = huLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeHULocalAccountIdentification
		return nil
	}

	ibanAccountIdentification := new(IbanAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ibanAccountIdentification); err == nil {
		u.IbanAccountIdentification = ibanAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeIbanAccountIdentification
		return nil
	}

	noLocalAccountIdentification := new(NOLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&noLocalAccountIdentification); err == nil {
		u.NOLocalAccountIdentification = noLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeNOLocalAccountIdentification
		return nil
	}

	numberAndBicAccountIdentification := new(NumberAndBicAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&numberAndBicAccountIdentification); err == nil {
		u.NumberAndBicAccountIdentification = numberAndBicAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeNumberAndBicAccountIdentification
		return nil
	}

	plLocalAccountIdentification := new(PLLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&plLocalAccountIdentification); err == nil {
		u.PLLocalAccountIdentification = plLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypePLLocalAccountIdentification
		return nil
	}

	seLocalAccountIdentification := new(SELocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&seLocalAccountIdentification); err == nil {
		u.SELocalAccountIdentification = seLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeSELocalAccountIdentification
		return nil
	}

	ukLocalAccountIdentification := new(UKLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ukLocalAccountIdentification); err == nil {
		u.UKLocalAccountIdentification = ukLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeUKLocalAccountIdentification
		return nil
	}

	usLocalAccountIdentification := new(USLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&usLocalAccountIdentification); err == nil {
		u.USLocalAccountIdentification = usLocalAccountIdentification
		u.Type = BankAccountInfoAccountIdentificationTypeUSLocalAccountIdentification
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BankAccountInfoAccountIdentification) MarshalJSON() ([]byte, error) {
	if u.AULocalAccountIdentification != nil {
		return json.Marshal(u.AULocalAccountIdentification)
	}

	if u.CALocalAccountIdentification != nil {
		return json.Marshal(u.CALocalAccountIdentification)
	}

	if u.CZLocalAccountIdentification != nil {
		return json.Marshal(u.CZLocalAccountIdentification)
	}

	if u.DKLocalAccountIdentification != nil {
		return json.Marshal(u.DKLocalAccountIdentification)
	}

	if u.HULocalAccountIdentification != nil {
		return json.Marshal(u.HULocalAccountIdentification)
	}

	if u.IbanAccountIdentification != nil {
		return json.Marshal(u.IbanAccountIdentification)
	}

	if u.NOLocalAccountIdentification != nil {
		return json.Marshal(u.NOLocalAccountIdentification)
	}

	if u.NumberAndBicAccountIdentification != nil {
		return json.Marshal(u.NumberAndBicAccountIdentification)
	}

	if u.PLLocalAccountIdentification != nil {
		return json.Marshal(u.PLLocalAccountIdentification)
	}

	if u.SELocalAccountIdentification != nil {
		return json.Marshal(u.SELocalAccountIdentification)
	}

	if u.UKLocalAccountIdentification != nil {
		return json.Marshal(u.UKLocalAccountIdentification)
	}

	if u.USLocalAccountIdentification != nil {
		return json.Marshal(u.USLocalAccountIdentification)
	}

	return nil, nil
}

type BankAccountInfo struct {
	// Identification of the bank account.
	AccountIdentification *BankAccountInfoAccountIdentification `json:"accountIdentification,omitempty"`
	// The type of bank account.
	AccountType *string `json:"accountType,omitempty"`
	// The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.
	CountryCode *string `json:"countryCode,omitempty"`
}
