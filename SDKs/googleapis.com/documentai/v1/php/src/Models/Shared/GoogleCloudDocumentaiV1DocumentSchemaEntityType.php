<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudDocumentaiV1DocumentSchemaEntityType - EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudDocumentaiV1DocumentSchemaEntityType
{
    /**
     * The entity type that this type is derived from. For now, one and only one should be set.
     * 
     * @var ?array<string> $baseTypes
     */
	#[\JMS\Serializer\Annotation\SerializedName('baseTypes')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $baseTypes = null;
    
    /**
     * User defined name for the type.
     * 
     * @var ?string $displayName
     */
	#[\JMS\Serializer\Annotation\SerializedName('displayName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $displayName = null;
    
    /**
     * Defines the a list of enum values.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues $enumValues
     */
	#[\JMS\Serializer\Annotation\SerializedName('enumValues')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues $enumValues = null;
    
    /**
     * Name of the type. It must be unique within the schema file and cannot be a 'Common Type'. Besides that we use the following naming conventions: - *use `snake_casing`* - name matching is case-sensitive - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can handle any ascii character) - The `/` is sometimes used to denote a property of a type. For example `line_item/amount`. This convention is deprecated, but will still be honored for backward compatibility.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Description the nested structure, or composition of an entity.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty> $properties
     */
	#[\JMS\Serializer\Annotation\SerializedName('properties')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $properties = null;
    
	public function __construct()
	{
		$this->baseTypes = null;
		$this->displayName = null;
		$this->enumValues = null;
		$this->name = null;
		$this->properties = null;
	}
}
