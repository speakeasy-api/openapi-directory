"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetUserUsernameTokenKindKindEnum(str, Enum):
    r"""Token type"""
    ACCESS_ = '\'access\''
    REFRESH_ = '\'refresh\''
    AUTHORIZATION_ = '\'authorization\''
    ID_ = '\'id\''
    SELFIE_ = '\'selfie\''
    PLAIN_ = '\'plain\''


@dataclasses.dataclass
class GetUserUsernameTokenKindRequest:
    
    kind: GetUserUsernameTokenKindKindEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'kind', 'style': 'simple', 'explode': False }})
    r"""Token type"""  
    username: str = dataclasses.field(metadata={'path_param': { 'field_name': 'username', 'style': 'simple', 'explode': False }})
    r"""A username or email."""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': True }})
    r"""OpenID Connect scope"""  
    

@dataclasses.dataclass
class GetUserUsernameTokenKindResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    