"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SamplingRule:
    r"""A sampling rule that services use to decide whether to instrument a request. Rule fields can match properties of the service, or properties of a request. The service can ignore rules that don't match its properties."""
    
    fixed_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixedRate') }})  
    host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Host') }})  
    http_method: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HTTPMethod') }})  
    priority: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Priority') }})  
    reservoir_size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReservoirSize') }})  
    resource_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceARN') }})  
    service_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName') }})  
    service_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceType') }})  
    url_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('URLPath') }})  
    version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version') }})  
    attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})  
    rule_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleARN'), 'exclude': lambda f: f is None }})  
    rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleName'), 'exclude': lambda f: f is None }})  
    