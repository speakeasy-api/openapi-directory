/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The output data type of the tile operation.
 */
export enum GetTileOutputDataTypeEnum {
  Int32 = "INT32",
  Float32 = "FLOAT32",
  Int16 = "INT16",
  Float64 = "FLOAT64",
  Uint16 = "UINT16",
}

/**
 * Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.
 */
export enum GetTileTargetEnum {
  Input = "INPUT",
  Output = "OUTPUT",
}

export class GetTileRequest extends SpeakeasyBase {
  /**
   * The Amazon Resource Name (ARN) of the tile operation.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Arn" })
  arn: string;

  /**
   * The particular assets or bands to tile.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ImageAssets",
  })
  imageAssets: string[];

  /**
   * Determines whether or not to return a valid data mask.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ImageMask",
  })
  imageMask?: boolean;

  /**
   * The output data type of the tile operation.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=OutputDataType",
  })
  outputDataType?: GetTileOutputDataTypeEnum;

  /**
   * The data format of the output tile. The formats include .npy, .png and .jpg.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=OutputFormat",
  })
  outputFormat?: string;

  /**
   * Property filters for the imagery to tile.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PropertyFilters",
  })
  propertyFilters?: string;

  /**
   * Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Target",
  })
  target: GetTileTargetEnum;

  /**
   * Time range filter applied to imagery to find the images to tile.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TimeRangeFilter",
  })
  timeRangeFilter?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The x coordinate of the tile input.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=x" })
  x: number;

  /**
   * The y coordinate of the tile input.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=y" })
  y: number;

  /**
   * The z coordinate of the tile input.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=z" })
  z: number;
}

export class GetTileResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getTileOutput?: shared.GetTileOutput;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
