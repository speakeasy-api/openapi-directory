"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import collection as shared_collection
from ..shared import security as shared_security
from typing import Optional


@dataclasses.dataclass
class GetContributorCollectionsSecurity:
    
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    customer_access_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetContributorCollectionsRequest:
    
    contributor_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'contributor_id', 'style': 'simple', 'explode': False }})
    r"""Contributor ID"""  
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Collection ID that belongs to the contributor"""  
    

@dataclasses.dataclass
class GetContributorCollectionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    collection: Optional[shared_collection.Collection] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    