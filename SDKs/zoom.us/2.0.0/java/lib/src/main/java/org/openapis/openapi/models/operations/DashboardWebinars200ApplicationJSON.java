/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * DashboardWebinars200ApplicationJSON - Pagination object.
 */
public class DashboardWebinars200ApplicationJSON {
    /**
     * Start date for this report in 'yyyy-mm-dd' format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("from")
    public LocalDate from;
    public DashboardWebinars200ApplicationJSON withFrom(LocalDate from) {
        this.from = from;
        return this;
    }
    
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_page_token")
    public String nextPageToken;
    public DashboardWebinars200ApplicationJSON withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
    /**
     * The number of pages returned for the request made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_count")
    public Long pageCount;
    public DashboardWebinars200ApplicationJSON withPageCount(Long pageCount) {
        this.pageCount = pageCount;
        return this;
    }
    
    /**
     * The number of records returned within a single API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    public Long pageSize;
    public DashboardWebinars200ApplicationJSON withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * End date for this report in 'yyyy-mm-dd' format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("to")
    public LocalDate to;
    public DashboardWebinars200ApplicationJSON withTo(LocalDate to) {
        this.to = to;
        return this;
    }
    
    /**
     * The number of all records available across pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_records")
    public Long totalRecords;
    public DashboardWebinars200ApplicationJSON withTotalRecords(Long totalRecords) {
        this.totalRecords = totalRecords;
        return this;
    }
    
    /**
     * Array of webinar objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webinars")
    public DashboardWebinars200ApplicationJSONWebinarMetrics[] webinars;
    public DashboardWebinars200ApplicationJSON withWebinars(DashboardWebinars200ApplicationJSONWebinarMetrics[] webinars) {
        this.webinars = webinars;
        return this;
    }
    
}
