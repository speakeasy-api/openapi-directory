// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateTagTypeEnum - Optional type for the tag.
type CreateTagTypeEnum string

const (
	CreateTagTypeEnumRegular  CreateTagTypeEnum = "Regular"
	CreateTagTypeEnumNegative CreateTagTypeEnum = "Negative"
)

func (e CreateTagTypeEnum) ToPointer() *CreateTagTypeEnum {
	return &e
}

func (e *CreateTagTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Regular":
		fallthrough
	case "Negative":
		*e = CreateTagTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTagTypeEnum: %v", v)
	}
}

type CreateTagRequest struct {
	// API key.
	TrainingKey string `header:"style=simple,explode=false,name=Training-Key"`
	// Optional description for the tag.
	Description *string `queryParam:"style=form,explode=true,name=description"`
	// The tag name.
	Name string `queryParam:"style=form,explode=true,name=name"`
	// The project id.
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
	// Optional type for the tag.
	Type *CreateTagTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type CreateTagResponse struct {
	Body        []byte
	ContentType string
	// Error response
	CustomVisionError *shared.CustomVisionError
	StatusCode        int
	RawResponse       *http.Response
	// OK
	Tag *shared.Tag
}
