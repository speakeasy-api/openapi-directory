/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Creatives {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a deal id association for the creative.
   */
  adexchangebuyerCreativesAddDeal(
    req: operations.AdexchangebuyerCreativesAddDealRequest,
    security: operations.AdexchangebuyerCreativesAddDealSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerCreativesAddDealResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerCreativesAddDealRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/creatives/{accountId}/{buyerCreativeId}/addDeal/{dealId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerCreativesAddDealSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerCreativesAddDealResponse =
        new operations.AdexchangebuyerCreativesAddDealResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
   */
  adexchangebuyerCreativesGet(
    req: operations.AdexchangebuyerCreativesGetRequest,
    security: operations.AdexchangebuyerCreativesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerCreativesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerCreativesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/creatives/{accountId}/{buyerCreativeId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerCreativesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerCreativesGetResponse =
        new operations.AdexchangebuyerCreativesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creative = utils.objectToClass(httpRes?.data, shared.Creative);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit a new creative.
   */
  adexchangebuyerCreativesInsert(
    req: operations.AdexchangebuyerCreativesInsertRequest,
    security: operations.AdexchangebuyerCreativesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerCreativesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerCreativesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/creatives";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "creative",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerCreativesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerCreativesInsertResponse =
        new operations.AdexchangebuyerCreativesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creative = utils.objectToClass(httpRes?.data, shared.Creative);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
   */
  adexchangebuyerCreativesList(
    req: operations.AdexchangebuyerCreativesListRequest,
    security: operations.AdexchangebuyerCreativesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerCreativesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerCreativesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/creatives";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerCreativesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerCreativesListResponse =
        new operations.AdexchangebuyerCreativesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creativesList = utils.objectToClass(
              httpRes?.data,
              shared.CreativesList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the external deal ids associated with the creative.
   */
  adexchangebuyerCreativesListDeals(
    req: operations.AdexchangebuyerCreativesListDealsRequest,
    security: operations.AdexchangebuyerCreativesListDealsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerCreativesListDealsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerCreativesListDealsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/creatives/{accountId}/{buyerCreativeId}/listDeals",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerCreativesListDealsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerCreativesListDealsResponse =
        new operations.AdexchangebuyerCreativesListDealsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creativeDealIds = utils.objectToClass(
              httpRes?.data,
              shared.CreativeDealIds
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a deal id associated with the creative.
   */
  adexchangebuyerCreativesRemoveDeal(
    req: operations.AdexchangebuyerCreativesRemoveDealRequest,
    security: operations.AdexchangebuyerCreativesRemoveDealSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerCreativesRemoveDealResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerCreativesRemoveDealRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/creatives/{accountId}/{buyerCreativeId}/removeDeal/{dealId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerCreativesRemoveDealSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerCreativesRemoveDealResponse =
        new operations.AdexchangebuyerCreativesRemoveDealResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
