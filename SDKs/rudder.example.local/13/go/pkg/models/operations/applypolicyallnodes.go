// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ApplyPolicyAllNodes200ApplicationJSONActionEnum - The id of the action
type ApplyPolicyAllNodes200ApplicationJSONActionEnum string

const (
	ApplyPolicyAllNodes200ApplicationJSONActionEnumApplyPolicyAllNodes ApplyPolicyAllNodes200ApplicationJSONActionEnum = "applyPolicyAllNodes"
)

func (e *ApplyPolicyAllNodes200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "applyPolicyAllNodes":
		*e = ApplyPolicyAllNodes200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplyPolicyAllNodes200ApplicationJSONActionEnum: %s", s)
	}
}

type ApplyPolicyAllNodes200ApplicationJSONData struct {
	// Node hostname
	Hostname *string `json:"hostname,omitempty"`
	// Rudder id of the node
	ID *string `json:"id,omitempty"`
	// Result or policy application trigger
	Result *string `json:"result,omitempty"`
}

// ApplyPolicyAllNodes200ApplicationJSONResultEnum - Result of the request
type ApplyPolicyAllNodes200ApplicationJSONResultEnum string

const (
	ApplyPolicyAllNodes200ApplicationJSONResultEnumSuccess ApplyPolicyAllNodes200ApplicationJSONResultEnum = "success"
	ApplyPolicyAllNodes200ApplicationJSONResultEnumError   ApplyPolicyAllNodes200ApplicationJSONResultEnum = "error"
)

func (e *ApplyPolicyAllNodes200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ApplyPolicyAllNodes200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplyPolicyAllNodes200ApplicationJSONResultEnum: %s", s)
	}
}

// ApplyPolicyAllNodes200ApplicationJSON - Result
type ApplyPolicyAllNodes200ApplicationJSON struct {
	// The id of the action
	Action ApplyPolicyAllNodes200ApplicationJSONActionEnum `json:"action"`
	Data   []ApplyPolicyAllNodes200ApplicationJSONData     `json:"data"`
	// Result of the request
	Result ApplyPolicyAllNodes200ApplicationJSONResultEnum `json:"result"`
}

type ApplyPolicyAllNodesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Result
	ApplyPolicyAllNodes200ApplicationJSONObject *ApplyPolicyAllNodes200ApplicationJSON
}
