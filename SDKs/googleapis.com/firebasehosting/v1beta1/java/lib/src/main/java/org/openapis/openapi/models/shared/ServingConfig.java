/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ServingConfig - The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
 */
public class ServingConfig {
    /**
     * How to handle well known App Association files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appAssociation")
    public ServingConfigAppAssociationEnum appAssociation;

    public ServingConfig withAppAssociation(ServingConfigAppAssociationEnum appAssociation) {
        this.appAssociation = appAssociation;
        return this;
    }
    
    /**
     * Defines whether to drop the file extension from uploaded files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cleanUrls")
    public Boolean cleanUrls;

    public ServingConfig withCleanUrls(Boolean cleanUrls) {
        this.cleanUrls = cleanUrls;
        return this;
    }
    
    /**
     * An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    public Header[] headers;

    public ServingConfig withHeaders(Header[] headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * If provided, i18n rewrites are enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("i18n")
    public I18nConfig i18n;

    public ServingConfig withI18n(I18nConfig i18n) {
        this.i18n = i18n;
        return this;
    }
    
    /**
     * An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirects")
    public Redirect[] redirects;

    public ServingConfig withRedirects(Redirect[] redirects) {
        this.redirects = redirects;
        return this;
    }
    
    /**
     * An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rewrites")
    public Rewrite[] rewrites;

    public ServingConfig withRewrites(Rewrite[] rewrites) {
        this.rewrites = rewrites;
        return this;
    }
    
    /**
     * Defines how to handle a trailing slash in the URL path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trailingSlashBehavior")
    public ServingConfigTrailingSlashBehaviorEnum trailingSlashBehavior;

    public ServingConfig withTrailingSlashBehavior(ServingConfigTrailingSlashBehaviorEnum trailingSlashBehavior) {
        this.trailingSlashBehavior = trailingSlashBehavior;
        return this;
    }
    
    public ServingConfig(){}
}
