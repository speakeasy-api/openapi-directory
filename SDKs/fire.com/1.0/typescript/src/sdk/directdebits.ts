/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The fire.com api allows businesses to automate direct debit payment actions on their fire.com business accounts.
 *
 * @remarks
 *
 * You can retrieve details of your direct debit payments, direct debit mandates and also take actions on both your direct debit payments and mandates.
 *
 */
export class DirectDebits {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Activate a direct debit mandate
   *
   * @remarks
   * This endpoint can only be used to activate a direct debit mandate when it is in the status REJECT_REQUESTED (even if the account has direct debits disabled). This action will also enable the account for direct debits if it was previously set to be disabled.
   * The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_ACTIVATE
   *
   */
  activateMandate(
    req: operations.ActivateMandateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ActivateMandateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ActivateMandateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/mandates/{mandateUuid}/activate",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ActivateMandateResponse =
        new operations.ActivateMandateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Cancel a direct debit mandate
   *
   * @remarks
   * This endpoint allows you to cancel a direct debit mandate.
   * The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_CANCEL
   *
   */
  cancelMandateByUuid(
    req: operations.CancelMandateByUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelMandateByUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelMandateByUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/mandates/{mandateUuid}/cancel",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelMandateByUuidResponse =
        new operations.CancelMandateByUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get the details of a direct debit
   *
   * @remarks
   * Retrieve all details of a single direct debit collection/payment, whether successful or not.
   * The permision needed to access this endpoint is **PERM_BUSINESS_GET_DIRECT_DEBIT**
   *
   */
  getDirectDebitByUuid(
    req: operations.GetDirectDebitByUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDirectDebitByUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDirectDebitByUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/directdebits/{directDebitUuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDirectDebitByUuidResponse =
        new operations.GetDirectDebitByUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directDebit = utils.objectToClass(
              httpRes?.data,
              operations.GetDirectDebitByUuidDirectDebit
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all direct debit mandates
   *
   * @remarks
   * The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATES
   *
   */
  getDirectDebitMandates(
    config?: AxiosRequestConfig
  ): Promise<operations.GetDirectDebitMandatesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/mandates";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDirectDebitMandatesResponse =
        new operations.GetDirectDebitMandatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mandates = utils.objectToClass(
              httpRes?.data,
              operations.GetDirectDebitMandatesMandates
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all DD payments associated with a direct debit mandate
   *
   * @remarks
   * Retrieve all direct debit payments associated with a direct debit mandate.
   * The permision needed to access this endpoint is PERM_BUSINESS_GET_DIRECT_DEBITS
   *
   */
  getDirectDebitsForMandateUuid(
    req: operations.GetDirectDebitsForMandateUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDirectDebitsForMandateUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDirectDebitsForMandateUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/directdebits";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDirectDebitsForMandateUuidResponse =
        new operations.GetDirectDebitsForMandateUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directDebits = utils.objectToClass(
              httpRes?.data,
              operations.GetDirectDebitsForMandateUuidDirectDebits
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get direct debit mandate details
   *
   * @remarks
   * Retrieve all details for a direct debit mandate.
   * The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATE
   *
   */
  getMandate(
    req: operations.GetMandateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMandateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMandateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/mandates/{mandateUuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMandateResponse =
        new operations.GetMandateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mandate = utils.objectToClass(
              httpRes?.data,
              operations.GetMandateMandate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reject a direct debit payment
   *
   * @remarks
   * This endpoint allows you to reject a direct debit payment where the status is still set to RECEIVED.
   * Permission name PERM_BUSINESS_POST_DIRECT_DEBIT_REJECT
   *
   */
  rejectDirectDebit(
    req: operations.RejectDirectDebitRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RejectDirectDebitResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RejectDirectDebitRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/directdebits/{directDebitUuid}/reject",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RejectDirectDebitResponse =
        new operations.RejectDirectDebitResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Update a direct debit mandate alias
   *
   * @remarks
   * Update Direct Debit Mandate Alias
   * The permision needed to access this endpoint is PERM_BUSINESS_PUT_MANDATE
   *
   */
  updateMandateAlias(
    req: operations.UpdateMandateAliasRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateMandateAliasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateMandateAliasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/mandates/{mandateUuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateMandateAliasResponse =
        new operations.UpdateMandateAliasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }
}
