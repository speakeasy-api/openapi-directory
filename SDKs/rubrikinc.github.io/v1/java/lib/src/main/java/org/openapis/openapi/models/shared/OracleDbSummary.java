/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class OracleDbSummary {
    /**
     * An array that contains the archive log destinations for the specified Oracle database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archiveLogDestinations")
    public String[] archiveLogDestinations;

    public OracleDbSummary withArchiveLogDestinations(String[] archiveLogDestinations) {
        this.archiveLogDestinations = archiveLogDestinations;
        return this;
    }
    
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public OracleDbSummary withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public OracleDbSummary withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public OracleDbSummary withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentBackupTaskInfo")
    public BackupTaskDiagnosticInfo currentBackupTaskInfo;

    public OracleDbSummary withCurrentBackupTaskInfo(BackupTaskDiagnosticInfo currentBackupTaskInfo) {
        this.currentBackupTaskInfo = currentBackupTaskInfo;
        return this;
    }
    
    /**
     * Rubrik ID of the Data Guard group to which this database belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataGuardGroupId")
    public String dataGuardGroupId;

    public OracleDbSummary withDataGuardGroupId(String dataGuardGroupId) {
        this.dataGuardGroupId = dataGuardGroupId;
        return this;
    }
    
    /**
     * List of Data Guard group members.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataGuardGroupMembers")
    public DataGuardGroupMember[] dataGuardGroupMembers;

    public OracleDbSummary withDataGuardGroupMembers(DataGuardGroupMember[] dataGuardGroupMembers) {
        this.dataGuardGroupMembers = dataGuardGroupMembers;
        return this;
    }
    
    /**
     * Name of the Data Guard group to which this database belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataGuardGroupName")
    public String dataGuardGroupName;

    public OracleDbSummary withDataGuardGroupName(String dataGuardGroupName) {
        this.dataGuardGroupName = dataGuardGroupName;
        return this;
    }
    
    /**
     * Specifies whether this database is a Data Guard member, Data Guard group, or a non-Data Guard database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataGuardType")
    public DataGuardTypeEnum dataGuardType;

    public OracleDbSummary withDataGuardType(DataGuardTypeEnum dataGuardType) {
        this.dataGuardType = dataGuardType;
        return this;
    }
    
    /**
     * Current role of the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databaseRole")
    public String databaseRole;

    public OracleDbSummary withDatabaseRole(String databaseRole) {
        this.databaseRole = databaseRole;
        return this;
    }
    
    /**
     * Unique name for the Oracle database (DB_UNIQUE_NAME).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dbUniqueName")
    public String dbUniqueName;

    public OracleDbSummary withDbUniqueName(String dbUniqueName) {
        this.dbUniqueName = dbUniqueName;
        return this;
    }
    
    /**
     * The ID of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainId")
    public String effectiveSlaDomainId;

    public OracleDbSummary withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainName")
    public String effectiveSlaDomainName;

    public OracleDbSummary withEffectiveSlaDomainName(String effectiveSlaDomainName) {
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        return this;
    }
    
    /**
     * Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainPolarisManagedId")
    public String effectiveSlaDomainPolarisManagedId;

    public OracleDbSummary withEffectiveSlaDomainPolarisManagedId(String effectiveSlaDomainPolarisManagedId) {
        this.effectiveSlaDomainPolarisManagedId = effectiveSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectId")
    public String effectiveSlaSourceObjectId;

    public OracleDbSummary withEffectiveSlaSourceObjectId(String effectiveSlaSourceObjectId) {
        this.effectiveSlaSourceObjectId = effectiveSlaSourceObjectId;
        return this;
    }
    
    /**
     * The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectName")
    public String effectiveSlaSourceObjectName;

    public OracleDbSummary withEffectiveSlaSourceObjectName(String effectiveSlaSourceObjectName) {
        this.effectiveSlaSourceObjectName = effectiveSlaSourceObjectName;
        return this;
    }
    
    /**
     * Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
     */
    @JsonProperty("hostLogRetentionHours")
    public Integer hostLogRetentionHours;

    public OracleDbSummary withHostLogRetentionHours(Integer hostLogRetentionHours) {
        this.hostLogRetentionHours = hostLogRetentionHours;
        return this;
    }
    
    /**
     * The ID of the Rubrik object.
     */
    @JsonProperty("id")
    public String id;

    public OracleDbSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * True/false value indicating if backup task information is included in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeBackupTaskInfo")
    public Boolean includeBackupTaskInfo;

    public OracleDbSummary withIncludeBackupTaskInfo(Boolean includeBackupTaskInfo) {
        this.includeBackupTaskInfo = includeBackupTaskInfo;
        return this;
    }
    
    /**
     * An array that contains information about the objects in the infrastructure path of a specified Oracle database.
     */
    @JsonProperty("infraPath")
    public ManagedHierarchyObjectAncestor[] infraPath;

    public OracleDbSummary withInfraPath(ManagedHierarchyObjectAncestor[] infraPath) {
        this.infraPath = infraPath;
        return this;
    }
    
    /**
     * Details of the instances of the Oracle database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instances")
    public OracleInstanceProperties[] instances;

    public OracleDbSummary withInstances(OracleInstanceProperties[] instances) {
        this.instances = instances;
        return this;
    }
    
    /**
     * Boolean value that indicates whether the ARCHIVELOG mode is enabled on the Oracle database or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isArchiveLogModeEnabled")
    public Boolean isArchiveLogModeEnabled;

    public OracleDbSummary withIsArchiveLogModeEnabled(Boolean isArchiveLogModeEnabled) {
        this.isArchiveLogModeEnabled = isArchiveLogModeEnabled;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public OracleDbSummary withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * A Boolean value that specifies whether the Oracle database is local to the cluster. When this value is 'true', the Oracle database is local to the cluster.
     */
    @JsonProperty("isDbLocalToTheCluster")
    public Boolean isDbLocalToTheCluster;

    public OracleDbSummary withIsDbLocalToTheCluster(Boolean isDbLocalToTheCluster) {
        this.isDbLocalToTheCluster = isDbLocalToTheCluster;
        return this;
    }
    
    /**
     * Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEffectiveSlaDomainRetentionLocked")
    public Boolean isEffectiveSlaDomainRetentionLocked;

    public OracleDbSummary withIsEffectiveSlaDomainRetentionLocked(Boolean isEffectiveSlaDomainRetentionLocked) {
        this.isEffectiveSlaDomainRetentionLocked = isEffectiveSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Indicates whether the current DATABASE_ROLE is PRIMARY which specifies the database is accepting read/write transactions as the primary database in a Data Guard configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPrimary")
    public Boolean isPrimary;

    public OracleDbSummary withIsPrimary(Boolean isPrimary) {
        this.isPrimary = isPrimary;
        return this;
    }
    
    /**
     * Boolean value that indicates whether a Oracle database object is in an archived state and has retained snapshots. Value is true when the object is archived with retained snapshots.
     */
    @JsonProperty("isRelic")
    public Boolean isRelic;

    public OracleDbSummary withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    /**
     * The timestamp of the previous snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastSnapshotTime")
    public OffsetDateTime lastSnapshotTime;

    public OracleDbSummary withLastSnapshotTime(OffsetDateTime lastSnapshotTime) {
        this.lastSnapshotTime = lastSnapshotTime;
        return this;
    }
    
    /**
     * Specifies an interval in minutes. This interval is the period between successive log backups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logBackupFrequencyInMinutes")
    public Integer logBackupFrequencyInMinutes;

    public OracleDbSummary withLogBackupFrequencyInMinutes(Integer logBackupFrequencyInMinutes) {
        this.logBackupFrequencyInMinutes = logBackupFrequencyInMinutes;
        return this;
    }
    
    /**
     * The name of the Rubrik object.
     */
    @JsonProperty("name")
    public String name;

    public OracleDbSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Count of the number of instances of the Oracle database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numInstances")
    public Integer numInstances;

    public OracleDbSummary withNumInstances(Integer numInstances) {
        this.numInstances = numInstances;
        return this;
    }
    
    /**
     * An integer that specifies the number of missed snapshots.
     */
    @JsonProperty("numMissedSnapshot")
    public Integer numMissedSnapshot;

    public OracleDbSummary withNumMissedSnapshot(Integer numMissedSnapshot) {
        this.numMissedSnapshot = numMissedSnapshot;
        return this;
    }
    
    /**
     * Count of the number of table spaces in Oracle database.
     */
    @JsonProperty("numTablespaces")
    public Integer numTablespaces;

    public OracleDbSummary withNumTablespaces(Integer numTablespaces) {
        this.numTablespaces = numTablespaces;
        return this;
    }
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public OracleDbSummary withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * Rubrik ID of the RAC on which this database is hosted. This field will be empty if the database is not hosted on a RAC environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("racId")
    public String racId;

    public OracleDbSummary withRacId(String racId) {
        this.racId = racId;
        return this;
    }
    
    /**
     * RAC name of the cluster database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("racName")
    public String racName;

    public OracleDbSummary withRacName(String racName) {
        this.racName = racName;
        return this;
    }
    
    /**
     * The ID of the SLA Domain whose retention policy is in use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionSlaDomainId")
    public String retentionSlaDomainId;

    public OracleDbSummary withRetentionSlaDomainId(String retentionSlaDomainId) {
        this.retentionSlaDomainId = retentionSlaDomainId;
        return this;
    }
    
    /**
     * System identifier (SID) of the Oracle database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public OracleDbSummary withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
     */
    @JsonProperty("slaAssignment")
    public OracleDbSummarySlaAssignmentEnum slaAssignment;

    public OracleDbSummary withSlaAssignment(OracleDbSummarySlaAssignmentEnum slaAssignment) {
        this.slaAssignment = slaAssignment;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public OracleDbSummary withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    /**
     * Rubrik ID of the standalone Oracle host on which this database is hosted. This field will be empty if the database is not hosted on a standalone system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("standaloneHostId")
    public String standaloneHostId;

    public OracleDbSummary withStandaloneHostId(String standaloneHostId) {
        this.standaloneHostId = standaloneHostId;
        return this;
    }
    
    /**
     * Hostname of the standalone Oracle database host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("standaloneHostName")
    public String standaloneHostName;

    public OracleDbSummary withStandaloneHostName(String standaloneHostName) {
        this.standaloneHostName = standaloneHostName;
        return this;
    }
    
    public OracleDbSummary(@JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("effectiveSlaDomainId") String effectiveSlaDomainId, @JsonProperty("effectiveSlaDomainName") String effectiveSlaDomainName, @JsonProperty("hostLogRetentionHours") Integer hostLogRetentionHours, @JsonProperty("id") String id, @JsonProperty("infraPath") ManagedHierarchyObjectAncestor[] infraPath, @JsonProperty("isDbLocalToTheCluster") Boolean isDbLocalToTheCluster, @JsonProperty("isRelic") Boolean isRelic, @JsonProperty("name") String name, @JsonProperty("numMissedSnapshot") Integer numMissedSnapshot, @JsonProperty("numTablespaces") Integer numTablespaces, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("slaAssignment") OracleDbSummarySlaAssignmentEnum slaAssignment) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        this.hostLogRetentionHours = hostLogRetentionHours;
        this.id = id;
        this.infraPath = infraPath;
        this.isDbLocalToTheCluster = isDbLocalToTheCluster;
        this.isRelic = isRelic;
        this.name = name;
        this.numMissedSnapshot = numMissedSnapshot;
        this.numTablespaces = numTablespaces;
        this.primaryClusterId = primaryClusterId;
        this.slaAssignment = slaAssignment;
  }
}
