<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class CreateArtifactJsonRequest
{
    /**
     * The content of the artifact being created. This is often, but not always, JSON data
     * 
     * representing one of the supported artifact types:
     * 
     * * Avro (`AVRO`)
     * * Protobuf (`PROTOBUF`)
     * * JSON Schema (`JSON`)
     * * Kafka Connect (`KCONNECT`)
     * * OpenAPI (`OPENAPI`)
     * * AsyncAPI (`ASYNCAPI`)
     * * GraphQL (`GRAPHQL`)
     * * Web Services Description Language (`WSDL`)
     * * XML Schema (`XSD`)
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ArtifactContent $artifactContent
     */
	#[SpeakeasyMetadata('request:mediaType=application/vnd.create.extended+json')]
    public \OpenAPI\OpenAPI\Models\Shared\ArtifactContent $artifactContent;
    
    /**
     * A client-provided, globally unique identifier for the new artifact.
     * 
     * @var ?string $xRegistryArtifactId
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-ArtifactId')]
    public ?string $xRegistryArtifactId = null;
    
    /**
     * Specifies the type of the artifact being added. Possible values include:
     * 
     * 
     * * Avro (`AVRO`)
     * * Protobuf (`PROTOBUF`)
     * * JSON Schema (`JSON`)
     * * Kafka Connect (`KCONNECT`)
     * * OpenAPI (`OPENAPI`)
     * * AsyncAPI (`ASYNCAPI`)
     * * GraphQL (`GRAPHQL`)
     * * Web Services Description Language (`WSDL`)
     * * XML Schema (`XSD`)
     * 
     * @var ?string $xRegistryArtifactType
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-ArtifactType')]
    public ?string $xRegistryArtifactType = null;
    
    /**
     * Specifies the (optional) hash of the artifact to be verified.
     * 
     * @var ?string $xRegistryContentHash
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-Content-Hash')]
    public ?string $xRegistryContentHash = null;
    
    /**
     * Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
     * 
     * @var ?string $xRegistryDescription
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-Description')]
    public ?string $xRegistryDescription = null;
    
    /**
     * Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
     * 
     * @var ?string $xRegistryDescriptionEncoded
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-Description-Encoded')]
    public ?string $xRegistryDescriptionEncoded = null;
    
    /**
     * The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateArtifactJsonXRegistryHashAlgorithmEnum $xRegistryHashAlgorithm
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-Hash-Algorithm')]
    public ?CreateArtifactJsonXRegistryHashAlgorithmEnum $xRegistryHashAlgorithm = null;
    
    /**
     * Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
     * 
     * @var ?string $xRegistryName
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-Name')]
    public ?string $xRegistryName = null;
    
    /**
     * Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
     * 
     * @var ?string $xRegistryNameEncoded
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-Name-Encoded')]
    public ?string $xRegistryNameEncoded = null;
    
    /**
     * Specifies the version number of this initial version of the artifact content.  This would typically
     * 
     * be a simple integer or a SemVer value.  If not provided, the server will assign a version number
     * automatically (starting with version `1`).
     * 
     * @var ?string $xRegistryVersion
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Registry-Version')]
    public ?string $xRegistryVersion = null;
    
    /**
     * Used only when the `ifExists` query parameter is set to `RETURN_OR_UPDATE`, this parameter can be set to `true` to indicate that the server should "canonicalize" the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.
     * 
     * @var ?bool $canonical
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=canonical')]
    public ?bool $canonical = null;
    
    /**
     * The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * 
     * @var string $groupId
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=groupId')]
    public string $groupId;
    
    /**
     * Set this option to instruct the server on what to do if the artifact already exists.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\IfExistsEnum $ifExists
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=ifExists')]
    public ?\OpenAPI\OpenAPI\Models\Shared\IfExistsEnum $ifExists = null;
    
	public function __construct()
	{
		$this->artifactContent = new \OpenAPI\OpenAPI\Models\Shared\ArtifactContent();
		$this->xRegistryArtifactId = null;
		$this->xRegistryArtifactType = null;
		$this->xRegistryContentHash = null;
		$this->xRegistryDescription = null;
		$this->xRegistryDescriptionEncoded = null;
		$this->xRegistryHashAlgorithm = null;
		$this->xRegistryName = null;
		$this->xRegistryNameEncoded = null;
		$this->xRegistryVersion = null;
		$this->canonical = null;
		$this->groupId = "";
		$this->ifExists = null;
	}
}
