"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkFirmwareUpgradesStagedGroupRequest:
    
    group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'groupId', 'style': 'simple', 'explode': False }})  
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSONAssignedDevicesDevices:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the device"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Serial of the device"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSONAssignedDevicesSwitchStacks:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the Switch Stack"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the Switch Stack"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSONAssignedDevices:
    r"""The devices and Switch Stacks assigned to the Group"""
    
    devices: Optional[list[GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSONAssignedDevicesDevices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices'), 'exclude': lambda f: f is None }})
    r"""Data Array of Devices containing the name and serial"""  
    switch_stacks: Optional[list[GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSONAssignedDevicesSwitchStacks]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchStacks'), 'exclude': lambda f: f is None }})
    r"""Data Array of Switch Stacks containing the name and id"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSON:
    r"""Successful operation"""
    
    assigned_devices: Optional[GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSONAssignedDevices] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedDevices'), 'exclude': lambda f: f is None }})
    r"""The devices and Switch Stacks assigned to the Group"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Staged Upgrade Group"""  
    group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupId'), 'exclude': lambda f: f is None }})
    r"""Id of staged upgrade group"""  
    is_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDefault'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the Staged Upgrade Group"""  
    

@dataclasses.dataclass
class GetNetworkFirmwareUpgradesStagedGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_firmware_upgrades_staged_group_200_application_json_object: Optional[GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    