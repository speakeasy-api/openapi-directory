/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GooglePrivacyDlpV2CustomInfoType - Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
 */
public class GooglePrivacyDlpV2CustomInfoType {
    /**
     * Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detectionRules")
    public GooglePrivacyDlpV2DetectionRule[] detectionRules;

    public GooglePrivacyDlpV2CustomInfoType withDetectionRules(GooglePrivacyDlpV2DetectionRule[] detectionRules) {
        this.detectionRules = detectionRules;
        return this;
    }
    
    /**
     * Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase "Sam Johnson" will match all three phrases "sam johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word "jen" will match the first three letters of the text "jen123" but will return no matches for "jennifer". Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using `LargeCustomDictionaryConfig` in the `StoredInfoType` API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dictionary")
    public GooglePrivacyDlpV2Dictionary dictionary;

    public GooglePrivacyDlpV2CustomInfoType withDictionary(GooglePrivacyDlpV2Dictionary dictionary) {
        this.dictionary = dictionary;
        return this;
    }
    
    /**
     * If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclusionType")
    public GooglePrivacyDlpV2CustomInfoTypeExclusionTypeEnum exclusionType;

    public GooglePrivacyDlpV2CustomInfoType withExclusionType(GooglePrivacyDlpV2CustomInfoTypeExclusionTypeEnum exclusionType) {
        this.exclusionType = exclusionType;
        return this;
    }
    
    /**
     * Type of information detected by the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infoType")
    public GooglePrivacyDlpV2InfoType infoType;

    public GooglePrivacyDlpV2CustomInfoType withInfoType(GooglePrivacyDlpV2InfoType infoType) {
        this.infoType = infoType;
        return this;
    }
    
    /**
     * Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("likelihood")
    public GooglePrivacyDlpV2CustomInfoTypeLikelihoodEnum likelihood;

    public GooglePrivacyDlpV2CustomInfoType withLikelihood(GooglePrivacyDlpV2CustomInfoTypeLikelihoodEnum likelihood) {
        this.likelihood = likelihood;
        return this;
    }
    
    /**
     * Message defining a custom regular expression.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regex")
    public GooglePrivacyDlpV2Regex regex;

    public GooglePrivacyDlpV2CustomInfoType withRegex(GooglePrivacyDlpV2Regex regex) {
        this.regex = regex;
        return this;
    }
    
    /**
     * Score is a summary of all elements in the data profile. A higher number means more sensitive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitivityScore")
    public GooglePrivacyDlpV2SensitivityScore sensitivityScore;

    public GooglePrivacyDlpV2CustomInfoType withSensitivityScore(GooglePrivacyDlpV2SensitivityScore sensitivityScore) {
        this.sensitivityScore = sensitivityScore;
        return this;
    }
    
    /**
     * A reference to a StoredInfoType to use with scanning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storedType")
    public GooglePrivacyDlpV2StoredType storedType;

    public GooglePrivacyDlpV2CustomInfoType withStoredType(GooglePrivacyDlpV2StoredType storedType) {
        this.storedType = storedType;
        return this;
    }
    
    /**
     * Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/dlp/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a "surrogate" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("surrogateType")
    public java.util.Map<String, Object> surrogateType;

    public GooglePrivacyDlpV2CustomInfoType withSurrogateType(java.util.Map<String, Object> surrogateType) {
        this.surrogateType = surrogateType;
        return this;
    }
    
    public GooglePrivacyDlpV2CustomInfoType(){}
}
