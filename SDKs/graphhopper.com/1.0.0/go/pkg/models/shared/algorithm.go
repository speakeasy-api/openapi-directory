// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AlgorithmObjectiveEnum string

const (
	AlgorithmObjectiveEnumTransportTime  AlgorithmObjectiveEnum = "transport_time"
	AlgorithmObjectiveEnumCompletionTime AlgorithmObjectiveEnum = "completion_time"
)

func (e AlgorithmObjectiveEnum) ToPointer() *AlgorithmObjectiveEnum {
	return &e
}

func (e *AlgorithmObjectiveEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transport_time":
		fallthrough
	case "completion_time":
		*e = AlgorithmObjectiveEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlgorithmObjectiveEnum: %v", v)
	}
}

type AlgorithmProblemTypeEnum string

const (
	AlgorithmProblemTypeEnumMin    AlgorithmProblemTypeEnum = "min"
	AlgorithmProblemTypeEnumMinMax AlgorithmProblemTypeEnum = "min-max"
)

func (e AlgorithmProblemTypeEnum) ToPointer() *AlgorithmProblemTypeEnum {
	return &e
}

func (e *AlgorithmProblemTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "min":
		fallthrough
	case "min-max":
		*e = AlgorithmProblemTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlgorithmProblemTypeEnum: %v", v)
	}
}

// Algorithm - Use `objectives` instead.
type Algorithm struct {
	Objective   *AlgorithmObjectiveEnum   `json:"objective,omitempty"`
	ProblemType *AlgorithmProblemTypeEnum `json:"problem_type,omitempty"`
}
