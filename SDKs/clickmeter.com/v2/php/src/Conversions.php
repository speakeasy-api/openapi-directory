<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Conversions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve a count of conversions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsCountResponse
     */
	public function conversionsCount(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/count');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConversionsCountRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete conversion specified by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsDeleteResponse
     */
	public function conversionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}', \OpenAPI\OpenAPI\Models\Operations\ConversionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve a list of conversions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsGetResponse
     */
	public function conversionsGet(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConversionsGetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve a list of datapoints connected to this conversion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsResponse
     */
	public function conversionsGetDatapoints(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/datapoints', \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve a count of datapoints connected to this conversion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsCountResponse
     */
	public function conversionsGetDatapointsCount(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/datapoints/count', \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsCountRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsGetDatapointsCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve the list of events related to this conversion.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsGetHitsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsGetHitsResponse
     */
	public function conversionsGetHits(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsGetHitsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsGetHitsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/hits', \OpenAPI\OpenAPI\Models\Operations\ConversionsGetHitsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConversionsGetHitsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsGetHitsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoClickStreamHitListPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoClickStreamHitListPage', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoClickStreamHitListPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoClickStreamHitListPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsAllListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsAllListResponse
     */
	public function conversionsGetStatisticsAllList(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsAllListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsAllListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/aggregated/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsAllListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsAllListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsListResponse
     */
	public function conversionsGetStatisticsList(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/aggregated/list', \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this conversion for a timeframe
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsSingleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsSingleResponse
     */
	public function conversionsGetStatisticsSingle(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsSingleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsSingleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/aggregated', \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsSingleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsSingleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsGetStatisticsSingleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a conversion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesFormResponse
     */
	public function conversionsPatchNotesForm(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/notes', \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsGenericTextPatch", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a conversion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesJsonResponse
     */
	public function conversionsPatchNotesJson(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/notes', \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsGenericTextPatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a conversion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesRawResponse
     */
	public function conversionsPatchNotesRaw(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/notes', \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchNotesRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Modify the association between a conversion and a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchFormResponse
     */
	public function conversionsPatchForm(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/datapoints/patch', \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsConversionPatchBody", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Modify the association between a conversion and a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchJsonResponse
     */
	public function conversionsPatchJson(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/datapoints/patch', \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsConversionPatchBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Modify the association between a conversion and a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchRawResponse
     */
	public function conversionsPatchRaw(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/datapoints/patch', \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPatchRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update conversion specified by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPostFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPostFormResponse
     */
	public function conversionsPostForm(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPostFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPostFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}', \OpenAPI\OpenAPI\Models\Operations\ConversionsPostFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreDtoConversionsConversion", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPostFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update conversion specified by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPostJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPostJsonResponse
     */
	public function conversionsPostJson(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPostJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPostJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}', \OpenAPI\OpenAPI\Models\Operations\ConversionsPostJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreDtoConversionsConversion", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPostJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update conversion specified by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConversionsPostRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPostRawResponse
     */
	public function conversionsPostRaw(
        \OpenAPI\OpenAPI\Models\Operations\ConversionsPostRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPostRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}', \OpenAPI\OpenAPI\Models\Operations\ConversionsPostRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPostRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a conversion
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoConversionsConversion $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPutFormResponse
     */
	public function conversionsPutForm(
        \OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoConversionsConversion $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPutFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPutFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a conversion
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoConversionsConversion $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPutJsonResponse
     */
	public function conversionsPutJson(
        \OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoConversionsConversion $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPutJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPutJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a conversion
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConversionsPutRawResponse
     */
	public function conversionsPutRaw(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConversionsPutRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConversionsPutRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve conversion specified by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConversionsConversionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConversionsConversionIdResponse
     */
	public function getConversionsConversionId(
        \OpenAPI\OpenAPI\Models\Operations\GetConversionsConversionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConversionsConversionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}', \OpenAPI\OpenAPI\Models\Operations\GetConversionsConversionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConversionsConversionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoConversionsConversion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoConversionsConversion', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoConversionsConversion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoConversionsConversion', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Modify the association between a conversion and multiple datapoints
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutConversionsConversionIdDatapointsBatchPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutConversionsConversionIdDatapointsBatchPatchResponse
     */
	public function putConversionsConversionIdDatapointsBatchPatch(
        \OpenAPI\OpenAPI\Models\Operations\PutConversionsConversionIdDatapointsBatchPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutConversionsConversionIdDatapointsBatchPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversions/{conversionId}/datapoints/batch/patch', \OpenAPI\OpenAPI\Models\Operations\PutConversionsConversionIdDatapointsBatchPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsPatchBodyBatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutConversionsConversionIdDatapointsBatchPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}