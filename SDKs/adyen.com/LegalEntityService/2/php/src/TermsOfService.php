<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TermsOfService 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get Terms of Service information for a legal entity
     * 
     * Returns Terms of Service information for a legal entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceAcceptanceInfosRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceAcceptanceInfosSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse
     */
	public function getLegalEntitiesIdTermsOfServiceAcceptanceInfos(
        \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceAcceptanceInfosRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceAcceptanceInfosSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legalEntities/{id}/termsOfServiceAcceptanceInfos', \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceAcceptanceInfosRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTermsOfServiceAcceptanceInfosResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTermsOfServiceAcceptanceInfosResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Terms of Service status
     * 
     * Returns the required types of Terms of Service that need to be accepted by a legal entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceStatusResponse
     */
	public function getLegalEntitiesIdTermsOfServiceStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legalEntities/{id}/termsOfServiceStatus', \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdTermsOfServiceStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calculateTermsOfServiceStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalculateTermsOfServiceStatusResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accept Terms of Service
     * 
     * Accepts Terms of Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse
     */
	public function patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentid(
        \OpenAPI\OpenAPI\Models\Operations\PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legalEntities/{id}/termsOfService/{termsofservicedocumentid}', \OpenAPI\OpenAPI\Models\Operations\PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "acceptTermsOfServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->acceptTermsOfServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AcceptTermsOfServiceResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Terms of Service document
     * 
     * Returns the Terms of Service document for a legal entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdTermsOfServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdTermsOfServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdTermsOfServiceResponse
     */
	public function postLegalEntitiesIdTermsOfService(
        \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdTermsOfServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdTermsOfServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdTermsOfServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legalEntities/{id}/termsOfService', \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdTermsOfServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getTermsOfServiceDocumentRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdTermsOfServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTermsOfServiceDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTermsOfServiceDocumentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
}