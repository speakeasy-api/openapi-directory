"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional

class GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum(str, Enum):
    r"""The compliance status of the IPAM resource. For more information on compliance statuses, see <a href=\\"https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html\\">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>."""
    COMPLIANT = 'compliant'
    NONCOMPLIANT = 'noncompliant'
    UNMANAGED = 'unmanaged'
    IGNORED = 'ignored'

class GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum(str, Enum):
    r"""The management state of the resource. For more information about management states, see <a href=\\"https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html\\">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>."""
    MANAGED = 'managed'
    UNMANAGED = 'unmanaged'
    IGNORED = 'ignored'

class GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum(str, Enum):
    r"""The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href=\\"https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html\\">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>."""
    OVERLAPPING = 'overlapping'
    NONOVERLAPPING = 'nonoverlapping'
    IGNORED = 'ignored'


@dataclasses.dataclass
class GetIpamResourceCidrsResultIpamResourceCidrsResourceTags:
    r"""The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    
class GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum(str, Enum):
    r"""The type of IPAM resource."""
    VPC = 'vpc'
    SUBNET = 'subnet'
    EIP = 'eip'
    PUBLIC_IPV4_POOL = 'public-ipv4-pool'
    IPV6_POOL = 'ipv6-pool'


@dataclasses.dataclass
class GetIpamResourceCidrsResultIpamResourceCidrs:
    r"""The CIDR for an IPAM resource."""
    
    compliance_status: Optional[GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum] = dataclasses.field(default=None)  
    ipam_id: Optional[str] = dataclasses.field(default=None)  
    ipam_pool_id: Optional[str] = dataclasses.field(default=None)  
    ipam_scope_id: Optional[str] = dataclasses.field(default=None)  
    ip_usage: Optional[float] = dataclasses.field(default=None)  
    management_state: Optional[GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum] = dataclasses.field(default=None)  
    overlap_status: Optional[GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum] = dataclasses.field(default=None)  
    resource_cidr: Optional[str] = dataclasses.field(default=None)  
    resource_id: Optional[str] = dataclasses.field(default=None)  
    resource_name: Optional[str] = dataclasses.field(default=None)  
    resource_owner_id: Optional[str] = dataclasses.field(default=None)  
    resource_region: Optional[str] = dataclasses.field(default=None)  
    resource_tags: Optional[list[GetIpamResourceCidrsResultIpamResourceCidrsResourceTags]] = dataclasses.field(default=None)  
    resource_type: Optional[GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum] = dataclasses.field(default=None)  
    vpc_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class GetIpamResourceCidrsResult:
    r"""Success"""
    
    ipam_resource_cidrs: Optional[list[GetIpamResourceCidrsResultIpamResourceCidrs]] = dataclasses.field(default=None)  
    next_token: Optional[str] = dataclasses.field(default=None)  
    