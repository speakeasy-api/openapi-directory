"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import existingdisk as shared_existingdisk
from ..shared import metadata as shared_metadata
from ..shared import networkinterface as shared_networkinterface
from ..shared import newdisk as shared_newdisk
from ..shared import serviceaccount as shared_serviceaccount
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VMParams:
    r"""Parameters for creating a Compute Engine Instance resource. Most fields are identical to the corresponding Compute Engine resource."""
    
    base_instance_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseInstanceName'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Please use baseInstanceName instead."""  
    can_ip_forward: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canIpForward'), 'exclude': lambda f: f is None }})
    r"""Enables IP Forwarding, which allows this instance to receive packets destined for a different IP address, and send packets with a different source IP. See IP Forwarding for more information."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""An optional textual description of the instance."""  
    disks_to_attach: Optional[list[shared_existingdisk.ExistingDisk]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disksToAttach'), 'exclude': lambda f: f is None }})
    r"""A list of existing Persistent Disk resources to attach to each replica in the pool. Each disk will be attached in read-only mode to every replica."""  
    disks_to_create: Optional[list[shared_newdisk.NewDisk]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disksToCreate'), 'exclude': lambda f: f is None }})
    r"""A list of Disk resources to create and attach to each Replica in the Pool. Currently, you can only define one disk and it must be a root persistent disk. Note that Replica Pool will create a root persistent disk for each replica."""  
    machine_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineType'), 'exclude': lambda f: f is None }})
    r"""The machine type for this instance. The resource name (e.g. n1-standard-1)."""  
    metadata: Optional[shared_metadata.Metadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""A Compute Engine metadata entry. Identical to the metadata on the corresponding Compute Engine resource."""  
    network_interfaces: Optional[list[shared_networkinterface.NetworkInterface]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInterfaces'), 'exclude': lambda f: f is None }})
    r"""A list of network interfaces for the instance. Currently only one interface is supported by Google Compute Engine, ONE_TO_ONE_NAT."""  
    on_host_maintenance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onHostMaintenance'), 'exclude': lambda f: f is None }})  
    service_accounts: Optional[list[shared_serviceaccount.ServiceAccount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccounts'), 'exclude': lambda f: f is None }})
    r"""A list of Service Accounts to enable for this instance."""  
    tags: Optional[shared_tag.Tag] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A Compute Engine Instance tag, identical to the tags on the corresponding Compute Engine Instance resource."""  
    