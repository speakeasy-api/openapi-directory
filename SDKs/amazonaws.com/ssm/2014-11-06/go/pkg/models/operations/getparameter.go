// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetParameterXAmzTargetEnum
type GetParameterXAmzTargetEnum string

const (
	GetParameterXAmzTargetEnumAmazonSsmGetParameter GetParameterXAmzTargetEnum = "AmazonSSM.GetParameter"
)

func (e *GetParameterXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonSSM.GetParameter":
		*e = GetParameterXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetParameterXAmzTargetEnum: %s", s)
	}
}

type GetParameterRequest struct {
	GetParameterRequest shared.GetParameterRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          GetParameterXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetParameterResponse struct {
	ContentType string
	// Success
	GetParameterResult *shared.GetParameterResult
	// InternalServerError
	InternalServerError interface{}
	// InvalidKeyId
	InvalidKeyID interface{}
	// ParameterNotFound
	ParameterNotFound interface{}
	// ParameterVersionNotFound
	ParameterVersionNotFound interface{}
	StatusCode               int
	RawResponse              *http.Response
}
