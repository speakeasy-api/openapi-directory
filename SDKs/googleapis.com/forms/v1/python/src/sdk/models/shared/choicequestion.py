"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import option as shared_option
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ChoiceQuestionTypeEnum(str, Enum):
    r"""Required. The type of choice question."""
    CHOICE_TYPE_UNSPECIFIED = 'CHOICE_TYPE_UNSPECIFIED'
    RADIO = 'RADIO'
    CHECKBOX = 'CHECKBOX'
    DROP_DOWN = 'DROP_DOWN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChoiceQuestion:
    r"""A radio/checkbox/dropdown question."""
    
    options: Optional[list[shared_option.Option]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Required. List of options that a respondent must choose from."""  
    shuffle: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shuffle'), 'exclude': lambda f: f is None }})
    r"""Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last."""  
    type: Optional[ChoiceQuestionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. The type of choice question."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChoiceQuestionInput:
    r"""A radio/checkbox/dropdown question."""
    
    options: Optional[list[shared_option.OptionInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Required. List of options that a respondent must choose from."""  
    shuffle: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shuffle'), 'exclude': lambda f: f is None }})
    r"""Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last."""  
    type: Optional[ChoiceQuestionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. The type of choice question."""  
    