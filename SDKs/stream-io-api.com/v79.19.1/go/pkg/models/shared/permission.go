// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PermissionLevelEnum - Level at which permission could be applied (app or channel)
type PermissionLevelEnum string

const (
	PermissionLevelEnumApp     PermissionLevelEnum = "app"
	PermissionLevelEnumChannel PermissionLevelEnum = "channel"
)

func (e *PermissionLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "app":
		fallthrough
	case "channel":
		*e = PermissionLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PermissionLevelEnum: %s", s)
	}
}

type Permission struct {
	// Action name this permission is for (e.g. SendMessage)
	Action string `json:"action"`
	// MongoDB style condition which decides whether or not the permission is granted
	Condition map[string]interface{} `json:"condition,omitempty"`
	// Whether this is a custom permission or built-in
	Custom bool `json:"custom"`
	// Description of the permission
	Description string `json:"description"`
	// Unique permission ID
	ID string `json:"id"`
	// Level at which permission could be applied (app or channel)
	Level PermissionLevelEnum `json:"level"`
	// Name of the permission
	Name string `json:"name"`
	// Whether this permission applies to resource owner or not
	Owner bool `json:"owner"`
	// Whether this permission applies to teammates (multi-tenancy mode only)
	SameTeam bool `json:"same_team"`
	// List of tags of the permission
	Tags []string `json:"tags"`
}
