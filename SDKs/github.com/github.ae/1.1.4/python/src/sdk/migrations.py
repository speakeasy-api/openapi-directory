"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Migrations:
    r"""Move projects to or from GitHub."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def migrations_delete_archive_for_org(self, request: operations.MigrationsDeleteArchiveForOrgRequest) -> operations.MigrationsDeleteArchiveForOrgResponse:
        r"""Delete an organization migration archive
        Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
        https://docs.github.com/github-ae@latest/rest/migrations/orgs#delete-an-organization-migration-archive - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsDeleteArchiveForOrgRequest, base_url, '/orgs/{org}/migrations/{migration_id}/archive', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsDeleteArchiveForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def migrations_download_archive_for_org(self, request: operations.MigrationsDownloadArchiveForOrgRequest) -> operations.MigrationsDownloadArchiveForOrgResponse:
        r"""Download an organization migration archive
        Fetches the URL to a migration archive.
        https://docs.github.com/github-ae@latest/rest/migrations/orgs#download-an-organization-migration-archive - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsDownloadArchiveForOrgRequest, base_url, '/orgs/{org}/migrations/{migration_id}/archive', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsDownloadArchiveForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 302:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def migrations_get_archive_for_authenticated_user(self, request: operations.MigrationsGetArchiveForAuthenticatedUserRequest) -> operations.MigrationsGetArchiveForAuthenticatedUserResponse:
        r"""Download a user migration archive
        Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
        
        *   attachments
        *   bases
        *   commit\_comments
        *   issue\_comments
        *   issue\_events
        *   issues
        *   milestones
        *   organizations
        *   projects
        *   protected\_branches
        *   pull\_request\_reviews
        *   pull\_requests
        *   releases
        *   repositories
        *   review\_comments
        *   schema
        *   users
        
        The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
        https://docs.github.com/github-ae@latest/rest/migrations/users#download-a-user-migration-archive - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsGetArchiveForAuthenticatedUserRequest, base_url, '/user/migrations/{migration_id}/archive', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsGetArchiveForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [302, 304]:
            pass
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def migrations_get_status_for_org(self, request: operations.MigrationsGetStatusForOrgRequest) -> operations.MigrationsGetStatusForOrgResponse:
        r"""Get an organization migration status
        Fetches the status of a migration.
        
        The `state` of a migration can be one of the following values:
        
        *   `pending`, which means the migration hasn't started yet.
        *   `exporting`, which means the migration is in progress.
        *   `exported`, which means the migration finished successfully.
        *   `failed`, which means the migration failed.
        https://docs.github.com/github-ae@latest/rest/migrations/orgs#get-an-organization-migration-status - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsGetStatusForOrgRequest, base_url, '/orgs/{org}/migrations/{migration_id}', request)
        
        query_params = utils.get_query_params(operations.MigrationsGetStatusForOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsGetStatusForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Migration])
                res.migration = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def migrations_list_for_authenticated_user(self, request: operations.MigrationsListForAuthenticatedUserRequest) -> operations.MigrationsListForAuthenticatedUserResponse:
        r"""List user migrations
        Lists all migrations a user has started.
        https://docs.github.com/github-ae@latest/rest/migrations/users#list-user-migrations - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/migrations'
        
        query_params = utils.get_query_params(operations.MigrationsListForAuthenticatedUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsListForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Migration]])
                res.migrations = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def migrations_list_for_org(self, request: operations.MigrationsListForOrgRequest) -> operations.MigrationsListForOrgResponse:
        r"""List organization migrations
        Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
        
        A list of `repositories` is only returned for export migrations.
        https://docs.github.com/github-ae@latest/rest/migrations/orgs#list-organization-migrations - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsListForOrgRequest, base_url, '/orgs/{org}/migrations', request)
        
        query_params = utils.get_query_params(operations.MigrationsListForOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsListForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Migration]])
                res.migrations = out

        return res

    def migrations_list_repos_for_authenticated_user(self, request: operations.MigrationsListReposForAuthenticatedUserRequest) -> operations.MigrationsListReposForAuthenticatedUserResponse:
        r"""List repositories for a user migration
        Lists all the repositories for this user migration.
        https://docs.github.com/github-ae@latest/rest/migrations/users#list-repositories-for-a-user-migration - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsListReposForAuthenticatedUserRequest, base_url, '/user/migrations/{migration_id}/repositories', request)
        
        query_params = utils.get_query_params(operations.MigrationsListReposForAuthenticatedUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsListReposForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MinimalRepository]])
                res.minimal_repositories = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def migrations_list_repos_for_org(self, request: operations.MigrationsListReposForOrgRequest) -> operations.MigrationsListReposForOrgResponse:
        r"""List repositories in an organization migration
        List all the repositories for this organization migration.
        https://docs.github.com/github-ae@latest/rest/migrations/orgs#list-repositories-in-an-organization-migration - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsListReposForOrgRequest, base_url, '/orgs/{org}/migrations/{migration_id}/repositories', request)
        
        query_params = utils.get_query_params(operations.MigrationsListReposForOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsListReposForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MinimalRepository]])
                res.minimal_repositories = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def migrations_start_for_authenticated_user(self, request: operations.MigrationsStartForAuthenticatedUserRequestBody) -> operations.MigrationsStartForAuthenticatedUserResponse:
        r"""Start a user migration
        Initiates the generation of a user migration archive.
        https://docs.github.com/github-ae@latest/rest/migrations/users#start-a-user-migration - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/migrations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsStartForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Migration])
                res.migration = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def migrations_start_for_org(self, request: operations.MigrationsStartForOrgRequest) -> operations.MigrationsStartForOrgResponse:
        r"""Start an organization migration
        Initiates the generation of a migration archive.
        https://docs.github.com/github-ae@latest/rest/migrations/orgs#start-an-organization-migration - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsStartForOrgRequest, base_url, '/orgs/{org}/migrations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsStartForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Migration])
                res.migration = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def migrations_unlock_repo_for_org(self, request: operations.MigrationsUnlockRepoForOrgRequest) -> operations.MigrationsUnlockRepoForOrgResponse:
        r"""Unlock an organization repository
        Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/github-ae@latest/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
        https://docs.github.com/github-ae@latest/rest/migrations/orgs#unlock-an-organization-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationsUnlockRepoForOrgRequest, base_url, '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationsUnlockRepoForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    