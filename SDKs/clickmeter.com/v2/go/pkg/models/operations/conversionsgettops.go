// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ConversionsGetTopsPathParams struct {
	// Id of the conversion
	ConversionID int64 `pathParam:"style=simple,explode=false,name=conversionId"`
}

// ConversionsGetTopsHittypeEnum - Type of the event you want to filter this report with. By default no filter is applied.
type ConversionsGetTopsHittypeEnum string

const (
	ConversionsGetTopsHittypeEnumClicks ConversionsGetTopsHittypeEnum = "clicks"
	ConversionsGetTopsHittypeEnumViews  ConversionsGetTopsHittypeEnum = "views"
)

func (e *ConversionsGetTopsHittypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "clicks":
		fallthrough
	case "views":
		*e = ConversionsGetTopsHittypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConversionsGetTopsHittypeEnum: %s", s)
	}
}

// ConversionsGetTopsTimeframeEnum - Timeframe of the request. See list at $timeframeList
type ConversionsGetTopsTimeframeEnum string

const (
	ConversionsGetTopsTimeframeEnumYesterday     ConversionsGetTopsTimeframeEnum = "yesterday"
	ConversionsGetTopsTimeframeEnumLast7         ConversionsGetTopsTimeframeEnum = "last7"
	ConversionsGetTopsTimeframeEnumLast30        ConversionsGetTopsTimeframeEnum = "last30"
	ConversionsGetTopsTimeframeEnumLastmonth     ConversionsGetTopsTimeframeEnum = "lastmonth"
	ConversionsGetTopsTimeframeEnumCurrentmonth  ConversionsGetTopsTimeframeEnum = "currentmonth"
	ConversionsGetTopsTimeframeEnumPreviousmonth ConversionsGetTopsTimeframeEnum = "previousmonth"
	ConversionsGetTopsTimeframeEnumLast90        ConversionsGetTopsTimeframeEnum = "last90"
	ConversionsGetTopsTimeframeEnumLast120       ConversionsGetTopsTimeframeEnum = "last120"
	ConversionsGetTopsTimeframeEnumLast180       ConversionsGetTopsTimeframeEnum = "last180"
	ConversionsGetTopsTimeframeEnumBeginning     ConversionsGetTopsTimeframeEnum = "beginning"
	ConversionsGetTopsTimeframeEnumCustom        ConversionsGetTopsTimeframeEnum = "custom"
)

func (e *ConversionsGetTopsTimeframeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "beginning":
		fallthrough
	case "custom":
		*e = ConversionsGetTopsTimeframeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConversionsGetTopsTimeframeEnum: %s", s)
	}
}

// ConversionsGetTopsTypeEnum - Type of the report.
type ConversionsGetTopsTypeEnum string

const (
	ConversionsGetTopsTypeEnumDatapoints       ConversionsGetTopsTypeEnum = "datapoints"
	ConversionsGetTopsTypeEnumGroups           ConversionsGetTopsTypeEnum = "groups"
	ConversionsGetTopsTypeEnumBrowsers         ConversionsGetTopsTypeEnum = "browsers"
	ConversionsGetTopsTypeEnumBrowsersfamilies ConversionsGetTopsTypeEnum = "browsersfamilies"
	ConversionsGetTopsTypeEnumPlatforms        ConversionsGetTopsTypeEnum = "platforms"
	ConversionsGetTopsTypeEnumCities           ConversionsGetTopsTypeEnum = "cities"
	ConversionsGetTopsTypeEnumCountries        ConversionsGetTopsTypeEnum = "countries"
	ConversionsGetTopsTypeEnumKeywords         ConversionsGetTopsTypeEnum = "keywords"
	ConversionsGetTopsTypeEnumReferrers        ConversionsGetTopsTypeEnum = "referrers"
	ConversionsGetTopsTypeEnumConvparameters   ConversionsGetTopsTypeEnum = "convparameters"
	ConversionsGetTopsTypeEnumDestinations     ConversionsGetTopsTypeEnum = "destinations"
	ConversionsGetTopsTypeEnumLanguages        ConversionsGetTopsTypeEnum = "languages"
	ConversionsGetTopsTypeEnumParams           ConversionsGetTopsTypeEnum = "params"
)

func (e *ConversionsGetTopsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "datapoints":
		fallthrough
	case "groups":
		fallthrough
	case "browsers":
		fallthrough
	case "browsersfamilies":
		fallthrough
	case "platforms":
		fallthrough
	case "cities":
		fallthrough
	case "countries":
		fallthrough
	case "keywords":
		fallthrough
	case "referrers":
		fallthrough
	case "convparameters":
		fallthrough
	case "destinations":
		fallthrough
	case "languages":
		fallthrough
	case "params":
		*e = ConversionsGetTopsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConversionsGetTopsTypeEnum: %s", s)
	}
}

type ConversionsGetTopsQueryParams struct {
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// Type of the event you want to filter this report with. By default no filter is applied.
	Hittype *ConversionsGetTopsHittypeEnum `queryParam:"style=form,explode=true,name=hittype"`
	// Timeframe of the request. See list at $timeframeList
	Timeframe ConversionsGetTopsTimeframeEnum `queryParam:"style=form,explode=true,name=timeframe"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
	// Type of the report.
	Type ConversionsGetTopsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type ConversionsGetTopsRequest struct {
	PathParams  ConversionsGetTopsPathParams
	QueryParams ConversionsGetTopsQueryParams
}

type ConversionsGetTopsResponse struct {
	APICoreDtoTopsTop *shared.APICoreDtoTopsTop
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
