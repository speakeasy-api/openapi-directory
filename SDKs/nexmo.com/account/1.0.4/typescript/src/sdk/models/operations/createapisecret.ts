/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class CreateAPISecretSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateAPISecretRequest extends SpeakeasyBase {
  /**
   * The API key to manage secrets for
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=api_key",
  })
  apiKey: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createSecretRequest: shared.CreateSecretRequest;
}

/**
 * Credentials are missing or invalid
 */
export class CreateAPISecret401ApplicationJSON extends SpeakeasyBase {
  /**
   * More detail regarding this error, including the expected value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * Internal Trace ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instance" })
  instance?: string;

  /**
   * Description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * URL for further information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class CreateAPISecret400ApplicationJSONInvalidParameters extends SpeakeasyBase {
  /**
   * Field name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Explanation of why parameter is considered invalid
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;
}

/**
 * Bad request. This usually indicates valid data but can also occur when a user has exceeded the allowed number of secrets on their account.
 */
export class CreateAPISecret400ApplicationJSON extends SpeakeasyBase {
  /**
   * More detail regarding this error, including the API key supplied
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * Internal Trace ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instance" })
  instance?: string;

  /**
   * Array of the parameters that are considered invalid, and explanations of why
   */
  @SpeakeasyMetadata({
    elemType: CreateAPISecret400ApplicationJSONInvalidParameters,
  })
  @Expose({ name: "invalid_parameters" })
  @Type(() => CreateAPISecret400ApplicationJSONInvalidParameters)
  invalidParameters?: CreateAPISecret400ApplicationJSONInvalidParameters[];

  /**
   * Description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * URL for further information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class CreateAPISecretResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Item not found
   */
  @SpeakeasyMetadata()
  errorAPIKeyNotFound?: shared.ErrorAPIKeyNotFound;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad request. This usually indicates valid data but can also occur when a user has exceeded the allowed number of secrets on their account.
   */
  @SpeakeasyMetadata()
  createAPISecret400ApplicationJSONObject?: CreateAPISecret400ApplicationJSON;

  /**
   * Credentials are missing or invalid
   */
  @SpeakeasyMetadata()
  createAPISecret401ApplicationJSONObject?: CreateAPISecret401ApplicationJSON;

  /**
   * Secret created
   */
  @SpeakeasyMetadata()
  secretInfo?: shared.SecretInfo;
}
