/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConsumerProject } from "./consumerproject";
import { RangeReservation } from "./rangereservation";
import { Expose, Type } from "class-transformer";

export class ValidateConsumerConfigRequest extends SpeakeasyBase {
  /**
   * Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkServiceNetworkingUsePermission" })
  checkServiceNetworkingUsePermission?: boolean;

  /**
   * Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "consumerNetwork" })
  consumerNetwork?: string;

  /**
   * Represents a consumer project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "consumerProject" })
  @Type(() => ConsumerProject)
  consumerProject?: ConsumerProject;

  /**
   * Represents a range reservation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rangeReservation" })
  @Type(() => RangeReservation)
  rangeReservation?: RangeReservation;

  /**
   * The validations will be performed in the order listed in the ValidationError enum. The first failure will return. If a validation is not requested, then the next one will be performed. SERVICE_NETWORKING_NOT_ENABLED and NETWORK_NOT_PEERED checks are performed for all requests where validation is requested. NETWORK_NOT_FOUND and NETWORK_DISCONNECTED checks are done for requests that have validate_network set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validateNetwork" })
  validateNetwork?: boolean;
}
