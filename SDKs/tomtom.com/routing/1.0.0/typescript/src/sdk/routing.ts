/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Routing {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Reachable Range
   *
   * @remarks
   * Calculates a set of locations that can be reached from the origin point.
   */
  getRoutingVersionNumberCalculateReachableRangeOriginContentType(
    req: operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse =
        new operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [
          200, 400, 403, 404, 405, 408, 414, 500, 502, 503, 504, 596,
        ].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Calculate Route
   *
   * @remarks
   * Calculates a route between an origin and a destination.
   */
  getRoutingVersionNumberCalculateRouteLocationsContentType(
    req: operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/routing/{versionNumber}/calculateRoute/{locations}/{contentType}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse =
        new operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [
          200, 400, 403, 404, 405, 408, 414, 500, 502, 503, 504, 596,
        ].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Reachable Range
   *
   * @remarks
   * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
   */
  postRoutingVersionNumberCalculateReachableRangeOriginContentTypeJson(
    req: operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "calculateReachableRangePostDataParameters",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse =
        new operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [
          200, 400, 403, 404, 405, 408, 414, 500, 502, 503, 504, 596,
        ].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Reachable Range
   *
   * @remarks
   * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
   */
  postRoutingVersionNumberCalculateReachableRangeOriginContentTypeRaw(
    req: operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse =
        new operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [
          200, 400, 403, 404, 405, 408, 414, 500, 502, 503, 504, 596,
        ].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Calculate Route
   *
   * @remarks
   * Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
   */
  postRoutingVersionNumberCalculateRouteLocationsContentTypeJson(
    req: operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/routing/{versionNumber}/calculateRoute/{locations}/{contentType}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "calculateRoutePostDataParameters",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse =
        new operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [
          200, 400, 403, 404, 405, 408, 414, 500, 502, 503, 504, 596,
        ].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Calculate Route
   *
   * @remarks
   * Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
   */
  postRoutingVersionNumberCalculateRouteLocationsContentTypeRaw(
    req: operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/routing/{versionNumber}/calculateRoute/{locations}/{contentType}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse =
        new operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [
          200, 400, 403, 404, 405, 408, 414, 500, 502, 503, 504, 596,
        ].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
