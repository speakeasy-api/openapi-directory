// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EwcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type EwcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Reference No
	RefNo string `json:"RefNo"`
	// Token No
	TokenNo string `json:"TokenNo"`
	// Aadhaar number
	UID string `json:"UID"`
}

// EwcerRequestBodyFormatEnum - The format of the certificate in response.
type EwcerRequestBodyFormatEnum string

const (
	EwcerRequestBodyFormatEnumPdf EwcerRequestBodyFormatEnum = "pdf"
)

func (e *EwcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = EwcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EwcerRequestBodyFormatEnum: %s", s)
	}
}

// EwcerRequestBody - Request format
type EwcerRequestBody struct {
	CertificateParameters *EwcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format EwcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ewcer504ApplicationJSONErrorEnum string

const (
	Ewcer504ApplicationJSONErrorEnumGatewayTimeout Ewcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Ewcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Ewcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Ewcer504ApplicationJSONErrorDescriptionEnum string

const (
	Ewcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ewcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Ewcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Ewcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ewcer504ApplicationJSON - Gateway timeout
type Ewcer504ApplicationJSON struct {
	Error            *Ewcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ewcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ewcer503ApplicationJSONErrorEnum string

const (
	Ewcer503ApplicationJSONErrorEnumServiceUnavailable Ewcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Ewcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Ewcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Ewcer503ApplicationJSONErrorDescriptionEnum string

const (
	Ewcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ewcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Ewcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Ewcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ewcer503ApplicationJSON - Service unavailable
type Ewcer503ApplicationJSON struct {
	Error            *Ewcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ewcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ewcer502ApplicationJSONErrorEnum string

const (
	Ewcer502ApplicationJSONErrorEnumBadGatewy Ewcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Ewcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Ewcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Ewcer502ApplicationJSONErrorDescriptionEnum string

const (
	Ewcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ewcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Ewcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Ewcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ewcer502ApplicationJSON - Bad gateway
type Ewcer502ApplicationJSON struct {
	Error            *Ewcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ewcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ewcer500ApplicationJSONErrorEnum string

const (
	Ewcer500ApplicationJSONErrorEnumInternalServerError Ewcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Ewcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Ewcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Ewcer500ApplicationJSONErrorDescriptionEnum string

const (
	Ewcer500ApplicationJSONErrorDescriptionEnumInternalServerError Ewcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Ewcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Ewcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ewcer500ApplicationJSON - Internal server error
type Ewcer500ApplicationJSON struct {
	Error            *Ewcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ewcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ewcer404ApplicationJSONErrorEnum string

const (
	Ewcer404ApplicationJSONErrorEnumRecordNotFound Ewcer404ApplicationJSONErrorEnum = "record_not_found"
	Ewcer404ApplicationJSONErrorEnumURLNotFound    Ewcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Ewcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ewcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Ewcer404ApplicationJSONErrorDescriptionEnum string

const (
	Ewcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ewcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ewcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ewcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Ewcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ewcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ewcer404ApplicationJSON - No record found
type Ewcer404ApplicationJSON struct {
	Error            *Ewcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ewcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ewcer401ApplicationJSONErrorEnum string

const (
	Ewcer401ApplicationJSONErrorEnumInvalidAuthentication Ewcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Ewcer401ApplicationJSONErrorEnumInvalidAuthorization  Ewcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Ewcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ewcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Ewcer401ApplicationJSONErrorDescriptionEnum string

const (
	Ewcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ewcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ewcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ewcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Ewcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ewcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ewcer401ApplicationJSON - Unauthorized access
type Ewcer401ApplicationJSON struct {
	Error            *Ewcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ewcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ewcer400ApplicationJSONErrorEnum string

const (
	Ewcer400ApplicationJSONErrorEnumMissingParameter Ewcer400ApplicationJSONErrorEnum = "missing_parameter"
	Ewcer400ApplicationJSONErrorEnumInvalidParameter Ewcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Ewcer400ApplicationJSONErrorEnumInvalidFormat    Ewcer400ApplicationJSONErrorEnum = "invalid_format"
	Ewcer400ApplicationJSONErrorEnumInvalidTxnid     Ewcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Ewcer400ApplicationJSONErrorEnumInvalidConsentid Ewcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Ewcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ewcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Ewcer400ApplicationJSONErrorDescriptionEnum string

const (
	Ewcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ewcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ewcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Ewcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ewcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ewcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ewcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ewcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ewcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ewcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Ewcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ewcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ewcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ewcer400ApplicationJSON - Bad request
type Ewcer400ApplicationJSON struct {
	Error            *Ewcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ewcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type EwcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ewcer400ApplicationJSONObject *Ewcer400ApplicationJSON
	// Unauthorized access
	Ewcer401ApplicationJSONObject *Ewcer401ApplicationJSON
	// No record found
	Ewcer404ApplicationJSONObject *Ewcer404ApplicationJSON
	// Internal server error
	Ewcer500ApplicationJSONObject *Ewcer500ApplicationJSON
	// Bad gateway
	Ewcer502ApplicationJSONObject *Ewcer502ApplicationJSON
	// Service unavailable
	Ewcer503ApplicationJSONObject *Ewcer503ApplicationJSON
	// Gateway timeout
	Ewcer504ApplicationJSONObject *Ewcer504ApplicationJSON
}
