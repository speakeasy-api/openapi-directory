// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETRebootCacheClusterActionEnum
type GETRebootCacheClusterActionEnum string

const (
	GETRebootCacheClusterActionEnumRebootCacheCluster GETRebootCacheClusterActionEnum = "RebootCacheCluster"
)

func (e *GETRebootCacheClusterActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RebootCacheCluster":
		*e = GETRebootCacheClusterActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRebootCacheClusterActionEnum: %s", s)
	}
}

// GETRebootCacheClusterVersionEnum
type GETRebootCacheClusterVersionEnum string

const (
	GETRebootCacheClusterVersionEnumTwoThousandAndFifteen0202 GETRebootCacheClusterVersionEnum = "2015-02-02"
)

func (e *GETRebootCacheClusterVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2015-02-02":
		*e = GETRebootCacheClusterVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRebootCacheClusterVersionEnum: %s", s)
	}
}

type GETRebootCacheClusterQueryParams struct {
	Action GETRebootCacheClusterActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The cluster identifier. This parameter is stored as a lowercase string.
	CacheClusterID string `queryParam:"style=form,explode=true,name=CacheClusterId"`
	// A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
	CacheNodeIdsToReboot []string                         `queryParam:"style=form,explode=true,name=CacheNodeIdsToReboot"`
	Version              GETRebootCacheClusterVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETRebootCacheClusterHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETRebootCacheClusterRequest struct {
	QueryParams GETRebootCacheClusterQueryParams
	Headers     GETRebootCacheClusterHeaders
}

type GETRebootCacheClusterResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
