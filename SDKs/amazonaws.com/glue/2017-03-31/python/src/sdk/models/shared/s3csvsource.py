"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compressiontype_enum as shared_compressiontype_enum
from ..shared import glueschema as shared_glueschema
from ..shared import quotechar_enum as shared_quotechar_enum
from ..shared import s3directsourceadditionaloptions as shared_s3directsourceadditionaloptions
from ..shared import separator_enum as shared_separator_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class S3CsvSource:
    r"""Specifies a command-separated value (CSV) data store stored in Amazon S3."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    paths: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Paths') }})  
    quote_char: shared_quotechar_enum.QuoteCharEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuoteChar') }})  
    separator: shared_separator_enum.SeparatorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Separator') }})  
    additional_options: Optional[shared_s3directsourceadditionaloptions.S3DirectSourceAdditionalOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalOptions'), 'exclude': lambda f: f is None }})  
    compression_type: Optional[shared_compressiontype_enum.CompressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompressionType'), 'exclude': lambda f: f is None }})  
    escaper: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Escaper'), 'exclude': lambda f: f is None }})  
    exclusions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Exclusions'), 'exclude': lambda f: f is None }})  
    group_files: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupFiles'), 'exclude': lambda f: f is None }})  
    group_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupSize'), 'exclude': lambda f: f is None }})  
    max_band: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxBand'), 'exclude': lambda f: f is None }})  
    max_files_in_band: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxFilesInBand'), 'exclude': lambda f: f is None }})  
    multiline: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Multiline'), 'exclude': lambda f: f is None }})  
    optimize_performance: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptimizePerformance'), 'exclude': lambda f: f is None }})  
    output_schemas: Optional[list[shared_glueschema.GlueSchema]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputSchemas'), 'exclude': lambda f: f is None }})  
    recurse: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Recurse'), 'exclude': lambda f: f is None }})  
    skip_first: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SkipFirst'), 'exclude': lambda f: f is None }})  
    with_header: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WithHeader'), 'exclude': lambda f: f is None }})  
    write_header: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WriteHeader'), 'exclude': lambda f: f is None }})  
    