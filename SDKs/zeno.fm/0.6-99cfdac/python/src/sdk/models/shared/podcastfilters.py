"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PodcastFiltersPodcastTypeEnum(str, Enum):
    PODCASTS = 'podcasts'
    SHOWS = 'shows'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PodcastFilters:
    r"""Filters for podcast search"""
    
    category: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    country: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})  
    language: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})  
    podcast_type: Optional[PodcastFiltersPodcastTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('podcastType'), 'exclude': lambda f: f is None }})  
    