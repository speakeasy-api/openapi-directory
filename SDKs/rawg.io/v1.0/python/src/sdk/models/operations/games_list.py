"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import game as shared_game
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GamesListRequest:
    
    creators: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'creators', 'style': 'form', 'explode': True }})
    r"""Filter by creators, for example: `78,28` or `cris-velasco,mike-morasky`."""  
    dates: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dates', 'style': 'form', 'explode': True }})
    r"""Filter by a release date, for example: `2010-01-01,2018-12-31.1960-01-01,1969-12-31`."""  
    developers: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'developers', 'style': 'form', 'explode': True }})
    r"""Filter by developers, for example: `1612,18893` or `valve-software,feral-interactive`."""  
    exclude_additions: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_additions', 'style': 'form', 'explode': True }})
    r"""Exclude additions."""  
    exclude_collection: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_collection', 'style': 'form', 'explode': True }})
    r"""Exclude games from a particular collection, for example: `123`."""  
    exclude_game_series: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_game_series', 'style': 'form', 'explode': True }})
    r"""Exclude games which included in a game series."""  
    exclude_parents: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_parents', 'style': 'form', 'explode': True }})
    r"""Exclude games which have additions."""  
    exclude_stores: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_stores', 'style': 'form', 'explode': True }})
    r"""Exclude stores, for example: `5,6`."""  
    genres: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'genres', 'style': 'form', 'explode': True }})
    r"""Filter by genres, for example: `4,51` or `action,indie`."""  
    metacritic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'metacritic', 'style': 'form', 'explode': True }})
    r"""Filter by a metacritic rating, for example: `80,100`."""  
    ordering: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ordering', 'style': 'form', 'explode': True }})
    r"""Available fields: `name`, `released`, `added`, `created`, `updated`, `rating`, `metacritic`. You can reverse the sort order adding a hyphen, for example: `-released`."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""A page number within the paginated result set."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""Number of results to return per page."""  
    parent_platforms: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parent_platforms', 'style': 'form', 'explode': True }})
    r"""Filter by parent platforms, for example: `1,2,3`."""  
    platforms: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'platforms', 'style': 'form', 'explode': True }})
    r"""Filter by platforms, for example: `4,5`."""  
    platforms_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'platforms_count', 'style': 'form', 'explode': True }})
    r"""Filter by platforms count, for example: `1`."""  
    publishers: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'publishers', 'style': 'form', 'explode': True }})
    r"""Filter by publishers, for example: `354,20987` or `electronic-arts,microsoft-studios`."""  
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})
    r"""Search query."""  
    search_exact: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search_exact', 'style': 'form', 'explode': True }})
    r"""Mark the search query as exact."""  
    search_precise: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search_precise', 'style': 'form', 'explode': True }})
    r"""Disable fuzziness for the search query."""  
    stores: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stores', 'style': 'form', 'explode': True }})
    r"""Filter by stores, for example: `5,6`."""  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': True }})
    r"""Filter by tags, for example: `31,7` or `singleplayer,multiplayer`."""  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated', 'style': 'form', 'explode': True }})
    r"""Filter by an update date, for example: `2020-12-01,2020-12-31`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GamesList200ApplicationJSON:
    
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})  
    results: list[shared_game.Game] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results') }})  
    next: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next'), 'exclude': lambda f: f is None }})  
    previous: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GamesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    games_list_200_application_json_object: Optional[GamesList200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    