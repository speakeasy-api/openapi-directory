/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GenerateRepoOption - GenerateRepoOption options when creating repository using a template
 */
public class GenerateRepoOption {
    /**
     * include avatar of the template repo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar")
    public Boolean avatar;
    public GenerateRepoOption withAvatar(Boolean avatar) {
        this.avatar = avatar;
        return this;
    }
    
    /**
     * Default branch of the new repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_branch")
    public String defaultBranch;
    public GenerateRepoOption withDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
        return this;
    }
    
    /**
     * Description of the repository to create
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public GenerateRepoOption withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * include git content of default branch in template repo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_content")
    public Boolean gitContent;
    public GenerateRepoOption withGitContent(Boolean gitContent) {
        this.gitContent = gitContent;
        return this;
    }
    
    /**
     * include git hooks in template repo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_hooks")
    public Boolean gitHooks;
    public GenerateRepoOption withGitHooks(Boolean gitHooks) {
        this.gitHooks = gitHooks;
        return this;
    }
    
    /**
     * include labels in template repo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public Boolean labels;
    public GenerateRepoOption withLabels(Boolean labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Name of the repository to create
     */
    @JsonProperty("name")
    public String name;
    public GenerateRepoOption withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The organization or person who will own the new repository
     */
    @JsonProperty("owner")
    public String owner;
    public GenerateRepoOption withOwner(String owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Whether the repository is private
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private")
    public Boolean private_;
    public GenerateRepoOption withPrivate(Boolean private_) {
        this.private_ = private_;
        return this;
    }
    
    /**
     * include topics in template repo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topics")
    public Boolean topics;
    public GenerateRepoOption withTopics(Boolean topics) {
        this.topics = topics;
        return this;
    }
    
    /**
     * include webhooks in template repo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhooks")
    public Boolean webhooks;
    public GenerateRepoOption withWebhooks(Boolean webhooks) {
        this.webhooks = webhooks;
        return this;
    }
    
}
