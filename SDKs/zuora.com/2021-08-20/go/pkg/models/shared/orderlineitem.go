// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// OrderLineItemItemStateEnum - The state of the Order Line Item. See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
type OrderLineItemItemStateEnum string

const (
	OrderLineItemItemStateEnumExecuting     OrderLineItemItemStateEnum = "Executing"
	OrderLineItemItemStateEnumSentToBilling OrderLineItemItemStateEnum = "SentToBilling"
	OrderLineItemItemStateEnumComplete      OrderLineItemItemStateEnum = "Complete"
	OrderLineItemItemStateEnumCancelled     OrderLineItemItemStateEnum = "Cancelled"
)

func (e *OrderLineItemItemStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Executing":
		fallthrough
	case "SentToBilling":
		fallthrough
	case "Complete":
		fallthrough
	case "Cancelled":
		*e = OrderLineItemItemStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderLineItemItemStateEnum: %s", s)
	}
}

// OrderLineItemItemTypeEnum - The type of the Order Line Item.
type OrderLineItemItemTypeEnum string

const (
	OrderLineItemItemTypeEnumProduct  OrderLineItemItemTypeEnum = "Product"
	OrderLineItemItemTypeEnumFee      OrderLineItemItemTypeEnum = "Fee"
	OrderLineItemItemTypeEnumServices OrderLineItemItemTypeEnum = "Services"
)

func (e *OrderLineItemItemTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Product":
		fallthrough
	case "Fee":
		fallthrough
	case "Services":
		*e = OrderLineItemItemTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderLineItemItemTypeEnum: %s", s)
	}
}

// OrderLineItemTaxModeEnum - The tax mode for the Order Line Item.
type OrderLineItemTaxModeEnum string

const (
	OrderLineItemTaxModeEnumTaxInclusive OrderLineItemTaxModeEnum = "TaxInclusive"
	OrderLineItemTaxModeEnumTaxExclusive OrderLineItemTaxModeEnum = "TaxExclusive"
)

func (e *OrderLineItemTaxModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TaxInclusive":
		fallthrough
	case "TaxExclusive":
		*e = OrderLineItemTaxModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderLineItemTaxModeEnum: %s", s)
	}
}

type OrderLineItem struct {
	// Specifies the units to measure usage.
	//
	Uom *string `json:"UOM,omitempty"`
	// The accountingCode for the Order Line Item.
	//
	AccountingCode *string `json:"accountingCode,omitempty"`
	// The calculated gross amount for the Order Line Item.
	//
	Amount *float64 `json:"amount,omitempty"`
	// The actual charged amount per unit for the Order Line Item.
	//
	AmountPerUnit *float64 `json:"amountPerUnit,omitempty"`
	// The target date for the Order Line Item to be picked up by bill run for billing.
	//
	BillTargetDate *types.Date `json:"billTargetDate,omitempty"`
	// Container for custom fields of an Order Line Item object.
	//
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	// The deferred revenue accounting code for the Order Line Item.
	//
	DeferredRevenueAccountingCode *string `json:"deferredRevenueAccountingCode,omitempty"`
	// The description of the Order Line Item.
	//
	Description *string `json:"description,omitempty"`
	// The sytem generated Id for the Order Line Item.
	//
	ID *string `json:"id,omitempty"`
	// The name of the Order Line Item.
	//
	ItemName *string `json:"itemName,omitempty"`
	// The number for the Order Line Item.
	//
	ItemNumber *string `json:"itemNumber,omitempty"`
	// The state of the Order Line Item. See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
	//
	ItemState *OrderLineItemItemStateEnum `json:"itemState,omitempty"`
	// The type of the Order Line Item.
	//
	ItemType *OrderLineItemItemTypeEnum `json:"itemType,omitempty"`
	// The list price per unit for the Order Line Item.
	//
	ListPricePerUnit *float64 `json:"listPricePerUnit,omitempty"`
	// The product code for the Order Line Item.
	//
	ProductCode *string `json:"productCode,omitempty"`
	// Id of a Product Rate Plan Charge. Only one-time charges are supported.
	//
	ProductRatePlanChargeID *types.Date `json:"productRatePlanChargeId,omitempty"`
	// Used by customers to specify the Purchase Order Number provided by the buyer.
	//
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
	// The quantity of units, such as the number of authors in a hosted wiki service.
	//
	Quantity *float64 `json:"quantity,omitempty"`
	// The recognized revenue accounting code for the Order Line Item.
	//
	RecognizedRevenueAccountingCode *string `json:"recognizedRevenueAccountingCode,omitempty"`
	// The Revenue Recognition rule for the Order Line Item.
	//
	RevenueRecognitionRule *string `json:"revenueRecognitionRule,omitempty"`
	// The Id of an existing account which is set as the sold-to contact of the Order Line Item (OLI).
	//
	SoldTo *string `json:"soldTo,omitempty"`
	// A new account created as the sold-to contact of the Order Line Item (OLI).
	//
	SoldToData *OrderContactRetrieveOrderLineItem `json:"soldToData,omitempty"`
	// The tax code for the Order Line Item.
	//
	TaxCode *string `json:"taxCode,omitempty"`
	// The tax mode for the Order Line Item.
	//
	TaxMode *OrderLineItemTaxModeEnum `json:"taxMode,omitempty"`
	// The transaction date of the Order Line Item.
	//
	TransactionDate *types.Date `json:"transactionDate,omitempty"`
}
