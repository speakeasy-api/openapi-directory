// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type SymbolUploadsCreateSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type SymbolUploadsCreatePathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// SymbolUploadsCreateRequestBodySymbolTypeEnum - The type of the symbol for the current symbol upload
type SymbolUploadsCreateRequestBodySymbolTypeEnum string

const (
	SymbolUploadsCreateRequestBodySymbolTypeEnumApple           SymbolUploadsCreateRequestBodySymbolTypeEnum = "Apple"
	SymbolUploadsCreateRequestBodySymbolTypeEnumJavaScript      SymbolUploadsCreateRequestBodySymbolTypeEnum = "JavaScript"
	SymbolUploadsCreateRequestBodySymbolTypeEnumBreakpad        SymbolUploadsCreateRequestBodySymbolTypeEnum = "Breakpad"
	SymbolUploadsCreateRequestBodySymbolTypeEnumAndroidProguard SymbolUploadsCreateRequestBodySymbolTypeEnum = "AndroidProguard"
	SymbolUploadsCreateRequestBodySymbolTypeEnumUwp             SymbolUploadsCreateRequestBodySymbolTypeEnum = "UWP"
)

func (e *SymbolUploadsCreateRequestBodySymbolTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Apple":
		fallthrough
	case "JavaScript":
		fallthrough
	case "Breakpad":
		fallthrough
	case "AndroidProguard":
		fallthrough
	case "UWP":
		*e = SymbolUploadsCreateRequestBodySymbolTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsCreateRequestBodySymbolTypeEnum: %s", s)
	}
}

// SymbolUploadsCreateRequestBody - A request containing information pertaining to starting a symbol upload process
type SymbolUploadsCreateRequestBody struct {
	// The build number. Optional for Apple. Required for Android.
	Build *string `json:"build,omitempty"`
	// The callback URL that the client can optionally provide to get status updates for the current symbol upload
	ClientCallback *string `json:"client_callback,omitempty"`
	// The file name for the symbol upload
	FileName *string `json:"file_name,omitempty"`
	// The type of the symbol for the current symbol upload
	SymbolType SymbolUploadsCreateRequestBodySymbolTypeEnum `json:"symbol_type"`
	// The version number. Optional for Apple. Required for Android.
	Version *string `json:"version,omitempty"`
}

type SymbolUploadsCreateRequest struct {
	PathParams SymbolUploadsCreatePathParams
	// The symbol information
	Request  SymbolUploadsCreateRequestBody `request:"mediaType=application/json"`
	Security SymbolUploadsCreateSecurity
}

// SymbolUploadsCreate500ApplicationJSON - Internal error
type SymbolUploadsCreate500ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsCreate403ApplicationJSON - Unauthorized
type SymbolUploadsCreate403ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsCreate400ApplicationJSON - Bad request
type SymbolUploadsCreate400ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsCreate200ApplicationJSON - A response containing information pertaining to starting a symbol upload process
type SymbolUploadsCreate200ApplicationJSON struct {
	// Describes how long the upload_url is valid
	ExpirationDate time.Time `json:"expiration_date"`
	// The id for the current upload
	SymbolUploadID string `json:"symbol_upload_id"`
	// The URL where the client needs to upload the symbol blob to
	UploadURL string `json:"upload_url"`
}

type SymbolUploadsCreateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SymbolUploadsCreate200ApplicationJSONObject *SymbolUploadsCreate200ApplicationJSON
	// Bad request
	SymbolUploadsCreate400ApplicationJSONObject *SymbolUploadsCreate400ApplicationJSON
	// Unauthorized
	SymbolUploadsCreate403ApplicationJSONObject *SymbolUploadsCreate403ApplicationJSON
	// Internal error
	SymbolUploadsCreate500ApplicationJSONObject *SymbolUploadsCreate500ApplicationJSON
}
