"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import adurl as shared_adurl
from ..shared import audioad as shared_audioad
from ..shared import bumperad as shared_bumperad
from ..shared import displayvideosourcead as shared_displayvideosourcead
from ..shared import instreamad as shared_instreamad
from ..shared import mastheadad as shared_mastheadad
from ..shared import nonskippablead as shared_nonskippablead
from ..shared import videodiscoveryad as shared_videodiscoveryad
from ..shared import videoperformancead as shared_videoperformancead
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class YoutubeAdGroupAdEntityStatusEnum(str, Enum):
    r"""The entity status of the ad."""
    ENTITY_STATUS_UNSPECIFIED = 'ENTITY_STATUS_UNSPECIFIED'
    ENTITY_STATUS_ACTIVE = 'ENTITY_STATUS_ACTIVE'
    ENTITY_STATUS_ARCHIVED = 'ENTITY_STATUS_ARCHIVED'
    ENTITY_STATUS_DRAFT = 'ENTITY_STATUS_DRAFT'
    ENTITY_STATUS_PAUSED = 'ENTITY_STATUS_PAUSED'
    ENTITY_STATUS_SCHEDULED_FOR_DELETION = 'ENTITY_STATUS_SCHEDULED_FOR_DELETION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class YoutubeAdGroupAd:
    r"""A single ad associated with a YouTube ad group."""
    
    ad_group_ad_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adGroupAdId'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the ad. Assigned by the system."""  
    ad_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adGroupId'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the ad group that the ad belongs to."""  
    ad_urls: Optional[list[shared_adurl.AdURL]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adUrls'), 'exclude': lambda f: f is None }})
    r"""List of URLs used by the ad."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the advertiser the ad belongs to."""  
    audio_ad: Optional[shared_audioad.AudioAd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioAd'), 'exclude': lambda f: f is None }})
    r"""Details for an audio ad."""  
    bumper_ad: Optional[shared_bumperad.BumperAd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bumperAd'), 'exclude': lambda f: f is None }})
    r"""Details for a bumper ad."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the ad. Must be UTF-8 encoded with a maximum size of 255 bytes."""  
    display_video_source_ad: Optional[shared_displayvideosourcead.DisplayVideoSourceAd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayVideoSourceAd'), 'exclude': lambda f: f is None }})
    r"""The ad sourced from a DV360 creative."""  
    entity_status: Optional[YoutubeAdGroupAdEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""The entity status of the ad."""  
    in_stream_ad: Optional[shared_instreamad.InStreamAd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inStreamAd'), 'exclude': lambda f: f is None }})
    r"""Details for an in-stream ad."""  
    masthead_ad: Optional[shared_mastheadad.MastheadAd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mastheadAd'), 'exclude': lambda f: f is None }})
    r"""Details for a Masthead Ad."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name of the ad."""  
    non_skippable_ad: Optional[shared_nonskippablead.NonSkippableAd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonSkippableAd'), 'exclude': lambda f: f is None }})
    r"""Details for a non-skippable ad."""  
    video_discover_ad: Optional[shared_videodiscoveryad.VideoDiscoveryAd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoDiscoverAd'), 'exclude': lambda f: f is None }})
    r"""Details for a video discovery ad."""  
    video_performance_ad: Optional[shared_videoperformancead.VideoPerformanceAd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoPerformanceAd'), 'exclude': lambda f: f is None }})
    r"""Details for a video performance ad."""  
    