"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .attendees_signins import AttendeesSignins
from .authentication import Authentication
from .passwords import Passwords
from .team_members import TeamMembers
from sdk.models import shared

SERVERS = [
    "http://c19qrserver.local",
    "https://virtserver.swaggerhub.com/aijaz/QRCodeSigninServer/1.1",
    r"""SwaggerHub API Auto Mocking"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the API for the COVID-19 Contact Tracing QRCode Signin Server"""
    attendees_signins: AttendeesSignins
    r"""Endpoints related to attendees signing in on the premises"""
    authentication: Authentication
    r"""Authentication-related endpoints"""
    passwords: Passwords
    r"""Endpoints related to changing and resetting passwords"""
    team_members: TeamMembers
    r"""Endpoints related to team member user accounts"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.attendees_signins = AttendeesSignins(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.authentication = Authentication(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.passwords = Passwords(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.team_members = TeamMembers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    