/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Tokeninfo - Successful response
 */
public class Tokeninfo {
    /**
     * Who is the intended audience for this token. In general the same as issued_to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audience")
    public String audience;
    public Tokeninfo withAudience(String audience) {
        this.audience = audience;
        return this;
    }
    
    /**
     * The email address of the user. Present only if the email scope is present in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public Tokeninfo withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The expiry time of the token, as number of seconds left until expiry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    public Integer expiresIn;
    public Tokeninfo withExpiresIn(Integer expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }
    
    /**
     * To whom was the token issued to. In general the same as audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_to")
    public String issuedTo;
    public Tokeninfo withIssuedTo(String issuedTo) {
        this.issuedTo = issuedTo;
        return this;
    }
    
    /**
     * The space separated list of scopes granted to this token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;
    public Tokeninfo withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * The obfuscated user id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public Tokeninfo withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Boolean flag which is true if the email address is verified. Present only if the email scope is present in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verified_email")
    public Boolean verifiedEmail;
    public Tokeninfo withVerifiedEmail(Boolean verifiedEmail) {
        this.verifiedEmail = verifiedEmail;
        return this;
    }
    
}
