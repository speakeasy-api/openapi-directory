"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountreference16_ch as shared_accountreference16_ch
from ..shared import amount as shared_amount
from ..shared import purposecode_enum as shared_purposecode_enum
from ..shared import remittanceinformationstructured as shared_remittanceinformationstructured
from ..shared import reportexchangerate as shared_reportexchangerate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntryDetailsElement:
    
    transaction_amount: shared_amount.Amount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionAmount') }})  
    check_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkId'), 'exclude': lambda f: f is None }})
    r"""Identification of a Cheque."""  
    creditor_account: Optional[shared_accountreference16_ch.AccountReference16CH] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorAccount'), 'exclude': lambda f: f is None }})
    r"""Reference to an account by either
      * IBAN, of a payment accounts, or
      * otherAccountIdentification, for payment accounts if there is no IBAN
    adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
    """  
    creditor_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorAgent'), 'exclude': lambda f: f is None }})
    r"""BICFI"""  
    creditor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorId'), 'exclude': lambda f: f is None }})
    r"""Identification of Creditors, e.g. a SEPA Creditor ID."""  
    creditor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorName'), 'exclude': lambda f: f is None }})
    r"""Creditor name."""  
    currency_exchange: Optional[list[shared_reportexchangerate.ReportExchangeRate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyExchange'), 'exclude': lambda f: f is None }})
    r"""Array of exchange rates."""  
    debtor_account: Optional[shared_accountreference16_ch.AccountReference16CH] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debtorAccount'), 'exclude': lambda f: f is None }})
    r"""Reference to an account by either
      * IBAN, of a payment accounts, or
      * otherAccountIdentification, for payment accounts if there is no IBAN
    adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
    """  
    debtor_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debtorAgent'), 'exclude': lambda f: f is None }})
    r"""BICFI"""  
    debtor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debtorName'), 'exclude': lambda f: f is None }})
    r"""Debtor name."""  
    end_to_end_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endToEndId'), 'exclude': lambda f: f is None }})
    r"""Unique end to end identity."""  
    mandate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateId'), 'exclude': lambda f: f is None }})
    r"""Identification of Mandates, e.g. a SEPA Mandate ID."""  
    purpose_code: Optional[shared_purposecode_enum.PurposeCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purposeCode'), 'exclude': lambda f: f is None }})
    r"""ExternalPurpose1Code from ISO 20022.
    
    Values from ISO 20022 External Code List ExternalCodeSets_1Q2018 June 2018.
    """  
    remittance_information_structured: Optional[shared_remittanceinformationstructured.RemittanceInformationStructured] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationStructured'), 'exclude': lambda f: f is None }})
    r"""Structured remittance information."""  
    remittance_information_structured_array: Optional[list[shared_remittanceinformationstructured.RemittanceInformationStructured]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationStructuredArray'), 'exclude': lambda f: f is None }})
    r"""Array of structured remittance information."""  
    remittance_information_unstructured: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationUnstructured'), 'exclude': lambda f: f is None }})
    r"""Unstructured remittance information."""  
    remittance_information_unstructured_array: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationUnstructuredArray'), 'exclude': lambda f: f is None }})
    r"""Array of unstructured remittance information."""  
    ultimate_creditor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ultimateCreditor'), 'exclude': lambda f: f is None }})
    r"""Ultimate creditor."""  
    ultimate_debtor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ultimateDebtor'), 'exclude': lambda f: f is None }})
    r"""Ultimate debtor."""  
    