<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CodeScanningUploadSarifRequestBody
{
    /**
     * The base directory used in the analysis, as it appears in the SARIF file.
     * 
     * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
     * 
     * @var ?string $checkoutUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('checkout_uri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $checkoutUri = null;
    
    /**
     * The SHA of the commit to which the analysis you are uploading relates.
     * 
     * @var string $commitSha
     */
	#[\JMS\Serializer\Annotation\SerializedName('commit_sha')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commitSha;
    
    /**
     * The full Git reference, formatted as `refs/heads/<branch name>`,
     * 
     * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
     * 
     * @var string $ref
     */
	#[\JMS\Serializer\Annotation\SerializedName('ref')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $ref;
    
    /**
     * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.5/code-security/secure-coding/sarif-support-for-code-scanning)."
     * 
     * @var string $sarif
     */
	#[\JMS\Serializer\Annotation\SerializedName('sarif')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $sarif;
    
    /**
     * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * 
     * @var ?\DateTime $startedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('started_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $startedAt = null;
    
    /**
     * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
     * 
     * @var ?string $toolName
     */
	#[\JMS\Serializer\Annotation\SerializedName('tool_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $toolName = null;
    
	public function __construct()
	{
		$this->checkoutUri = null;
		$this->commitSha = "";
		$this->ref = "";
		$this->sarif = "";
		$this->startedAt = null;
		$this->toolName = null;
	}
}
