"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Files:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def drive_files_copy(self, request: operations.DriveFilesCopyRequest, security: operations.DriveFilesCopySecurity) -> operations.DriveFilesCopyResponse:
        r"""Creates a copy of a file and applies any requested updates with patch semantics. Folders cannot be copied."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveFilesCopyRequest, base_url, '/files/{fileId}/copy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveFilesCopyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesCopyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out

        return res

    def drive_files_create(self, request: operations.DriveFilesCreateRequest, security: operations.DriveFilesCreateSecurity) -> operations.DriveFilesCreateResponse:
        r"""Creates a file."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveFilesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out

        return res

    def drive_files_delete(self, request: operations.DriveFilesDeleteRequest, security: operations.DriveFilesDeleteSecurity) -> operations.DriveFilesDeleteResponse:
        r"""Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive the user must be an organizer on the parent. If the target is a folder, all descendants owned by the user are also deleted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveFilesDeleteRequest, base_url, '/files/{fileId}', request)
        
        query_params = utils.get_query_params(operations.DriveFilesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def drive_files_empty_trash(self, request: operations.DriveFilesEmptyTrashRequest, security: operations.DriveFilesEmptyTrashSecurity) -> operations.DriveFilesEmptyTrashResponse:
        r"""Permanently deletes all of the user's trashed files."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files/trash'
        
        query_params = utils.get_query_params(operations.DriveFilesEmptyTrashRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesEmptyTrashResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def drive_files_export(self, request: operations.DriveFilesExportRequest, security: operations.DriveFilesExportSecurity) -> operations.DriveFilesExportResponse:
        r"""Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveFilesExportRequest, base_url, '/files/{fileId}/export', request)
        
        query_params = utils.get_query_params(operations.DriveFilesExportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def drive_files_generate_ids(self, request: operations.DriveFilesGenerateIdsRequest, security: operations.DriveFilesGenerateIdsSecurity) -> operations.DriveFilesGenerateIdsResponse:
        r"""Generates a set of file IDs which can be provided in create or copy requests."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files/generateIds'
        
        query_params = utils.get_query_params(operations.DriveFilesGenerateIdsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesGenerateIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneratedIds])
                res.generated_ids = out

        return res

    def drive_files_get(self, request: operations.DriveFilesGetRequest, security: operations.DriveFilesGetSecurity) -> operations.DriveFilesGetResponse:
        r"""Gets a file's metadata or content by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveFilesGetRequest, base_url, '/files/{fileId}', request)
        
        query_params = utils.get_query_params(operations.DriveFilesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out

        return res

    def drive_files_list(self, request: operations.DriveFilesListRequest, security: operations.DriveFilesListSecurity) -> operations.DriveFilesListResponse:
        r"""Lists or searches files."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files'
        
        query_params = utils.get_query_params(operations.DriveFilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileList])
                res.file_list = out

        return res

    def drive_files_list_labels(self, request: operations.DriveFilesListLabelsRequest, security: operations.DriveFilesListLabelsSecurity) -> operations.DriveFilesListLabelsResponse:
        r"""Lists the labels on a file."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveFilesListLabelsRequest, base_url, '/files/{fileId}/listLabels', request)
        
        query_params = utils.get_query_params(operations.DriveFilesListLabelsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesListLabelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabelList])
                res.label_list = out

        return res

    def drive_files_modify_labels(self, request: operations.DriveFilesModifyLabelsRequest, security: operations.DriveFilesModifyLabelsSecurity) -> operations.DriveFilesModifyLabelsResponse:
        r"""Modifies the set of labels on a file."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveFilesModifyLabelsRequest, base_url, '/files/{fileId}/modifyLabels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "modify_labels_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveFilesModifyLabelsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesModifyLabelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ModifyLabelsResponse])
                res.modify_labels_response = out

        return res

    def drive_files_update(self, request: operations.DriveFilesUpdateRequest, security: operations.DriveFilesUpdateSecurity) -> operations.DriveFilesUpdateResponse:
        r"""Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveFilesUpdateRequest, base_url, '/files/{fileId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveFilesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out

        return res

    def drive_files_watch(self, request: operations.DriveFilesWatchRequest, security: operations.DriveFilesWatchSecurity) -> operations.DriveFilesWatchResponse:
        r"""Subscribes to changes to a file. While you can establish a channel for changes to a file on a shared drive, a change to a shared drive file won't create a notification."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveFilesWatchRequest, base_url, '/files/{fileId}/watch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveFilesWatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveFilesWatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    