<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class TransactionDetail
{
	#[\JMS\Serializer\Annotation\SerializedName('account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountId;
    
	#[\JMS\Serializer\Annotation\SerializedName('account_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountName;
    
    /**
     * The transaction amount in milliunits format
     * 
     * @var int $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $amount;
    
    /**
     * Whether or not the transaction is approved
     * 
     * @var bool $approved
     */
	#[\JMS\Serializer\Annotation\SerializedName('approved')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $approved;
    
	#[\JMS\Serializer\Annotation\SerializedName('category_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $categoryId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('category_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $categoryName = null;
    
    /**
     * The cleared status of the transaction
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\TransactionDetailClearedEnum $cleared
     */
	#[\JMS\Serializer\Annotation\SerializedName('cleared')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TransactionDetailClearedEnum>')]
    public TransactionDetailClearedEnum $cleared;
    
    /**
     * The transaction date in ISO format (e.g. 2016-12-01)
     * 
     * @var \DateTime $date
     */
	#[\JMS\Serializer\Annotation\SerializedName('date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $date;
    
    /**
     * If the transaction is a debt/loan account transaction, the type of transaction
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionDetailDebtTransactionTypeEnum $debtTransactionType
     */
	#[\JMS\Serializer\Annotation\SerializedName('debt_transaction_type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TransactionDetailDebtTransactionTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionDetailDebtTransactionTypeEnum $debtTransactionType = null;
    
    /**
     * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
     * 
     * @var bool $deleted
     */
	#[\JMS\Serializer\Annotation\SerializedName('deleted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $deleted;
    
    /**
     * The transaction flag
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionDetailFlagColorEnum $flagColor
     */
	#[\JMS\Serializer\Annotation\SerializedName('flag_color')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TransactionDetailFlagColorEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionDetailFlagColorEnum $flagColor = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
     * 
     * @var ?string $importId
     */
	#[\JMS\Serializer\Annotation\SerializedName('import_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $importId = null;
    
    /**
     * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
     * 
     * @var ?string $importPayeeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('import_payee_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $importPayeeName = null;
    
    /**
     * If the transaction was imported, the original payee name as it appeared on the statement
     * 
     * @var ?string $importPayeeNameOriginal
     */
	#[\JMS\Serializer\Annotation\SerializedName('import_payee_name_original')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $importPayeeNameOriginal = null;
    
    /**
     * If transaction is matched, the id of the matched transaction
     * 
     * @var ?string $matchedTransactionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('matched_transaction_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $matchedTransactionId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('memo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $memo = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('payee_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payeeId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('payee_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payeeName = null;
    
    /**
     * If a split transaction, the subtransactions.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\SubTransaction> $subtransactions
     */
	#[\JMS\Serializer\Annotation\SerializedName('subtransactions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SubTransaction>')]
    public array $subtransactions;
    
    /**
     * If a transfer transaction, the account to which it transfers
     * 
     * @var ?string $transferAccountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('transfer_account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transferAccountId = null;
    
    /**
     * If a transfer transaction, the id of transaction on the other side of the transfer
     * 
     * @var ?string $transferTransactionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('transfer_transaction_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transferTransactionId = null;
    
	public function __construct()
	{
		$this->accountId = "";
		$this->accountName = "";
		$this->amount = 0;
		$this->approved = false;
		$this->categoryId = null;
		$this->categoryName = null;
		$this->cleared = \OpenAPI\OpenAPI\Models\Shared\TransactionDetailClearedEnum::CLEARED;
		$this->date = new \DateTime();
		$this->debtTransactionType = null;
		$this->deleted = false;
		$this->flagColor = null;
		$this->id = "";
		$this->importId = null;
		$this->importPayeeName = null;
		$this->importPayeeNameOriginal = null;
		$this->matchedTransactionId = null;
		$this->memo = null;
		$this->payeeId = null;
		$this->payeeName = null;
		$this->subtransactions = [];
		$this->transferAccountId = null;
		$this->transferTransactionId = null;
	}
}
