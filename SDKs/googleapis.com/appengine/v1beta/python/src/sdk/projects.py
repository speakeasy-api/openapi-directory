"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def appengine_projects_locations_applications_create(self, request: operations.AppengineProjectsLocationsApplicationsCreateRequest, security: operations.AppengineProjectsLocationsApplicationsCreateSecurity) -> operations.AppengineProjectsLocationsApplicationsCreateResponse:
        r"""Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/standard/python/console/)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsApplicationsCreateRequest, base_url, '/v1beta/projects/{projectsId}/locations/{locationsId}/applications', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "application_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsApplicationsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsApplicationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def appengine_projects_locations_applications_get(self, request: operations.AppengineProjectsLocationsApplicationsGetRequest, security: operations.AppengineProjectsLocationsApplicationsGetSecurity) -> operations.AppengineProjectsLocationsApplicationsGetResponse:
        r"""Gets information about an application."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsApplicationsGetRequest, base_url, '/v1beta/projects/{projectsId}/locations/{locationsId}/applications/{applicationsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsApplicationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsApplicationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Application])
                res.application = out

        return res

    def appengine_projects_locations_applications_repair(self, request: operations.AppengineProjectsLocationsApplicationsRepairRequest, security: operations.AppengineProjectsLocationsApplicationsRepairSecurity) -> operations.AppengineProjectsLocationsApplicationsRepairResponse:
        r"""Recreates the required App Engine features for the specified App Engine application, for example a Cloud Storage bucket or App Engine service account. Use this method if you receive an error message about a missing feature, for example, Error retrieving the App Engine service account. If you have deleted your App Engine service account, this will not be able to recreate it. Instead, you should attempt to use the IAM undelete API if possible at https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B\\"name\\"%3A\\"projects%2F-%2FserviceAccounts%2Funique_id\\"%2C\\"resource\\"%3A%7B%7D%7D . If the deletion was recent, the numeric ID can be found in the Cloud Console Activity Log."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsApplicationsRepairRequest, base_url, '/v1beta/projects/{projectsId}/locations/{locationsId}/applications/{applicationsId}:repair', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsApplicationsRepairRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsApplicationsRepairResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def appengine_projects_locations_get(self, request: operations.AppengineProjectsLocationsGetRequest, security: operations.AppengineProjectsLocationsGetSecurity) -> operations.AppengineProjectsLocationsGetResponse:
        r"""Gets information about a location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsGetRequest, base_url, '/v1beta/projects/{projectsId}/locations/{locationsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Location])
                res.location = out

        return res

    def appengine_projects_locations_list(self, request: operations.AppengineProjectsLocationsListRequest, security: operations.AppengineProjectsLocationsListSecurity) -> operations.AppengineProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsListRequest, base_url, '/v1beta/projects/{projectsId}/locations', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def appengine_projects_locations_operations_get(self, request: operations.AppengineProjectsLocationsOperationsGetRequest, security: operations.AppengineProjectsLocationsOperationsGetSecurity) -> operations.AppengineProjectsLocationsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsOperationsGetRequest, base_url, '/v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def appengine_projects_locations_operations_list(self, request: operations.AppengineProjectsLocationsOperationsListRequest, security: operations.AppengineProjectsLocationsOperationsListSecurity) -> operations.AppengineProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsOperationsListRequest, base_url, '/v1beta/projects/{projectsId}/locations/{locationsId}/operations', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    