<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reactions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create reaction for a commit comment
     * 
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.8/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-commit-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForCommitCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForCommitCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-commit-comment
     */
	public function reactionsCreateForCommitComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForCommitCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForCommitCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/comments/{comment_id}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForCommitCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForCommitCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create reaction for an issue
     * 
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.8/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-an-issue
     */
	public function reactionsCreateForIssue(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create reaction for an issue comment
     * 
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.8/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-an-issue-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-an-issue-comment
     */
	public function reactionsCreateForIssueComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForIssueCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create reaction for a pull request review comment
     * 
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.8/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForPullRequestReviewCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForPullRequestReviewCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment
     */
	public function reactionsCreateForPullRequestReviewComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForPullRequestReviewCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForPullRequestReviewCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForPullRequestReviewCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForPullRequestReviewCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create reaction for a release
     * 
     * Create a reaction to a [release](https://docs.github.com/enterprise-server@3.8/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#create-reaction-for-a-release - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForReleaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForReleaseResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#create-reaction-for-a-release
     */
	public function reactionsCreateForRelease(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForReleaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForReleaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/releases/{release_id}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForReleaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForReleaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create reaction for a team discussion comment
     * 
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
     * 
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-team-discussion-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentInOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentInOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-team-discussion-comment
     */
	public function reactionsCreateForTeamDiscussionCommentInOrg(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentInOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentInOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentInOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentInOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create reaction for a team discussion comment (Legacy)
     * 
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
     * 
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentLegacyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentLegacyResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy
     */
	public function reactionsCreateForTeamDiscussionCommentLegacy(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentLegacyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentLegacyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentLegacyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionCommentLegacyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create reaction for a team discussion
     * 
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
     * 
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-team-discussion - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionInOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionInOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-team-discussion
     */
	public function reactionsCreateForTeamDiscussionInOrg(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionInOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionInOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionInOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionInOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create reaction for a team discussion (Legacy)
     * 
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
     * 
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionLegacyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionLegacyResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy
     */
	public function reactionsCreateForTeamDiscussionLegacy(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionLegacyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionLegacyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{team_id}/discussions/{discussion_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionLegacyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsCreateForTeamDiscussionLegacyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reaction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a commit comment reaction
     * 
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
     * 
     * Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.8/rest/reference/repos#comments).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-a-commit-comment-reaction - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForCommitCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForCommitCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-a-commit-comment-reaction
     */
	public function reactionsDeleteForCommitComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForCommitCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForCommitCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}', \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForCommitCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForCommitCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an issue reaction
     * 
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
     * 
     * Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.8/rest/reference/issues/).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-an-issue-reaction - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-an-issue-reaction
     */
	public function reactionsDeleteForIssue(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}', \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an issue comment reaction
     * 
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
     * 
     * Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.8/rest/reference/issues#comments).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-an-issue-comment-reaction - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-an-issue-comment-reaction
     */
	public function reactionsDeleteForIssueComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}', \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForIssueCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a pull request comment reaction
     * 
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
     * 
     * Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.8/rest/reference/pulls#review-comments).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-a-pull-request-comment-reaction - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForPullRequestCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForPullRequestCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-a-pull-request-comment-reaction
     */
	public function reactionsDeleteForPullRequestComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForPullRequestCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForPullRequestCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}', \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForPullRequestCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForPullRequestCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a release reaction
     * 
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
     * 
     * Delete a reaction to a [release](https://docs.github.com/enterprise-server@3.8/rest/reference/repos#releases).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#delete-a-release-reaction - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForReleaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForReleaseResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#delete-a-release-reaction
     */
	public function reactionsDeleteForRelease(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForReleaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForReleaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}', \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForReleaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForReleaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete team discussion reaction
     * 
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
     * 
     * Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-team-discussion-reaction - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-team-discussion-reaction
     */
	public function reactionsDeleteForTeamDiscussion(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}', \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete team discussion comment reaction
     * 
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
     * 
     * Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-team-discussion-comment-reaction - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#delete-team-discussion-comment-reaction
     */
	public function reactionsDeleteForTeamDiscussionComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}', \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsDeleteForTeamDiscussionCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List reactions for a commit comment
     * 
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.8/rest/reference/repos#comments).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-commit-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForCommitCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForCommitCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-commit-comment
     */
	public function reactionsListForCommitComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForCommitCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForCommitCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/comments/{comment_id}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForCommitCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForCommitCommentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForCommitCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reactions for an issue
     * 
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@3.8/rest/reference/issues).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-an-issue
     */
	public function reactionsListForIssue(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reactions for an issue comment
     * 
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.8/rest/reference/issues#comments).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-an-issue-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-an-issue-comment
     */
	public function reactionsListForIssueComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueCommentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForIssueCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reactions for a pull request review comment
     * 
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.8/rest/reference/pulls#review-comments).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForPullRequestReviewCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForPullRequestReviewCommentResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment
     */
	public function reactionsListForPullRequestReviewComment(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForPullRequestReviewCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForPullRequestReviewCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForPullRequestReviewCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForPullRequestReviewCommentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForPullRequestReviewCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reactions for a release
     * 
     * List the reactions to a [release](https://docs.github.com/enterprise-server@3.8/rest/reference/repos#releases).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#list-reactions-for-a-release - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForReleaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForReleaseResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#list-reactions-for-a-release
     */
	public function reactionsListForRelease(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForReleaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForReleaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/releases/{release_id}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForReleaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForReleaseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForReleaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reactions for a team discussion comment
     * 
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * 
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-team-discussion-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentInOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentInOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-team-discussion-comment
     */
	public function reactionsListForTeamDiscussionCommentInOrg(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentInOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentInOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentInOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentInOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentInOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reactions for a team discussion comment (Legacy)
     * 
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
     * 
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentLegacyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentLegacyResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy
     */
	public function reactionsListForTeamDiscussionCommentLegacy(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentLegacyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentLegacyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentLegacyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentLegacyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionCommentLegacyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reactions for a team discussion
     * 
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * 
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-team-discussion - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionInOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionInOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-team-discussion
     */
	public function reactionsListForTeamDiscussionInOrg(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionInOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionInOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionInOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionInOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionInOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reactions for a team discussion (Legacy)
     * 
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.8/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
     * 
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.8/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.8/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionLegacyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionLegacyResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy
     */
	public function reactionsListForTeamDiscussionLegacy(
        \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionLegacyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionLegacyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{team_id}/discussions/{discussion_number}/reactions', \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionLegacyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionLegacyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReactionsListForTeamDiscussionLegacyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reactions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Reaction>', 'json');
            }
        }

        return $response;
    }
}