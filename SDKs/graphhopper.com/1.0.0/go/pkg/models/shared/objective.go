// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ObjectiveTypeEnum - Type of objective function, i.e. `min` or `min-max`.
//
//   - `min`: Minimizes the objective value.
//   - `min-max`: Minimizes the maximum objective value.
//
// For instance, `min` -> `vehicles` minimizes the number of employed vehicles.
// `min` -> `completion_time` minimizes the sum of your vehicle routes' completion time.
//
// If you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes' completion time, i.e. it minimizes the overall makespan.
// This only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact.
// If you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that
// the completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours
// to serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However,
// this usually comes with higher transport costs.
//
// If you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:
//
// ```json
// "objectives" : [
//
//	{
//	   "type": "min",
//	   "value": "vehicles"
//	},
//	{
//	   "type": "min",
//	   "value": "completion_time"
//	}
//
// ]
// ```
//
// If you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:
//
// ```json
// "objectives" : [
//
//	{
//	   "type": "min-max",
//	   "value": "completion_time"
//	},
//	{
//	   "type": "min-max",
//	   "value": "activities"
//	}
//
// ]
// ```
type ObjectiveTypeEnum string

const (
	ObjectiveTypeEnumMin    ObjectiveTypeEnum = "min"
	ObjectiveTypeEnumMinMax ObjectiveTypeEnum = "min-max"
)

func (e *ObjectiveTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "min":
		fallthrough
	case "min-max":
		*e = ObjectiveTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ObjectiveTypeEnum: %s", s)
	}
}

// ObjectiveValueEnum - The value of the objective function.
// The objective value `transport_time` solely considers the time
// your drivers spend on the road, i.e. transport time. In contrary to `transport_time`, `completion_time` also takes waiting times at customer sites into account.
// The `completion_time` of a route is defined as the time from starting to ending the route,
// i.e. the route's transport time, the sum of waiting times plus the sum of activity durations.
// Note that choosing `transport_time` or `completion_time` only makes a difference if you specified time windows for your services/shipments since only in
// scenarios with time windows waiting times can occur.
// The objective value `vehicles` can only be used along with `min` and minimizes vehicles.
type ObjectiveValueEnum string

const (
	ObjectiveValueEnumCompletionTime ObjectiveValueEnum = "completion_time"
	ObjectiveValueEnumTransportTime  ObjectiveValueEnum = "transport_time"
	ObjectiveValueEnumVehicles       ObjectiveValueEnum = "vehicles"
	ObjectiveValueEnumActivities     ObjectiveValueEnum = "activities"
)

func (e *ObjectiveValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "completion_time":
		fallthrough
	case "transport_time":
		fallthrough
	case "vehicles":
		fallthrough
	case "activities":
		*e = ObjectiveValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ObjectiveValueEnum: %s", s)
	}
}

type Objective struct {
	// Type of objective function, i.e. `min` or `min-max`.
	//
	//  * `min`: Minimizes the objective value.
	//  * `min-max`: Minimizes the maximum objective value.
	//
	// For instance, `min` -> `vehicles` minimizes the number of employed vehicles.
	// `min` -> `completion_time` minimizes the sum of your vehicle routes' completion time.
	//
	// If you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes' completion time, i.e. it minimizes the overall makespan.
	// This only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact.
	// If you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that
	// the completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours
	// to serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However,
	// this usually comes with higher transport costs.
	//
	// If you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:
	//
	// ```json
	// "objectives" : [
	//    {
	//       "type": "min",
	//       "value": "vehicles"
	//    },
	//    {
	//       "type": "min",
	//       "value": "completion_time"
	//    }
	// ]
	// ```
	//
	// If you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:
	//
	// ```json
	// "objectives" : [
	//    {
	//       "type": "min-max",
	//       "value": "completion_time"
	//    },
	//    {
	//       "type": "min-max",
	//       "value": "activities"
	//    }
	// ]
	// ```
	//
	Type ObjectiveTypeEnum `json:"type"`
	// The value of the objective function.
	// The objective value `transport_time` solely considers the time
	// your drivers spend on the road, i.e. transport time. In contrary to `transport_time`, `completion_time` also takes waiting times at customer sites into account.
	// The `completion_time` of a route is defined as the time from starting to ending the route,
	// i.e. the route's transport time, the sum of waiting times plus the sum of activity durations.
	// Note that choosing `transport_time` or `completion_time` only makes a difference if you specified time windows for your services/shipments since only in
	// scenarios with time windows waiting times can occur.
	// The objective value `vehicles` can only be used along with `min` and minimizes vehicles.
	//
	Value ObjectiveValueEnum `json:"value"`
}
