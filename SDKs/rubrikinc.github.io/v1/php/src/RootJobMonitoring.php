<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootJobMonitoring 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an email subscription to the job monitoring page
     * 
     * Creates an email subscription to the job monitoring page, which provides information on jobs based on their type (active, in progress, canceled, scheduled, or succeeded). Users can choose which job states to include in the subscription. The email summarizes the job counts by type in the body, and includes the option to include CSV attachments for every job state selected.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\MonitoringEmailSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMonitoringSubscriptionResponse
     */
	public function createMonitoringSubscription(
        \OpenAPI\OpenAPI\Models\Shared\MonitoringEmailSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMonitoringSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring/subscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMonitoringSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->monitoringSubscriptionSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MonitoringSubscriptionSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a monitoring page email subscription
     * 
     * Deletes the specified monitoring page email subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringSubscriptionResponse
     */
	public function deleteMonitoringSubscription(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring/subscription/{subscription_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get job monitoring information
     * 
     * Get the job summary for protection and recovery jobs that are currently running, scheduled to run, or completed in the past 24 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoResponse
     */
	public function getJobMonitoringInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobMonitoringResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobMonitoringResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download job monitoring information as a CSV file
     * 
     * Download the job summary for protection and recovery jobs that are currently running, scheduled to run, or completed in the past 24 hours as a CSV file. This is a synchronous operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoCsvDownloadLinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoCsvDownloadLinkResponse
     */
	public function getJobMonitoringInfoCsvDownloadLink(
        \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoCsvDownloadLinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoCsvDownloadLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring/csv_download_link');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoCsvDownloadLinkRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJobMonitoringInfoCsvDownloadLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobMonitoringCsvDownloadResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobMonitoringCsvDownloadResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get job monitoring summary information separated by job state
     * 
     * Get job summary separated by job state for all running jobs, jobs that have been scheduled and jobs that are complete, for protection and recovery jobs in the past 24 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobStateResponse
     */
	public function getMonitoringJobCountByJobState(
        \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring/summary_by_job_state');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobStateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobMonitoringSummaryByState = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobMonitoringSummaryByState', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get job monitoring summary information separated by job type
     * 
     * Get job summaries for protection and recovery jobs, separated by job type, that have been scheduled, are currently running, or completed in the past 24 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobTypeResponse
     */
	public function getMonitoringJobCountByJobType(
        \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring/summary_by_job_type');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobTypeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMonitoringJobCountByJobTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobMonitoringSummaryByType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobMonitoringSummaryByType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific monitoring email subscription by id
     * 
     * Returns a summary of the provided monitoring subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionResponse
     */
	public function getMonitoringSubscription(
        \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring/subscription/{subscription_id}', \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->monitoringSubscriptionSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MonitoringSubscriptionSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all email subscriptions for the monitoring page
     * 
     * Return all unarchived email subscriptions for monitoring page in a list of summaries sorted by creation time (earliest created first). Each summary contains information for each subscription -- Time attributes - when to send the email -- Email addresses - who to send the email -- Attachments - what attachments should the email include -- Job states - which job states to include in the email (Failure, Scheduled, Success, Active, Canceled). -- Id - the tring that identifies the subscription -- Status - the status of the subscription (Active, Suspended, or Unknown) -- Owner - information about the owner of the subscription -- user id - unique id used to identify the owner -- user name - human-readable name of user the time schedule to send the subscription.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionsResponse
     */
	public function getMonitoringSubscriptions(
    ): \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring/subscription');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMonitoringSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->monitoringSubscriptionSummaries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MonitoringSubscriptionSummary>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a monitoring email subscription
     * 
     * Updates the monitoring email subscription with the subscription ID provided.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringSubscriptionResponse
     */
	public function updateMonitoringSubscription(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/job_monitoring/subscription/{subscription_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "monitoringEmailSubscriptionUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->monitoringSubscriptionSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MonitoringSubscriptionSummary', 'json');
            }
        }

        return $response;
    }
}