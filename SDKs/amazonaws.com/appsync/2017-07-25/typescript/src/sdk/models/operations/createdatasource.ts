/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Describes an Amazon DynamoDB data source configuration.
 */
export class CreateDataSourceRequestBodyDynamodbConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "awsRegion" })
  awsRegion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deltaSyncConfig" })
  @Type(() => shared.DeltaSyncConfig)
  deltaSyncConfig?: shared.DeltaSyncConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "tableName" })
  tableName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "useCallerCredentials" })
  useCallerCredentials?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "versioned" })
  versioned?: boolean;
}

/**
 * <p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>
 */
export class CreateDataSourceRequestBodyElasticsearchConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "awsRegion" })
  awsRegion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endpoint" })
  endpoint?: string;
}

/**
 * Describes an Amazon EventBridge bus data source configuration.
 */
export class CreateDataSourceRequestBodyEventBridgeConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "eventBusArn" })
  eventBusArn?: string;
}

/**
 * Describes an HTTP data source configuration.
 */
export class CreateDataSourceRequestBodyHttpConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "authorizationConfig" })
  @Type(() => shared.AuthorizationConfig)
  authorizationConfig?: shared.AuthorizationConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "endpoint" })
  endpoint?: string;
}

/**
 * Describes an Lambda data source configuration.
 */
export class CreateDataSourceRequestBodyLambdaConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "lambdaFunctionArn" })
  lambdaFunctionArn?: string;
}

/**
 * Describes an OpenSearch data source configuration.
 */
export class CreateDataSourceRequestBodyOpenSearchServiceConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "awsRegion" })
  awsRegion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endpoint" })
  endpoint?: string;
}

/**
 * Describes a relational database data source configuration.
 */
export class CreateDataSourceRequestBodyRelationalDatabaseConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "rdsHttpEndpointConfig" })
  @Type(() => shared.RdsHttpEndpointConfig)
  rdsHttpEndpointConfig?: shared.RdsHttpEndpointConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "relationalDatabaseSourceType" })
  relationalDatabaseSourceType?: shared.RelationalDatabaseSourceTypeEnum;
}

/**
 * The type of the <code>DataSource</code>.
 */
export enum CreateDataSourceRequestBodyTypeEnum {
  AwsLambda = "AWS_LAMBDA",
  AmazonDynamodb = "AMAZON_DYNAMODB",
  AmazonElasticsearch = "AMAZON_ELASTICSEARCH",
  None = "NONE",
  Http = "HTTP",
  RelationalDatabase = "RELATIONAL_DATABASE",
  AmazonOpensearchService = "AMAZON_OPENSEARCH_SERVICE",
  AmazonEventbridge = "AMAZON_EVENTBRIDGE",
}

export class CreateDataSourceRequestBody extends SpeakeasyBase {
  /**
   * A description of the <code>DataSource</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Describes an Amazon DynamoDB data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dynamodbConfig" })
  @Type(() => CreateDataSourceRequestBodyDynamodbConfig)
  dynamodbConfig?: CreateDataSourceRequestBodyDynamodbConfig;

  /**
   * <p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "elasticsearchConfig" })
  @Type(() => CreateDataSourceRequestBodyElasticsearchConfig)
  elasticsearchConfig?: CreateDataSourceRequestBodyElasticsearchConfig;

  /**
   * Describes an Amazon EventBridge bus data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventBridgeConfig" })
  @Type(() => CreateDataSourceRequestBodyEventBridgeConfig)
  eventBridgeConfig?: CreateDataSourceRequestBodyEventBridgeConfig;

  /**
   * Describes an HTTP data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpConfig" })
  @Type(() => CreateDataSourceRequestBodyHttpConfig)
  httpConfig?: CreateDataSourceRequestBodyHttpConfig;

  /**
   * Describes an Lambda data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lambdaConfig" })
  @Type(() => CreateDataSourceRequestBodyLambdaConfig)
  lambdaConfig?: CreateDataSourceRequestBodyLambdaConfig;

  /**
   * A user-supplied name for the <code>DataSource</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Describes an OpenSearch data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "openSearchServiceConfig" })
  @Type(() => CreateDataSourceRequestBodyOpenSearchServiceConfig)
  openSearchServiceConfig?: CreateDataSourceRequestBodyOpenSearchServiceConfig;

  /**
   * Describes a relational database data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relationalDatabaseConfig" })
  @Type(() => CreateDataSourceRequestBodyRelationalDatabaseConfig)
  relationalDatabaseConfig?: CreateDataSourceRequestBodyRelationalDatabaseConfig;

  /**
   * The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceRoleArn" })
  serviceRoleArn?: string;

  /**
   * The type of the <code>DataSource</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: CreateDataSourceRequestBodyTypeEnum;
}

export class CreateDataSourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateDataSourceRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The API ID for the GraphQL API for the <code>DataSource</code>.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=apiId",
  })
  apiId: string;
}

export class CreateDataSourceResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createDataSourceResponse?: shared.CreateDataSourceResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;
}
