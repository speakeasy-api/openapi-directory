/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * RemoteBandwidthSnapshotEntity - List Remote Bandwidth Snapshots
 */
public class RemoteBandwidthSnapshotEntity {
    /**
     * Site bandwidth ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public RemoteBandwidthSnapshotEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Time the site bandwidth report was logged
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("logged_at")
    public OffsetDateTime loggedAt;

    public RemoteBandwidthSnapshotEntity withLoggedAt(OffsetDateTime loggedAt) {
        this.loggedAt = loggedAt;
        return this;
    }
    
    /**
     * ID of related Remote Server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_server_id")
    public Integer remoteServerId;

    public RemoteBandwidthSnapshotEntity withRemoteServerId(Integer remoteServerId) {
        this.remoteServerId = remoteServerId;
        return this;
    }
    
    /**
     * Site sync bandwidth report bytes received
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sync_bytes_received")
    public Double syncBytesReceived;

    public RemoteBandwidthSnapshotEntity withSyncBytesReceived(Double syncBytesReceived) {
        this.syncBytesReceived = syncBytesReceived;
        return this;
    }
    
    /**
     * Site sync bandwidth report bytes sent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sync_bytes_sent")
    public Double syncBytesSent;

    public RemoteBandwidthSnapshotEntity withSyncBytesSent(Double syncBytesSent) {
        this.syncBytesSent = syncBytesSent;
        return this;
    }
    
    public RemoteBandwidthSnapshotEntity(){}
}
