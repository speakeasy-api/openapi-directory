/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Invoice - The invoice to send. Provide either invoice, or invoiceData, but not both.
 */
public class Invoice {
    /**
     * The buyer's accounting cost centre for this invoice, expressed as text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingCost")public String accountingCost;
    public Invoice withAccountingCost(String accountingCost) {
        this.accountingCost = accountingCost;
        return this;
    }
    
    /**
     * The total amount of tax in the accounting currency. If included, must be non-zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingCurrencyTaxAmount")public Double accountingCurrencyTaxAmount;
    public Invoice withAccountingCurrencyTaxAmount(Double accountingCurrencyTaxAmount) {
        this.accountingCurrencyTaxAmount = accountingCurrencyTaxAmount;
        return this;
    }
    
    /**
     * The ISO 4217 currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingCurrencyTaxAmountCurrency")public CurrencyCodeEnum accountingCurrencyTaxAmountCurrency;
    public Invoice withAccountingCurrencyTaxAmountCurrency(CurrencyCodeEnum accountingCurrencyTaxAmountCurrency) {
        this.accountingCurrencyTaxAmountCurrency = accountingCurrencyTaxAmountCurrency;
        return this;
    }
    
    /**
     * The customer receiving the document.
     */
    @JsonProperty("accountingCustomerParty")public AccountingCustomerParty accountingCustomerParty;
    public Invoice withAccountingCustomerParty(AccountingCustomerParty accountingCustomerParty) {
        this.accountingCustomerParty = accountingCustomerParty;
        return this;
    }
    
    /**
     * The party sending the invoice. Most data for the AccountingSupplierParty is taken from the Storecove database, where your sender identity resides and has been validated. However, we provide a limited number of fields here that you can specify on an invoice-by-invoice basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingSupplierParty")public AccountingSupplierParty accountingSupplierParty;
    public Invoice withAccountingSupplierParty(AccountingSupplierParty accountingSupplierParty) {
        this.accountingSupplierParty = accountingSupplierParty;
        return this;
    }
    
    /**
     * An array of allowance charges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowanceCharges")public AllowanceCharge[] allowanceCharges;
    public Invoice withAllowanceCharges(AllowanceCharge[] allowanceCharges) {
        this.allowanceCharges = allowanceCharges;
        return this;
    }
    
    /**
     * amountIncludingVat is important because of rounding differences. In many invoices, the sum of the line item amounts excluding VAT and the VAT amounts is not equal to first summing the line items without VAT, and then applying VAT. The difference is automatically calculated and included in the electronic invoice, so the receiving accounting package can process the electronic invoice without problems.
     */
    @JsonProperty("amountIncludingVat")public Double amountIncludingVat;
    public Invoice withAmountIncludingVat(Double amountIncludingVat) {
        this.amountIncludingVat = amountIncludingVat;
        return this;
    }
    
    /**
     * An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")public Attachment[] attachments;
    public Invoice withAttachments(Attachment[] attachments) {
        this.attachments = attachments;
        return this;
    }
    
    /**
     * DEPRECATED. Use a reference object with a documentType 'billing'. A reference to a commercial invoice or corrective invoice of which the current invoice is a correction. This field is mandatory when sending invoiceType 384.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingReference")public String billingReference;
    public Invoice withBillingReference(String billingReference) {
        this.billingReference = billingReference;
        return this;
    }
    
    /**
     * DEPRECATED. Use a reference object with a documentType 'buyer_reference'. A reference provided by the buyer used for internal routing of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyerReference")public String buyerReference;
    public Invoice withBuyerReference(String buyerReference) {
        this.buyerReference = buyerReference;
        return this;
    }
    
    /**
     * Whether or not to process the invoice in consumer tax mode. In this mode, the VAT identifier of the sender will not be the default VAT identifier, but the one that matches with the country of the receiving consumer, if that additional VAT identifier for that country is available. These additional VAT identifiers need to be added to the sending LegalEntity by Storecove, so if you need to send invoices in this mode, please contact us.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumerTaxMode")public Boolean consumerTaxMode;
    public Invoice withConsumerTaxMode(Boolean consumerTaxMode) {
        this.consumerTaxMode = consumerTaxMode;
        return this;
    }
    
    /**
     * DEPRECATED. Use a reference object with a documentType 'contract'. A reference to a contract or framework agreement that this invoice relates to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractDocumentReference")public String contractDocumentReference;
    public Invoice withContractDocumentReference(String contractDocumentReference) {
        this.contractDocumentReference = contractDocumentReference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery")public Delivery delivery;
    public Invoice withDelivery(Delivery delivery) {
        this.delivery = delivery;
        return this;
    }
    
    /**
     * The ISO 4217 currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentCurrencyCode")public CurrencyCodeEnum documentCurrencyCode;
    public Invoice withDocumentCurrencyCode(CurrencyCodeEnum documentCurrencyCode) {
        this.documentCurrencyCode = documentCurrencyCode;
        return this;
    }
    
    /**
     * Format: yyyy-mm-dd.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueDate")public String dueDate;
    public Invoice withDueDate(String dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * An array of invoice lines.
     */
    @JsonProperty("invoiceLines")public InvoiceLine[] invoiceLines;
    public Invoice withInvoiceLines(InvoiceLine[] invoiceLines) {
        this.invoiceLines = invoiceLines;
        return this;
    }
    
    /**
     * The invoice number you assigned to the invoice. The invoiceNumber should be unique for the legalEntityId and year of the issueDate. This means invoice numbers can be reused in different years, as is customary in some countries.
     */
    @JsonProperty("invoiceNumber")public String invoiceNumber;
    public Invoice withInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
        return this;
    }
    
    /**
     * The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoicePeriod")public String invoicePeriod;
    public Invoice withInvoicePeriod(String invoicePeriod) {
        this.invoicePeriod = invoicePeriod;
        return this;
    }
    
    /**
     * DEPRECATED. Do not use. This field is available for legacy reasons only. If you want to send a regular invoice (aka UBL type '380'), make sure you have a positive invoice amount. For a credit note (aka UBL type '381'), simply provide a negative invoice amount. If you, in addition to a negative invoice amount, also specify a billingReferences, your invoice will become a corrective invoice (aka UBL type '384'). If your invoice is not sent in the UBL syntax, Storecove will provide the appropriate type for the syntax the invoice is sent in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceType")public InvoiceTypeOfInvoiceEnum invoiceType;
    public Invoice withInvoiceType(InvoiceTypeOfInvoiceEnum invoiceType) {
        this.invoiceType = invoiceType;
        return this;
    }
    
    /**
     * Format: yyyy-mm-dd.
     */
    @JsonProperty("issueDate")public String issueDate;
    public Invoice withIssueDate(String issueDate) {
        this.issueDate = issueDate;
        return this;
    }
    
    /**
     * An array reasons for issuing the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issueReasons")public String[] issueReasons;
    public Invoice withIssueReasons(String[] issueReasons) {
        this.issueReasons = issueReasons;
        return this;
    }
    
    /**
     * A note to add to the invoice
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")public String note;
    public Invoice withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * DEPRECATED. Use a reference object with a documentType 'purchase_order'. A reference to an order for this invoice, assigned by the buyer. Note that this often is a key field, since many receivers of invoices will use this field to automatically match the invoice to an order they placed. Many receivers refuse invoices that cannot be automatically matched, in particular government agencies. So it is highly recommended to fill this field whenever possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderReference")public String orderReference;
    public Invoice withOrderReference(String orderReference) {
        this.orderReference = orderReference;
        return this;
    }
    
    /**
     * An array of payment means (ways to pay the invoice).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMeansArray")public PaymentMeans[] paymentMeansArray;
    public Invoice withPaymentMeansArray(PaymentMeans[] paymentMeansArray) {
        this.paymentMeansArray = paymentMeansArray;
        return this;
    }
    
    /**
     * DEPRECATED. Use paymentMeansArray. The BIC (Swift) of the bank where the amount payable should be transferred to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMeansBic")public String paymentMeansBic;
    public Invoice withPaymentMeansBic(String paymentMeansBic) {
        this.paymentMeansBic = paymentMeansBic;
        return this;
    }
    
    /**
     * DEPRECATED. Use paymentMeansArray. How the invoice has been / will be paid. Use only online_payment_service (payment will be made or has been made by an online payment service), bank_card (e.g. debit card, credit card), direct_debit (the amount has been / will be taken out of the client's bank account), standing_agreement (an unspecified payment means known to both buyer and seller) or credit_transfer (the buyer will do / has done a bank transfer). The numeric codes are for legacy purposes, they should not be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMeansCode")public InvoicePaymentMeansCodeEnum paymentMeansCode;
    public Invoice withPaymentMeansCode(InvoicePaymentMeansCodeEnum paymentMeansCode) {
        this.paymentMeansCode = paymentMeansCode;
        return this;
    }
    
    /**
     * DEPRECATED. Use paymentMeansArray. The IBAN the amount payable should be transferred to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMeansIban")public String paymentMeansIban;
    public Invoice withPaymentMeansIban(String paymentMeansIban) {
        this.paymentMeansIban = paymentMeansIban;
        return this;
    }
    
    /**
     * DEPRECATED. Use the paymentId in the individual PaymentMeans object. The payment id that you will use to match the payment against the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMeansPaymentId")public String paymentMeansPaymentId;
    public Invoice withPaymentMeansPaymentId(String paymentMeansPaymentId) {
        this.paymentMeansPaymentId = paymentMeansPaymentId;
        return this;
    }
    
    /**
     * The payment terms of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentTerms")public PaymentTerms paymentTerms;
    public Invoice withPaymentTerms(PaymentTerms paymentTerms) {
        this.paymentTerms = paymentTerms;
        return this;
    }
    
    /**
     * In auto mode, the choice between invoice or creditnote is made by Storecove based on what is appropriate for the receiver and the receiver country, in combination with the invoice amount sign. If you wish to state a preference, use this field. It is not guaranteed that the preference will be used, since it depends also on the receiver's document capabilities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredInvoiceType")public InvoiceInvoiceTypeEnum preferredInvoiceType;
    public Invoice withPreferredInvoiceType(InvoiceInvoiceTypeEnum preferredInvoiceType) {
        this.preferredInvoiceType = preferredInvoiceType;
        return this;
    }
    
    /**
     * The amount already paid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prepaidAmount")public Double prepaidAmount;
    public Invoice withPrepaidAmount(Double prepaidAmount) {
        this.prepaidAmount = prepaidAmount;
        return this;
    }
    
    /**
     * DEPRECATED. Information about the project this invoice relates to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectReference")public String projectReference;
    public Invoice withProjectReference(String projectReference) {
        this.projectReference = projectReference;
        return this;
    }
    
    /**
     * An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes support all documentTypes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("references")public Reference[] references;
    public Invoice withReferences(Reference[] references) {
        this.references = references;
        return this;
    }
    
    /**
     * DEPRECATED. Use a reference object with a documentType 'sales_order'. A reference to an order for this invoice, assigned by the seller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salesOrderId")public String salesOrderId;
    public Invoice withSalesOrderId(String salesOrderId) {
        this.salesOrderId = salesOrderId;
        return this;
    }
    
    /**
     * In self billing mode, the AccountingCustomerParty and the AccountingSupplierParty are be switched. Such an invoice can only be sent via email. Also, your account will need to allow the use of this mode, so before trying to use this please first contact Storecove.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfBillingMode")public Boolean selfBillingMode;
    public Invoice withSelfBillingMode(Boolean selfBillingMode) {
        this.selfBillingMode = selfBillingMode;
        return this;
    }
    
    /**
     * DEPRECATED. Use Tax/category and specify this per invoice line. If you do specify this field, it will be applied to all invoice lines and it is an error to specify a Tax/category at the invoice line level. This field holds the reason no tax is present in the invoice. Note that this is an invoice level field and you cannot specify it per invoice line. This field is mandatory unless tax is present in the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxExemptReason")public InvoiceTaxExemptReasonEnum taxExemptReason;
    public Invoice withTaxExemptReason(InvoiceTaxExemptReasonEnum taxExemptReason) {
        this.taxExemptReason = taxExemptReason;
        return this;
    }
    
    /**
     * The tax date is the date on which the supply of goods or of services was made or completed or the date on which the payment on account was made insofar as that date can be determined and differs from the date of the issue of the invoice. EU 2006-112 Article 226 Point 7. Note: For the Dutch TAX authorities the tac date should be the same as the issue date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxPointDate")public String taxPointDate;
    public Invoice withTaxPointDate(String taxPointDate) {
        this.taxPointDate = taxPointDate;
        return this;
    }
    
    /**
     * An array of tax subtotals. This element is mandatory for taxSystem 'tax_line_percentages'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxSubtotals")public TaxSubtotal[] taxSubtotals;
    public Invoice withTaxSubtotals(TaxSubtotal[] taxSubtotals) {
        this.taxSubtotals = taxSubtotals;
        return this;
    }
    
    /**
     * The tax system used for the invoice. The system 'tax_line_percentages' is preferred, but for historic purposes 'tax_line_amounts' is supported and the default. Since not all invoice formats that we are required to send support 'tax_line_amounts' we will need to convert the invoice to the 'tax_line_percentags' system if we are forced to send the invoice in that tax system. Note that an invoice must always contain tax information, even if that is 0% or an item or sender is exempt or tax is completely outside scope. In that case, use the correct tax categories (see &lt;&lt;_openapi_tax&gt;&gt;)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxSystem")public InvoiceTaxSystemEnum taxSystem;
    public Invoice withTaxSystem(InvoiceTaxSystemEnum taxSystem) {
        this.taxSystem = taxSystem;
        return this;
    }
    
    /**
     * An array of taxes, duties and fees for this invoice. At this moment, the only invoice level tax allowed is the Italian '\u20ac2 bollo virtuale'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxesDutiesFees")public Tax[] taxesDutiesFees;
    public Invoice withTaxesDutiesFees(Tax[] taxesDutiesFees) {
        this.taxesDutiesFees = taxesDutiesFees;
        return this;
    }
    
    /**
     * The type of transaction. Currently used only for India.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionType")public InvoiceTransactionTypeEnum transactionType;
    public Invoice withTransactionType(InvoiceTransactionTypeEnum transactionType) {
        this.transactionType = transactionType;
        return this;
    }
    
    /**
     * An array of ubl extensions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ublExtensions")public String[] ublExtensions;
    public Invoice withUblExtensions(String[] ublExtensions) {
        this.ublExtensions = ublExtensions;
        return this;
    }
    
    /**
     * DEPRECATED. Use taxExemptReason.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatReverseCharge")public Boolean vatReverseCharge;
    public Invoice withVatReverseCharge(Boolean vatReverseCharge) {
        this.vatReverseCharge = vatReverseCharge;
        return this;
    }
    
    /**
     * The type of entities the document is sent from/to: b2b (business-to-business), b2g (business-to-government) or b2c (business-to-consumer). This field does not have a default, but it in mose cases it will be treated as b2b. Only when you explicitly specify b2g or b2c OR when it is clear from the context will a different value be used. For instance, when we see the document is being routed to DE:LWID or NL:OINO number, this tells us it is b2g. But in many cases we are unable to determine this and so it is best to always specify this field. Note that b2b_sez is for use inside India only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x2y")public InvoiceX2yEnum x2y;
    public Invoice withX2y(InvoiceX2yEnum x2y) {
        this.x2y = x2y;
        return this;
    }
    
}
