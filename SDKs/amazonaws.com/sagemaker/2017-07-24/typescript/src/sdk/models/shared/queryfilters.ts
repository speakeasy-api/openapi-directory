/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LineageTypeEnum } from "./lineagetypeenum";
import { Expose, Transform } from "class-transformer";

/**
 * A set of filters to narrow the set of lineage entities connected to the <code>StartArn</code>(s) returned by the <code>QueryLineage</code> API action.
 */
export class QueryFilters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedAfter" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAfter?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedBefore" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdBefore?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LineageTypes" })
  lineageTypes?: LineageTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "ModifiedAfter" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modifiedAfter?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ModifiedBefore" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modifiedBefore?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Properties" })
  properties?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "Types" })
  types?: string[];
}
