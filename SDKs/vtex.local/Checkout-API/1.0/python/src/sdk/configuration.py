"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Configuration:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def clearorder_form_messages(self, request: operations.ClearorderFormMessagesRequest) -> operations.ClearorderFormMessagesResponse:
        r"""Clear orderForm messages
        This request removes all messages from the `messages` field of the orderForm , leaving it empty.
        
        You must send an empty JSON in the body of the request.
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        
        **Important**: **Request Body** must always be sent with empty value \"{ }\" in this endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClearorderFormMessagesRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/messages/clear', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClearorderFormMessagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ClearorderFormMessages200ApplicationJSON])
                res.clearorder_form_messages_200_application_json_object = out

        return res

    def get_window_to_change_seller(self, request: operations.GetWindowToChangeSellerRequest) -> operations.GetWindowToChangeSellerResponse:
        r"""Get window to change seller
        Retrieves a marketplace’s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.
        
        
        The default period for this window is of 2 days, but it can be configured by the request Update window to change seller.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/checkout/pvt/configuration/window-to-change-seller'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWindowToChangeSellerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getorder_formconfiguration(self, request: operations.GetorderFormconfigurationRequest) -> operations.GetorderFormconfigurationResponse:
        r"""Get orderForm configuration
        Retrieves the settings that are currently applied to every orderForm in the account.
        
        
        These settings are defined by the request [Update orderForm configuration](https://developers.vtex.com/reference/configuration#updateorderformconfiguration).
        
        
        Always use this request to retrieve the current configuration before performing an update. By doing so you ensure that you are modifying only the properties you want.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/checkout/pvt/configuration/orderForm'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetorderFormconfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.getorder_formconfiguration_200_application_json_any = out

        return res

    def update_window_to_change_seller(self, request: operations.UpdateWindowToChangeSellerRequest) -> operations.UpdateWindowToChangeSellerResponse:
        r"""Update window to change seller
        Updates a marketplace’s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.
        
        
        It is possible to check the current window using the request Get window to change seller.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/checkout/pvt/configuration/window-to-change-seller'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "waiting_time", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWindowToChangeSellerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def updateorder_formconfiguration(self, request: operations.UpdateorderFormconfigurationRequest) -> operations.UpdateorderFormconfigurationResponse:
        r"""Update orderForm configuration
        Determines settings that will apply to every orderForm in the account.
        
        
        For example, if you create an app using this request, every orderForm of this account will have the custom fields created though it.
        
        
        **Important**: always retrieve the current configuration before performing an update to ensure that you are modifying only the properties you want. Otherwise, old values can be overwritten. To retrieve the current configuration, use the request [Get orderForm configuration](https://developers.vtex.com/reference#getorderformconfiguration).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/checkout/pvt/configuration/orderForm'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "updateorder_formconfiguration_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateorderFormconfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    