"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BfdStatus = exports.BfdStatusLocalStateEnum = exports.BfdStatusLocalDiagnosticEnum = exports.BfdStatusBfdSessionInitializationModeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var bfdpacket_1 = require("./bfdpacket");
var bfdstatuspacketcounts_1 = require("./bfdstatuspacketcounts");
var packetintervals_1 = require("./packetintervals");
var class_transformer_1 = require("class-transformer");
/**
 * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer.
 */
var BfdStatusBfdSessionInitializationModeEnum;
(function (BfdStatusBfdSessionInitializationModeEnum) {
    BfdStatusBfdSessionInitializationModeEnum["Active"] = "ACTIVE";
    BfdStatusBfdSessionInitializationModeEnum["Disabled"] = "DISABLED";
    BfdStatusBfdSessionInitializationModeEnum["Passive"] = "PASSIVE";
})(BfdStatusBfdSessionInitializationModeEnum = exports.BfdStatusBfdSessionInitializationModeEnum || (exports.BfdStatusBfdSessionInitializationModeEnum = {}));
/**
 * The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
 */
var BfdStatusLocalDiagnosticEnum;
(function (BfdStatusLocalDiagnosticEnum) {
    BfdStatusLocalDiagnosticEnum["AdministrativelyDown"] = "ADMINISTRATIVELY_DOWN";
    BfdStatusLocalDiagnosticEnum["ConcatenatedPathDown"] = "CONCATENATED_PATH_DOWN";
    BfdStatusLocalDiagnosticEnum["ControlDetectionTimeExpired"] = "CONTROL_DETECTION_TIME_EXPIRED";
    BfdStatusLocalDiagnosticEnum["DiagnosticUnspecified"] = "DIAGNOSTIC_UNSPECIFIED";
    BfdStatusLocalDiagnosticEnum["EchoFunctionFailed"] = "ECHO_FUNCTION_FAILED";
    BfdStatusLocalDiagnosticEnum["ForwardingPlaneReset"] = "FORWARDING_PLANE_RESET";
    BfdStatusLocalDiagnosticEnum["NeighborSignaledSessionDown"] = "NEIGHBOR_SIGNALED_SESSION_DOWN";
    BfdStatusLocalDiagnosticEnum["NoDiagnostic"] = "NO_DIAGNOSTIC";
    BfdStatusLocalDiagnosticEnum["PathDown"] = "PATH_DOWN";
    BfdStatusLocalDiagnosticEnum["ReverseConcatenatedPathDown"] = "REVERSE_CONCATENATED_PATH_DOWN";
})(BfdStatusLocalDiagnosticEnum = exports.BfdStatusLocalDiagnosticEnum || (exports.BfdStatusLocalDiagnosticEnum = {}));
/**
 * The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
 */
var BfdStatusLocalStateEnum;
(function (BfdStatusLocalStateEnum) {
    BfdStatusLocalStateEnum["AdminDown"] = "ADMIN_DOWN";
    BfdStatusLocalStateEnum["Down"] = "DOWN";
    BfdStatusLocalStateEnum["Init"] = "INIT";
    BfdStatusLocalStateEnum["StateUnspecified"] = "STATE_UNSPECIFIED";
    BfdStatusLocalStateEnum["Up"] = "UP";
})(BfdStatusLocalStateEnum = exports.BfdStatusLocalStateEnum || (exports.BfdStatusLocalStateEnum = {}));
/**
 * Next free: 15
 */
var BfdStatus = /** @class */ (function (_super) {
    __extends(BfdStatus, _super);
    function BfdStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bfdSessionInitializationMode" }),
        __metadata("design:type", String)
    ], BfdStatus.prototype, "bfdSessionInitializationMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "configUpdateTimestampMicros" }),
        __metadata("design:type", String)
    ], BfdStatus.prototype, "configUpdateTimestampMicros", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "controlPacketCounts" }),
        (0, class_transformer_1.Type)(function () { return bfdstatuspacketcounts_1.BfdStatusPacketCounts; }),
        __metadata("design:type", bfdstatuspacketcounts_1.BfdStatusPacketCounts)
    ], BfdStatus.prototype, "controlPacketCounts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: packetintervals_1.PacketIntervals }),
        (0, class_transformer_1.Expose)({ name: "controlPacketIntervals" }),
        (0, class_transformer_1.Type)(function () { return packetintervals_1.PacketIntervals; }),
        __metadata("design:type", Array)
    ], BfdStatus.prototype, "controlPacketIntervals", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "echoPacketCounts" }),
        (0, class_transformer_1.Type)(function () { return bfdstatuspacketcounts_1.BfdStatusPacketCounts; }),
        __metadata("design:type", bfdstatuspacketcounts_1.BfdStatusPacketCounts)
    ], BfdStatus.prototype, "echoPacketCounts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: packetintervals_1.PacketIntervals }),
        (0, class_transformer_1.Expose)({ name: "echoPacketIntervals" }),
        (0, class_transformer_1.Type)(function () { return packetintervals_1.PacketIntervals; }),
        __metadata("design:type", Array)
    ], BfdStatus.prototype, "echoPacketIntervals", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "localDiagnostic" }),
        __metadata("design:type", String)
    ], BfdStatus.prototype, "localDiagnostic", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "localState" }),
        __metadata("design:type", String)
    ], BfdStatus.prototype, "localState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "negotiatedLocalControlTxIntervalMs" }),
        __metadata("design:type", Number)
    ], BfdStatus.prototype, "negotiatedLocalControlTxIntervalMs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "negotiatedLocalEchoTxIntervalMs" }),
        __metadata("design:type", Number)
    ], BfdStatus.prototype, "negotiatedLocalEchoTxIntervalMs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rxPacket" }),
        (0, class_transformer_1.Type)(function () { return bfdpacket_1.BfdPacket; }),
        __metadata("design:type", bfdpacket_1.BfdPacket)
    ], BfdStatus.prototype, "rxPacket", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "txPacket" }),
        (0, class_transformer_1.Type)(function () { return bfdpacket_1.BfdPacket; }),
        __metadata("design:type", bfdpacket_1.BfdPacket)
    ], BfdStatus.prototype, "txPacket", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "uptimeMs" }),
        __metadata("design:type", String)
    ], BfdStatus.prototype, "uptimeMs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "usingEchoMode" }),
        __metadata("design:type", Boolean)
    ], BfdStatus.prototype, "usingEchoMode", void 0);
    return BfdStatus;
}(utils_1.SpeakeasyBase));
exports.BfdStatus = BfdStatus;
