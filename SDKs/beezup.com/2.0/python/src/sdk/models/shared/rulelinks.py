"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import links_deleterulelink as shared_links_deleterulelink
from ..shared import links_disablerulelink as shared_links_disablerulelink
from ..shared import links_enablerulelink as shared_links_enablerulelink
from ..shared import links_getreportfilterlink as shared_links_getreportfilterlink
from ..shared import links_getrulelink as shared_links_getrulelink
from ..shared import links_movedownrulelink as shared_links_movedownrulelink
from ..shared import links_moveuprulelink as shared_links_moveuprulelink
from ..shared import links_runrulelink as shared_links_runrulelink
from ..shared import links_updaterulelink as shared_links_updaterulelink
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuleLinks:
    r"""Links to retrieve/action on other entities"""
    
    self_: shared_links_getrulelink.LinksGetRuleLink = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})  
    delete: Optional[shared_links_deleterulelink.LinksDeleteRuleLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete'), 'exclude': lambda f: f is None }})  
    disable: Optional[shared_links_disablerulelink.LinksDisableRuleLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable'), 'exclude': lambda f: f is None }})  
    enable: Optional[shared_links_enablerulelink.LinksEnableRuleLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})  
    movedown: Optional[shared_links_movedownrulelink.LinksMoveDownRuleLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('movedown'), 'exclude': lambda f: f is None }})  
    moveup: Optional[shared_links_moveuprulelink.LinksMoveUpRuleLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moveup'), 'exclude': lambda f: f is None }})  
    report_filter: Optional[shared_links_getreportfilterlink.LinksGetReportFilterLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportFilter'), 'exclude': lambda f: f is None }})  
    run: Optional[shared_links_runrulelink.LinksRunRuleLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run'), 'exclude': lambda f: f is None }})  
    update: Optional[shared_links_updaterulelink.LinksUpdateRuleLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update'), 'exclude': lambda f: f is None }})  
    