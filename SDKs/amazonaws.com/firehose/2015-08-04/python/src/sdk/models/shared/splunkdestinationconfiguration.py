"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudwatchloggingoptions as shared_cloudwatchloggingoptions
from ..shared import hecendpointtype_enum as shared_hecendpointtype_enum
from ..shared import processingconfiguration as shared_processingconfiguration
from ..shared import s3destinationconfiguration as shared_s3destinationconfiguration
from ..shared import splunkretryoptions as shared_splunkretryoptions
from ..shared import splunks3backupmode_enum as shared_splunks3backupmode_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SplunkDestinationConfiguration:
    r"""Describes the configuration of a destination in Splunk."""
    
    hec_endpoint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HECEndpoint') }})  
    hec_endpoint_type: shared_hecendpointtype_enum.HECEndpointTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HECEndpointType') }})  
    hec_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HECToken') }})  
    s3_configuration: shared_s3destinationconfiguration.S3DestinationConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Configuration') }})  
    cloud_watch_logging_options: Optional[shared_cloudwatchloggingoptions.CloudWatchLoggingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})  
    hec_acknowledgment_timeout_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HECAcknowledgmentTimeoutInSeconds'), 'exclude': lambda f: f is None }})  
    processing_configuration: Optional[shared_processingconfiguration.ProcessingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingConfiguration'), 'exclude': lambda f: f is None }})  
    retry_options: Optional[shared_splunkretryoptions.SplunkRetryOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryOptions'), 'exclude': lambda f: f is None }})  
    s3_backup_mode: Optional[shared_splunks3backupmode_enum.SplunkS3BackupModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3BackupMode'), 'exclude': lambda f: f is None }})  
    