<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Patient 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a patient
     * 
     * Create a patient record.
     * 
     * Example for creating a patient with a group specified using `meta.query` instead of `id`:
     * 
     * ```JSON
     * {
     *   "data": {
     *     "type": "patient",
     *     "attributes": {
     *       "first_name": "Andrew",
     *       "last_name": "Smith"
     *     },
     *     "relationships": {
     *       "groups": {
     *         "data": [
     *           {
     *             "type": "group",
     *             "meta": {
     *               "query": {
     *                 "organization": "58c88de7c93eb96357a87033",
     *                 "name": "Patients Lead"
     *               }
     *             }
     *           }
     *         ]
     *       }
     *     }
     *   }
     * }
     * ```
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreatePatientRequestInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePatientResponse
     */
	public function createPatient(
        \OpenAPI\OpenAPI\Models\Shared\CreatePatientRequestInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePatientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/patient');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePatientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPatientResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePatientResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrUpdateErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateOrUpdateErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a patient
     * 
     * Gets a patient record by id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPatientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPatientResponse
     */
	public function fetchPatient(
        \OpenAPI\OpenAPI\Models\Operations\FetchPatientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPatientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/patient/{id}', \OpenAPI\OpenAPI\Models\Operations\FetchPatientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPatientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchPatientResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchPatientResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List coaches for a patient
     * 
     * Get the list of coaches for a patient.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPatientCoachesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPatientCoachesResponse
     */
	public function fetchPatientCoaches(
        \OpenAPI\OpenAPI\Models\Operations\FetchPatientCoachesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPatientCoachesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/patient/{id}/coaches', \OpenAPI\OpenAPI\Models\Operations\FetchPatientCoachesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPatientCoachesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchCoachesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchCoachesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List groups for a patient
     * 
     * Get the list of groups for a patient.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPatientGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPatientGroupsResponse
     */
	public function fetchPatientGroups(
        \OpenAPI\OpenAPI\Models\Operations\FetchPatientGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPatientGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/patient/{id}/groups', \OpenAPI\OpenAPI\Models\Operations\FetchPatientGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPatientGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchGroupsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List patients
     * 
     * Get a list of patients.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPatientsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPatientsResponse
     */
	public function fetchPatients(
        \OpenAPI\OpenAPI\Models\Operations\FetchPatientsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPatientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/patient');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchPatientsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPatientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchPatientsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchPatientsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a patient
     * 
     * Update a patient record.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePatientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePatientResponse
     */
	public function updatePatient(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePatientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePatientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/patient/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdatePatientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updatePatientRequestInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePatientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePatientResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdatePatientResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrUpdateErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateOrUpdateErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upsert patient
     * 
     * Create a new patient or update an existing patient
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UpsertPatientRequestInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpsertPatientResponse
     */
	public function upsertPatient(
        \OpenAPI\OpenAPI\Models\Shared\UpsertPatientRequestInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpsertPatientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/patient');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpsertPatientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPatientResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePatientResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrUpdateErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateOrUpdateErrorResponse', 'json');
            }
        }

        return $response;
    }
}