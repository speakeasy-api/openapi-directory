// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DomainMappingSpecCertificateModeEnum - The mode of the certificate.
type DomainMappingSpecCertificateModeEnum string

const (
	DomainMappingSpecCertificateModeEnumCertificateModeUnspecified DomainMappingSpecCertificateModeEnum = "CERTIFICATE_MODE_UNSPECIFIED"
	DomainMappingSpecCertificateModeEnumNone                       DomainMappingSpecCertificateModeEnum = "NONE"
	DomainMappingSpecCertificateModeEnumAutomatic                  DomainMappingSpecCertificateModeEnum = "AUTOMATIC"
)

func (e *DomainMappingSpecCertificateModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CERTIFICATE_MODE_UNSPECIFIED":
		fallthrough
	case "NONE":
		fallthrough
	case "AUTOMATIC":
		*e = DomainMappingSpecCertificateModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainMappingSpecCertificateModeEnum: %s", s)
	}
}

// DomainMappingSpec - The desired state of the Domain Mapping.
type DomainMappingSpec struct {
	// The mode of the certificate.
	CertificateMode *DomainMappingSpecCertificateModeEnum `json:"certificateMode,omitempty"`
	// If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
	ForceOverride *bool `json:"forceOverride,omitempty"`
	// The name of the Knative Route that this DomainMapping applies to. The route must exist.
	RouteName *string `json:"routeName,omitempty"`
}
