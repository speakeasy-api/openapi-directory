"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import currentperformancerisk_enum as shared_currentperformancerisk_enum
from ..shared import ecsservicelaunchtype_enum as shared_ecsservicelaunchtype_enum
from ..shared import ecsservicerecommendationfinding_enum as shared_ecsservicerecommendationfinding_enum
from ..shared import ecsservicerecommendationfindingreasoncode_enum as shared_ecsservicerecommendationfindingreasoncode_enum
from ..shared import ecsservicerecommendationoption as shared_ecsservicerecommendationoption
from ..shared import ecsserviceutilizationmetric as shared_ecsserviceutilizationmetric
from ..shared import serviceconfiguration as shared_serviceconfiguration
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ECSServiceRecommendation:
    r"""Describes an Amazon ECS service recommendation."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})  
    current_performance_risk: Optional[shared_currentperformancerisk_enum.CurrentPerformanceRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentPerformanceRisk'), 'exclude': lambda f: f is None }})  
    current_service_configuration: Optional[shared_serviceconfiguration.ServiceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentServiceConfiguration'), 'exclude': lambda f: f is None }})  
    finding: Optional[shared_ecsservicerecommendationfinding_enum.ECSServiceRecommendationFindingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finding'), 'exclude': lambda f: f is None }})  
    finding_reason_codes: Optional[list[shared_ecsservicerecommendationfindingreasoncode_enum.ECSServiceRecommendationFindingReasonCodeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingReasonCodes'), 'exclude': lambda f: f is None }})  
    last_refresh_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRefreshTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    launch_type: Optional[shared_ecsservicelaunchtype_enum.ECSServiceLaunchTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchType'), 'exclude': lambda f: f is None }})  
    lookback_period_in_days: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lookbackPeriodInDays'), 'exclude': lambda f: f is None }})  
    service_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceArn'), 'exclude': lambda f: f is None }})  
    service_recommendation_options: Optional[list[shared_ecsservicerecommendationoption.ECSServiceRecommendationOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceRecommendationOptions'), 'exclude': lambda f: f is None }})  
    utilization_metrics: Optional[list[shared_ecsserviceutilizationmetric.ECSServiceUtilizationMetric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utilizationMetrics'), 'exclude': lambda f: f is None }})  
    