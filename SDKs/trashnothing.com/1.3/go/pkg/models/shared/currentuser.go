// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// CurrentUserEmail - Data related to the users' email address.
type CurrentUserEmail struct {
	// The email address.
	Address *string `json:"address,omitempty"`
	// Whether or not this email address has been bouncing emails that are sent to it.  When bouncing is true, no emails will be sent to the user.  If the user thinks that their email account shouldn't be bouncing emails, use the email not bouncing endpoint to reset bouncing to false.
	//
	Bouncing *bool `json:"bouncing,omitempty"`
	// Whether or not emails have been stopped because of a spam complaint from the users' email account. When spam_stop is first set to true, it indicates that all emails have been automatically disabled for the users' account (eg. digest and alerts).  The user will need to re-enable digests and re-add any alerts that they had previously set up.
	//
	SpamStop *bool `json:"spam_stop,omitempty"`
}

type CurrentUserFeedback struct {
	// The percent of feedback that this user has received in the last year that was positive. May be null if a user has not received enough feedback to calculate a percentage.
	//
	PercentPositive *float64 `json:"percent_positive,omitempty"`
	// If the current user can leave positive or negative feedback on this user then restriction is null. <br /><br /> Otherwise, restriction is set to a string that explains why feedback is currently restricted and what type of feedback is restricted. The string will be one of the following:  no-recent-messages, negative-score, moderator, [days]-day-wait-for-negative <br /><br /> - **no-recent-messages**: The current user has not received any messages from this user in the last 30 days. <br /> - **negative-score**: The current user has a negative feedback and will not be able to leave feedback until their score is >= 0. <br /> - **moderator**: The user is a moderator and leaving feedback on moderators is not currently supported. <br /> - **[days]-day-wait-for-negative**: Positive feedback is not restricted but the current user must wait
	//   some number of days before they will be able to leave negative feedback on this user.  This string can
	//   change depending on the number of days.  For example, when the current user must wait one day, the
	//   string will be '1-day-wait-for-negative'.  A wait is necessary because a lot of negative feedback results
	//   from communication issues that are resolved with more time.
	//
	Restriction *string `json:"restriction,omitempty"`
	// The feedback score of this user.  Higher scores are better.   Scores are calculated by substracting the total number of negative feedback from the total number of positive feedback that a user has received.  May be null if a user has not received enough feedback to calculate a score.
	//
	Score *int64 `json:"score,omitempty"`
}

// CurrentUserLocation - The users' location.  The location is used to determine which posts are shown to the user (may be null).
type CurrentUserLocation struct {
	Latitude  *float64 `json:"latitude,omitempty"`
	Longitude *float64 `json:"longitude,omitempty"`
	// A text description of the location specified by latitude and longitude.
	Name *string `json:"name,omitempty"`
	// Defines the radius (in meters) of a circle around the point specified by latitude and longitude.
	Radius *float64 `json:"radius,omitempty"`
}

// CurrentUser - User data
type CurrentUser struct {
	// A short bio a user has written about themselves to help other members get to know them better. May be null if the user has not written anything about themselves.
	//
	AboutMe *string `json:"about_me,omitempty"`
	// A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set.
	//
	Country *string `json:"country,omitempty"`
	// Whether or not photos are included in the digest emails sent to the user.
	DigestPhotos *bool `json:"digest_photos,omitempty"`
	// Data related to the users' email address.
	Email *CurrentUserEmail `json:"email,omitempty"`
	// How quickly new messages from other users are emailed to this user. One of: immediate, 30_minutes, 1_hour, 2_hours, 4_hours, 6_hours, 8_hours <br /> If set to anything other than immediate, the user will receive a digest email summarizing all of the new messages that they haven't viewed.
	//
	EmailMessageDelay *string `json:"email_message_delay,omitempty"`
	// Whether or not post reminder emails are enabled for this user (to remind them to update or repost their posts).
	EmailPostReminders *bool `json:"email_post_reminders,omitempty"`
	// How often new post email notifications are sent to the user. One of: weekly, twice_weekly, daily, 12_hours, 8_hours, 6_hours, 4_hours, 2_hours, hourly <br /><br /> Will be null if new post email notifications are turned off.
	//
	EmailPostsFrequency *string `json:"email_posts_frequency,omitempty"`
	// Whether or not search alert emails are enabled for this user.
	EmailSearchAlerts *bool                `json:"email_search_alerts,omitempty"`
	Feedback          *CurrentUserFeedback `json:"feedback,omitempty"`
	// The first name of the user (may be null).
	Firstname *string `json:"firstname,omitempty"`
	// Whether or not the user has a password (accounts created using 3rd party providers like Facebook don't have passwords set). <br /><br /> When has_password is false, the only way to set a password on the users' account is to send the user a password reset email.
	//
	HasPassword *bool `json:"has_password,omitempty"`
	// The UTC date and time when the user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page.
	//
	LastListingsView *time.Time `json:"last_listings_view,omitempty"`
	// The last name of the user (may be null).
	Lastname *string `json:"lastname,omitempty"`
	// The users' location.  The location is used to determine which posts are shown to the user (may be null).
	Location *CurrentUserLocation `json:"location,omitempty"`
	// The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).
	MemberSince *string `json:"member_since,omitempty"`
	// A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
	//
	ProfileImage *string `json:"profile_image,omitempty"`
	// The source of the users' profile image. One of: gravatar, facebook, google, freegle, custom
	//
	ProfileImageSource *string `json:"profile_image_source,omitempty"`
	// Whether or not the user has chosen to make their first and last name public.
	PublicName *bool `json:"public_name,omitempty"`
	// A list of the public post sources the user is interested in seeing posts from (currently only 'trashnothing' is supported). If the array is empty, no sources are enabled and the user will only see posts from the groups they are a member of. <br /><br /> NOTE: Additional sources may be added in the future so clients should take care to support arbitrary sources being returned.
	//
	PublicPostSources []string `json:"public_post_sources,omitempty"`
	// An estimate of how many seconds it takes this user to reply to messages. May be null when there is not enough data to calculate an estimate.
	//
	ReplyTime *int64 `json:"reply_time,omitempty"`
	// If true, all group posts from the users' groups are shown to them on the main posts page and in the digests. <br /><br /> If false, only group posts in the area defined by the users' location are shown.
	//
	ShowAllGroupPosts *bool `json:"show_all_group_posts,omitempty"`
	// The UTC date and time when the user signed up.
	Signup *time.Time `json:"signup,omitempty"`
	// Whether or not the user wants to receive special notice emails from the groups they are a member of. Special notices are admin posts that the group moderators choose to send out by email.
	//
	SpecialNotices *bool   `json:"special_notices,omitempty"`
	UserID         *string `json:"user_id,omitempty"`
	// A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
	//
	Username *string `json:"username,omitempty"`
	// Whether or not the user used the Fair Offer Policy (see https://trashnothing.com/fair_offer_policy ) the last time they posted.
	UsesFairOfferPolicy *bool `json:"uses_fair_offer_policy,omitempty"`
	// Whether or not the user has verified their account. The user account will be limited (eg. they will not be able to reply to posts) until their account is verified.
	//
	Verified *bool `json:"verified,omitempty"`
}
