/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConnectionState } from "./connectionstate";
import { DestinationConfig } from "./destinationconfig";
import { Tag } from "./tag";
import { TimeoutConfig } from "./timeoutconfig";
import { TunnelStatusEnum } from "./tunnelstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A connection between a source computer and a destination device.
 */
export class Tunnel extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "destinationConfig" })
  @Type(() => DestinationConfig)
  destinationConfig?: DestinationConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "destinationConnectionState" })
  @Type(() => ConnectionState)
  destinationConnectionState?: ConnectionState;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceConnectionState" })
  @Type(() => ConnectionState)
  sourceConnectionState?: ConnectionState;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: TunnelStatusEnum;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "tags" })
  @Type(() => Tag)
  tags?: Tag[];

  @SpeakeasyMetadata()
  @Expose({ name: "timeoutConfig" })
  @Type(() => TimeoutConfig)
  timeoutConfig?: TimeoutConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "tunnelArn" })
  tunnelArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tunnelId" })
  tunnelId?: string;
}
