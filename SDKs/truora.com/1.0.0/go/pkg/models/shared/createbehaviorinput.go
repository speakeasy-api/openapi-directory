// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreateBehaviorInputCountryEnum - Document country
type CreateBehaviorInputCountryEnum string

const (
	CreateBehaviorInputCountryEnumCo CreateBehaviorInputCountryEnum = "co"
	CreateBehaviorInputCountryEnumVe CreateBehaviorInputCountryEnum = "ve"
	CreateBehaviorInputCountryEnumCl CreateBehaviorInputCountryEnum = "cl"
	CreateBehaviorInputCountryEnumMx CreateBehaviorInputCountryEnum = "mx"
	CreateBehaviorInputCountryEnumPe CreateBehaviorInputCountryEnum = "pe"
	CreateBehaviorInputCountryEnumDo CreateBehaviorInputCountryEnum = "do"
	CreateBehaviorInputCountryEnumSv CreateBehaviorInputCountryEnum = "sv"
	CreateBehaviorInputCountryEnumGt CreateBehaviorInputCountryEnum = "gt"
	CreateBehaviorInputCountryEnumBo CreateBehaviorInputCountryEnum = "bo"
	CreateBehaviorInputCountryEnumCr CreateBehaviorInputCountryEnum = "cr"
	CreateBehaviorInputCountryEnumEc CreateBehaviorInputCountryEnum = "ec"
	CreateBehaviorInputCountryEnumPa CreateBehaviorInputCountryEnum = "pa"
	CreateBehaviorInputCountryEnumBr CreateBehaviorInputCountryEnum = "br"
)

func (e *CreateBehaviorInputCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "co":
		fallthrough
	case "ve":
		fallthrough
	case "cl":
		fallthrough
	case "mx":
		fallthrough
	case "pe":
		fallthrough
	case "do":
		fallthrough
	case "sv":
		fallthrough
	case "gt":
		fallthrough
	case "bo":
		fallthrough
	case "cr":
		fallthrough
	case "ec":
		fallthrough
	case "pa":
		fallthrough
	case "br":
		*e = CreateBehaviorInputCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBehaviorInputCountryEnum: %s", s)
	}
}

// CreateBehaviorInputDocumentTypeEnum - Document type associated with the background check
type CreateBehaviorInputDocumentTypeEnum string

const (
	CreateBehaviorInputDocumentTypeEnumNationalID             CreateBehaviorInputDocumentTypeEnum = "national-id"
	CreateBehaviorInputDocumentTypeEnumPassport               CreateBehaviorInputDocumentTypeEnum = "passport"
	CreateBehaviorInputDocumentTypeEnumForeignID              CreateBehaviorInputDocumentTypeEnum = "foreign-id"
	CreateBehaviorInputDocumentTypeEnumNit                    CreateBehaviorInputDocumentTypeEnum = "nit"
	CreateBehaviorInputDocumentTypeEnumDiplomaticID           CreateBehaviorInputDocumentTypeEnum = "diplomatic-id"
	CreateBehaviorInputDocumentTypeEnumCivilRegistration      CreateBehaviorInputDocumentTypeEnum = "civil-registration"
	CreateBehaviorInputDocumentTypeEnumIdentityCard           CreateBehaviorInputDocumentTypeEnum = "identity-card"
	CreateBehaviorInputDocumentTypeEnumForeignerCard          CreateBehaviorInputDocumentTypeEnum = "foreigner-card"
	CreateBehaviorInputDocumentTypeEnumProfessionalCard       CreateBehaviorInputDocumentTypeEnum = "professional-card"
	CreateBehaviorInputDocumentTypeEnumMilitaryCard           CreateBehaviorInputDocumentTypeEnum = "military-card"
	CreateBehaviorInputDocumentTypeEnumPep                    CreateBehaviorInputDocumentTypeEnum = "pep"
	CreateBehaviorInputDocumentTypeEnumNis                    CreateBehaviorInputDocumentTypeEnum = "nis"
	CreateBehaviorInputDocumentTypeEnumDni                    CreateBehaviorInputDocumentTypeEnum = "dni"
	CreateBehaviorInputDocumentTypeEnumRui                    CreateBehaviorInputDocumentTypeEnum = "rui"
	CreateBehaviorInputDocumentTypeEnumLicensePlate           CreateBehaviorInputDocumentTypeEnum = "license-plate"
	CreateBehaviorInputDocumentTypeEnumQuery                  CreateBehaviorInputDocumentTypeEnum = "query"
	CreateBehaviorInputDocumentTypeEnumName                   CreateBehaviorInputDocumentTypeEnum = "name"
	CreateBehaviorInputDocumentTypeEnumRut                    CreateBehaviorInputDocumentTypeEnum = "rut"
	CreateBehaviorInputDocumentTypeEnumNuip                   CreateBehaviorInputDocumentTypeEnum = "nuip"
	CreateBehaviorInputDocumentTypeEnumForeignSocieties       CreateBehaviorInputDocumentTypeEnum = "foreign-societies"
	CreateBehaviorInputDocumentTypeEnumEscrow                 CreateBehaviorInputDocumentTypeEnum = "escrow"
	CreateBehaviorInputDocumentTypeEnumIndividualRegistration CreateBehaviorInputDocumentTypeEnum = "individual-registration"
	CreateBehaviorInputDocumentTypeEnumGeneralRegistration    CreateBehaviorInputDocumentTypeEnum = "general-registration"
	CreateBehaviorInputDocumentTypeEnumCurp                   CreateBehaviorInputDocumentTypeEnum = "curp"
	CreateBehaviorInputDocumentTypeEnumDui                    CreateBehaviorInputDocumentTypeEnum = "dui"
	CreateBehaviorInputDocumentTypeEnumDriverLicense          CreateBehaviorInputDocumentTypeEnum = "driver-license"
	CreateBehaviorInputDocumentTypeEnumRuc                    CreateBehaviorInputDocumentTypeEnum = "ruc"
)

func (e *CreateBehaviorInputDocumentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "national-id":
		fallthrough
	case "passport":
		fallthrough
	case "foreign-id":
		fallthrough
	case "nit":
		fallthrough
	case "diplomatic-id":
		fallthrough
	case "civil-registration":
		fallthrough
	case "identity-card":
		fallthrough
	case "foreigner-card":
		fallthrough
	case "professional-card":
		fallthrough
	case "military-card":
		fallthrough
	case "pep":
		fallthrough
	case "nis":
		fallthrough
	case "dni":
		fallthrough
	case "rui":
		fallthrough
	case "license-plate":
		fallthrough
	case "query":
		fallthrough
	case "name":
		fallthrough
	case "rut":
		fallthrough
	case "nuip":
		fallthrough
	case "foreign-societies":
		fallthrough
	case "escrow":
		fallthrough
	case "individual-registration":
		fallthrough
	case "general-registration":
		fallthrough
	case "curp":
		fallthrough
	case "dui":
		fallthrough
	case "driver-license":
		fallthrough
	case "ruc":
		*e = CreateBehaviorInputDocumentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBehaviorInputDocumentTypeEnum: %s", s)
	}
}

// CreateBehaviorInputReasonEnum - Report reason
type CreateBehaviorInputReasonEnum string

const (
	CreateBehaviorInputReasonEnumRape                  CreateBehaviorInputReasonEnum = "rape"
	CreateBehaviorInputReasonEnumDrugDealer            CreateBehaviorInputReasonEnum = "drug-dealer"
	CreateBehaviorInputReasonEnumSexualHarassment      CreateBehaviorInputReasonEnum = "sexual-harassment"
	CreateBehaviorInputReasonEnumTheft                 CreateBehaviorInputReasonEnum = "theft"
	CreateBehaviorInputReasonEnumFights                CreateBehaviorInputReasonEnum = "fights"
	CreateBehaviorInputReasonEnumAggressiveBehaviour   CreateBehaviorInputReasonEnum = "aggressive-behaviour"
	CreateBehaviorInputReasonEnumIdentityFraud         CreateBehaviorInputReasonEnum = "identity-fraud"
	CreateBehaviorInputReasonEnumDrunk                 CreateBehaviorInputReasonEnum = "drunk"
	CreateBehaviorInputReasonEnumDrugPossession        CreateBehaviorInputReasonEnum = "drug-possession"
	CreateBehaviorInputReasonEnumAbsences              CreateBehaviorInputReasonEnum = "absences"
	CreateBehaviorInputReasonEnumTardiness             CreateBehaviorInputReasonEnum = "tardiness"
	CreateBehaviorInputReasonEnumConfidentialityBreach CreateBehaviorInputReasonEnum = "confidentiality-breach"
	CreateBehaviorInputReasonEnumGoodReputation        CreateBehaviorInputReasonEnum = "good-reputation"
)

func (e *CreateBehaviorInputReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "rape":
		fallthrough
	case "drug-dealer":
		fallthrough
	case "sexual-harassment":
		fallthrough
	case "theft":
		fallthrough
	case "fights":
		fallthrough
	case "aggressive-behaviour":
		fallthrough
	case "identity-fraud":
		fallthrough
	case "drunk":
		fallthrough
	case "drug-possession":
		fallthrough
	case "absences":
		fallthrough
	case "tardiness":
		fallthrough
	case "confidentiality-breach":
		fallthrough
	case "good-reputation":
		*e = CreateBehaviorInputReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBehaviorInputReasonEnum: %s", s)
	}
}

// CreateBehaviorInput - Represents paramaters required to give behavior feedback
type CreateBehaviorInput struct {
	// Birth date of reported person
	BirthDate time.Time `form:"name=birth_date"`
	// Document country
	Country CreateBehaviorInputCountryEnum `form:"name=country"`
	// Person document ID
	DocumentID string `form:"name=document_id"`
	// Document type associated with the background check
	DocumentType CreateBehaviorInputDocumentTypeEnum `form:"name=document_type"`
	// Reported person e-mail
	Email string `form:"name=email"`
	// Behavior report date
	FeedbackDate time.Time `form:"name=feedback_date"`
	// Person first name
	FirstName string `form:"name=first_name"`
	// Person last name
	LastName string `form:"name=last_name"`
	// Phone number of the reported person
	PhoneNumber *string `form:"name=phone_number"`
	// Report reason
	Reason CreateBehaviorInputReasonEnum `form:"name=reason"`
}
