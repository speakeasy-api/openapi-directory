/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Administer a GitHub enterprise.
 */
export class EnterpriseAdmin {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add an authorized SSH key
   *
   * @remarks
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#add-an-authorized-ssh-key} - API method documentation
   */
  enterpriseAdminAddAuthorizedSshKey(
    req: operations.EnterpriseAdminAddAuthorizedSshKeyRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminAddAuthorizedSshKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminAddAuthorizedSshKeyRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/setup/api/settings/authorized-keys";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminAddAuthorizedSshKeyResponse =
        new operations.EnterpriseAdminAddAuthorizedSshKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.sshKeys = utils.objectToClass(
              httpRes?.data,
              shared.SshKey,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a GitHub license
   *
   * @remarks
   * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.
   *
   * Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.
   *
   * When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:
   *
   * 1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.
   * 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.
   *
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#create-a-github-enterprise-server-license} - API method documentation
   */
  enterpriseAdminCreateEnterpriseServerLicense(
    req: operations.EnterpriseAdminCreateEnterpriseServerLicenseRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateEnterpriseServerLicenseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminCreateEnterpriseServerLicenseRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/api/start";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateEnterpriseServerLicenseResponse =
        new operations.EnterpriseAdminCreateEnterpriseServerLicenseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
      }

      return res;
    });
  }

  /**
   * Create a global webhook
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#create-a-global-webhook} - API method documentation
   */
  enterpriseAdminCreateGlobalWebhook(
    req: operations.EnterpriseAdminCreateGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreateGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/hooks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateGlobalWebhookResponse =
        new operations.EnterpriseAdminCreateGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalHook = utils.objectToClass(
              httpRes?.data,
              shared.GlobalHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an impersonation OAuth token
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#create-an-impersonation-oauth-token} - API method documentation
   */
  enterpriseAdminCreateImpersonationOAuthToken(
    req: operations.EnterpriseAdminCreateImpersonationOAuthTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreateImpersonationOAuthTokenRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/users/{username}/authorizations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse =
        new operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authorization = utils.objectToClass(
              httpRes?.data,
              shared.Authorization
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an organization
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#create-an-organization} - API method documentation
   */
  enterpriseAdminCreateOrg(
    req: operations.EnterpriseAdminCreateOrgRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreateOrgRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/organizations";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateOrgResponse =
        new operations.EnterpriseAdminCreateOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organizationSimple = utils.objectToClass(
              httpRes?.data,
              shared.OrganizationSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a pre-receive environment
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#create-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminCreatePreReceiveEnvironment(
    req: operations.EnterpriseAdminCreatePreReceiveEnvironmentRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminCreatePreReceiveEnvironmentRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin/pre-receive-environments";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironment = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a pre-receive hook
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#create-a-pre-receive-hook} - API method documentation
   */
  enterpriseAdminCreatePreReceiveHook(
    req: operations.EnterpriseAdminCreatePreReceiveHookRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreatePreReceiveHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreatePreReceiveHookRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/pre-receive-hooks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreatePreReceiveHookResponse =
        new operations.EnterpriseAdminCreatePreReceiveHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a user
   *
   * @remarks
   * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.
   *
   * The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.
   *
   * If the login name or email address is already associated with an account, the server will return a `422` response.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#create-a-user} - API method documentation
   */
  enterpriseAdminCreateUser(
    req: operations.EnterpriseAdminCreateUserRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreateUserRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/users";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateUserResponse =
        new operations.EnterpriseAdminCreateUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.simpleUser = utils.objectToClass(
              httpRes?.data,
              shared.SimpleUser
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a global webhook
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#delete-a-global-webhook} - API method documentation
   */
  enterpriseAdminDeleteGlobalWebhook(
    req: operations.EnterpriseAdminDeleteGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeleteGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeleteGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/hooks/{hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeleteGlobalWebhookResponse =
        new operations.EnterpriseAdminDeleteGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete an impersonation OAuth token
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token} - API method documentation
   */
  enterpriseAdminDeleteImpersonationOAuthToken(
    req: operations.EnterpriseAdminDeleteImpersonationOAuthTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeleteImpersonationOAuthTokenRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/users/{username}/authorizations",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse =
        new operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a personal access token
   *
   * @remarks
   * Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#delete-a-personal-access-token} - API method documentation
   */
  enterpriseAdminDeletePersonalAccessToken(
    req: operations.EnterpriseAdminDeletePersonalAccessTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeletePersonalAccessTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeletePersonalAccessTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/tokens/{token_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeletePersonalAccessTokenResponse =
        new operations.EnterpriseAdminDeletePersonalAccessTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a pre-receive environment
   *
   * @remarks
   * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * *   _Cannot modify or delete the default environment_
   * *   _Cannot delete environment that has hooks_
   * *   _Cannot delete environment when download is in progress_
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#delete-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminDeletePreReceiveEnvironment(
    req: operations.EnterpriseAdminDeletePreReceiveEnvironmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeletePreReceiveEnvironmentRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminDeletePreReceiveEnvironment422ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminDeletePreReceiveEnvironment422ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a pre-receive hook
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#delete-a-pre-receive-hook} - API method documentation
   */
  enterpriseAdminDeletePreReceiveHook(
    req: operations.EnterpriseAdminDeletePreReceiveHookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeletePreReceiveHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeletePreReceiveHookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeletePreReceiveHookResponse =
        new operations.EnterpriseAdminDeletePreReceiveHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a public key
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#delete-a-public-key} - API method documentation
   */
  enterpriseAdminDeletePublicKey(
    req: operations.EnterpriseAdminDeletePublicKeyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeletePublicKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeletePublicKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/keys/{key_ids}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeletePublicKeyResponse =
        new operations.EnterpriseAdminDeletePublicKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a user
   *
   * @remarks
   * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
   *
   * You can delete any user account except your own.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#delete-a-user} - API method documentation
   */
  enterpriseAdminDeleteUser(
    req: operations.EnterpriseAdminDeleteUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeleteUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeleteUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/users/{username}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeleteUserResponse =
        new operations.EnterpriseAdminDeleteUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Demote a site administrator
   *
   * @remarks
   * You can demote any user account except your own.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#demote-a-site-administrator} - API method documentation
   */
  enterpriseAdminDemoteSiteAdministrator(
    req: operations.EnterpriseAdminDemoteSiteAdministratorRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDemoteSiteAdministratorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDemoteSiteAdministratorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{username}/site_admin",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDemoteSiteAdministratorResponse =
        new operations.EnterpriseAdminDemoteSiteAdministratorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Enable or disable maintenance mode
   *
   * @remarks
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode} - API method documentation
   */
  enterpriseAdminEnableOrDisableMaintenanceMode(
    req: operations.EnterpriseAdminEnableOrDisableMaintenanceModeRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminEnableOrDisableMaintenanceModeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminEnableOrDisableMaintenanceModeRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/api/maintenance";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminEnableOrDisableMaintenanceModeResponse =
        new operations.EnterpriseAdminEnableOrDisableMaintenanceModeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.maintenanceStatus = utils.objectToClass(
              httpRes?.data,
              shared.MaintenanceStatus
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all authorized SSH keys
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-all-authorized-ssh-keys} - API method documentation
   */
  enterpriseAdminGetAllAuthorizedSshKeys(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetAllAuthorizedSshKeysResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/setup/api/settings/authorized-keys";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetAllAuthorizedSshKeysResponse =
        new operations.EnterpriseAdminGetAllAuthorizedSshKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.sshKeys = utils.objectToClass(
              httpRes?.data,
              shared.SshKey,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-statistics} - API method documentation
   */
  enterpriseAdminGetAllStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetAllStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/all";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetAllStatsResponse =
        new operations.EnterpriseAdminGetAllStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get comment statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-comment-statistics} - API method documentation
   */
  enterpriseAdminGetCommentStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetCommentStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/enterprise/stats/comments";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetCommentStatsResponse =
        new operations.EnterpriseAdminGetCommentStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseCommentOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseCommentOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the configuration status
   *
   * @remarks
   * This endpoint allows you to check the status of the most recent configuration process:
   *
   * Note that you may need to wait several seconds after you start a process before you can check its status.
   *
   * The different statuses are:
   *
   * | Status        | Description                       |
   * | ------------- | --------------------------------- |
   * | `PENDING`     | The job has not started yet       |
   * | `CONFIGURING` | The job is running                |
   * | `DONE`        | The job has finished correctly    |
   * | `FAILED`      | The job has finished unexpectedly |
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-the-configuration-status} - API method documentation
   */
  enterpriseAdminGetConfigurationStatus(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetConfigurationStatusResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/api/configcheck";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetConfigurationStatusResponse =
        new operations.EnterpriseAdminGetConfigurationStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configurationStatus = utils.objectToClass(
              httpRes?.data,
              shared.ConfigurationStatus
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the download status for a pre-receive environment
   *
   * @remarks
   * In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(
    req: operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironmentDownloadStatus = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironmentDownloadStatus
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a global webhook
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-a-global-webhook} - API method documentation
   */
  enterpriseAdminGetGlobalWebhook(
    req: operations.EnterpriseAdminGetGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/hooks/{hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetGlobalWebhookResponse =
        new operations.EnterpriseAdminGetGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalHook = utils.objectToClass(
              httpRes?.data,
              shared.GlobalHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get hooks statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-hooks-statistics} - API method documentation
   */
  enterpriseAdminGetHooksStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetHooksStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/hooks";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetHooksStatsResponse =
        new operations.EnterpriseAdminGetHooksStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseHookOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseHookOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get issue statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-issues-statistics} - API method documentation
   */
  enterpriseAdminGetIssueStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetIssueStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/issues";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetIssueStatsResponse =
        new operations.EnterpriseAdminGetIssueStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseIssueOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseIssueOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get license information
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-license-information} - API method documentation
   */
  enterpriseAdminGetLicenseInformation(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetLicenseInformationResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/enterprise/settings/license";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetLicenseInformationResponse =
        new operations.EnterpriseAdminGetLicenseInformationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseInfo = utils.objectToClass(
              httpRes?.data,
              shared.LicenseInfo
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the maintenance status
   *
   * @remarks
   * Check your installation's maintenance status:
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-the-maintenance-status} - API method documentation
   */
  enterpriseAdminGetMaintenanceStatus(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetMaintenanceStatusResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/api/maintenance";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetMaintenanceStatusResponse =
        new operations.EnterpriseAdminGetMaintenanceStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.maintenanceStatus = utils.objectToClass(
              httpRes?.data,
              shared.MaintenanceStatus
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get milestone statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-milestone-statistics} - API method documentation
   */
  enterpriseAdminGetMilestoneStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetMilestoneStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/enterprise/stats/milestones";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetMilestoneStatsResponse =
        new operations.EnterpriseAdminGetMilestoneStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseMilestoneOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseMilestoneOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get organization statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-organization-statistics} - API method documentation
   */
  enterpriseAdminGetOrgStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetOrgStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/orgs";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetOrgStatsResponse =
        new operations.EnterpriseAdminGetOrgStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseOrganizationOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseOrganizationOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get pages statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-pages-statistics} - API method documentation
   */
  enterpriseAdminGetPagesStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPagesStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/pages";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPagesStatsResponse =
        new operations.EnterpriseAdminGetPagesStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterprisePageOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterprisePageOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a pre-receive environment
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminGetPreReceiveEnvironment(
    req: operations.EnterpriseAdminGetPreReceiveEnvironmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetPreReceiveEnvironmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminGetPreReceiveEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironment = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a pre-receive hook
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-a-pre-receive-hook} - API method documentation
   */
  enterpriseAdminGetPreReceiveHook(
    req: operations.EnterpriseAdminGetPreReceiveHookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPreReceiveHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetPreReceiveHookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPreReceiveHookResponse =
        new operations.EnterpriseAdminGetPreReceiveHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a pre-receive hook for an organization
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization} - API method documentation
   */
  enterpriseAdminGetPreReceiveHookForOrg(
    req: operations.EnterpriseAdminGetPreReceiveHookForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPreReceiveHookForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetPreReceiveHookForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPreReceiveHookForOrgResponse =
        new operations.EnterpriseAdminGetPreReceiveHookForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orgPreReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.OrgPreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a pre-receive hook for a repository
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository} - API method documentation
   */
  enterpriseAdminGetPreReceiveHookForRepo(
    req: operations.EnterpriseAdminGetPreReceiveHookForRepoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPreReceiveHookForRepoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetPreReceiveHookForRepoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPreReceiveHookForRepoResponse =
        new operations.EnterpriseAdminGetPreReceiveHookForRepoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.repositoryPreReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.RepositoryPreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get pull request statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-pull-requests-statistics} - API method documentation
   */
  enterpriseAdminGetPullRequestStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPullRequestStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/pulls";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPullRequestStatsResponse =
        new operations.EnterpriseAdminGetPullRequestStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterprisePullRequestOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterprisePullRequestOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get repository statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-repository-statistics} - API method documentation
   */
  enterpriseAdminGetRepoStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetRepoStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/repos";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetRepoStatsResponse =
        new operations.EnterpriseAdminGetRepoStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseRepositoryOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseRepositoryOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get settings
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-settings} - API method documentation
   */
  enterpriseAdminGetSettings(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetSettingsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/api/settings";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetSettingsResponse =
        new operations.EnterpriseAdminGetSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseSettings = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseSettings
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get users statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-users-statistics} - API method documentation
   */
  enterpriseAdminGetUserStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetUserStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/users";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetUserStatsResponse =
        new operations.EnterpriseAdminGetUserStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseUserOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseUserOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List global webhooks
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#list-global-webhooks} - API method documentation
   */
  enterpriseAdminListGlobalWebhooks(
    req: operations.EnterpriseAdminListGlobalWebhooksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListGlobalWebhooksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListGlobalWebhooksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/hooks";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListGlobalWebhooksResponse =
        new operations.EnterpriseAdminListGlobalWebhooksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalHooks = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.globalHooks = utils.objectToClass(
              httpRes?.data,
              shared.GlobalHook,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List personal access tokens
   *
   * @remarks
   * Lists personal access tokens for all users, including admin users.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#list-personal-access-tokens} - API method documentation
   */
  enterpriseAdminListPersonalAccessTokens(
    req: operations.EnterpriseAdminListPersonalAccessTokensRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPersonalAccessTokensResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPersonalAccessTokensRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/tokens";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPersonalAccessTokensResponse =
        new operations.EnterpriseAdminListPersonalAccessTokensResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authorizations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.authorizations = utils.objectToClass(
              httpRes?.data,
              shared.Authorization,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List pre-receive environments
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#list-pre-receive-environments} - API method documentation
   */
  enterpriseAdminListPreReceiveEnvironments(
    req: operations.EnterpriseAdminListPreReceiveEnvironmentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPreReceiveEnvironmentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPreReceiveEnvironmentsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin/pre-receive-environments";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPreReceiveEnvironmentsResponse =
        new operations.EnterpriseAdminListPreReceiveEnvironmentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironments = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.preReceiveEnvironments = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironment,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List pre-receive hooks
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#list-pre-receive-hooks} - API method documentation
   */
  enterpriseAdminListPreReceiveHooks(
    req: operations.EnterpriseAdminListPreReceiveHooksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPreReceiveHooksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPreReceiveHooksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/pre-receive-hooks";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPreReceiveHooksResponse =
        new operations.EnterpriseAdminListPreReceiveHooksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveHooks = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.preReceiveHooks = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveHook,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List pre-receive hooks for an organization
   *
   * @remarks
   * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization} - API method documentation
   */
  enterpriseAdminListPreReceiveHooksForOrg(
    req: operations.EnterpriseAdminListPreReceiveHooksForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPreReceiveHooksForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPreReceiveHooksForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/pre-receive-hooks",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPreReceiveHooksForOrgResponse =
        new operations.EnterpriseAdminListPreReceiveHooksForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orgPreReceiveHooks = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.orgPreReceiveHooks = utils.objectToClass(
              httpRes?.data,
              shared.OrgPreReceiveHook,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List pre-receive hooks for a repository
   *
   * @remarks
   * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository} - API method documentation
   */
  enterpriseAdminListPreReceiveHooksForRepo(
    req: operations.EnterpriseAdminListPreReceiveHooksForRepoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPreReceiveHooksForRepoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPreReceiveHooksForRepoRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pre-receive-hooks",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPreReceiveHooksForRepoResponse =
        new operations.EnterpriseAdminListPreReceiveHooksForRepoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.repositoryPreReceiveHooks = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.repositoryPreReceiveHooks = utils.objectToClass(
              httpRes?.data,
              shared.RepositoryPreReceiveHook,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List public keys
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#list-public-keys} - API method documentation
   */
  enterpriseAdminListPublicKeys(
    req: operations.EnterpriseAdminListPublicKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPublicKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPublicKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/keys";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPublicKeysResponse =
        new operations.EnterpriseAdminListPublicKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publicKeyFulls = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.publicKeyFulls = utils.objectToClass(
              httpRes?.data,
              shared.PublicKeyFull,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Ping a global webhook
   *
   * @remarks
   * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.19/webhooks/#ping-event) to be sent to the webhook.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#ping-a-global-webhook} - API method documentation
   */
  enterpriseAdminPingGlobalWebhook(
    req: operations.EnterpriseAdminPingGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminPingGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminPingGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/hooks/{hook_id}/pings",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminPingGlobalWebhookResponse =
        new operations.EnterpriseAdminPingGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Promote a user to be a site administrator
   *
   * @remarks
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.19/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator} - API method documentation
   */
  enterpriseAdminPromoteUserToBeSiteAdministrator(
    req: operations.EnterpriseAdminPromoteUserToBeSiteAdministratorRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminPromoteUserToBeSiteAdministratorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminPromoteUserToBeSiteAdministratorRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{username}/site_admin",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminPromoteUserToBeSiteAdministratorResponse =
        new operations.EnterpriseAdminPromoteUserToBeSiteAdministratorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Remove an authorized SSH key
   *
   * @remarks
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#remove-an-authorized-ssh-key} - API method documentation
   */
  enterpriseAdminRemoveAuthorizedSshKey(
    req: operations.EnterpriseAdminRemoveAuthorizedSshKeyRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminRemoveAuthorizedSshKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminRemoveAuthorizedSshKeyRequestBody(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/setup/api/settings/authorized-keys";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminRemoveAuthorizedSshKeyResponse =
        new operations.EnterpriseAdminRemoveAuthorizedSshKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.sshKeys = utils.objectToClass(
              httpRes?.data,
              shared.SshKey,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove pre-receive hook enforcement for an organization
   *
   * @remarks
   * Removes any overrides for this hook at the org level for this org.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization} - API method documentation
   */
  enterpriseAdminRemovePreReceiveHookEnforcementForOrg(
    req: operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgResponse =
        new operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orgPreReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.OrgPreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove pre-receive hook enforcement for a repository
   *
   * @remarks
   * Deletes any overridden enforcement on this repository for the specified hook.
   *
   * Responds with effective values inherited from owner and/or global level.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository} - API method documentation
   */
  enterpriseAdminRemovePreReceiveHookEnforcementForRepo(
    req: operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoResponse =
        new operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.repositoryPreReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.RepositoryPreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Set settings
   *
   * @remarks
   * For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-settings).
   *
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#set-settings} - API method documentation
   */
  enterpriseAdminSetSettings(
    req: operations.EnterpriseAdminSetSettingsRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSetSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminSetSettingsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/api/settings";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSetSettingsResponse =
        new operations.EnterpriseAdminSetSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Start a configuration process
   *
   * @remarks
   * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#start-a-configuration-process} - API method documentation
   */
  enterpriseAdminStartConfigurationProcess(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminStartConfigurationProcessResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/api/configure";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminStartConfigurationProcessResponse =
        new operations.EnterpriseAdminStartConfigurationProcessResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
      }

      return res;
    });
  }

  /**
   * Start a pre-receive environment download
   *
   * @remarks
   * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
   *
   * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * * _Cannot modify or delete the default environment_
   * * _Can not start a new download when a download is in progress_
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#start-a-pre-receive-environment-download} - API method documentation
   */
  enterpriseAdminStartPreReceiveEnvironmentDownload(
    req: operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse =
        new operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironmentDownloadStatus = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironmentDownloadStatus
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Suspend a user
   *
   * @remarks
   * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
   *
   * You can suspend any user account except your own.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.19/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#suspend-a-user} - API method documentation
   */
  enterpriseAdminSuspendUser(
    req: operations.EnterpriseAdminSuspendUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSuspendUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminSuspendUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{username}/suspended",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSuspendUserResponse =
        new operations.EnterpriseAdminSuspendUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Sync LDAP mapping for a team
   *
   * @remarks
   * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team} - API method documentation
   */
  enterpriseAdminSyncLdapMappingForTeam(
    req: operations.EnterpriseAdminSyncLdapMappingForTeamRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSyncLdapMappingForTeamResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminSyncLdapMappingForTeamRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/ldap/teams/{team_id}/sync",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSyncLdapMappingForTeamResponse =
        new operations.EnterpriseAdminSyncLdapMappingForTeamResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminSyncLdapMappingForTeam201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminSyncLdapMappingForTeam201ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sync LDAP mapping for a user
   *
   * @remarks
   * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user} - API method documentation
   */
  enterpriseAdminSyncLdapMappingForUser(
    req: operations.EnterpriseAdminSyncLdapMappingForUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSyncLdapMappingForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminSyncLdapMappingForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/ldap/users/{username}/sync",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSyncLdapMappingForUserResponse =
        new operations.EnterpriseAdminSyncLdapMappingForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminSyncLdapMappingForUser201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminSyncLdapMappingForUser201ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unsuspend a user
   *
   * @remarks
   * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#unsuspend-a-user} - API method documentation
   */
  enterpriseAdminUnsuspendUser(
    req: operations.EnterpriseAdminUnsuspendUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUnsuspendUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUnsuspendUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{username}/suspended",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUnsuspendUserResponse =
        new operations.EnterpriseAdminUnsuspendUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Update a global webhook
   *
   * @remarks
   * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-a-global-webhook} - API method documentation
   */
  enterpriseAdminUpdateGlobalWebhook(
    req: operations.EnterpriseAdminUpdateGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdateGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdateGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/hooks/{hook_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdateGlobalWebhookResponse =
        new operations.EnterpriseAdminUpdateGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalHook2 = utils.objectToClass(
              httpRes?.data,
              shared.GlobalHook2
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update LDAP mapping for a team
   *
   * @remarks
   * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://help.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@2.19/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
   *
   * If you pass the `hellcat-preview` media type, you can also update the LDAP mapping of a child team.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team} - API method documentation
   */
  enterpriseAdminUpdateLdapMappingForTeam(
    req: operations.EnterpriseAdminUpdateLdapMappingForTeamRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdateLdapMappingForTeamResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdateLdapMappingForTeamRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/ldap/teams/{team_id}/mapping",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdateLdapMappingForTeamResponse =
        new operations.EnterpriseAdminUpdateLdapMappingForTeamResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ldapMappingTeam = utils.objectToClass(
              httpRes?.data,
              shared.LdapMappingTeam
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update LDAP mapping for a user
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user} - API method documentation
   */
  enterpriseAdminUpdateLdapMappingForUser(
    req: operations.EnterpriseAdminUpdateLdapMappingForUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdateLdapMappingForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdateLdapMappingForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/ldap/users/{username}/mapping",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdateLdapMappingForUserResponse =
        new operations.EnterpriseAdminUpdateLdapMappingForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ldapMappingUser = utils.objectToClass(
              httpRes?.data,
              shared.LdapMappingUser
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an organization name
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-an-organization-name} - API method documentation
   */
  enterpriseAdminUpdateOrgName(
    req: operations.EnterpriseAdminUpdateOrgNameRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdateOrgNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdateOrgNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/organizations/{org}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdateOrgNameResponse =
        new operations.EnterpriseAdminUpdateOrgNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminUpdateOrgName202ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminUpdateOrgName202ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a pre-receive environment
   *
   * @remarks
   * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminUpdatePreReceiveEnvironment(
    req: operations.EnterpriseAdminUpdatePreReceiveEnvironmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdatePreReceiveEnvironmentRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironment = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironment
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a pre-receive hook
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-a-pre-receive-hook} - API method documentation
   */
  enterpriseAdminUpdatePreReceiveHook(
    req: operations.EnterpriseAdminUpdatePreReceiveHookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdatePreReceiveHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdatePreReceiveHookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdatePreReceiveHookResponse =
        new operations.EnterpriseAdminUpdatePreReceiveHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update pre-receive hook enforcement for an organization
   *
   * @remarks
   * For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization} - API method documentation
   */
  enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(
    req: operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgResponse =
        new operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orgPreReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.OrgPreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update pre-receive hook enforcement for a repository
   *
   * @remarks
   * For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository} - API method documentation
   */
  enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(
    req: operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse =
        new operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.repositoryPreReceiveHook = utils.objectToClass(
              httpRes?.data,
              shared.RepositoryPreReceiveHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the username for a user
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-the-username-for-a-user} - API method documentation
   */
  enterpriseAdminUpdateUsernameForUser(
    req: operations.EnterpriseAdminUpdateUsernameForUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdateUsernameForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdateUsernameForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/users/{username}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdateUsernameForUserResponse =
        new operations.EnterpriseAdminUpdateUsernameForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminUpdateUsernameForUser202ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminUpdateUsernameForUser202ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upgrade a license
   *
   * @remarks
   * This API upgrades your license and also triggers the configuration process.
   *
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#upgrade-a-license} - API method documentation
   */
  enterpriseAdminUpgradeLicense(
    req: operations.EnterpriseAdminUpgradeLicenseRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpgradeLicenseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpgradeLicenseRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/api/upgrade";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpgradeLicenseResponse =
        new operations.EnterpriseAdminUpgradeLicenseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
      }

      return res;
    });
  }

  /**
   * Get gist statistics
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-gist-statistics} - API method documentation
   */
  getEnterpriseStatsGists(
    config?: AxiosRequestConfig
  ): Promise<operations.GetEnterpriseStatsGistsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/gists";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEnterpriseStatsGistsResponse =
        new operations.GetEnterpriseStatsGistsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseGistOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseGistOverview
            );
          }
          break;
      }

      return res;
    });
  }
}
