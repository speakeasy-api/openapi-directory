// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type APIKeyResponseCodeEnum string

const (
	APIKeyResponseCodeEnumTwoThousand APIKeyResponseCodeEnum = "2000"
)

func (e *APIKeyResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = APIKeyResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyResponseCodeEnum: %s", s)
	}
}

type APIKeyResponseMessageEnum string

const (
	APIKeyResponseMessageEnumSuccess APIKeyResponseMessageEnum = "Success"
)

func (e *APIKeyResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = APIKeyResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyResponseMessageEnum: %s", s)
	}
}

// APIKeyResponse - Success
type APIKeyResponse struct {
	Code    APIKeyResponseCodeEnum    `json:"code"`
	Message APIKeyResponseMessageEnum `json:"message"`
	Result  APIKey                    `json:"result"`
}
