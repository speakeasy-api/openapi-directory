/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class OrgInvitationsAcceptSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class OrgInvitationsAcceptRequest extends SpeakeasyBase {
  /**
   * allow empty body for custom http-client lib
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: Record<string, any>;

  /**
   * The app invitation token that was sent to the user
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=invitation_token",
  })
  invitationToken: string;
}

export enum OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class OrgInvitationsAcceptDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error
 */
export class OrgInvitationsAcceptDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => OrgInvitationsAcceptDefaultApplicationJSONError)
  error: OrgInvitationsAcceptDefaultApplicationJSONError;
}

export class OrgInvitationsAcceptResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Error
   */
  @SpeakeasyMetadata()
  orgInvitationsAcceptDefaultApplicationJSONObject?: OrgInvitationsAcceptDefaultApplicationJSON;
}
