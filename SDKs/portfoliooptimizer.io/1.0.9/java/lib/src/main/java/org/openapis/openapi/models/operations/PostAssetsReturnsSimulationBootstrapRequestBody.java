/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PostAssetsReturnsSimulationBootstrapRequestBody {
    @JsonProperty("assets")
    public PostAssetsReturnsSimulationBootstrapRequestBodyAssets[] assets;

    public PostAssetsReturnsSimulationBootstrapRequestBody withAssets(PostAssetsReturnsSimulationBootstrapRequestBodyAssets[] assets) {
        this.assets = assets;
        return this;
    }
    
    /**
     * The average length of the blocks to use in case the bootstrap method is 'stationaryBlock', in time periods; if not provided, defaults to the inverse of 3.15 * the common length of the assetReturns arrays^1/3
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootstrapAverageBlockLength")
    public Double bootstrapAverageBlockLength;

    public PostAssetsReturnsSimulationBootstrapRequestBody withBootstrapAverageBlockLength(Double bootstrapAverageBlockLength) {
        this.bootstrapAverageBlockLength = bootstrapAverageBlockLength;
        return this;
    }
    
    /**
     * The length of the blocks to use in case the bootstrap method is 'circularBlock', in time periods; if not provided, defaults to [3.15 * the common length of the assetReturns arrays^1/3]
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootstrapBlockLength")
    public Long bootstrapBlockLength;

    public PostAssetsReturnsSimulationBootstrapRequestBody withBootstrapBlockLength(Long bootstrapBlockLength) {
        this.bootstrapBlockLength = bootstrapBlockLength;
        return this;
    }
    
    /**
     * The bootstrap method to use
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootstrapMethod")
    public PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum bootstrapMethod;

    public PostAssetsReturnsSimulationBootstrapRequestBody withBootstrapMethod(PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum bootstrapMethod) {
        this.bootstrapMethod = bootstrapMethod;
        return this;
    }
    
    /**
     * The number of simulations to perform
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simulations")
    public Long simulations;

    public PostAssetsReturnsSimulationBootstrapRequestBody withSimulations(Long simulations) {
        this.simulations = simulations;
        return this;
    }
    
    /**
     * The number of time period(s) to simulate per simulation; if not provided, defaults to the common length of the assetReturns arrays
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simulationsLength")
    public Long simulationsLength;

    public PostAssetsReturnsSimulationBootstrapRequestBody withSimulationsLength(Long simulationsLength) {
        this.simulationsLength = simulationsLength;
        return this;
    }
    
    public PostAssetsReturnsSimulationBootstrapRequestBody(@JsonProperty("assets") PostAssetsReturnsSimulationBootstrapRequestBodyAssets[] assets) {
        this.assets = assets;
  }
}
