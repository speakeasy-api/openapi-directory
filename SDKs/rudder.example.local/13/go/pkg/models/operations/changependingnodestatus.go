// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ChangePendingNodeStatusPathParams struct {
	// Id of the target node
	NodeID string `pathParam:"style=simple,explode=false,name=nodeId"`
}

// ChangePendingNodeStatusRequestBodyStatusEnum - New status of the pending node
type ChangePendingNodeStatusRequestBodyStatusEnum string

const (
	ChangePendingNodeStatusRequestBodyStatusEnumAccepted ChangePendingNodeStatusRequestBodyStatusEnum = "accepted"
	ChangePendingNodeStatusRequestBodyStatusEnumRefused  ChangePendingNodeStatusRequestBodyStatusEnum = "refused"
)

func (e *ChangePendingNodeStatusRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accepted":
		fallthrough
	case "refused":
		*e = ChangePendingNodeStatusRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChangePendingNodeStatusRequestBodyStatusEnum: %s", s)
	}
}

type ChangePendingNodeStatusRequestBody struct {
	// New status of the pending node
	Status *ChangePendingNodeStatusRequestBodyStatusEnum `json:"status,omitempty"`
}

type ChangePendingNodeStatusRequest struct {
	PathParams ChangePendingNodeStatusPathParams
	Request    *ChangePendingNodeStatusRequestBody `request:"mediaType=application/json"`
}

// ChangePendingNodeStatus200ApplicationJSONActionEnum - The id of the action
type ChangePendingNodeStatus200ApplicationJSONActionEnum string

const (
	ChangePendingNodeStatus200ApplicationJSONActionEnumChangePendingNodeStatus ChangePendingNodeStatus200ApplicationJSONActionEnum = "changePendingNodeStatus"
)

func (e *ChangePendingNodeStatus200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "changePendingNodeStatus":
		*e = ChangePendingNodeStatus200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChangePendingNodeStatus200ApplicationJSONActionEnum: %s", s)
	}
}

// ChangePendingNodeStatus200ApplicationJSONData - Information about the node
type ChangePendingNodeStatus200ApplicationJSONData struct {
	Nodes []shared.NodeFull `json:"nodes"`
}

// ChangePendingNodeStatus200ApplicationJSONResultEnum - Result of the request
type ChangePendingNodeStatus200ApplicationJSONResultEnum string

const (
	ChangePendingNodeStatus200ApplicationJSONResultEnumSuccess ChangePendingNodeStatus200ApplicationJSONResultEnum = "success"
	ChangePendingNodeStatus200ApplicationJSONResultEnumError   ChangePendingNodeStatus200ApplicationJSONResultEnum = "error"
)

func (e *ChangePendingNodeStatus200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ChangePendingNodeStatus200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChangePendingNodeStatus200ApplicationJSONResultEnum: %s", s)
	}
}

// ChangePendingNodeStatus200ApplicationJSON - Nodes
type ChangePendingNodeStatus200ApplicationJSON struct {
	// The id of the action
	Action ChangePendingNodeStatus200ApplicationJSONActionEnum `json:"action"`
	// Information about the node
	Data ChangePendingNodeStatus200ApplicationJSONData `json:"data"`
	// Result of the request
	Result ChangePendingNodeStatus200ApplicationJSONResultEnum `json:"result"`
}

type ChangePendingNodeStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Nodes
	ChangePendingNodeStatus200ApplicationJSONObject *ChangePendingNodeStatus200ApplicationJSON
}
