"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import gatewaycapabilitysummary as shared_gatewaycapabilitysummary
from ..shared import gatewayplatform as shared_gatewayplatform
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GatewaySummary:
    r"""Contains a summary of a gateway."""
    
    creation_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    gateway_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayId') }})  
    gateway_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayName') }})  
    last_update_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdateDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    gateway_capability_summaries: Optional[list[shared_gatewaycapabilitysummary.GatewayCapabilitySummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayCapabilitySummaries'), 'exclude': lambda f: f is None }})  
    gateway_platform: Optional[shared_gatewayplatform.GatewayPlatform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayPlatform'), 'exclude': lambda f: f is None }})
    r"""Contains a gateway's platform information."""  
    