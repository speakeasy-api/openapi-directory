"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Docs:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_doc(self, request: operations.CreateDocRequest, security: operations.CreateDocSecurity) -> operations.CreateDocResponse:
        r"""Create doc
        Create a new doc inside of this project
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/docs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "doc", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDocResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_doc(self, request: operations.DeleteDocRequest, security: operations.DeleteDocSecurity) -> operations.DeleteDocResponse:
        r"""Delete doc
        Delete the doc with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDocRequest, base_url, '/docs/{slug}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDocResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_doc(self, request: operations.GetDocRequest, security: operations.GetDocSecurity) -> operations.GetDocResponse:
        r"""Get doc
        Returns the doc with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocRequest, base_url, '/docs/{slug}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def search_docs(self, request: operations.SearchDocsRequest, security: operations.SearchDocsSecurity) -> operations.SearchDocsResponse:
        r"""Search docs
        Returns all docs that match the search
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/docs/search'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.SearchDocsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchDocsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_doc(self, request: operations.UpdateDocRequest, security: operations.UpdateDocSecurity) -> operations.UpdateDocResponse:
        r"""Update doc
        Update a doc with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDocRequest, base_url, '/docs/{slug}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "doc", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDocResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    