// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AssignmentCanvas - A Canvas LMS assignment
type AssignmentCanvas struct {
	// Link to Canvas assignment
	AlternateLink *string `json:"alternateLink,omitempty"`
	// Unique identifier of the course on Canvas assignment
	ID *string `json:"id,omitempty"`
}

// AssignmentLti - An LTI assignment
type AssignmentLti struct {
	// Resource ID in the LMS
	ID *string `json:"id,omitempty"`
}

// AssignmentMfc - A MusicFirst Classroom assignment
type AssignmentMfc struct {
	// Link to MusicFirst Classroom task
	AlternateLink *string `json:"alternateLink,omitempty"`
	// Unique identifier of the course on MusicFirst Task
	ID *string `json:"id,omitempty"`
}

// AssignmentStateEnum - State of the assignment
type AssignmentStateEnum string

const (
	AssignmentStateEnumDraft    AssignmentStateEnum = "draft"
	AssignmentStateEnumActive   AssignmentStateEnum = "active"
	AssignmentStateEnumArchived AssignmentStateEnum = "archived"
)

func (e AssignmentStateEnum) ToPointer() *AssignmentStateEnum {
	return &e
}

func (e *AssignmentStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "active":
		fallthrough
	case "archived":
		*e = AssignmentStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssignmentStateEnum: %v", v)
	}
}

// Assignment - Assignment details
type Assignment struct {
	Attachments []MediaAttachment `json:"attachments,omitempty"`
	// A Canvas LMS assignment
	Canvas *AssignmentCanvas `json:"canvas,omitempty"`
	// The unique identifier of the class where this assignment was posted
	Classroom *string `json:"classroom,omitempty"`
	// The URL of the cover to display
	Cover *string `json:"cover,omitempty"`
	// The id of the cover to display
	CoverFile *string `json:"coverFile,omitempty"`
	// The creation date of this assignment
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// The User unique identifier of the creator of this assignment
	//
	Creator *string `json:"creator,omitempty"`
	// Description and content of the assignment
	Description *string `json:"description,omitempty"`
	// The due date of this assignment, late submissions will be marked as
	// paste due.
	//
	DueDate *time.Time `json:"dueDate,omitempty"`
	// A coursework on Google Classroom
	GoogleClassroom *GoogleClassroomCoursework `json:"googleClassroom,omitempty"`
	// An LTI assignment
	Lti *AssignmentLti `json:"lti,omitempty"`
	// If set, the grading will be enabled for the assignement
	//
	MaxPoints *float64 `json:"maxPoints,omitempty"`
	// A MusicFirst Classroom assignment
	Mfc *AssignmentMfc `json:"mfc,omitempty"`
	// A Microsoft Teams asignment
	MicrosoftGraph *MicrosoftGraphAssignment `json:"microsoftGraph,omitempty"`
	// The publication (scheduled) date of the assignment.
	// If this one is specified, the assignment will only be listed to the teachers of the class.
	//
	ScheduledDate *time.Time `json:"scheduledDate,omitempty"`
	// State of the assignment
	State       *AssignmentStateEnum   `json:"state,omitempty"`
	Submissions []AssignmentSubmission `json:"submissions,omitempty"`
	// Title of the assignment
	Title *string `json:"title,omitempty"`
	// Type of the assignment
	Type *AssignmentTypeEnum `json:"type,omitempty"`
}
