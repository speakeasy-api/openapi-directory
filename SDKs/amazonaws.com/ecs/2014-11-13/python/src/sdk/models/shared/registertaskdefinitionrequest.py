"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compatibility_enum as shared_compatibility_enum
from ..shared import containerdefinition as shared_containerdefinition
from ..shared import ephemeralstorage as shared_ephemeralstorage
from ..shared import inferenceaccelerator as shared_inferenceaccelerator
from ..shared import ipcmode_enum as shared_ipcmode_enum
from ..shared import networkmode_enum as shared_networkmode_enum
from ..shared import pidmode_enum as shared_pidmode_enum
from ..shared import proxyconfiguration as shared_proxyconfiguration
from ..shared import runtimeplatform as shared_runtimeplatform
from ..shared import tag as shared_tag
from ..shared import taskdefinitionplacementconstraint as shared_taskdefinitionplacementconstraint
from ..shared import volume as shared_volume
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RegisterTaskDefinitionRequest:
    
    container_definitions: list[shared_containerdefinition.ContainerDefinition] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerDefinitions') }})  
    family: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('family') }})  
    cpu: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpu'), 'exclude': lambda f: f is None }})  
    ephemeral_storage: Optional[shared_ephemeralstorage.EphemeralStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ephemeralStorage'), 'exclude': lambda f: f is None }})  
    execution_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionRoleArn'), 'exclude': lambda f: f is None }})  
    inference_accelerators: Optional[list[shared_inferenceaccelerator.InferenceAccelerator]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inferenceAccelerators'), 'exclude': lambda f: f is None }})  
    ipc_mode: Optional[shared_ipcmode_enum.IpcModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipcMode'), 'exclude': lambda f: f is None }})  
    memory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory'), 'exclude': lambda f: f is None }})  
    network_mode: Optional[shared_networkmode_enum.NetworkModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkMode'), 'exclude': lambda f: f is None }})  
    pid_mode: Optional[shared_pidmode_enum.PidModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pidMode'), 'exclude': lambda f: f is None }})  
    placement_constraints: Optional[list[shared_taskdefinitionplacementconstraint.TaskDefinitionPlacementConstraint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placementConstraints'), 'exclude': lambda f: f is None }})  
    proxy_configuration: Optional[shared_proxyconfiguration.ProxyConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxyConfiguration'), 'exclude': lambda f: f is None }})  
    requires_compatibilities: Optional[list[shared_compatibility_enum.CompatibilityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiresCompatibilities'), 'exclude': lambda f: f is None }})  
    runtime_platform: Optional[shared_runtimeplatform.RuntimePlatform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtimePlatform'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    task_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskRoleArn'), 'exclude': lambda f: f is None }})  
    volumes: Optional[list[shared_volume.Volume]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumes'), 'exclude': lambda f: f is None }})  
    