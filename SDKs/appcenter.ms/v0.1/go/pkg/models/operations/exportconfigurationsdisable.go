// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ExportConfigurationsDisableSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ExportConfigurationsDisableRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the export configuration.
	ExportConfigurationID string `pathParam:"style=simple,explode=false,name=export_configuration_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum string

const (
	ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnumBadRequest          ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnumConflict            ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnumNotAcceptable       ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnumNotFound            ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnumInternalServerError ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnumUnauthorized        ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnumTooManyRequests     ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ExportConfigurationsDisableDefaultApplicationJSONError struct {
	Code    ExportConfigurationsDisableDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                         `json:"message"`
}

// ExportConfigurationsDisableDefaultApplicationJSON - Error code with reason
type ExportConfigurationsDisableDefaultApplicationJSON struct {
	Error ExportConfigurationsDisableDefaultApplicationJSONError `json:"error"`
}

type ExportConfigurationsDisableResponse struct {
	ContentType string
	// Error code with reason
	ExportConfigurationsDisableDefaultApplicationJSONObject *ExportConfigurationsDisableDefaultApplicationJSON
	StatusCode                                              int
	RawResponse                                             *http.Response
}
