// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableDeviceWithConfigContextRackFaceEnum string

const (
	WritableDeviceWithConfigContextRackFaceEnumFront WritableDeviceWithConfigContextRackFaceEnum = "front"
	WritableDeviceWithConfigContextRackFaceEnumRear  WritableDeviceWithConfigContextRackFaceEnum = "rear"
)

func (e *WritableDeviceWithConfigContextRackFaceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "front":
		fallthrough
	case "rear":
		*e = WritableDeviceWithConfigContextRackFaceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceWithConfigContextRackFaceEnum: %s", s)
	}
}

type WritableDeviceWithConfigContextStatusEnum string

const (
	WritableDeviceWithConfigContextStatusEnumOffline         WritableDeviceWithConfigContextStatusEnum = "offline"
	WritableDeviceWithConfigContextStatusEnumActive          WritableDeviceWithConfigContextStatusEnum = "active"
	WritableDeviceWithConfigContextStatusEnumPlanned         WritableDeviceWithConfigContextStatusEnum = "planned"
	WritableDeviceWithConfigContextStatusEnumStaged          WritableDeviceWithConfigContextStatusEnum = "staged"
	WritableDeviceWithConfigContextStatusEnumFailed          WritableDeviceWithConfigContextStatusEnum = "failed"
	WritableDeviceWithConfigContextStatusEnumInventory       WritableDeviceWithConfigContextStatusEnum = "inventory"
	WritableDeviceWithConfigContextStatusEnumDecommissioning WritableDeviceWithConfigContextStatusEnum = "decommissioning"
)

func (e *WritableDeviceWithConfigContextStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "offline":
		fallthrough
	case "active":
		fallthrough
	case "planned":
		fallthrough
	case "staged":
		fallthrough
	case "failed":
		fallthrough
	case "inventory":
		fallthrough
	case "decommissioning":
		*e = WritableDeviceWithConfigContextStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceWithConfigContextStatusEnum: %s", s)
	}
}

type WritableDeviceWithConfigContextInput struct {
	// A unique tag used to identify this device
	AssetTag         *string                                      `json:"asset_tag,omitempty"`
	Cluster          *int64                                       `json:"cluster,omitempty"`
	Comments         *string                                      `json:"comments,omitempty"`
	CustomFields     map[string]interface{}                       `json:"custom_fields,omitempty"`
	DeviceRole       int64                                        `json:"device_role"`
	DeviceType       int64                                        `json:"device_type"`
	Face             *WritableDeviceWithConfigContextRackFaceEnum `json:"face,omitempty"`
	LocalContextData *string                                      `json:"local_context_data,omitempty"`
	Name             *string                                      `json:"name,omitempty"`
	ParentDevice     *NestedDeviceInput                           `json:"parent_device,omitempty"`
	Platform         *int64                                       `json:"platform,omitempty"`
	// The lowest-numbered unit occupied by the device
	Position       *int64                                     `json:"position,omitempty"`
	PrimaryIp4     *int64                                     `json:"primary_ip4,omitempty"`
	PrimaryIp6     *int64                                     `json:"primary_ip6,omitempty"`
	Rack           *int64                                     `json:"rack,omitempty"`
	Serial         *string                                    `json:"serial,omitempty"`
	Site           int64                                      `json:"site"`
	Status         *WritableDeviceWithConfigContextStatusEnum `json:"status,omitempty"`
	Tags           []string                                   `json:"tags,omitempty"`
	Tenant         *int64                                     `json:"tenant,omitempty"`
	VcPosition     *int64                                     `json:"vc_position,omitempty"`
	VcPriority     *int64                                     `json:"vc_priority,omitempty"`
	VirtualChassis *int64                                     `json:"virtual_chassis,omitempty"`
}
