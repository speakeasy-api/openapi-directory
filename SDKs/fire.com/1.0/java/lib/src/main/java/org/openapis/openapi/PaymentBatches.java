/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.
 * 
 * For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.
 * 
 * 
 * The process is as follows:
 * 
 * **1.**Create a new batch
 * 
 * **2.**Add payments to the batch
 * 
 * **3.**Submit the batch for approval
 * 
 * Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.
 * 
 * **Batch Life Cycle Events**
 * 
 * A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.
 * 
 * The following events are triggered during a batch:
 * 
 * **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.
 * 
 * **batch.item-added:** Details of the item added to the batch
 * 
 * **batch.item-removed:** Details of the item removed from the batch
 * 
 * **batch.cancelled:** Notifies that the batch was cancelled.
 * 
 * **batch.submitted:** Notifes that the batch was submitted
 * 
 * **batch.approved:** Notifies that the batch was approved.
 * 
 * **batch.rejected:** Notifies that the batch was rejected.
 * 
 * **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)
 * 
 * **batch.completed:** Notifies that the batch completed successfully. Includes a summary.
 * 
 * Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.
 * 
 */
public class PaymentBatches {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public PaymentBatches(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Add a bank transfer payment to the batch.
     * There are two ways to process bank transfers - by Payee ID (**Mode 1**) or by Payee Account Details (**Mode 2**).
     * 
     * **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.
     * 
     * **Mode 2:** Use the account details of the payee. In the event that these details correspond to an existing approved payee, the batch can be approved as normal. If the account details are new, a batch of New Payees will automatically be created. This batch will need to be approved before the Payment batch can be approved. These payees will then exist as approved payees for future batches.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddBankTransferBatchPaymentResponse addBankTransferBatchPayment(org.openapis.openapi.models.operations.AddBankTransferBatchPaymentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AddBankTransferBatchPaymentRequest.class, baseUrl, "/v1/batches/{batchUuid}/banktransfers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddBankTransferBatchPaymentResponse res = new org.openapis.openapi.models.operations.AddBankTransferBatchPaymentResponse() {{
            newBatchItemResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddBankTransferBatchPaymentNewBatchItemResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddBankTransferBatchPaymentNewBatchItemResponse.class);
                res.newBatchItemResponse = out;
            }
        }

        return res;
    }

    /**
     * Add an internal transfer payment to the batch
     * Simply specify the source account, destination account, amount and a reference.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddInternalTransferBatchPaymentResponse addInternalTransferBatchPayment(org.openapis.openapi.models.operations.AddInternalTransferBatchPaymentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AddInternalTransferBatchPaymentRequest.class, baseUrl, "/v1/batches/{batchUuid}/internaltransfers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddInternalTransferBatchPaymentResponse res = new org.openapis.openapi.models.operations.AddInternalTransferBatchPaymentResponse() {{
            newBatchItemResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddInternalTransferBatchPaymentNewBatchItemResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddInternalTransferBatchPaymentNewBatchItemResponse.class);
                res.newBatchItemResponse = out;
            }
        }

        return res;
    }

    /**
     * Cancel a batch
     * Cancels the Batch. You can only cancel a batch before it is submitted for approval (while it is in the OPEN state).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CancelBatchPaymentResponse cancelBatchPayment(org.openapis.openapi.models.operations.CancelBatchPaymentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CancelBatchPaymentRequest.class, baseUrl, "/v1/batches/{batchUuid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CancelBatchPaymentResponse res = new org.openapis.openapi.models.operations.CancelBatchPaymentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Create a new batch of payments
     * The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.
     * 
     * For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.
     * 
     * 
     * The process is as follows:
     * 
     * **1.**Create a new batch
     * 
     * **2.**Add payments to the batch
     * 
     * **3.**Submit the batch for approval
     * 
     * Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.
     * 
     * **Batch Life Cycle Events**
     * 
     * A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.
     * 
     * The following events are triggered during a batch:
     * 
     * **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.
     * 
     * **batch.item-added:** Details of the item added to the batch
     * 
     * **batch.item-removed:** Details of the item removed from the batch
     * 
     * **batch.cancelled:** Notifies that the batch was cancelled.
     * 
     * **batch.submitted:** Notifes that the batch was submitted
     * 
     * **batch.approved:** Notifies that the batch was approved.
     * 
     * **batch.rejected:** Notifies that the batch was rejected.
     * 
     * **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)
     * 
     * **batch.completed:** Notifies that the batch completed successfully. Includes a summary.
     * 
     * Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.
     * 
     * This is the first step in creating a batch payment.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBatchPaymentResponse createBatchPayment(org.openapis.openapi.models.operations.CreateBatchPaymentNewBatch request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/batches");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBatchPaymentResponse res = new org.openapis.openapi.models.operations.CreateBatchPaymentResponse() {{
            newBatchResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateBatchPaymentNewBatchResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateBatchPaymentNewBatchResponse.class);
                res.newBatchResponse = out;
            }
        }

        return res;
    }

    /**
     * Remove a Payment from the Batch (Bank Transfers)
     * Removes a Payment from the Batch (Bank Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteBankTransferBatchPaymentResponse deleteBankTransferBatchPayment(org.openapis.openapi.models.operations.DeleteBankTransferBatchPaymentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteBankTransferBatchPaymentRequest.class, baseUrl, "/v1/batches/{batchUuid}/banktransfers/{itemUuid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteBankTransferBatchPaymentResponse res = new org.openapis.openapi.models.operations.DeleteBankTransferBatchPaymentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Remove a Payment from the Batch (Internal Transfer)
     * Removes a Payment from the Batch (Internal Transfer). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteInternalTransferBatchPaymentResponse deleteInternalTransferBatchPayment(org.openapis.openapi.models.operations.DeleteInternalTransferBatchPaymentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteInternalTransferBatchPaymentRequest.class, baseUrl, "/v1/batches/{batchUuid}/internaltransfers/{itemUuid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteInternalTransferBatchPaymentResponse res = new org.openapis.openapi.models.operations.DeleteInternalTransferBatchPaymentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * List batches
     * Returns the list of batch with the specified types and statuses.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBatchesResponse getBatches(org.openapis.openapi.models.operations.GetBatchesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/batches");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBatchesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBatchesResponse res = new org.openapis.openapi.models.operations.GetBatchesResponse() {{
            batchItems = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBatchesBatchItems out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBatchesBatchItems.class);
                res.batchItems = out;
            }
        }

        return res;
    }

    /**
     * Get details of a single Batch
     * Returns the details of the batch specified in the API endpoint - {batchUuid}.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDetailsSingleBatchResponse getDetailsSingleBatch(org.openapis.openapi.models.operations.GetDetailsSingleBatchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDetailsSingleBatchRequest.class, baseUrl, "/v1/batches/{batchUuid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDetailsSingleBatchResponse res = new org.openapis.openapi.models.operations.GetDetailsSingleBatchResponse() {{
            batch = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetDetailsSingleBatchBatch out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetDetailsSingleBatchBatch.class);
                res.batch = out;
            }
        }

        return res;
    }

    /**
     * List items in a Batch
     * Returns a paginated list of items in the specified batch.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetItemsBatchBankTransferResponse getItemsBatchBankTransfer(org.openapis.openapi.models.operations.GetItemsBatchBankTransferRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetItemsBatchBankTransferRequest.class, baseUrl, "/v1/batches/{batchUuid}/banktransfers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetItemsBatchBankTransferRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetItemsBatchBankTransferResponse res = new org.openapis.openapi.models.operations.GetItemsBatchBankTransferResponse() {{
            batchItems = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetItemsBatchBankTransferBatchItems out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetItemsBatchBankTransferBatchItems.class);
                res.batchItems = out;
            }
        }

        return res;
    }

    /**
     * List items in a Batch
     * Returns a paginated list of items in the specified batch.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetItemsBatchInternalTrasnferResponse getItemsBatchInternalTrasnfer(org.openapis.openapi.models.operations.GetItemsBatchInternalTrasnferRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetItemsBatchInternalTrasnferRequest.class, baseUrl, "/v1/batches/{batchUuid}/internaltransfers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetItemsBatchInternalTrasnferRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetItemsBatchInternalTrasnferResponse res = new org.openapis.openapi.models.operations.GetItemsBatchInternalTrasnferResponse() {{
            batchItems = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetItemsBatchInternalTrasnferBatchItems out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetItemsBatchInternalTrasnferBatchItems.class);
                res.batchItems = out;
            }
        }

        return res;
    }

    /**
     * List Approvers for a Batch
     * Returns a list of approvers for this batch.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetListofApproversForBatchResponse getListofApproversForBatch(org.openapis.openapi.models.operations.GetListofApproversForBatchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetListofApproversForBatchRequest.class, baseUrl, "/v1/batches/{batchUuid}/approvals", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetListofApproversForBatchResponse res = new org.openapis.openapi.models.operations.GetListofApproversForBatchResponse() {{
            batchApprovers = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetListofApproversForBatchBatchApprovers out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetListofApproversForBatchBatchApprovers.class);
                res.batchApprovers = out;
            }
        }

        return res;
    }

    /**
     * Submit a batch for approval
     * Submits the Batch (for approval in the case of a **BANK_TRANSFER**). If this is an **INTERNAL_TRANSFER** batch, the transfers are immediately queued for processing. If this is a **BANK_TRANSFER** batch, this will trigger requests for approval to the firework mobile apps of authorised users. Once those users approve the batch, it is queued for processing.
     * 
     * You can only submit a batch while it is in the OPEN state.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SubmitBatchResponse submitBatch(org.openapis.openapi.models.operations.SubmitBatchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SubmitBatchRequest.class, baseUrl, "/v1/batches/{batchUuid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SubmitBatchResponse res = new org.openapis.openapi.models.operations.SubmitBatchResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }
}