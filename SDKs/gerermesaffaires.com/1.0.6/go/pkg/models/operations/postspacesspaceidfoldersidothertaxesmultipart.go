// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostSpacesSpaceIDFoldersIDOtherTaxesMultipartSecurity struct {
	GmaAuth shared.SchemeGmaAuth `security:"scheme,type=oauth2"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesMultipartPathParams struct {
	// Id of the folder tax contract
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccounting struct {
	AccountedOn *string                                                                      `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                      `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

// PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormData1 - Other tax declaration to add (either (Reference,DocumentId) either (File,Name,Content64Encoded,Title,Reference) is mandatory)
type PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormData1 struct {
	Accounting      *PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Amount          *float32                                                         `multipartForm:"name=Amount"`
	Author          *string                                                          `multipartForm:"name=Author"`
	Code            *string                                                          `multipartForm:"name=Code"`
	Comment         *string                                                          `multipartForm:"name=Comment"`
	Date            *string                                                          `multipartForm:"name=Date"`
	DeclarationDate *string                                                          `multipartForm:"name=DeclarationDate"`
	File            PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormDataFile        `multipartForm:"file"`
	Reference       *string                                                          `multipartForm:"name=Reference"`
	Title           string                                                           `multipartForm:"name=Title"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesMultipartRequest struct {
	PathParams PostSpacesSpaceIDFoldersIDOtherTaxesMultipartPathParams
	// Other tax declaration to add (either (Reference,DocumentId) either (File,Name,Content64Encoded,Title,Reference) is mandatory)
	Request  PostSpacesSpaceIDFoldersIDOtherTaxesMultipartFormData1 `request:"mediaType=multipart/form-data"`
	Security PostSpacesSpaceIDFoldersIDOtherTaxesMultipartSecurity
}

// PostSpacesSpaceIDFoldersIDOtherTaxesMultipart201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDOtherTaxesMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDOtherTaxesMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDOtherTaxesMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDOtherTaxesMultipart201ApplicationJSON
}
