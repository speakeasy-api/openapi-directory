// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RequestRoomActivitiesLogAsJSONOldPathParams struct {
	// Room ID
	RoomID int64 `pathParam:"style=simple,explode=false,name=room_id"`
}

type RequestRoomActivitiesLogAsJSONOldQueryParams struct {
	// Filter events until given date
	//
	// e.g. `2015-12-31T23:59:00`
	DateEnd *string `queryParam:"style=form,explode=true,name=date_end"`
	// Filter events from given date
	//
	// e.g. `2015-12-31T23:59:00`
	DateStart *string `queryParam:"style=form,explode=true,name=date_start"`
	// Range limit.
	//
	// Maximum 500.
	//
	//  For more results please use paging (`offset` + `limit`).
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Range offset
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort string
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Operation status:
	//
	// * `0` - Success
	//
	// * `2` - Error
	Status *int `queryParam:"style=form,explode=true,name=status"`
	// Operation ID
	//
	// cf. `GET /eventlog/operations`
	Type *int `queryParam:"style=form,explode=true,name=type"`
	// User ID
	UserID *int64 `queryParam:"style=form,explode=true,name=user_id"`
}

// RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum string

const (
	RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnumUtc    RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum = "UTC"
	RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnumLocal  RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum = "LOCAL"
	RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnumOffset RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum = "OFFSET"
	RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnumEpoch  RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum = "EPOCH"
	RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnumLeet   RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum = "LEET"
)

func (e *RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum: %s", s)
	}
}

type RequestRoomActivitiesLogAsJSONOldHeaders struct {
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *RequestRoomActivitiesLogAsJSONOldXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
}

type RequestRoomActivitiesLogAsJSONOldRequest struct {
	PathParams  RequestRoomActivitiesLogAsJSONOldPathParams
	QueryParams RequestRoomActivitiesLogAsJSONOldQueryParams
	Headers     RequestRoomActivitiesLogAsJSONOldHeaders
}

type RequestRoomActivitiesLogAsJSONOldResponse struct {
	ContentType string
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// OK
	SyslogEventList *shared.SyslogEventList
}
