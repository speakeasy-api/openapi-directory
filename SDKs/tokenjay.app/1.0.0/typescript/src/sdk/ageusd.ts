/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AgeUsd {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Calculates SigRSV exchange
   */
  calcSigmaRsvExchange(
    req: operations.CalcSigmaRsvExchangeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CalcSigmaRsvExchangeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalcSigmaRsvExchangeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sigrsv/exchange/{amount}/info",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalcSigmaRsvExchangeResponse =
        new operations.CalcSigmaRsvExchangeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.calcSigmaRsvExchange400WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.calcSigmaRsvExchange401WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.calcSigmaRsvExchange404WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.calcSigmaRsvExchange409WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Calculates SigUSD exchange
   */
  calcSigmaUsdExchange(
    req: operations.CalcSigmaUsdExchangeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CalcSigmaUsdExchangeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalcSigmaUsdExchangeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sigusd/exchange/{amount}/info",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalcSigmaUsdExchangeResponse =
        new operations.CalcSigmaUsdExchangeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.calcSigmaUsdExchange400WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.calcSigmaUsdExchange401WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.calcSigmaUsdExchange404WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.calcSigmaUsdExchange409WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Builds ErgoPayRequest for SigRSV exchange
   */
  doSigmaRsvExchange(
    req: operations.DoSigmaRsvExchangeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DoSigmaRsvExchangeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoSigmaRsvExchangeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sigrsv/exchange/";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoSigmaRsvExchangeResponse =
        new operations.DoSigmaRsvExchangeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.doSigmaRsvExchange400WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.doSigmaRsvExchange401WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.doSigmaRsvExchange404WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.doSigmaRsvExchange409WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Builds ErgoPayRequest for SigUSD exchange
   */
  doSigmaUsdExchange(
    req: operations.DoSigmaUsdExchangeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DoSigmaUsdExchangeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoSigmaUsdExchangeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sigusd/exchange/";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoSigmaUsdExchangeResponse =
        new operations.DoSigmaUsdExchangeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.doSigmaUsdExchange400WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.doSigmaUsdExchange401WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.doSigmaUsdExchange404WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.doSigmaUsdExchange409WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns state of AgeUSD at this moment
   */
  getAgeUsdInfo(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAgeUsdInfoResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ageusd/info";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAgeUsdInfoResponse =
        new operations.GetAgeUsdInfoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getAgeUsdInfo400WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getAgeUsdInfo401WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getAgeUsdInfo404WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getAgeUsdInfo409WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists price and available volume for SigmaRSV
   */
  getSigmaRsvPrice(
    config?: AxiosRequestConfig
  ): Promise<operations.GetSigmaRsvPriceResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sigrsv/price";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSigmaRsvPriceResponse =
        new operations.GetSigmaRsvPriceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getSigmaRsvPrice400WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getSigmaRsvPrice401WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getSigmaRsvPrice404WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getSigmaRsvPrice409WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists price and available volume for SigmaUSD
   */
  getSigmaUsdPrice(
    config?: AxiosRequestConfig
  ): Promise<operations.GetSigmaUsdPriceResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sigusd/price";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSigmaUsdPriceResponse =
        new operations.GetSigmaUsdPriceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getSigmaUsdPrice400WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getSigmaUsdPrice401WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getSigmaUsdPrice404WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getSigmaUsdPrice409WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }
}
