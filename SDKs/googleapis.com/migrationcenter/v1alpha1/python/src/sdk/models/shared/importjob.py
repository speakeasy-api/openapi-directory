"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import executionreport as shared_executionreport
from ..shared import gcspayloadinfo as shared_gcspayloadinfo
from ..shared import inlinepayloadinfo as shared_inlinepayloadinfo
from ..shared import validationreport as shared_validationreport
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ImportJobStateEnum(str, Enum):
    r"""Output only. The state of the import job."""
    IMPORT_JOB_STATE_UNSPECIFIED = 'IMPORT_JOB_STATE_UNSPECIFIED'
    IMPORT_JOB_STATE_PENDING = 'IMPORT_JOB_STATE_PENDING'
    IMPORT_JOB_STATE_RUNNING = 'IMPORT_JOB_STATE_RUNNING'
    IMPORT_JOB_STATE_COMPLETED = 'IMPORT_JOB_STATE_COMPLETED'
    IMPORT_JOB_STATE_FAILED = 'IMPORT_JOB_STATE_FAILED'
    IMPORT_JOB_STATE_VALIDATING = 'IMPORT_JOB_STATE_VALIDATING'
    IMPORT_JOB_STATE_FAILED_VALIDATION = 'IMPORT_JOB_STATE_FAILED_VALIDATION'
    IMPORT_JOB_STATE_READY = 'IMPORT_JOB_STATE_READY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImportJob:
    r"""A resource that represents the background job that imports asset frames."""
    
    asset_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetSource'), 'exclude': lambda f: f is None }})
    r"""Required. Reference to a source."""  
    complete_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completeTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the import job was completed."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the import job was created."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""User-friendly display name. Maximum length is 63 characters."""  
    execution_report: Optional[shared_executionreport.ExecutionReport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionReport'), 'exclude': lambda f: f is None }})
    r"""A resource that reports result of the import job execution."""  
    gcs_payload: Optional[shared_gcspayloadinfo.GCSPayloadInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcsPayload'), 'exclude': lambda f: f is None }})
    r"""A resource that represents a payload hosted on Google Cloud Storage."""  
    inline_payload: Optional[shared_inlinepayloadinfo.InlinePayloadInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inlinePayload'), 'exclude': lambda f: f is None }})
    r"""A resource that represents the inline import job payload."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The full name of the import job."""  
    state: Optional[ImportJobStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the import job."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the import job was last updated."""  
    validation_report: Optional[shared_validationreport.ValidationReport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validationReport'), 'exclude': lambda f: f is None }})
    r"""A resource that aggregates errors across import job files."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImportJobInput:
    r"""A resource that represents the background job that imports asset frames."""
    
    asset_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetSource'), 'exclude': lambda f: f is None }})
    r"""Required. Reference to a source."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""User-friendly display name. Maximum length is 63 characters."""  
    execution_report: Optional[shared_executionreport.ExecutionReport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionReport'), 'exclude': lambda f: f is None }})
    r"""A resource that reports result of the import job execution."""  
    gcs_payload: Optional[shared_gcspayloadinfo.GCSPayloadInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcsPayload'), 'exclude': lambda f: f is None }})
    r"""A resource that represents a payload hosted on Google Cloud Storage."""  
    inline_payload: Optional[shared_inlinepayloadinfo.InlinePayloadInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inlinePayload'), 'exclude': lambda f: f is None }})
    r"""A resource that represents the inline import job payload."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs."""  
    validation_report: Optional[shared_validationreport.ValidationReport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validationReport'), 'exclude': lambda f: f is None }})
    r"""A resource that aggregates errors across import job files."""  
    