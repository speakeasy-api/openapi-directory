// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AMITypesEnum string

const (
	AMITypesEnumAl2X8664                AMITypesEnum = "AL2_x86_64"
	AMITypesEnumAl2X8664Gpu             AMITypesEnum = "AL2_x86_64_GPU"
	AMITypesEnumAl2Arm64                AMITypesEnum = "AL2_ARM_64"
	AMITypesEnumCustom                  AMITypesEnum = "CUSTOM"
	AMITypesEnumBottlerocketArm64       AMITypesEnum = "BOTTLEROCKET_ARM_64"
	AMITypesEnumBottlerocketX8664       AMITypesEnum = "BOTTLEROCKET_x86_64"
	AMITypesEnumBottlerocketArm64Nvidia AMITypesEnum = "BOTTLEROCKET_ARM_64_NVIDIA"
	AMITypesEnumBottlerocketX8664Nvidia AMITypesEnum = "BOTTLEROCKET_x86_64_NVIDIA"
	AMITypesEnumWindowsCore2019X8664    AMITypesEnum = "WINDOWS_CORE_2019_x86_64"
	AMITypesEnumWindowsFull2019X8664    AMITypesEnum = "WINDOWS_FULL_2019_x86_64"
	AMITypesEnumWindowsCore2022X8664    AMITypesEnum = "WINDOWS_CORE_2022_x86_64"
	AMITypesEnumWindowsFull2022X8664    AMITypesEnum = "WINDOWS_FULL_2022_x86_64"
)

func (e AMITypesEnum) ToPointer() *AMITypesEnum {
	return &e
}

func (e *AMITypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AL2_x86_64":
		fallthrough
	case "AL2_x86_64_GPU":
		fallthrough
	case "AL2_ARM_64":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "BOTTLEROCKET_ARM_64":
		fallthrough
	case "BOTTLEROCKET_x86_64":
		fallthrough
	case "BOTTLEROCKET_ARM_64_NVIDIA":
		fallthrough
	case "BOTTLEROCKET_x86_64_NVIDIA":
		fallthrough
	case "WINDOWS_CORE_2019_x86_64":
		fallthrough
	case "WINDOWS_FULL_2019_x86_64":
		fallthrough
	case "WINDOWS_CORE_2022_x86_64":
		fallthrough
	case "WINDOWS_FULL_2022_x86_64":
		*e = AMITypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AMITypesEnum: %v", v)
	}
}
