/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * POSTPaymentMethodType - Container for custom fields of a payment method object.
 * 
 */
public class POSTPaymentMethodType {
    /**
     * ID of the customer account.
     * To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountKey")
    public String accountKey;
    public POSTPaymentMethodType withAccountKey(String accountKey) {
        this.accountKey = accountKey;
        return this;
    }
    
    /**
     * Container for cardholder information. If provided, Zuora will
     * only use this information for this card. Otherwise, Zuora will use
     * the account''s existing bill-to contact information for this card.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardHolderInfo")
    public CreatePaymentMethodCardholderInfo cardHolderInfo;
    public POSTPaymentMethodType withCardHolderInfo(CreatePaymentMethodCardholderInfo cardHolderInfo) {
        this.cardHolderInfo = cardHolderInfo;
        return this;
    }
    
    /**
     * Credit card number, a string of up to 16 characters. This field can only be set when creating a new payment method; it cannot be queried or updated.
     * 
     */
    @JsonProperty("creditCardNumber")
    public String creditCardNumber;
    public POSTPaymentMethodType withCreditCardNumber(String creditCardNumber) {
        this.creditCardNumber = creditCardNumber;
        return this;
    }
    
    /**
     * The type of the credit card.
     * 
     * Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
     * 
     */
    @JsonProperty("creditCardType")
    public String creditCardType;
    public POSTPaymentMethodType withCreditCardType(String creditCardType) {
        this.creditCardType = creditCardType;
        return this;
    }
    
    /**
     * Specify true to make this card the default payment method; otherwise, omit this parameter to keep the current default payment method.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPaymentMethod")
    public Boolean defaultPaymentMethod;
    public POSTPaymentMethodType withDefaultPaymentMethod(Boolean defaultPaymentMethod) {
        this.defaultPaymentMethod = defaultPaymentMethod;
        return this;
    }
    
    /**
     * One or two digits expiration month (1-12).
     * 
     */
    @JsonProperty("expirationMonth")
    public Long expirationMonth;
    public POSTPaymentMethodType withExpirationMonth(Long expirationMonth) {
        this.expirationMonth = expirationMonth;
        return this;
    }
    
    /**
     * Four-digit expiration year.
     * 
     */
    @JsonProperty("expirationYear")
    public Long expirationYear;
    public POSTPaymentMethodType withExpirationYear(Long expirationYear) {
        this.expirationYear = expirationYear;
        return this;
    }
    
    /**
     * The field used to pass gateway-specific parameters and parameter values.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayOptions")
    public POSTPaymentMethodTypeGatewayOptions gatewayOptions;
    public POSTPaymentMethodType withGatewayOptions(POSTPaymentMethodTypeGatewayOptions gatewayOptions) {
        this.gatewayOptions = gatewayOptions;
        return this;
    }
    
    /**
     * Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitConsentAgreementRef")
    public String mitConsentAgreementRef;
    public POSTPaymentMethodType withMitConsentAgreementRef(String mitConsentAgreementRef) {
        this.mitConsentAgreementRef = mitConsentAgreementRef;
        return this;
    }
    
    /**
     * Required if you set the `mitProfileAction` field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitConsentAgreementSrc")
    public POSTPaymentMethodTypeMitConsentAgreementSrcEnum mitConsentAgreementSrc;
    public POSTPaymentMethodType withMitConsentAgreementSrc(POSTPaymentMethodTypeMitConsentAgreementSrcEnum mitConsentAgreementSrc) {
        this.mitConsentAgreementSrc = mitConsentAgreementSrc;
        return this;
    }
    
    /**
     * Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitNetworkTransactionId")
    public String mitNetworkTransactionId;
    public POSTPaymentMethodType withMitNetworkTransactionId(String mitNetworkTransactionId) {
        this.mitNetworkTransactionId = mitNetworkTransactionId;
        return this;
    }
    
    /**
     * If you set this field, Zuora creates a stored credential profile within the payment method.
     * 
     * **Note:** This feature is in the **Early Adopters** phase. We are actively soliciting feedback from a small set of early adopters before releasing as generally available.
     * 
     * * `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent.
     * 
     *   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
     *   
     *   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
     * 
     * 
     * * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitProfileAction")
    public POSTPaymentMethodTypeMitProfileActionEnum mitProfileAction;
    public POSTPaymentMethodType withMitProfileAction(POSTPaymentMethodTypeMitProfileActionEnum mitProfileAction) {
        this.mitProfileAction = mitProfileAction;
        return this;
    }
    
    /**
     * The date on which the profile is agreed. The date format is `yyyy-mm-dd`.  
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("mitProfileAgreedOn")
    public LocalDate mitProfileAgreedOn;
    public POSTPaymentMethodType withMitProfileAgreedOn(LocalDate mitProfileAgreedOn) {
        this.mitProfileAgreedOn = mitProfileAgreedOn;
        return this;
    }
    
    /**
     * Required if you set the `mitProfileAction` field. Indicates the type of the stored credential profile to process recurring or unsecheduled transactions.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitProfileType")
    public POSTPaymentMethodTypeMitProfileTypeEnum mitProfileType;
    public POSTPaymentMethodType withMitProfileType(POSTPaymentMethodTypeMitProfileTypeEnum mitProfileType) {
        this.mitProfileType = mitProfileType;
        return this;
    }
    
    /**
     * The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numConsecutiveFailures")
    public Integer numConsecutiveFailures;
    public POSTPaymentMethodType withNumConsecutiveFailures(Integer numConsecutiveFailures) {
        this.numConsecutiveFailures = numConsecutiveFailures;
        return this;
    }
    
    /**
     * The CVV or CVV2 security code for the credit card or debit card. Only required if changing expirationMonth, expirationYear, or cardHolderName. To ensure PCI compliance, this value isn't stored and can't be queried.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securityCode")
    public String securityCode;
    public POSTPaymentMethodType withSecurityCode(String securityCode) {
        this.securityCode = securityCode;
        return this;
    }
    
}
