"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var application_1 = require("./application");
var applicationkeycredentials_1 = require("./applicationkeycredentials");
var applicationowners_1 = require("./applicationowners");
var applicationpasswordcredentials_1 = require("./applicationpasswordcredentials");
var deletedapplications_1 = require("./deletedapplications");
var domain_1 = require("./domain");
var group_1 = require("./group");
var groupowners_1 = require("./groupowners");
var groupsowners_1 = require("./groupsowners");
var shared = __importStar(require("./models/shared"));
var oauth2permissiongrantcreate_1 = require("./oauth2permissiongrantcreate");
var oauth2permissiongrantdelete_1 = require("./oauth2permissiongrantdelete");
var oauth2permissiongrantlist_1 = require("./oauth2permissiongrantlist");
var objects_1 = require("./objects");
var serviceprincipal_1 = require("./serviceprincipal");
var serviceprincipalapproleassignedto_1 = require("./serviceprincipalapproleassignedto");
var serviceprincipalapproleassignments_1 = require("./serviceprincipalapproleassignments");
var serviceprincipalkeycredentials_1 = require("./serviceprincipalkeycredentials");
var serviceprincipalowners_1 = require("./serviceprincipalowners");
var serviceprincipalpasswordcredentials_1 = require("./serviceprincipalpasswordcredentials");
var serviceprincipalsbyappid_1 = require("./serviceprincipalsbyappid");
var signedinuser_1 = require("./signedinuser");
var user_1 = require("./user");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://graph.windows.net"];
/**
 * The Graph RBAC Management Client
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.application = new application_1.Application(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.applicationKeyCredentials = new applicationkeycredentials_1.ApplicationKeyCredentials(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.applicationOwners = new applicationowners_1.ApplicationOwners(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.applicationPasswordCredentials = new applicationpasswordcredentials_1.ApplicationPasswordCredentials(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.domain = new domain_1.Domain(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.group = new group_1.Group(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.groupOwners = new groupowners_1.GroupOwners(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.groupsOwners = new groupsowners_1.GroupsOwners(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.oAuth2PermissionGrantCreate = new oauth2permissiongrantcreate_1.OAuth2PermissionGrantCreate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.oAuth2PermissionGrantList = new oauth2permissiongrantlist_1.OAuth2PermissionGrantList(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.oAuth2PermissionGrantDelete = new oauth2permissiongrantdelete_1.OAuth2PermissionGrantDelete(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.objects = new objects_1.Objects(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.servicePrincipal = new serviceprincipal_1.ServicePrincipal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.servicePrincipalAppRoleAssignedTo =
            new serviceprincipalapproleassignedto_1.ServicePrincipalAppRoleAssignedTo(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.servicePrincipalAppRoleAssignments =
            new serviceprincipalapproleassignments_1.ServicePrincipalAppRoleAssignments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.servicePrincipalKeyCredentials = new serviceprincipalkeycredentials_1.ServicePrincipalKeyCredentials(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.servicePrincipalOwners = new serviceprincipalowners_1.ServicePrincipalOwners(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.servicePrincipalPasswordCredentials =
            new serviceprincipalpasswordcredentials_1.ServicePrincipalPasswordCredentials(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.servicePrincipalsByAppId = new serviceprincipalsbyappid_1.ServicePrincipalsByAppId(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.signedInUser = new signedinuser_1.SignedInUser(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.user = new user_1.User(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.deletedApplications = new deletedapplications_1.DeletedApplications(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
