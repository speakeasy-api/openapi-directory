/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ColorDefinition } from "./colordefinition";
import { Expose, Transform } from "class-transformer";

/**
 * Successful response
 */
export class Colors extends SpeakeasyBase {
  /**
   * A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.
   */
  @SpeakeasyMetadata({ elemType: ColorDefinition })
  @Expose({ name: "calendar" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ColorDefinition> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ColorDefinition);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  calendar?: Record<string, ColorDefinition>;

  /**
   * A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.
   */
  @SpeakeasyMetadata({ elemType: ColorDefinition })
  @Expose({ name: "event" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ColorDefinition> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ColorDefinition);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  event?: Record<string, ColorDefinition>;

  /**
   * Type of the resource ("calendar#colors").
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Last modification time of the color palette (as a RFC3339 timestamp). Read-only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updated?: Date;
}
