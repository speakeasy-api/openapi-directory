"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudchannelv1value as shared_googlecloudchannelv1value
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudChannelV1ParameterDefinitionParameterTypeEnum(str, Enum):
    r"""Data type of the parameter. Minimal value, Maximum value and allowed values will use specified data type here."""
    PARAMETER_TYPE_UNSPECIFIED = 'PARAMETER_TYPE_UNSPECIFIED'
    INT64 = 'INT64'
    STRING = 'STRING'
    DOUBLE = 'DOUBLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudChannelV1ParameterDefinition:
    r"""Parameter's definition. Specifies what parameter is required to use the current Offer to purchase."""
    
    allowed_values: Optional[list[shared_googlecloudchannelv1value.GoogleCloudChannelV1Value]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedValues'), 'exclude': lambda f: f is None }})
    r"""If not empty, parameter values must be drawn from this list. For example, [us-west1, us-west2, ...] Applicable to STRING parameter type."""  
    max_value: Optional[shared_googlecloudchannelv1value.GoogleCloudChannelV1Value] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxValue'), 'exclude': lambda f: f is None }})
    r"""Data type and value of a parameter."""  
    min_value: Optional[shared_googlecloudchannelv1value.GoogleCloudChannelV1Value] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minValue'), 'exclude': lambda f: f is None }})
    r"""Data type and value of a parameter."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the parameter."""  
    optional: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optional'), 'exclude': lambda f: f is None }})
    r"""If set to true, parameter is optional to purchase this Offer."""  
    parameter_type: Optional[GoogleCloudChannelV1ParameterDefinitionParameterTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameterType'), 'exclude': lambda f: f is None }})
    r"""Data type of the parameter. Minimal value, Maximum value and allowed values will use specified data type here."""  
    