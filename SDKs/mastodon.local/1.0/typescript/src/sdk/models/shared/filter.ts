/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export enum FilterContextEnum {
  Home = "home",
  Notifications = "notifications",
  Public = "public",
  Thread = "thread",
}

/**
 * Represents a user-defined filter for determining which statuses should not be shown to the user.
 *
 * @see {@link https://docs.joinmastodon.org/entities/filter/}
 */
export class Filter extends SpeakeasyBase {
  /**
   * The contexts in which the filter should be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "context" })
  context?: FilterContextEnum[];

  /**
   * When the filter should no longer be applied. ISO 8601 Datetime, or null if the filter does not expire
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expires_at" })
  expiresAt?: string;

  /**
   * The ID of the filter in the database. Cast from an integer, but not guaranteed to be a number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Should matching entities in home and notifications be dropped by the server?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "irreversible" })
  irreversible?: boolean;

  /**
   * The text to be filtered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phrase" })
  phrase?: string;

  /**
   * Should the filter consider word boundaries?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "whole_word" })
  wholeWord?: boolean;
}
