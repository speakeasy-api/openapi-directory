/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
 */
export class CreateBotAliasRequestBodyConversationLogSettings extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.AudioLogSetting })
  @Expose({ name: "audioLogSettings" })
  @Type(() => shared.AudioLogSetting)
  audioLogSettings?: shared.AudioLogSetting[];

  @SpeakeasyMetadata({ elemType: shared.TextLogSetting })
  @Expose({ name: "textLogSettings" })
  @Type(() => shared.TextLogSetting)
  textLogSettings?: shared.TextLogSetting[];
}

/**
 * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
 */
export class CreateBotAliasRequestBodySentimentAnalysisSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "detectSentiment" })
  detectSentiment?: boolean;
}

export class CreateBotAliasRequestBody extends SpeakeasyBase {
  /**
   * Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.
   */
  @SpeakeasyMetadata({ elemType: shared.BotAliasLocaleSettings })
  @Expose({ name: "botAliasLocaleSettings" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.BotAliasLocaleSettings> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.BotAliasLocaleSettings);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  botAliasLocaleSettings?: Record<string, shared.BotAliasLocaleSettings>;

  /**
   * The alias to create. The name must be unique for the bot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "botAliasName" })
  botAliasName: string;

  /**
   * The version of the bot that this alias points to. You can use the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html">UpdateBotAlias</a> operation to change the bot version associated with the alias.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "botVersion" })
  botVersion?: string;

  /**
   * Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conversationLogSettings" })
  @Type(() => CreateBotAliasRequestBodyConversationLogSettings)
  conversationLogSettings?: CreateBotAliasRequestBodyConversationLogSettings;

  /**
   * A description of the alias. Use this description to help identify the alias.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sentimentAnalysisSettings" })
  @Type(() => CreateBotAliasRequestBodySentimentAnalysisSettings)
  sentimentAnalysisSettings?: CreateBotAliasRequestBodySentimentAnalysisSettings;

  /**
   * A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>UpdateBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateBotAliasRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateBotAliasRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier of the bot that the alias applies to.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botId",
  })
  botId: string;
}

export class CreateBotAliasResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createBotAliasResponse?: shared.CreateBotAliasResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * PreconditionFailedException
   */
  @SpeakeasyMetadata()
  preconditionFailedException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
