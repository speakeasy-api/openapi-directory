<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CatalogsCatalog 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get the index of the catalog API for this store
     * 
     * The operation will give you all the operations you will be able to do on this store for this API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogStoreIndexRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogStoreIndexResponse
     */
	public function catalogStoreIndex(
        \OpenAPI\OpenAPI\Models\Operations\CatalogStoreIndexRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogStoreIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}', \OpenAPI\OpenAPI\Models\Operations\CatalogStoreIndexRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogStoreIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogStoreIndex = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogStoreIndex', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change Catalog Column User Name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCatalogColumnUserNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCatalogColumnUserNameResponse
     */
	public function catalogChangeCatalogColumnUserName(
        \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCatalogColumnUserNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCatalogColumnUserNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename', \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCatalogColumnUserNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changeUserColumnNameRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCatalogColumnUserNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importAlreadyInProgressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportAlreadyInProgressResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change custom column expression
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnExpressionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnExpressionResponse
     */
	public function catalogChangeCustomColumnExpression(
        \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnExpressionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnExpressionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression', \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnExpressionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changeCustomColumnExpressionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnExpressionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importAlreadyInProgressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportAlreadyInProgressResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change Custom Column User Name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnUserNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnUserNameResponse
     */
	public function catalogChangeCustomColumnUserName(
        \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnUserNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnUserNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename', \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnUserNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changeUserColumnNameRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogChangeCustomColumnUserNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importAlreadyInProgressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportAlreadyInProgressResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Compute the expression for this catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogComputeExpressionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogComputeExpressionResponse
     */
	public function catalogComputeExpression(
        \OpenAPI\OpenAPI\Models\Operations\CatalogComputeExpressionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogComputeExpressionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/customColumns/computeExpression', \OpenAPI\OpenAPI\Models\Operations\CatalogComputeExpressionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "computeExpressionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogComputeExpressionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->catalogComputeExpression200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->catalogComputeExpression400ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete custom column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogDeleteCustomColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogDeleteCustomColumnResponse
     */
	public function catalogDeleteCustomColumn(
        \OpenAPI\OpenAPI\Models\Operations\CatalogDeleteCustomColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogDeleteCustomColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/customColumns/{columnId}', \OpenAPI\OpenAPI\Models\Operations\CatalogDeleteCustomColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogDeleteCustomColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get catalog column list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogGetCatalogColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogGetCatalogColumnsResponse
     */
	public function catalogGetCatalogColumns(
        \OpenAPI\OpenAPI\Models\Operations\CatalogGetCatalogColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogGetCatalogColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/catalogColumns', \OpenAPI\OpenAPI\Models\Operations\CatalogGetCatalogColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogGetCatalogColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogColumnList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogColumnList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get category list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogGetCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogGetCategoriesResponse
     */
	public function catalogGetCategories(
        \OpenAPI\OpenAPI\Models\Operations\CatalogGetCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogGetCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/categories', \OpenAPI\OpenAPI\Models\Operations\CatalogGetCategoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogGetCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categoryList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CategoryList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the encrypted custom column expression
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnExpressionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnExpressionResponse
     */
	public function catalogGetCustomColumnExpression(
        \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnExpressionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnExpressionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression', \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnExpressionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnExpressionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->catalogGetCustomColumnExpression200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get custom column list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnsResponse
     */
	public function catalogGetCustomColumns(
        \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/customColumns', \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogGetCustomColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customColumnList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomColumnList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get product by ProductId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductByProductIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductByProductIdResponse
     */
	public function catalogGetProductByProductId(
        \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductByProductIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductByProductIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/products/{productId}', \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductByProductIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductByProductIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get product by Sku
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductBySkuRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductBySkuResponse
     */
	public function catalogGetProductBySku(
        \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductBySkuRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductBySkuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/products', \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductBySkuRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CatalogGetProductBySkuRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductBySkuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get product list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductsResponse
     */
	public function catalogGetProducts(
        \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/products/list', \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getProductsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogGetProductsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get random product list
     * 
     * We will return 10 products randomly selected with all product values
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogGetRandomProductsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogGetRandomProductsResponse
     */
	public function catalogGetRandomProducts(
        \OpenAPI\OpenAPI\Models\Operations\CatalogGetRandomProductsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogGetRandomProductsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/products/random', \OpenAPI\OpenAPI\Models\Operations\CatalogGetRandomProductsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogGetRandomProductsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->randomProductList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RandomProductList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create or replace a custom column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogSaveCustomColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogSaveCustomColumnResponse
     */
	public function catalogSaveCustomColumn(
        \OpenAPI\OpenAPI\Models\Operations\CatalogSaveCustomColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogSaveCustomColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/customColumns/{columnId}', \OpenAPI\OpenAPI\Models\Operations\CatalogSaveCustomColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCustomColumnRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogSaveCustomColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importAlreadyInProgressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportAlreadyInProgressResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the last input configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetManualUpdateLastInputConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetManualUpdateLastInputConfigResponse
     */
	public function importationGetManualUpdateLastInputConfig(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetManualUpdateLastInputConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetManualUpdateLastInputConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/inputConfiguration', \OpenAPI\OpenAPI\Models\Operations\ImportationGetManualUpdateLastInputConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetManualUpdateLastInputConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lastManualImportInputConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LastManualImportInputConfiguration', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}