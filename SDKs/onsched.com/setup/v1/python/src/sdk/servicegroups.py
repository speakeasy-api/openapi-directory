"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ServiceGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_setup_v1_servicegroups_id_(self, request: operations.DeleteSetupV1ServicegroupsIDRequest) -> operations.DeleteSetupV1ServicegroupsIDResponse:
        r"""Delete Service Group
        <p>Use this endpoint to <b>Delete</b> a Service Group object. A valid <b>serviceGroup id</b> is required. The service group is not permanently deleted and can be recovered by using the <i>PUT \u200B/setup\u200B/v1\u200B/servicegroups\u200B/{id}\u200B/recover</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSetupV1ServicegroupsIDRequest, base_url, '/setup/v1/servicegroups/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSetupV1ServicegroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceGroupViewModel])
                res.service_group_view_model = out

        return res

    def get_setup_v1_servicegroups(self, request: operations.GetSetupV1ServicegroupsRequest) -> operations.GetSetupV1ServicegroupsResponse:
        r"""List Service Groups
        <p>Use this endpoint to return a list of <b>Service Groups</b> for the requested location. If no business location is specified it will default to the Primary Business Location of the company. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the other query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/servicegroups'
        
        query_params = utils.get_query_params(operations.GetSetupV1ServicegroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1ServicegroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceGroupListViewModel])
                res.service_group_list_view_model = out

        return res

    def get_setup_v1_servicegroups_id_(self, request: operations.GetSetupV1ServicegroupsIDRequest) -> operations.GetSetupV1ServicegroupsIDResponse:
        r"""Get Service Group
        <p>Use this endpoint to return a <b>Service Group</b> object. A valid <b>serviceGroup id</b> is required. Find service group id's by using the <i>GET /setup/v1/serviceGroups</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1ServicegroupsIDRequest, base_url, '/setup/v1/servicegroups/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1ServicegroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceGroupViewModel])
                res.service_group_view_model = out

        return res

    def post_setup_v1_servicegroups(self, request: shared.ServiceGroupInputModel) -> operations.PostSetupV1ServicegroupsResponse:
        r"""Create Service Group
        <p>Use this endpoint to <b>Create</b> a Service Group. If no locationId is specified in the body, the business location will default to the primary business location. Service groups are used to categorize services. Service groups are optional and only make sense if you have multiple services that will be easier read if categorized. Only the service group Type of 0 is supported by the API. It defaults to 0 if not supplied.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/servicegroups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1ServicegroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceGroupViewModel])
                res.service_group_view_model = out

        return res

    def put_setup_v1_servicegroups_id_(self, request: operations.PutSetupV1ServicegroupsIDRequest) -> operations.PutSetupV1ServicegroupsIDResponse:
        r"""Update Service Group
        <p>Use this endpoint to <b>Update</b> a Service Group object. A valid <b>serviceGroup id</b> is required. </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1ServicegroupsIDRequest, base_url, '/setup/v1/servicegroups/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_group_input_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1ServicegroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceGroupViewModel])
                res.service_group_view_model = out

        return res

    def put_setup_v1_servicegroups_id_recover(self, request: operations.PutSetupV1ServicegroupsIDRecoverRequest) -> operations.PutSetupV1ServicegroupsIDRecoverResponse:
        r"""Recover Service Group
        <p>Use this endpoint to <b>Recover</b> a deleted Service Group. A valid <b>serviceGroup id</b> is required. </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1ServicegroupsIDRecoverRequest, base_url, '/setup/v1/servicegroups/{id}/recover', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1ServicegroupsIDRecoverResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceGroupViewModel])
                res.service_group_view_model = out

        return res

    