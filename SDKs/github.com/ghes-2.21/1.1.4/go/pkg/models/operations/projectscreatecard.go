// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ProjectsCreateCardRequestBody2 struct {
	// The unique identifier of the content associated with the card
	ContentID int64 `json:"content_id"`
	// The piece of content associated with the card
	ContentType string `json:"content_type"`
}

type ProjectsCreateCardRequestBody1 struct {
	// The project card's note
	Note string `json:"note"`
}

type ProjectsCreateCardRequestBodyType string

const (
	ProjectsCreateCardRequestBodyTypeProjectsCreateCardRequestBody1 ProjectsCreateCardRequestBodyType = "projects/create-card_requestBody_1"
	ProjectsCreateCardRequestBodyTypeProjectsCreateCardRequestBody2 ProjectsCreateCardRequestBodyType = "projects/create-card_requestBody_2"
)

type ProjectsCreateCardRequestBody struct {
	ProjectsCreateCardRequestBody1 *ProjectsCreateCardRequestBody1
	ProjectsCreateCardRequestBody2 *ProjectsCreateCardRequestBody2

	Type ProjectsCreateCardRequestBodyType
}

func CreateProjectsCreateCardRequestBodyProjectsCreateCardRequestBody1(projectsCreateCardRequestBody1 ProjectsCreateCardRequestBody1) ProjectsCreateCardRequestBody {
	typ := ProjectsCreateCardRequestBodyTypeProjectsCreateCardRequestBody1

	return ProjectsCreateCardRequestBody{
		ProjectsCreateCardRequestBody1: &projectsCreateCardRequestBody1,
		Type:                           typ,
	}
}

func CreateProjectsCreateCardRequestBodyProjectsCreateCardRequestBody2(projectsCreateCardRequestBody2 ProjectsCreateCardRequestBody2) ProjectsCreateCardRequestBody {
	typ := ProjectsCreateCardRequestBodyTypeProjectsCreateCardRequestBody2

	return ProjectsCreateCardRequestBody{
		ProjectsCreateCardRequestBody2: &projectsCreateCardRequestBody2,
		Type:                           typ,
	}
}

func (u *ProjectsCreateCardRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	projectsCreateCardRequestBody1 := new(ProjectsCreateCardRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&projectsCreateCardRequestBody1); err == nil {
		u.ProjectsCreateCardRequestBody1 = projectsCreateCardRequestBody1
		u.Type = ProjectsCreateCardRequestBodyTypeProjectsCreateCardRequestBody1
		return nil
	}

	projectsCreateCardRequestBody2 := new(ProjectsCreateCardRequestBody2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&projectsCreateCardRequestBody2); err == nil {
		u.ProjectsCreateCardRequestBody2 = projectsCreateCardRequestBody2
		u.Type = ProjectsCreateCardRequestBodyTypeProjectsCreateCardRequestBody2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProjectsCreateCardRequestBody) MarshalJSON() ([]byte, error) {
	if u.ProjectsCreateCardRequestBody1 != nil {
		return json.Marshal(u.ProjectsCreateCardRequestBody1)
	}

	if u.ProjectsCreateCardRequestBody2 != nil {
		return json.Marshal(u.ProjectsCreateCardRequestBody2)
	}

	return nil, nil
}

type ProjectsCreateCardRequest struct {
	RequestBody ProjectsCreateCardRequestBody `request:"mediaType=application/json"`
	// column_id parameter
	ColumnID int64 `pathParam:"style=simple,explode=false,name=column_id"`
}

type ProjectsCreateCard503ApplicationJSONErrors struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ProjectsCreateCard503ApplicationJSON - Response
type ProjectsCreateCard503ApplicationJSON struct {
	Code             *string                                      `json:"code,omitempty"`
	DocumentationURL *string                                      `json:"documentation_url,omitempty"`
	Errors           []ProjectsCreateCard503ApplicationJSONErrors `json:"errors,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

type ProjectsCreateCard422ApplicationJSONType string

const (
	ProjectsCreateCard422ApplicationJSONTypeValidationError       ProjectsCreateCard422ApplicationJSONType = "validation-error"
	ProjectsCreateCard422ApplicationJSONTypeValidationErrorSimple ProjectsCreateCard422ApplicationJSONType = "validation-error-simple"
)

type ProjectsCreateCard422ApplicationJSON struct {
	ValidationError       *shared.ValidationError
	ValidationErrorSimple *shared.ValidationErrorSimple

	Type ProjectsCreateCard422ApplicationJSONType
}

func CreateProjectsCreateCard422ApplicationJSONValidationError(validationError shared.ValidationError) ProjectsCreateCard422ApplicationJSON {
	typ := ProjectsCreateCard422ApplicationJSONTypeValidationError

	return ProjectsCreateCard422ApplicationJSON{
		ValidationError: &validationError,
		Type:            typ,
	}
}

func CreateProjectsCreateCard422ApplicationJSONValidationErrorSimple(validationErrorSimple shared.ValidationErrorSimple) ProjectsCreateCard422ApplicationJSON {
	typ := ProjectsCreateCard422ApplicationJSONTypeValidationErrorSimple

	return ProjectsCreateCard422ApplicationJSON{
		ValidationErrorSimple: &validationErrorSimple,
		Type:                  typ,
	}
}

func (u *ProjectsCreateCard422ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	validationError := new(shared.ValidationError)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&validationError); err == nil {
		u.ValidationError = validationError
		u.Type = ProjectsCreateCard422ApplicationJSONTypeValidationError
		return nil
	}

	validationErrorSimple := new(shared.ValidationErrorSimple)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&validationErrorSimple); err == nil {
		u.ValidationErrorSimple = validationErrorSimple
		u.Type = ProjectsCreateCard422ApplicationJSONTypeValidationErrorSimple
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProjectsCreateCard422ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ValidationError != nil {
		return json.Marshal(u.ValidationError)
	}

	if u.ValidationErrorSimple != nil {
		return json.Marshal(u.ValidationErrorSimple)
	}

	return nil, nil
}

type ProjectsCreateCardResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response
	ProjectCard *shared.ProjectCard
	// Validation failed
	ProjectsCreateCard422ApplicationJSONOneOf *ProjectsCreateCard422ApplicationJSON
	// Response
	ProjectsCreateCard503ApplicationJSONObject *ProjectsCreateCard503ApplicationJSON
}
