"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Cameras:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def generate_network_camera_snapshot(self, request: operations.GenerateNetworkCameraSnapshotRequest) -> operations.GenerateNetworkCameraSnapshotResponse:
        r"""Generate a snapshot of what the camera sees at the specified time and return a link to that image.
        Generate a snapshot of what the camera sees at the specified time and return a link to that image.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GenerateNetworkCameraSnapshotRequest, base_url, '/networks/{networkId}/cameras/{serial}/snapshot', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenerateNetworkCameraSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.generate_network_camera_snapshot_202_application_json_object = out

        return res

    def get_device_camera_quality_and_retention_settings(self, request: operations.GetDeviceCameraQualityAndRetentionSettingsRequest) -> operations.GetDeviceCameraQualityAndRetentionSettingsResponse:
        r"""Returns quality and retention settings for the given camera
        Returns quality and retention settings for the given camera
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceCameraQualityAndRetentionSettingsRequest, base_url, '/devices/{serial}/camera/qualityAndRetentionSettings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceCameraQualityAndRetentionSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_device_camera_quality_and_retention_settings_200_application_json_object = out

        return res

    def get_device_camera_video_settings(self, request: operations.GetDeviceCameraVideoSettingsRequest) -> operations.GetDeviceCameraVideoSettingsResponse:
        r"""Returns video settings for the given camera
        Returns video settings for the given camera
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceCameraVideoSettingsRequest, base_url, '/devices/{serial}/camera/video/settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceCameraVideoSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_device_camera_video_settings_200_application_json_object = out

        return res

    def get_network_camera_schedules(self, request: operations.GetNetworkCameraSchedulesRequest) -> operations.GetNetworkCameraSchedulesResponse:
        r"""Returns a list of all camera recording schedules.
        Returns a list of all camera recording schedules.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkCameraSchedulesRequest, base_url, '/networks/{networkId}/camera/schedules', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkCameraSchedulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_camera_schedules_200_application_json_objects = out

        return res

    def get_network_camera_video_link(self, request: operations.GetNetworkCameraVideoLinkRequest) -> operations.GetNetworkCameraVideoLinkResponse:
        r"""Returns video link to the specified camera
        Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkCameraVideoLinkRequest, base_url, '/networks/{networkId}/cameras/{serial}/videoLink', request)
        
        query_params = utils.get_query_params(operations.GetNetworkCameraVideoLinkRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkCameraVideoLinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_camera_video_link_200_application_json_object = out

        return res

    def update_device_camera_quality_and_retention_settings(self, request: operations.UpdateDeviceCameraQualityAndRetentionSettingsRequest) -> operations.UpdateDeviceCameraQualityAndRetentionSettingsResponse:
        r"""Update quality and retention settings for the given camera
        Update quality and retention settings for the given camera
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDeviceCameraQualityAndRetentionSettingsRequest, base_url, '/devices/{serial}/camera/qualityAndRetentionSettings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceCameraQualityAndRetentionSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_device_camera_quality_and_retention_settings_200_application_json_object = out

        return res

    def update_device_camera_video_settings(self, request: operations.UpdateDeviceCameraVideoSettingsRequest) -> operations.UpdateDeviceCameraVideoSettingsResponse:
        r"""Update video settings for the given camera
        Update video settings for the given camera
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDeviceCameraVideoSettingsRequest, base_url, '/devices/{serial}/camera/video/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceCameraVideoSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_device_camera_video_settings_200_application_json_object = out

        return res

    