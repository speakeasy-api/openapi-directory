<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Messages 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Archive all conversations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveAllConversationsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchiveAllConversationsResponse
     */
	public function archiveAllConversations(
        \OpenAPI\OpenAPI\Models\Operations\ArchiveAllConversationsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchiveAllConversationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/archive-all');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchiveAllConversationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Archive conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchiveConversationResponse
     */
	public function archiveConversation(
        \OpenAPI\OpenAPI\Models\Operations\ArchiveConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchiveConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/archive', \OpenAPI\OpenAPI\Models\Operations\ArchiveConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchiveConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Block conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BlockConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BlockConversationResponse
     */
	public function blockConversation(
        \OpenAPI\OpenAPI\Models\Operations\BlockConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BlockConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/block', \OpenAPI\OpenAPI\Models\Operations\BlockConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BlockConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse
     */
	public function deleteConversation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List conversation messages
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagesResponse
     */
	public function getConversationMessages(
        \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/messages', \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConversationMessagesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConversationMessages200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetConversationMessages200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List conversations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConversationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConversationsResponse
     */
	public function getConversations(
        \OpenAPI\OpenAPI\Models\Operations\GetConversationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConversationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConversationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConversationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConversations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetConversations200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Mark all conversations as read
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MarkAllConversationsReadRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MarkAllConversationsReadResponse
     */
	public function markAllConversationsRead(
        \OpenAPI\OpenAPI\Models\Operations\MarkAllConversationsReadRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MarkAllConversationsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/mark-all-read');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MarkAllConversationsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Mark conversation as read
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MarkConversationReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MarkConversationReadResponse
     */
	public function markConversationRead(
        \OpenAPI\OpenAPI\Models\Operations\MarkConversationReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MarkConversationReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/mark-read', \OpenAPI\OpenAPI\Models\Operations\MarkConversationReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MarkConversationReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Reply to conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplyToConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplyToConversationResponse
     */
	public function replyToConversation(
        \OpenAPI\OpenAPI\Models\Operations\ReplyToConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplyToConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/reply', \OpenAPI\OpenAPI\Models\Operations\ReplyToConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplyToConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->message = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Message', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Report conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReportConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReportConversationResponse
     */
	public function reportConversation(
        \OpenAPI\OpenAPI\Models\Operations\ReportConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReportConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/report', \OpenAPI\OpenAPI\Models\Operations\ReportConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReportConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Search conversations
     * 
     * Searches all conversations except blocked conversations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchConversationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchConversationsResponse
     */
	public function searchConversations(
        \OpenAPI\OpenAPI\Models\Operations\SearchConversationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchConversationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchConversationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchConversationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchConversations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SearchConversations200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Unarchive conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnarchiveConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnarchiveConversationResponse
     */
	public function unarchiveConversation(
        \OpenAPI\OpenAPI\Models\Operations\UnarchiveConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnarchiveConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/unarchive', \OpenAPI\OpenAPI\Models\Operations\UnarchiveConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnarchiveConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Unblock conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnblockConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnblockConversationResponse
     */
	public function unblockConversation(
        \OpenAPI\OpenAPI\Models\Operations\UnblockConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnblockConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/unblock', \OpenAPI\OpenAPI\Models\Operations\UnblockConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnblockConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}