/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Describes if the discovery of Linux subscriptions is enabled.
 */
export enum UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum {
  Enabled = "Enabled",
  Disabled = "Disabled",
}

/**
 * Lists the settings defined for discovering Linux subscriptions.
 */
export class UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoverySettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "OrganizationIntegration" })
  organizationIntegration?: shared.OrganizationIntegrationEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceRegions" })
  sourceRegions?: string[];
}

export class UpdateServiceSettingsRequestBody extends SpeakeasyBase {
  /**
   * Describes if updates are allowed to the service settings for Linux subscriptions. If you allow updates, you can aggregate Linux subscription data in more than one home Region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AllowUpdate" })
  allowUpdate?: boolean;

  /**
   * Describes if the discovery of Linux subscriptions is enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LinuxSubscriptionsDiscovery" })
  linuxSubscriptionsDiscovery: UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum;

  /**
   * Lists the settings defined for discovering Linux subscriptions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LinuxSubscriptionsDiscoverySettings" })
  @Type(
    () => UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoverySettings
  )
  linuxSubscriptionsDiscoverySettings: UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoverySettings;
}

export class UpdateServiceSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateServiceSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateServiceSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateServiceSettingsResponse?: shared.UpdateServiceSettingsResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
