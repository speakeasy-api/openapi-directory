// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateIntegrationResponseResponseContentHandlingStrategyEnum - <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
type CreateIntegrationResponseResponseContentHandlingStrategyEnum string

const (
	CreateIntegrationResponseResponseContentHandlingStrategyEnumConvertToBinary CreateIntegrationResponseResponseContentHandlingStrategyEnum = "CONVERT_TO_BINARY"
	CreateIntegrationResponseResponseContentHandlingStrategyEnumConvertToText   CreateIntegrationResponseResponseContentHandlingStrategyEnum = "CONVERT_TO_TEXT"
)

func (e CreateIntegrationResponseResponseContentHandlingStrategyEnum) ToPointer() *CreateIntegrationResponseResponseContentHandlingStrategyEnum {
	return &e
}

func (e *CreateIntegrationResponseResponseContentHandlingStrategyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONVERT_TO_BINARY":
		fallthrough
	case "CONVERT_TO_TEXT":
		*e = CreateIntegrationResponseResponseContentHandlingStrategyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateIntegrationResponseResponseContentHandlingStrategyEnum: %v", v)
	}
}

// CreateIntegrationResponseResponse - Success
type CreateIntegrationResponseResponse struct {
	ContentHandlingStrategy     *CreateIntegrationResponseResponseContentHandlingStrategyEnum `json:"ContentHandlingStrategy,omitempty"`
	IntegrationResponseID       *string                                                       `json:"IntegrationResponseId,omitempty"`
	IntegrationResponseKey      *string                                                       `json:"IntegrationResponseKey,omitempty"`
	ResponseParameters          map[string]string                                             `json:"ResponseParameters,omitempty"`
	ResponseTemplates           map[string]string                                             `json:"ResponseTemplates,omitempty"`
	TemplateSelectionExpression *string                                                       `json:"TemplateSelectionExpression,omitempty"`
}
