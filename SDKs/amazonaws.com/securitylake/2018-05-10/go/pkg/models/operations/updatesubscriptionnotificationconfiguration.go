// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateSubscriptionNotificationConfigurationPathParams struct {
	// The subscription ID for which the subscription notification is specified.
	SubscriptionID string `pathParam:"style=simple,explode=false,name=subscriptionId"`
}

type UpdateSubscriptionNotificationConfigurationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum - The HTTPS method used for the subscription notification.
type UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum string

const (
	UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnumPost UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum = "POST"
	UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnumPut  UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum = "PUT"
)

func (e *UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "POST":
		fallthrough
	case "PUT":
		*e = UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum: %s", s)
	}
}

type UpdateSubscriptionNotificationConfigurationRequestBody struct {
	// Create a new subscription notification for the specified subscription ID in Amazon Security Lake.
	CreateSqs *bool `json:"createSqs,omitempty"`
	// The key name for the subscription notification.
	HTTPSAPIKeyName *string `json:"httpsApiKeyName,omitempty"`
	// The key value for the subscription notification.
	HTTPSAPIKeyValue *string `json:"httpsApiKeyValue,omitempty"`
	// The HTTPS method used for the subscription notification.
	HTTPSMethod *UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum `json:"httpsMethod,omitempty"`
	// The Amazon Resource Name (ARN) specifying the role of the subscriber.
	RoleArn *string `json:"roleArn,omitempty"`
	// The subscription endpoint in Security Lake.
	SubscriptionEndpoint *string `json:"subscriptionEndpoint,omitempty"`
}

type UpdateSubscriptionNotificationConfigurationRequest struct {
	PathParams UpdateSubscriptionNotificationConfigurationPathParams
	Headers    UpdateSubscriptionNotificationConfigurationHeaders
	Request    UpdateSubscriptionNotificationConfigurationRequestBody `request:"mediaType=application/json"`
}

type UpdateSubscriptionNotificationConfigurationResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// AccountNotFoundException
	AccountNotFoundException interface{}
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InternalServerException
	InternalServerException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// Success
	UpdateSubscriptionNotificationConfigurationResponse *shared.UpdateSubscriptionNotificationConfigurationResponse
	// ValidationException
	ValidationException interface{}
}
