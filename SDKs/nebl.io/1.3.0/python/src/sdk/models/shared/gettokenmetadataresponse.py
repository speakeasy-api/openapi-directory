"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTokenMetadataResponseMetadataOfIssuanceDataUserDataMeta:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTokenMetadataResponseMetadataOfIssuanceDataUserData:
    r"""Metadata set by user on token"""
    
    meta: Optional[list[GetTokenMetadataResponseMetadataOfIssuanceDataUserDataMeta]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTokenMetadataResponseMetadataOfIssuanceData:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Token description"""  
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuer'), 'exclude': lambda f: f is None }})
    r"""Name of token issuer"""  
    token_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenName'), 'exclude': lambda f: f is None }})
    r"""Token symbol"""  
    user_data: Optional[GetTokenMetadataResponseMetadataOfIssuanceDataUserData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userData'), 'exclude': lambda f: f is None }})
    r"""Metadata set by user on token"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTokenMetadataResponseMetadataOfIssuance:
    r"""Metadata set at issuance"""
    
    data: Optional[GetTokenMetadataResponseMetadataOfIssuanceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTokenMetadataResponseMetadataOfUtxoUserData:
    r"""Metadata set by user on token for UTXO"""
    
    meta: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTokenMetadataResponseMetadataOfUtxo:
    r"""Metadata set for UTXO"""
    
    user_data: Optional[GetTokenMetadataResponseMetadataOfUtxoUserData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userData'), 'exclude': lambda f: f is None }})
    r"""Metadata set by user on token for UTXO"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTokenMetadataResponse:
    r"""An object containing the metadata of a token"""
    
    aggregation_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregationPolicy'), 'exclude': lambda f: f is None }})
    r"""Whether the tokens are aggregatable"""  
    divisibility: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('divisibility'), 'exclude': lambda f: f is None }})
    r"""Decimal places the token is divisible to"""  
    first_block: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstBlock'), 'exclude': lambda f: f is None }})
    r"""Block number token was issued in"""  
    initial_issuance_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialIssuanceAmount'), 'exclude': lambda f: f is None }})
    r"""Total tokens issued in initial issuance"""  
    issuance_txid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuanceTxid'), 'exclude': lambda f: f is None }})
    r"""TXID the token was issued with"""  
    issue_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueAddress'), 'exclude': lambda f: f is None }})
    r"""Address that issued the tokens"""  
    lock_status: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockStatus'), 'exclude': lambda f: f is None }})
    r"""Whether issuance of more tokens is locked"""  
    metadata_of_issuance: Optional[GetTokenMetadataResponseMetadataOfIssuance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataOfIssuance'), 'exclude': lambda f: f is None }})
    r"""Metadata set at issuance"""  
    metadata_of_utxo: Optional[GetTokenMetadataResponseMetadataOfUtxo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataOfUtxo'), 'exclude': lambda f: f is None }})
    r"""Metadata set for UTXO"""  
    num_of_burns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numOfBurns'), 'exclude': lambda f: f is None }})
    r"""Number of times tokens have been burned"""  
    num_of_holders: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numOfHolders'), 'exclude': lambda f: f is None }})
    r"""Total number of addresses this token is held at"""  
    num_of_issuance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numOfIssuance'), 'exclude': lambda f: f is None }})
    r"""Total number of times this token has been issued"""  
    num_of_transfers: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numOfTransfers'), 'exclude': lambda f: f is None }})
    r"""Total number of transactions of this token"""  
    some_utxo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('someUtxo'), 'exclude': lambda f: f is None }})
    r"""Example UTXO containing this token."""  
    token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenId'), 'exclude': lambda f: f is None }})
    r"""ID of the token"""  
    total_supply: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSupply'), 'exclude': lambda f: f is None }})
    r"""Total number of tokens in supply"""  
    