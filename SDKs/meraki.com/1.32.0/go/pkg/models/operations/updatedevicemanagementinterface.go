// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum - Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
type UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum string

const (
	UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnumDisabled      UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum = "disabled"
	UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnumEnabled       UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum = "enabled"
	UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnumNotConfigured UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum = "not configured"
)

func (e UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum) ToPointer() *UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum {
	return &e
}

func (e *UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		fallthrough
	case "not configured":
		*e = UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum: %v", v)
	}
}

// UpdateDeviceManagementInterfaceRequestBodyWan1 - WAN 1 settings
type UpdateDeviceManagementInterfaceRequestBodyWan1 struct {
	// Up to two DNS IPs.
	StaticDNS []string `json:"staticDns,omitempty"`
	// The IP of the gateway on the WAN.
	StaticGatewayIP *string `json:"staticGatewayIp,omitempty"`
	// The IP the device should use on the WAN.
	StaticIP *string `json:"staticIp,omitempty"`
	// The subnet mask for the WAN.
	StaticSubnetMask *string `json:"staticSubnetMask,omitempty"`
	// Configure the interface to have static IP settings or use DHCP.
	UsingStaticIP *bool `json:"usingStaticIp,omitempty"`
	// The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
	Vlan *int64 `json:"vlan,omitempty"`
	// Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
	WanEnabled *UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum `json:"wanEnabled,omitempty"`
}

// UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum - Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
type UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum string

const (
	UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnumDisabled      UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum = "disabled"
	UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnumEnabled       UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum = "enabled"
	UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnumNotConfigured UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum = "not configured"
)

func (e UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum) ToPointer() *UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum {
	return &e
}

func (e *UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		fallthrough
	case "not configured":
		*e = UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum: %v", v)
	}
}

// UpdateDeviceManagementInterfaceRequestBodyWan2 - WAN 2 settings (only for MX devices)
type UpdateDeviceManagementInterfaceRequestBodyWan2 struct {
	// Up to two DNS IPs.
	StaticDNS []string `json:"staticDns,omitempty"`
	// The IP of the gateway on the WAN.
	StaticGatewayIP *string `json:"staticGatewayIp,omitempty"`
	// The IP the device should use on the WAN.
	StaticIP *string `json:"staticIp,omitempty"`
	// The subnet mask for the WAN.
	StaticSubnetMask *string `json:"staticSubnetMask,omitempty"`
	// Configure the interface to have static IP settings or use DHCP.
	UsingStaticIP *bool `json:"usingStaticIp,omitempty"`
	// The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
	Vlan *int64 `json:"vlan,omitempty"`
	// Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
	WanEnabled *UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum `json:"wanEnabled,omitempty"`
}

type UpdateDeviceManagementInterfaceRequestBody struct {
	// WAN 1 settings
	Wan1 *UpdateDeviceManagementInterfaceRequestBodyWan1 `json:"wan1,omitempty"`
	// WAN 2 settings (only for MX devices)
	Wan2 *UpdateDeviceManagementInterfaceRequestBodyWan2 `json:"wan2,omitempty"`
}

type UpdateDeviceManagementInterfaceRequest struct {
	RequestBody *UpdateDeviceManagementInterfaceRequestBody `request:"mediaType=application/json"`
	Serial      string                                      `pathParam:"style=simple,explode=false,name=serial"`
}

type UpdateDeviceManagementInterfaceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateDeviceManagementInterface200ApplicationJSONObject map[string]interface{}
}
