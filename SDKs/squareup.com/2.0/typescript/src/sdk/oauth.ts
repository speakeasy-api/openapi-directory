/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OAuth {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * ObtainToken
   *
   * @remarks
   * Returns an OAuth access token.
   *
   * The endpoint supports distinct methods of obtaining OAuth access tokens.
   * Applications specify a method by adding the `grant_type` parameter
   * in the request and also provide relevant information.
   *
   * __Note:__ Regardless of the method application specified,
   * the endpoint always returns two items; an OAuth access token and
   * a refresh token in the response.
   *
   * __OAuth tokens should only live on secure servers. Application clients
   * should never interact directly with OAuth tokens__.
   */
  obtainToken(
    req: shared.ObtainTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObtainTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ObtainTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/oauth2/token";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObtainTokenResponse =
        new operations.ObtainTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obtainTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.ObtainTokenResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RenewToken
   *
   * @remarks
   * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see
   * [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
   *
   *
   * Renews an OAuth access token before it expires.
   *
   * OAuth access tokens besides your application's personal access token expire after __30 days__.
   * You can also renew expired tokens within __15 days__ of their expiration.
   * You cannot renew an access token that has been expired for more than 15 days.
   * Instead, the associated user must re-complete the OAuth flow from the beginning.
   *
   * __Important:__ The `Authorization` header for this endpoint must have the
   * following format:
   *
   * ```
   * Authorization: Client APPLICATION_SECRET
   * ```
   *
   * Replace `APPLICATION_SECRET` with the application secret on the Credentials
   * page in the [developer dashboard](https://developer.squareup.com/apps).
   */
  renewToken(
    req: operations.RenewTokenRequest,
    security: operations.RenewTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RenewTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RenewTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/oauth2/clients/{client_id}/access-token/renew",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "renewTokenRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RenewTokenSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RenewTokenResponse =
        new operations.RenewTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.renewTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.RenewTokenResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RevokeToken
   *
   * @remarks
   * Revokes an access token generated with the OAuth flow.
   *
   * If an account has more than one OAuth access token for your application, this
   * endpoint revokes all of them, regardless of which token you specify. When an
   * OAuth access token is revoked, all of the active subscriptions associated
   * with that OAuth token are canceled immediately.
   *
   * __Important:__ The `Authorization` header for this endpoint must have the
   * following format:
   *
   * ```
   * Authorization: Client APPLICATION_SECRET
   * ```
   *
   * Replace `APPLICATION_SECRET` with the application secret on the OAuth
   * page in the [developer dashboard](https://developer.squareup.com/apps).
   */
  revokeToken(
    req: shared.RevokeTokenRequest,
    security: operations.RevokeTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RevokeTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.RevokeTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/oauth2/revoke";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RevokeTokenSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RevokeTokenResponse =
        new operations.RevokeTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.revokeTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.RevokeTokenResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
