"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import workerconfig as shared_workerconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WorkerPoolRegionsEnum(str, Enum):
    REGION_UNSPECIFIED = 'REGION_UNSPECIFIED'
    US_CENTRAL1 = 'us-central1'
    US_WEST1 = 'us-west1'
    US_EAST1 = 'us-east1'
    US_EAST4 = 'us-east4'

class WorkerPoolStatusEnum(str, Enum):
    r"""Output only. WorkerPool Status."""
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    CREATING = 'CREATING'
    RUNNING = 'RUNNING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkerPool:
    r"""Configuration for a WorkerPool to run the builds. Workers are machines that Cloud Build uses to run your builds. By default, all workers run in a project owned by Cloud Build. To have full control over the workers that execute your builds -- such as enabling them to access private resources on your private network -- you can request Cloud Build to run the workers in your own project by creating a custom workers pool."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time at which the request to create the `WorkerPool` was received."""  
    delete_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleteTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time at which the request to delete the `WorkerPool` was received."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""User-defined name of the `WorkerPool`."""  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})
    r"""The project ID of the GCP project for which the `WorkerPool` is created."""  
    regions: Optional[list[WorkerPoolRegionsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regions'), 'exclude': lambda f: f is None }})
    r"""List of regions to create the `WorkerPool`. Regions can't be empty. If Cloud Build adds a new GCP region in the future, the existing `WorkerPool` will not be enabled in the new region automatically; you must add the new region to the `regions` field to enable the `WorkerPool` in that region."""  
    service_account_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccountEmail'), 'exclude': lambda f: f is None }})
    r"""Output only. The service account used to manage the `WorkerPool`. The service account must have the Compute Instance Admin (Beta) permission at the project level."""  
    status: Optional[WorkerPoolStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Output only. WorkerPool Status."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time at which the request to update the `WorkerPool` was received."""  
    worker_config: Optional[shared_workerconfig.WorkerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerConfig'), 'exclude': lambda f: f is None }})
    r"""WorkerConfig defines the configuration to be used for a creating workers in the pool."""  
    worker_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerCount'), 'exclude': lambda f: f is None }})
    r"""Total number of workers to be created across all requested regions."""  
    