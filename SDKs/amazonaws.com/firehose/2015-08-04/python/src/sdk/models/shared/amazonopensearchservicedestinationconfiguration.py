"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amazonopensearchservicebufferinghints as shared_amazonopensearchservicebufferinghints
from ..shared import amazonopensearchserviceindexrotationperiod_enum as shared_amazonopensearchserviceindexrotationperiod_enum
from ..shared import amazonopensearchserviceretryoptions as shared_amazonopensearchserviceretryoptions
from ..shared import amazonopensearchservices3backupmode_enum as shared_amazonopensearchservices3backupmode_enum
from ..shared import cloudwatchloggingoptions as shared_cloudwatchloggingoptions
from ..shared import processingconfiguration as shared_processingconfiguration
from ..shared import s3destinationconfiguration as shared_s3destinationconfiguration
from ..shared import vpcconfiguration as shared_vpcconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AmazonopensearchserviceDestinationConfiguration:
    r"""Describes the configuration of a destination in Amazon OpenSearch Service"""
    
    index_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexName') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleARN') }})  
    s3_configuration: shared_s3destinationconfiguration.S3DestinationConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Configuration') }})
    r"""Describes the configuration of a destination in Amazon S3."""  
    buffering_hints: Optional[shared_amazonopensearchservicebufferinghints.AmazonopensearchserviceBufferingHints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BufferingHints'), 'exclude': lambda f: f is None }})  
    cloud_watch_logging_options: Optional[shared_cloudwatchloggingoptions.CloudWatchLoggingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})
    r"""Describes the Amazon CloudWatch logging options for your delivery stream."""  
    cluster_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterEndpoint'), 'exclude': lambda f: f is None }})  
    domain_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainARN'), 'exclude': lambda f: f is None }})  
    index_rotation_period: Optional[shared_amazonopensearchserviceindexrotationperiod_enum.AmazonopensearchserviceIndexRotationPeriodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexRotationPeriod'), 'exclude': lambda f: f is None }})  
    processing_configuration: Optional[shared_processingconfiguration.ProcessingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingConfiguration'), 'exclude': lambda f: f is None }})
    r"""Describes a data processing configuration."""  
    retry_options: Optional[shared_amazonopensearchserviceretryoptions.AmazonopensearchserviceRetryOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryOptions'), 'exclude': lambda f: f is None }})  
    s3_backup_mode: Optional[shared_amazonopensearchservices3backupmode_enum.AmazonopensearchserviceS3BackupModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3BackupMode'), 'exclude': lambda f: f is None }})  
    type_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TypeName'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_vpcconfiguration.VpcConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfiguration'), 'exclude': lambda f: f is None }})
    r"""The details of the VPC of the Amazon ES destination."""  
    