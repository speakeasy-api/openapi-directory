"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BankAccount:
    
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountName'), 'exclude': lambda f: f is None }})
    r"""The name of the account"""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountNumber'), 'exclude': lambda f: f is None }})
    r"""The account number"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})
    r"""Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)"""  
    bsb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BSB'), 'exclude': lambda f: f is None }})
    r"""The BSB number of the account"""  
    remainder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Remainder'), 'exclude': lambda f: f is None }})
    r"""If this account is the Remaining bank account"""  
    statement_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatementText'), 'exclude': lambda f: f is None }})
    r"""The text that will appear on your employee's bank statement when they receive payment"""  
    