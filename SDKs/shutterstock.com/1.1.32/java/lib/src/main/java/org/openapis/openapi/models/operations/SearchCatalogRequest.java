/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class SearchCatalogRequest {
    /**
     * Filter by asset type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=asset_type")
    public SearchCatalogAssetTypeEnum[] assetType;
    public SearchCatalogRequest withAssetType(SearchCatalogAssetTypeEnum[] assetType) {
        this.assetType = assetType;
        return this;
    }
    
    /**
     * Filter by collection id
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=collection_id")
    public String[] collectionId;
    public SearchCatalogRequest withCollectionId(String[] collectionId) {
        this.collectionId = collectionId;
        return this;
    }
    
    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public SearchCatalogRequest withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * Number of results per page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public SearchCatalogRequest withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * One or more search terms separated by spaces
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    public String query;
    public SearchCatalogRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Sort by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public SearchCatalogSortEnum sort;
    public SearchCatalogRequest withSort(SearchCatalogSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
}
