// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type SignInAttemptCategoryEnum string

const (
	SignInAttemptCategoryEnumSuccess                 SignInAttemptCategoryEnum = "success"
	SignInAttemptCategoryEnumCredentialsFailed       SignInAttemptCategoryEnum = "credentials_failed"
	SignInAttemptCategoryEnumMfaFailed               SignInAttemptCategoryEnum = "mfa_failed"
	SignInAttemptCategoryEnumModernVersionFailed     SignInAttemptCategoryEnum = "modern_version_failed"
	SignInAttemptCategoryEnumFirewallFailed          SignInAttemptCategoryEnum = "firewall_failed"
	SignInAttemptCategoryEnumFirewallReportedSuccess SignInAttemptCategoryEnum = "firewall_reported_success"
)

func (e *SignInAttemptCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "credentials_failed":
		fallthrough
	case "mfa_failed":
		fallthrough
	case "modern_version_failed":
		fallthrough
	case "firewall_failed":
		fallthrough
	case "firewall_reported_success":
		*e = SignInAttemptCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SignInAttemptCategoryEnum: %s", s)
	}
}

type SignInAttemptTypeEnum string

const (
	SignInAttemptTypeEnumCredentialsOk          SignInAttemptTypeEnum = "credentials_ok"
	SignInAttemptTypeEnumMfaOk                  SignInAttemptTypeEnum = "mfa_ok"
	SignInAttemptTypeEnumPasswordSecretBad      SignInAttemptTypeEnum = "password_secret_bad"
	SignInAttemptTypeEnumMfaMissing             SignInAttemptTypeEnum = "mfa_missing"
	SignInAttemptTypeEnumTotpDisabled           SignInAttemptTypeEnum = "totp_disabled"
	SignInAttemptTypeEnumTotpBad                SignInAttemptTypeEnum = "totp_bad"
	SignInAttemptTypeEnumTotpTimeout            SignInAttemptTypeEnum = "totp_timeout"
	SignInAttemptTypeEnumU2fDisabled            SignInAttemptTypeEnum = "u2f_disabled"
	SignInAttemptTypeEnumU2fBad                 SignInAttemptTypeEnum = "u2f_bad"
	SignInAttemptTypeEnumU2fTimout              SignInAttemptTypeEnum = "u2f_timout"
	SignInAttemptTypeEnumDuoDisabled            SignInAttemptTypeEnum = "duo_disabled"
	SignInAttemptTypeEnumDuoBad                 SignInAttemptTypeEnum = "duo_bad"
	SignInAttemptTypeEnumDuoTimeout             SignInAttemptTypeEnum = "duo_timeout"
	SignInAttemptTypeEnumDuoNativeBad           SignInAttemptTypeEnum = "duo_native_bad"
	SignInAttemptTypeEnumPlatformSecretDisabled SignInAttemptTypeEnum = "platform_secret_disabled"
	SignInAttemptTypeEnumPlatformSecretBad      SignInAttemptTypeEnum = "platform_secret_bad"
	SignInAttemptTypeEnumPlatformSecretProxy    SignInAttemptTypeEnum = "platform_secret_proxy"
	SignInAttemptTypeEnumCodeDisabled           SignInAttemptTypeEnum = "code_disabled"
	SignInAttemptTypeEnumCodeBad                SignInAttemptTypeEnum = "code_bad"
	SignInAttemptTypeEnumCodeTimeout            SignInAttemptTypeEnum = "code_timeout"
	SignInAttemptTypeEnumIPBlocked              SignInAttemptTypeEnum = "ip_blocked"
	SignInAttemptTypeEnumContinentBlocked       SignInAttemptTypeEnum = "continent_blocked"
	SignInAttemptTypeEnumCountryBlocked         SignInAttemptTypeEnum = "country_blocked"
	SignInAttemptTypeEnumAnonymousBlocked       SignInAttemptTypeEnum = "anonymous_blocked"
	SignInAttemptTypeEnumAllBlocked             SignInAttemptTypeEnum = "all_blocked"
	SignInAttemptTypeEnumModernVersionMissing   SignInAttemptTypeEnum = "modern_version_missing"
	SignInAttemptTypeEnumModernVersionOld       SignInAttemptTypeEnum = "modern_version_old"
)

func (e *SignInAttemptTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "credentials_ok":
		fallthrough
	case "mfa_ok":
		fallthrough
	case "password_secret_bad":
		fallthrough
	case "mfa_missing":
		fallthrough
	case "totp_disabled":
		fallthrough
	case "totp_bad":
		fallthrough
	case "totp_timeout":
		fallthrough
	case "u2f_disabled":
		fallthrough
	case "u2f_bad":
		fallthrough
	case "u2f_timout":
		fallthrough
	case "duo_disabled":
		fallthrough
	case "duo_bad":
		fallthrough
	case "duo_timeout":
		fallthrough
	case "duo_native_bad":
		fallthrough
	case "platform_secret_disabled":
		fallthrough
	case "platform_secret_bad":
		fallthrough
	case "platform_secret_proxy":
		fallthrough
	case "code_disabled":
		fallthrough
	case "code_bad":
		fallthrough
	case "code_timeout":
		fallthrough
	case "ip_blocked":
		fallthrough
	case "continent_blocked":
		fallthrough
	case "country_blocked":
		fallthrough
	case "anonymous_blocked":
		fallthrough
	case "all_blocked":
		fallthrough
	case "modern_version_missing":
		fallthrough
	case "modern_version_old":
		*e = SignInAttemptTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SignInAttemptTypeEnum: %s", s)
	}
}

// SignInAttempt - A single sign-in attempt object
type SignInAttempt struct {
	Category *SignInAttemptCategoryEnum `json:"category,omitempty"`
	// Metadata gathered about the client
	Client *Client `json:"client,omitempty"`
	// Country ISO Code
	Country *string `json:"country,omitempty"`
	// Additional information about the sign-in attempt
	Details     *Details `json:"details,omitempty"`
	SessionUUID *string  `json:"session_uuid,omitempty"`
	// User object
	TargetUser *User                  `json:"target_user,omitempty"`
	Timestamp  *time.Time             `json:"timestamp,omitempty"`
	Type       *SignInAttemptTypeEnum `json:"type,omitempty"`
	UUID       *string                `json:"uuid,omitempty"`
}
