/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
 */
export class UpdateConfigRequestBodyConfigData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "antennaDownlinkConfig" })
  @Type(() => shared.AntennaDownlinkConfig)
  antennaDownlinkConfig?: shared.AntennaDownlinkConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "antennaDownlinkDemodDecodeConfig" })
  @Type(() => shared.AntennaDownlinkDemodDecodeConfig)
  antennaDownlinkDemodDecodeConfig?: shared.AntennaDownlinkDemodDecodeConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "antennaUplinkConfig" })
  @Type(() => shared.AntennaUplinkConfig)
  antennaUplinkConfig?: shared.AntennaUplinkConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "dataflowEndpointConfig" })
  @Type(() => shared.DataflowEndpointConfig)
  dataflowEndpointConfig?: shared.DataflowEndpointConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "s3RecordingConfig" })
  @Type(() => shared.S3RecordingConfig)
  s3RecordingConfig?: shared.S3RecordingConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "trackingConfig" })
  @Type(() => shared.TrackingConfig)
  trackingConfig?: shared.TrackingConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "uplinkEchoConfig" })
  @Type(() => shared.UplinkEchoConfig)
  uplinkEchoConfig?: shared.UplinkEchoConfig;
}

export class UpdateConfigRequestBody extends SpeakeasyBase {
  /**
   * <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configData" })
  @Type(() => UpdateConfigRequestBodyConfigData)
  configData: UpdateConfigRequestBodyConfigData;

  /**
   * Name of a <code>Config</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Type of a <code>Config</code>.
 */
export enum UpdateConfigConfigTypeEnum {
  AntennaDownlink = "antenna-downlink",
  AntennaDownlinkDemodDecode = "antenna-downlink-demod-decode",
  AntennaUplink = "antenna-uplink",
  DataflowEndpoint = "dataflow-endpoint",
  Tracking = "tracking",
  UplinkEcho = "uplink-echo",
  S3Recording = "s3-recording",
}

export class UpdateConfigRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateConfigRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * UUID of a <code>Config</code>.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=configId",
  })
  configId: string;

  /**
   * Type of a <code>Config</code>.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=configType",
  })
  configType: UpdateConfigConfigTypeEnum;
}

export class UpdateConfigResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  configIdResponse?: shared.ConfigIdResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DependencyException
   */
  @SpeakeasyMetadata()
  dependencyException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;
}
