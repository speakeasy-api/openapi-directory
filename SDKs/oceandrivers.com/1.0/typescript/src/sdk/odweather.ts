/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * ODWeather API service
 */
export class ODWeather {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get forecast and realtime information for known points<br/>None
   */
  compareStation(
    req: operations.CompareStationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CompareStationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompareStationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/compareStation/{stationName}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompareStationResponse =
        new operations.CompareStationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get data from the aemet stations<br/>None
   */
  getAemetStation(
    req: operations.GetAemetStationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAemetStationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAemetStationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/getAemetStation/{stationName}/{period}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAemetStationResponse =
        new operations.GetAemetStationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get data from the easywind weather stations<br/>None
   */
  getEasywind(
    req: operations.GetEasywindRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEasywindResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEasywindRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/getEasyWind/{easywindId}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEasywindResponse =
        new operations.GetEasywindResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get stations in an event<br/>None
   */
  getEventStations(
    req: operations.GetEventStationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventStationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventStationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/getEventStations/{eventId}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventStationsResponse =
        new operations.GetEventStationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get forecast points of a yatchclub<br/>None
   */
  getForecastPoints(
    req: operations.GetForecastPointsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetForecastPointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetForecastPointsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/getForecastPoints/{yatchclubid}/language/{language}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetForecastPointsResponse =
        new operations.GetForecastPointsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get timeseries forecast information<br/>None
   */
  getForecastTimeSeries(
    req: operations.GetForecastTimeSeriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetForecastTimeSeriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetForecastTimeSeriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/getForecastTimeSeries/{latitude}/{longitude}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetForecastTimeSeriesResponse =
        new operations.GetForecastTimeSeriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get timeseries forecast information<br/>None
   */
  getForecastTimeSeriesWrf(
    req: operations.GetForecastTimeSeriesWrfRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetForecastTimeSeriesWrfResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetForecastTimeSeriesWrfRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/getForecastTimeSeriesWrf/{latitude}/{longitude}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetForecastTimeSeriesWrfResponse =
        new operations.GetForecastTimeSeriesWrfResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get data from the socib bahia de palma buoy<br/>None
   */
  getSocibWeatherStation(
    req: operations.GetSocibWeatherStationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSocibWeatherStationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSocibWeatherStationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/getSocibWeatherStation/{stationName}/{period}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSocibWeatherStationResponse =
        new operations.GetSocibWeatherStationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get data from the weather display software<br/>None
   */
  getWeatherDisplay(
    req: operations.GetWeatherDisplayRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWeatherDisplayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWeatherDisplayRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1.0/getWeatherDisplay/{stationName}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWeatherDisplayResponse =
        new operations.GetWeatherDisplayResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get forecast and realtime information for known points<br/>None
   */
  getWebCams(
    config?: AxiosRequestConfig
  ): Promise<operations.GetWebCamsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1.0/getWebCams/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWebCamsResponse =
        new operations.GetWebCamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
