<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class UsersManagement 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete the user
     * 
     * This endpoint deletes the user.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserResponse
     */
	public function deleteUsersIdUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}', \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the given user configurations. deletions on keys prefixed by 'biapi.' (except callback_url) are ignored
     * 
     * - keys (string): list of coma separated keys to be deleted.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConfigResponse
     */
	public function deleteUsersIdUserConfig(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/config', \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse
     */
	public function getUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUsers200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserResponse
     */
	public function getUsersIdUser(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get configuration of a user.
     * 
     * <br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConfigResponse
     */
	public function getUsersIdUserConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/config', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersIdUserConfig200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get profiles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesResponse
     */
	public function getUsersIdUserProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/profiles', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersIdUserProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfiles200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the main profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesMainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesMainResponse
     */
	public function getUsersIdUserProfilesMain(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesMainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesMainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/profiles/main', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesMainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesMainRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesMainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Profile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesIdProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesIdProfileResponse
     */
	public function getUsersIdUserProfilesIdProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesIdProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesIdProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/profiles/{id_profile}', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesIdProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesIdProfileRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserProfilesIdProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Profile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change configuration of a user. modifications on keys prefixed by 'biapi.' (except callback_url) are ignored
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConfigResponse
     */
	public function postUsersIdUserConfig(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/config', \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create a token
     * 
     * Create an access_token for this user and get it.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserTokenResponse
     */
	public function postUsersIdUserToken(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/token', \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postUsersIdUserToken200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}