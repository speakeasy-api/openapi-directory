// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetV2MeetingsJSONRequest struct {
	// Filters meetings by account_id. Multiple account ids can be applied
	AccountID *string `queryParam:"style=form,explode=true,name=account_id"`
	// Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.
	//
	// ---CUSTOM---
	// {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
	//
	CreatedAt []string `queryParam:"style=form,explode=false,name=created_at"`
	// List of event IDs. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can't be found, that record won't be returned and your request will be successful
	EventIds []string `queryParam:"style=form,explode=false,name=event_ids"`
	// List of UIDs provided by calendar provider. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can't be found, that record won't be returned and your request will be successful
	ICalUids []string `queryParam:"style=form,explode=false,name=i_cal_uids"`
	// IDs of meetings to fetch. If a record can't be found, that record won't be returned and your request will be successful
	Ids []int64 `queryParam:"style=form,explode=false,name=ids"`
	// Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects
	IncludeMeetingsSettings *bool `queryParam:"style=form,explode=true,name=include_meetings_settings"`
	// Whether to include total_pages and total_count in the metadata. Defaults to false
	IncludePagingCounts *bool `queryParam:"style=form,explode=true,name=include_paging_counts"`
	// Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
	LimitPagingCounts *bool `queryParam:"style=form,explode=true,name=limit_paging_counts"`
	// The current page to fetch results from. Defaults to 1
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// How many records to show per page in the range [1, 100]. Defaults to 25
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Filters meetings by person_id. Multiple person ids can be applied
	PersonID *string `queryParam:"style=form,explode=true,name=person_id"`
	// Filters meetings by person_id. Multiple person ids can be applied
	PersonIds []int64 `queryParam:"style=form,explode=false,name=person_ids"`
	// Whether to include deleted events in the result
	ShowDeleted *bool `queryParam:"style=form,explode=true,name=show_deleted"`
	// Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time
	SortBy *string `queryParam:"style=form,explode=true,name=sort_by"`
	// Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
	SortDirection *string `queryParam:"style=form,explode=true,name=sort_direction"`
	// Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.
	//
	// ---CUSTOM---
	// {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
	//
	StartTime []string `queryParam:"style=form,explode=false,name=start_time"`
	// Filters meetings by status. Possible values are: pending, booked, failed, retry
	Status *string `queryParam:"style=form,explode=true,name=status"`
	// Filters meetings by task_id. Multiple task ids can be applied
	TaskIds []int64 `queryParam:"style=form,explode=false,name=task_ids"`
	// Filters meetings by user_guid. Multiple user guids can be applied
	UserGuids []string `queryParam:"style=form,explode=false,name=user_guids"`
}

type GetV2MeetingsJSONResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
