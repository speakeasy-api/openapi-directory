"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import payoutscheduleresponse as shared_payoutscheduleresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAccountResponse:
    r"""OK - the request has succeeded."""
    
    account_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountCode') }})
    r"""The code of the account."""  
    payout_schedule: Optional[shared_payoutscheduleresponse.PayoutScheduleResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutSchedule'), 'exclude': lambda f: f is None }})  
    psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pspReference'), 'exclude': lambda f: f is None }})
    r"""The reference of a request. Can be used to uniquely identify the request."""  
    result_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultCode'), 'exclude': lambda f: f is None }})
    r"""The result code."""  
    submitted_async: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submittedAsync'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied:
    * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received.
    * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
    """  
    