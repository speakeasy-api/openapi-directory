// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateMetricSetHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateMetricSetRequestBodyMetricSetFrequencyEnum - The frequency with which the source data will be analyzed for anomalies.
type CreateMetricSetRequestBodyMetricSetFrequencyEnum string

const (
	CreateMetricSetRequestBodyMetricSetFrequencyEnumP1D   CreateMetricSetRequestBodyMetricSetFrequencyEnum = "P1D"
	CreateMetricSetRequestBodyMetricSetFrequencyEnumPt1H  CreateMetricSetRequestBodyMetricSetFrequencyEnum = "PT1H"
	CreateMetricSetRequestBodyMetricSetFrequencyEnumPt10M CreateMetricSetRequestBodyMetricSetFrequencyEnum = "PT10M"
	CreateMetricSetRequestBodyMetricSetFrequencyEnumPt5M  CreateMetricSetRequestBodyMetricSetFrequencyEnum = "PT5M"
)

func (e *CreateMetricSetRequestBodyMetricSetFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "P1D":
		fallthrough
	case "PT1H":
		fallthrough
	case "PT10M":
		fallthrough
	case "PT5M":
		*e = CreateMetricSetRequestBodyMetricSetFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMetricSetRequestBodyMetricSetFrequencyEnum: %s", s)
	}
}

// CreateMetricSetRequestBodyMetricSource - Contains information about source data used to generate metrics.
type CreateMetricSetRequestBodyMetricSource struct {
	AppFlowConfig        *shared.AppFlowConfig        `json:"AppFlowConfig,omitempty"`
	AthenaSourceConfig   *shared.AthenaSourceConfig   `json:"AthenaSourceConfig,omitempty"`
	CloudWatchConfig     *shared.CloudWatchConfig     `json:"CloudWatchConfig,omitempty"`
	RDSSourceConfig      *shared.RDSSourceConfig      `json:"RDSSourceConfig,omitempty"`
	RedshiftSourceConfig *shared.RedshiftSourceConfig `json:"RedshiftSourceConfig,omitempty"`
	// Contains information about the configuration of the S3 bucket that contains source files.
	S3SourceConfig *shared.S3SourceConfig `json:"S3SourceConfig,omitempty"`
}

// CreateMetricSetRequestBodyTimestampColumn - Contains information about the column used to track time in a source data file.
type CreateMetricSetRequestBodyTimestampColumn struct {
	ColumnFormat *string `json:"ColumnFormat,omitempty"`
	ColumnName   *string `json:"ColumnName,omitempty"`
}

type CreateMetricSetRequestBody struct {
	// The ARN of the anomaly detector that will use the dataset.
	AnomalyDetectorArn string `json:"AnomalyDetectorArn"`
	// A list of filters that specify which data is kept for anomaly detection.
	DimensionFilterList []shared.MetricSetDimensionFilter `json:"DimensionFilterList,omitempty"`
	// A list of the fields you want to treat as dimensions.
	DimensionList []string `json:"DimensionList,omitempty"`
	// A list of metrics that the dataset will contain.
	MetricList []shared.Metric `json:"MetricList"`
	// A description of the dataset you are creating.
	MetricSetDescription *string `json:"MetricSetDescription,omitempty"`
	// The frequency with which the source data will be analyzed for anomalies.
	MetricSetFrequency *CreateMetricSetRequestBodyMetricSetFrequencyEnum `json:"MetricSetFrequency,omitempty"`
	// The name of the dataset.
	MetricSetName string `json:"MetricSetName"`
	// Contains information about source data used to generate metrics.
	MetricSource CreateMetricSetRequestBodyMetricSource `json:"MetricSource"`
	// After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.
	Offset *int64 `json:"Offset,omitempty"`
	// A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.
	Tags map[string]string `json:"Tags,omitempty"`
	// Contains information about the column used to track time in a source data file.
	TimestampColumn *CreateMetricSetRequestBodyTimestampColumn `json:"TimestampColumn,omitempty"`
	// The time zone in which your source data was recorded.
	Timezone *string `json:"Timezone,omitempty"`
}

type CreateMetricSetRequest struct {
	Headers CreateMetricSetHeaders
	Request CreateMetricSetRequestBody `request:"mediaType=application/json"`
}

type CreateMetricSetResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateMetricSetResponse *shared.CreateMetricSetResponse
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// ValidationException
	ValidationException interface{}
}
