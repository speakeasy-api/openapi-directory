"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import proto2descriptorproto as shared_proto2descriptorproto
from ..shared import proto2enumdescriptorproto as shared_proto2enumdescriptorproto
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Proto2FileDescriptorProto:
    r"""Describes a complete .proto file."""
    
    enum_type: Optional[list[shared_proto2enumdescriptorproto.Proto2EnumDescriptorProto]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumType'), 'exclude': lambda f: f is None }})  
    message_type: Optional[list[shared_proto2descriptorproto.Proto2DescriptorProto]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageType'), 'exclude': lambda f: f is None }})
    r"""All top-level definitions in this file."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""file name, relative to root of source tree"""  
    package: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package'), 'exclude': lambda f: f is None }})
    r"""e.g. \\"foo\\", \\"foo.bar\\", etc."""  
    syntax: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syntax'), 'exclude': lambda f: f is None }})
    r"""The syntax of the proto file. The supported values are \\"proto2\\", \\"proto3\\", and \\"editions\\". If `edition` is present, this value must be \\"editions\\"."""  
    