// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LocationRuleTypeEnum - The type of location rule to be applied.
// Allow: items at `conditions.from_location` can only move to `conditions.to_location` and locations allowed in other `allow` rules (destination whitelist).
// Disallow: items at `conditions.from_location` cannot be moved to `conditions.to_location` and locations disallowed in other `disallow` rules (destination blacklist).
// Disappeared: items disappearing at `conditions.from_location` will be moved to `parameters.location` after `parameters.time_s` seconds.
// Debounce: items moves from `conditions.from_location` (and optionally to `conditions.to_location`) will be debounced with a period of `parameters.time_s` seconds, for a maximum of `parameters.max_periods` periods.
type LocationRuleTypeEnum string

const (
	LocationRuleTypeEnumAllow       LocationRuleTypeEnum = "allow"
	LocationRuleTypeEnumDisallow    LocationRuleTypeEnum = "disallow"
	LocationRuleTypeEnumDisappeared LocationRuleTypeEnum = "disappeared"
	LocationRuleTypeEnumDebounce    LocationRuleTypeEnum = "debounce"
)

func (e *LocationRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allow":
		fallthrough
	case "disallow":
		fallthrough
	case "disappeared":
		fallthrough
	case "debounce":
		*e = LocationRuleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LocationRuleTypeEnum: %s", s)
	}
}
