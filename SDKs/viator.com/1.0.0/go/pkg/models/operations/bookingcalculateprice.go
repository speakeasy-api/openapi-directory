// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type BookingCalculatepriceRequestBodyItemsTravellers struct {
	// **unique numeric identifier** for the age band
	// - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
	//
	BandID *int64 `json:"bandId,omitempty"`
}

type BookingCalculatepriceRequestBodyItems struct {
	// **unique alphanumeric identifier** of the product the total price for which you which to calculate
	ProductCode *string `json:"productCode,omitempty"`
	// **alphanumeric identifier** for the tour grade for which to calculate the total price
	TourGradeCode *string `json:"tourGradeCode,omitempty"`
	// **date** for which to calculate the total price (must be in the future)
	TravelDate *string `json:"travelDate,omitempty"`
	// **array of objects** detailing the age bands for which to calculate the total price
	Travellers []BookingCalculatepriceRequestBodyItemsTravellers `json:"travellers,omitempty"`
}

type BookingCalculatepriceRequestBody struct {
	// **currency code** for the currency in which to display pricing details
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **array** of travel detail objects
	Items []BookingCalculatepriceRequestBodyItems `json:"items,omitempty"`
}

type BookingCalculatepriceRequest struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string                            `header:"style=simple,explode=false,name=Accept-Language"`
	RequestBody    *BookingCalculatepriceRequestBody `request:"mediaType=application/json"`
}

type BookingCalculateprice200ApplicationJSONDataItineraryItemSummariesTravellerAgeBands struct {
	// **unique numeric identifier** for the age band
	// - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
	//
	AgeBandID *int64 `json:"ageBandId,omitempty"`
	// **number of travelers in *this* age band
	Count *int64 `json:"count,omitempty"`
	// **natural-language** description (singular) of *this* age band
	Description *string `json:"description,omitempty"`
	// **natural-language** description (plural) of *this* age band
	PluralDescription *string `json:"pluralDescription,omitempty"`
	// **sort order** for *this* age band
	SortOrder *int64 `json:"sortOrder,omitempty"`
}

type BookingCalculateprice200ApplicationJSONDataItineraryItemSummaries struct {
	// ignore (Viator only)
	ApplePassSupported *bool `json:"applePassSupported,omitempty"`
	// Indicates whether a voucher is required for each passenger; or, whether the requirement is one voucher per group booking.
	BarcodeOption *string `json:"barcodeOption,omitempty"`
	// **alphanumeric specifier** of the barcode type
	BarcodeType *string `json:"barcodeType,omitempty"`
	// [booking type indicator](#section/Key-concepts/Booking-concepts) that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
	//
	// *one of* the following:
	// - `"UF"` (FreesaleBE and UnconditionalBE) – this booking will be confirmed immediately
	// - `"OR"` (DeferredCRMBE) – the booked product is an on-request product, will not be confirmed immediately and will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
	// - `"FO"` (FreesaleOnRequestBE) – the booked product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
	//
	BookingEngineID *shared.BookingEngineIDResponseEnum `json:"bookingEngineId,omitempty"`
	// **object** containing item booking status information
	BookingStatus *shared.BookingStatusItem `json:"bookingStatus,omitempty"`
	// **currency code** for the currency in which pricing details are displayed
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **natural-language description** of *this* item's general departure location
	DepartsFrom *string `json:"departsFrom,omitempty"`
	// **HTML-formatted description** of *this* product's departure location(s)
	DeparturePoint *string `json:"departurePoint,omitempty"`
	// **HTML-formatted description** of *this* product's departure address
	DeparturePointAddress *string `json:"departurePointAddress,omitempty"`
	// **HTML-formatted descriptive notes** about *this* product's departure location
	DeparturePointDirections *string `json:"departurePointDirections,omitempty"`
	// **unique numeric id** of the destination associated with *this* product
	DestID *int64 `json:"destId,omitempty"`
	// ignore (Viator only)
	DistributorItemRef *string `json:"distributorItemRef,omitempty"`
	// The `hoursConfirmed` field also indicates if the product is freesale or on request. The `hoursConfirmed` value is the approximate window for confirmation in hours, which can be presented to the customer. A value of `0` means that the product is **freesale**, and a value greater than `0` means that the product is **on-request**.
	//
	HoursConfirmed *int64 `json:"hoursConfirmed,omitempty"`
	// ignore (Viator only)
	ItemID *int64 `json:"itemId,omitempty"`
	// ignore (Viator only)
	ItineraryID *int64 `json:"itineraryId,omitempty"`
	// ignore (Viator only)
	LanguageServicesLanguageCode *string `json:"languageServicesLanguageCode,omitempty"`
	// ignore (Viator only)
	LastRetailPrice *float64 `json:"lastRetailPrice,omitempty"`
	// **currency-formatted most recent retail price** for *this* item
	LastRetailPriceFormatted *string `json:"lastRetailPriceFormatted,omitempty"`
	// ignore (Viator only)
	LeadTravellerFirstname *string `json:"leadTravellerFirstname,omitempty"`
	// ignore (Viator only)
	LeadTravellerSurname *string `json:"leadTravellerSurname,omitempty"`
	// **title** of the lead traveler's name
	LeadTravellerTitle *string `json:"leadTravellerTitle,omitempty"`
	// ignore (Viator only)
	//
	// For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
	//
	MerchantCancellable *bool `json:"merchantCancellable,omitempty"`
	// **numeric merchant net rate** for *this* product
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPrice *float64 `json:"merchantNetPrice,omitempty"`
	// **currency-formatted merchant net rate** for *this* product
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPriceFormatted *string `json:"merchantNetPriceFormatted,omitempty"`
	// ignore (Viator only)
	ObfsID *int64 `json:"obfsId,omitempty"`
	// ignore (Viator only)
	Passbooks *string `json:"passbooks,omitempty"`
	// ignore (Viator only)
	PickupHotelID *int64 `json:"pickupHotelId,omitempty"`
	// ignore (Viator only)
	PickupHotelName *string `json:"pickupHotelName,omitempty"`
	// **numeric suggested retail price** for *this* product
	// - For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
	//
	Price *float64 `json:"price,omitempty"`
	// **currency-formatted suggested retail price** for *this* product
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	PriceFormatted *string `json:"priceFormatted,omitempty"`
	// **numeric price of *this* product** in USD
	PriceUSD *float64 `json:"priceUSD,omitempty"`
	// **unique alphanumeric identifier** of *this* product
	ProductCode *string `json:"productCode,omitempty"`
	// ignore (Viator only)
	ProductPulledDown *bool `json:"productPulledDown,omitempty"`
	// **natural-language title** of *this* product
	ProductTitle *string `json:"productTitle,omitempty"`
	// ignore (Viator only)
	ProductWidgetList *string `json:"productWidgetList,omitempty"`
	// **array** of rules applied to *this* item
	RulesApplied []string `json:"rulesApplied,omitempty"`
	// Ignore (Viator only)
	//
	SavingAmount *string `json:"savingAmount,omitempty"`
	// Ignore (Viator only)
	//
	SavingAmountFormated *string `json:"savingAmountFormated,omitempty"`
	// **sort-order** of *this* item summary
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// **starting time** of the tour in the supplier's local time zone
	StartingTime *string `json:"startingTime,omitempty"`
	// **natural-language name** of *this* product's supplier
	SupplierName *string `json:"supplierName,omitempty"`
	// **telephone number** of the supplier
	SupplierPhoneNumber *string `json:"supplierPhoneNumber,omitempty"`
	// ignore (Viator only)
	TermsAndConditions *string `json:"termsAndConditions,omitempty"`
	// **alphanumeric specifier** of the tour grade
	TourGradeCode *string `json:"tourGradeCode,omitempty"`
	// **natural-language description** of *this* item's tour grade
	TourGradeDescription *string `json:"tourGradeDescription,omitempty"`
	// **date** on which *this* product will operate (in the supplier's local time zone)
	TravelDate *string `json:"travelDate,omitempty"`
	// **array** of age-band objects
	TravellerAgeBands []BookingCalculateprice200ApplicationJSONDataItineraryItemSummariesTravellerAgeBands `json:"travellerAgeBands,omitempty"`
	// Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
	VoucherKey *string `json:"voucherKey,omitempty"`
	// **alphanumeric specifier** of the relevant voucher option
	VoucherOption *string `json:"voucherOption,omitempty"`
	// **natural-language description** of the voucher requirements for this tour (**note:** Should agree with value in `voucherOption` field)
	VoucherRequirements *string `json:"voucherRequirements,omitempty"`
	// **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
	VoucherURL *string `json:"voucherURL,omitempty"`
	// ignore (Viator only)
	Vouchers *string `json:"vouchers,omitempty"`
}

// BookingCalculateprice200ApplicationJSONDataItinerary - **summary results** for all itinerary items
type BookingCalculateprice200ApplicationJSONDataItinerary struct {
	// ignore (Viator only)
	BookerEmail *string `json:"bookerEmail,omitempty"`
	// **date** of *this* booking
	BookingDate *string `json:"bookingDate,omitempty"`
	// **object** containing itinerary booking status information
	BookingStatus *shared.BookingStatusItinerary `json:"bookingStatus,omitempty"`
	// **specifier** of the currency in which pricing details are displayed
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// ignore (Viator only)
	DistributorRef *string `json:"distributorRef,omitempty"`
	// ignore (Viator only)
	ExchangeRate *int64 `json:"exchangeRate,omitempty"`
	// ignore (Viator only)
	HasVoucher *bool `json:"hasVoucher,omitempty"`
	// **array** of item summaries
	ItemSummaries []BookingCalculateprice200ApplicationJSONDataItineraryItemSummaries `json:"itemSummaries,omitempty"`
	// **numeric identifier** for *this* order
	ItineraryID *int64 `json:"itineraryId,omitempty"`
	// ignore (Viator only)
	OmniPreRuleList *int64 `json:"omniPreRuleList,omitempty"`
	// ignore (Viator only)
	PaypalRedirectURL *string `json:"paypalRedirectURL,omitempty"`
	// ignore (Viator only)
	RulesApplied []string `json:"rulesApplied,omitempty"`
	// ignore (Viator only)
	SecurityToken *string `json:"securityToken,omitempty"`
	// **sort order** for *this* itinerary
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// **numeric total price (total)** for *this* order
	// - For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
	//
	TotalPrice *float64 `json:"totalPrice,omitempty"`
	// **currency-formatted total price (including transaction fee)** for *this* order
	// - For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
	//
	TotalPriceFormatted *string `json:"totalPriceFormatted,omitempty"`
	// **numeric total price** of *this* order in USD
	TotalPriceUSD *float64 `json:"totalPriceUSD,omitempty"`
	// ignore (Viator only)
	UserID *int64 `json:"userId,omitempty"`
	// Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
	VoucherKey *string `json:"voucherKey,omitempty"`
	// **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
	VoucherURL *string `json:"voucherURL,omitempty"`
}

type BookingCalculateprice200ApplicationJSONData struct {
	// **specifier of the currency** in which pricing details are displayed
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// ignore (Viator only)
	HasPromoCode *bool `json:"hasPromoCode,omitempty"`
	// **summary results** for all itinerary items
	Itinerary *BookingCalculateprice200ApplicationJSONDataItinerary `json:"itinerary,omitempty"`
	// ignore (Viator only)
	ItineraryFromPrice *float64 `json:"itineraryFromPrice,omitempty"`
	// ignore (Viator only)
	ItineraryFromPriceFormatted *string `json:"itineraryFromPriceFormatted,omitempty"`
	// ignore (Viator only)
	ItineraryNewPrice *float64 `json:"itineraryNewPrice,omitempty"`
	// ignore (Viator only)
	ItineraryNewPriceFormatted *string `json:"itineraryNewPriceFormatted,omitempty"`
	// ignore (Viator only)
	ItinerarySaving *int64 `json:"itinerarySaving,omitempty"`
	// ignore (Viator only)
	ItinerarySavingFormatted *string `json:"itinerarySavingFormatted,omitempty"`
	// ignore (Viator only)
	PaymentGatewayInfo *string `json:"paymentGatewayInfo,omitempty"`
	// ignore (Viator only)
	PromoCode *string `json:"promoCode,omitempty"`
	// ignore (Viator only)
	PromoCodeExpired *bool `json:"promoCodeExpired,omitempty"`
	// ignore (Viator only)
	PromoCodeValid *bool `json:"promoCodeValid,omitempty"`
	// ignore (Viator only)
	RulesApplied []string `json:"rulesApplied,omitempty"`
}

// BookingCalculateprice200ApplicationJSON - Success
type BookingCalculateprice200ApplicationJSON struct {
	Data *BookingCalculateprice200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type BookingCalculatepriceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BookingCalculateprice200ApplicationJSONObject *BookingCalculateprice200ApplicationJSON
}
