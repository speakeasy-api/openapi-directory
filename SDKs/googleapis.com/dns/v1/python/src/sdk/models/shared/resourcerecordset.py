"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import rrsetroutingpolicy as shared_rrsetroutingpolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceRecordSet:
    r"""A unit of data that is returned by the DNS servers."""
    
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""For example, www.example.com."""  
    routing_policy: Optional[shared_rrsetroutingpolicy.RRSetRoutingPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingPolicy'), 'exclude': lambda f: f is None }})
    r"""A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection."""  
    rrdatas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rrdatas'), 'exclude': lambda f: f is None }})
    r"""As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples."""  
    signature_rrdatas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signatureRrdatas'), 'exclude': lambda f: f is None }})
    r"""As defined in RFC 4034 (section 3.2)."""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Number of seconds that this ResourceRecordSet can be cached by resolvers."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The identifier of a supported record type. See the list of Supported DNS record types."""  
    