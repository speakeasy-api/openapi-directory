/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetApiV1NotificationsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuth: string;
}

export class GetApiV1NotificationsRequest extends SpeakeasyBase {
  /**
   * Return only notifications received from this account
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=account_id",
  })
  accountId?: string;

  /**
   * Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_types",
  })
  excludeTypes?: string[];

  /**
   * Max number of results to return. Defaults to 20.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Return results older than ID
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_id",
  })
  maxId?: string;

  /**
   * Return results immediately newer than ID
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_id",
  })
  minId?: string;

  /**
   * Return results newer than ID
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=since_id",
  })
  sinceId?: string;
}

export class GetApiV1NotificationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Invalid or missing Authorization header
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * Success
   */
  @SpeakeasyMetadata({ elemType: shared.Notification })
  notifications?: shared.Notification[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
