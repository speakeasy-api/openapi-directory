/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FeatureInput - Feature represents the settings and status of any Hub Feature.
 */
public class FeatureInput {
    /**
     * CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fleetDefaultMemberConfig")
    public CommonFleetDefaultMemberConfigSpecInput fleetDefaultMemberConfig;

    public FeatureInput withFleetDefaultMemberConfig(CommonFleetDefaultMemberConfigSpecInput fleetDefaultMemberConfig) {
        this.fleetDefaultMemberConfig = fleetDefaultMemberConfig;
        return this;
    }
    
    /**
     * Labels for this Feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public FeatureInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("membershipSpecs")
    public java.util.Map<String, MembershipFeatureSpecInput> membershipSpecs;

    public FeatureInput withMembershipSpecs(java.util.Map<String, MembershipFeatureSpecInput> membershipSpecs) {
        this.membershipSpecs = membershipSpecs;
        return this;
    }
    
    /**
     * FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceState")
    public FeatureResourceState resourceState;

    public FeatureInput withResourceState(FeatureResourceState resourceState) {
        this.resourceState = resourceState;
        return this;
    }
    
    /**
     * Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopeSpecs")
    public java.util.Map<String, java.util.Map<String, Object>> scopeSpecs;

    public FeatureInput withScopeSpecs(java.util.Map<String, java.util.Map<String, Object>> scopeSpecs) {
        this.scopeSpecs = scopeSpecs;
        return this;
    }
    
    /**
     * CommonFeatureSpec contains Hub-wide configuration information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spec")
    public CommonFeatureSpec spec;

    public FeatureInput withSpec(CommonFeatureSpec spec) {
        this.spec = spec;
        return this;
    }
    
    /**
     * CommonFeatureState contains Hub-wide Feature status information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CommonFeatureStateInput state;

    public FeatureInput withState(CommonFeatureStateInput state) {
        this.state = state;
        return this;
    }
    
    public FeatureInput(){}
}
