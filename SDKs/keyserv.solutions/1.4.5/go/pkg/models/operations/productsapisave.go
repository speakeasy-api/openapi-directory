// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ProductsAPISaveRequestBodyType string

const (
	ProductsAPISaveRequestBodyTypeProductCreateModify ProductsAPISaveRequestBodyType = "ProductCreateModify"
)

type ProductsAPISaveRequestBody struct {
	ProductCreateModify *shared.ProductCreateModify

	Type ProductsAPISaveRequestBodyType
}

func CreateProductsAPISaveRequestBodyProductCreateModify(productCreateModify shared.ProductCreateModify) ProductsAPISaveRequestBody {
	typ := ProductsAPISaveRequestBodyTypeProductCreateModify

	return ProductsAPISaveRequestBody{
		ProductCreateModify: &productCreateModify,
		Type:                typ,
	}
}

func (u *ProductsAPISaveRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	productCreateModify := new(shared.ProductCreateModify)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&productCreateModify); err == nil {
		u.ProductCreateModify = productCreateModify
		u.Type = ProductsAPISaveRequestBodyTypeProductCreateModify
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProductsAPISaveRequestBody) MarshalJSON() ([]byte, error) {
	if u.ProductCreateModify != nil {
		return json.Marshal(u.ProductCreateModify)
	}

	return nil, nil
}

type ProductsAPISaveRequest struct {
	Request ProductsAPISaveRequestBody `request:"mediaType=application/json"`
}

type ProductsAPISave201ApplicationJSONType string

const (
	ProductsAPISave201ApplicationJSONTypeProductView ProductsAPISave201ApplicationJSONType = "ProductView"
)

type ProductsAPISave201ApplicationJSON struct {
	ProductView *shared.ProductView

	Type ProductsAPISave201ApplicationJSONType
}

func CreateProductsAPISave201ApplicationJSONProductView(productView shared.ProductView) ProductsAPISave201ApplicationJSON {
	typ := ProductsAPISave201ApplicationJSONTypeProductView

	return ProductsAPISave201ApplicationJSON{
		ProductView: &productView,
		Type:        typ,
	}
}

func (u *ProductsAPISave201ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	productView := new(shared.ProductView)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&productView); err == nil {
		u.ProductView = productView
		u.Type = ProductsAPISave201ApplicationJSONTypeProductView
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProductsAPISave201ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ProductView != nil {
		return json.Marshal(u.ProductView)
	}

	return nil, nil
}

type ProductsAPISaveResponse struct {
	ContentType                            string
	ProductsAPISave201ApplicationJSONOneOf *ProductsAPISave201ApplicationJSON
	StatusCode                             int
	RawResponse                            *http.Response
}
