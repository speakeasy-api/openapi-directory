"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import buildartifacts as shared_buildartifacts
from ..shared import buildphase as shared_buildphase
from ..shared import debugsession as shared_debugsession
from ..shared import exportedenvironmentvariable as shared_exportedenvironmentvariable
from ..shared import logslocation as shared_logslocation
from ..shared import networkinterface as shared_networkinterface
from ..shared import projectcache as shared_projectcache
from ..shared import projectenvironment as shared_projectenvironment
from ..shared import projectfilesystemlocation as shared_projectfilesystemlocation
from ..shared import projectsource as shared_projectsource
from ..shared import projectsourceversion as shared_projectsourceversion
from ..shared import statustype_enum as shared_statustype_enum
from ..shared import vpcconfig as shared_vpcconfig
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Build:
    r"""Information about a build."""
    
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    artifacts: Optional[shared_buildartifacts.BuildArtifacts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artifacts'), 'exclude': lambda f: f is None }})  
    build_batch_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildBatchArn'), 'exclude': lambda f: f is None }})  
    build_complete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildComplete'), 'exclude': lambda f: f is None }})  
    build_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildNumber'), 'exclude': lambda f: f is None }})  
    build_status: Optional[shared_statustype_enum.StatusTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildStatus'), 'exclude': lambda f: f is None }})  
    cache: Optional[shared_projectcache.ProjectCache] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cache'), 'exclude': lambda f: f is None }})  
    current_phase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentPhase'), 'exclude': lambda f: f is None }})  
    debug_session: Optional[shared_debugsession.DebugSession] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debugSession'), 'exclude': lambda f: f is None }})  
    encryption_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionKey'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    environment: Optional[shared_projectenvironment.ProjectEnvironment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})  
    exported_environment_variables: Optional[list[shared_exportedenvironmentvariable.ExportedEnvironmentVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exportedEnvironmentVariables'), 'exclude': lambda f: f is None }})  
    file_system_locations: Optional[list[shared_projectfilesystemlocation.ProjectFileSystemLocation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileSystemLocations'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    initiator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initiator'), 'exclude': lambda f: f is None }})  
    logs: Optional[shared_logslocation.LogsLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logs'), 'exclude': lambda f: f is None }})  
    network_interface: Optional[shared_networkinterface.NetworkInterface] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInterface'), 'exclude': lambda f: f is None }})  
    phases: Optional[list[shared_buildphase.BuildPhase]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phases'), 'exclude': lambda f: f is None }})  
    project_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectName'), 'exclude': lambda f: f is None }})  
    queued_timeout_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queuedTimeoutInMinutes'), 'exclude': lambda f: f is None }})  
    report_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportArns'), 'exclude': lambda f: f is None }})  
    resolved_source_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolvedSourceVersion'), 'exclude': lambda f: f is None }})  
    secondary_artifacts: Optional[list[shared_buildartifacts.BuildArtifacts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryArtifacts'), 'exclude': lambda f: f is None }})  
    secondary_sources: Optional[list[shared_projectsource.ProjectSource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondarySources'), 'exclude': lambda f: f is None }})  
    secondary_source_versions: Optional[list[shared_projectsourceversion.ProjectSourceVersion]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondarySourceVersions'), 'exclude': lambda f: f is None }})  
    service_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceRole'), 'exclude': lambda f: f is None }})  
    source: Optional[shared_projectsource.ProjectSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})  
    source_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceVersion'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    timeout_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutInMinutes'), 'exclude': lambda f: f is None }})  
    vpc_config: Optional[shared_vpcconfig.VpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcConfig'), 'exclude': lambda f: f is None }})  
    