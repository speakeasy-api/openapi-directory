// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListUsageForLicenseConfigurationXAmzTargetEnum
type ListUsageForLicenseConfigurationXAmzTargetEnum string

const (
	ListUsageForLicenseConfigurationXAmzTargetEnumAwsLicenseManagerListUsageForLicenseConfiguration ListUsageForLicenseConfigurationXAmzTargetEnum = "AWSLicenseManager.ListUsageForLicenseConfiguration"
)

func (e ListUsageForLicenseConfigurationXAmzTargetEnum) ToPointer() *ListUsageForLicenseConfigurationXAmzTargetEnum {
	return &e
}

func (e *ListUsageForLicenseConfigurationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSLicenseManager.ListUsageForLicenseConfiguration":
		*e = ListUsageForLicenseConfigurationXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsageForLicenseConfigurationXAmzTargetEnum: %v", v)
	}
}

type ListUsageForLicenseConfigurationRequest struct {
	ListUsageForLicenseConfigurationRequest shared.ListUsageForLicenseConfigurationRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                           *string                                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                       *string                                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                          *string                                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                *string                                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                       *string                                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                           *string                                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                       *string                                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                              ListUsageForLicenseConfigurationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListUsageForLicenseConfigurationResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// AuthorizationException
	AuthorizationException interface{}
	ContentType            string
	// FilterLimitExceededException
	FilterLimitExceededException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// Success
	ListUsageForLicenseConfigurationResponse *shared.ListUsageForLicenseConfigurationResponse
	// RateLimitExceededException
	RateLimitExceededException interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// ServerInternalException
	ServerInternalException interface{}
}
