/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class RoadDisruptionRequest extends SpeakeasyBase {
  /**
   * an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=categories",
  })
  categories?: string[];

  /**
   * Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=closures",
  })
  closures?: boolean;

  /**
   * Comma-separated list of road identifiers e.g. "A406, A2" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=ids" })
  ids: string[];

  /**
   * an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=severities",
  })
  severities?: string[];

  /**
   * Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=stripContent",
  })
  stripContent?: boolean;
}

export class RoadDisruptionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata({
    elemType: shared.TflApiPresentationEntitiesRoadDisruption,
  })
  tflApiPresentationEntitiesRoadDisruptions?: shared.TflApiPresentationEntitiesRoadDisruption[];
}
