// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeFpgaImageAttributeActionEnum
type GETDescribeFpgaImageAttributeActionEnum string

const (
	GETDescribeFpgaImageAttributeActionEnumDescribeFpgaImageAttribute GETDescribeFpgaImageAttributeActionEnum = "DescribeFpgaImageAttribute"
)

func (e *GETDescribeFpgaImageAttributeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeFpgaImageAttribute":
		*e = GETDescribeFpgaImageAttributeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeFpgaImageAttributeActionEnum: %s", s)
	}
}

// GETDescribeFpgaImageAttributeAttributeEnum - The AFI attribute.
type GETDescribeFpgaImageAttributeAttributeEnum string

const (
	GETDescribeFpgaImageAttributeAttributeEnumDescription    GETDescribeFpgaImageAttributeAttributeEnum = "description"
	GETDescribeFpgaImageAttributeAttributeEnumName           GETDescribeFpgaImageAttributeAttributeEnum = "name"
	GETDescribeFpgaImageAttributeAttributeEnumLoadPermission GETDescribeFpgaImageAttributeAttributeEnum = "loadPermission"
	GETDescribeFpgaImageAttributeAttributeEnumProductCodes   GETDescribeFpgaImageAttributeAttributeEnum = "productCodes"
)

func (e *GETDescribeFpgaImageAttributeAttributeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "description":
		fallthrough
	case "name":
		fallthrough
	case "loadPermission":
		fallthrough
	case "productCodes":
		*e = GETDescribeFpgaImageAttributeAttributeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeFpgaImageAttributeAttributeEnum: %s", s)
	}
}

// GETDescribeFpgaImageAttributeVersionEnum
type GETDescribeFpgaImageAttributeVersionEnum string

const (
	GETDescribeFpgaImageAttributeVersionEnumTwoThousandAndSixteen1115 GETDescribeFpgaImageAttributeVersionEnum = "2016-11-15"
)

func (e *GETDescribeFpgaImageAttributeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDescribeFpgaImageAttributeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeFpgaImageAttributeVersionEnum: %s", s)
	}
}

type GETDescribeFpgaImageAttributeRequest struct {
	Action GETDescribeFpgaImageAttributeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The AFI attribute.
	Attribute GETDescribeFpgaImageAttributeAttributeEnum `queryParam:"style=form,explode=true,name=Attribute"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the AFI.
	FpgaImageID       string                                   `queryParam:"style=form,explode=true,name=FpgaImageId"`
	Version           GETDescribeFpgaImageAttributeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeFpgaImageAttributeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
