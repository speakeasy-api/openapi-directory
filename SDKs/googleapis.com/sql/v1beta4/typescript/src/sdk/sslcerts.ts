/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class SslCerts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.
   */
  sqlSslCertsCreateEphemeral(
    req: operations.SqlSslCertsCreateEphemeralRequest,
    security: operations.SqlSslCertsCreateEphemeralSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlSslCertsCreateEphemeralResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlSslCertsCreateEphemeralRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sslCertsCreateEphemeralRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlSslCertsCreateEphemeralSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlSslCertsCreateEphemeralResponse =
        new operations.SqlSslCertsCreateEphemeralResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslCert = utils.objectToClass(httpRes?.data, shared.SslCert);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the SSL certificate. For First Generation instances, the certificate remains valid until the instance is restarted.
   */
  sqlSslCertsDelete(
    req: operations.SqlSslCertsDeleteRequest,
    security: operations.SqlSslCertsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlSslCertsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlSslCertsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlSslCertsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlSslCertsDeleteResponse =
        new operations.SqlSslCertsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation.
   */
  sqlSslCertsGet(
    req: operations.SqlSslCertsGetRequest,
    security: operations.SqlSslCertsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlSslCertsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlSslCertsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlSslCertsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlSslCertsGetResponse =
        new operations.SqlSslCertsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslCert = utils.objectToClass(httpRes?.data, shared.SslCert);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
   */
  sqlSslCertsInsert(
    req: operations.SqlSslCertsInsertRequest,
    security: operations.SqlSslCertsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlSslCertsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlSslCertsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sslCertsInsertRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlSslCertsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlSslCertsInsertResponse =
        new operations.SqlSslCertsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslCertsInsertResponse = utils.objectToClass(
              httpRes?.data,
              shared.SslCertsInsertResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all of the current SSL certificates for the instance.
   */
  sqlSslCertsList(
    req: operations.SqlSslCertsListRequest,
    security: operations.SqlSslCertsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlSslCertsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlSslCertsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlSslCertsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlSslCertsListResponse =
        new operations.SqlSslCertsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslCertsListResponse = utils.objectToClass(
              httpRes?.data,
              shared.SslCertsListResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
