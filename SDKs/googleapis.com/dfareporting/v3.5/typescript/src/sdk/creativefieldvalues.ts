/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CreativeFieldValues {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes an existing creative field value.
   */
  dfareportingCreativeFieldValuesDelete(
    req: operations.DfareportingCreativeFieldValuesDeleteRequest,
    security: operations.DfareportingCreativeFieldValuesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingCreativeFieldValuesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingCreativeFieldValuesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingCreativeFieldValuesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingCreativeFieldValuesDeleteResponse =
        new operations.DfareportingCreativeFieldValuesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets one creative field value by ID.
   */
  dfareportingCreativeFieldValuesGet(
    req: operations.DfareportingCreativeFieldValuesGetRequest,
    security: operations.DfareportingCreativeFieldValuesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingCreativeFieldValuesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingCreativeFieldValuesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingCreativeFieldValuesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingCreativeFieldValuesGetResponse =
        new operations.DfareportingCreativeFieldValuesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creativeFieldValue = utils.objectToClass(
              httpRes?.data,
              shared.CreativeFieldValue
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a new creative field value.
   */
  dfareportingCreativeFieldValuesInsert(
    req: operations.DfareportingCreativeFieldValuesInsertRequest,
    security: operations.DfareportingCreativeFieldValuesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingCreativeFieldValuesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingCreativeFieldValuesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "creativeFieldValue",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingCreativeFieldValuesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingCreativeFieldValuesInsertResponse =
        new operations.DfareportingCreativeFieldValuesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creativeFieldValue = utils.objectToClass(
              httpRes?.data,
              shared.CreativeFieldValue
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of creative field values, possibly filtered. This method supports paging.
   */
  dfareportingCreativeFieldValuesList(
    req: operations.DfareportingCreativeFieldValuesListRequest,
    security: operations.DfareportingCreativeFieldValuesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingCreativeFieldValuesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingCreativeFieldValuesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingCreativeFieldValuesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingCreativeFieldValuesListResponse =
        new operations.DfareportingCreativeFieldValuesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creativeFieldValuesListResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreativeFieldValuesListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing creative field value. This method supports patch semantics.
   */
  dfareportingCreativeFieldValuesPatch(
    req: operations.DfareportingCreativeFieldValuesPatchRequest,
    security: operations.DfareportingCreativeFieldValuesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingCreativeFieldValuesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingCreativeFieldValuesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "creativeFieldValue",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingCreativeFieldValuesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingCreativeFieldValuesPatchResponse =
        new operations.DfareportingCreativeFieldValuesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creativeFieldValue = utils.objectToClass(
              httpRes?.data,
              shared.CreativeFieldValue
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing creative field value.
   */
  dfareportingCreativeFieldValuesUpdate(
    req: operations.DfareportingCreativeFieldValuesUpdateRequest,
    security: operations.DfareportingCreativeFieldValuesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingCreativeFieldValuesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingCreativeFieldValuesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "creativeFieldValue",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingCreativeFieldValuesUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingCreativeFieldValuesUpdateResponse =
        new operations.DfareportingCreativeFieldValuesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.creativeFieldValue = utils.objectToClass(
              httpRes?.data,
              shared.CreativeFieldValue
            );
          }
          break;
      }

      return res;
    });
  }
}
