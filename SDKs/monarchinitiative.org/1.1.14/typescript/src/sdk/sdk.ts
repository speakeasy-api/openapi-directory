/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Association } from "./association";
import { Bioentity } from "./bioentity";
import { Bioentityset } from "./bioentityset";
import { BioentitysetHomologs } from "./bioentitysethomologs";
import { BioentitysetSlimmer } from "./bioentitysetslimmer";
import { Cam } from "./cam";
import { EvidenceGraph } from "./evidencegraph";
import { GenomeFeatures } from "./genomefeatures";
import { Graph } from "./graph";
import { IdentifierMapper } from "./identifiermapper";
import { IdentifierPrefixes } from "./identifierprefixes";
import { Individual } from "./individual";
import { Mart } from "./mart";
import { Metadata } from "./metadata";
import { Mme } from "./mme";
import { NlpAnnotate } from "./nlpannotate";
import { Ontol } from "./ontol";
import { OntolIdentifier } from "./ontolidentifier";
import { OntolLabeler } from "./ontollabeler";
import { Ontology } from "./ontology";
import { OwlOntology } from "./owlontology";
import { PairSim } from "./pairsim";
import { RelationUsage } from "./relationusage";
import { Search } from "./search";
import { Sim } from "./sim";
import { VariationSet } from "./variationset";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["/api"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * API integration layer for linked biological objects.
 *
 * @remarks
 *
 *  __Source:__ https://github.com/biolink/biolink-api/
 */
export class SDK {
  /**
   * Retrieve associations between entities or entity and descriptors
   */
  public association: Association;
  /**
   * Retrieval of domain entities plus associations
   */
  public bioentity: Bioentity;
  /**
   * Operations over sets of entities
   */
  public bioentityset: Bioentityset;
  /**
   * Map gene IDs to their homologs
   */
  public bioentitysetHomologs: BioentitysetHomologs;
  /**
   * maps a set of entities to a slim
   */
  public bioentitysetSlimmer: BioentitysetSlimmer;
  /**
   * Operations on GO Causal Activity Models (GO-CAMs)
   */
  public cam: Cam;
  /**
   * Operations on evidence graphs
   */
  public evidenceGraph: EvidenceGraph;
  /**
   * Operations to retrieve sequence features
   */
  public genomeFeatures: GenomeFeatures;
  /**
   * Operations over data graphs
   */
  public graph: Graph;
  /**
   * mapping and resolution of identifiers
   */
  public identifierMapper: IdentifierMapper;
  /**
   * identifier prefixes
   */
  public identifierPrefixes: IdentifierPrefixes;
  /**
   * Individual humans (including patients), or organisms
   */
  public individual: Individual;
  /**
   * Perform bulk operations
   */
  public mart: Mart;
  /**
   * Get metadata
   */
  public metadata: Metadata;
  /**
   * Match patients with similar diseases and non-human genes based on their phenotypes
   */
  public mme: Mme;
  /**
   * annotate text using named entities
   */
  public nlpAnnotate: NlpAnnotate;
  /**
   * extract a subgraph from an ontology
   */
  public ontol: Ontol;
  /**
   * Retrieve IDs for labels
   */
  public ontolIdentifier: OntolIdentifier;
  /**
   * Assign labels to IDs
   */
  public ontolLabeler: OntolLabeler;
  /**
   * Operations on Ontology Terms and Subsets
   */
  public ontology: Ontology;
  /**
   * OWL-level operations on an ontology
   */
  public owlOntology: OwlOntology;
  /**
   * pairwise similarity between two entities
   */
  public pairSim: PairSim;
  /**
   * Usage of different relationship types
   */
  public relationUsage: RelationUsage;
  /**
   * Search for entities
   */
  public search: Search;
  /**
   * Perform semantic similarity, ranking, and sufficiency scoring
   */
  public sim: Sim;
  /**
   * Operations related to sets of variants
   */
  public variationSet: VariationSet;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.association = new Association(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bioentity = new Bioentity(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bioentityset = new Bioentityset(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bioentitysetHomologs = new BioentitysetHomologs(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bioentitysetSlimmer = new BioentitysetSlimmer(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.cam = new Cam(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.evidenceGraph = new EvidenceGraph(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.genomeFeatures = new GenomeFeatures(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.graph = new Graph(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.identifierMapper = new IdentifierMapper(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.identifierPrefixes = new IdentifierPrefixes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.individual = new Individual(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mart = new Mart(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.metadata = new Metadata(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mme = new Mme(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.nlpAnnotate = new NlpAnnotate(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.ontol = new Ontol(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.ontolIdentifier = new OntolIdentifier(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.ontolLabeler = new OntolLabeler(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.ontology = new Ontology(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.owlOntology = new OwlOntology(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pairSim = new PairSim(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.relationUsage = new RelationUsage(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.search = new Search(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.sim = new Sim(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.variationSet = new VariationSet(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
