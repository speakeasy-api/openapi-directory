"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class DependencyRelationshipEnum(str, Enum):
    r"""A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency."""
    DIRECT = 'direct'
    INDIRECT = 'indirect'

class DependencyScopeEnum(str, Enum):
    r"""A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes."""
    RUNTIME = 'runtime'
    DEVELOPMENT = 'development'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Dependency:
    
    dependencies: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependencies'), 'exclude': lambda f: f is None }})
    r"""Array of package-url (PURLs) of direct child dependencies."""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""User-defined metadata to store domain-specific information limited to 8 keys with scalar values."""  
    package_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_url'), 'exclude': lambda f: f is None }})
    r"""Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details."""  
    relationship: Optional[DependencyRelationshipEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship'), 'exclude': lambda f: f is None }})
    r"""A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency."""  
    scope: Optional[DependencyScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes."""  
    