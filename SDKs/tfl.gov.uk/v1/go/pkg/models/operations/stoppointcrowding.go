// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StopPointCrowdingPathParams struct {
	// The Naptan id of the stop
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// A particular line e.g. victoria, circle, northern etc.
	Line string `pathParam:"style=simple,explode=false,name=line"`
}

// StopPointCrowdingDirectionEnum - The direction of travel. Can be inbound or outbound.
type StopPointCrowdingDirectionEnum string

const (
	StopPointCrowdingDirectionEnumInbound  StopPointCrowdingDirectionEnum = "inbound"
	StopPointCrowdingDirectionEnumOutbound StopPointCrowdingDirectionEnum = "outbound"
	StopPointCrowdingDirectionEnumAll      StopPointCrowdingDirectionEnum = "all"
)

func (e *StopPointCrowdingDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		fallthrough
	case "all":
		*e = StopPointCrowdingDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StopPointCrowdingDirectionEnum: %s", s)
	}
}

type StopPointCrowdingQueryParams struct {
	// The direction of travel. Can be inbound or outbound.
	Direction StopPointCrowdingDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
}

type StopPointCrowdingRequest struct {
	PathParams  StopPointCrowdingPathParams
	QueryParams StopPointCrowdingQueryParams
}

type StopPointCrowdingResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesStopPoints []shared.TflAPIPresentationEntitiesStopPoint
}
