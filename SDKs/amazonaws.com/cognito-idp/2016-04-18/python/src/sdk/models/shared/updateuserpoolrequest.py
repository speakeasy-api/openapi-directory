"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountrecoverysettingtype as shared_accountrecoverysettingtype
from ..shared import admincreateuserconfigtype as shared_admincreateuserconfigtype
from ..shared import deletionprotectiontype_enum as shared_deletionprotectiontype_enum
from ..shared import deviceconfigurationtype as shared_deviceconfigurationtype
from ..shared import emailconfigurationtype as shared_emailconfigurationtype
from ..shared import lambdaconfigtype as shared_lambdaconfigtype
from ..shared import smsconfigurationtype as shared_smsconfigurationtype
from ..shared import userattributeupdatesettingstype as shared_userattributeupdatesettingstype
from ..shared import userpooladdonstype as shared_userpooladdonstype
from ..shared import userpoolmfatype_enum as shared_userpoolmfatype_enum
from ..shared import userpoolpolicytype as shared_userpoolpolicytype
from ..shared import verificationmessagetemplatetype as shared_verificationmessagetemplatetype
from ..shared import verifiedattributetype_enum as shared_verifiedattributetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateUserPoolRequest:
    r"""Represents the request to update the user pool."""
    
    user_pool_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolId') }})  
    account_recovery_setting: Optional[shared_accountrecoverysettingtype.AccountRecoverySettingType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountRecoverySetting'), 'exclude': lambda f: f is None }})  
    admin_create_user_config: Optional[shared_admincreateuserconfigtype.AdminCreateUserConfigType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdminCreateUserConfig'), 'exclude': lambda f: f is None }})  
    auto_verified_attributes: Optional[list[shared_verifiedattributetype_enum.VerifiedAttributeTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoVerifiedAttributes'), 'exclude': lambda f: f is None }})  
    deletion_protection: Optional[shared_deletionprotectiontype_enum.DeletionProtectionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeletionProtection'), 'exclude': lambda f: f is None }})  
    device_configuration: Optional[shared_deviceconfigurationtype.DeviceConfigurationType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceConfiguration'), 'exclude': lambda f: f is None }})  
    email_configuration: Optional[shared_emailconfigurationtype.EmailConfigurationType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailConfiguration'), 'exclude': lambda f: f is None }})  
    email_verification_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailVerificationMessage'), 'exclude': lambda f: f is None }})  
    email_verification_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailVerificationSubject'), 'exclude': lambda f: f is None }})  
    lambda_config: Optional[shared_lambdaconfigtype.LambdaConfigType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LambdaConfig'), 'exclude': lambda f: f is None }})  
    mfa_configuration: Optional[shared_userpoolmfatype_enum.UserPoolMfaTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MfaConfiguration'), 'exclude': lambda f: f is None }})  
    policies: Optional[shared_userpoolpolicytype.UserPoolPolicyType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Policies'), 'exclude': lambda f: f is None }})  
    sms_authentication_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsAuthenticationMessage'), 'exclude': lambda f: f is None }})  
    sms_configuration: Optional[shared_smsconfigurationtype.SmsConfigurationType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsConfiguration'), 'exclude': lambda f: f is None }})  
    sms_verification_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsVerificationMessage'), 'exclude': lambda f: f is None }})  
    user_attribute_update_settings: Optional[shared_userattributeupdatesettingstype.UserAttributeUpdateSettingsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserAttributeUpdateSettings'), 'exclude': lambda f: f is None }})  
    user_pool_add_ons: Optional[shared_userpooladdonstype.UserPoolAddOnsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolAddOns'), 'exclude': lambda f: f is None }})  
    user_pool_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolTags'), 'exclude': lambda f: f is None }})  
    verification_message_template: Optional[shared_verificationmessagetemplatetype.VerificationMessageTemplateType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerificationMessageTemplate'), 'exclude': lambda f: f is None }})  
    