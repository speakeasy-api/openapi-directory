// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePipelineXAmzTargetEnum
type CreatePipelineXAmzTargetEnum string

const (
	CreatePipelineXAmzTargetEnumSageMakerCreatePipeline CreatePipelineXAmzTargetEnum = "SageMaker.CreatePipeline"
)

func (e CreatePipelineXAmzTargetEnum) ToPointer() *CreatePipelineXAmzTargetEnum {
	return &e
}

func (e *CreatePipelineXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.CreatePipeline":
		*e = CreatePipelineXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePipelineXAmzTargetEnum: %v", v)
	}
}

type CreatePipelineRequest struct {
	CreatePipelineRequest shared.CreatePipelineRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreatePipelineXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePipelineResponse struct {
	ContentType string
	// Success
	CreatePipelineResponse *shared.CreatePipelineResponse
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
	// ResourceNotFound
	ResourceNotFound interface{}
	StatusCode       int
	RawResponse      *http.Response
}
