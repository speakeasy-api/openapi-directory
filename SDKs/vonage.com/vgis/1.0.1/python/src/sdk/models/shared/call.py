"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CallDirectionEnum(str, Enum):
    r"""Direction of the call"""
    INBOUND = 'INBOUND'
    OUTBOUND = 'OUTBOUND'

class CallStateEnum(str, Enum):
    r"""Status of the call"""
    INITIALIZING = 'INITIALIZING'
    RINGING = 'RINGING'
    ACTIVE = 'ACTIVE'
    HELD = 'HELD'
    REMOTE_HELD = 'REMOTE_HELD'
    DETACHED = 'DETACHED'
    REJECTED = 'REJECTED'
    CANCELLED = 'CANCELLED'
    ANSWERED = 'ANSWERED'
    MISSED = 'MISSED'

class CallTypeEnum(str, Enum):
    r"""Record type"""
    CALL = 'CALL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Call:
    r"""Successful"""
    
    account_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId') }})
    r"""Unique identifier of the account"""  
    direction: CallDirectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction') }})
    r"""Direction of the call"""  
    duration: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""Duration of the call in milliseconds"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the call"""  
    phone_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumber') }})
    r"""Unique identifier of the account"""  
    start_time: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start time of the call"""  
    state: CallStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""Status of the call"""  
    type: CallTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Record type"""  
    uci_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uciId') }})
    r"""Unique identifier of communications provider"""  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId') }})
    r"""Unique identifier of the user"""  
    answer_time: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answerTime'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time to answer the call"""  
    caller_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callerId'), 'exclude': lambda f: f is None }})
    r"""Remote caller ID"""  
    end_time: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End time of the call"""  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalId'), 'exclude': lambda f: f is None }})
    r"""External identifier of the call"""  
    