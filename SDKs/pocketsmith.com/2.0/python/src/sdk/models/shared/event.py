"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import category as shared_category
from ..shared import scenario as shared_scenario
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EventRepeatTypeEnum(str, Enum):
    r"""The repeat type of the event."""
    ONCE = 'once'
    DAILY = 'daily'
    WEEKLY = 'weekly'
    FORTNIGHTLY = 'fortnightly'
    MONTHLY = 'monthly'
    YEARLY = 'yearly'
    EACH_WEEKDAY = 'each weekday'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Event:
    r"""Success"""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the event."""  
    amount_in_base_currency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_in_base_currency'), 'exclude': lambda f: f is None }})
    r"""The amount of the event in the user's base currency."""  
    category: Optional[shared_category.Category] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    colour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colour'), 'exclude': lambda f: f is None }})
    r"""The CSS hex-style colour of the event."""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency_code'), 'exclude': lambda f: f is None }})
    r"""The currency code of the event."""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""The date of the event."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the event."""  
    infinite_series: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infinite_series'), 'exclude': lambda f: f is None }})
    r"""Whether the event repeats and does not have an end date."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""The note of the event."""  
    repeat_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeat_interval'), 'exclude': lambda f: f is None }})
    r"""The repeat interval of how often the event takes place."""  
    repeat_type: Optional[EventRepeatTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeat_type'), 'exclude': lambda f: f is None }})
    r"""The repeat type of the event."""  
    scenario: Optional[shared_scenario.Scenario] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scenario'), 'exclude': lambda f: f is None }})  
    series_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('series_id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the series that the event belongs to."""  
    series_start_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('series_start_id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the series followed by the series's start date."""  
    