"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import feedback as shared_feedback
from ..shared import group as shared_group
from ..shared import post as shared_post
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPostAndRelatedDataSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'query', 'field_name': 'api_key' }})  
    oauth2_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2_implicit: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetPostAndRelatedDataRequest:
    
    post_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'post_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the post to retrieve."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPostAndRelatedData200ApplicationJSON:
    r"""The post and related data."""
    
    author: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author'), 'exclude': lambda f: f is None }})  
    author_offer_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_offer_count'), 'exclude': lambda f: f is None }})
    r"""Count of offer posts made by the post author in the last 90 days."""  
    author_posts: Optional[list[shared_post.Post]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_posts'), 'exclude': lambda f: f is None }})
    r"""Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned."""  
    author_wanted_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_wanted_count'), 'exclude': lambda f: f is None }})
    r"""Count of wanted posts made by the post author in the last 90 days."""  
    bookmarked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarked'), 'exclude': lambda f: f is None }})
    r"""Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts."""  
    feedback: Optional[list[shared_feedback.Feedback]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feedback'), 'exclude': lambda f: f is None }})
    r"""Feedback the current user has left on the post author."""  
    groups: Optional[list[shared_group.Group]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})
    r"""The groups the post is published on."""  
    post: Optional[shared_post.Post] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post'), 'exclude': lambda f: f is None }})
    r"""An offer, wanted, admin, taken or received post."""  
    replied: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replied'), 'exclude': lambda f: f is None }})
    r"""Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts."""  
    user_can_reply: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_can_reply'), 'exclude': lambda f: f is None }})
    r"""Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account."""  
    viewed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewed'), 'exclude': lambda f: f is None }})
    r"""Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts."""  
    

@dataclasses.dataclass
class GetPostAndRelatedDataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_post_and_related_data_200_application_json_object: Optional[GetPostAndRelatedData200ApplicationJSON] = dataclasses.field(default=None)
    r"""The post and related data."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    