"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import inventory_type_enum as shared_inventory_type_enum
from ..shared import searchautocompleteresponse as shared_searchautocompleteresponse
from enum import Enum
from typing import Optional

class GetSearchHeavyEquipmentAutoCompleteFieldEnum(str, Enum):
    r"""Field name for which you want auto-completion"""
    MAKE = 'make'
    MODEL = 'model'
    TRIM = 'trim'
    BODY_TYPE = 'body_type'
    TRANSMISSION = 'transmission'
    DRIVETRAIN = 'drivetrain'
    FUEL_TYPE = 'fuel_type'
    EXTERIOR_COLOR = 'exterior_color'
    INTERIOR_COLOR = 'interior_color'
    ENGINE = 'engine'
    CATEGORY = 'category'
    SUB_CATEGORY = 'sub_category'
    STATE = 'state'
    CITY = 'city'

class GetSearchHeavyEquipmentAutoCompleteSortByEnum(str, Enum):
    r"""Sort the response, either by index or count(default)"""
    INDEX = 'index'
    COUNT = 'count'


@dataclasses.dataclass
class GetSearchHeavyEquipmentAutoCompleteRequest:
    
    field: GetSearchHeavyEquipmentAutoCompleteFieldEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'field', 'style': 'form', 'explode': True }})
    r"""Field name for which you want auto-completion"""  
    input: str = dataclasses.field(metadata={'query_param': { 'field_name': 'input', 'style': 'form', 'explode': True }})
    r"""Input entered so far"""  
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""The API Authentication Key. Mandatory with all API calls."""  
    body_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'body_type', 'style': 'form', 'explode': True }})
    r"""To filter listing on their body type"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city', 'style': 'form', 'explode': True }})
    r"""To filter listing on City in which they are listed"""  
    color: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'color', 'style': 'form', 'explode': True }})
    r"""Color of the vehicle"""  
    drivetrain: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'drivetrain', 'style': 'form', 'explode': True }})
    r"""To filter listing on their drivetrain"""  
    engine: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'engine', 'style': 'form', 'explode': True }})
    r"""To filter listing on their engine"""  
    facet_min_count: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facet_min_count', 'style': 'form', 'explode': True }})
    r"""Provide minimum count value for facets"""  
    fuel_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fuel_type', 'style': 'form', 'explode': True }})
    r"""To filter listing on their fuel type"""  
    ignore_case: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ignore_case', 'style': 'form', 'explode': True }})
    r"""Boolean variable to indicate ignore case of current input"""  
    inventory_type: Optional[shared_inventory_type_enum.InventoryTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'inventory_type', 'style': 'form', 'explode': True }})
    r"""To filter listing on their condition. Either used or new"""  
    make: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'make', 'style': 'form', 'explode': True }})
    r"""To filter listings on their make"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'model', 'style': 'form', 'explode': True }})
    r"""To filter listings on their model"""  
    radius: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})
    r"""Radius around the search location (Unit - Miles)"""  
    seller_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'seller_type', 'style': 'form', 'explode': True }})
    r"""seller type for autocomplete"""  
    sort_by: Optional[GetSearchHeavyEquipmentAutoCompleteSortByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'form', 'explode': True }})
    r"""Sort the response, either by index or count(default)"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""To filter listing on State in which they are listed"""  
    term_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'term_counts', 'style': 'form', 'explode': True }})
    r"""Boolean variable to indicate wheather to include term counts as well in response"""  
    transmission: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'transmission', 'style': 'form', 'explode': True }})
    r"""To filter listing on their transmission"""  
    trim: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'trim', 'style': 'form', 'explode': True }})
    r"""To filter listing on their trim"""  
    vehicle_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicle_type', 'style': 'form', 'explode': True }})
    r"""To filter listing on their vehicle type"""  
    year: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'year', 'style': 'form', 'explode': True }})
    r"""To filter listing on their year"""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""To filter listing on ZIP around which they are listed"""  
    

@dataclasses.dataclass
class GetSearchHeavyEquipmentAutoCompleteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search_auto_complete_response: Optional[shared_searchautocompleteresponse.SearchAutoCompleteResponse] = dataclasses.field(default=None)
    r"""Unique terms available in given field for auto completion"""  
    