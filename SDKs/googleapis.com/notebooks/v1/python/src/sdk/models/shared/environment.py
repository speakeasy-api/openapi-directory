"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import containerimage as shared_containerimage
from ..shared import vmimage as shared_vmimage
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Environment:
    r"""Definition of a software environment that is used to start a notebook instance."""
    
    container_image: Optional[shared_containerimage.ContainerImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerImage'), 'exclude': lambda f: f is None }})
    r"""Definition of a container image for starting a notebook instance with the environment installed in a container."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time at which this environment was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A brief description of this environment."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of this environment for the UI."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Name of this environment. Format: `projects/{project_id}/locations/{location}/environments/{environment_id}`"""  
    post_startup_script: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postStartupScript'), 'exclude': lambda f: f is None }})
    r"""Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path. Example: `\\"gs://path-to-file/file-name\\"`"""  
    vm_image: Optional[shared_vmimage.VMImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmImage'), 'exclude': lambda f: f is None }})
    r"""Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnvironmentInput:
    r"""Definition of a software environment that is used to start a notebook instance."""
    
    container_image: Optional[shared_containerimage.ContainerImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerImage'), 'exclude': lambda f: f is None }})
    r"""Definition of a container image for starting a notebook instance with the environment installed in a container."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A brief description of this environment."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of this environment for the UI."""  
    post_startup_script: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postStartupScript'), 'exclude': lambda f: f is None }})
    r"""Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path. Example: `\\"gs://path-to-file/file-name\\"`"""  
    vm_image: Optional[shared_vmimage.VMImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmImage'), 'exclude': lambda f: f is None }})
    r"""Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM."""  
    