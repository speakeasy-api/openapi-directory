// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListWorkflowsStatusEnum - The status of the migration workflow.
type ListWorkflowsStatusEnum string

const (
	ListWorkflowsStatusEnumCreating              ListWorkflowsStatusEnum = "CREATING"
	ListWorkflowsStatusEnumNotStarted            ListWorkflowsStatusEnum = "NOT_STARTED"
	ListWorkflowsStatusEnumCreationFailed        ListWorkflowsStatusEnum = "CREATION_FAILED"
	ListWorkflowsStatusEnumStarting              ListWorkflowsStatusEnum = "STARTING"
	ListWorkflowsStatusEnumInProgress            ListWorkflowsStatusEnum = "IN_PROGRESS"
	ListWorkflowsStatusEnumWorkflowFailed        ListWorkflowsStatusEnum = "WORKFLOW_FAILED"
	ListWorkflowsStatusEnumPaused                ListWorkflowsStatusEnum = "PAUSED"
	ListWorkflowsStatusEnumPausing               ListWorkflowsStatusEnum = "PAUSING"
	ListWorkflowsStatusEnumPausingFailed         ListWorkflowsStatusEnum = "PAUSING_FAILED"
	ListWorkflowsStatusEnumUserAttentionRequired ListWorkflowsStatusEnum = "USER_ATTENTION_REQUIRED"
	ListWorkflowsStatusEnumDeleting              ListWorkflowsStatusEnum = "DELETING"
	ListWorkflowsStatusEnumDeletionFailed        ListWorkflowsStatusEnum = "DELETION_FAILED"
	ListWorkflowsStatusEnumDeleted               ListWorkflowsStatusEnum = "DELETED"
	ListWorkflowsStatusEnumCompleted             ListWorkflowsStatusEnum = "COMPLETED"
)

func (e *ListWorkflowsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CREATING":
		fallthrough
	case "NOT_STARTED":
		fallthrough
	case "CREATION_FAILED":
		fallthrough
	case "STARTING":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "WORKFLOW_FAILED":
		fallthrough
	case "PAUSED":
		fallthrough
	case "PAUSING":
		fallthrough
	case "PAUSING_FAILED":
		fallthrough
	case "USER_ATTENTION_REQUIRED":
		fallthrough
	case "DELETING":
		fallthrough
	case "DELETION_FAILED":
		fallthrough
	case "DELETED":
		fallthrough
	case "COMPLETED":
		*e = ListWorkflowsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListWorkflowsStatusEnum: %s", s)
	}
}

type ListWorkflowsRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The name of the application configured in Application Discovery Service.
	AdsApplicationConfigurationName *string `queryParam:"style=form,explode=true,name=adsApplicationConfigurationName"`
	// The maximum number of results that can be returned.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The name of the migration workflow.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The pagination token.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// The status of the migration workflow.
	Status *ListWorkflowsStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// The ID of the template.
	TemplateID *string `queryParam:"style=form,explode=true,name=templateId"`
}

type ListWorkflowsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListMigrationWorkflowsResponse *shared.ListMigrationWorkflowsResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
