/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class EditChatbotMessageApplicationJSON {
    /**
     * The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).
     */
    @JsonProperty("account_id")
    public String accountId;
    public EditChatbotMessageApplicationJSON withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * JSON template describing how the edited message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
     */
    @JsonProperty("content")
    public java.util.Map<String, Object> content;
    public EditChatbotMessageApplicationJSON withContent(java.util.Map<String, Object> content) {
        this.content = content;
        return this;
    }
    
    /**
     * **Optional**&lt;br&gt;
     * Enable or disable markdown parser to your chatbot message. Applies the markdown parser to your chatbot message if the value of this field is set to `true`.&lt;br&gt; To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_markdown_support")
    public Boolean isMarkdownSupport;
    public EditChatbotMessageApplicationJSON withIsMarkdownSupport(Boolean isMarkdownSupport) {
        this.isMarkdownSupport = isMarkdownSupport;
        return this;
    }
    
    /**
     * Robot JID created when enabling chatbot features on your marketplace app.
     */
    @JsonProperty("robot_jid")
    public String robotJid;
    public EditChatbotMessageApplicationJSON withRobotJid(String robotJid) {
        this.robotJid = robotJid;
        return this;
    }
    
    /**
     * **Optional**&lt;br&gt;
     * The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_jid")
    public String userJid;
    public EditChatbotMessageApplicationJSON withUserJid(String userJid) {
        this.userJid = userJid;
        return this;
    }
    
}
