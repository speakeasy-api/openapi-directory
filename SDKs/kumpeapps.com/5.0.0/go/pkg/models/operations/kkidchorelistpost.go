// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type KkidChorelistPostSecurity struct {
	AuthKey string `security:"scheme,type=apiKey,subtype=header,name=X-Auth"`
}

// KkidChorelistPostDayEnum - day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank
type KkidChorelistPostDayEnum string

const (
	KkidChorelistPostDayEnumSunday    KkidChorelistPostDayEnum = "Sunday"
	KkidChorelistPostDayEnumMonday    KkidChorelistPostDayEnum = "Monday"
	KkidChorelistPostDayEnumTuesday   KkidChorelistPostDayEnum = "Tuesday"
	KkidChorelistPostDayEnumWednesday KkidChorelistPostDayEnum = "Wednesday"
	KkidChorelistPostDayEnumThursday  KkidChorelistPostDayEnum = "Thursday"
	KkidChorelistPostDayEnumFriday    KkidChorelistPostDayEnum = "Friday"
	KkidChorelistPostDayEnumSaturday  KkidChorelistPostDayEnum = "Saturday"
	KkidChorelistPostDayEnumWeekly    KkidChorelistPostDayEnum = "Weekly"
	KkidChorelistPostDayEnumToday     KkidChorelistPostDayEnum = "Today"
)

func (e *KkidChorelistPostDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Sunday":
		fallthrough
	case "Monday":
		fallthrough
	case "Tuesday":
		fallthrough
	case "Wednesday":
		fallthrough
	case "Thursday":
		fallthrough
	case "Friday":
		fallthrough
	case "Saturday":
		fallthrough
	case "Weekly":
		fallthrough
	case "Today":
		*e = KkidChorelistPostDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidChorelistPostDayEnum: %s", s)
	}
}

type KkidChorelistPostRequest struct {
	// Notes if AI Icons should be used (n for no, y for yes, e for yes- error)
	AiIcon *string `queryParam:"style=form,explode=true,name=aiIcon"`
	// block dash option on this chore
	BlockDash *bool `queryParam:"style=form,explode=true,name=blockDash"`
	// mark as sibling can steal chore
	CanSteal *bool `queryParam:"style=form,explode=true,name=canSteal"`
	// optional chore description
	ChoreDescription *string `queryParam:"style=form,explode=true,name=choreDescription"`
	// name of chore
	ChoreName string `queryParam:"style=form,explode=true,name=choreName"`
	// number priority of chore (default is 5)
	ChoreNumber *int64 `queryParam:"style=form,explode=true,name=choreNumber"`
	// day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank
	Day *KkidChorelistPostDayEnum `queryParam:"style=form,explode=true,name=day"`
	// ammount of allowance added at end of week for completing this chore
	ExtraAllowance *int64 `queryParam:"style=form,explode=true,name=extraAllowance"`
	// True if this is a calendar note instead of a chore.
	IsCalendar *bool `queryParam:"style=form,explode=true,name=isCalendar"`
	// username of kid to assign the chore to.
	KidUsername string `queryParam:"style=form,explode=true,name=kidUsername"`
	// text field of nfc tag required to check off chore
	NfcTag *string `queryParam:"style=form,explode=true,name=nfcTag"`
	// notes added to chore (visable only on reports, kids do not see this note, this is mostly just for the developer)
	Notes *string `queryParam:"style=form,explode=true,name=notes"`
	// tag for object detection to search for (required if requireObjectDetection is true)
	ObjectDetectionTag *string `queryParam:"style=form,explode=true,name=objectDetectionTag"`
	// mark as one time chore (does not repeat each week)
	OneTime *bool `queryParam:"style=form,explode=true,name=oneTime"`
	// mark as optional chore
	Optional *bool `queryParam:"style=form,explode=true,name=optional"`
	// mark as reassignable (default is true)
	Reassignable *bool `queryParam:"style=form,explode=true,name=reassignable"`
	// require use of camera to detect object detection tag order to check off chore
	RequireObjectDetection *bool `queryParam:"style=form,explode=true,name=requireObjectDetection"`
	// date (yyyy-mm-dd) that you wish the chore to start showing up. (default is today)
	StartDate *string `queryParam:"style=form,explode=true,name=startDate"`
	// status of chore (default is todo)
	Status *string `queryParam:"style=form,explode=true,name=status"`
	// true if chore updated via API from an Automation System
	UpdatedByAutomation *bool `queryParam:"style=form,explode=true,name=updatedByAutomation"`
}

type KkidChorelistPostResponse struct {
	// Method Not Allowed- API user does not have access to use this method
	FourHundredAndFive *shared.FourHundredAndFive
	// API Access Denied! Your API key is invalid, expired, or not supplied!
	FourHundredAndTwelve *shared.FourHundredAndTwelve
	ContentType          string
	StatusCode           int
	RawResponse          *http.Response
	// No Data Found.
	Nodata *shared.Nodata
	// search results matching criteria
	Success *shared.Success
}
