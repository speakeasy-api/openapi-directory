"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import externallinks_catalog_getbeezupcolumnslink as shared_externallinks_catalog_getbeezupcolumnslink
from ..shared import links_addchannelcataloglink as shared_links_addchannelcataloglink
from ..shared import links_getchannelcatalogfilteroperatorslink as shared_links_getchannelcatalogfilteroperatorslink
from ..shared import links_getchannelcatalogslink as shared_links_getchannelcatalogslink
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelCatalogListLinks:
    r"""Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc..."""
    
    add: Optional[shared_links_addchannelcataloglink.LinksAddChannelCatalogLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})  
    beez_up_columns: Optional[shared_externallinks_catalog_getbeezupcolumnslink.ExternalLinksCatalogGetBeezUPColumnsLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPColumns'), 'exclude': lambda f: f is None }})  
    filter_operators: Optional[shared_links_getchannelcatalogfilteroperatorslink.LinksGetChannelCatalogFilterOperatorsLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterOperators'), 'exclude': lambda f: f is None }})  
    self_: Optional[shared_links_getchannelcatalogslink.LinksGetChannelCatalogsLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is None }})  
    