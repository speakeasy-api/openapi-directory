"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import userentity as shared_userentity
from typing import Any, Optional


@dataclasses.dataclass
class GetUsersRequest:
    
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination."""  
    filter: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""If set, return records where the specified field is equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`."""  
    filter_gt: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter_gt', 'style': 'form', 'explode': True }})
    r"""If set, return records where the specified field is greater than the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`."""  
    filter_gteq: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter_gteq', 'style': 'form', 'explode': True }})
    r"""If set, return records where the specified field is greater than or equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`."""  
    filter_like: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter_like', 'style': 'form', 'explode': True }})
    r"""If set, return records where the specified field is equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`."""  
    filter_lt: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter_lt', 'style': 'form', 'explode': True }})
    r"""If set, return records where the specified field is less than the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`."""  
    filter_lteq: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter_lteq', 'style': 'form', 'explode': True }})
    r"""If set, return records where the specified field is less than or equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`."""  
    ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': True }})
    r"""comma-separated list of User IDs"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended)."""  
    q_admin: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q[admin]', 'style': 'form', 'explode': True }})
    r"""If `true`, list only admin users."""  
    q_allowed_ips: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q[allowed_ips]', 'style': 'form', 'explode': True }})
    r"""If set, list only users with overridden allowed IP setting."""  
    q_email: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q[email]', 'style': 'form', 'explode': True }})
    r"""List users matching email."""  
    q_notes: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q[notes]', 'style': 'form', 'explode': True }})
    r"""List users matching notes field."""  
    q_password_validity_days: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q[password_validity_days]', 'style': 'form', 'explode': True }})
    r"""If set, list only users with overridden password validity days setting."""  
    q_ssl_required: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q[ssl_required]', 'style': 'form', 'explode': True }})
    r"""If set, list only users with overridden SSL required setting."""  
    q_username: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q[username]', 'style': 'form', 'explode': True }})
    r"""List users matching username."""  
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})
    r"""Searches for partial matches of name, username, or email."""  
    sort_by: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'form', 'explode': True }})
    r"""If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[authenticate_until]=desc`). Valid fields are `authenticate_until`, `active`, `email`, `last_desktop_login_at`, `last_login_at`, `username`, `company`, `name`, `site_admin`, `receive_admin_alerts`, `password_validity_days`, `ssl_required` or `not_site_admin`."""  
    

@dataclasses.dataclass
class GetUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_entities: Optional[list[shared_userentity.UserEntity]] = dataclasses.field(default=None)
    r"""A list of Users objects."""  
    