// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteDBInstanceActionEnum
type GETDeleteDBInstanceActionEnum string

const (
	GETDeleteDBInstanceActionEnumDeleteDbInstance GETDeleteDBInstanceActionEnum = "DeleteDBInstance"
)

func (e *GETDeleteDBInstanceActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteDBInstance":
		*e = GETDeleteDBInstanceActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteDBInstanceActionEnum: %s", s)
	}
}

// GETDeleteDBInstanceVersionEnum
type GETDeleteDBInstanceVersionEnum string

const (
	GETDeleteDBInstanceVersionEnumTwoThousandAndFourteen1031 GETDeleteDBInstanceVersionEnum = "2014-10-31"
)

func (e *GETDeleteDBInstanceVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2014-10-31":
		*e = GETDeleteDBInstanceVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteDBInstanceVersionEnum: %s", s)
	}
}

type GETDeleteDBInstanceQueryParams struct {
	Action GETDeleteDBInstanceActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
	DBInstanceIdentifier string `queryParam:"style=form,explode=true,name=DBInstanceIdentifier"`
	// <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
	FinalDBSnapshotIdentifier *string `queryParam:"style=form,explode=true,name=FinalDBSnapshotIdentifier"`
	// <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
	SkipFinalSnapshot *bool                          `queryParam:"style=form,explode=true,name=SkipFinalSnapshot"`
	Version           GETDeleteDBInstanceVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeleteDBInstanceHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteDBInstanceRequest struct {
	QueryParams GETDeleteDBInstanceQueryParams
	Headers     GETDeleteDBInstanceHeaders
}

type GETDeleteDBInstanceResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
