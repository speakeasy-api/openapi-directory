"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class ShippingFulfillment:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_shipping_fulfillment(self, request: operations.CreateShippingFulfillmentRequest, security: operations.CreateShippingFulfillmentSecurity) -> operations.CreateShippingFulfillmentResponse:
        r"""When you group an order's line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a <i>shipping fulfillment</i>. For each package, execute this call once to generate a shipping fulfillment associated with that package. <br><br> <span class=\"tablenote\"><strong>Note:</strong> A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package.</span> <br><br>Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateShippingFulfillmentRequest, base_url, '/order/{orderId}/shipping_fulfillment', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "shipping_fulfillment_details", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateShippingFulfillmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_shipping_fulfillment_201_application_json_object = out
        elif http_res.status_code in [400, 409, 500]:
            pass

        return res

    def get_shipping_fulfillment(self, request: operations.GetShippingFulfillmentRequest, security: operations.GetShippingFulfillmentSecurity) -> operations.GetShippingFulfillmentResponse:
        r"""Use this call to retrieve the contents of a fulfillment based on its unique identifier, <b>fulfillmentId</b> (combined with the associated order's <b>orderId</b>). The <b>fulfillmentId</b> value was originally generated by the <b>createShippingFulfillment</b> call, and is returned by the <b>getShippingFulfillments</b> call in the <b>members.fulfillmentId</b> field."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetShippingFulfillmentRequest, base_url, '/order/{orderId}/shipping_fulfillment/{fulfillmentId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetShippingFulfillmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingFulfillment])
                res.shipping_fulfillment = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def get_shipping_fulfillments(self, request: operations.GetShippingFulfillmentsRequest, security: operations.GetShippingFulfillmentsSecurity) -> operations.GetShippingFulfillmentsResponse:
        r"""Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order's unique identifier, <b>orderId</b>. This value is returned in the <b>getOrders</b> call's <b>members.orderId</b> field when you search for orders by creation date or shipment status."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetShippingFulfillmentsRequest, base_url, '/order/{orderId}/shipping_fulfillment', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetShippingFulfillmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingFulfillmentPagedCollection])
                res.shipping_fulfillment_paged_collection = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    