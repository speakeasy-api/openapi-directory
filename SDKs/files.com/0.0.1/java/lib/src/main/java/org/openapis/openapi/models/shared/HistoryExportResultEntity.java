/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HistoryExportResultEntity - List History Export Results
 */
public class HistoryExportResultEntity {
    /**
     * What action was taken. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    public String action;

    public HistoryExportResultEntity withAction(String action) {
        this.action = action;
        return this;
    }
    
    /**
     * When the action happened
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public Integer createdAt;

    public HistoryExportResultEntity withCreatedAt(Integer createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * When the action happened, in ISO8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at_iso8601")
    public Integer createdAtIso8601;

    public HistoryExportResultEntity withCreatedAtIso8601(Integer createdAtIso8601) {
        this.createdAtIso8601 = createdAtIso8601;
        return this;
    }
    
    /**
     * File moved to this destination folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    public String destination;

    public HistoryExportResultEntity withDestination(String destination) {
        this.destination = destination;
        return this;
    }
    
    /**
     * The type of login failure, if applicable.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failure_type")
    public String failureType;

    public HistoryExportResultEntity withFailureType(String failureType) {
        this.failureType = failureType;
        return this;
    }
    
    /**
     * File ID related to the action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_id")
    public Integer fileId;

    public HistoryExportResultEntity withFileId(Integer fileId) {
        this.fileId = fileId;
        return this;
    }
    
    /**
     * Folder in which the action occurred
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folder")
    public String folder;

    public HistoryExportResultEntity withFolder(String folder) {
        this.folder = folder;
        return this;
    }
    
    /**
     * Action ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public HistoryExportResultEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Inteface through which the action was taken. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interface")
    public String interface_;

    public HistoryExportResultEntity withInterface(String interface_) {
        this.interface_ = interface_;
        return this;
    }
    
    /**
     * Client IP that performed the action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    public String ip;

    public HistoryExportResultEntity withIp(String ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * ID of the parent folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    public Integer parentId;

    public HistoryExportResultEntity withParentId(Integer parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * Path of the related action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public HistoryExportResultEntity withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * File move originated from this path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("src")
    public String src;

    public HistoryExportResultEntity withSrc(String src) {
        this.src = src;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this is when the API key will expire
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_expires_at")
    public Integer targetExpiresAt;

    public HistoryExportResultEntity withTargetExpiresAt(Integer targetExpiresAt) {
        this.targetExpiresAt = targetExpiresAt;
        return this;
    }
    
    /**
     * ID of the object (such as Users, or API Keys) on which the action was taken
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_id")
    public Integer targetId;

    public HistoryExportResultEntity withTargetId(Integer targetId) {
        this.targetId = targetId;
        return this;
    }
    
    /**
     * Name of the User, Group or other object with a name related to this action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_name")
    public String targetName;

    public HistoryExportResultEntity withTargetName(String targetName) {
        this.targetName = targetName;
        return this;
    }
    
    /**
     * Permission level of the action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_permission")
    public String targetPermission;

    public HistoryExportResultEntity withTargetPermission(String targetPermission) {
        this.targetPermission = targetPermission;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this represents the permission set of the associated  API key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_permission_set")
    public String targetPermissionSet;

    public HistoryExportResultEntity withTargetPermissionSet(String targetPermissionSet) {
        this.targetPermissionSet = targetPermissionSet;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this is the platform on which the action was taken
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_platform")
    public String targetPlatform;

    public HistoryExportResultEntity withTargetPlatform(String targetPlatform) {
        this.targetPlatform = targetPlatform;
        return this;
    }
    
    /**
     * Whether or not the action was recursive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_recursive")
    public Boolean targetRecursive;

    public HistoryExportResultEntity withTargetRecursive(Boolean targetRecursive) {
        this.targetRecursive = targetRecursive;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this is the User ID on which the action was taken
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_user_id")
    public Integer targetUserId;

    public HistoryExportResultEntity withTargetUserId(Integer targetUserId) {
        this.targetUserId = targetUserId;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this is the username on which the action was taken
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_username")
    public String targetUsername;

    public HistoryExportResultEntity withTargetUsername(String targetUsername) {
        this.targetUsername = targetUsername;
        return this;
    }
    
    /**
     * User ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public Integer userId;

    public HistoryExportResultEntity withUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Username of the user that performed the action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public HistoryExportResultEntity withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public HistoryExportResultEntity(){}
}
