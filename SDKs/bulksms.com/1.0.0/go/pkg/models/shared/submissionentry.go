// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SubmissionEntryDeliveryReportsEnum - The type of delivery reports to request from the delivering network.
// The default value  is `ALL`. Please note that not all networks support delivery reports.
// ALL. All possible delivery reports
// ERRORS. Only error delivery reports
// NONE. No delivery reports
type SubmissionEntryDeliveryReportsEnum string

const (
	SubmissionEntryDeliveryReportsEnumAll    SubmissionEntryDeliveryReportsEnum = "ALL"
	SubmissionEntryDeliveryReportsEnumErrors SubmissionEntryDeliveryReportsEnum = "ERRORS"
	SubmissionEntryDeliveryReportsEnumNone   SubmissionEntryDeliveryReportsEnum = "NONE"
)

func (e *SubmissionEntryDeliveryReportsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL":
		fallthrough
	case "ERRORS":
		fallthrough
	case "NONE":
		*e = SubmissionEntryDeliveryReportsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmissionEntryDeliveryReportsEnum: %s", s)
	}
}

// SubmissionEntryEncodingEnum - Describes the content of the message body.
//
// Typically this is TEXT, which is the default if no value is provided.
//
// If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.
//
// If you want to send a sequence of bytes, you must use BINARY.
//
// You can also or use the `auto-unicode` parameter of the Send Messages Operation.
//
// If you supply the value of `TEXT` while `auto-unicode` is `true` then your message may be converted to `UNICODE`.
//
// If you supply a value other than `TEXT` for this property while `auto-unicode` is `true` then no automatic conversion will take place.
type SubmissionEntryEncodingEnum string

const (
	SubmissionEntryEncodingEnumText    SubmissionEntryEncodingEnum = "TEXT"
	SubmissionEntryEncodingEnumUnicode SubmissionEntryEncodingEnum = "UNICODE"
	SubmissionEntryEncodingEnumBinary  SubmissionEntryEncodingEnum = "BINARY"
)

func (e *SubmissionEntryEncodingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TEXT":
		fallthrough
	case "UNICODE":
		fallthrough
	case "BINARY":
		*e = SubmissionEntryEncodingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmissionEntryEncodingEnum: %s", s)
	}
}

// SubmissionEntryFromTypeEnum - The type of the sender id.
//
// If you want BulkSMS to collect replies to this message on your behalf, specify the type as REPLIABLE.  If the recipient is in a country where BulkSMS does not have a local reply number, the reply may incur costs that are more expensive than sending a local SMS in that country.
// If you operate a service from a shortcode in a locale that allows messaging from such a shortcode, you can specify SHORTCODE for the type.
type SubmissionEntryFromTypeEnum string

const (
	SubmissionEntryFromTypeEnumInternational SubmissionEntryFromTypeEnum = "INTERNATIONAL"
	SubmissionEntryFromTypeEnumAlphanumeric  SubmissionEntryFromTypeEnum = "ALPHANUMERIC"
	SubmissionEntryFromTypeEnumShortcode     SubmissionEntryFromTypeEnum = "SHORTCODE"
	SubmissionEntryFromTypeEnumRepliable     SubmissionEntryFromTypeEnum = "REPLIABLE"
)

func (e *SubmissionEntryFromTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INTERNATIONAL":
		fallthrough
	case "ALPHANUMERIC":
		fallthrough
	case "SHORTCODE":
		fallthrough
	case "REPLIABLE":
		*e = SubmissionEntryFromTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmissionEntryFromTypeEnum: %s", s)
	}
}

// SubmissionEntryFrom - Identifies the sender.
//
// Instead of a structured object, you can supply a string value here.
// If you do this, the `type` of the sender is derived to be either INTERNATIONAL or ALPHANUMERIC.  If the value does not begin with a `+` and it contains at least one character that is not a digit, the type is detected as ALPHANUMERIC. Otherwise, the type is detected as INTERNATIONAL.
type SubmissionEntryFrom struct {
	// The address of the sender id.
	//
	// The validation for this field depends on the value of the `type`.
	// INTERNATIONAL can start with `+`. It has a maximum length of 15 digits, and has to be longer than 6 digits.
	// ALPHANUMERIC has a maximum length of 11 characters.
	// SHORTCODE has a maximum length of 6 digits.
	// REPLIABLE should not specify a value here.
	//
	Address *string `json:"address,omitempty"`
	// The type of the sender id.
	//
	// If you want BulkSMS to collect replies to this message on your behalf, specify the type as REPLIABLE.  If the recipient is in a country where BulkSMS does not have a local reply number, the reply may incur costs that are more expensive than sending a local SMS in that country.
	// If you operate a service from a shortcode in a locale that allows messaging from such a shortcode, you can specify SHORTCODE for the type.
	//
	Type SubmissionEntryFromTypeEnum `json:"type"`
}

// SubmissionEntryMessageClassEnum - The class of the message, as specified by ยง4 of the GSM 03.38 specification.
//
// You can provide either an integer value, or a mnemonic string.
//
// The default value is SIM_SPECIFIC.
// Numeric values are
// | Name | Value|
// |------|------|
// | FLASH_SMS | 0      |
// | ME_SPECIFIC | 1    |
// | SIM_SPECIFIC | 2   |
// | TE_SPECIFIC | 3   |
type SubmissionEntryMessageClassEnum string

const (
	SubmissionEntryMessageClassEnumFlashSms    SubmissionEntryMessageClassEnum = "FLASH_SMS"
	SubmissionEntryMessageClassEnumMeSpecific  SubmissionEntryMessageClassEnum = "ME_SPECIFIC"
	SubmissionEntryMessageClassEnumSimSpecific SubmissionEntryMessageClassEnum = "SIM_SPECIFIC"
	SubmissionEntryMessageClassEnumTeSpecific  SubmissionEntryMessageClassEnum = "TE_SPECIFIC"
)

func (e *SubmissionEntryMessageClassEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FLASH_SMS":
		fallthrough
	case "ME_SPECIFIC":
		fallthrough
	case "SIM_SPECIFIC":
		fallthrough
	case "TE_SPECIFIC":
		*e = SubmissionEntryMessageClassEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmissionEntryMessageClassEnum: %s", s)
	}
}

// SubmissionEntryProtocolIDEnum - The TP-PID value from GSM 03.40[.750] ยง9.2.3.9.
//
// You can provide either an integer value, or a mnemonic string.
//
// If unspecified, this property defaults to `0`, representing the IMPLICIT value.
// Numeric values are listed below
// | Name | Value|
// |----- |------|
// | IMPLICIT              | 00 |
// | SHORT_MESSAGE_TYPE_0  | 64 |
// | REPLACE_MESSAGE_1     | 65 |
// | REPLACE_MESSAGE_2     | 66 |
// | REPLACE_MESSAGE_3     | 67 |
// | REPLACE_MESSAGE_4     | 68 |
// | REPLACE_MESSAGE_5     | 69 |
// | REPLACE_MESSAGE_6     | 70 |
// | REPLACE_MESSAGE_7     | 71 |
// | RETURN_CALL           | 95 |
// | ME_DOWNLOAD           | 125 |
// | ME_DEPERSONALIZE      | 126 |
// | SIM_DOWNLOAD          | 127 |
type SubmissionEntryProtocolIDEnum string

const (
	SubmissionEntryProtocolIDEnumImplicit          SubmissionEntryProtocolIDEnum = "IMPLICIT"
	SubmissionEntryProtocolIDEnumShortMessageType0 SubmissionEntryProtocolIDEnum = "SHORT_MESSAGE_TYPE_0"
	SubmissionEntryProtocolIDEnumReplaceMessage1   SubmissionEntryProtocolIDEnum = "REPLACE_MESSAGE_1"
	SubmissionEntryProtocolIDEnumReplaceMessage2   SubmissionEntryProtocolIDEnum = "REPLACE_MESSAGE_2"
	SubmissionEntryProtocolIDEnumReplaceMessage3   SubmissionEntryProtocolIDEnum = "REPLACE_MESSAGE_3"
	SubmissionEntryProtocolIDEnumReplaceMessage4   SubmissionEntryProtocolIDEnum = "REPLACE_MESSAGE_4"
	SubmissionEntryProtocolIDEnumReplaceMessage5   SubmissionEntryProtocolIDEnum = "REPLACE_MESSAGE_5"
	SubmissionEntryProtocolIDEnumReplaceMessage6   SubmissionEntryProtocolIDEnum = "REPLACE_MESSAGE_6"
	SubmissionEntryProtocolIDEnumReplaceMessage7   SubmissionEntryProtocolIDEnum = "REPLACE_MESSAGE_7"
	SubmissionEntryProtocolIDEnumReturnCall        SubmissionEntryProtocolIDEnum = "RETURN_CALL"
	SubmissionEntryProtocolIDEnumMeDownload        SubmissionEntryProtocolIDEnum = "ME_DOWNLOAD"
	SubmissionEntryProtocolIDEnumMeDepersonalize   SubmissionEntryProtocolIDEnum = "ME_DEPERSONALIZE"
	SubmissionEntryProtocolIDEnumSimDownload       SubmissionEntryProtocolIDEnum = "SIM_DOWNLOAD"
)

func (e *SubmissionEntryProtocolIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IMPLICIT":
		fallthrough
	case "SHORT_MESSAGE_TYPE_0":
		fallthrough
	case "REPLACE_MESSAGE_1":
		fallthrough
	case "REPLACE_MESSAGE_2":
		fallthrough
	case "REPLACE_MESSAGE_3":
		fallthrough
	case "REPLACE_MESSAGE_4":
		fallthrough
	case "REPLACE_MESSAGE_5":
		fallthrough
	case "REPLACE_MESSAGE_6":
		fallthrough
	case "REPLACE_MESSAGE_7":
		fallthrough
	case "RETURN_CALL":
		fallthrough
	case "ME_DOWNLOAD":
		fallthrough
	case "ME_DEPERSONALIZE":
		fallthrough
	case "SIM_DOWNLOAD":
		*e = SubmissionEntryProtocolIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmissionEntryProtocolIDEnum: %s", s)
	}
}

// SubmissionEntryRoutingGroupEnum - Allows you to choose routing. The default is STANDARD.
type SubmissionEntryRoutingGroupEnum string

const (
	SubmissionEntryRoutingGroupEnumEconomy  SubmissionEntryRoutingGroupEnum = "ECONOMY"
	SubmissionEntryRoutingGroupEnumStandard SubmissionEntryRoutingGroupEnum = "STANDARD"
	SubmissionEntryRoutingGroupEnumPremium  SubmissionEntryRoutingGroupEnum = "PREMIUM"
)

func (e *SubmissionEntryRoutingGroupEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ECONOMY":
		fallthrough
	case "STANDARD":
		fallthrough
	case "PREMIUM":
		*e = SubmissionEntryRoutingGroupEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmissionEntryRoutingGroupEnum: %s", s)
	}
}

// SubmissionEntryToTypeEnum - Type of the recipient. The default value is INTERNATIONAL.
type SubmissionEntryToTypeEnum string

const (
	SubmissionEntryToTypeEnumInternational SubmissionEntryToTypeEnum = "INTERNATIONAL"
	SubmissionEntryToTypeEnumGroup         SubmissionEntryToTypeEnum = "GROUP"
)

func (e *SubmissionEntryToTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INTERNATIONAL":
		fallthrough
	case "GROUP":
		*e = SubmissionEntryToTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmissionEntryToTypeEnum: %s", s)
	}
}

type SubmissionEntryTo struct {
	// The phone number of the recipient.  It must be supplied if the `type` is INTERNATIONAL
	Address *string `json:"address,omitempty"`
	// Custom fields that can be used in the message body. A value can be given if the `type` is INTERNATIONAL
	//
	// Read the [body templates section](#tag/Message) for more information.
	//
	Fields []string `json:"fields,omitempty"`
	// The id of a group in your phonebook.  A value can be given if the `type` is GROUP.
	ID *string `json:"id,omitempty"`
	// The name of a group in your phonebook. A value can be given if the `type` is GROUP.
	Name *string `json:"name,omitempty"`
	// Type of the recipient. The default value is INTERNATIONAL.
	Type *SubmissionEntryToTypeEnum `json:"type,omitempty"`
}

// SubmissionEntry - An object that you use when posting messages.
type SubmissionEntry struct {
	// The message content as described in the `encoding`. If the `encoding` is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes '0x05' and '0x1F', the message body must contain the text '051F'.
	//
	// The message content can also contain templates, read the [body templates section](#tag/Message) for more information.
	//
	Body string `json:"body"`
	// The type of delivery reports to request from the delivering network.
	// The default value  is `ALL`. Please note that not all networks support delivery reports.
	// ALL. All possible delivery reports
	// ERRORS. Only error delivery reports
	// NONE. No delivery reports
	DeliveryReports *SubmissionEntryDeliveryReportsEnum `json:"deliveryReports,omitempty"`
	// Describes the content of the message body.
	//
	// Typically this is TEXT, which is the default if no value is provided.
	//
	// If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.
	//
	// If you want to send a sequence of bytes, you must use BINARY.
	//
	// You can also or use the `auto-unicode` parameter of the Send Messages Operation.
	//
	// If you supply the value of `TEXT` while `auto-unicode` is `true` then your message may be converted to `UNICODE`.
	//
	// If you supply a value other than `TEXT` for this property while `auto-unicode` is `true` then no automatic conversion will take place.
	//
	Encoding *SubmissionEntryEncodingEnum `json:"encoding,omitempty"`
	// Identifies the sender.
	//
	// Instead of a structured object, you can supply a string value here.
	// If you do this, the `type` of the sender is derived to be either INTERNATIONAL or ALPHANUMERIC.  If the value does not begin with a `+` and it contains at least one character that is not a digit, the type is detected as ALPHANUMERIC. Otherwise, the type is detected as INTERNATIONAL.
	//
	From *SubmissionEntryFrom `json:"from,omitempty"`
	// The maximum number of message parts that can be used for a [concatenated message](https://en.wikipedia.org/wiki/Concatenated_SMS).
	// The default is `3`.
	//
	LongMessageMaxParts *int `json:"longMessageMaxParts,omitempty"`
	// The class of the message, as specified by ยง4 of the GSM 03.38 specification.
	//
	// You can provide either an integer value, or a mnemonic string.
	//
	// The default value is SIM_SPECIFIC.
	// Numeric values are
	// | Name | Value|
	// |------|------|
	// | FLASH_SMS | 0      |
	// | ME_SPECIFIC | 1    |
	// | SIM_SPECIFIC | 2   |
	// | TE_SPECIFIC | 3   |
	//
	MessageClass *SubmissionEntryMessageClassEnum `json:"messageClass,omitempty"`
	// The TP-PID value from GSM 03.40[.750] ยง9.2.3.9.
	//
	// You can provide either an integer value, or a mnemonic string.
	//
	// If unspecified, this property defaults to `0`, representing the IMPLICIT value.
	// Numeric values are listed below
	// | Name | Value|
	// |----- |------|
	// | IMPLICIT              | 00 |
	// | SHORT_MESSAGE_TYPE_0  | 64 |
	// | REPLACE_MESSAGE_1     | 65 |
	// | REPLACE_MESSAGE_2     | 66 |
	// | REPLACE_MESSAGE_3     | 67 |
	// | REPLACE_MESSAGE_4     | 68 |
	// | REPLACE_MESSAGE_5     | 69 |
	// | REPLACE_MESSAGE_6     | 70 |
	// | REPLACE_MESSAGE_7     | 71 |
	// | RETURN_CALL           | 95 |
	// | ME_DOWNLOAD           | 125 |
	// | ME_DEPERSONALIZE      | 126 |
	// | SIM_DOWNLOAD          | 127 |
	//
	ProtocolID *SubmissionEntryProtocolIDEnum `json:"protocolId,omitempty"`
	// Allows you to choose routing. The default is STANDARD.
	//
	RoutingGroup *SubmissionEntryRoutingGroupEnum `json:"routingGroup,omitempty"`
	// Identifies the recipients
	//
	// Instead of an array of structured objects, you can also provide a single object, a simple string or an array of strings.
	// If you supply a string, the `type` is taken as INTERNATIONAL.
	//
	To []SubmissionEntryTo `json:"to"`
	// Correlate the messages created from this submission to your data.
	//
	// The value can contain no more than 20 characters.
	//
	UserSuppliedID *string `json:"userSuppliedId,omitempty"`
}
