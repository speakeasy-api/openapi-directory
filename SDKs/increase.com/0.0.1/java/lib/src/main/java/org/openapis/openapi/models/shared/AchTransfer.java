/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * AchTransfer - ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).
 */
public class AchTransfer {
    /**
     * The Account to which the transfer belongs.
     */
    @JsonProperty("account_id")
    public String accountId;
    public AchTransfer withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The destination account number.
     */
    @JsonProperty("account_number")
    public String accountNumber;
    public AchTransfer withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * Additional information that will be sent to the recipient.
     */
    @JsonProperty("addendum")
    public String addendum;
    public AchTransfer withAddendum(String addendum) {
        this.addendum = addendum;
        return this;
    }
    
    /**
     * The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
     */
    @JsonProperty("amount")
    public Long amount;
    public AchTransfer withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
     */
    @JsonProperty("approval")
    public AchTransferTransferApproval approval;
    public AchTransfer withApproval(AchTransferTransferApproval approval) {
        this.approval = approval;
        return this;
    }
    
    /**
     * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
     */
    @JsonProperty("cancellation")
    public AchTransferTransferCancellation cancellation;
    public AchTransfer withCancellation(AchTransferTransferCancellation cancellation) {
        this.cancellation = cancellation;
        return this;
    }
    
    /**
     * The description of the date of the transfer.
     */
    @JsonProperty("company_descriptive_date")
    public String companyDescriptiveDate;
    public AchTransfer withCompanyDescriptiveDate(String companyDescriptiveDate) {
        this.companyDescriptiveDate = companyDescriptiveDate;
        return this;
    }
    
    /**
     * The data you chose to associate with the transfer.
     */
    @JsonProperty("company_discretionary_data")
    public String companyDiscretionaryData;
    public AchTransfer withCompanyDiscretionaryData(String companyDiscretionaryData) {
        this.companyDiscretionaryData = companyDiscretionaryData;
        return this;
    }
    
    /**
     * The description of the transfer you set to be shown to the recipient.
     */
    @JsonProperty("company_entry_description")
    public String companyEntryDescription;
    public AchTransfer withCompanyEntryDescription(String companyEntryDescription) {
        this.companyEntryDescription = companyEntryDescription;
        return this;
    }
    
    /**
     * The name by which the recipient knows you.
     */
    @JsonProperty("company_name")
    public String companyName;
    public AchTransfer withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public AchTransfer withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
     */
    @JsonProperty("currency")
    public AchTransferCurrencyEnum currency;
    public AchTransfer withCurrency(AchTransferCurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The identifier of the External Account the transfer was made to, if any.
     */
    @JsonProperty("external_account_id")
    public String externalAccountId;
    public AchTransfer withExternalAccountId(String externalAccountId) {
        this.externalAccountId = externalAccountId;
        return this;
    }
    
    /**
     * The type of the account to which the transfer will be sent.
     */
    @JsonProperty("funding")
    public AchTransferFundingEnum funding;
    public AchTransfer withFunding(AchTransferFundingEnum funding) {
        this.funding = funding;
        return this;
    }
    
    /**
     * The ACH transfer's identifier.
     */
    @JsonProperty("id")
    public String id;
    public AchTransfer withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Your identifer for the transfer recipient.
     */
    @JsonProperty("individual_id")
    public String individualId;
    public AchTransfer withIndividualId(String individualId) {
        this.individualId = individualId;
        return this;
    }
    
    /**
     * The name of the transfer recipient. This value is information and not verified by the recipient's bank.
     */
    @JsonProperty("individual_name")
    public String individualName;
    public AchTransfer withIndividualName(String individualName) {
        this.individualName = individualName;
        return this;
    }
    
    /**
     * The transfer's network.
     */
    @JsonProperty("network")
    public AchTransferNetworkEnum network;
    public AchTransfer withNetwork(AchTransferNetworkEnum network) {
        this.network = network;
        return this;
    }
    
    /**
     * If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
     */
    @JsonProperty("notification_of_change")
    public ACHTransferACHNotificationOfChange notificationOfChange;
    public AchTransfer withNotificationOfChange(ACHTransferACHNotificationOfChange notificationOfChange) {
        this.notificationOfChange = notificationOfChange;
        return this;
    }
    
    /**
     * If your transfer is returned, this will contain details of the return.
     */
    @JsonProperty("return")
    public ACHTransferACHTransferReturn return_;
    public AchTransfer withReturn(ACHTransferACHTransferReturn return_) {
        this.return_ = return_;
        return this;
    }
    
    /**
     * The American Bankers' Association (ABA) Routing Transit Number (RTN).
     */
    @JsonProperty("routing_number")
    public String routingNumber;
    public AchTransfer withRoutingNumber(String routingNumber) {
        this.routingNumber = routingNumber;
        return this;
    }
    
    /**
     * The Standard Entry Class (SEC) code to use for the transfer.
     */
    @JsonProperty("standard_entry_class_code")
    public AchTransferStandardEntryClassCodeEnum standardEntryClassCode;
    public AchTransfer withStandardEntryClassCode(AchTransferStandardEntryClassCodeEnum standardEntryClassCode) {
        this.standardEntryClassCode = standardEntryClassCode;
        return this;
    }
    
    /**
     * The descriptor that will show on the recipient's bank statement.
     */
    @JsonProperty("statement_descriptor")
    public String statementDescriptor;
    public AchTransfer withStatementDescriptor(String statementDescriptor) {
        this.statementDescriptor = statementDescriptor;
        return this;
    }
    
    /**
     * The lifecycle status of the transfer.
     */
    @JsonProperty("status")
    public AchTransferStatusEnum status;
    public AchTransfer withStatus(AchTransferStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * After the transfer is submitted to FedACH, this will contain supplemental details.
     */
    @JsonProperty("submission")
    public ACHTransferACHTransferSubmission submission;
    public AchTransfer withSubmission(ACHTransferACHTransferSubmission submission) {
        this.submission = submission;
        return this;
    }
    
    /**
     * If the transfer was created from a template, this will be the template's ID.
     */
    @JsonProperty("template_id")
    public String templateId;
    public AchTransfer withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    /**
     * The ID for the transaction funding the transfer.
     */
    @JsonProperty("transaction_id")
    public String transactionId;
    public AchTransfer withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
    /**
     * A constant representing the object's type. For this resource it will always be `ach_transfer`.
     */
    @JsonProperty("type")
    public AchTransferTypeEnum type;
    public AchTransfer withType(AchTransferTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
