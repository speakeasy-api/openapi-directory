/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class DatafeedFormat {
    /**
     * Delimiter for the separation of values in a delimiter-separated values feed. If not specified, the delimiter will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - "`pipe`" - "`tab`" - "`tilde`" 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnDelimiter")
    public String columnDelimiter;

    public DatafeedFormat withColumnDelimiter(String columnDelimiter) {
        this.columnDelimiter = columnDelimiter;
        return this;
    }
    
    /**
     * Character encoding scheme of the data feed. If not specified, the encoding will be auto-detected. Acceptable values are: - "`latin-1`" - "`utf-16be`" - "`utf-16le`" - "`utf-8`" - "`windows-1252`" 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileEncoding")
    public String fileEncoding;

    public DatafeedFormat withFileEncoding(String fileEncoding) {
        this.fileEncoding = fileEncoding;
        return this;
    }
    
    /**
     * Specifies how double quotes are interpreted. If not specified, the mode will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - "`normal character`" - "`value quoting`" 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotingMode")
    public String quotingMode;

    public DatafeedFormat withQuotingMode(String quotingMode) {
        this.quotingMode = quotingMode;
        return this;
    }
    
    public DatafeedFormat(){}
}
