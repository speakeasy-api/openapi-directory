/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://azure-api.sportsdata.io/v3/nhl/projections",
  "https://azure-api.sportsdata.io/v3/nhl/projections",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * DFS Slates by Date
   */
  dfsSlatesByDate(
    req: operations.DfsSlatesByDateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DfsSlatesByDateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfsSlatesByDateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/DfsSlatesByDate/{date}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfsSlatesByDateResponse =
        new operations.DfsSlatesByDateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dfsSlates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.dfsSlates = utils.objectToClass(
              httpRes?.data,
              shared.DfsSlate,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Injured Players
   *
   * @remarks
   * This endpoint provides all currently injured NHL players, along with injury details.
   */
  injuredPlayers(
    req: operations.InjuredPlayersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InjuredPlayersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InjuredPlayersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/InjuredPlayers",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InjuredPlayersResponse =
        new operations.InjuredPlayersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.players = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.players = utils.objectToClass(
              httpRes?.data,
              shared.Player,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Player Game Stats by Date (w/ Injuries, DFS Salaries)
   */
  projectedPlayerGameStatsByDateWInjuriesDfsSalaries(
    req: operations.ProjectedPlayerGameStatsByDateWInjuriesDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedPlayerGameStatsByDateWInjuriesDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ProjectedPlayerGameStatsByDateWInjuriesDfsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerGameProjectionStatsByDate/{date}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedPlayerGameStatsByDateWInjuriesDfsSalariesResponse =
        new operations.ProjectedPlayerGameStatsByDateWInjuriesDfsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGameProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerGameProjections = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGameProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Player Game Stats by Player (w/ Injuries, DFS Salaries)
   */
  projectedPlayerGameStatsByPlayerWInjuriesDfsSalaries(
    req: operations.ProjectedPlayerGameStatsByPlayerWInjuriesDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedPlayerGameStatsByPlayerWInjuriesDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ProjectedPlayerGameStatsByPlayerWInjuriesDfsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerGameProjectionStatsByPlayer/{date}/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedPlayerGameStatsByPlayerWInjuriesDfsSalariesResponse =
        new operations.ProjectedPlayerGameStatsByPlayerWInjuriesDfsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGameProjection = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGameProjection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starting Goaltenders by Date
   *
   * @remarks
   * This endpoint provides the projected & confirmed starting goaltenders for NHL games on a given date.
   */
  startingGoaltendersByDate(
    req: operations.StartingGoaltendersByDateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StartingGoaltendersByDateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StartingGoaltendersByDateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/StartingGoaltendersByDate/{date}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StartingGoaltendersByDateResponse =
        new operations.StartingGoaltendersByDateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.startingGoaltenders = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.startingGoaltenders = utils.objectToClass(
              httpRes?.data,
              shared.StartingGoaltenders,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
