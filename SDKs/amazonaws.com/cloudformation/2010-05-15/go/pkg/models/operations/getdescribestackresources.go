// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeStackResourcesActionEnum
type GETDescribeStackResourcesActionEnum string

const (
	GETDescribeStackResourcesActionEnumDescribeStackResources GETDescribeStackResourcesActionEnum = "DescribeStackResources"
)

func (e GETDescribeStackResourcesActionEnum) ToPointer() *GETDescribeStackResourcesActionEnum {
	return &e
}

func (e *GETDescribeStackResourcesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeStackResources":
		*e = GETDescribeStackResourcesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeStackResourcesActionEnum: %v", v)
	}
}

// GETDescribeStackResourcesVersionEnum
type GETDescribeStackResourcesVersionEnum string

const (
	GETDescribeStackResourcesVersionEnumTwoThousandAndTen0515 GETDescribeStackResourcesVersionEnum = "2010-05-15"
)

func (e GETDescribeStackResourcesVersionEnum) ToPointer() *GETDescribeStackResourcesVersionEnum {
	return &e
}

func (e *GETDescribeStackResourcesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-15":
		*e = GETDescribeStackResourcesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeStackResourcesVersionEnum: %v", v)
	}
}

type GETDescribeStackResourcesRequest struct {
	Action GETDescribeStackResourcesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The logical name of the resource as specified in the template.</p> <p>Default: There is no default value.</p>
	LogicalResourceID *string `queryParam:"style=form,explode=true,name=LogicalResourceId"`
	// <p>The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.</p> <p>For example, for an Amazon Elastic Compute Cloud (EC2) instance, <code>PhysicalResourceId</code> corresponds to the <code>InstanceId</code>. You can pass the EC2 <code>InstanceId</code> to <code>DescribeStackResources</code> to find which stack the instance belongs to and what other resources are part of the stack.</p> <p>Required: Conditional. If you don't specify <code>PhysicalResourceId</code>, you must specify <code>StackName</code>.</p> <p>Default: There is no default value.</p>
	PhysicalResourceID *string `queryParam:"style=form,explode=true,name=PhysicalResourceId"`
	// <p>The name or the unique stack ID that is associated with the stack, which aren't always interchangeable:</p> <ul> <li> <p>Running stacks: You can specify either the stack's name or its unique stack ID.</p> </li> <li> <p>Deleted stacks: You must specify the unique stack ID.</p> </li> </ul> <p>Default: There is no default value.</p> <p>Required: Conditional. If you don't specify <code>StackName</code>, you must specify <code>PhysicalResourceId</code>.</p>
	StackName         *string                              `queryParam:"style=form,explode=true,name=StackName"`
	Version           GETDescribeStackResourcesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeStackResourcesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
