"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import recommendationjobinputconfig as shared_recommendationjobinputconfig
from ..shared import recommendationjoboutputconfig as shared_recommendationjoboutputconfig
from ..shared import recommendationjobstoppingconditions as shared_recommendationjobstoppingconditions
from ..shared import recommendationjobtype_enum as shared_recommendationjobtype_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateInferenceRecommendationsJobRequest:
    
    input_config: shared_recommendationjobinputconfig.RecommendationJobInputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputConfig') }})  
    job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobName') }})  
    job_type: shared_recommendationjobtype_enum.RecommendationJobTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobType') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    job_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobDescription'), 'exclude': lambda f: f is None }})  
    output_config: Optional[shared_recommendationjoboutputconfig.RecommendationJobOutputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputConfig'), 'exclude': lambda f: f is None }})  
    stopping_conditions: Optional[shared_recommendationjobstoppingconditions.RecommendationJobStoppingConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingConditions'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    