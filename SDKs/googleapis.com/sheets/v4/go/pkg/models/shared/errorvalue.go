// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ErrorValueTypeEnum - The type of error.
type ErrorValueTypeEnum string

const (
	ErrorValueTypeEnumErrorTypeUnspecified ErrorValueTypeEnum = "ERROR_TYPE_UNSPECIFIED"
	ErrorValueTypeEnumError                ErrorValueTypeEnum = "ERROR"
	ErrorValueTypeEnumNullValue            ErrorValueTypeEnum = "NULL_VALUE"
	ErrorValueTypeEnumDivideByZero         ErrorValueTypeEnum = "DIVIDE_BY_ZERO"
	ErrorValueTypeEnumValue                ErrorValueTypeEnum = "VALUE"
	ErrorValueTypeEnumRef                  ErrorValueTypeEnum = "REF"
	ErrorValueTypeEnumName                 ErrorValueTypeEnum = "NAME"
	ErrorValueTypeEnumNum                  ErrorValueTypeEnum = "NUM"
	ErrorValueTypeEnumNa                   ErrorValueTypeEnum = "N_A"
	ErrorValueTypeEnumLoading              ErrorValueTypeEnum = "LOADING"
)

func (e *ErrorValueTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ERROR_TYPE_UNSPECIFIED":
		fallthrough
	case "ERROR":
		fallthrough
	case "NULL_VALUE":
		fallthrough
	case "DIVIDE_BY_ZERO":
		fallthrough
	case "VALUE":
		fallthrough
	case "REF":
		fallthrough
	case "NAME":
		fallthrough
	case "NUM":
		fallthrough
	case "N_A":
		fallthrough
	case "LOADING":
		*e = ErrorValueTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorValueTypeEnum: %s", s)
	}
}

// ErrorValue - An error in a cell.
type ErrorValue struct {
	// A message with more information about the error (in the spreadsheet's locale).
	Message *string `json:"message,omitempty"`
	// The type of error.
	Type *ErrorValueTypeEnum `json:"type,omitempty"`
}
