// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WebhookCreateEventsEnum string

const (
	WebhookCreateEventsEnumCall WebhookCreateEventsEnum = "CALL"
)

func (e *WebhookCreateEventsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CALL":
		*e = WebhookCreateEventsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookCreateEventsEnum: %s", s)
	}
}

// WebhookCreateMetadataPolicyEnum - Metadata policy for the webhook
type WebhookCreateMetadataPolicyEnum string

const (
	WebhookCreateMetadataPolicyEnumNone   WebhookCreateMetadataPolicyEnum = "NONE"
	WebhookCreateMetadataPolicyEnumHeader WebhookCreateMetadataPolicyEnum = "HEADER"
	WebhookCreateMetadataPolicyEnumBody   WebhookCreateMetadataPolicyEnum = "BODY"
)

func (e *WebhookCreateMetadataPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NONE":
		fallthrough
	case "HEADER":
		fallthrough
	case "BODY":
		*e = WebhookCreateMetadataPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookCreateMetadataPolicyEnum: %s", s)
	}
}

// WebhookCreateSigningAlgoEnum - Signing algorithm for the webhook
type WebhookCreateSigningAlgoEnum string

const (
	WebhookCreateSigningAlgoEnumHmacSha256 WebhookCreateSigningAlgoEnum = "HMAC_SHA256"
)

func (e *WebhookCreateSigningAlgoEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HMAC_SHA256":
		*e = WebhookCreateSigningAlgoEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookCreateSigningAlgoEnum: %s", s)
	}
}

// WebhookCreate - Webhook create parameters
type WebhookCreate struct {
	// Events to subscribe to the webhook
	Events []WebhookCreateEventsEnum `json:"events,omitempty"`
	// Metadata policy for the webhook
	MetadataPolicy *WebhookCreateMetadataPolicyEnum `json:"metadataPolicy,omitempty"`
	// Signing algorithm for the webhook
	SigningAlgo *WebhookCreateSigningAlgoEnum `json:"signingAlgo,omitempty"`
	// Signing key for the webhook
	SigningKey *string `json:"signingKey,omitempty"`
	// Destination URL for events
	URL *string `json:"url,omitempty"`
}
