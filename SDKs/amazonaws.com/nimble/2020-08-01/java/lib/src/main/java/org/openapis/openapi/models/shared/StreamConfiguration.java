/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StreamConfiguration - A configuration for a streaming session.
 */
public class StreamConfiguration {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("automaticTerminationMode")
    public AutomaticTerminationModeEnum automaticTerminationMode;

    public StreamConfiguration withAutomaticTerminationMode(AutomaticTerminationModeEnum automaticTerminationMode) {
        this.automaticTerminationMode = automaticTerminationMode;
        return this;
    }
    
    @JsonProperty("clipboardMode")
    public StreamingClipboardModeEnum clipboardMode;

    public StreamConfiguration withClipboardMode(StreamingClipboardModeEnum clipboardMode) {
        this.clipboardMode = clipboardMode;
        return this;
    }
    
    @JsonProperty("ec2InstanceTypes")
    public StreamingInstanceTypeEnum[] ec2InstanceTypes;

    public StreamConfiguration withEc2InstanceTypes(StreamingInstanceTypeEnum[] ec2InstanceTypes) {
        this.ec2InstanceTypes = ec2InstanceTypes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxSessionLengthInMinutes")
    public Long maxSessionLengthInMinutes;

    public StreamConfiguration withMaxSessionLengthInMinutes(Long maxSessionLengthInMinutes) {
        this.maxSessionLengthInMinutes = maxSessionLengthInMinutes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxStoppedSessionLengthInMinutes")
    public Long maxStoppedSessionLengthInMinutes;

    public StreamConfiguration withMaxStoppedSessionLengthInMinutes(Long maxStoppedSessionLengthInMinutes) {
        this.maxStoppedSessionLengthInMinutes = maxStoppedSessionLengthInMinutes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionBackup")
    public StreamConfigurationSessionBackup sessionBackup;

    public StreamConfiguration withSessionBackup(StreamConfigurationSessionBackup sessionBackup) {
        this.sessionBackup = sessionBackup;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionPersistenceMode")
    public SessionPersistenceModeEnum sessionPersistenceMode;

    public StreamConfiguration withSessionPersistenceMode(SessionPersistenceModeEnum sessionPersistenceMode) {
        this.sessionPersistenceMode = sessionPersistenceMode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionStorage")
    public StreamConfigurationSessionStorage sessionStorage;

    public StreamConfiguration withSessionStorage(StreamConfigurationSessionStorage sessionStorage) {
        this.sessionStorage = sessionStorage;
        return this;
    }
    
    @JsonProperty("streamingImageIds")
    public String[] streamingImageIds;

    public StreamConfiguration withStreamingImageIds(String[] streamingImageIds) {
        this.streamingImageIds = streamingImageIds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeConfiguration")
    public VolumeConfiguration volumeConfiguration;

    public StreamConfiguration withVolumeConfiguration(VolumeConfiguration volumeConfiguration) {
        this.volumeConfiguration = volumeConfiguration;
        return this;
    }
    
    public StreamConfiguration(@JsonProperty("clipboardMode") StreamingClipboardModeEnum clipboardMode, @JsonProperty("ec2InstanceTypes") StreamingInstanceTypeEnum[] ec2InstanceTypes, @JsonProperty("streamingImageIds") String[] streamingImageIds) {
        this.clipboardMode = clipboardMode;
        this.ec2InstanceTypes = ec2InstanceTypes;
        this.streamingImageIds = streamingImageIds;
  }
}
