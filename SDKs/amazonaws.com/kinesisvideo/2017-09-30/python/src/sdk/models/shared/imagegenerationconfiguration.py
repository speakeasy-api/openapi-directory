"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configurationstatus_enum as shared_configurationstatus_enum
from ..shared import format_enum as shared_format_enum
from ..shared import imagegenerationdestinationconfig as shared_imagegenerationdestinationconfig
from ..shared import imageselectortype_enum as shared_imageselectortype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageGenerationConfiguration:
    r"""The structure that contains the information required for the KVS images delivery. If null, the configuration will be deleted from the stream."""
    
    destination_config: shared_imagegenerationdestinationconfig.ImageGenerationDestinationConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationConfig') }})  
    format: shared_format_enum.FormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Format') }})  
    image_selector_type: shared_imageselectortype_enum.ImageSelectorTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageSelectorType') }})  
    sampling_interval: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SamplingInterval') }})  
    status: shared_configurationstatus_enum.ConfigurationStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})  
    format_config: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FormatConfig'), 'exclude': lambda f: f is None }})  
    height_pixels: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HeightPixels'), 'exclude': lambda f: f is None }})  
    width_pixels: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WidthPixels'), 'exclude': lambda f: f is None }})  
    