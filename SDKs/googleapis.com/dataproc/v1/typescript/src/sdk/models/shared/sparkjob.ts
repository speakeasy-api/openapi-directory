/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LoggingConfig } from "./loggingconfig";
import { Expose, Type } from "class-transformer";

/**
 * A Dataproc job for running Apache Spark (https://spark.apache.org/) applications on YARN.
 */
export class SparkJob extends SpeakeasyBase {
  /**
   * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archiveUris" })
  archiveUris?: string[];

  /**
   * Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "args" })
  args?: string[];

  /**
   * Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileUris" })
  fileUris?: string[];

  /**
   * Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Spark driver and tasks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jarFileUris" })
  jarFileUris?: string[];

  /**
   * The runtime logging config of the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loggingConfig" })
  @Type(() => LoggingConfig)
  loggingConfig?: LoggingConfig;

  /**
   * The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mainClass" })
  mainClass?: string;

  /**
   * The HCFS URI of the jar file that contains the main class.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mainJarFileUri" })
  mainJarFileUri?: string;

  /**
   * Optional. A mapping of property names to values, used to configure Spark. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties?: Record<string, string>;
}
