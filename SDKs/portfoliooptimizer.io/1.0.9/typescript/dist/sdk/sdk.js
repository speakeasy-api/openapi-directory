"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var assetsanalysis_1 = require("./assetsanalysis");
var assetscorrelationmatrix_1 = require("./assetscorrelationmatrix");
var assetscovariancematrix_1 = require("./assetscovariancematrix");
var assetskurtosis_1 = require("./assetskurtosis");
var assetsprices_1 = require("./assetsprices");
var assetsreturns_1 = require("./assetsreturns");
var assetsreturnssimulation_1 = require("./assetsreturnssimulation");
var assetsskewness_1 = require("./assetsskewness");
var assetsvariance_1 = require("./assetsvariance");
var assetsvolatility_1 = require("./assetsvolatility");
var factors_1 = require("./factors");
var shared = __importStar(require("./models/shared"));
var portfolioanalysis_1 = require("./portfolioanalysis");
var portfolioanalysissharperatio_1 = require("./portfolioanalysissharperatio");
var portfolioconstruction_1 = require("./portfolioconstruction");
var portfoliooptimization_1 = require("./portfoliooptimization");
var portfoliooptimizationmeanvariance_1 = require("./portfoliooptimizationmeanvariance");
var portfoliosimulation_1 = require("./portfoliosimulation");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "https://api.portfoliooptimizer.io/v1",
    "https://eu-west-1.api.portfoliooptimizer.io/v1",
];
/**
 * Portfolio Optimizer is a [Web API](https://en.wikipedia.org/wiki/Web_API) to analyze and optimize investment portfolios (collection of financial assets such as stocks, bonds, ETFs, crypto-currencies) using modern portfolio theory algorithms (mean-variance, VaR, etc.).
 *
 * @remarks
 *
 * # API General Information
 *
 *   Portfolio Optimizer is based on [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) for easy integration, uses [JSON](https://en.wikipedia.org/wiki/JSON) for the exchange of data and uses a standard [HTTP verb](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) (`POST`) to represent the action(s).
 *
 * Portfolio Optimizer is also as secured as a Web API could be:
 * * [256-bit HTTPS Encryption](https://en.wikipedia.org/wiki/HTTPS)
 * * No usage of cookies
 * * No usage of personal data
 *
 * ## API Headers
 * The following HTTP header(s) are required when calling Portfolio Optimizer endpoints:
 * * `Content-type: application/json`
 *   This header specifies that the data provided in input to the endpoint is in JSON format
 *
 * The following HTTP header(s) are optional when calling Portfolio Optimizer endpoints:
 * * `Content-Encoding: gzip`
 *   This header indicates that the data provided in input to the endpoint is compressed with gzip.
 * * `X-API-Key: <private API key>`
 *   This header enables [authenticated users](#auth) to provide their private [API key](#overview--api-key) in order to [benefit from higher API limits](#overview--api-limits)
 *
 * ## API Key
 * Portfolio Optimizer is free to use, but not free to run.
 *
 * In order to obtain an API key and benefit from [higher API limits](#overview--api-limits), a *small* participation to Portfolio Optimizer running costs is required.
 *
 * This participation takes the form of coffee(s), with one coffee = one month of usage.
 *
 * <p><a href="https://www.buymeacoffee.com/portfolioopt"><img alt='Buy a Coffee at buymeacoffee.com' src="https://img.buymeacoffee.com/button-api/?text=Buymeacoffee.com&emoji=&slug=portfolioopt&button_colour=000000&font_colour=ffffff&font_family=Cookie&outline_colour=ffffff&coffee_colour=FFDD00"></a></p>
 *
 *
 * > **Notes:**
 * > * Please make sure not to expose your API key publicly!
 *
 * ## API Limits
 *
 * Portfolio Optimizer comes with *fairly reasonable* API limits.
 *
 * For anonymous users:
 * * The API requests are restricted to a subset of all the available endpoints and/or endpoints features
 * * The API requests are limited to 1 request per second for all the anonymous users combined, with concurrent requests rejected
 * * The API requests are limited to 1 second of execution time
 * * The API requests are limited to 20 assets, 250 portfolios, 500 series data points and 5 factors
 *
 * For authenticated users with an [API key](#overview--api-key):
 * * The API requests have access to all the available endpoints and endpoints features
 * * The API requests are limited to 10000 requests per 24 hour per API key, with concurrent requests queued
 * * The API requests are limited to 2.5 seconds of execution time
 * * The API requests are limited to 100 assets, 1250 portfolios, 2500 series data points and 25 factors
 *
 * > **Notes:**
 * > * It is possible to further relax the API limits, or to disable the API limits alltogether; please [contact the support](https://portfoliooptimizer.io/contact/) for more details.
 * > * Information on the API rate limits are provided in response messages HTTP headers `x-ratelimit-*`:
 * >   * `x-ratelimit-limit-second`, the limit on the number of API requests per second
 * >   * `x-ratelimit-remaining-second`, the number of remaining API requests in the current second
 * >   * `x-ratelimit-limit-minute`, the limit on the number of API requests per minute
 * >   * ...
 *
 * ## API Regions
 * Portfolio Optimizer servers are located in Western Europe.
 *
 * > **Notes:**
 * > * It is possible to deploy Portfolio Optimizer in other geographical regions, for example to improve the API latency; please [contact the support](https://portfoliooptimizer.io/contact/) for more details.
 *
 * ## API Response Codes
 *
 * Standard [HTTP response codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) are used by Portfolio Optimizer to provide details on the status of API requests.
 *
 * | HTTP Code | Description | Notes |
 * | --------- | ----------- | ----- |
 * | 200 | Request successfully processed | - |
 * | 400 | Request failed to be processed because of incorrect content | The response message body contains information on the incorrect content |
 * | 401 | Request failed to be processed because of invalid API key | - |
 * | 404 | Request failed to be processed because of non existing endpoint | The requested endpoint might exist, but needs to be accessed with another HTTP method (e.g., `POST` instead of `GET`) |
 * | 429 | Request failed to be processed because of API limits violated | The response message HTTP headers `x-ratelimit-*` contain information on the [API limits](#overview--api-limits) |
 * | 500 | Request failed to be processed because of an internal error | Something went wrong on Portfolio Optimizer side, do not hesitate to [report the issue](#overview--support) |
 * | 502 | Request failed to be processed because of a temporary connectivity error | Something went wrong on Portfolio Optimizer side, please check the [API status](#overview--api-status) and do not hesitate to [report the issue](#overview--support) |
 *
 * ## API Status
 *
 * Portfolio Optimizer is monitored 24/7 by [UptimeRobot](https://stats.uptimerobot.com/wgW71SL1AW).
 *
 * # Support
 *
 * For any issue or question about Portfolio Optimizer, please do not hesitate to [contact the support](https://portfoliooptimizer.io/contact/).
 *
 *
 * @see {@link https://docs.portfoliooptimizer.io/} - External documentation
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.assetsAnalysis = new assetsanalysis_1.AssetsAnalysis(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsCorrelationMatrix = new assetscorrelationmatrix_1.AssetsCorrelationMatrix(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsCovarianceMatrix = new assetscovariancematrix_1.AssetsCovarianceMatrix(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsKurtosis = new assetskurtosis_1.AssetsKurtosis(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsPrices = new assetsprices_1.AssetsPrices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsReturns = new assetsreturns_1.AssetsReturns(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsReturnsSimulation = new assetsreturnssimulation_1.AssetsReturnsSimulation(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsSkewness = new assetsskewness_1.AssetsSkewness(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsVariance = new assetsvariance_1.AssetsVariance(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.assetsVolatility = new assetsvolatility_1.AssetsVolatility(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.factors = new factors_1.Factors(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.portfolioAnalysis = new portfolioanalysis_1.PortfolioAnalysis(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.portfolioAnalysisSharpeRatio = new portfolioanalysissharperatio_1.PortfolioAnalysisSharpeRatio(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.portfolioConstruction = new portfolioconstruction_1.PortfolioConstruction(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.portfolioOptimization = new portfoliooptimization_1.PortfolioOptimization(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.portfolioOptimizationMeanVariance =
            new portfoliooptimizationmeanvariance_1.PortfolioOptimizationMeanVariance(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.portfolioSimulation = new portfoliosimulation_1.PortfolioSimulation(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
