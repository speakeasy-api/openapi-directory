// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConnectionStateEnum - [Connection state flow](#section/Connection-state)
type ConnectionStateEnum string

const (
	ConnectionStateEnumAvailable  ConnectionStateEnum = "available"
	ConnectionStateEnumCallable   ConnectionStateEnum = "callable"
	ConnectionStateEnumAdded      ConnectionStateEnum = "added"
	ConnectionStateEnumAuthorized ConnectionStateEnum = "authorized"
	ConnectionStateEnumInvalid    ConnectionStateEnum = "invalid"
)

func (e ConnectionStateEnum) ToPointer() *ConnectionStateEnum {
	return &e
}

func (e *ConnectionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "callable":
		fallthrough
	case "added":
		fallthrough
	case "authorized":
		fallthrough
	case "invalid":
		*e = ConnectionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionStateEnum: %v", v)
	}
}
