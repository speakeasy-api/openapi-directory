/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { RestMethod } from "./restmethod";
import { Expose, Transform } from "class-transformer";

export class RestResource extends SpeakeasyBase {
  /**
   * Methods on this resource.
   */
  @SpeakeasyMetadata({ elemType: RestMethod })
  @Expose({ name: "methods" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RestMethod> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RestMethod);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  methods?: Record<string, RestMethod>;

  /**
   * Sub-resources on this resource.
   */
  @SpeakeasyMetadata({ elemType: RestResource })
  @Expose({ name: "resources" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RestResource> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RestResource);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  resources?: Record<string, RestResource>;
}
