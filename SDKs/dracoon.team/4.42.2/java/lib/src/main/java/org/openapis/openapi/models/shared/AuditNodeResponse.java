/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * AuditNodeResponse - Audit node report
 */
public class AuditNodeResponse {
    /**
     * List of assigned users with permissions
     */
    @JsonProperty("auditUserPermissionList")
    public AuditUserPermission[] auditUserPermissionList;
    public AuditNodeResponse withAuditUserPermissionList(AuditUserPermission[] auditUserPermissionList) {
        this.auditUserPermissionList = auditUserPermissionList;
        return this;
    }
    
    /**
     * Number of direct children
     * 
     * (no recursion; for rooms only)
     */
    @JsonProperty("nodeCntChildren")
    public Integer nodeCntChildren;
    public AuditNodeResponse withNodeCntChildren(Integer nodeCntChildren) {
        this.nodeCntChildren = nodeCntChildren;
        return this;
    }
    
    /**
     * Creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("nodeCreatedAt")
    public OffsetDateTime nodeCreatedAt;
    public AuditNodeResponse withNodeCreatedAt(OffsetDateTime nodeCreatedAt) {
        this.nodeCreatedAt = nodeCreatedAt;
        return this;
    }
    
    /**
     * User information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeCreatedBy")
    public UserInfo nodeCreatedBy;
    public AuditNodeResponse withNodeCreatedBy(UserInfo nodeCreatedBy) {
        this.nodeCreatedBy = nodeCreatedBy;
        return this;
    }
    
    /**
     * Is activities log active (for rooms only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeHasActivitiesLog")
    public Boolean nodeHasActivitiesLog;
    public AuditNodeResponse withNodeHasActivitiesLog(Boolean nodeHasActivitiesLog) {
        this.nodeHasActivitiesLog = nodeHasActivitiesLog;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.10.0
     * 
     * Is recycle bin active (for rooms only)
     * 
     * Recycle bin is always on (disabling is not possible).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeHasRecycleBin")
    public Boolean nodeHasRecycleBin;
    public AuditNodeResponse withNodeHasRecycleBin(Boolean nodeHasRecycleBin) {
        this.nodeHasRecycleBin = nodeHasRecycleBin;
        return this;
    }
    
    /**
     * Node ID
     */
    @JsonProperty("nodeId")
    public Long nodeId;
    public AuditNodeResponse withNodeId(Long nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * Encryption state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeIsEncrypted")
    public Boolean nodeIsEncrypted;
    public AuditNodeResponse withNodeIsEncrypted(Boolean nodeIsEncrypted) {
        this.nodeIsEncrypted = nodeIsEncrypted;
        return this;
    }
    
    /**
     * Node name
     */
    @JsonProperty("nodeName")
    public String nodeName;
    public AuditNodeResponse withNodeName(String nodeName) {
        this.nodeName = nodeName;
        return this;
    }
    
    /**
     * Parent node ID (room or folder)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeParentId")
    public Long nodeParentId;
    public AuditNodeResponse withNodeParentId(Long nodeParentId) {
        this.nodeParentId = nodeParentId;
        return this;
    }
    
    /**
     * Parent node path
     * 
     * `/` if node is a root node (room)
     */
    @JsonProperty("nodeParentPath")
    public String nodeParentPath;
    public AuditNodeResponse withNodeParentPath(String nodeParentPath) {
        this.nodeParentPath = nodeParentPath;
        return this;
    }
    
    /**
     * Quota in byte
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeQuota")
    public Long nodeQuota;
    public AuditNodeResponse withNodeQuota(Long nodeQuota) {
        this.nodeQuota = nodeQuota;
        return this;
    }
    
    /**
     * Retention period for deleted nodes in days
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeRecycleBinRetentionPeriod")
    public Integer nodeRecycleBinRetentionPeriod;
    public AuditNodeResponse withNodeRecycleBinRetentionPeriod(Integer nodeRecycleBinRetentionPeriod) {
        this.nodeRecycleBinRetentionPeriod = nodeRecycleBinRetentionPeriod;
        return this;
    }
    
    /**
     * Node size in byte
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeSize")
    public Long nodeSize;
    public AuditNodeResponse withNodeSize(Long nodeSize) {
        this.nodeSize = nodeSize;
        return this;
    }
    
    /**
     * Modification date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("nodeUpdatedAt")
    public OffsetDateTime nodeUpdatedAt;
    public AuditNodeResponse withNodeUpdatedAt(OffsetDateTime nodeUpdatedAt) {
        this.nodeUpdatedAt = nodeUpdatedAt;
        return this;
    }
    
    /**
     * User information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeUpdatedBy")
    public UserInfo nodeUpdatedBy;
    public AuditNodeResponse withNodeUpdatedBy(UserInfo nodeUpdatedBy) {
        this.nodeUpdatedBy = nodeUpdatedBy;
        return this;
    }
    
}
