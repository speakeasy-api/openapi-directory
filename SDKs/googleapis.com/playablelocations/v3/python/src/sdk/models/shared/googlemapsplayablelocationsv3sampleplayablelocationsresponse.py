"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlemapsplayablelocationsv3sampleplayablelocationlist as shared_googlemapsplayablelocationsv3sampleplayablelocationlist
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse:
    r"""Response for the SamplePlayableLocations method."""
    
    locations_per_game_object_type: Optional[dict[str, shared_googlemapsplayablelocationsv3sampleplayablelocationlist.GoogleMapsPlayablelocationsV3SamplePlayableLocationList]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationsPerGameObjectType'), 'exclude': lambda f: f is None }})
    r"""Each PlayableLocation object corresponds to a game_object_type specified in the request."""  
    ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Required. Specifies the \\"time-to-live\\" for the set of playable locations. You can use this value to determine how long to cache the set of playable locations. After this length of time, your back-end game server should issue a new SamplePlayableLocations request to get a fresh set of playable locations (because for example, they might have been removed, a park might have closed for the day, a business might have closed permanently)."""  
    