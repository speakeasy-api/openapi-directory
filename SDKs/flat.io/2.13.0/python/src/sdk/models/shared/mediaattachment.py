"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import mediascoresharingmode_enum as shared_mediascoresharingmode_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MediaAttachmentTypeEnum(str, Enum):
    r"""The type of the assignment resolved:
    * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment.
    * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property.
    """
    RICH = 'rich'
    PHOTO = 'photo'
    VIDEO = 'video'
    LINK = 'link'
    FLAT = 'flat'
    GOOGLE_DRIVE = 'googleDrive'
    WORKSHEET = 'worksheet'
    PERFORMANCE = 'performance'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MediaAttachment:
    r"""Media attachment. The API will automatically resolve the details, oEmbed,
    and media available if possible and return them in this object
    """
    
    author_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorName'), 'exclude': lambda f: f is None }})
    r"""The resolved author name of the attachment"""  
    author_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorUrl'), 'exclude': lambda f: f is None }})
    r"""The resolved author url of the attachment"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The resolved description of the attachment"""  
    google_drive_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleDriveFileId'), 'exclude': lambda f: f is None }})
    r"""The ID of the Google Drive File"""  
    html: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html'), 'exclude': lambda f: f is None }})
    r"""If the attachment type is `rich` or `video`, the HTML code of the
    media to display
    """  
    html_height: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlHeight'), 'exclude': lambda f: f is None }})
    r"""If the `html` is available, the height of the widget"""  
    html_width: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlWidth'), 'exclude': lambda f: f is None }})
    r"""If the `html` is available, the width of the widget"""  
    icon_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iconUrl'), 'exclude': lambda f: f is None }})
    r"""The URL of the icon"""  
    lock_score_template: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockScoreTemplate'), 'exclude': lambda f: f is None }})
    r"""To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template."""  
    mime_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mimeType'), 'exclude': lambda f: f is None }})
    r"""The mine type of the file"""  
    revision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision'), 'exclude': lambda f: f is None }})
    r"""An unique revision identifier of a score"""  
    score: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""An unique Flat score identifier"""  
    sharing_mode: Optional[shared_mediascoresharingmode_enum.MediaScoreSharingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharingMode'), 'exclude': lambda f: f is None }})
    r"""The sharing mode of the score for classes post and assignments"""  
    thumbnail_height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailHeight'), 'exclude': lambda f: f is None }})
    r"""If the `thumbnailUrl` is available, the width of the thumbnail"""  
    thumbnail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailUrl'), 'exclude': lambda f: f is None }})
    r"""If the attachment type is `rich`, `video`, `photo` or `link`, a
    displayable thumbnail for this attachment
    """  
    thumbnail_width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailWidth'), 'exclude': lambda f: f is None }})
    r"""If the `thumbnailUrl` is available, the width of the thumbnail"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The resolved title of the attachment"""  
    track: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('track'), 'exclude': lambda f: f is None }})
    r"""A unique track identifier"""  
    type: Optional[MediaAttachmentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the assignment resolved:
    * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment.
    * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property.
    """  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The url of the attachment"""  
    worksheet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('worksheet'), 'exclude': lambda f: f is None }})
    r"""An unique worksheet identifier"""  
    