"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import timezone as shared_timezone
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeocodeReverseResponse:
    
    address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The complete address using comma-separated values"""  
    address_components: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address-components') }})
    r"""The components which make up the address such as road, city, state, etc"""  
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the location"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The country of the location"""  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code') }})
    r"""The ISO 2-letter country code of the location"""  
    country_code3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code3') }})
    r"""The ISO 3-letter country code of the location"""  
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency-code') }})
    r"""ISO 4217 currency code associated with the country"""  
    found: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('found') }})
    r"""True if these coordinates map to a real location"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""The location latitude"""  
    location_tags: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location-tags') }})
    r"""Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub"""  
    location_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location-type') }})
    r"""The detected location type ordered roughly from most to least precise, possible values are: <br> <ul> <li>address - indicates a precise street address</li> <li>street - accurate to the street level but may not point to the exact location of the house/building number</li> <li>city - accurate to the city level, this includes villages, towns, suburbs, etc</li> <li>postal-code - indicates a postal code area (no house or street information present)</li> <li>railway - location is part of a rail network such as a station or railway track</li> <li>natural - indicates a natural feature, for example a mountain peak or a waterway</li> <li>island - location is an island or archipelago</li> <li>administrative - indicates an administrative boundary such as a country, state or province</li> </ul>"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""The location longitude"""  
    postal_address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postal-address') }})
    r"""The formatted address using local standards suitable for printing on an envelope"""  
    postal_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postal-code') }})
    r"""The postal code for the location"""  
    region_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region-code') }})
    r"""The ISO 3166-2 region code for the location"""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state of the location"""  
    timezone: dict[str, shared_timezone.Timezone] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone') }})
    r"""Map containing timezone details for the location"""  
    