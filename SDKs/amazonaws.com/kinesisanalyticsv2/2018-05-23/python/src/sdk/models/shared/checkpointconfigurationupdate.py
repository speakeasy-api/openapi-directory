"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configurationtype_enum as shared_configurationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckpointConfigurationUpdate:
    r"""Describes updates to the checkpointing parameters for a Flink-based Kinesis Data Analytics application."""
    
    checkpointing_enabled_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckpointingEnabledUpdate'), 'exclude': lambda f: f is None }})  
    checkpoint_interval_update: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckpointIntervalUpdate'), 'exclude': lambda f: f is None }})  
    configuration_type_update: Optional[shared_configurationtype_enum.ConfigurationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationTypeUpdate'), 'exclude': lambda f: f is None }})  
    min_pause_between_checkpoints_update: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinPauseBetweenCheckpointsUpdate'), 'exclude': lambda f: f is None }})  
    