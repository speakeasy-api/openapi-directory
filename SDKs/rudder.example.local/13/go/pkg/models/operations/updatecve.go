// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateCVERequestBody - CVE update config
type UpdateCVERequestBody struct {
	// Url used to update CVE, will default to one set in config
	URL   *string  `json:"url,omitempty"`
	Years []string `json:"years,omitempty"`
}

type UpdateCVERequest struct {
	Request *UpdateCVERequestBody `request:"mediaType=application/json"`
}

// UpdateCVE200ApplicationJSONActionEnum - The id of the action
type UpdateCVE200ApplicationJSONActionEnum string

const (
	UpdateCVE200ApplicationJSONActionEnumUpdateCve UpdateCVE200ApplicationJSONActionEnum = "updateCVE"
)

func (e *UpdateCVE200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateCVE":
		*e = UpdateCVE200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCVE200ApplicationJSONActionEnum: %s", s)
	}
}

type UpdateCVE200ApplicationJSONData struct {
	CVEs int64 `json:"CVEs"`
}

// UpdateCVE200ApplicationJSONResultEnum - Result of the request
type UpdateCVE200ApplicationJSONResultEnum string

const (
	UpdateCVE200ApplicationJSONResultEnumSuccess UpdateCVE200ApplicationJSONResultEnum = "success"
	UpdateCVE200ApplicationJSONResultEnumError   UpdateCVE200ApplicationJSONResultEnum = "error"
)

func (e *UpdateCVE200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateCVE200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCVE200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateCVE200ApplicationJSON - updated CVE count
type UpdateCVE200ApplicationJSON struct {
	// The id of the action
	Action UpdateCVE200ApplicationJSONActionEnum `json:"action"`
	Data   UpdateCVE200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result UpdateCVE200ApplicationJSONResultEnum `json:"result"`
}

type UpdateCVEResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// updated CVE count
	UpdateCVE200ApplicationJSONObject *UpdateCVE200ApplicationJSON
}
