"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class QueryMetadataDataRangeEnum(str, Enum):
    r"""Range of report data."""
    CUSTOM_DATES = 'CUSTOM_DATES'
    CURRENT_DAY = 'CURRENT_DAY'
    PREVIOUS_DAY = 'PREVIOUS_DAY'
    WEEK_TO_DATE = 'WEEK_TO_DATE'
    MONTH_TO_DATE = 'MONTH_TO_DATE'
    QUARTER_TO_DATE = 'QUARTER_TO_DATE'
    YEAR_TO_DATE = 'YEAR_TO_DATE'
    PREVIOUS_WEEK = 'PREVIOUS_WEEK'
    PREVIOUS_HALF_MONTH = 'PREVIOUS_HALF_MONTH'
    PREVIOUS_MONTH = 'PREVIOUS_MONTH'
    PREVIOUS_QUARTER = 'PREVIOUS_QUARTER'
    PREVIOUS_YEAR = 'PREVIOUS_YEAR'
    LAST_7_DAYS = 'LAST_7_DAYS'
    LAST_30_DAYS = 'LAST_30_DAYS'
    LAST_90_DAYS = 'LAST_90_DAYS'
    LAST_365_DAYS = 'LAST_365_DAYS'
    ALL_TIME = 'ALL_TIME'
    LAST_14_DAYS = 'LAST_14_DAYS'
    TYPE_NOT_SUPPORTED = 'TYPE_NOT_SUPPORTED'
    LAST_60_DAYS = 'LAST_60_DAYS'

class QueryMetadataFormatEnum(str, Enum):
    r"""Format of the generated report."""
    CSV = 'CSV'
    EXCEL_CSV = 'EXCEL_CSV'
    XLSX = 'XLSX'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryMetadata:
    r"""Query metadata."""
    
    data_range: Optional[QueryMetadataDataRangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataRange'), 'exclude': lambda f: f is None }})
    r"""Range of report data."""  
    format: Optional[QueryMetadataFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""Format of the generated report."""  
    google_cloud_storage_path_for_latest_report: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleCloudStoragePathForLatestReport'), 'exclude': lambda f: f is None }})
    r"""The path to the location in Google Cloud Storage where the latest report is stored."""  
    google_drive_path_for_latest_report: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleDrivePathForLatestReport'), 'exclude': lambda f: f is None }})
    r"""The path in Google Drive for the latest report."""  
    latest_report_run_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latestReportRunTimeMs'), 'exclude': lambda f: f is None }})
    r"""The time when the latest report started to run."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    r"""Locale of the generated reports. Valid values are cs CZECH de GERMAN en ENGLISH es SPANISH fr FRENCH it ITALIAN ja JAPANESE ko KOREAN pl POLISH pt-BR BRAZILIAN_PORTUGUESE ru RUSSIAN tr TURKISH uk UKRAINIAN zh-CN CHINA_CHINESE zh-TW TAIWAN_CHINESE An locale string not in the list above will generate reports in English."""  
    report_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportCount'), 'exclude': lambda f: f is None }})
    r"""Number of reports that have been generated for the query."""  
    running: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('running'), 'exclude': lambda f: f is None }})
    r"""Whether the latest report is currently running."""  
    send_notification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sendNotification'), 'exclude': lambda f: f is None }})
    r"""Whether to send an email notification when a report is ready. Default to false."""  
    share_email_address: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shareEmailAddress'), 'exclude': lambda f: f is None }})
    r"""List of email addresses which are sent email notifications when the report is finished. Separate from sendNotification."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Query title. It is used to name the reports generated from this query."""  
    