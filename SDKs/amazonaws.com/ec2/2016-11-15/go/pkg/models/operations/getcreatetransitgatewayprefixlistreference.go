// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateTransitGatewayPrefixListReferenceActionEnum
type GETCreateTransitGatewayPrefixListReferenceActionEnum string

const (
	GETCreateTransitGatewayPrefixListReferenceActionEnumCreateTransitGatewayPrefixListReference GETCreateTransitGatewayPrefixListReferenceActionEnum = "CreateTransitGatewayPrefixListReference"
)

func (e *GETCreateTransitGatewayPrefixListReferenceActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateTransitGatewayPrefixListReference":
		*e = GETCreateTransitGatewayPrefixListReferenceActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateTransitGatewayPrefixListReferenceActionEnum: %s", s)
	}
}

// GETCreateTransitGatewayPrefixListReferenceVersionEnum
type GETCreateTransitGatewayPrefixListReferenceVersionEnum string

const (
	GETCreateTransitGatewayPrefixListReferenceVersionEnumTwoThousandAndSixteen1115 GETCreateTransitGatewayPrefixListReferenceVersionEnum = "2016-11-15"
)

func (e *GETCreateTransitGatewayPrefixListReferenceVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETCreateTransitGatewayPrefixListReferenceVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateTransitGatewayPrefixListReferenceVersionEnum: %s", s)
	}
}

type GETCreateTransitGatewayPrefixListReferenceQueryParams struct {
	Action GETCreateTransitGatewayPrefixListReferenceActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Indicates whether to drop traffic that matches this route.
	Blackhole *bool `queryParam:"style=form,explode=true,name=Blackhole"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the prefix list that is used for destination matches.
	PrefixListID string `queryParam:"style=form,explode=true,name=PrefixListId"`
	// The ID of the attachment to which traffic is routed.
	TransitGatewayAttachmentID *string `queryParam:"style=form,explode=true,name=TransitGatewayAttachmentId"`
	// The ID of the transit gateway route table.
	TransitGatewayRouteTableID string                                                `queryParam:"style=form,explode=true,name=TransitGatewayRouteTableId"`
	Version                    GETCreateTransitGatewayPrefixListReferenceVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETCreateTransitGatewayPrefixListReferenceHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateTransitGatewayPrefixListReferenceRequest struct {
	QueryParams GETCreateTransitGatewayPrefixListReferenceQueryParams
	Headers     GETCreateTransitGatewayPrefixListReferenceHeaders
}

type GETCreateTransitGatewayPrefixListReferenceResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
