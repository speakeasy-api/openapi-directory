/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The state of a pico charging station. (Only available for pico charging stations)
 */
export enum DeviceChargingStationStateEnum {
  Booting = "Booting",
  ReadyNoCarConnected = "ReadyNoCarConnected",
  ReadyCarConnected = "ReadyCarConnected",
  StartedWaitForCar = "StartedWaitForCar",
  Charging = "Charging",
  Installation = "Installation",
  Authorize = "Authorize",
  Offline = "Offline",
}

/**
 * The Energy Type of this device
 */
export enum DeviceDeviceEnergyTypeEnum {
  MeterTypeUnknown = "MeterTypeUnknown",
  MeterTypeElectricity = "MeterTypeElectricity",
  MeterTypeWater = "MeterTypeWater",
  MeterTypeGas = "MeterTypeGas",
  MeterTypeHeat = "MeterTypeHeat",
  MeterTypeHCA = "MeterTypeHCA",
  MeterTypeAllMeters = "MeterTypeAllMeters",
  MeterTypeTemperature = "MeterTypeTemperature",
  MeterTypeMBusGateway = "MeterTypeMBusGateway",
  MeterTypeRs485Gateway = "MeterTypeRS485Gateway",
  MeterTypeCustomDevice = "MeterTypeCustomDevice",
  MeterTypeCompressedAir = "MeterTypeCompressedAir",
  MeterTypeSolarLog = "MeterTypeSolarLog",
  MeterTypeVirtualMeter = "MeterTypeVirtualMeter",
  MeterTypeWMBusGateway = "MeterTypeWMBusGateway",
}

/**
 * The Family Type of the device.
 */
export enum DeviceFamilyTypeEnum {
  MeterFamilyTypeUnknown = "MeterFamilyTypeUnknown",
  MeterFamilyTypeSmartMeConnectV1 = "MeterFamilyTypeSmartMeConnectV1",
  MeterFamiliyTypeSmartMeMeter = "MeterFamiliyTypeSmartMeMeter",
  MeterFamiliyTypeSmartMeMeterWithSwitch = "MeterFamiliyTypeSmartMeMeterWithSwitch",
  MeterFamilyTypeMBusGatewayV1 = "MeterFamilyTypeMBusGatewayV1",
  MeterFamilyTypeRs485GatewayV1 = "MeterFamilyTypeRS485GatewayV1",
  MeterFamilyTypeKamstrupModule = "MeterFamilyTypeKamstrupModule",
  MeterFamilyTypeSmartMe3PhaseMeter80A = "MeterFamilyTypeSmartMe3PhaseMeter80A",
  MeterFamilyTypeSmartMe3PhaseMeter32A = "MeterFamilyTypeSmartMe3PhaseMeter32A",
  MeterFamilyTypeSmartMe3PhaseTelstarTransformer = "MeterFamilyTypeSmartMe3PhaseTelstarTransformer",
  MeterFamilyTypeLandisGyrModule = "MeterFamilyTypeLandisGyrModule",
  MeterFamilyTypeFnnOpticalModule = "MeterFamilyTypeFnnOpticalModule",
  MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi = "MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi",
  MeterFamilyTypeSmartMe3PhaseTelstar80AMobile = "MeterFamilyTypeSmartMe3PhaseTelstar80AMobile",
  MeterFamilyTypeSmartMe1PhaseMeter80Av2WiFi = "MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi",
  MeterFamilyTypeSmartMe1PhaseMeter32Av2WiFi = "MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi",
  MeterFamilyTypeSmartMe1PhaseMeter80AGprs = "MeterFamilyTypeSmartMe1PhaseMeter80AGprs",
  MeterFamilyTypeSmartMe1PhaseMeter32AGprs = "MeterFamilyTypeSmartMe1PhaseMeter32AGprs",
  MeterFamilyTypeWMBusGatewayV1 = "MeterFamilyTypeWMBusGatewayV1",
  MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile = "MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile",
  MeterFamilyTypeMithralHallV1 = "MeterFamilyTypeMithralHallV1",
  MeterFamilyTypeRestApiMeter = "MeterFamilyTypeRestApiMeter",
  MeterFamilyTypeVirtualBillingMeter = "MeterFamilyTypeVirtualBillingMeter",
}

/**
 * The sub meter type (e.g. warmwater or coldwater)
 */
export enum DeviceMeterSubTypeEnum {
  MeterSubTypeUnknown = "MeterSubTypeUnknown",
  MeterSubTypeCold = "MeterSubTypeCold",
  MeterSubTypeHeat = "MeterSubTypeHeat",
  MeterSubTypeChargingStation = "MeterSubTypeChargingStation",
  MeterSubTypeElectricity = "MeterSubTypeElectricity",
  MeterSubTypeWater = "MeterSubTypeWater",
  MeterSubTypeGas = "MeterSubTypeGas",
  MeterSubTypeElectricityHeat = "MeterSubTypeElectricityHeat",
  MeterSubTypeTemperature = "MeterSubTypeTemperature",
  MeterSubTypeVirtualBattery = "MeterSubTypeVirtualBattery",
}

/**
 * Container Class for the Web API
 */
export class Device extends SpeakeasyBase {
  /**
   * The Actvie Power or current flow rate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ActivePower" })
  activePower?: number;

  /**
   * The Actvie Power Phase L1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ActivePowerL1" })
  activePowerL1?: number;

  /**
   * The Actvie Power Phase L2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ActivePowerL2" })
  activePowerL2?: number;

  /**
   * The Actvie Power Phase L3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ActivePowerL3" })
  activePowerL3?: number;

  /**
   * The Unit of the Active Power Value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ActivePowerUnit" })
  activePowerUnit?: string;

  /**
   * The Number of the Active Tariff
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ActiveTariff" })
  activeTariff?: number;

  /**
   * An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AdditionalMeterSerialNumber" })
  additionalMeterSerialNumber?: string;

  /**
   * The analog output number 1 (PWM signal) (0 - 32183)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnalogOutput1" })
  analogOutput1?: number;

  /**
   * The analog output number 2 (PWM signal) (0 - 32183)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnalogOutput2" })
  analogOutput2?: number;

  /**
   * The state of a pico charging station. (Only available for pico charging stations)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChargingStationState" })
  chargingStationState?: DeviceChargingStationStateEnum;

  /**
   * The Meter Counter Reading (Total Energy used)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CounterReading" })
  counterReading?: number;

  /**
   * The Meter Counter Reading only export
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CounterReadingExport" })
  counterReadingExport?: number;

  /**
   * The Meter Counter Reading only import
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CounterReadingImport" })
  counterReadingImport?: number;

  /**
   * The Meter Counter Reading Tariff 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CounterReadingT1" })
  counterReadingT1?: number;

  /**
   * The Meter Counter Reading Tariff 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CounterReadingT2" })
  counterReadingT2?: number;

  /**
   * The Meter Counter Reading Tariff 3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CounterReadingT3" })
  counterReadingT3?: number;

  /**
   * The Meter Counter Reading Tariff 4
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CounterReadingT4" })
  counterReadingT4?: number;

  /**
   * The Unit of the Counter Reading
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CounterReadingUnit" })
  counterReadingUnit?: string;

  /**
   * The Current (in A)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Current" })
  current?: number;

  /**
   * The Current Phase L1 (in A)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CurrentL1" })
  currentL1?: number;

  /**
   * The Current Phase L2 (in A)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CurrentL2" })
  currentL2?: number;

  /**
   * The Current Phase L3 (in A)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CurrentL3" })
  currentL3?: number;

  /**
   * The Energy Type of this device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DeviceEnergyType" })
  deviceEnergyType?: DeviceDeviceEnergyTypeEnum;

  /**
   * The digital input number 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DigitalInput1" })
  digitalInput1?: boolean;

  /**
   * The digital input number 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DigitalInput2" })
  digitalInput2?: boolean;

  /**
   * The digital output number 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DigitalOutput1" })
  digitalOutput1?: boolean;

  /**
   * The digital output number 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DigitalOutput2" })
  digitalOutput2?: boolean;

  /**
   * The Family Type of the device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FamilyType" })
  familyType?: DeviceFamilyTypeEnum;

  /**
   * The current flow rate (e.g. m3/h)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FlowRate" })
  flowRate?: number;

  /**
   * The ID of the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  /**
   * The sub meter type (e.g. warmwater or coldwater)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MeterSubType" })
  meterSubType?: DeviceMeterSubTypeEnum;

  /**
   * The Name of the Device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  /**
   * The Power Factor (cos phi). Range: 0 - 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PowerFactor" })
  powerFactor?: number;

  /**
   * The Power Factor (cos phi) Phase L1. Range: 0 - 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PowerFactorL1" })
  powerFactorL1?: number;

  /**
   * The Power Factor (cos phi) Phase L2. Range: 0 - 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PowerFactorL2" })
  powerFactorL2?: number;

  /**
   * The Power Factor (cos phi) Phase L3. Range: 0 - 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PowerFactorL3" })
  powerFactorL3?: number;

  /**
   * The Serial number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Serial" })
  serial?: number;

  /**
   * Flag if the Switch is on on this device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SwitchOn" })
  switchOn?: boolean;

  /**
   * Flag if the Phase L1 is on on this device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SwitchPhaseL1On" })
  switchPhaseL1On?: boolean;

  /**
   * Flag if the Phase L2 is on on this device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SwitchPhaseL2On" })
  switchPhaseL2On?: boolean;

  /**
   * Flag if the Phase L3 is on on this device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SwitchPhaseL3On" })
  switchPhaseL3On?: boolean;

  /**
   * The Temperature (in degree celsius)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Temperature" })
  temperature?: number;

  /**
   * Time of last successful connection the the smart-me Cloud.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ValueDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  valueDate?: Date;

  /**
   * The Voltage (in V)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Voltage" })
  voltage?: number;

  /**
   * The Voltage Phase L1 (in V)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VoltageL1" })
  voltageL1?: number;

  /**
   * The Voltage Phase L2 (in V)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VoltageL2" })
  voltageL2?: number;

  /**
   * The Voltage Phase L3 (in V)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VoltageL3" })
  voltageL3?: number;
}
