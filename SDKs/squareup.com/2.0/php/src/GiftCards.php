<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class GiftCards 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CreateGiftCard
     * 
     * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before 
     * it can be used for payment. For more information, see 
     * [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateGiftCardRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardResponse
     */
	public function createGiftCard(
        \OpenAPI\OpenAPI\Models\Shared\CreateGiftCardRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/gift-cards');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createGiftCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateGiftCardResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * LinkCustomerToGiftCard
     * 
     * Links a customer to a gift card
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LinkCustomerToGiftCardRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LinkCustomerToGiftCardSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LinkCustomerToGiftCardResponse
     */
	public function linkCustomerToGiftCard(
        \OpenAPI\OpenAPI\Models\Operations\LinkCustomerToGiftCardRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LinkCustomerToGiftCardSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LinkCustomerToGiftCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/gift-cards/{gift_card_id}/link-customer', \OpenAPI\OpenAPI\Models\Operations\LinkCustomerToGiftCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "linkCustomerToGiftCardRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LinkCustomerToGiftCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCustomerToGiftCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCustomerToGiftCardResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListGiftCards
     * 
     * Lists all gift cards. You can specify optional filters to retrieve 
     * a subset of the gift cards.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListGiftCardsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListGiftCardsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListGiftCardsResponse
     */
	public function listGiftCards(
        \OpenAPI\OpenAPI\Models\Operations\ListGiftCardsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListGiftCardsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListGiftCardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/gift-cards');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListGiftCardsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListGiftCardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGiftCardsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGiftCardsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveGiftCard
     * 
     * Retrieves a gift card using its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardResponse
     */
	public function retrieveGiftCard(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/gift-cards/{id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveGiftCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveGiftCardResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveGiftCardFromGAN
     * 
     * Retrieves a gift card using the gift card account number (GAN).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RetrieveGiftCardFromGANRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromGANSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromGANResponse
     */
	public function retrieveGiftCardFromGAN(
        \OpenAPI\OpenAPI\Models\Shared\RetrieveGiftCardFromGANRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromGANSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromGANResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/gift-cards/from-gan');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromGANResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveGiftCardFromGANResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveGiftCardFromGANResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveGiftCardFromNonce
     * 
     * Retrieves a gift card using a nonce (a secure token) that represents the gift card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RetrieveGiftCardFromNonceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromNonceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromNonceResponse
     */
	public function retrieveGiftCardFromNonce(
        \OpenAPI\OpenAPI\Models\Shared\RetrieveGiftCardFromNonceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromNonceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromNonceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/gift-cards/from-nonce');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveGiftCardFromNonceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveGiftCardFromNonceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveGiftCardFromNonceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UnlinkCustomerFromGiftCard
     * 
     * Unlinks a customer from a gift card
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnlinkCustomerFromGiftCardRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnlinkCustomerFromGiftCardSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnlinkCustomerFromGiftCardResponse
     */
	public function unlinkCustomerFromGiftCard(
        \OpenAPI\OpenAPI\Models\Operations\UnlinkCustomerFromGiftCardRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnlinkCustomerFromGiftCardSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnlinkCustomerFromGiftCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/gift-cards/{gift_card_id}/unlink-customer', \OpenAPI\OpenAPI\Models\Operations\UnlinkCustomerFromGiftCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "unlinkCustomerFromGiftCardRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnlinkCustomerFromGiftCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unlinkCustomerFromGiftCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UnlinkCustomerFromGiftCardResponse', 'json');
            }
        }

        return $response;
    }
}