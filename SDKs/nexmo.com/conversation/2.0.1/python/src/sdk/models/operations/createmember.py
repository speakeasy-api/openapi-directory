"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import channel as shared_channel
from ..shared import initiator as shared_initiator
from ..shared import member_action_enum as shared_member_action_enum
from ..shared import member_state_enum as shared_member_state_enum
from ..shared import timestamp_res_member as shared_timestamp_res_member
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateMemberRequestBody:
    r"""Create a Member in invite state"""
    
    channel: shared_channel.Channel = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`"""  
    user_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})
    r"""User ID"""  
    action: Optional[shared_member_action_enum.MemberActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Invite or join a member to a conversation"""  
    knocking_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('knocking_id'), 'exclude': lambda f: f is None }})
    r"""Knocker ID. A knocker is a pre-member of a conversation who does not exist yet"""  
    media: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media'), 'exclude': lambda f: f is None }})
    r"""Media Object"""  
    member_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('member_id'), 'exclude': lambda f: f is None }})
    r"""Member ID"""  
    member_id_inviting: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('member_id_inviting'), 'exclude': lambda f: f is None }})
    r"""Member ID of the member that sends the invitation"""  
    

@dataclasses.dataclass
class CreateMemberRequest:
    
    conversation_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'conversation_id', 'style': 'simple', 'explode': False }})
    r"""Conversation ID"""  
    request_body: Optional[CreateMemberRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateMember201ApplicationJSON:
    r"""Create or invite Member in invite state"""
    
    channel: Optional[shared_channel.Channel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})
    r"""A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`"""  
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""A link towards a member included in Conversation API"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Member ID"""  
    initiator: Optional[shared_initiator.Initiator] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initiator'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_member_state_enum.MemberStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`"""  
    timestamp: Optional[shared_timestamp_res_member.TimestampResMember] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""User ID"""  
    

@dataclasses.dataclass
class CreateMemberResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_member_201_application_json_object: Optional[CreateMember201ApplicationJSON] = dataclasses.field(default=None)
    r"""Create or invite Member in invite state"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    