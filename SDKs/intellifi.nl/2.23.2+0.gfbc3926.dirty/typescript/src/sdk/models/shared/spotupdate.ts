/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GeoCoordsInput } from "./geocoords";
import { Expose, Type } from "class-transformer";

export class SpotUpdateAntennaReportLocationsInput extends SpeakeasyBase {
  /**
   * Antenna number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "antenna_number" })
  antennaNumber?: number;
}

/**
 * A JSON object containing spot information
 */
export class SpotUpdateInput extends SpeakeasyBase {
  /**
   * You may configure this field to an object which couples individual antenna ports to locations.
   */
  @SpeakeasyMetadata({ elemType: SpotUpdateAntennaReportLocationsInput })
  @Expose({ name: "antenna_report_locations" })
  @Type(() => SpotUpdateAntennaReportLocationsInput)
  antennaReportLocations?: SpotUpdateAntennaReportLocationsInput[];

  /**
   * Object containing the new configuration. This will be applied automatically when the values are valid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config_request" })
  configRequest?: Record<string, any>;

  /**
   * Last known geolocation estimate of this object. Not guaranteed to be included in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geo_coords" })
  @Type(() => GeoCoordsInput)
  geoCoords?: GeoCoordsInput;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location" })
  reportLocation?: string;

  /**
   * Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "senses_request" })
  sensesRequest?: Record<string, any>;
}
