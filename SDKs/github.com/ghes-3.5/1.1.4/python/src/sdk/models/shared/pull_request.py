"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import author_association_enum as shared_author_association_enum
from ..shared import auto_merge as shared_auto_merge
from ..shared import link as shared_link
from ..shared import nullable_license_simple as shared_nullable_license_simple
from ..shared import nullable_milestone as shared_nullable_milestone
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import simple_user as shared_simple_user
from ..shared import team_simple as shared_team_simple
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestLinks:
    
    comments: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})
    r"""Hypermedia Link"""  
    commits: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits') }})
    r"""Hypermedia Link"""  
    html: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html') }})
    r"""Hypermedia Link"""  
    issue: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue') }})
    r"""Hypermedia Link"""  
    review_comment: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comment') }})
    r"""Hypermedia Link"""  
    review_comments: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comments') }})
    r"""Hypermedia Link"""  
    self_: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})
    r"""Hypermedia Link"""  
    statuses: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses') }})
    r"""Hypermedia Link"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestBaseRepoOwner:
    
    avatar_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_url') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    followers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers_url') }})  
    following_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following_url') }})  
    gists_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gists_url') }})  
    gravatar_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gravatar_id') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    organizations_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizations_url') }})  
    received_events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('received_events_url') }})  
    repos_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repos_url') }})  
    site_admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_admin') }})  
    starred_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred_url') }})  
    subscriptions_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptions_url') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestBaseRepoPermissions:
    
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    pull: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull') }})  
    push: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push') }})  
    maintain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintain'), 'exclude': lambda f: f is None }})  
    triage: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestBaseRepo:
    
    archive_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archive_url') }})  
    archived: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived') }})  
    assignees_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignees_url') }})  
    blobs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blobs_url') }})  
    branches_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branches_url') }})  
    clone_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clone_url') }})  
    collaborators_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborators_url') }})  
    comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments_url') }})  
    commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits_url') }})  
    compare_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compare_url') }})  
    contents_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents_url') }})  
    contributors_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributors_url') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    default_branch: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_branch') }})  
    deployments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployments_url') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    disabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled') }})  
    downloads_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloads_url') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    fork: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fork') }})  
    forks: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks') }})  
    forks_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks_count') }})  
    forks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks_url') }})  
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name') }})  
    git_commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_commits_url') }})  
    git_refs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_refs_url') }})  
    git_tags_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_tags_url') }})  
    git_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_url') }})  
    has_discussions: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_discussions') }})  
    has_downloads: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_downloads') }})  
    has_issues: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_issues') }})  
    has_pages: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_pages') }})  
    has_projects: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_projects') }})  
    has_wiki: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_wiki') }})  
    homepage: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepage') }})  
    hooks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hooks_url') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    issue_comment_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_comment_url') }})  
    issue_events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_events_url') }})  
    issues_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues_url') }})  
    keys_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keys_url') }})  
    labels_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels_url') }})  
    language: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language') }})  
    languages_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languages_url') }})  
    license: shared_nullable_license_simple.NullableLicenseSimple = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license') }})
    r"""License Simple"""  
    merges_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merges_url') }})  
    milestones_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestones_url') }})  
    mirror_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mirror_url') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    notifications_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications_url') }})  
    open_issues: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_issues') }})  
    open_issues_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_issues_count') }})  
    owner: PullRequestBaseRepoOwner = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})  
    private: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private') }})  
    pulls_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pulls_url') }})  
    pushed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pushed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    releases_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releases_url') }})  
    size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})  
    ssh_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssh_url') }})  
    stargazers_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stargazers_count') }})  
    stargazers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stargazers_url') }})  
    statuses_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses_url') }})  
    subscribers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribers_url') }})  
    subscription_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription_url') }})  
    svn_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('svn_url') }})  
    tags_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags_url') }})  
    teams_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams_url') }})  
    trees_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trees_url') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    watchers: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchers') }})  
    watchers_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchers_count') }})  
    allow_forking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_forking'), 'exclude': lambda f: f is None }})  
    allow_merge_commit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_merge_commit'), 'exclude': lambda f: f is None }})  
    allow_rebase_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_rebase_merge'), 'exclude': lambda f: f is None }})  
    allow_squash_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_squash_merge'), 'exclude': lambda f: f is None }})  
    is_template: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_template'), 'exclude': lambda f: f is None }})  
    master_branch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('master_branch'), 'exclude': lambda f: f is None }})  
    permissions: Optional[PullRequestBaseRepoPermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})  
    temp_clone_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temp_clone_token'), 'exclude': lambda f: f is None }})  
    topics: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics'), 'exclude': lambda f: f is None }})  
    visibility: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""The repository visibility: public, private, or internal."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestBaseUser:
    
    avatar_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_url') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    followers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers_url') }})  
    following_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following_url') }})  
    gists_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gists_url') }})  
    gravatar_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gravatar_id') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    organizations_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizations_url') }})  
    received_events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('received_events_url') }})  
    repos_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repos_url') }})  
    site_admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_admin') }})  
    starred_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred_url') }})  
    subscriptions_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptions_url') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestBase:
    
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    ref: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref') }})  
    repo: PullRequestBaseRepo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repo') }})  
    sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha') }})  
    user: PullRequestBaseUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestHeadRepoLicense:
    
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    spdx_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spdx_id') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestHeadRepoOwner:
    
    avatar_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_url') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    followers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers_url') }})  
    following_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following_url') }})  
    gists_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gists_url') }})  
    gravatar_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gravatar_id') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    organizations_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizations_url') }})  
    received_events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('received_events_url') }})  
    repos_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repos_url') }})  
    site_admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_admin') }})  
    starred_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred_url') }})  
    subscriptions_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptions_url') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestHeadRepoPermissions:
    
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    pull: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull') }})  
    push: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push') }})  
    maintain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintain'), 'exclude': lambda f: f is None }})  
    triage: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestHeadRepo:
    
    archive_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archive_url') }})  
    archived: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived') }})  
    assignees_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignees_url') }})  
    blobs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blobs_url') }})  
    branches_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branches_url') }})  
    clone_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clone_url') }})  
    collaborators_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborators_url') }})  
    comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments_url') }})  
    commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits_url') }})  
    compare_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compare_url') }})  
    contents_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents_url') }})  
    contributors_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributors_url') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    default_branch: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_branch') }})  
    deployments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployments_url') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    disabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled') }})  
    downloads_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloads_url') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    fork: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fork') }})  
    forks: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks') }})  
    forks_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks_count') }})  
    forks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks_url') }})  
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name') }})  
    git_commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_commits_url') }})  
    git_refs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_refs_url') }})  
    git_tags_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_tags_url') }})  
    git_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_url') }})  
    has_discussions: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_discussions') }})  
    has_downloads: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_downloads') }})  
    has_issues: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_issues') }})  
    has_pages: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_pages') }})  
    has_projects: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_projects') }})  
    has_wiki: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_wiki') }})  
    homepage: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepage') }})  
    hooks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hooks_url') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    issue_comment_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_comment_url') }})  
    issue_events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_events_url') }})  
    issues_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues_url') }})  
    keys_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keys_url') }})  
    labels_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels_url') }})  
    language: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language') }})  
    languages_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languages_url') }})  
    license: PullRequestHeadRepoLicense = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license') }})  
    merges_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merges_url') }})  
    milestones_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestones_url') }})  
    mirror_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mirror_url') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    notifications_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications_url') }})  
    open_issues: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_issues') }})  
    open_issues_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_issues_count') }})  
    owner: PullRequestHeadRepoOwner = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})  
    private: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private') }})  
    pulls_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pulls_url') }})  
    pushed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pushed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    releases_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releases_url') }})  
    size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})  
    ssh_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssh_url') }})  
    stargazers_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stargazers_count') }})  
    stargazers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stargazers_url') }})  
    statuses_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses_url') }})  
    subscribers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribers_url') }})  
    subscription_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription_url') }})  
    svn_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('svn_url') }})  
    tags_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags_url') }})  
    teams_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams_url') }})  
    trees_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trees_url') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    watchers: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchers') }})  
    watchers_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchers_count') }})  
    allow_forking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_forking'), 'exclude': lambda f: f is None }})  
    allow_merge_commit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_merge_commit'), 'exclude': lambda f: f is None }})  
    allow_rebase_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_rebase_merge'), 'exclude': lambda f: f is None }})  
    allow_squash_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_squash_merge'), 'exclude': lambda f: f is None }})  
    is_template: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_template'), 'exclude': lambda f: f is None }})  
    master_branch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('master_branch'), 'exclude': lambda f: f is None }})  
    permissions: Optional[PullRequestHeadRepoPermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})  
    temp_clone_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temp_clone_token'), 'exclude': lambda f: f is None }})  
    topics: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics'), 'exclude': lambda f: f is None }})  
    visibility: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""The repository visibility: public, private, or internal."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestHeadUser:
    
    avatar_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_url') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    followers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers_url') }})  
    following_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following_url') }})  
    gists_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gists_url') }})  
    gravatar_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gravatar_id') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    organizations_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizations_url') }})  
    received_events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('received_events_url') }})  
    repos_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repos_url') }})  
    site_admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_admin') }})  
    starred_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred_url') }})  
    subscriptions_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptions_url') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestHead:
    
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    ref: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref') }})  
    repo: PullRequestHeadRepo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repo') }})  
    sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha') }})  
    user: PullRequestHeadUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestLabels:
    
    color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})  
    default: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class PullRequestStateEnum(str, Enum):
    r"""State of this Pull Request. Either `open` or `closed`."""
    OPEN = 'open'
    CLOSED = 'closed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequest:
    r"""Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary."""
    
    links: PullRequestLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})  
    additions: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additions') }})  
    assignee: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee') }})
    r"""A GitHub user."""  
    author_association: shared_author_association_enum.AuthorAssociationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_association') }})
    r"""How the author is associated with the repository."""  
    auto_merge: shared_auto_merge.AutoMerge = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_merge') }})
    r"""The status of auto merging a pull request."""  
    base: PullRequestBase = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base') }})  
    body: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body') }})  
    changed_files: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed_files') }})  
    closed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    comments: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})  
    comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments_url') }})  
    commits: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits') }})  
    commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits_url') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    deletions: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletions') }})  
    diff_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diff_url') }})  
    head: PullRequestHead = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    issue_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_url') }})  
    labels: list[PullRequestLabels] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})  
    locked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked') }})  
    maintainer_can_modify: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintainer_can_modify') }})
    r"""Indicates whether maintainers can modify the pull request."""  
    merge_commit_sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merge_commit_sha') }})  
    mergeable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mergeable') }})  
    mergeable_state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mergeable_state') }})  
    merged: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merged') }})  
    merged_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merged_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    merged_by: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merged_by') }})
    r"""A GitHub user."""  
    milestone: shared_nullable_milestone.NullableMilestone = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestone') }})
    r"""A collection of related issues and pull requests."""  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""Number uniquely identifying the pull request within its repository."""  
    patch_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patch_url') }})  
    review_comment_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comment_url') }})  
    review_comments: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comments') }})  
    review_comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comments_url') }})  
    state: PullRequestStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State of this Pull Request. Either `open` or `closed`."""  
    statuses_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses_url') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The title of the pull request."""  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    user: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""A GitHub user."""  
    active_lock_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_lock_reason'), 'exclude': lambda f: f is None }})  
    assignees: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignees'), 'exclude': lambda f: f is None }})  
    draft: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not the pull request is a draft."""  
    rebaseable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rebaseable'), 'exclude': lambda f: f is None }})  
    requested_reviewers: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_reviewers'), 'exclude': lambda f: f is None }})  
    requested_teams: Optional[list[shared_team_simple.TeamSimple]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_teams'), 'exclude': lambda f: f is None }})  
    