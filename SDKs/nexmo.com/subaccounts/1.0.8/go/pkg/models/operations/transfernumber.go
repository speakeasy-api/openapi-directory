// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type TransferNumberSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type TransferNumberRequest struct {
	TransferNumberRequest shared.TransferNumberRequest `request:"mediaType=application/json"`
	// ID of the primary account.
	APIKey string `pathParam:"style=simple,explode=false,name=api_key"`
}

type TransferNumber422ApplicationJSONInvalidParameters struct {
	Name   *string `json:"name,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// TransferNumber422ApplicationJSON - Validation Error
type TransferNumber422ApplicationJSON struct {
	Detail            string                                              `json:"detail"`
	Instance          string                                              `json:"instance"`
	InvalidParameters []TransferNumber422ApplicationJSONInvalidParameters `json:"invalid_parameters"`
	Title             string                                              `json:"title"`
	Type              string                                              `json:"type"`
}

// TransferNumber409ApplicationJSON - Conflict
type TransferNumber409ApplicationJSON struct {
	Detail   string `json:"detail"`
	Instance string `json:"instance"`
	Title    string `json:"title"`
	Type     string `json:"type"`
}

type TransferNumber404ApplicationJSONType string

const (
	TransferNumber404ApplicationJSONTypeSchema            TransferNumber404ApplicationJSONType = "schema"
	TransferNumber404ApplicationJSONTypeShortcodeNotFound TransferNumber404ApplicationJSONType = "ShortcodeNotFound"
)

type TransferNumber404ApplicationJSON struct {
	Schema            *shared.Schema
	ShortcodeNotFound *shared.ShortcodeNotFound

	Type TransferNumber404ApplicationJSONType
}

func CreateTransferNumber404ApplicationJSONSchema(schema shared.Schema) TransferNumber404ApplicationJSON {
	typ := TransferNumber404ApplicationJSONTypeSchema

	return TransferNumber404ApplicationJSON{
		Schema: &schema,
		Type:   typ,
	}
}

func CreateTransferNumber404ApplicationJSONShortcodeNotFound(shortcodeNotFound shared.ShortcodeNotFound) TransferNumber404ApplicationJSON {
	typ := TransferNumber404ApplicationJSONTypeShortcodeNotFound

	return TransferNumber404ApplicationJSON{
		ShortcodeNotFound: &shortcodeNotFound,
		Type:              typ,
	}
}

func (u *TransferNumber404ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	schema := new(shared.Schema)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&schema); err == nil {
		u.Schema = schema
		u.Type = TransferNumber404ApplicationJSONTypeSchema
		return nil
	}

	shortcodeNotFound := new(shared.ShortcodeNotFound)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&shortcodeNotFound); err == nil {
		u.ShortcodeNotFound = shortcodeNotFound
		u.Type = TransferNumber404ApplicationJSONTypeShortcodeNotFound
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransferNumber404ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Schema != nil {
		return json.Marshal(u.Schema)
	}

	if u.ShortcodeNotFound != nil {
		return json.Marshal(u.ShortcodeNotFound)
	}

	return nil, nil
}

type TransferNumber403ApplicationJSONType string

const (
	TransferNumber403ApplicationJSONTypeUnprovisionedErrorResponse         TransferNumber403ApplicationJSONType = "UnprovisionedErrorResponse"
	TransferNumber403ApplicationJSONTypeInvalidNumberTransferErrorResponse TransferNumber403ApplicationJSONType = "InvalidNumberTransferErrorResponse"
)

type TransferNumber403ApplicationJSON struct {
	UnprovisionedErrorResponse         *shared.UnprovisionedErrorResponse
	InvalidNumberTransferErrorResponse *shared.InvalidNumberTransferErrorResponse

	Type TransferNumber403ApplicationJSONType
}

func CreateTransferNumber403ApplicationJSONUnprovisionedErrorResponse(unprovisionedErrorResponse shared.UnprovisionedErrorResponse) TransferNumber403ApplicationJSON {
	typ := TransferNumber403ApplicationJSONTypeUnprovisionedErrorResponse

	return TransferNumber403ApplicationJSON{
		UnprovisionedErrorResponse: &unprovisionedErrorResponse,
		Type:                       typ,
	}
}

func CreateTransferNumber403ApplicationJSONInvalidNumberTransferErrorResponse(invalidNumberTransferErrorResponse shared.InvalidNumberTransferErrorResponse) TransferNumber403ApplicationJSON {
	typ := TransferNumber403ApplicationJSONTypeInvalidNumberTransferErrorResponse

	return TransferNumber403ApplicationJSON{
		InvalidNumberTransferErrorResponse: &invalidNumberTransferErrorResponse,
		Type:                               typ,
	}
}

func (u *TransferNumber403ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	unprovisionedErrorResponse := new(shared.UnprovisionedErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&unprovisionedErrorResponse); err == nil {
		u.UnprovisionedErrorResponse = unprovisionedErrorResponse
		u.Type = TransferNumber403ApplicationJSONTypeUnprovisionedErrorResponse
		return nil
	}

	invalidNumberTransferErrorResponse := new(shared.InvalidNumberTransferErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&invalidNumberTransferErrorResponse); err == nil {
		u.InvalidNumberTransferErrorResponse = invalidNumberTransferErrorResponse
		u.Type = TransferNumber403ApplicationJSONTypeInvalidNumberTransferErrorResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransferNumber403ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.UnprovisionedErrorResponse != nil {
		return json.Marshal(u.UnprovisionedErrorResponse)
	}

	if u.InvalidNumberTransferErrorResponse != nil {
		return json.Marshal(u.InvalidNumberTransferErrorResponse)
	}

	return nil, nil
}

// TransferNumber401ApplicationJSON - Credential is missing or invalid
type TransferNumber401ApplicationJSON struct {
	Detail   string `json:"detail"`
	Instance string `json:"instance"`
	Title    string `json:"title"`
	Type     string `json:"type"`
}

type TransferNumberResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Number transfer response
	TransferNumberResponse *shared.TransferNumberResponse
	// Credential is missing or invalid
	TransferNumber401ApplicationJSONObject *TransferNumber401ApplicationJSON
	// Action is forbidden
	TransferNumber403ApplicationJSONOneOf *TransferNumber403ApplicationJSON
	// Action is forbidden
	TransferNumber404ApplicationJSONOneOf *TransferNumber404ApplicationJSON
	// Conflict
	TransferNumber409ApplicationJSONObject *TransferNumber409ApplicationJSON
	// Validation Error
	TransferNumber422ApplicationJSONObject *TransferNumber422ApplicationJSON
}
