/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ProxyCreatePaymentMethod - Container for custom fields of a payment method object.
 * 
 */
public class ProxyCreatePaymentMethod {
    /**
     * The ID of the customer account associated with this payment method.
     * To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyCreatePaymentMethod withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  The nine-digit routing number or ABA number used by banks. This field is only required if the `Type` field is set to `ACH`.
     * 
     * **Character limit**: 9 **Values**: a string of 9 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAbaCode")
    public String achAbaCode;
    public ProxyCreatePaymentMethod withAchAbaCode(String achAbaCode) {
        this.achAbaCode = achAbaCode;
        return this;
    }
    
    /**
     *  The name of the account holder, which can be either a person or a company. This field is only required if the `Type` field is set to `ACH`.
     * 
     * **Character limit**: 70 **Values**: a string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountName")
    public String achAccountName;
    public ProxyCreatePaymentMethod withAchAccountName(String achAccountName) {
        this.achAccountName = achAccountName;
        return this;
    }
    
    /**
     * The bank account number associated with the ACH payment. This field is only required if the `Type` field is set to `ACH`.
     * **Character limit**: 30 **Values**: a string of 30 numeric characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountNumber")
    public String achAccountNumber;
    public ProxyCreatePaymentMethod withAchAccountNumber(String achAccountNumber) {
        this.achAccountNumber = achAccountNumber;
        return this;
    }
    
    /**
     *  The type of bank account associated with the ACH payment. This field is only required if the `Type` field is set to `ACH`.
     * **Character limit**: 16 **Values**:
     * - `BusinessChecking`
     * - `Checking`
     * - `Saving`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountType")
    public String achAccountType;
    public ProxyCreatePaymentMethod withAchAccountType(String achAccountType) {
        this.achAccountType = achAccountType;
        return this;
    }
    
    /**
     *  Line 1 for the ACH address. This field is required for creating a payment method for the Vantiv payment gateway. **Character limit**: 255 **Values**: an address 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAddress1")
    public String achAddress1;
    public ProxyCreatePaymentMethod withAchAddress1(String achAddress1) {
        this.achAddress1 = achAddress1;
        return this;
    }
    
    /**
     *  Line 2 for the ACH address. This field is required for creating a payment method for the Vantiv payment gateway. **Character limit**: 255 **Values**: an address 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAddress2")
    public String achAddress2;
    public ProxyCreatePaymentMethod withAchAddress2(String achAddress2) {
        this.achAddress2 = achAddress2;
        return this;
    }
    
    /**
     *  The name of the bank where the ACH payment account is held. This field is only required if the `Type` field is set to `ACH`.
     * **Character limit**: 70 **Values**: a string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchBankName")
    public String achBankName;
    public ProxyCreatePaymentMethod withAchBankName(String achBankName) {
        this.achBankName = achBankName;
        return this;
    }
    
    /**
     * The city of the ACH address. Use this field for ACH payment methods. **Note**: This field is only specific to the NMI payment gateway.
     * **Character limit**: 40 **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchCity")
    public String achCity;
    public ProxyCreatePaymentMethod withAchCity(String achCity) {
        this.achCity = achCity;
        return this;
    }
    
    /**
     * The country of the ACH address. See [Country Names and Their ISO Standard 2- and 3-Digit Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes) for the list of supported country names. Use this field for ACH methods. **Note**: This field is only specific to the NMI payment gateway.
     * **Character limit**: 40 **Values**: a supported country name 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchCountry")
    public String achCountry;
    public ProxyCreatePaymentMethod withAchCountry(String achCountry) {
        this.achCountry = achCountry;
        return this;
    }
    
    /**
     * The billing address's zip code. This field is required only when you define an ACH payment method. **Note**: This field is only specific to the NMI payment gateway.
     * **Character limit**: 20 **Values**: a string of 20 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchPostalCode")
    public String achPostalCode;
    public ProxyCreatePaymentMethod withAchPostalCode(String achPostalCode) {
        this.achPostalCode = achPostalCode;
        return this;
    }
    
    /**
     * The billing address's state. Use this field is if the `ACHCountry` value is either `Canada` or the `US`. State names must be spelled in full. For more information, see the list of [supported state names](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes). This field is required only when you define an ACH payment method. **Note**: This field is only specific to the NMI payment gateway.
     * **Character limit**: 50 **Values**: a valid state name 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchState")
    public String achState;
    public ProxyCreatePaymentMethod withAchState(String achState) {
        this.achState = achState;
        return this;
    }
    
    /**
     *  The branch code of the bank used for direct debit. Use this field for direct debit payment methods.
     * **Character limit**: 10 **Values**: a string of 10 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankBranchCode")
    public String bankBranchCode;
    public ProxyCreatePaymentMethod withBankBranchCode(String bankBranchCode) {
        this.bankBranchCode = bankBranchCode;
        return this;
    }
    
    /**
     * The check digit in the international bank account number, which confirms the validity of the account. Use this field for direct debit payment methods. **Character limit**: 4 **Values**: a string of 4 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankCheckDigit")
    public String bankCheckDigit;
    public ProxyCreatePaymentMethod withBankCheckDigit(String bankCheckDigit) {
        this.bankCheckDigit = bankCheckDigit;
        return this;
    }
    
    /**
     * The name on the direct debit bank account. Use this field for direct debit payment methods.
     * 
     * **Character limit**: 60
     * **Values**: a string of 60 characters or fewer
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountName")
    public String bankTransferAccountName;
    public ProxyCreatePaymentMethod withBankTransferAccountName(String bankTransferAccountName) {
        this.bankTransferAccountName = bankTransferAccountName;
        return this;
    }
    
    /**
     * The number of the customer's bank account. Use this field for direct debit payment methods.
     * 
     * **Character limit**: 30
     * **Values**: a string of 30 characters or fewer
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountNumber")
    public String bankTransferAccountNumber;
    public ProxyCreatePaymentMethod withBankTransferAccountNumber(String bankTransferAccountNumber) {
        this.bankTransferAccountNumber = bankTransferAccountNumber;
        return this;
    }
    
    /**
     * This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`.
     * 
     * **Character limit**: 32
     * **Values**: automatically generated
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountNumberMask")
    public String bankTransferAccountNumberMask;
    public ProxyCreatePaymentMethod withBankTransferAccountNumberMask(String bankTransferAccountNumberMask) {
        this.bankTransferAccountNumberMask = bankTransferAccountNumberMask;
        return this;
    }
    
    /**
     * The type of direct debit transfer. The value of this field is dependent on the country of the user. This field is only required if the `Type` field is set to `BankTransfer`.
     * 
     *  **Values**: 
     * 
     *    - `SEPA` 
     *    
     *    - `AutomatischIncasso` (Netherlands)
     * 
     *    - `LastschriftDE` (Germany)
     * 
     *    - `LastschriftAT` (Austria)
     * 
     *    - `DemandeDePrelevement` (France)
     * 
     *    - `DirectEntryAU` (Australia)
     * 
     *    - `DirectDebitUK` (UK)
     * 
     *    - `Domicil` (Belgium)
     * 
     *    - `LastschriftCH` (Switzerland)
     * 
     *    - `RID` (Italy)
     * 
     *    - `OrdenDeDomiciliacion` (Spain)
     *    - `Autogiro` (Sweden)
     *    - `Betalingsservice` (Denmark)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferType")
    public String bankTransferType;
    public ProxyCreatePaymentMethod withBankTransferType(String bankTransferType) {
        this.bankTransferType = bankTransferType;
        return this;
    }
    
    /**
     *  The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Use this field only for direct debit payments in Switzerland with Global Collect.
     * **Character limit**: 11 **Values**: a string of 11 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BusinessIdentificationCode")
    public String businessIdentificationCode;
    public ProxyCreatePaymentMethod withBusinessIdentificationCode(String businessIdentificationCode) {
        this.businessIdentificationCode = businessIdentificationCode;
        return this;
    }
    
    /**
     *  The city of the customer's address. Use this field for direct debit payment methods.
     * **Character limit**:80 **Values**: a string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("City")
    public String city;
    public ProxyCreatePaymentMethod withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * The name of the company.
     * 
     * Zuora does not recommend that you use this field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CompanyName")
    public String companyName;
    public ProxyCreatePaymentMethod withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     *  The two-letter country code of the customer's address. This field is only required if the `Type` field is set to `BankTransfer`, and the `BankTransferType` field is set to either `DirectDebitUK`, `DirectEntryAU`, or `DirectDebitNZ`.
     * **Character limit**: 2 **Values**: a valid country code 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Country")
    public String country;
    public ProxyCreatePaymentMethod withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     *  The first line of the card holder's address, which is often a street address or business name. Use this field for credit card and direct debit payment methods.
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardAddress1")
    public String creditCardAddress1;
    public ProxyCreatePaymentMethod withCreditCardAddress1(String creditCardAddress1) {
        this.creditCardAddress1 = creditCardAddress1;
        return this;
    }
    
    /**
     *  The second line of the card holder's address. Use this field for credit card and direct debit payment methods.
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardAddress2")
    public String creditCardAddress2;
    public ProxyCreatePaymentMethod withCreditCardAddress2(String creditCardAddress2) {
        this.creditCardAddress2 = creditCardAddress2;
        return this;
    }
    
    /**
     *  The city of the card holder's address. Use this field for credit card and direct debit payment methods **Character limit**: 40 **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardCity")
    public String creditCardCity;
    public ProxyCreatePaymentMethod withCreditCardCity(String creditCardCity) {
        this.creditCardCity = creditCardCity;
        return this;
    }
    
    /**
     *  The country of the card holder's address. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardCountry")
    public String creditCardCountry;
    public ProxyCreatePaymentMethod withCreditCardCountry(String creditCardCountry) {
        this.creditCardCountry = creditCardCountry;
        return this;
    }
    
    /**
     *  The expiration month of the credit card or debit card. This field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.
     * **Character limit**: 2 **Values**: a two-digit number, 01 - 12 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardExpirationMonth")
    public Integer creditCardExpirationMonth;
    public ProxyCreatePaymentMethod withCreditCardExpirationMonth(Integer creditCardExpirationMonth) {
        this.creditCardExpirationMonth = creditCardExpirationMonth;
        return this;
    }
    
    /**
     *  The expiration month of the credit card or debit card. This field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.
     * **Character limit**: 4 **Values**: a four-digit number 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardExpirationYear")
    public Integer creditCardExpirationYear;
    public ProxyCreatePaymentMethod withCreditCardExpirationYear(Integer creditCardExpirationYear) {
        this.creditCardExpirationYear = creditCardExpirationYear;
        return this;
    }
    
    /**
     *  The full name of the card holder. This field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.
     * 
     * **Character limit**: 50 **Values**: a string of 50 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardHolderName")
    public String creditCardHolderName;
    public ProxyCreatePaymentMethod withCreditCardHolderName(String creditCardHolderName) {
        this.creditCardHolderName = creditCardHolderName;
        return this;
    }
    
    /**
     * Credit card number, a string of up to 16 characters. This field can only be set when creating a new payment method; it cannot be queried or updated. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardNumber")
    public String creditCardNumber;
    public ProxyCreatePaymentMethod withCreditCardNumber(String creditCardNumber) {
        this.creditCardNumber = creditCardNumber;
        return this;
    }
    
    /**
     *  The billing address's zip code. **Character limit**: 20 **Values**: a string of 20 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardPostalCode")
    public String creditCardPostalCode;
    public ProxyCreatePaymentMethod withCreditCardPostalCode(String creditCardPostalCode) {
        this.creditCardPostalCode = creditCardPostalCode;
        return this;
    }
    
    /**
     * The CVV or CVV2 security code. See [How do I control what information Zuora sends over to the Payment Gateway?](https://knowledgecenter.zuora.com/kb/How_do_I_control_information_sent_to_payment_gateways_when_verifying_payment_methods%3F) for more information. To ensure PCI compliance, this value is not stored and cannot be queried. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardSecurityCode")
    public String creditCardSecurityCode;
    public ProxyCreatePaymentMethod withCreditCardSecurityCode(String creditCardSecurityCode) {
        this.creditCardSecurityCode = creditCardSecurityCode;
        return this;
    }
    
    /**
     *  The billing address's state. Use this field if the `CreditCardCountry` value is either Canada or the US. State names must be spelled in full. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardState")
    public String creditCardState;
    public ProxyCreatePaymentMethod withCreditCardState(String creditCardState) {
        this.creditCardState = creditCardState;
        return this;
    }
    
    /**
     * The type of the credit card.
     * 
     * Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardType")
    public String creditCardType;
    public ProxyCreatePaymentMethod withCreditCardType(String creditCardType) {
        this.creditCardType = creditCardType;
        return this;
    }
    
    /**
     *  The session ID of the user when the `PaymentMethod` was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently only Verifi supports this field.
     * **Character limit**: 255 **Values**: 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DeviceSessionId")
    public String deviceSessionId;
    public ProxyCreatePaymentMethod withDeviceSessionId(String deviceSessionId) {
        this.deviceSessionId = deviceSessionId;
        return this;
    }
    
    /**
     *  An email address for the payment method in addition to the bill to contact email address.
     * **Character limit**: 80 **Values**: a string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Email")
    public String email;
    public ProxyCreatePaymentMethod withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     *  Indicates if the customer has an existing mandate or a new mandate. A mandate is a signed authorization for UK and NL customers. When you are migrating mandates from another system, be sure to set this field correctly. If you indicate that a new mandate is an existing mandate or vice-versa, then transactions fail. This field is used only for the direct debit payment method.
     * **Character limit**: 3 **Values**: `Yes`, `No` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExistingMandate")
    public String existingMandate;
    public ProxyCreatePaymentMethod withExistingMandate(String existingMandate) {
        this.existingMandate = existingMandate;
        return this;
    }
    
    /**
     *  The customer's first name. This field is used only for the direct debit payment method.
     * **Character limit**: 30 **Values**: a string of 30 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FirstName")
    public String firstName;
    public ProxyCreatePaymentMethod withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * A field used to pass gateway options. Zuora allows you to pass in special gateway-specific parameters for payments that go through the Adyen, Autorize.et, CyberSource, Merchant eSolutions, Orbital (Chase Paymentech), QValent, Vantiv, and Verifi gateways.
     * 
     * For each of these special parameters, you supply the name-value pair and Zuora passes it to the gateway. This allows you to add functionality that's supported by a specific gateway but currently not supported by Zuora.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayOptionData")
    public ProxyCreatePaymentMethodGatewayOptionData gatewayOptionData;
    public ProxyCreatePaymentMethod withGatewayOptionData(ProxyCreatePaymentMethodGatewayOptionData gatewayOptionData) {
        this.gatewayOptionData = gatewayOptionData;
        return this;
    }
    
    /**
     *  The International Bank Account Number. This field is used only for the direct debit payment method.
     * **Character limit**: 42 **Values**: a string of 42 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IBAN")
    public String iban;
    public ProxyCreatePaymentMethod withIban(String iban) {
        this.iban = iban;
        return this;
    }
    
    /**
     *  The IP address of the user when the payment method was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently PayPal, CyberSource, Authorize.Net, Verifi, and WorldPay support this field.
     * **Character limit**: 15 **Values**: a string of 15 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IPAddress")
    public String ipAddress;
    public ProxyCreatePaymentMethod withIPAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * The unique identity number of the customer account. 
     * 
     * This field is required only if the `BankTransferType` field is set to `Autogiro` or `Betalingsservice`. It is a string of 12 characters for a Swedish identity number, and a string of 10 characters for a Denish identity number.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IdentityNumber")
    public String identityNumber;
    public ProxyCreatePaymentMethod withIdentityNumber(String identityNumber) {
        this.identityNumber = identityNumber;
        return this;
    }
    
    /**
     * Whether the customer account is a company.
     * 
     * Zuora does not recommend that you use this field. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsCompany")
    public Boolean isCompany;
    public ProxyCreatePaymentMethod withIsCompany(Boolean isCompany) {
        this.isCompany = isCompany;
        return this;
    }
    
    /**
     *  The customer's last name. This field is used only for the direct debit payment method.
     * **Character limit**: 70 **Values**: a string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastName")
    public String lastName;
    public ProxyCreatePaymentMethod withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     *  The date of the most recent transaction.
     * **Character limit**: 29 **Values**: a valid date and time value 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastTransactionDateTime")
    public OffsetDateTime lastTransactionDateTime;
    public ProxyCreatePaymentMethod withLastTransactionDateTime(OffsetDateTime lastTransactionDateTime) {
        this.lastTransactionDateTime = lastTransactionDateTime;
        return this;
    }
    
    /**
     *  The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("MandateCreationDate")
    public LocalDate mandateCreationDate;
    public ProxyCreatePaymentMethod withMandateCreationDate(LocalDate mandateCreationDate) {
        this.mandateCreationDate = mandateCreationDate;
        return this;
    }
    
    /**
     *  The ID of the mandate. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.
     * **Character limit**: 36 **Values**: a string of 36 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MandateID")
    public String mandateID;
    public ProxyCreatePaymentMethod withMandateID(String mandateID) {
        this.mandateID = mandateID;
        return this;
    }
    
    /**
     *  Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.
     * **Character limit**: 3 **Values**: `Yes`, `No `(case-sensitive) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MandateReceived")
    public String mandateReceived;
    public ProxyCreatePaymentMethod withMandateReceived(String mandateReceived) {
        this.mandateReceived = mandateReceived;
        return this;
    }
    
    /**
     *  The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("MandateUpdateDate")
    public LocalDate mandateUpdateDate;
    public ProxyCreatePaymentMethod withMandateUpdateDate(LocalDate mandateUpdateDate) {
        this.mandateUpdateDate = mandateUpdateDate;
        return this;
    }
    
    /**
     *  Specifies the number of allowable consecutive failures Zuora attempts with the payment method before stopping. When the `UseDefaultRetryRule` field is set to `false`, this field is only required if the `PaymentRetryWindow` field is not defined.
     * **Values**: a valid number 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxConsecutivePaymentFailures")
    public Long maxConsecutivePaymentFailures;
    public ProxyCreatePaymentMethod withMaxConsecutivePaymentFailures(Long maxConsecutivePaymentFailures) {
        this.maxConsecutivePaymentFailures = maxConsecutivePaymentFailures;
        return this;
    }
    
    /**
     * The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumConsecutiveFailures")
    public Integer numConsecutiveFailures;
    public ProxyCreatePaymentMethod withNumConsecutiveFailures(Integer numConsecutiveFailures) {
        this.numConsecutiveFailures = numConsecutiveFailures;
        return this;
    }
    
    /**
     *  The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. When the `UseDefaultRetryRule` field is set to `false`, this field is only required if the `MaxConsecutivePaymentFailures` field is not defined.
     * **Character limit**: 4 **Values**: a whole number between 1 and 1000, exclusive 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentRetryWindow")
    public Long paymentRetryWindow;
    public ProxyCreatePaymentMethod withPaymentRetryWindow(Long paymentRetryWindow) {
        this.paymentRetryWindow = paymentRetryWindow;
        return this;
    }
    
    /**
     *  The PayPal billing agreement ID, which is a contract between two PayPal accounts. Typically, the selling party initiates a request to create a BAID, and sends it to buying party for acceptance. The seller can keep track of the BAID and use it for future charges against the buyer. This field is only required if the `Type` field is set to `PayPal`.
     * **Character limit**: 64 **Values**: a string of 64 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalBaid")
    public String paypalBaid;
    public ProxyCreatePaymentMethod withPaypalBaid(String paypalBaid) {
        this.paypalBaid = paypalBaid;
        return this;
    }
    
    /**
     *  The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service. This field is only required if the `Type` field is set to `PayPal`.
     * **Character limit**: 80 **Values**: a string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalEmail")
    public String paypalEmail;
    public ProxyCreatePaymentMethod withPaypalEmail(String paypalEmail) {
        this.paypalEmail = paypalEmail;
        return this;
    }
    
    /**
     *  PayPal's Adaptive Payments API key. Zuora does not create this key, nor does it call PayPal to generate it. You must use PayPal's Adaptive Payments' API to generate this key, and then pass it to Zuora. Zuora uses this key to authorize future payments to PayPal's Adaptive Payments API. This field is only required if you use PayPal Adaptive Payments gateway.
     * **Character limit**: 32 **Values**: a valid PayPal Adaptive Payment pre-approval key 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalPreapprovalKey")
    public String paypalPreapprovalKey;
    public ProxyCreatePaymentMethod withPaypalPreapprovalKey(String paypalPreapprovalKey) {
        this.paypalPreapprovalKey = paypalPreapprovalKey;
        return this;
    }
    
    /**
     *  Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments. This field is only required if you use PayPal Adaptive Payments or Payflow Pro (Express Checkout) gateways.
     * **Character limit**: 32 **Values**: `ExpressCheckout`, `AdaptivePayments` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalType")
    public String paypalType;
    public ProxyCreatePaymentMethod withPaypalType(String paypalType) {
        this.paypalType = paypalType;
        return this;
    }
    
    /**
     *  The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.
     * **Character limit**: 40 **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Phone")
    public String phone;
    public ProxyCreatePaymentMethod withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     *  The zip code of the customer's address. This field is used only for the direct debit payment method.
     * **Character limit**: 20 **Values**: a string of 20 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PostalCode")
    public String postalCode;
    public ProxyCreatePaymentMethod withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     *  A gateway unique identifier that replaces sensitive payment method data. `SecondTokenId` is conditionally required only when `TokenId` is being used to represent a gateway customer profile. `SecondTokenId` is used in the CC Reference Transaction payment method. **Character limit**: 64 **Values**: a string of 64 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecondTokenId")
    public String secondTokenId;
    public ProxyCreatePaymentMethod withSecondTokenId(String secondTokenId) {
        this.secondTokenId = secondTokenId;
        return this;
    }
    
    /**
     * If you set this field to `false`, Zuora will send an authorization request to the payment gateway. If the authorization fails, the Create Payment Method request will fail as well. If the user knows that the card number or token is valid, we recommend disabling this feature because authorization requests to the card network incur additional processing fees. Currently, Zuora sends all authorizations as keyed entries.
     * If you set this field to `true`, the authorization request is not sent.
     * **Character limit**: 5 **Values**: `true` or `false` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SkipValidation")
    public Boolean skipValidation;
    public ProxyCreatePaymentMethod withSkipValidation(Boolean skipValidation) {
        this.skipValidation = skipValidation;
        return this;
    }
    
    /**
     * The state of the customer's address. This field is used only for the direct debit payment method.
     * **Character limit**: 70 **Values**: a string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("State")
    public String state;
    public ProxyCreatePaymentMethod withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The street name of the customer's address. This field is used only for the direct debit payment method.
     * **Character limit**: 100 **Values**: a string of 100 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreetName")
    public String streetName;
    public ProxyCreatePaymentMethod withStreetName(String streetName) {
        this.streetName = streetName;
        return this;
    }
    
    /**
     * The street number of the customer's address. This field is used only for the direct debit payment method.
     * **Character limit**: 30 **Values**: a string of 30 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreetNumber")
    public String streetNumber;
    public ProxyCreatePaymentMethod withStreetNumber(String streetNumber) {
        this.streetNumber = streetNumber;
        return this;
    }
    
    /**
     * A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. When `TokenId` is used to represent a customer profile, `SecondTokenId` is conditionally required for representing the underlying tokenized payment method. `TokenId` is required for the CC Reference Transaction payment method.
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TokenId")
    public String tokenId;
    public ProxyCreatePaymentMethod withTokenId(String tokenId) {
        this.tokenId = tokenId;
        return this;
    }
    
    /**
     * The type of payment method. 
     * 
     * If you want to create an Amazon Pay payment method, specify `CreditCardReferenceTransaction` for this field. 
     * 
     * If you want create a custom payment method, specify the name of the custom payment method type. This type is only available if the Universal Payment Connector and Open Payment Method services are enabled. See [Set up custom payment gateways and payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/MB_Set_up_custom_payment_gateways_and_payment_methods) for details.
     * 
     */
    @JsonProperty("Type")
    public ProxyCreatePaymentMethodTypeEnum type;
    public ProxyCreatePaymentMethod withType(ProxyCreatePaymentMethodTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Determines whether to use the default retry rules configured in the Z-Payments settings. Set this to `true` to use the default retry rules. Set this to `false` to set the specific rules for this payment method. If you set this value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`, are required.
     * **Character limit**: 5 **Values**: `true` or `false` 
     */
    @JsonProperty("UseDefaultRetryRule")
    public Boolean useDefaultRetryRule;
    public ProxyCreatePaymentMethod withUseDefaultRetryRule(Boolean useDefaultRetryRule) {
        this.useDefaultRetryRule = useDefaultRetryRule;
        return this;
    }
    
    /**
     * The currency used for payment method authorization.
     * 
     * If this field is not specified, `currency` specified for the account is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;
    public ProxyCreatePaymentMethod withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
}
