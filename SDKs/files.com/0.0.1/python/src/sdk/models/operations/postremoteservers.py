"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import remoteserverentity as shared_remoteserverentity
from enum import Enum
from typing import Optional

class PostRemoteServersRequestBodyFilesAgentPermissionSetEnum(str, Enum):
    r"""Local permissions for files agent. read_only, write_only, or read_write"""
    READ_WRITE = 'read_write'
    READ_ONLY = 'read_only'
    WRITE_ONLY = 'write_only'

class PostRemoteServersRequestBodyOneDriveAccountTypeEnum(str, Enum):
    r"""Either personal or business_other account types"""
    PERSONAL = 'personal'
    BUSINESS_OTHER = 'business_other'

class PostRemoteServersRequestBodyServerCertificateEnum(str, Enum):
    r"""Remote server certificate"""
    REQUIRE_MATCH = 'require_match'
    ALLOW_ANY = 'allow_any'

class PostRemoteServersRequestBodyServerTypeEnum(str, Enum):
    r"""Remote server type."""
    FTP = 'ftp'
    SFTP = 'sftp'
    S3 = 's3'
    GOOGLE_CLOUD_STORAGE = 'google_cloud_storage'
    WEBDAV = 'webdav'
    WASABI = 'wasabi'
    BACKBLAZE_B2 = 'backblaze_b2'
    ONE_DRIVE = 'one_drive'
    RACKSPACE = 'rackspace'
    BOX = 'box'
    DROPBOX = 'dropbox'
    GOOGLE_DRIVE = 'google_drive'
    AZURE = 'azure'
    SHAREPOINT = 'sharepoint'
    S3_COMPATIBLE = 's3_compatible'
    AZURE_FILES = 'azure_files'
    FILES_AGENT = 'files_agent'
    FILEBASE = 'filebase'

class PostRemoteServersRequestBodySslEnum(str, Enum):
    r"""Should we require SSL?"""
    IF_AVAILABLE = 'if_available'
    REQUIRE = 'require'
    REQUIRE_IMPLICIT = 'require_implicit'
    NEVER = 'never'


@dataclasses.dataclass
class PostRemoteServersRequestBody:
    
    aws_access_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'aws_access_key' }})
    r"""AWS Access Key."""  
    aws_secret_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'aws_secret_key' }})
    r"""AWS secret key."""  
    azure_blob_storage_access_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'azure_blob_storage_access_key' }})
    r"""Azure Blob Storage secret key."""  
    azure_blob_storage_account: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'azure_blob_storage_account' }})
    r"""Azure Blob Storage Account name"""  
    azure_blob_storage_container: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'azure_blob_storage_container' }})
    r"""Azure Blob Storage Container name"""  
    azure_blob_storage_sas_token: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'azure_blob_storage_sas_token' }})
    r"""Shared Access Signature (SAS) token"""  
    azure_files_storage_access_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'azure_files_storage_access_key' }})
    r"""Azure File Storage access key."""  
    azure_files_storage_account: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'azure_files_storage_account' }})
    r"""Azure File Storage Account name"""  
    azure_files_storage_sas_token: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'azure_files_storage_sas_token' }})
    r"""Shared Access Signature (SAS) token"""  
    azure_files_storage_share_name: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'azure_files_storage_share_name' }})
    r"""Azure File Storage Share name"""  
    backblaze_b2_application_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'backblaze_b2_application_key' }})
    r"""Backblaze B2 Cloud Storage applicationKey."""  
    backblaze_b2_bucket: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'backblaze_b2_bucket' }})
    r"""Backblaze B2 Cloud Storage Bucket name"""  
    backblaze_b2_key_id: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'backblaze_b2_key_id' }})
    r"""Backblaze B2 Cloud Storage keyID."""  
    backblaze_b2_s3_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'backblaze_b2_s3_endpoint' }})
    r"""Backblaze B2 Cloud Storage S3 Endpoint"""  
    enable_dedicated_ips: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'enable_dedicated_ips' }})
    r"""`true` if remote server only accepts connections from dedicated IPs"""  
    filebase_access_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'filebase_access_key' }})
    r"""Filebase Access Key."""  
    filebase_bucket: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'filebase_bucket' }})
    r"""Filebase Bucket name"""  
    filebase_secret_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'filebase_secret_key' }})
    r"""Filebase secret key"""  
    files_agent_permission_set: Optional[PostRemoteServersRequestBodyFilesAgentPermissionSetEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'files_agent_permission_set' }})
    r"""Local permissions for files agent. read_only, write_only, or read_write"""  
    files_agent_root: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'files_agent_root' }})
    r"""Agent local root path"""  
    google_cloud_storage_bucket: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'google_cloud_storage_bucket' }})
    r"""Google Cloud Storage bucket name"""  
    google_cloud_storage_credentials_json: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'google_cloud_storage_credentials_json' }})
    r"""A JSON file that contains the private key. To generate see https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey"""  
    google_cloud_storage_project_id: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'google_cloud_storage_project_id' }})
    r"""Google Cloud Project ID"""  
    hostname: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'hostname' }})
    r"""Hostname or IP address"""  
    max_connections: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'max_connections' }})
    r"""Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'name' }})
    r"""Internal name for your reference"""  
    one_drive_account_type: Optional[PostRemoteServersRequestBodyOneDriveAccountTypeEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'one_drive_account_type' }})
    r"""Either personal or business_other account types"""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password' }})
    r"""Password if needed."""  
    pin_to_site_region: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'pin_to_site_region' }})
    r"""If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'port' }})
    r"""Port for remote server.  Not needed for S3."""  
    private_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'private_key' }})
    r"""Private key if needed."""  
    private_key_passphrase: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'private_key_passphrase' }})
    r"""Passphrase for private key if needed."""  
    rackspace_api_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'rackspace_api_key' }})
    r"""Rackspace API key from the Rackspace Cloud Control Panel."""  
    rackspace_container: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'rackspace_container' }})
    r"""The name of the container (top level directory) where files will sync."""  
    rackspace_region: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'rackspace_region' }})
    r"""Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/"""  
    rackspace_username: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'rackspace_username' }})
    r"""Rackspace username used to login to the Rackspace Cloud Control Panel."""  
    reset_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'reset_authentication' }})
    r"""Reset authenticated account"""  
    s3_bucket: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 's3_bucket' }})
    r"""S3 bucket name"""  
    s3_compatible_access_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 's3_compatible_access_key' }})
    r"""S3-compatible Access Key."""  
    s3_compatible_bucket: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 's3_compatible_bucket' }})
    r"""S3-compatible Bucket name"""  
    s3_compatible_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 's3_compatible_endpoint' }})
    r"""S3-compatible endpoint"""  
    s3_compatible_region: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 's3_compatible_region' }})
    r"""S3-compatible endpoint"""  
    s3_compatible_secret_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 's3_compatible_secret_key' }})
    r"""S3-compatible secret key"""  
    s3_region: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 's3_region' }})
    r"""S3 region"""  
    server_certificate: Optional[PostRemoteServersRequestBodyServerCertificateEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'server_certificate' }})
    r"""Remote server certificate"""  
    server_host_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'server_host_key' }})
    r"""Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts"""  
    server_type: Optional[PostRemoteServersRequestBodyServerTypeEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'server_type' }})
    r"""Remote server type."""  
    ssl: Optional[PostRemoteServersRequestBodySslEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ssl' }})
    r"""Should we require SSL?"""  
    ssl_certificate: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ssl_certificate' }})
    r"""SSL client certificate."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'username' }})
    r"""Remote server username.  Not needed for S3 buckets."""  
    wasabi_access_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'wasabi_access_key' }})
    r"""Wasabi access key."""  
    wasabi_bucket: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'wasabi_bucket' }})
    r"""Wasabi Bucket name"""  
    wasabi_region: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'wasabi_region' }})
    r"""Wasabi region"""  
    wasabi_secret_key: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'wasabi_secret_key' }})
    r"""Wasabi secret key."""  
    

@dataclasses.dataclass
class PostRemoteServersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    remote_server_entity: Optional[shared_remoteserverentity.RemoteServerEntity] = dataclasses.field(default=None)
    r"""The RemoteServers object."""  
    