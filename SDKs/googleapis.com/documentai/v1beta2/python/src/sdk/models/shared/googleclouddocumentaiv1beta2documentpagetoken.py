"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddocumentaiv1beta2documentpagedetectedlanguage as shared_googleclouddocumentaiv1beta2documentpagedetectedlanguage
from ..shared import googleclouddocumentaiv1beta2documentpagelayout as shared_googleclouddocumentaiv1beta2documentpagelayout
from ..shared import googleclouddocumentaiv1beta2documentpagetokendetectedbreak as shared_googleclouddocumentaiv1beta2documentpagetokendetectedbreak
from ..shared import googleclouddocumentaiv1beta2documentprovenance as shared_googleclouddocumentaiv1beta2documentprovenance
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDocumentaiV1beta2DocumentPageToken:
    r"""A detected token."""
    
    detected_break: Optional[shared_googleclouddocumentaiv1beta2documentpagetokendetectedbreak.GoogleCloudDocumentaiV1beta2DocumentPageTokenDetectedBreak] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedBreak'), 'exclude': lambda f: f is None }})
    r"""Detected break at the end of a Token."""  
    detected_languages: Optional[list[shared_googleclouddocumentaiv1beta2documentpagedetectedlanguage.GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedLanguages'), 'exclude': lambda f: f is None }})
    r"""A list of detected languages together with confidence."""  
    layout: Optional[shared_googleclouddocumentaiv1beta2documentpagelayout.GoogleCloudDocumentaiV1beta2DocumentPageLayout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout'), 'exclude': lambda f: f is None }})
    r"""Visual element describing a layout unit on a page."""  
    provenance: Optional[shared_googleclouddocumentaiv1beta2documentprovenance.GoogleCloudDocumentaiV1beta2DocumentProvenance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provenance'), 'exclude': lambda f: f is None }})
    r"""Structure to identify provenance relationships between annotations in different revisions."""  
    