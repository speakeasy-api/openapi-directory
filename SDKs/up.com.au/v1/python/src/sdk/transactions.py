"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Transactions:
    r"""Transactions represent the movement of money into and out of an
    account. They have many characteristics that vary depending on
    the kind of transaction. Transactions may be temporarily `HELD`
    (pending) or `SETTLED`, typically depending on which payment
    method was used at the point of sale.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_accounts_account_id_transactions(self, request: operations.GetAccountsAccountIDTransactionsRequest) -> operations.GetAccountsAccountIDTransactionsResponse:
        r"""List transactions by account
        Retrieve a list of all transactions for a specific account. The returned
        list is [paginated](#pagination) and can be scrolled by following the
        `next` and `prev` links where present. To narrow the results to a
        specific date range pass one or both of `filter[since]` and
        `filter[until]` in the query string. These filter parameters
        **should not** be used for pagination. Results are ordered newest first
        to oldest last.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountsAccountIDTransactionsRequest, base_url, '/accounts/{accountId}/transactions', request)
        
        query_params = utils.get_query_params(operations.GetAccountsAccountIDTransactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountsAccountIDTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTransactionsResponse])
                res.list_transactions_response = out

        return res

    def get_transactions(self, request: operations.GetTransactionsRequest) -> operations.GetTransactionsResponse:
        r"""List transactions
        Retrieve a list of all transactions across all accounts for the currently
        authenticated user. The returned list is [paginated](#pagination) and can
        be scrolled by following the `next` and `prev` links where present. To
        narrow the results to a specific date range pass one or both of
        `filter[since]` and `filter[until]` in the query string. These filter
        parameters **should not** be used for pagination. Results are ordered
        newest first to oldest last.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/transactions'
        
        query_params = utils.get_query_params(operations.GetTransactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTransactionsResponse])
                res.list_transactions_response = out

        return res

    def get_transactions_id_(self, request: operations.GetTransactionsIDRequest) -> operations.GetTransactionsIDResponse:
        r"""Retrieve transaction
        Retrieve a specific transaction by providing its unique identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionsIDRequest, base_url, '/transactions/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTransactionResponse])
                res.get_transaction_response = out

        return res

    