/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Can be used multiple times.
 */
export enum GetSshKeysSortEnum {
  Id = "id",
  IdAsc = "id:asc",
  IdDesc = "id:desc",
  Name = "name",
  NameAsc = "name:asc",
  NameDesc = "name:desc",
}

export class GetSshKeysRequest extends SpeakeasyBase {
  /**
   * Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fingerprint",
  })
  fingerprint?: string;

  /**
   * Can be used to filter resources by labels. The response will only contain resources matching the label selector.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=label_selector",
  })
  labelSelector?: string;

  /**
   * Can be used to filter resources by their name. The response will only contain the resources matching the specified name
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Can be used multiple times.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetSshKeysSortEnum;
}

export class GetSshKeys200ApplicationJSONMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class GetSshKeys200ApplicationJSONMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetSshKeys200ApplicationJSONMetaPagination)
  pagination: GetSshKeys200ApplicationJSONMetaPagination;
}

export class GetSshKeys200ApplicationJSONSshKeys extends SpeakeasyBase {
  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Fingerprint of public key
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Public key
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public_key" })
  publicKey: string;
}

/**
 * The `ssh_keys` key in the reply contains an array of SSH key objects with this structure
 */
export class GetSshKeys200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetSshKeys200ApplicationJSONMeta)
  meta?: GetSshKeys200ApplicationJSONMeta;

  @SpeakeasyMetadata({ elemType: GetSshKeys200ApplicationJSONSshKeys })
  @Expose({ name: "ssh_keys" })
  @Type(() => GetSshKeys200ApplicationJSONSshKeys)
  sshKeys: GetSshKeys200ApplicationJSONSshKeys[];
}

export class GetSshKeysResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `ssh_keys` key in the reply contains an array of SSH key objects with this structure
   */
  @SpeakeasyMetadata()
  getSshKeys200ApplicationJSONObject?: GetSshKeys200ApplicationJSON;
}
