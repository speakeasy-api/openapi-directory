// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StrategyEnum - An instruction specifying what steps the new Identity Verification attempt should require the user to complete:
//
// `reset` - Restart the user at the beginning of the session, regardless of whether they successfully completed part of their previous session.
//
// `incomplete` - Start the new session at the step that the user failed in the previous session, skipping steps that have already been successfully completed.
//
// `infer` - If the most recent Identity Verification attempt associated with the given `client_user_id` has a status of `failed` or `expired`, retry using the `incomplete` strategy. Otherwise, use the `reset` strategy.
//
// `custom` - Start the new session with a custom configuration, specified by the value of the `steps` field
//
// Note:
//
// The `incomplete` strategy cannot be applied if the session's failing step is `screening` or `risk_check`.
//
// The `infer` strategy cannot be applied if the session's status is still `active`
type StrategyEnum string

const (
	StrategyEnumReset      StrategyEnum = "reset"
	StrategyEnumIncomplete StrategyEnum = "incomplete"
	StrategyEnumInfer      StrategyEnum = "infer"
	StrategyEnumCustom     StrategyEnum = "custom"
)

func (e StrategyEnum) ToPointer() *StrategyEnum {
	return &e
}

func (e *StrategyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reset":
		fallthrough
	case "incomplete":
		fallthrough
	case "infer":
		fallthrough
	case "custom":
		*e = StrategyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StrategyEnum: %v", v)
	}
}
