/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConfigManagementSyncError } from "./configmanagementsyncerror";
import { Expose, Type } from "class-transformer";

/**
 * Sync status code
 */
export enum ConfigManagementSyncStateCodeEnum {
  SyncCodeUnspecified = "SYNC_CODE_UNSPECIFIED",
  Synced = "SYNCED",
  Pending = "PENDING",
  Error = "ERROR",
  NotConfigured = "NOT_CONFIGURED",
  NotInstalled = "NOT_INSTALLED",
  Unauthorized = "UNAUTHORIZED",
  Unreachable = "UNREACHABLE",
}

/**
 * State indicating an ACM's progress syncing configurations to a cluster
 */
export class ConfigManagementSyncState extends SpeakeasyBase {
  /**
   * Sync status code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: ConfigManagementSyncStateCodeEnum;

  /**
   * A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.
   */
  @SpeakeasyMetadata({ elemType: ConfigManagementSyncError })
  @Expose({ name: "errors" })
  @Type(() => ConfigManagementSyncError)
  errors?: ConfigManagementSyncError[];

  /**
   * Token indicating the state of the importer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "importToken" })
  importToken?: string;

  /**
   * Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastSync" })
  lastSync?: string;

  /**
   * Timestamp type of when ACM last successfully synced the repo
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastSyncTime" })
  lastSyncTime?: string;

  /**
   * Token indicating the state of the repo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceToken" })
  sourceToken?: string;

  /**
   * Token indicating the state of the syncer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncToken" })
  syncToken?: string;
}
