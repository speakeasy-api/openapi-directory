/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SpeakerDiarizationConfigInput - Config to enable speaker diarization.
 */
public class SpeakerDiarizationConfigInput {
    /**
     * If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_label provided in the WordInfo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableSpeakerDiarization")
    public Boolean enableSpeakerDiarization;

    public SpeakerDiarizationConfigInput withEnableSpeakerDiarization(Boolean enableSpeakerDiarization) {
        this.enableSpeakerDiarization = enableSpeakerDiarization;
        return this;
    }
    
    /**
     * Maximum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 6.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxSpeakerCount")
    public Integer maxSpeakerCount;

    public SpeakerDiarizationConfigInput withMaxSpeakerCount(Integer maxSpeakerCount) {
        this.maxSpeakerCount = maxSpeakerCount;
        return this;
    }
    
    /**
     * Minimum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minSpeakerCount")
    public Integer minSpeakerCount;

    public SpeakerDiarizationConfigInput withMinSpeakerCount(Integer minSpeakerCount) {
        this.minSpeakerCount = minSpeakerCount;
        return this;
    }
    
    public SpeakerDiarizationConfigInput(){}
}
