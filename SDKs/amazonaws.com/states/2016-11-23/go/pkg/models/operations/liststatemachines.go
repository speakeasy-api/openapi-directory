// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListStateMachinesQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListStateMachinesXAmzTargetEnum
type ListStateMachinesXAmzTargetEnum string

const (
	ListStateMachinesXAmzTargetEnumAwsStepFunctionsListStateMachines ListStateMachinesXAmzTargetEnum = "AWSStepFunctions.ListStateMachines"
)

func (e *ListStateMachinesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSStepFunctions.ListStateMachines":
		*e = ListStateMachinesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListStateMachinesXAmzTargetEnum: %s", s)
	}
}

type ListStateMachinesHeaders struct {
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListStateMachinesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListStateMachinesRequest struct {
	QueryParams ListStateMachinesQueryParams
	Headers     ListStateMachinesHeaders
	Request     shared.ListStateMachinesInput `request:"mediaType=application/json"`
}

type ListStateMachinesResponse struct {
	ContentType string
	// InvalidToken
	InvalidToken interface{}
	// Success
	ListStateMachinesOutput *shared.ListStateMachinesOutput
	StatusCode              int
	RawResponse             *http.Response
}
