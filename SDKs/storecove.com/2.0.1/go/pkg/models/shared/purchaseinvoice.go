// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PurchaseInvoicePurchaseInvoiceDeliveryLocation - The location the goods/services were delivered to.
type PurchaseInvoicePurchaseInvoiceDeliveryLocation struct {
	// Address city.
	City *string `json:"city,omitempty"`
	// Address country.
	Country *string `json:"country,omitempty"`
	// Address county.
	County *string `json:"county,omitempty"`
	// Department name.
	Department *string `json:"department,omitempty"`
	// The id of the location.
	ID *string `json:"id,omitempty"`
	// Address line 1.
	Line1 *string `json:"line1,omitempty"`
	// Address line 2.
	Line2 *string `json:"line2,omitempty"`
	// The scheme id for the id of the location.
	SchemeID *string `json:"scheme_id,omitempty"`
	// Address zip code
	Zip *string `json:"zip,omitempty"`
}

// PurchaseInvoicePurchaseInvoiceDeliveryPurchaseInvoiceParty - The party the goods/services were delivered to.
type PurchaseInvoicePurchaseInvoiceDeliveryPurchaseInvoiceParty struct {
	// The name of the deliveyr party.
	Name *string `json:"name,omitempty"`
}

// PurchaseInvoicePurchaseInvoiceDelivery - The details of the delivery associated with this invoice.
type PurchaseInvoicePurchaseInvoiceDelivery struct {
	// The actual delivery date.
	ActualDate *string `json:"actual_date,omitempty"`
	// The location the goods/services were delivered to.
	Location *PurchaseInvoicePurchaseInvoiceDeliveryLocation `json:"location,omitempty"`
	// The party the goods/services were delivered to.
	Party *PurchaseInvoicePurchaseInvoiceDeliveryPurchaseInvoiceParty `json:"party,omitempty"`
}

// PurchaseInvoiceInvoiceTypeEnum - The type of invoice.
type PurchaseInvoiceInvoiceTypeEnum string

const (
	PurchaseInvoiceInvoiceTypeEnumInvoice           PurchaseInvoiceInvoiceTypeEnum = "invoice"
	PurchaseInvoiceInvoiceTypeEnumCreditnote        PurchaseInvoiceInvoiceTypeEnum = "creditnote"
	PurchaseInvoiceInvoiceTypeEnumCorrectioninvoice PurchaseInvoiceInvoiceTypeEnum = "correctioninvoice"
)

func (e *PurchaseInvoiceInvoiceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invoice":
		fallthrough
	case "creditnote":
		fallthrough
	case "correctioninvoice":
		*e = PurchaseInvoiceInvoiceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseInvoiceInvoiceTypeEnum: %s", s)
	}
}

// PurchaseInvoicePaymentMeansDEPRECATED - DEPRECATED - Use the new payment_means_array array.
type PurchaseInvoicePaymentMeansDEPRECATED struct {
	// The IBAN to which to transfer.
	Iban *string `json:"iban,omitempty"`
	// An id to mention in the transfer.
	ID *string `json:"id,omitempty"`
}

// PurchaseInvoiceInvoiceSourceEnum - The source the invoice was received from.
type PurchaseInvoiceInvoiceSourceEnum string

const (
	PurchaseInvoiceInvoiceSourceEnumPeppol   PurchaseInvoiceInvoiceSourceEnum = "peppol"
	PurchaseInvoiceInvoiceSourceEnumScript   PurchaseInvoiceInvoiceSourceEnum = "script"
	PurchaseInvoiceInvoiceSourceEnumSupplier PurchaseInvoiceInvoiceSourceEnum = "supplier"
	PurchaseInvoiceInvoiceSourceEnumEmail    PurchaseInvoiceInvoiceSourceEnum = "email"
)

func (e *PurchaseInvoiceInvoiceSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "peppol":
		fallthrough
	case "script":
		fallthrough
	case "supplier":
		fallthrough
	case "email":
		*e = PurchaseInvoiceInvoiceSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseInvoiceInvoiceSourceEnum: %s", s)
	}
}

// PurchaseInvoice - Success
type PurchaseInvoice struct {
	Accounting *PurchaseInvoiceAccountingDetails `json:"accounting,omitempty"`
	// The accounting cost code.
	AccountingCost *string `json:"accounting_cost,omitempty"`
	// DEPRECATED - Use the allowance_charges array.
	AllowanceCharge  *float64                         `json:"allowance_charge,omitempty"`
	AllowanceCharges []PurchaseInvoiceAllowanceCharge `json:"allowance_charges,omitempty"`
	// The total invoice amount payable, including tax. This is equal to the sum of the invoice_lines (amount_excluding_tax + tax.amount)
	AmountIncludingTax *float64 `json:"amount_including_tax,omitempty"`
	// DEPRECATED - Use amount_including_tax.
	AmountIncludingVat *float64                    `json:"amount_including_vat,omitempty"`
	Attachments        []PurchaseInvoiceAttachment `json:"attachments,omitempty"`
	// Reference to the previous invoice this invoice relates to.
	BillingReference *string `json:"billing_reference,omitempty"`
	// Reference provided by the buyer. Used for routing.
	BuyerReference *string `json:"buyer_reference,omitempty"`
	// Reference to the contract.
	ContractDocumentReference *string `json:"contract_document_reference,omitempty"`
	// The details of the delivery associated with this invoice.
	Delivery *PurchaseInvoicePurchaseInvoiceDelivery `json:"delivery,omitempty"`
	// DEPRECTATED. Use the new atatchments array.
	Document *string `json:"document,omitempty"`
	// The ISO 4217 currency for the invoice.
	DocumentCurrencyCode *string `json:"document_currency_code,omitempty"`
	// The date the invoice must be payed by. Format "YYYY-MM-DD".
	DueDate *string `json:"due_date,omitempty"`
	// Used for accountants. The id you specified for the organization.
	ExternalKey *string `json:"external_key,omitempty"`
	// Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.
	ExternalUserID *string `json:"external_user_id,omitempty"`
	// The GUID of the invoice
	GUID         *string                      `json:"guid,omitempty"`
	InvoiceLines []PurchaseInvoiceInvoiceLine `json:"invoice_lines,omitempty"`
	// The invoicenumber.
	InvoiceNumber *string `json:"invoice_number,omitempty"`
	// The type of invoice.
	InvoiceType *PurchaseInvoiceInvoiceTypeEnum `json:"invoice_type,omitempty"`
	// The date the invoice was issued. Format "YYYY-MM-DD".
	IssueDate *string `json:"issue_date,omitempty"`
	// The id of the LegalEntity the invoice was received for.
	LegalEntityID *int64 `json:"legal_entity_id,omitempty"`
	// The invoice level note.
	Note *string `json:"note,omitempty"`
	// Reference to the order. Used for matching the invoice to an order.
	OrderReference *string `json:"order_reference,omitempty"`
	// The total invoice amount payable including tax. This is equal to amount_including_tax + allowance_charge + payable_rounding_amount. This property is redundant and provided only to make invoice processing easier. You can also choose to only store this property, instead of the underlying fields.
	PayableAmount *float64 `json:"payable_amount,omitempty"`
	// The difference between the invoice total and the sum of the invoice lines.
	PayableRoundingAmount *float64 `json:"payable_rounding_amount,omitempty"`
	// DEPRECATED - Use the new payment_means_array array.
	PaymentMeans *PurchaseInvoicePaymentMeansDEPRECATED `json:"payment_means,omitempty"`
	// The different payment means that can be used to pay the invoice.
	PaymentMeansArray []PurchaseInvoicePaymentMeans `json:"payment_means_array,omitempty"`
	// DEPRECATED - use the payment_id property in the payment_means_array
	PaymentMeansPaymentID *string `json:"payment_means_payment_id,omitempty"`
	// A textual description of the payment terms.
	PaymentTermsNote *string `json:"payment_terms_note,omitempty"`
	// The end date of the period this invoice relates to. Format "YYYY-MM-DD".
	PeriodEnd *string `json:"period_end,omitempty"`
	// The start date of the period this invoice relates to. Format "YYYY-MM-DD".
	PeriodStart *string `json:"period_start,omitempty"`
	// The amount already paid.
	PrepaidAmount *float64 `json:"prepaid_amount,omitempty"`
	// Reference to the project.
	ProjectReference *string                `json:"project_reference,omitempty"`
	Sender           *PurchaseInvoiceSender `json:"sender,omitempty"`
	// The source the invoice was received from.
	Source *PurchaseInvoiceInvoiceSourceEnum `json:"source,omitempty"`
	// Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender..
	SystemGeneratedPrimaryImage *bool `json:"system_generated_primary_image,omitempty"`
	// The date the invoice was issued for tax purposes. In most countries MUST match the issue_date. Format "YYYY-MM-DD".
	TaxPointDate *string                      `json:"tax_point_date,omitempty"`
	TaxSubtotals []PurchaseInvoiceTaxSubtotal `json:"tax_subtotals,omitempty"`
	// The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.
	TaxSystem *string `json:"tax_system,omitempty"`
	// DEPRECATED - This is now part of each invoice line.
	VatReverseCharge *bool `json:"vat_reverse_charge,omitempty"`
}
