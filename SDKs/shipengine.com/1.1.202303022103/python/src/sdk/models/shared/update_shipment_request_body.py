"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import advanced_shipment_options as shared_advanced_shipment_options
from ..shared import customs_item as shared_customs_item
from ..shared import order_source_name_enum as shared_order_source_name_enum
from ..shared import package as shared_package
from ..shared import shipment_item as shared_shipment_item
from ..shared import shipping_address as shared_shipping_address
from ..shared import tax_identifier as shared_tax_identifier
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class UpdateShipmentRequestBodyDeliveryConfirmationEnum(str, Enum):
    r"""The possible delivery confirmation values"""
    NONE = 'none'
    DELIVERY = 'delivery'
    SIGNATURE = 'signature'
    ADULT_SIGNATURE = 'adult_signature'
    DIRECT_SIGNATURE = 'direct_signature'
    DELIVERY_MAILED = 'delivery_mailed'
    VERBAL_CONFIRMATION = 'verbal_confirmation'

class UpdateShipmentRequestBodyInternationalShipmentOptionsPackageContentsEnum(str, Enum):
    r"""The possible package contents values"""
    MERCHANDISE = 'merchandise'
    DOCUMENTS = 'documents'
    GIFT = 'gift'
    RETURNED_GOODS = 'returned_goods'
    SAMPLE = 'sample'

class UpdateShipmentRequestBodyInternationalShipmentOptionsNonDeliveryEnum(str, Enum):
    r"""The possible non delivery values"""
    RETURN_TO_SENDER = 'return_to_sender'
    TREAT_AS_ABANDONED = 'treat_as_abandoned'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateShipmentRequestBodyInternationalShipmentOptionsInput:
    r"""Options for international shipments, such as customs declarations."""
    
    contents: UpdateShipmentRequestBodyInternationalShipmentOptionsPackageContentsEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents') }})
    r"""The type of contents in this shipment.  This may impact import duties or customs treatment."""  
    non_delivery: UpdateShipmentRequestBodyInternationalShipmentOptionsNonDeliveryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('non_delivery') }})
    r"""Indicates what to do if a package is unable to be delivered."""  
    customs_items: Optional[list[shared_customs_item.CustomsItemInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customs_items'), 'exclude': lambda f: f is None }})
    r"""Customs declarations for each item in the shipment."""  
    
class UpdateShipmentRequestBodyInsuranceProviderEnum(str, Enum):
    r"""The possible insurance provider values"""
    NONE = 'none'
    SHIPSURANCE = 'shipsurance'
    CARRIER = 'carrier'
    THIRD_PARTY = 'third_party'

class UpdateShipmentRequestBodyOriginTypeEnum(str, Enum):
    r"""Indicates if the package will be picked up or dropped off by the carrier"""
    PICKUP = 'pickup'
    DROP_OFF = 'drop_off'

class UpdateShipmentRequestBodyValidateAddressEnum(str, Enum):
    r"""The possible validate address values"""
    NO_VALIDATION = 'no_validation'
    VALIDATE_ONLY = 'validate_only'
    VALIDATE_AND_CLEAN = 'validate_and_clean'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateShipmentRequestBodyInput:
    r"""The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight."""
    
    ship_from: shared_shipping_address.ShippingAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ship_from') }})
    r"""The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time."""  
    ship_to: shared_shipping_address.ShippingAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ship_to') }})
    r"""The recipient's mailing address"""  
    advanced_options: Optional[shared_advanced_shipment_options.AdvancedShipmentOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advanced_options'), 'exclude': lambda f: f is None }})
    r"""Advanced shipment options.  These are entirely optional."""  
    carrier_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_id'), 'exclude': lambda f: f is None }})
    r"""The carrier account that is billed for the shipping charges"""  
    confirmation: Optional[UpdateShipmentRequestBodyDeliveryConfirmationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmation'), 'exclude': lambda f: f is None }})
    r"""The type of delivery confirmation that is required for this shipment."""  
    customs: Optional[UpdateShipmentRequestBodyInternationalShipmentOptionsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customs'), 'exclude': lambda f: f is None }})
    r"""Customs information.  This is usually only needed for international shipments."""  
    external_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_order_id'), 'exclude': lambda f: f is None }})
    r"""ID that the Order Source assigned"""  
    external_shipment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_shipment_id'), 'exclude': lambda f: f is None }})
    r"""A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.
    
    > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated.
    """  
    insurance_provider: Optional[UpdateShipmentRequestBodyInsuranceProviderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_provider'), 'exclude': lambda f: f is None }})
    r"""The insurance provider to use for any insured packages in the shipment."""  
    items: Optional[list[shared_shipment_item.ShipmentItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""Describe the packages included in this shipment as related to potential metadata that was imported from
    external order sources
    """  
    order_source_code: Optional[shared_order_source_name_enum.OrderSourceNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_source_code'), 'exclude': lambda f: f is None }})  
    origin_type: Optional[UpdateShipmentRequestBodyOriginTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin_type'), 'exclude': lambda f: f is None }})
    r"""Indicates if the package will be picked up or dropped off by the carrier"""  
    packages: Optional[list[shared_package.PackageInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packages'), 'exclude': lambda f: f is None }})
    r"""The packages in the shipment.
    
    > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned.
    """  
    return_to: Optional[shared_shipping_address.ShippingAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_to'), 'exclude': lambda f: f is None }})
    r"""The return address for this shipment.  Defaults to the `ship_from` address."""  
    service_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_code'), 'exclude': lambda f: f is None }})
    r"""The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc."""  
    ship_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ship_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead."""  
    shipment_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipment_number'), 'exclude': lambda f: f is None }})
    r"""A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.
    
    > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated.
    """  
    tax_identifiers: Optional[list[shared_tax_identifier.TaxIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_identifiers'), 'exclude': lambda f: f is None }})  
    validate_address: Optional[UpdateShipmentRequestBodyValidateAddressEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validate_address'), 'exclude': lambda f: f is None }})  
    warehouse_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouse_id'), 'exclude': lambda f: f is None }})
    r"""The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified."""  
    