// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// DestinyDefinitionsDestinyInventoryItemDefinitionAction - If an item can have an action performed on it (like "Dismantle"), it will be defined here if you care.
type DestinyDefinitionsDestinyInventoryItemDefinitionAction struct {
	// The internal identifier for the action.
	ActionTypeLabel *string
	// If true, the entire stack is deleted when the action completes.
	ConsumeEntireStack *bool
	// If true, the item is deleted when the action completes.
	DeleteOnAction *bool
	// The content has this property, however it's not entirely clear how it is used.
	IsPositive *bool
	// The icon associated with the overlay screen for the action, if any.
	OverlayIcon *string
	// If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen's data itself.
	OverlayScreenName *string
	// If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.
	ProgressionRewards []DestinyDefinitionsDestinyProgressionRewardDefinition
	// The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.
	RequiredCooldownHash *int64
	// The number of seconds to delay before allowing this action to be performed again.
	RequiredCooldownSeconds *int
	// If the action requires other items to exist or be destroyed, this is the list of those items and requirements.
	RequiredItems []DestinyDefinitionsDestinyItemActionRequiredItemDefinition
	// Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.
	RequiredLocation *string
	// If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.
	UseOnAcquire *bool
	// Localized text describing the action being performed.
	VerbDescription *string
	// Localized text for the verb of the action being performed.
	VerbName *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionBackgroundColor - Represents a color whose RGBA values are all represented as values between 0 and 255.
type DestinyDefinitionsDestinyInventoryItemDefinitionBackgroundColor struct {
	Alpha *string
	Blue  *string
	Green *string
	Red   *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionCrafting - If an item can have an action performed on it (like "Dismantle"), it will be defined here if you care.
type DestinyDefinitionsDestinyInventoryItemDefinitionCrafting struct {
	// A reference to the base material requirements for crafting with this recipe.
	BaseMaterialRequirements *int64
	// A list of 'bonus' socket plugs that may be available if certain requirements are met.
	BonusPlugs               []DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition
	FailedRequirementStrings []string
	// A reference to the item definition that is created when crafting with this 'recipe' item.
	OutputItemHash *int64
	// A list of socket type hashes that describes which sockets are required for crafting with this recipe.
	RequiredSocketTypeHashes []int64
}

// DestinyDefinitionsDestinyInventoryItemDefinitionEquippingBlock - Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
type DestinyDefinitionsDestinyInventoryItemDefinitionEquippingBlock struct {
	// Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.
	AmmoType *int
	// These are custom attributes on the equippability of the item.
	// For now, this can only be "equip on acquire", which would mean that the item will be automatically equipped as soon as you pick it up.
	Attributes *int
	// These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
	DisplayStrings []string
	// An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
	EquipmentSlotTypeHash *int64
	// If the item is part of a gearset, this is a reference to that gearset item.
	GearsetItemHash *int64
	// If defined, this is the label used to check if the item has other items of matching types already equipped.
	// For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).
	UniqueLabel *string
	// The hash of that unique label. Does not point to a specific definition.
	UniqueLabelHash *int64
}

// DestinyDefinitionsDestinyInventoryItemDefinitionGearset - If an item has a related gearset, this is the list of items in that set, and an unlock expression that evaluates to a number representing the progress toward gearset completion (a very rare use for unlock expressions!)
type DestinyDefinitionsDestinyInventoryItemDefinitionGearset struct {
	// The list of hashes for items in the gearset. Use them to look up DestinyInventoryItemDefinition entries for the items in the set.
	ItemList []int64
	// The maximum possible number of items that can be collected.
	TrackingValueMax *int
}

// DestinyDefinitionsDestinyInventoryItemDefinitionInventory - If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item's relationship with the inventory.
type DestinyDefinitionsDestinyInventoryItemDefinitionInventory struct {
	// The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this "bucketHash", but too many things refer to it now. Sigh.
	BucketTypeHash *int64
	// The tooltip message to show, if any, when the item expires.
	ExpirationTooltip *string
	// If the item expires while playing in an activity, we show a different message.
	ExpiredInActivityMessage *string
	// If the item expires in orbit, we show a... more different message. ("Consummate V's, consummate!")
	ExpiredInOrbitMessage *string
	// If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
	IsInstanceItem *bool
	// The maximum quantity of this item that can exist in a stack.
	MaxStackSize *int
	// A reference to the associated crafting 'recipe' item definition, if this item can be crafted.
	RecipeItemHash *int64
	// If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
	RecoveryBucketTypeHash *int64
	// If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.
	StackUniqueLabel                         *string
	SuppressExpirationWhenObjectivesComplete *bool
	// The enumeration matching the tier type of the item to known values, again for convenience sake.
	TierType *int
	// The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.
	TierTypeHash *int64
	// The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
	TierTypeName *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionMetrics - The metrics available for display and selection on an item.
type DestinyDefinitionsDestinyInventoryItemDefinitionMetrics struct {
	// Hash identifiers for any DestinyPresentationNodeDefinition entry that can be used to list available metrics. Any metric listed directly below these nodes, or in any of these nodes' children will be made available for selection.
	AvailableMetricCategoryNodeHashes []int64
}

// DestinyDefinitionsDestinyInventoryItemDefinitionObjectives - An item can have objectives on it. In practice, these are the exclusive purview of "Quest Step" items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.
// Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.
type DestinyDefinitionsDestinyInventoryItemDefinitionObjectives struct {
	// For every entry in objectiveHashes, there is a corresponding entry in this array at the same index. If the objective is meant to be associated with a specific DestinyActivityDefinition, there will be a valid hash at that index. Otherwise, it will be invalid (0).
	// Rendered somewhat obsolete by perObjectiveDisplayProperties, which currently has much the same information but may end up with more info in the future.
	DisplayActivityHashes []int64
	DisplayAsStatTracker  *bool
	// The localized string for narrative text related to this quest step, if any.
	Narrative *string
	// The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in the order that they should be rendered.
	ObjectiveHashes []int64
	// The localized string describing an action to be performed associated with the objectives, if any.
	ObjectiveVerbName *string
	// One entry per Objective on the item, it will have related display information.
	PerObjectiveDisplayProperties []DestinyDefinitionsDestinyObjectiveDisplayProperties
	// A hashed value for the questTypeIdentifier, because apparently I like to be redundant.
	QuestTypeHash *int64
	// The identifier for the type of quest being performed, if any. Not associated with any fixed definition, yet.
	QuestTypeIdentifier *string
	// The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.
	QuestlineItemHash *int64
	// If True, all objectives must be completed for the step to be completed. If False, any one objective can be completed for the step to be completed.
	RequireFullObjectiveCompletion *bool
}

// DestinyDefinitionsDestinyInventoryItemDefinitionPlugEnergyCapacity - Items can have Energy Capacity, and plugs can provide that capacity such as on a piece of Armor in Armor 2.0. This is how much "Energy" can be spent on activating plugs for this item.
type DestinyDefinitionsDestinyInventoryItemDefinitionPlugEnergyCapacity struct {
	// How much energy capacity this plug provides.
	CapacityValue *int
	// The Energy Type for this energy capacity, in enum form for easy use.
	EnergyType *int
	// Energy provided by a plug is always of a specific type - this is the hash identifier for the energy type for which it provides Capacity.
	EnergyTypeHash *int64
}

// DestinyDefinitionsDestinyInventoryItemDefinitionPlugEnergyCost - Some plugs cost Energy, which is a stat on the item that can be increased by other plugs (that, at least in Armor 2.0, have a "masterworks-like" mechanic for upgrading). If a plug has costs, the details of that cost are defined here.
type DestinyDefinitionsDestinyInventoryItemDefinitionPlugEnergyCost struct {
	// The Energy cost for inserting this plug.
	EnergyCost *int
	// The type of energy that this plug costs, in enum form.
	EnergyType *int
	// The type of energy that this plug costs, as a reference to the DestinyEnergyTypeDefinition of the energy type.
	EnergyTypeHash *int64
}

// DestinyDefinitionsDestinyInventoryItemDefinitionPlugParentItemOverride - Do you ever get the feeling that a system has become so overburdened by edge cases that it probably should have become some other system entirely? So do I!
// In totally unrelated news, Plugs can now override properties of their parent items. This is some of the relevant definition data for those overrides.
// If this is populated, it will have the override data to be applied when this plug is applied to an item.
type DestinyDefinitionsDestinyInventoryItemDefinitionPlugParentItemOverride struct {
	AdditionalEquipRequirementsDisplayStrings []string
	PipIcon                                   *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionPlug - If an item is a Plug, its DestinyInventoryItemDefinition.plug property will be populated with an instance of one of these bad boys.
// This gives information about when it can be inserted, what the plug's category is (and thus whether it is compatible with a socket... see DestinySocketTypeDefinition for information about Plug Categories and socket compatibility), whether it is enabled and other Plug info.
type DestinyDefinitionsDestinyInventoryItemDefinitionPlug struct {
	// The alternate plug of the plug: only applies when the item is in states that only the server can know about and control, unfortunately. See AlternateUiPlugLabel for the related label info.
	AlternatePlugStyle *int
	// If the plug meets certain state requirements, it may have an alternative label applied to it. This is the alternative label that will be applied in such a situation.
	AlternateUIPlugLabel *string
	// It's not enough for the plug to be inserted. It has to be enabled as well. For it to be enabled, it may require materials. This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements, if there is one.
	EnabledMaterialRequirementHash *int64
	// The rules around whether the plug, once inserted, is enabled and providing its benefits.
	// The live data DestinyItemPlugComponent.enableFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.
	EnabledRules []DestinyDefinitionsItemsDestinyPlugRuleDefinition
	// IF not null, this plug provides Energy capacity to the item in which it is socketed. In Armor 2.0 for example, is implemented in a similar way to Masterworks, where visually it's a single area of the UI being clicked on to "Upgrade" to higher energy levels, but it's actually socketing new plugs.
	EnergyCapacity *DestinyDefinitionsDestinyInventoryItemDefinitionPlugEnergyCapacity
	// IF not null, this plug has an energy cost. This contains the details of that cost.
	EnergyCost *DestinyDefinitionsDestinyInventoryItemDefinitionPlugEnergyCost
	// If inserting this plug requires materials, this is the hash identifier for looking up the DestinyMaterialRequirementSetDefinition for those requirements.
	InsertionMaterialRequirementHash *int64
	// The rules around when this plug can be inserted into a socket, aside from the socket's individual restrictions.
	// The live data DestinyItemPlugComponent.insertFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.
	InsertionRules []DestinyDefinitionsItemsDestinyPlugRuleDefinition
	// If TRUE, this plug is used for UI display purposes only, and doesn't have any interesting effects of its own.
	IsDummyPlug *bool
	// If you successfully socket the item, this will determine whether or not you get "refunded" on the plug.
	OnActionRecreateSelf *bool
	// Do you ever get the feeling that a system has become so overburdened by edge cases that it probably should have become some other system entirely? So do I!
	// In totally unrelated news, Plugs can now override properties of their parent items. This is some of the relevant definition data for those overrides.
	// If this is populated, it will have the override data to be applied when this plug is applied to an item.
	ParentItemOverride *DestinyDefinitionsDestinyInventoryItemDefinitionPlugParentItemOverride
	// Indicates the rules about when this plug can be used. See the PlugAvailabilityMode enumeration for more information!
	PlugAvailability *int
	// The hash for the plugCategoryIdentifier. You can use this instead if you wish: I put both in the definition for debugging purposes.
	PlugCategoryHash *int64
	// The string identifier for the plug's category. Use the socket's DestinySocketTypeDefinition.plugWhitelist to determine whether this plug can be inserted into the socket.
	PlugCategoryIdentifier *string
	PlugStyle              *int
	// In the game, if you're inspecting a plug item directly, this will be the item shown with the plug attached. Look up the DestinyInventoryItemDefinition for this hash for the item.
	PreviewItemOverrideHash *int64
	// Plugs can have arbitrary, UI-defined identifiers that the UI designers use to determine the style applied to plugs. Unfortunately, we have neither a definitive list of these labels nor advance warning of when new labels might be applied or how that relates to how they get rendered. If you want to, you can refer to known labels to change your own styles: but know that new ones can be created arbitrarily, and we have no way of associating the labels with any specific UI style guidance... you'll have to piece that together on your end. Or do what we do, and just show plugs more generically, without specialized styles.
	UIPlugLabel *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionPreview - Items like Sacks or Boxes can have items that it shows in-game when you view details that represent the items you can obtain if you use or acquire the item.
// This defines those categories, and gives some insights into that data's source.
type DestinyDefinitionsDestinyInventoryItemDefinitionPreview struct {
	// If this item should show you Artifact information when you preview it, this is the hash identifier of the DestinyArtifactDefinition for the artifact whose data should be shown.
	ArtifactHash *int64
	// This is a list of the items being previewed, categorized in the same way as they are in the preview UI.
	DerivedItemCategories []DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition
	// If the preview has an associated action (like "Open"), this will be the localized string for that action.
	PreviewActionString *string
	// If the preview data is derived from a fake "Preview" Vendor, this will be the hash identifier for the DestinyVendorDefinition of that fake vendor.
	PreviewVendorHash *int64
	// A string that the game UI uses as a hint for which detail screen to show for the item. You, too, can leverage this for your own custom screen detail views. Note, however, that these are arbitrarily defined by designers: there's no guarantees of a fixed, known number of these - so fall back to something reasonable if you don't recognize it.
	ScreenStyle *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionQuality - An item's "Quality" determines its calculated stats. The Level at which the item spawns is combined with its "qualityLevel" along with some additional calculations to determine the value of those stats.
// In Destiny 2, most items don't have default item levels and quality, making this property less useful: these apparently are almost always determined by the complex mechanisms of the Reward system rather than statically. They are still provided here in case they are still useful for people. This also contains some information about Infusion.
type DestinyDefinitionsDestinyInventoryItemDefinitionQuality struct {
	// The latest version available for this item.
	CurrentVersion *int64
	// Icon overlays to denote the item version and power cap status.
	DisplayVersionWatermarkIcons []string
	// The hash identifier for the infusion. It does not map to a Definition entity.
	// DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
	InfusionCategoryHash *int64
	// If any one of these hashes matches any value in another item's infusionCategoryHashes, the two can infuse with each other.
	InfusionCategoryHashes []int64
	// The string identifier for this item's "infusability", if any.
	// Items that match the same infusionCategoryName are allowed to infuse with each other.
	// DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
	InfusionCategoryName *string
	// The "base" defined level of an item. This is a list because, in theory, each Expansion could define its own base level for an item.
	// In practice, not only was that never done in Destiny 1, but now this isn't even populated at all. When it's not populated, the level at which it spawns has to be inferred by Reward information, of which BNet receives an imperfect view and will only be reliable on instanced data as a result.
	ItemLevels []int
	// An item can refer to pre-set level requirements. They are defined in DestinyProgressionLevelRequirementDefinition, and you can use this hash to find the appropriate definition.
	ProgressionLevelRequirementHash *int64
	// qualityLevel is used in combination with the item's level to calculate stats like Attack and Defense. It plays a role in that calculation, but not nearly as large as itemLevel does.
	QualityLevel *int
	// The list of versions available for this item.
	Versions []DestinyDefinitionsDestinyItemVersionDefinition
}

// DestinyDefinitionsDestinyInventoryItemDefinitionSack - Some items are "sacks" - they can be "opened" to produce other items. This is information related to its sack status, mostly UI strings. Engrams are an example of items that are considered to be "Sacks".
type DestinyDefinitionsDestinyInventoryItemDefinitionSack struct {
	// A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info.
	DetailAction *string
	// The localized name of the action being performed when you open the sack.
	OpenAction      *string
	OpenOnAcquire   *bool
	SelectItemCount *int
	VendorSackType  *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionSetData - Primarily for Quests, this is the definition of properties related to the item if it is a quest and its various quest steps.
type DestinyDefinitionsDestinyInventoryItemDefinitionSetData struct {
	// A collection of hashes of set items, for items such as Quest Metadata items that possess this data.
	ItemList []DestinyDefinitionsDestinyItemSetBlockEntryDefinition
	// The description of the quest line that this quest step is a part of.
	QuestLineDescription *string
	// The name of the quest line that this quest step is a part of.
	QuestLineName *string
	// An additional summary of this step in the quest line.
	QuestStepSummary *string
	// If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest.
	RequireOrderedSetItemAdd *bool
	// If true, the UI should treat this quest as "featured"
	SetIsFeatured *bool
	// A string identifier we can use to attempt to identify the category of the Quest.
	SetType *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionSockets - If defined, the item has at least one socket.
type DestinyDefinitionsDestinyInventoryItemDefinitionSockets struct {
	// This was supposed to be a string that would give per-item details about sockets. In practice, it turns out that all this ever has is the localized word "details". ... that's lame, but perhaps it will become something cool in the future.
	Detail *string
	// Each intrinsic (or immutable/permanent) socket on an item is defined here, along with the plug that is permanently affixed to the socket.
	IntrinsicSockets []DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition
	// A convenience property, that refers to the sockets in the "sockets" property, pre-grouped by category and ordered in the manner that they should be grouped in the UI. You could form this yourself with the existing data, but why would you want to? Enjoy life man.
	SocketCategories []DestinyDefinitionsDestinyItemSocketCategoryDefinition
	// Each non-intrinsic (or mutable) socket on an item is defined here. Check inside for more info.
	SocketEntries []DestinyDefinitionsDestinyItemSocketEntryDefinition
}

// DestinyDefinitionsDestinyInventoryItemDefinitionSourceData - Data about an item's "sources": ways that the item can be obtained.
type DestinyDefinitionsDestinyInventoryItemDefinitionSourceData struct {
	// If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.
	Exclusive *int
	// The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).
	SourceHashes []int64
	// A collection of details about the stats that were computed for the ways we found that the item could be spawned.
	Sources []DestinyDefinitionsSourcesDestinyItemSourceDefinition
	// A denormalized reference back to vendors that potentially sell this item.
	VendorSources []DestinyDefinitionsDestinyItemVendorSourceReference
}

// DestinyDefinitionsDestinyInventoryItemDefinitionStats - Information about the item's calculated stats, with as much data as we can find for the stats without having an actual instance of the item.
// Note that this means the entire concept of providing these stats is fundamentally insufficient: we cannot predict with 100% accuracy the conditions under which an item can spawn, so we use various heuristics to attempt to simulate the conditions as accurately as possible. Actual stats for items in-game can and will vary, but these should at least be useful base points for comparison and display.
// It is also worth noting that some stats, like Magazine size, have further calculations performed on them by scripts in-game and on the game servers that BNet does not have access to. We cannot know how those stats are further transformed, and thus some stats will be inaccurate even on instances of items in BNet vs. how they appear in-game. This is a known limitation of our item statistics, without any planned fix.
type DestinyDefinitionsDestinyInventoryItemDefinitionStats struct {
	// If true, the game won't show the "primary" stat on this item when you inspect it.
	// NOTE: This is being manually mapped, because I happen to want it in a block that isn't going to directly create this derivative block.
	DisablePrimaryStatDisplay *bool
	// A quick and lazy way to determine whether any stat other than the "primary" stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they're not part of the "Stat Group" and thus we wouldn't display them in our UI. If this is False, then we're not going to display any of these stats other than the primary one.
	HasDisplayableStats *bool
	// This stat is determined to be the "primary" stat, and can be looked up in the stats or any other stat collection related to the item.
	// Use this hash to look up the stat's value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.
	PrimaryBaseStatHash *int64
	// If the item's stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.
	// If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don't have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.
	StatGroupHash *int64
	// If you are looking for precomputed values for the stats on a weapon, this is where they are stored. Technically these are the "Display" stat values. Please see DestinyStatsDefinition for what Display Stat Values means, it's a very long story... but essentially these are the closest values BNet can get to the item stats that you see in-game.
	// These stats are keyed by the DestinyStatDefinition's hash identifier for the stat that's found on the item.
	Stats map[string]DestinyDefinitionsDestinyInventoryItemStatDefinition
}

// DestinyDefinitionsDestinyInventoryItemDefinitionSummary - This appears to be information used when rendering rewards. We don't currently use it on BNet.
type DestinyDefinitionsDestinyInventoryItemDefinitionSummary struct {
	// Apparently when rendering an item in a reward, this should be used as a sort priority. We're not doing it presently.
	SortPriority *int
}

// DestinyDefinitionsDestinyInventoryItemDefinitionTalentGrid - This defines information that can only come from a talent grid on an item. Items mostly have negligible talent grid data these days, but instanced items still retain grids as a source for some of this common information.
// Builds/Subclasses are the only items left that still have talent grids with meaningful Nodes.
type DestinyDefinitionsDestinyInventoryItemDefinitionTalentGrid struct {
	// A shortcut string identifier for the "build" in question, if this talent grid has an associated build. Doesn't map to anything we can expose at the moment.
	BuildName *string
	// If the talent grid implies a damage type, this is the enum value for that damage type.
	HudDamageType *int
	// If the talent grid has a special icon that's shown in the game UI (like builds, funny that), this is the identifier for that icon. Sadly, we don't actually get that icon right now. I'll be looking to replace this with a path to the actual icon itself.
	HudIcon *string
	// This is meant to be a subtitle for looking at the talent grid. In practice, somewhat frustratingly, this always merely says the localized word for "Details". Great. Maybe it'll have more if talent grids ever get used for more than builds and subclasses again.
	ItemDetailString *string
	// The hash identifier of the DestinyTalentGridDefinition attached to this item.
	TalentGridHash *int64
}

// DestinyDefinitionsDestinyInventoryItemDefinitionTranslationBlock - This Block defines the rendering data associated with the item, if any.
type DestinyDefinitionsDestinyInventoryItemDefinitionTranslationBlock struct {
	Arrangements            []DestinyDefinitionsDestinyGearArtArrangementReference
	CustomDyes              []DestinyDyeReference
	DefaultDyes             []DestinyDyeReference
	HasGeometry             *bool
	LockedDyes              []DestinyDyeReference
	WeaponPatternHash       *int64
	WeaponPatternIdentifier *string
}

// DestinyDefinitionsDestinyInventoryItemDefinitionValue - This defines an item's "Value". Unfortunately, this appears to be used in different ways depending on the way that the item itself is used.
// For items being sold at a Vendor, this is the default "sale price" of the item. These days, the vendor itself almost always sets the price, but it still possible for the price to fall back to this value. For quests, it is a preview of rewards you can gain by completing the quest. For dummy items, if the itemValue refers to an Emblem, it is the emblem that should be shown as the reward. (jeez louise)
// It will likely be used in a number of other ways in the future, it appears to be a bucket where they put arbitrary items and quantities into the item.
type DestinyDefinitionsDestinyInventoryItemDefinitionValue struct {
	// References to the items that make up this item's "value", and the quantity.
	ItemValue []DestinyDestinyItemQuantity
	// If there's a localized text description of the value provided, this will be said description.
	ValueDescription *string
}

// DestinyDefinitionsDestinyInventoryItemDefinition - So much of what you see in Destiny is actually an Item used in a new and creative way. This is the definition for Items in Destiny, which started off as just entities that could exist in your Inventory but ended up being the backing data for so much more: quests, reward previews, slots, and subclasses.
// In practice, you will want to associate this data with "live" item data from a Bungie.Net Platform call: these definitions describe the item in generic, non-instanced terms: but an actual instance of an item can vary widely from these generic definitions.
type DestinyDefinitionsDestinyInventoryItemDefinition struct {
	// If the item can be "used", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is "dismantle". Shocker)
	Action *DestinyDefinitionsDestinyInventoryItemDefinitionAction
	// BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.
	AllowActions *bool
	// If any animations were extracted from game content for this item, these will be the definitions of those animations.
	Animations []DestinyDefinitionsAnimationsDestinyAnimationReference
	// Sometimes, an item will have a background color. Most notably this occurs with Emblems, who use the Background Color for small character nameplates such as the "friends" view you see in-game. There are almost certainly other items that have background color as well, though I have not bothered to investigate what items have it nor what purposes they serve: use it as you will.
	BackgroundColor *DestinyDefinitionsDestinyInventoryItemDefinitionBackgroundColor
	// Some weapons and plugs can have a "Breaker Type": a special ability that works sort of like damage type vulnerabilities. This is (almost?) always set on items by plugs.
	BreakerType *int
	// Since we also have a breaker type definition, this is the hash for that breaker type for your convenience. Whether you use the enum or hash and look up the definition depends on what's cleanest for your code.
	BreakerTypeHash *int64
	// We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.
	// If you see a mis-classed item, please inform the developers in the Bungie API forum.
	ClassType *int
	// If this item has a collectible related to it, this is the hash identifier of that collectible entry.
	CollectibleHash *int64
	// Recipe items will have relevant crafting information available here.
	Crafting *DestinyDefinitionsDestinyInventoryItemDefinitionCrafting
	// Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.
	DamageTypeHashes []int64
	// This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.
	// This damage type prediction will only use the following to determine potential damage types:
	// - Intrinsic perks
	// - Talent Node perks
	// - Known, reusable plugs for sockets
	DamageTypes []int
	// If the item has a damage type that could be considered to be default, it will be populated here.
	// For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.
	DefaultDamageType *int
	// Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.
	// I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.
	DefaultDamageTypeHash *int64
	// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
	// In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.
	DisplaySource *string
	// The boolean will indicate to us (and you!) whether something *could* happen when you transfer this item from the Postmaster that might be considered a "destructive" action.
	// It is not feasible currently to tell you (or ourelves!) in a consistent way whether this *will* actually cause a destructive action, so we are playing it safe: if it has the potential to do so, we will not allow it to be transferred from the Postmaster by default. You will need to check for this flag before transferring an item from the Postmaster, or else you'll end up receiving an error.
	DoesPostmasterPullHaveSideEffects *bool
	// If the item is an emblem that has a special Objective attached to it - for instance, if the emblem tracks PVP Kills, or what-have-you. This is a bit different from, for example, the Vanguard Kill Tracker mod, which pipes data into the "art channel". When I get some time, I would like to standardize these so you can get at the values they expose without having to care about what they're being used for and how they are wired up, but for now here's the raw data.
	EmblemObjectiveHash *int64
	// If true, then you will be allowed to equip the item if you pass its other requirements.
	// This being false means that you cannot equip the item under any circumstances.
	Equippable *bool
	// If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.
	EquippingBlock *DestinyDefinitionsDestinyInventoryItemDefinitionEquippingBlock
	FlavorText     *string
	// If this item has related items in a "Gear Set", this will be non-null and the relationships defined herein.
	Gearset *DestinyDefinitionsDestinyInventoryItemDefinitionGearset
	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash *int64
	// If available, this is the original 'active' release watermark overlay for the icon. If the item has different versions, this can be overridden by the 'display version watermark icon' from the 'quality' block. Alternatively, if there is no watermark for the version, and the item version has a power cap below the current season power cap, this can be overridden by the iconWatermarkShelved property.
	IconWatermark *string
	// If available, this is the 'shelved' release watermark overlay for the icon. If the item version has a power cap below the current season power cap, it can be treated as 'shelved', and should be shown with this 'shelved' watermark overlay.
	IconWatermarkShelved *string
	// The index of the entity as it was found in the investment tables.
	Index *int
	// If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.
	Inventory *DestinyDefinitionsDestinyInventoryItemDefinitionInventory
	// If the item has stats, this block will be defined. It has the "raw" investment stats for the item. These investment stats don't take into account the ways that the items can spawn, nor do they take into account any Stat Group transformations. I have retained them for debugging purposes, but I do not know how useful people will find them.
	InvestmentStats []DestinyDefinitionsDestinyItemInvestmentStatDefinition
	// If true, this is a dummy vendor-wrapped item template. Items purchased from Eververse will be "wrapped" by one of these items so that we can safely provide refund capabilities before the item is "unwrapped".
	IsWrapper *bool
	// BNet attempts to make a more formal definition of item "Categories", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a "Weapon", that it's an "Auto Rifle", etc...)
	// The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.
	ItemCategoryHashes []int64
	// A value indicating the "sub-type" of the item. For instance, where an item might have an itemType value "Weapon", this will be something more specific like "Auto Rifle".
	// itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
	ItemSubType *int
	// A value indicating the "base" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a "Type". Still, it's handy in many situations.
	// itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
	ItemType *int
	// It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.
	ItemTypeAndTierDisplayName *string
	// The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.
	ItemTypeDisplayName *string
	// If we added any help or informational URLs about this item, these will be those links.
	Links []LinksHyperlinkReference
	// If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.
	LoreHash *int64
	// If this item has available metrics to be shown, this block will be non-null have the appropriate hashes defined.
	Metrics *DestinyDefinitionsDestinyInventoryItemDefinitionMetrics
	// The intrinsic transferability of an item.
	// I hate that this boolean is negative - but there's a reason.
	// Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.
	NonTransferrable *bool
	// If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.
	Objectives *DestinyDefinitionsDestinyInventoryItemDefinitionObjectives
	// If the item has any *intrinsic* Perks (Perks that it will provide regardless of Sockets, Talent Grid, and other transitory state), they will be defined here.
	Perks []DestinyDefinitionsDestinyItemPerkEntryDefinition
	// If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.
	Plug *DestinyDefinitionsDestinyInventoryItemDefinitionPlug
	// If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.
	Preview *DestinyDefinitionsDestinyInventoryItemDefinitionPreview
	// If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, "quality", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.
	Quality *DestinyDefinitionsDestinyInventoryItemDefinitionQuality
	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted *bool
	// If this item is a "reward sack" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.
	Sack *DestinyDefinitionsDestinyInventoryItemDefinitionSack
	// If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.
	Screenshot *string
	// If this item is related directly to a Season of Destiny, this is the hash identifier for that season.
	SeasonHash *int64
	// A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.
	SecondaryIcon *string
	// Pulled from the secondary icon, this is the "secondary background" of the secondary icon. Confusing? Sure, that's why I call it "overlay" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.
	SecondaryOverlay *string
	// Pulled from the Secondary Icon, this is the "special" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.
	SecondarySpecial *string
	// If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.
	SetData *DestinyDefinitionsDestinyInventoryItemDefinitionSetData
	// If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.
	Sockets *DestinyDefinitionsDestinyInventoryItemDefinitionSockets
	// If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.
	SourceData *DestinyDefinitionsDestinyInventoryItemDefinitionSourceData
	// In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
	SpecialItemType *int
	// If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.
	Stats *DestinyDefinitionsDestinyInventoryItemDefinitionStats
	// Summary data about the item.
	Summary *DestinyDefinitionsDestinyInventoryItemDefinitionSummary
	// There are times when the game will show you a "summary/vague" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.
	// This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.
	SummaryItemHash *int64
	// If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/"Build" items.
	TalentGrid *DestinyDefinitionsDestinyInventoryItemDefinitionTalentGrid
	// Tooltips that only come up conditionally for the item. Check the live data DestinyItemComponent.tooltipNotificationIndexes property for which of these should be shown at runtime.
	TooltipNotifications []DestinyDefinitionsDestinyItemTooltipNotification
	// An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).
	TooltipStyle *string
	// These are the corresponding trait definition hashes for the entries in traitIds.
	TraitHashes []int64
	// Traits are metadata tags applied to this item. For example: armor slot, weapon type, foundry, faction, etc. These IDs come from the game and don't map to any content, but should still be useful.
	TraitIds []string
	// If this item can be rendered, this block will be non-null and will be populated with rendering information.
	TranslationBlock *DestinyDefinitionsDestinyInventoryItemDefinitionTranslationBlock
	// A string identifier that the game's UI uses to determine how the item should be rendered in inventory screens and the like. This could really be anything - at the moment, we don't have the time to really breakdown and maintain all the possible strings this could be, partly because new ones could be added ad hoc. But if you want to use it to dictate your own UI, or look for items with a certain display style, go for it!
	UIItemDisplayStyle *string
	// The conceptual "Value" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.
	Value *DestinyDefinitionsDestinyInventoryItemDefinitionValue
}
