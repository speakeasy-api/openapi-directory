// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChannelStateEnum - Output only. The state of a Channel.
type ChannelStateEnum string

const (
	ChannelStateEnumStateUnspecified ChannelStateEnum = "STATE_UNSPECIFIED"
	ChannelStateEnumPending          ChannelStateEnum = "PENDING"
	ChannelStateEnumActive           ChannelStateEnum = "ACTIVE"
	ChannelStateEnumInactive         ChannelStateEnum = "INACTIVE"
)

func (e *ChannelStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		*e = ChannelStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelStateEnum: %s", s)
	}
}

// Channel - A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider.
type Channel struct {
	// Output only. The activation token for the channel. The token must be used by the provider to register the channel for publishing.
	ActivationToken *string `json:"activationToken,omitempty"`
	// Output only. The creation time.
	CreateTime *string `json:"createTime,omitempty"`
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName *string `json:"cryptoKeyName,omitempty"`
	// Required. The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
	Name *string `json:"name,omitempty"`
	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
	Provider *string `json:"provider,omitempty"`
	// Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
	PubsubTopic *string `json:"pubsubTopic,omitempty"`
	// Output only. The state of a Channel.
	State *ChannelStateEnum `json:"state,omitempty"`
	// Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	UID *string `json:"uid,omitempty"`
	// Output only. The last-modified time.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// ChannelInput - A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider.
type ChannelInput struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName *string `json:"cryptoKeyName,omitempty"`
	// Required. The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
	Name *string `json:"name,omitempty"`
	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
	Provider *string `json:"provider,omitempty"`
}
