"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def transcoder_projects_locations_job_templates_create(self, request: operations.TranscoderProjectsLocationsJobTemplatesCreateRequest, security: operations.TranscoderProjectsLocationsJobTemplatesCreateSecurity) -> operations.TranscoderProjectsLocationsJobTemplatesCreateResponse:
        r"""Creates a job template in the specified region."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranscoderProjectsLocationsJobTemplatesCreateRequest, base_url, '/v1beta1/{parent}/jobTemplates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_template", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranscoderProjectsLocationsJobTemplatesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranscoderProjectsLocationsJobTemplatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobTemplate])
                res.job_template = out

        return res

    def transcoder_projects_locations_job_templates_delete(self, request: operations.TranscoderProjectsLocationsJobTemplatesDeleteRequest, security: operations.TranscoderProjectsLocationsJobTemplatesDeleteSecurity) -> operations.TranscoderProjectsLocationsJobTemplatesDeleteResponse:
        r"""Deletes a job template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranscoderProjectsLocationsJobTemplatesDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.TranscoderProjectsLocationsJobTemplatesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranscoderProjectsLocationsJobTemplatesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def transcoder_projects_locations_job_templates_get(self, request: operations.TranscoderProjectsLocationsJobTemplatesGetRequest, security: operations.TranscoderProjectsLocationsJobTemplatesGetSecurity) -> operations.TranscoderProjectsLocationsJobTemplatesGetResponse:
        r"""Returns the job template data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranscoderProjectsLocationsJobTemplatesGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.TranscoderProjectsLocationsJobTemplatesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranscoderProjectsLocationsJobTemplatesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobTemplate])
                res.job_template = out

        return res

    def transcoder_projects_locations_job_templates_list(self, request: operations.TranscoderProjectsLocationsJobTemplatesListRequest, security: operations.TranscoderProjectsLocationsJobTemplatesListSecurity) -> operations.TranscoderProjectsLocationsJobTemplatesListResponse:
        r"""Lists job templates in the specified region."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranscoderProjectsLocationsJobTemplatesListRequest, base_url, '/v1beta1/{parent}/jobTemplates', request)
        
        query_params = utils.get_query_params(operations.TranscoderProjectsLocationsJobTemplatesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranscoderProjectsLocationsJobTemplatesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobTemplatesResponse])
                res.list_job_templates_response = out

        return res

    def transcoder_projects_locations_jobs_create(self, request: operations.TranscoderProjectsLocationsJobsCreateRequest, security: operations.TranscoderProjectsLocationsJobsCreateSecurity) -> operations.TranscoderProjectsLocationsJobsCreateResponse:
        r"""Creates a job in the specified region."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranscoderProjectsLocationsJobsCreateRequest, base_url, '/v1beta1/{parent}/jobs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranscoderProjectsLocationsJobsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranscoderProjectsLocationsJobsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def transcoder_projects_locations_jobs_list(self, request: operations.TranscoderProjectsLocationsJobsListRequest, security: operations.TranscoderProjectsLocationsJobsListSecurity) -> operations.TranscoderProjectsLocationsJobsListResponse:
        r"""Lists jobs in the specified region."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranscoderProjectsLocationsJobsListRequest, base_url, '/v1beta1/{parent}/jobs', request)
        
        query_params = utils.get_query_params(operations.TranscoderProjectsLocationsJobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranscoderProjectsLocationsJobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobsResponse])
                res.list_jobs_response = out

        return res

    