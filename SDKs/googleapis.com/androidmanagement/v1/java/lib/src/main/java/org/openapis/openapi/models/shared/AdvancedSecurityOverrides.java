/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AdvancedSecurityOverrides - Security policies set to secure values by default. To maintain the security posture of a device, we don't recommend overriding any of the default values.
 */
public class AdvancedSecurityOverrides {
    /**
     * Controls Common Criteria Mode\u2014security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC). Enabling Common Criteria Mode increases certain security components on a device, including AES-GCM encryption of Bluetooth Long Term Keys, and Wi-Fi configuration stores.Warning: Common Criteria Mode enforces a strict security model typically only required for IT products used in national security systems and other highly sensitive organizations. Standard device use may be affected. Only enabled if required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonCriteriaMode")
    public AdvancedSecurityOverridesCommonCriteriaModeEnum commonCriteriaMode;
    public AdvancedSecurityOverrides withCommonCriteriaMode(AdvancedSecurityOverridesCommonCriteriaModeEnum commonCriteriaMode) {
        this.commonCriteriaMode = commonCriteriaMode;
        return this;
    }
    
    /**
     * Controls access to developer settings: developer options and safe boot. Replaces safeBootDisabled (deprecated) and debuggingFeaturesAllowed (deprecated).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("developerSettings")
    public AdvancedSecurityOverridesDeveloperSettingsEnum developerSettings;
    public AdvancedSecurityOverrides withDeveloperSettings(AdvancedSecurityOverridesDeveloperSettingsEnum developerSettings) {
        this.developerSettings = developerSettings;
        return this;
    }
    
    /**
     * Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced. Replaces ensureVerifyAppsEnabled (deprecated).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("googlePlayProtectVerifyApps")
    public AdvancedSecurityOverridesGooglePlayProtectVerifyAppsEnum googlePlayProtectVerifyApps;
    public AdvancedSecurityOverrides withGooglePlayProtectVerifyApps(AdvancedSecurityOverridesGooglePlayProtectVerifyAppsEnum googlePlayProtectVerifyApps) {
        this.googlePlayProtectVerifyApps = googlePlayProtectVerifyApps;
        return this;
    }
    
    /**
     * Personal apps that can read work profile notifications using a NotificationListenerService (https://developer.android.com/reference/android/service/notification/NotificationListenerService). By default, no personal apps (aside from system apps) can read work notifications. Each value in the list must be a package name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personalAppsThatCanReadWorkNotifications")
    public String[] personalAppsThatCanReadWorkNotifications;
    public AdvancedSecurityOverrides withPersonalAppsThatCanReadWorkNotifications(String[] personalAppsThatCanReadWorkNotifications) {
        this.personalAppsThatCanReadWorkNotifications = personalAppsThatCanReadWorkNotifications;
        return this;
    }
    
    /**
     * The policy for untrusted apps (apps from unknown sources) enforced on the device. Replaces install_unknown_sources_allowed (deprecated).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("untrustedAppsPolicy")
    public AdvancedSecurityOverridesUntrustedAppsPolicyEnum untrustedAppsPolicy;
    public AdvancedSecurityOverrides withUntrustedAppsPolicy(AdvancedSecurityOverridesUntrustedAppsPolicyEnum untrustedAppsPolicy) {
        this.untrustedAppsPolicy = untrustedAppsPolicy;
        return this;
    }
    
}
