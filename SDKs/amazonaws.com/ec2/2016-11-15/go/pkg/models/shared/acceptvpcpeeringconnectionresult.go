// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet - Describes an IPv4 CIDR block.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet struct {
	CidrBlock *string
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet - Describes an IPv6 CIDR block.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet struct {
	Ipv6CidrBlock *string
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions - Information about the VPC peering connection options for the accepter or requester VPC.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions struct {
	AllowDNSResolutionFromRemoteVpc            *bool
	AllowEgressFromLocalClassicLinkToRemoteVpc *bool
	AllowEgressFromLocalVpcToRemoteClassicLink *bool
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo - Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo struct {
	CidrBlock        *string
	CidrBlockSet     []AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet
	Ipv6CidrBlockSet []AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet
	OwnerID          *string
	PeeringOptions   *AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions
	Region           *string
	VpcID            *string
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet - Describes an IPv4 CIDR block.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet struct {
	CidrBlock *string
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet - Describes an IPv6 CIDR block.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet struct {
	Ipv6CidrBlock *string
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions - Information about the VPC peering connection options for the accepter or requester VPC.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions struct {
	AllowDNSResolutionFromRemoteVpc            *bool
	AllowEgressFromLocalClassicLinkToRemoteVpc *bool
	AllowEgressFromLocalVpcToRemoteClassicLink *bool
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo - Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo struct {
	CidrBlock        *string
	CidrBlockSet     []AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet
	Ipv6CidrBlockSet []AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet
	OwnerID          *string
	PeeringOptions   *AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions
	Region           *string
	VpcID            *string
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum - The status of the VPC peering connection.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum string

const (
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumInitiatingRequest AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "initiating-request"
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumPendingAcceptance AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "pending-acceptance"
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumActive            AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "active"
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumDeleted           AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "deleted"
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumRejected          AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "rejected"
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumFailed            AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "failed"
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumExpired           AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "expired"
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumProvisioning      AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "provisioning"
	AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnumDeleting          AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum = "deleting"
)

func (e *AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "initiating-request":
		fallthrough
	case "pending-acceptance":
		fallthrough
	case "active":
		fallthrough
	case "deleted":
		fallthrough
	case "rejected":
		fallthrough
	case "failed":
		fallthrough
	case "expired":
		fallthrough
	case "provisioning":
		fallthrough
	case "deleting":
		*e = AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum: %s", s)
	}
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatus - The status of the VPC peering connection.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatus struct {
	Code    *AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum
	Message *string
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnectionTags - Describes a tag.
type AcceptVpcPeeringConnectionResultVpcPeeringConnectionTags struct {
	Key   *string
	Value *string
}

// AcceptVpcPeeringConnectionResultVpcPeeringConnection - Information about the VPC peering connection.
type AcceptVpcPeeringConnectionResultVpcPeeringConnection struct {
	AccepterVpcInfo        *AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo
	ExpirationTime         *time.Time
	RequesterVpcInfo       *AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo
	Status                 *AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatus
	Tags                   []AcceptVpcPeeringConnectionResultVpcPeeringConnectionTags
	VpcPeeringConnectionID *string
}

// AcceptVpcPeeringConnectionResult - Success
type AcceptVpcPeeringConnectionResult struct {
	VpcPeeringConnection *AcceptVpcPeeringConnectionResultVpcPeeringConnection
}
