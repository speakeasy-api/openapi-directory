// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ExtendLicenseConsumptionXAmzTargetEnum
type ExtendLicenseConsumptionXAmzTargetEnum string

const (
	ExtendLicenseConsumptionXAmzTargetEnumAwsLicenseManagerExtendLicenseConsumption ExtendLicenseConsumptionXAmzTargetEnum = "AWSLicenseManager.ExtendLicenseConsumption"
)

func (e *ExtendLicenseConsumptionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSLicenseManager.ExtendLicenseConsumption":
		*e = ExtendLicenseConsumptionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExtendLicenseConsumptionXAmzTargetEnum: %s", s)
	}
}

type ExtendLicenseConsumptionRequest struct {
	ExtendLicenseConsumptionRequest shared.ExtendLicenseConsumptionRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                   *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256               *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                  *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                        *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken               *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                   *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders               *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                      ExtendLicenseConsumptionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ExtendLicenseConsumptionResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// AuthorizationException
	AuthorizationException interface{}
	ContentType            string
	// Success
	ExtendLicenseConsumptionResponse *shared.ExtendLicenseConsumptionResponse
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// RateLimitExceededException
	RateLimitExceededException interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServerInternalException
	ServerInternalException interface{}
	// ValidationException
	ValidationException interface{}
}
