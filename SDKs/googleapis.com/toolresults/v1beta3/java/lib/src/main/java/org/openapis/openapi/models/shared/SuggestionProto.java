/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SuggestionProto {
    /**
     * Reference to a help center article concerning this type of suggestion. Always set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("helpUrl")
    public String helpUrl;
    public SuggestionProto withHelpUrl(String helpUrl) {
        this.helpUrl = helpUrl;
        return this;
    }
    
    /**
     * IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longMessage")
    public SafeHtmlProto longMessage;
    public SuggestionProto withLongMessage(SafeHtmlProto longMessage) {
        this.longMessage = longMessage;
        return this;
    }
    
    /**
     * Relative importance of a suggestion. Always set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public SuggestionProtoPriorityEnum priority;
    public SuggestionProto withPriority(SuggestionProtoPriorityEnum priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * A somewhat human readable identifier of the source view, if it does not have a resource_name. This is a path within the accessibility hierarchy, an element with resource name; similar to an XPath.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pseudoResourceId")
    public String pseudoResourceId;
    public SuggestionProto withPseudoResourceId(String pseudoResourceId) {
        this.pseudoResourceId = pseudoResourceId;
        return this;
    }
    
    /**
     * A rectangular region.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public RegionProto region;
    public SuggestionProto withRegion(RegionProto region) {
        this.region = region;
        return this;
    }
    
    /**
     * Reference to a view element, identified by its resource name, if it has one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceName")
    public String resourceName;
    public SuggestionProto withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }
    
    /**
     * ID of the screen for the suggestion. It is used for getting the corresponding screenshot path. For example, screen_id "1" corresponds to "1.png" file in GCS. Always set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screenId")
    public String screenId;
    public SuggestionProto withScreenId(String screenId) {
        this.screenId = screenId;
        return this;
    }
    
    /**
     * Relative importance of a suggestion as compared with other suggestions that have the same priority and category. This is a meaningless value that can be used to order suggestions that are in the same category and have the same priority. The larger values have higher priority (i.e., are more important). Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryPriority")
    public Double secondaryPriority;
    public SuggestionProto withSecondaryPriority(Double secondaryPriority) {
        this.secondaryPriority = secondaryPriority;
        return this;
    }
    
    /**
     * IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortMessage")
    public SafeHtmlProto shortMessage;
    public SuggestionProto withShortMessage(SafeHtmlProto shortMessage) {
        this.shortMessage = shortMessage;
        return this;
    }
    
    /**
     * General title for the suggestion, in the user's language, without markup. Always set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public SuggestionProto withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
