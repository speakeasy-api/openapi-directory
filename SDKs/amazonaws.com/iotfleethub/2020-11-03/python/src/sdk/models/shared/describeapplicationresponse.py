"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applicationstate_enum as shared_applicationstate_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeApplicationResponse:
    r"""Success"""
    
    application_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationArn') }})  
    application_creation_date: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationCreationDate') }})  
    application_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationId') }})  
    application_last_update_date: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationLastUpdateDate') }})  
    application_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationName') }})  
    application_state: shared_applicationstate_enum.ApplicationStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationState') }})  
    application_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationUrl') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})  
    application_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationDescription'), 'exclude': lambda f: f is None }})  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})  
    sso_client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssoClientId'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    