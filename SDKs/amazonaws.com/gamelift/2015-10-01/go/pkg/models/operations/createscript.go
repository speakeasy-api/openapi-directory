// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateScriptXAmzTargetEnum
type CreateScriptXAmzTargetEnum string

const (
	CreateScriptXAmzTargetEnumGameLiftCreateScript CreateScriptXAmzTargetEnum = "GameLift.CreateScript"
)

func (e CreateScriptXAmzTargetEnum) ToPointer() *CreateScriptXAmzTargetEnum {
	return &e
}

func (e *CreateScriptXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GameLift.CreateScript":
		*e = CreateScriptXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScriptXAmzTargetEnum: %v", v)
	}
}

type CreateScriptRequest struct {
	CreateScriptInput shared.CreateScriptInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateScriptXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateScriptResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateScriptOutput *shared.CreateScriptOutput
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// TaggingFailedException
	TaggingFailedException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
