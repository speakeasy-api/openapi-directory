/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CertificateModeEnum } from "./certificatemodeenum";
import { CertificateStatusEnum } from "./certificatestatusenum";
import { CertificateValidity } from "./certificatevalidity";
import { TransferData } from "./transferdata";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Describes a certificate.
 */
export class CertificateDescription extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "caCertificateId" })
  caCertificateId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateArn" })
  certificateArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateId" })
  certificateId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateMode" })
  certificateMode?: CertificateModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "certificatePem" })
  certificatePem?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "customerVersion" })
  customerVersion?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "generationId" })
  generationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ownedBy" })
  ownedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "previousOwnedBy" })
  previousOwnedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CertificateStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "transferData" })
  @Type(() => TransferData)
  transferData?: TransferData;

  @SpeakeasyMetadata()
  @Expose({ name: "validity" })
  @Type(() => CertificateValidity)
  validity?: CertificateValidity;
}
