"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PaymentInstrumentGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_payment_instrument_groups_id(self, request: operations.GetPaymentInstrumentGroupsIDRequest, security: operations.GetPaymentInstrumentGroupsIDSecurity) -> operations.GetPaymentInstrumentGroupsIDResponse:
        r"""Get a payment instrument group
        Returns the details of a payment instrument group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentInstrumentGroupsIDRequest, base_url, '/paymentInstrumentGroups/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentInstrumentGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentInstrumentGroup])
                res.payment_instrument_group = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_payment_instrument_groups_id_transaction_rules(self, request: operations.GetPaymentInstrumentGroupsIDTransactionRulesRequest, security: operations.GetPaymentInstrumentGroupsIDTransactionRulesSecurity) -> operations.GetPaymentInstrumentGroupsIDTransactionRulesResponse:
        r"""Get all transaction rules for a payment instrument group
        Returns a list of all the transaction rules associated with a payment instrument group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentInstrumentGroupsIDTransactionRulesRequest, base_url, '/paymentInstrumentGroups/{id}/transactionRules', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentInstrumentGroupsIDTransactionRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionRulesResponse])
                res.transaction_rules_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_payment_instrument_groups(self, request: shared.PaymentInstrumentGroupInfo, security: operations.PostPaymentInstrumentGroupsSecurity) -> operations.PostPaymentInstrumentGroupsResponse:
        r"""Create a payment instrument group
        Creates a payment instrument group to associate and group payment instrument resources together. You can apply a transaction rule to a payment instrument group.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/paymentInstrumentGroups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPaymentInstrumentGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentInstrumentGroup])
                res.payment_instrument_group = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    