"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StatusMessageErrorCodeEnum(str, Enum):
    r"""The type of error in case of a failure"""
    NO_APP_KEY = 'NO_APP_KEY'
    INVALID_APP_KEY = 'INVALID_APP_KEY'
    NO_SESSION = 'NO_SESSION'
    INVALID_SESSION_INFORMATION = 'INVALID_SESSION_INFORMATION'
    NOT_AUTHORIZED = 'NOT_AUTHORIZED'
    INVALID_INPUT = 'INVALID_INPUT'
    INVALID_CLOCK = 'INVALID_CLOCK'
    UNEXPECTED_ERROR = 'UNEXPECTED_ERROR'
    TIMEOUT = 'TIMEOUT'
    SUBSCRIPTION_LIMIT_EXCEEDED = 'SUBSCRIPTION_LIMIT_EXCEEDED'
    INVALID_REQUEST = 'INVALID_REQUEST'
    CONNECTION_FAILED = 'CONNECTION_FAILED'
    MAX_CONNECTION_LIMIT_EXCEEDED = 'MAX_CONNECTION_LIMIT_EXCEEDED'
    TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS'

class StatusMessageStatusCodeEnum(str, Enum):
    r"""The status of the last request"""
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StatusMessage:
    
    connection_closed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionClosed'), 'exclude': lambda f: f is None }})
    r"""Is the connection now closed"""  
    connection_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionId'), 'exclude': lambda f: f is None }})
    r"""The connection id"""  
    connections_available: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionsAvailable'), 'exclude': lambda f: f is None }})
    r"""The number of connections available for this account at this moment in time. Present on responses to Authentication messages only."""  
    error_code: Optional[StatusMessageErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCode'), 'exclude': lambda f: f is None }})
    r"""The type of error in case of a failure"""  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""Additional message in case of a failure"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Client generated unique id to link request with response (like json rpc)"""  
    op: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op'), 'exclude': lambda f: f is None }})
    r"""The operation type"""  
    status_code: Optional[StatusMessageStatusCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusCode'), 'exclude': lambda f: f is None }})
    r"""The status of the last request"""  
    