/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NamedProperty } from "./namedproperty";
import { Person } from "./person";
import { ResultDisplayMetadata } from "./resultdisplaymetadata";
import { Source } from "./source";
import { Expose, Type } from "class-transformer";

/**
 * Metadata of a matched search result.
 */
export class Metadata extends SpeakeasyBase {
  /**
   * The creation time for this document or object in the search result.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "displayOptions" })
  @Type(() => ResultDisplayMetadata)
  displayOptions?: ResultDisplayMetadata;

  /**
   * Indexed fields in structured data, returned as a generic named property.
   */
  @SpeakeasyMetadata({ elemType: NamedProperty })
  @Expose({ name: "fields" })
  @Type(() => NamedProperty)
  fields?: NamedProperty[];

  /**
   * Mime type of the search result.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mimeType" })
  mimeType?: string;

  /**
   * Object type of the search result.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "objectType" })
  objectType?: string;

  /**
   * Object to represent a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => Person)
  owner?: Person;

  /**
   * Defines sources for the suggest/search APIs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => Source)
  source?: Source;

  /**
   * The thumbnail URL of the result.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbnailUrl" })
  thumbnailUrl?: string;

  /**
   * The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}
