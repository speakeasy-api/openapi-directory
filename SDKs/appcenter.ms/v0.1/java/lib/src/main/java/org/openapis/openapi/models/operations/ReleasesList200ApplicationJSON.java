/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReleasesList200ApplicationJSON - Basic information on a release
 */
public class ReleasesList200ApplicationJSON {
    /**
     * Build information for the release
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("build")
    public ReleasesList200ApplicationJSONBuild build;
    public ReleasesList200ApplicationJSON withBuild(ReleasesList200ApplicationJSONBuild build) {
        this.build = build;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt;
     * &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt;
     * &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_type")
    public ReleasesList200ApplicationJSONDestinationTypeEnum destinationType;
    public ReleasesList200ApplicationJSON withDestinationType(ReleasesList200ApplicationJSONDestinationTypeEnum destinationType) {
        this.destinationType = destinationType;
        return this;
    }
    
    /**
     * A list of distribution groups or stores.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinations")
    public ReleasesList200ApplicationJSONDestinations[] destinations;
    public ReleasesList200ApplicationJSON withDestinations(ReleasesList200ApplicationJSONDestinations[] destinations) {
        this.destinations = destinations;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distribution_groups")
    public ReleasesList200ApplicationJSONDistributionGroups[] distributionGroups;
    public ReleasesList200ApplicationJSON withDistributionGroups(ReleasesList200ApplicationJSONDistributionGroups[] distributionGroups) {
        this.distributionGroups = distributionGroups;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distribution_stores")
    public ReleasesList200ApplicationJSONDistributionStores[] distributionStores;
    public ReleasesList200ApplicationJSON withDistributionStores(ReleasesList200ApplicationJSONDistributionStores[] distributionStores) {
        this.distributionStores = distributionStores;
        return this;
    }
    
    /**
     * This value determines the whether a release currently is enabled or disabled.
     */
    @JsonProperty("enabled")
    public Boolean enabled;
    public ReleasesList200ApplicationJSON withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * The file extension of the main (user-uploaded) package file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_extension")
    public String fileExtension;
    public ReleasesList200ApplicationJSON withFileExtension(String fileExtension) {
        this.fileExtension = fileExtension;
        return this;
    }
    
    /**
     * ID identifying this unique release.
     */
    @JsonProperty("id")
    public Long id;
    public ReleasesList200ApplicationJSON withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * This value determines if a release is external or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_external_build")
    public Boolean isExternalBuild;
    public ReleasesList200ApplicationJSON withIsExternalBuild(Boolean isExternalBuild) {
        this.isExternalBuild = isExternalBuild;
        return this;
    }
    
    /**
     * The release's origin
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origin")
    public ReleasesList200ApplicationJSONOriginEnum origin;
    public ReleasesList200ApplicationJSON withOrigin(ReleasesList200ApplicationJSONOriginEnum origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * The release's short version.&lt;br&gt;
     * For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt;
     * For Android: android:versionName from AppManifest.xml.
     * 
     */
    @JsonProperty("short_version")
    public String shortVersion;
    public ReleasesList200ApplicationJSON withShortVersion(String shortVersion) {
        this.shortVersion = shortVersion;
        return this;
    }
    
    /**
     * UTC time in ISO 8601 format of the uploaded time.
     */
    @JsonProperty("uploaded_at")
    public String uploadedAt;
    public ReleasesList200ApplicationJSON withUploadedAt(String uploadedAt) {
        this.uploadedAt = uploadedAt;
        return this;
    }
    
    /**
     * The release's version.&lt;br&gt;
     * For iOS: CFBundleVersion from info.plist.&lt;br&gt;
     * For Android: android:versionCode from AppManifest.xml.
     * 
     */
    @JsonProperty("version")
    public String version;
    public ReleasesList200ApplicationJSON withVersion(String version) {
        this.version = version;
        return this;
    }
    
}
