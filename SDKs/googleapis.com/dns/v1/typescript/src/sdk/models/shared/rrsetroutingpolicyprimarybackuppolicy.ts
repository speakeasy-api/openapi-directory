/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RRSetRoutingPolicyGeoPolicy } from "./rrsetroutingpolicygeopolicy";
import { RRSetRoutingPolicyHealthCheckTargets } from "./rrsetroutingpolicyhealthchecktargets";
import { Expose, Type } from "class-transformer";

/**
 * Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
 */
export class RRSetRoutingPolicyPrimaryBackupPolicy extends SpeakeasyBase {
  /**
   * Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backupGeoTargets" })
  @Type(() => RRSetRoutingPolicyGeoPolicy)
  backupGeoTargets?: RRSetRoutingPolicyGeoPolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primaryTargets" })
  @Type(() => RRSetRoutingPolicyHealthCheckTargets)
  primaryTargets?: RRSetRoutingPolicyHealthCheckTargets;

  /**
   * When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trickleTraffic" })
  trickleTraffic?: number;
}
