/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ComplianceStatusEnum } from "./compliancestatusenum";
import { Cost } from "./cost";
import { DisruptionCompliance } from "./disruptioncompliance";
import { ResiliencyScore } from "./resiliencyscore";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Defines the compliance of an Application Component against the resiliency policy.
 */
export class AppComponentCompliance extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appComponentName" })
  appComponentName?: string;

  @SpeakeasyMetadata({ elemType: DisruptionCompliance })
  @Expose({ name: "compliance" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DisruptionCompliance> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DisruptionCompliance);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  compliance?: Record<string, DisruptionCompliance>;

  @SpeakeasyMetadata()
  @Expose({ name: "cost" })
  @Type(() => Cost)
  cost?: Cost;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resiliencyScore" })
  @Type(() => ResiliencyScore)
  resiliencyScore?: ResiliencyScore;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: ComplianceStatusEnum;
}
