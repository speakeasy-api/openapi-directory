"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudidentitytoolkitadminv2clientpermissionconfig as shared_googlecloudidentitytoolkitadminv2clientpermissionconfig
from ..shared import googlecloudidentitytoolkitadminv2emailprivacyconfig as shared_googlecloudidentitytoolkitadminv2emailprivacyconfig
from ..shared import googlecloudidentitytoolkitadminv2hashconfig as shared_googlecloudidentitytoolkitadminv2hashconfig
from ..shared import googlecloudidentitytoolkitadminv2inheritance as shared_googlecloudidentitytoolkitadminv2inheritance
from ..shared import googlecloudidentitytoolkitadminv2monitoringconfig as shared_googlecloudidentitytoolkitadminv2monitoringconfig
from ..shared import googlecloudidentitytoolkitadminv2multifactorauthconfig as shared_googlecloudidentitytoolkitadminv2multifactorauthconfig
from ..shared import googlecloudidentitytoolkitadminv2smsregionconfig as shared_googlecloudidentitytoolkitadminv2smsregionconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIdentitytoolkitAdminV2Tenant:
    r"""A Tenant contains configuration for the tenant in a multi-tenant project."""
    
    allow_password_signup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowPasswordSignup'), 'exclude': lambda f: f is None }})
    r"""Whether to allow email/password user authentication."""  
    autodelete_anonymous_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autodeleteAnonymousUsers'), 'exclude': lambda f: f is None }})
    r"""Whether anonymous users will be auto-deleted after a period of 30 days."""  
    client: Optional[shared_googlecloudidentitytoolkitadminv2clientpermissionconfig.GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client'), 'exclude': lambda f: f is None }})
    r"""Options related to how clients making requests on behalf of a tenant should be configured."""  
    disable_auth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableAuth'), 'exclude': lambda f: f is None }})
    r"""Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of the tenant."""  
    email_privacy_config: Optional[shared_googlecloudidentitytoolkitadminv2emailprivacyconfig.GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailPrivacyConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for settings related to email privacy and public visibility. Settings in this config protect against email enumeration, but may make some trade-offs in user-friendliness."""  
    enable_anonymous_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAnonymousUser'), 'exclude': lambda f: f is None }})
    r"""Whether to enable anonymous user authentication."""  
    enable_email_link_signin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableEmailLinkSignin'), 'exclude': lambda f: f is None }})
    r"""Whether to enable email link user authentication."""  
    hash_config: Optional[shared_googlecloudidentitytoolkitadminv2hashconfig.GoogleCloudIdentitytoolkitAdminV2HashConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashConfig'), 'exclude': lambda f: f is None }})
    r"""History information of the hash algorithm and key. Different accounts' passwords may be generated by different version."""  
    inheritance: Optional[shared_googlecloudidentitytoolkitadminv2inheritance.GoogleCloudIdentitytoolkitAdminV2Inheritance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritance'), 'exclude': lambda f: f is None }})
    r"""Settings that the tenants will inherit from project level."""  
    mfa_config: Optional[shared_googlecloudidentitytoolkitadminv2multifactorauthconfig.GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfaConfig'), 'exclude': lambda f: f is None }})
    r"""Options related to MultiFactor Authentication for the project."""  
    monitoring: Optional[shared_googlecloudidentitytoolkitadminv2monitoringconfig.GoogleCloudIdentitytoolkitAdminV2MonitoringConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monitoring'), 'exclude': lambda f: f is None }})
    r"""Configuration related to monitoring project activity."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of a tenant. For example: \\"projects/{project-id}/tenants/{tenant-id}\\" """  
    sms_region_config: Optional[shared_googlecloudidentitytoolkitadminv2smsregionconfig.GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsRegionConfig'), 'exclude': lambda f: f is None }})
    r"""Configures the regions where users are allowed to send verification SMS for the project or tenant. This is based on the calling code of the destination phone number."""  
    test_phone_numbers: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testPhoneNumbers'), 'exclude': lambda f: f is None }})
    r"""A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIdentitytoolkitAdminV2TenantInput:
    r"""A Tenant contains configuration for the tenant in a multi-tenant project."""
    
    allow_password_signup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowPasswordSignup'), 'exclude': lambda f: f is None }})
    r"""Whether to allow email/password user authentication."""  
    autodelete_anonymous_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autodeleteAnonymousUsers'), 'exclude': lambda f: f is None }})
    r"""Whether anonymous users will be auto-deleted after a period of 30 days."""  
    client: Optional[shared_googlecloudidentitytoolkitadminv2clientpermissionconfig.GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client'), 'exclude': lambda f: f is None }})
    r"""Options related to how clients making requests on behalf of a tenant should be configured."""  
    disable_auth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableAuth'), 'exclude': lambda f: f is None }})
    r"""Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of the tenant."""  
    email_privacy_config: Optional[shared_googlecloudidentitytoolkitadminv2emailprivacyconfig.GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailPrivacyConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for settings related to email privacy and public visibility. Settings in this config protect against email enumeration, but may make some trade-offs in user-friendliness."""  
    enable_anonymous_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAnonymousUser'), 'exclude': lambda f: f is None }})
    r"""Whether to enable anonymous user authentication."""  
    enable_email_link_signin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableEmailLinkSignin'), 'exclude': lambda f: f is None }})
    r"""Whether to enable email link user authentication."""  
    inheritance: Optional[shared_googlecloudidentitytoolkitadminv2inheritance.GoogleCloudIdentitytoolkitAdminV2Inheritance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritance'), 'exclude': lambda f: f is None }})
    r"""Settings that the tenants will inherit from project level."""  
    mfa_config: Optional[shared_googlecloudidentitytoolkitadminv2multifactorauthconfig.GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfaConfig'), 'exclude': lambda f: f is None }})
    r"""Options related to MultiFactor Authentication for the project."""  
    monitoring: Optional[shared_googlecloudidentitytoolkitadminv2monitoringconfig.GoogleCloudIdentitytoolkitAdminV2MonitoringConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monitoring'), 'exclude': lambda f: f is None }})
    r"""Configuration related to monitoring project activity."""  
    sms_region_config: Optional[shared_googlecloudidentitytoolkitadminv2smsregionconfig.GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsRegionConfig'), 'exclude': lambda f: f is None }})
    r"""Configures the regions where users are allowed to send verification SMS for the project or tenant. This is based on the calling code of the destination phone number."""  
    test_phone_numbers: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testPhoneNumbers'), 'exclude': lambda f: f is None }})
    r"""A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded)."""  
    