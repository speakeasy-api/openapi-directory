"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AssessmentManagement:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_offerings_offering_id_assessments_assessment_id_documents_document_id_(self, request: operations.DeleteOfferingsOfferingIDAssessmentsAssessmentIDDocumentsDocumentIDRequest) -> operations.DeleteOfferingsOfferingIDAssessmentsAssessmentIDDocumentsDocumentIDResponse:
        r"""Remove assessment document
        Removes the assessment document file for a specified assessment in an offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOfferingsOfferingIDAssessmentsAssessmentIDDocumentsDocumentIDRequest, base_url, '/offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOfferingsOfferingIDAssessmentsAssessmentIDDocumentsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_offerings_offering_id_users_user_email_assessments_assessment_id_(self, request: operations.DeleteOfferingsOfferingIDUsersUserEmailAssessmentsAssessmentIDRequest) -> operations.DeleteOfferingsOfferingIDUsersUserEmailAssessmentsAssessmentIDResponse:
        r"""Reset user's assessment to draft state
        Resets the user's submitted assessment to a draft state.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOfferingsOfferingIDUsersUserEmailAssessmentsAssessmentIDRequest, base_url, '/offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOfferingsOfferingIDUsersUserEmailAssessmentsAssessmentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_activities_openresponse(self, request: operations.GetOfferingsOfferingIDActivitiesOpenresponseRequest) -> operations.GetOfferingsOfferingIDActivitiesOpenresponseResponse:
        r"""Find offering's activities
        Responds with the activities in a specific offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDActivitiesOpenresponseRequest, base_url, '/offerings/{offeringId}/activities/openresponse', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDActivitiesOpenresponseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingActivitiesResponse]])
                res.offering_activities_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_assessments(self, request: operations.GetOfferingsOfferingIDAssessmentsRequest) -> operations.GetOfferingsOfferingIDAssessmentsResponse:
        r"""Find offering's assessments
        Responds with all assessments in an offering matching the offeringId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDAssessmentsRequest, base_url, '/offerings/{offeringId}/assessments', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDAssessmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AssessmentResponse]])
                res.assessment_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_learners_pending_submission(self, request: operations.GetOfferingsOfferingIDLearnersPendingSubmissionRequest) -> operations.GetOfferingsOfferingIDLearnersPendingSubmissionResponse:
        r"""Find learners with assessments pending x days before due date within the specified offeringId
        Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x = the number of days specified in the request. The default is 3 days.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDLearnersPendingSubmissionRequest, base_url, '/offerings/{offeringId}/learners/pending-submission', request)
        
        query_params = utils.get_query_params(operations.GetOfferingsOfferingIDLearnersPendingSubmissionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDLearnersPendingSubmissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AssessmentPendingSubmission]])
                res.assessment_pending_submissions = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_users_user_email_submissions_open_response(self, request: operations.GetOfferingsOfferingIDUsersUserEmailSubmissionsOpenResponseRequest) -> operations.GetOfferingsOfferingIDUsersUserEmailSubmissionsOpenResponseResponse:
        r"""Find learner's open response assessment submissions
        Responds with open response assessment submissions by a learner in an offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDUsersUserEmailSubmissionsOpenResponseRequest, base_url, '/offerings/{offeringId}/users/{userEmail}/submissions/open-response', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDUsersUserEmailSubmissionsOpenResponseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Assignments]])
                res.assignments = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def patch_offerings_offering_id_assessments_assessment_id_(self, request: operations.PatchOfferingsOfferingIDAssessmentsAssessmentIDRequest) -> operations.PatchOfferingsOfferingIDAssessmentsAssessmentIDResponse:
        r"""Update assessment details
        Updates the assessment details for a specified assessment in an offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOfferingsOfferingIDAssessmentsAssessmentIDRequest, base_url, '/offerings/{offeringId}/assessments/{assessmentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "assessment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOfferingsOfferingIDAssessmentsAssessmentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AssessmentResponse])
                res.assessment_response = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def patch_offerings_offering_id_assessments_assessment_id_user_email_(self, request: operations.PatchOfferingsOfferingIDAssessmentsAssessmentIDUserEmailRequest) -> operations.PatchOfferingsOfferingIDAssessmentsAssessmentIDUserEmailResponse:
        r"""Update the due dates for a learner's quiz attempt
        Updates the due dates for a learner's quiz attempt specified by the assessmentId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOfferingsOfferingIDAssessmentsAssessmentIDUserEmailRequest, base_url, '/offerings/{offeringId}/assessments/{assessmentId}/{userEmail}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOfferingsOfferingIDAssessmentsAssessmentIDUserEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    