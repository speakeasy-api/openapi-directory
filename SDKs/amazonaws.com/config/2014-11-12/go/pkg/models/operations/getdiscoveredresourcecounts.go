// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetDiscoveredResourceCountsXAmzTargetEnum
type GetDiscoveredResourceCountsXAmzTargetEnum string

const (
	GetDiscoveredResourceCountsXAmzTargetEnumStarlingDoveServiceGetDiscoveredResourceCounts GetDiscoveredResourceCountsXAmzTargetEnum = "StarlingDoveService.GetDiscoveredResourceCounts"
)

func (e *GetDiscoveredResourceCountsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "StarlingDoveService.GetDiscoveredResourceCounts":
		*e = GetDiscoveredResourceCountsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveredResourceCountsXAmzTargetEnum: %s", s)
	}
}

type GetDiscoveredResourceCountsRequest struct {
	GetDiscoveredResourceCountsRequest shared.GetDiscoveredResourceCountsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                      *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                  *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                     *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                           *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                  *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                      *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                  *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                         GetDiscoveredResourceCountsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type GetDiscoveredResourceCountsResponse struct {
	ContentType string
	// Success
	GetDiscoveredResourceCountsResponse *shared.GetDiscoveredResourceCountsResponse
	// InvalidLimitException
	InvalidLimitException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
