"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListPhoneDevicesSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class ListPhoneDevicesTypeEnum(str, Enum):
    r"""State of the device. The value should be either `assigned` to list devices that have been assigned to user(s) or `unassigned` to list devices that have not yet been assigned to any user in the Zoom account."""
    ASSIGNED = 'assigned'
    UNASSIGNED = 'unassigned'


@dataclasses.dataclass
class ListPhoneDevicesRequest:
    
    type: ListPhoneDevicesTypeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""State of the device. The value should be either `assigned` to list devices that have been assigned to user(s) or `unassigned` to list devices that have not yet been assigned to any user in the Zoom account."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class ListPhoneDevices200ApplicationXMLDevicesAssignee:
    
    extension_number: Optional[int] = dataclasses.field(default=None)
    r"""Extension number of the Zoom Phone used by the user."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""User ID of the user to whom the device has been assigned."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the user."""  
    

@dataclasses.dataclass
class ListPhoneDevices200ApplicationXMLDevicesSite:
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672)."""  
    
class ListPhoneDevices200ApplicationXMLDevicesStatusEnum(str, Enum):
    r"""Status of the device. The value is either `online` or `offline`."""
    ONLINE = 'online'
    OFFLINE = 'offline'


@dataclasses.dataclass
class ListPhoneDevices200ApplicationXMLDevices:
    
    assignee: Optional[ListPhoneDevices200ApplicationXMLDevicesAssignee] = dataclasses.field(default=None)  
    device_type: Optional[str] = dataclasses.field(default=None)
    r"""Includes manufacturer name and the model name."""  
    display_name: Optional[str] = dataclasses.field(default=None)
    r"""Display name of the device."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Device ID - Unique Identifier of the Device."""  
    mac_address: Optional[str] = dataclasses.field(default=None)
    r"""MAC address or serial number of the device."""  
    site: Optional[ListPhoneDevices200ApplicationXMLDevicesSite] = dataclasses.field(default=None)  
    status: Optional[ListPhoneDevices200ApplicationXMLDevicesStatusEnum] = dataclasses.field(default=None)
    r"""Status of the device. The value is either `online` or `offline`."""  
    

@dataclasses.dataclass
class ListPhoneDevices200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Devices listed successfully.
    """
    
    devices: Optional[list[ListPhoneDevices200ApplicationXMLDevices]] = dataclasses.field(default=None)  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned with a single API call."""  
    total_records: Optional[str] = dataclasses.field(default=None)
    r"""The total number of records found for the query across all pages."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListPhoneDevices200ApplicationJSONDevicesAssignee:
    
    extension_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})
    r"""Extension number of the Zoom Phone used by the user."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""User ID of the user to whom the device has been assigned."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListPhoneDevices200ApplicationJSONDevicesSite:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672)."""  
    
class ListPhoneDevices200ApplicationJSONDevicesStatusEnum(str, Enum):
    r"""Status of the device. The value is either `online` or `offline`."""
    ONLINE = 'online'
    OFFLINE = 'offline'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListPhoneDevices200ApplicationJSONDevices:
    
    assignee: Optional[ListPhoneDevices200ApplicationJSONDevicesAssignee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee'), 'exclude': lambda f: f is None }})  
    device_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_type'), 'exclude': lambda f: f is None }})
    r"""Includes manufacturer name and the model name."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Display name of the device."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Device ID - Unique Identifier of the Device."""  
    mac_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac_address'), 'exclude': lambda f: f is None }})
    r"""MAC address or serial number of the device."""  
    site: Optional[ListPhoneDevices200ApplicationJSONDevicesSite] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})  
    status: Optional[ListPhoneDevices200ApplicationJSONDevicesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the device. The value is either `online` or `offline`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListPhoneDevices200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Devices listed successfully.
    """
    
    devices: Optional[list[ListPhoneDevices200ApplicationJSONDevices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices'), 'exclude': lambda f: f is None }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned with a single API call."""  
    total_records: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records found for the query across all pages."""  
    

@dataclasses.dataclass
class ListPhoneDevicesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_phone_devices_200_application_json_object: Optional[ListPhoneDevices200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Devices listed successfully.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    