"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from enum import Enum
from typing import Optional

class GETModifyClusterMaintenanceActionEnum(str, Enum):
    MODIFY_CLUSTER_MAINTENANCE = 'ModifyClusterMaintenance'

class GETModifyClusterMaintenanceVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TWELVE_12_01 = '2012-12-01'


@dataclasses.dataclass
class GETModifyClusterMaintenanceRequest:
    
    action: GETModifyClusterMaintenanceActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    cluster_identifier: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ClusterIdentifier', 'style': 'form', 'explode': True }})
    r"""A unique identifier for the cluster."""  
    version: GETModifyClusterMaintenanceVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    defer_maintenance: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DeferMaintenance', 'style': 'form', 'explode': True }})
    r"""A boolean indicating whether to enable the deferred maintenance window."""  
    defer_maintenance_duration: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DeferMaintenanceDuration', 'style': 'form', 'explode': True }})
    r"""An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less."""  
    defer_maintenance_end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DeferMaintenanceEndTime', 'style': 'form', 'explode': True }})
    r"""A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration."""  
    defer_maintenance_identifier: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DeferMaintenanceIdentifier', 'style': 'form', 'explode': True }})
    r"""A unique identifier for the deferred maintenance window."""  
    defer_maintenance_start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DeferMaintenanceStartTime', 'style': 'form', 'explode': True }})
    r"""A timestamp indicating the start time for the deferred maintenance window."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyClusterMaintenanceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    