"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AllDocksRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand"""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AllDocks200ApplicationJSONPickupStoreInfo1:
    
    additional_info: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfo') }})  
    address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    dock_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId') }})  
    friendly_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendlyName') }})  
    is_pickup_store: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPickupStore') }})  
    store_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeId') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AllDocks200ApplicationJSON:
    
    dock_time_fake: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockTimeFake') }})  
    freight_table_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freightTableIds') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    pickup_store_info: AllDocks200ApplicationJSONPickupStoreInfo1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupStoreInfo') }})  
    priority: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority') }})  
    sales_channel: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel') }})  
    sales_channels: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannels') }})  
    time_fake_overhead: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeFakeOverhead') }})  
    wms_end_point: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wmsEndPoint') }})  
    

@dataclasses.dataclass
class AllDocksResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    all_docks_200_application_json_objects: Optional[list[AllDocks200ApplicationJSON]] = dataclasses.field(default=None)
    r"""OK"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    