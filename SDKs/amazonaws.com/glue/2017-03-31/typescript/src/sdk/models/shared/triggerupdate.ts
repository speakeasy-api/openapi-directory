/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Action } from "./action";
import { EventBatchingCondition } from "./eventbatchingcondition";
import { Predicate } from "./predicate";
import { Expose, Type } from "class-transformer";

/**
 * A structure used to provide information used to update a trigger. This object updates the previous trigger definition by overwriting it completely.
 */
export class TriggerUpdate extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Action })
  @Expose({ name: "Actions" })
  @Type(() => Action)
  actions?: Action[];

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EventBatchingCondition" })
  @Type(() => EventBatchingCondition)
  eventBatchingCondition?: EventBatchingCondition;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Predicate" })
  @Type(() => Predicate)
  predicate?: Predicate;

  @SpeakeasyMetadata()
  @Expose({ name: "Schedule" })
  schedule?: string;
}
