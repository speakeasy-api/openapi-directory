"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DevicesRegisterUserForDeviceSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DevicesRegisterUserForDeviceRequestBody:
    r"""The information for a single iOS device"""
    
    model: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""The model identifier of the device, in the format iDeviceM,N"""  
    udid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udid') }})
    r"""The Unique Device IDentifier of the device"""  
    imei: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imei'), 'exclude': lambda f: f is None }})
    r"""The device's International Mobile Equipment Identity number. Always empty or undefined at present."""  
    os_build: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_build'), 'exclude': lambda f: f is None }})
    r"""The build number of the last known OS version running on the device"""  
    os_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_version'), 'exclude': lambda f: f is None }})
    r"""The last known OS version running on the device"""  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_id'), 'exclude': lambda f: f is None }})
    r"""The user ID of the device owner."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The device's serial number. Always empty or undefined at present."""  
    

@dataclasses.dataclass
class DevicesRegisterUserForDeviceRequest:
    
    request_body: DevicesRegisterUserForDeviceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The device info."""  
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the user"""  
    
class DevicesRegisterUserForDevice404ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DevicesRegisterUserForDevice404ApplicationJSON:
    r"""<b>not_found</b>: The user or the device can't be found."""
    
    code: DevicesRegisterUserForDevice404ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DevicesRegisterUserForDevice200ApplicationJSON:
    r"""The information for a single iOS device"""
    
    device_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_name') }})
    r"""The device description, in the format \\"iPhone 7 Plus (A1784)\\" """  
    model: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""The model identifier of the device, in the format iDeviceM,N"""  
    os_build: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_build') }})
    r"""The last known OS version running on the device"""  
    os_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_version') }})
    r"""The last known OS version running on the device"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The provisioning status of the device."""  
    udid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udid') }})
    r"""The Unique Device IDentifier of the device"""  
    full_device_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_device_name'), 'exclude': lambda f: f is None }})
    r"""A combination of the device model name and the owner name."""  
    imei: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imei'), 'exclude': lambda f: f is None }})
    r"""The device's International Mobile Equipment Identity number. Always empty or undefined at present."""  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_id'), 'exclude': lambda f: f is None }})
    r"""The user ID of the device owner."""  
    registered_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registered_at'), 'exclude': lambda f: f is None }})
    r"""Timestamp of when the device was registered in ISO format."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The device's serial number. Always empty or undefined at present."""  
    

@dataclasses.dataclass
class DevicesRegisterUserForDeviceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    devices_register_user_for_device_200_application_json_object: Optional[DevicesRegisterUserForDevice200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    devices_register_user_for_device_404_application_json_object: Optional[DevicesRegisterUserForDevice404ApplicationJSON] = dataclasses.field(default=None)
    r"""<b>not_found</b>: The user or the device can't be found."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    