"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Notifications:
    r"""User notifications management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_notifications_id_(self, request: operations.DeleteNotificationsIDRequest) -> operations.DeleteNotificationsIDResponse:
        r"""Delete a Notification"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNotificationsIDRequest, base_url, '/notifications/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNotificationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_notifications(self, request: operations.GetNotificationsRequest) -> operations.GetNotificationsResponse:
        r"""Fetch a list of Notifications
        Without params, it returns a list of Notifications the user has access to
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/notifications'
        
        query_params = utils.get_query_params(operations.GetNotificationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNotificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Notification]])
                res.notifications = out

        return res

    def get_notifications_types(self) -> operations.GetNotificationsTypesResponse:
        r"""Fetch a list of available Notification types"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/notifications/types'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNotificationsTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NotificationType]])
                res.notification_types = out

        return res

    def post_notifications(self, request: shared.Notification) -> operations.PostNotificationsResponse:
        r"""Create a Notification"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/notifications'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostNotificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Notification])
                res.notification = out

        return res

    def post_notifications_test(self) -> operations.PostNotificationsTestResponse:
        r"""Send test notification to current user via Email and SMS"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/notifications/test'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostNotificationsTestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_notifications_id_(self, request: operations.PutNotificationsIDRequest) -> operations.PutNotificationsIDResponse:
        r"""Update a Notification"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutNotificationsIDRequest, base_url, '/notifications/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "notification", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutNotificationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Notification])
                res.notification = out

        return res

    