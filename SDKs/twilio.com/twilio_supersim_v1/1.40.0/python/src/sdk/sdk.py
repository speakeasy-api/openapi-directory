"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://supersim.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_esim_profile(self, request: operations.CreateEsimProfileCreateEsimProfileRequest, security: operations.CreateEsimProfileSecurity, server_url: Optional[str] = None) -> operations.CreateEsimProfileResponse:
        r"""Order an eSIM Profile."""
        base_url = operations.CREATE_ESIM_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/ESimProfiles'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateEsimProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1EsimProfile])
                res.supersim_v1_esim_profile = out

        return res

    def create_fleet(self, request: operations.CreateFleetCreateFleetRequest, security: operations.CreateFleetSecurity, server_url: Optional[str] = None) -> operations.CreateFleetResponse:
        r"""Create a Fleet"""
        base_url = operations.CREATE_FLEET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Fleets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFleetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1Fleet])
                res.supersim_v1_fleet = out

        return res

    def create_ip_command(self, request: operations.CreateIPCommandCreateIPCommandRequest, security: operations.CreateIPCommandSecurity, server_url: Optional[str] = None) -> operations.CreateIPCommandResponse:
        r"""Send an IP Command to a Super SIM."""
        base_url = operations.CREATE_IP_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/IpCommands'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateIPCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1IPCommand])
                res.supersim_v1_ip_command = out

        return res

    def create_network_access_profile(self, request: operations.CreateNetworkAccessProfileCreateNetworkAccessProfileRequest, security: operations.CreateNetworkAccessProfileSecurity, server_url: Optional[str] = None) -> operations.CreateNetworkAccessProfileResponse:
        r"""Create a new Network Access Profile"""
        base_url = operations.CREATE_NETWORK_ACCESS_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/NetworkAccessProfiles'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkAccessProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1NetworkAccessProfile])
                res.supersim_v1_network_access_profile = out

        return res

    def create_network_access_profile_network(self, request: operations.CreateNetworkAccessProfileNetworkRequest, security: operations.CreateNetworkAccessProfileNetworkSecurity, server_url: Optional[str] = None) -> operations.CreateNetworkAccessProfileNetworkResponse:
        r"""Add a Network resource to the Network Access Profile resource."""
        base_url = operations.CREATE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateNetworkAccessProfileNetworkRequest, base_url, '/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkAccessProfileNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork])
                res.supersim_v1_network_access_profile_network_access_profile_network = out

        return res

    def create_sim(self, request: operations.CreateSimCreateSimRequest, security: operations.CreateSimSecurity, server_url: Optional[str] = None) -> operations.CreateSimResponse:
        r"""Register a Super SIM to your Account"""
        base_url = operations.CREATE_SIM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Sims'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1Sim])
                res.supersim_v1_sim = out

        return res

    def create_sms_command(self, request: operations.CreateSmsCommandCreateSmsCommandRequest, security: operations.CreateSmsCommandSecurity, server_url: Optional[str] = None) -> operations.CreateSmsCommandResponse:
        r"""Send SMS Command to a Sim."""
        base_url = operations.CREATE_SMS_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/SmsCommands'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSmsCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1SmsCommand])
                res.supersim_v1_sms_command = out

        return res

    def delete_network_access_profile_network(self, request: operations.DeleteNetworkAccessProfileNetworkRequest, security: operations.DeleteNetworkAccessProfileNetworkSecurity, server_url: Optional[str] = None) -> operations.DeleteNetworkAccessProfileNetworkResponse:
        r"""Remove a Network resource from the Network Access Profile resource's."""
        base_url = operations.DELETE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteNetworkAccessProfileNetworkRequest, base_url, '/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkAccessProfileNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_esim_profile(self, request: operations.FetchEsimProfileRequest, security: operations.FetchEsimProfileSecurity, server_url: Optional[str] = None) -> operations.FetchEsimProfileResponse:
        r"""Fetch an eSIM Profile."""
        base_url = operations.FETCH_ESIM_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchEsimProfileRequest, base_url, '/v1/ESimProfiles/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchEsimProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1EsimProfile])
                res.supersim_v1_esim_profile = out

        return res

    def fetch_fleet(self, request: operations.FetchFleetRequest, security: operations.FetchFleetSecurity, server_url: Optional[str] = None) -> operations.FetchFleetResponse:
        r"""Fetch a Fleet instance from your account."""
        base_url = operations.FETCH_FLEET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchFleetRequest, base_url, '/v1/Fleets/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchFleetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1Fleet])
                res.supersim_v1_fleet = out

        return res

    def fetch_ip_command(self, request: operations.FetchIPCommandRequest, security: operations.FetchIPCommandSecurity, server_url: Optional[str] = None) -> operations.FetchIPCommandResponse:
        r"""Fetch IP Command instance from your account."""
        base_url = operations.FETCH_IP_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchIPCommandRequest, base_url, '/v1/IpCommands/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchIPCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1IPCommand])
                res.supersim_v1_ip_command = out

        return res

    def fetch_network(self, request: operations.FetchNetworkRequest, security: operations.FetchNetworkSecurity, server_url: Optional[str] = None) -> operations.FetchNetworkResponse:
        r"""Fetch a Network resource."""
        base_url = operations.FETCH_NETWORK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchNetworkRequest, base_url, '/v1/Networks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1Network])
                res.supersim_v1_network = out

        return res

    def fetch_network_access_profile(self, request: operations.FetchNetworkAccessProfileRequest, security: operations.FetchNetworkAccessProfileSecurity, server_url: Optional[str] = None) -> operations.FetchNetworkAccessProfileResponse:
        r"""Fetch a Network Access Profile instance from your account."""
        base_url = operations.FETCH_NETWORK_ACCESS_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchNetworkAccessProfileRequest, base_url, '/v1/NetworkAccessProfiles/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchNetworkAccessProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1NetworkAccessProfile])
                res.supersim_v1_network_access_profile = out

        return res

    def fetch_network_access_profile_network(self, request: operations.FetchNetworkAccessProfileNetworkRequest, security: operations.FetchNetworkAccessProfileNetworkSecurity, server_url: Optional[str] = None) -> operations.FetchNetworkAccessProfileNetworkResponse:
        r"""Fetch a Network Access Profile resource's Network resource."""
        base_url = operations.FETCH_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchNetworkAccessProfileNetworkRequest, base_url, '/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchNetworkAccessProfileNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork])
                res.supersim_v1_network_access_profile_network_access_profile_network = out

        return res

    def fetch_sim(self, request: operations.FetchSimRequest, security: operations.FetchSimSecurity, server_url: Optional[str] = None) -> operations.FetchSimResponse:
        r"""Fetch a Super SIM instance from your account."""
        base_url = operations.FETCH_SIM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSimRequest, base_url, '/v1/Sims/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1Sim])
                res.supersim_v1_sim = out

        return res

    def fetch_sms_command(self, request: operations.FetchSmsCommandRequest, security: operations.FetchSmsCommandSecurity, server_url: Optional[str] = None) -> operations.FetchSmsCommandResponse:
        r"""Fetch SMS Command instance from your account."""
        base_url = operations.FETCH_SMS_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSmsCommandRequest, base_url, '/v1/SmsCommands/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSmsCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1SmsCommand])
                res.supersim_v1_sms_command = out

        return res

    def list_billing_period(self, request: operations.ListBillingPeriodRequest, security: operations.ListBillingPeriodSecurity, server_url: Optional[str] = None) -> operations.ListBillingPeriodResponse:
        r"""Retrieve a list of Billing Periods for a Super SIM."""
        base_url = operations.LIST_BILLING_PERIOD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListBillingPeriodRequest, base_url, '/v1/Sims/{SimSid}/BillingPeriods', request)
        
        query_params = utils.get_query_params(operations.ListBillingPeriodRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListBillingPeriodResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListBillingPeriodListBillingPeriodResponse])
                res.list_billing_period_response = out

        return res

    def list_esim_profile(self, request: operations.ListEsimProfileRequest, security: operations.ListEsimProfileSecurity, server_url: Optional[str] = None) -> operations.ListEsimProfileResponse:
        r"""Retrieve a list of eSIM Profiles."""
        base_url = operations.LIST_ESIM_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/ESimProfiles'
        
        query_params = utils.get_query_params(operations.ListEsimProfileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEsimProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListEsimProfileListEsimProfileResponse])
                res.list_esim_profile_response = out

        return res

    def list_fleet(self, request: operations.ListFleetRequest, security: operations.ListFleetSecurity, server_url: Optional[str] = None) -> operations.ListFleetResponse:
        r"""Retrieve a list of Fleets from your account."""
        base_url = operations.LIST_FLEET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Fleets'
        
        query_params = utils.get_query_params(operations.ListFleetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFleetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListFleetListFleetResponse])
                res.list_fleet_response = out

        return res

    def list_ip_command(self, request: operations.ListIPCommandRequest, security: operations.ListIPCommandSecurity, server_url: Optional[str] = None) -> operations.ListIPCommandResponse:
        r"""Retrieve a list of IP Commands from your account."""
        base_url = operations.LIST_IP_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/IpCommands'
        
        query_params = utils.get_query_params(operations.ListIPCommandRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListIPCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListIPCommandListIPCommandResponse])
                res.list_ip_command_response = out

        return res

    def list_network(self, request: operations.ListNetworkRequest, security: operations.ListNetworkSecurity, server_url: Optional[str] = None) -> operations.ListNetworkResponse:
        r"""Retrieve a list of Network resources."""
        base_url = operations.LIST_NETWORK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Networks'
        
        query_params = utils.get_query_params(operations.ListNetworkRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListNetworkListNetworkResponse])
                res.list_network_response = out

        return res

    def list_network_access_profile(self, request: operations.ListNetworkAccessProfileRequest, security: operations.ListNetworkAccessProfileSecurity, server_url: Optional[str] = None) -> operations.ListNetworkAccessProfileResponse:
        r"""Retrieve a list of Network Access Profiles from your account."""
        base_url = operations.LIST_NETWORK_ACCESS_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/NetworkAccessProfiles'
        
        query_params = utils.get_query_params(operations.ListNetworkAccessProfileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListNetworkAccessProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListNetworkAccessProfileListNetworkAccessProfileResponse])
                res.list_network_access_profile_response = out

        return res

    def list_network_access_profile_network(self, request: operations.ListNetworkAccessProfileNetworkRequest, security: operations.ListNetworkAccessProfileNetworkSecurity, server_url: Optional[str] = None) -> operations.ListNetworkAccessProfileNetworkResponse:
        r"""Retrieve a list of Network Access Profile resource's Network resource."""
        base_url = operations.LIST_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListNetworkAccessProfileNetworkRequest, base_url, '/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks', request)
        
        query_params = utils.get_query_params(operations.ListNetworkAccessProfileNetworkRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListNetworkAccessProfileNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListNetworkAccessProfileNetworkListNetworkAccessProfileNetworkResponse])
                res.list_network_access_profile_network_response = out

        return res

    def list_settings_update(self, request: operations.ListSettingsUpdateRequest, security: operations.ListSettingsUpdateSecurity, server_url: Optional[str] = None) -> operations.ListSettingsUpdateResponse:
        r"""Retrieve a list of Settings Updates."""
        base_url = operations.LIST_SETTINGS_UPDATE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/SettingsUpdates'
        
        query_params = utils.get_query_params(operations.ListSettingsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSettingsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSettingsUpdateListSettingsUpdateResponse])
                res.list_settings_update_response = out

        return res

    def list_sim(self, request: operations.ListSimRequest, security: operations.ListSimSecurity, server_url: Optional[str] = None) -> operations.ListSimResponse:
        r"""Retrieve a list of Super SIMs from your account."""
        base_url = operations.LIST_SIM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Sims'
        
        query_params = utils.get_query_params(operations.ListSimRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSimListSimResponse])
                res.list_sim_response = out

        return res

    def list_sim_ip_address(self, request: operations.ListSimIPAddressRequest, security: operations.ListSimIPAddressSecurity, server_url: Optional[str] = None) -> operations.ListSimIPAddressResponse:
        r"""Retrieve a list of IP Addresses for the given Super SIM."""
        base_url = operations.LIST_SIM_IP_ADDRESS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSimIPAddressRequest, base_url, '/v1/Sims/{SimSid}/IpAddresses', request)
        
        query_params = utils.get_query_params(operations.ListSimIPAddressRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSimIPAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSimIPAddressListSimIPAddressResponse])
                res.list_sim_ip_address_response = out

        return res

    def list_sms_command(self, request: operations.ListSmsCommandRequest, security: operations.ListSmsCommandSecurity, server_url: Optional[str] = None) -> operations.ListSmsCommandResponse:
        r"""Retrieve a list of SMS Commands from your account."""
        base_url = operations.LIST_SMS_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/SmsCommands'
        
        query_params = utils.get_query_params(operations.ListSmsCommandRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSmsCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSmsCommandListSmsCommandResponse])
                res.list_sms_command_response = out

        return res

    def list_usage_record(self, request: operations.ListUsageRecordRequest, security: operations.ListUsageRecordSecurity, server_url: Optional[str] = None) -> operations.ListUsageRecordResponse:
        r"""List UsageRecords"""
        base_url = operations.LIST_USAGE_RECORD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/UsageRecords'
        
        query_params = utils.get_query_params(operations.ListUsageRecordRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListUsageRecordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListUsageRecordListUsageRecordResponse])
                res.list_usage_record_response = out

        return res

    def update_fleet(self, request: operations.UpdateFleetRequest, security: operations.UpdateFleetSecurity, server_url: Optional[str] = None) -> operations.UpdateFleetResponse:
        r"""Updates the given properties of a Super SIM Fleet instance from your account."""
        base_url = operations.UPDATE_FLEET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateFleetRequest, base_url, '/v1/Fleets/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFleetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1Fleet])
                res.supersim_v1_fleet = out

        return res

    def update_network_access_profile(self, request: operations.UpdateNetworkAccessProfileRequest, security: operations.UpdateNetworkAccessProfileSecurity, server_url: Optional[str] = None) -> operations.UpdateNetworkAccessProfileResponse:
        r"""Updates the given properties of a Network Access Profile in your account."""
        base_url = operations.UPDATE_NETWORK_ACCESS_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateNetworkAccessProfileRequest, base_url, '/v1/NetworkAccessProfiles/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkAccessProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1NetworkAccessProfile])
                res.supersim_v1_network_access_profile = out

        return res

    def update_sim(self, request: operations.UpdateSimRequest, security: operations.UpdateSimSecurity, server_url: Optional[str] = None) -> operations.UpdateSimResponse:
        r"""Updates the given properties of a Super SIM instance from your account."""
        base_url = operations.UPDATE_SIM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSimRequest, base_url, '/v1/Sims/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 202]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupersimV1Sim])
                res.supersim_v1_sim = out

        return res

    