"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Team:
    r"""Successful response"""
    
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    r"""TBA team key with the format `frcXXXX` with `XXXX` representing the team number."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Official long name registered with FIRST."""  
    team_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_number') }})
    r"""Official team number issued by FIRST."""  
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Will be NULL, for future development."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of team derived from parsing the address registered with FIRST."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Country of team derived from parsing the address registered with FIRST."""  
    gmaps_place_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gmaps_place_id'), 'exclude': lambda f: f is None }})
    r"""Will be NULL, for future development."""  
    gmaps_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gmaps_url'), 'exclude': lambda f: f is None }})
    r"""Will be NULL, for future development."""  
    home_championship: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_championship'), 'exclude': lambda f: f is None }})
    r"""Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value."""  
    lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})
    r"""Will be NULL, for future development."""  
    lng: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lng'), 'exclude': lambda f: f is None }})
    r"""Will be NULL, for future development."""  
    location_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_name'), 'exclude': lambda f: f is None }})
    r"""Will be NULL, for future development."""  
    motto: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('motto'), 'exclude': lambda f: f is None }})
    r"""Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019."""  
    nickname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nickname'), 'exclude': lambda f: f is None }})
    r"""Team nickname provided by FIRST."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postal_code'), 'exclude': lambda f: f is None }})
    r"""Postal code from the team address."""  
    rookie_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rookie_year'), 'exclude': lambda f: f is None }})
    r"""First year the team officially competed."""  
    school_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('school_name'), 'exclude': lambda f: f is None }})
    r"""Name of team school or affilited group registered with FIRST."""  
    state_prov: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_prov'), 'exclude': lambda f: f is None }})
    r"""State of team derived from parsing the address registered with FIRST."""  
    website: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website'), 'exclude': lambda f: f is None }})
    r"""Official website associated with the team."""  
    