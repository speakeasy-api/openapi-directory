// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OAuth2PermissionGrantConsentTypeEnum - Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.
type OAuth2PermissionGrantConsentTypeEnum string

const (
	OAuth2PermissionGrantConsentTypeEnumAllPrincipals OAuth2PermissionGrantConsentTypeEnum = "AllPrincipals"
	OAuth2PermissionGrantConsentTypeEnumPrincipal     OAuth2PermissionGrantConsentTypeEnum = "Principal"
)

func (e *OAuth2PermissionGrantConsentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AllPrincipals":
		fallthrough
	case "Principal":
		*e = OAuth2PermissionGrantConsentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OAuth2PermissionGrantConsentTypeEnum: %s", s)
	}
}

// OAuth2PermissionGrant - The relevant app Service Principal Object Id and the Service Principal Object Id you want to grant.
type OAuth2PermissionGrant struct {
	// The id of the resource's service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property).
	ClientID *string `json:"clientId,omitempty"`
	// Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.
	ConsentType *OAuth2PermissionGrantConsentTypeEnum `json:"consentType,omitempty"`
	// Expiry time for TTL
	ExpiryTime *string `json:"expiryTime,omitempty"`
	// The id of the permission grant
	ObjectID *string `json:"objectId,omitempty"`
	// Microsoft.DirectoryServices.OAuth2PermissionGrant
	OdataType *string `json:"odata.type,omitempty"`
	// When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user.
	PrincipalID *string `json:"principalId,omitempty"`
	// Object Id of the resource you want to grant
	ResourceID *string `json:"resourceId,omitempty"`
	// Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read
	Scope *string `json:"scope,omitempty"`
	// Start time for TTL
	StartTime *string `json:"startTime,omitempty"`
}
