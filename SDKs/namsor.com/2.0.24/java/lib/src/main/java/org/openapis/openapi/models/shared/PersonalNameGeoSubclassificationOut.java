/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PersonalNameGeoSubclassificationOut - Classified names at sub country level (region or state)
 */
public class PersonalNameGeoSubclassificationOut {
    /**
     * The input country ISO2 code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryIso2")
    public String countryIso2;

    public PersonalNameGeoSubclassificationOut withCountryIso2(String countryIso2) {
        this.countryIso2 = countryIso2;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public PersonalNameGeoSubclassificationOut withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The input name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public PersonalNameGeoSubclassificationOut withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("probabilityAltCalibrated")
    public Double probabilityAltCalibrated;

    public PersonalNameGeoSubclassificationOut withProbabilityAltCalibrated(Double probabilityAltCalibrated) {
        this.probabilityAltCalibrated = probabilityAltCalibrated;
        return this;
    }
    
    /**
     * The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("probabilityCalibrated")
    public Double probabilityCalibrated;

    public PersonalNameGeoSubclassificationOut withProbabilityCalibrated(Double probabilityCalibrated) {
        this.probabilityCalibrated = probabilityCalibrated;
        return this;
    }
    
    /**
     * Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    public Double score;

    public PersonalNameGeoSubclassificationOut withScore(Double score) {
        this.score = score;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("script")
    public String script;

    public PersonalNameGeoSubclassificationOut withScript(String script) {
        this.script = script;
        return this;
    }
    
    /**
     * Most likely subclassification ISO_3166-2 code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subClassification")
    public String subClassification;

    public PersonalNameGeoSubclassificationOut withSubClassification(String subClassification) {
        this.subClassification = subClassification;
        return this;
    }
    
    /**
     * Second best alternative : subclassification ISO_3166-2 code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subClassificationAlt")
    public String subClassificationAlt;

    public PersonalNameGeoSubclassificationOut withSubClassificationAlt(String subClassificationAlt) {
        this.subClassificationAlt = subClassificationAlt;
        return this;
    }
    
    /**
     * List subclassification ISO_3166-2 codes (top 10)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subclassificationTop")
    public String[] subclassificationTop;

    public PersonalNameGeoSubclassificationOut withSubclassificationTop(String[] subclassificationTop) {
        this.subclassificationTop = subclassificationTop;
        return this;
    }
    
    public PersonalNameGeoSubclassificationOut(){}
}
