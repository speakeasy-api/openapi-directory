// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateStreamModeXAmzTargetEnum
type UpdateStreamModeXAmzTargetEnum string

const (
	UpdateStreamModeXAmzTargetEnumKinesis20131202UpdateStreamMode UpdateStreamModeXAmzTargetEnum = "Kinesis_20131202.UpdateStreamMode"
)

func (e UpdateStreamModeXAmzTargetEnum) ToPointer() *UpdateStreamModeXAmzTargetEnum {
	return &e
}

func (e *UpdateStreamModeXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Kinesis_20131202.UpdateStreamMode":
		*e = UpdateStreamModeXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStreamModeXAmzTargetEnum: %v", v)
	}
}

type UpdateStreamModeRequest struct {
	UpdateStreamModeInput shared.UpdateStreamModeInput   `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            UpdateStreamModeXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateStreamModeResponse struct {
	ContentType string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
}
