/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class CreateResourceResponse {
    /**
     * AlreadyExistsException
     */
    
    public Object alreadyExistsException;

    public CreateResourceResponse withAlreadyExistsException(Object alreadyExistsException) {
        this.alreadyExistsException = alreadyExistsException;
        return this;
    }
    
    /**
     * ClientTokenConflictException
     */
    
    public Object clientTokenConflictException;

    public CreateResourceResponse withClientTokenConflictException(Object clientTokenConflictException) {
        this.clientTokenConflictException = clientTokenConflictException;
        return this;
    }
    
    /**
     * ConcurrentOperationException
     */
    
    public Object concurrentOperationException;

    public CreateResourceResponse withConcurrentOperationException(Object concurrentOperationException) {
        this.concurrentOperationException = concurrentOperationException;
        return this;
    }
    
    
    public String contentType;

    public CreateResourceResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.CreateResourceOutput createResourceOutput;

    public CreateResourceResponse withCreateResourceOutput(org.openapis.openapi.models.shared.CreateResourceOutput createResourceOutput) {
        this.createResourceOutput = createResourceOutput;
        return this;
    }
    
    /**
     * GeneralServiceException
     */
    
    public Object generalServiceException;

    public CreateResourceResponse withGeneralServiceException(Object generalServiceException) {
        this.generalServiceException = generalServiceException;
        return this;
    }
    
    /**
     * HandlerFailureException
     */
    
    public Object handlerFailureException;

    public CreateResourceResponse withHandlerFailureException(Object handlerFailureException) {
        this.handlerFailureException = handlerFailureException;
        return this;
    }
    
    /**
     * HandlerInternalFailureException
     */
    
    public Object handlerInternalFailureException;

    public CreateResourceResponse withHandlerInternalFailureException(Object handlerInternalFailureException) {
        this.handlerInternalFailureException = handlerInternalFailureException;
        return this;
    }
    
    /**
     * InvalidCredentialsException
     */
    
    public Object invalidCredentialsException;

    public CreateResourceResponse withInvalidCredentialsException(Object invalidCredentialsException) {
        this.invalidCredentialsException = invalidCredentialsException;
        return this;
    }
    
    /**
     * InvalidRequestException
     */
    
    public Object invalidRequestException;

    public CreateResourceResponse withInvalidRequestException(Object invalidRequestException) {
        this.invalidRequestException = invalidRequestException;
        return this;
    }
    
    /**
     * NetworkFailureException
     */
    
    public Object networkFailureException;

    public CreateResourceResponse withNetworkFailureException(Object networkFailureException) {
        this.networkFailureException = networkFailureException;
        return this;
    }
    
    /**
     * NotStabilizedException
     */
    
    public Object notStabilizedException;

    public CreateResourceResponse withNotStabilizedException(Object notStabilizedException) {
        this.notStabilizedException = notStabilizedException;
        return this;
    }
    
    /**
     * NotUpdatableException
     */
    
    public Object notUpdatableException;

    public CreateResourceResponse withNotUpdatableException(Object notUpdatableException) {
        this.notUpdatableException = notUpdatableException;
        return this;
    }
    
    /**
     * PrivateTypeException
     */
    
    public Object privateTypeException;

    public CreateResourceResponse withPrivateTypeException(Object privateTypeException) {
        this.privateTypeException = privateTypeException;
        return this;
    }
    
    /**
     * ResourceConflictException
     */
    
    public Object resourceConflictException;

    public CreateResourceResponse withResourceConflictException(Object resourceConflictException) {
        this.resourceConflictException = resourceConflictException;
        return this;
    }
    
    /**
     * ResourceNotFoundException
     */
    
    public Object resourceNotFoundException;

    public CreateResourceResponse withResourceNotFoundException(Object resourceNotFoundException) {
        this.resourceNotFoundException = resourceNotFoundException;
        return this;
    }
    
    /**
     * ServiceInternalErrorException
     */
    
    public Object serviceInternalErrorException;

    public CreateResourceResponse withServiceInternalErrorException(Object serviceInternalErrorException) {
        this.serviceInternalErrorException = serviceInternalErrorException;
        return this;
    }
    
    /**
     * ServiceLimitExceededException
     */
    
    public Object serviceLimitExceededException;

    public CreateResourceResponse withServiceLimitExceededException(Object serviceLimitExceededException) {
        this.serviceLimitExceededException = serviceLimitExceededException;
        return this;
    }
    
    
    public Integer statusCode;

    public CreateResourceResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public CreateResourceResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * ThrottlingException
     */
    
    public Object throttlingException;

    public CreateResourceResponse withThrottlingException(Object throttlingException) {
        this.throttlingException = throttlingException;
        return this;
    }
    
    /**
     * TypeNotFoundException
     */
    
    public Object typeNotFoundException;

    public CreateResourceResponse withTypeNotFoundException(Object typeNotFoundException) {
        this.typeNotFoundException = typeNotFoundException;
        return this;
    }
    
    /**
     * UnsupportedActionException
     */
    
    public Object unsupportedActionException;

    public CreateResourceResponse withUnsupportedActionException(Object unsupportedActionException) {
        this.unsupportedActionException = unsupportedActionException;
        return this;
    }
    
    public CreateResourceResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
