<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TargetPools 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds health check URLs to a target pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckResponse
     */
	public function computeTargetPoolsAddHealthCheck(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetPoolsAddHealthCheckRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddHealthCheckResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds an instance to a target pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceResponse
     */
	public function computeTargetPoolsAddInstance(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetPoolsAddInstanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAddInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an aggregated list of target pools.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListResponse
     */
	public function computeTargetPoolsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/targetPools', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetPoolAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetPoolAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified target pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteResponse
     */
	public function computeTargetPoolsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified target pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetResponse
     */
	public function computeTargetPoolsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetPool = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetPool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthResponse
     */
	public function computeTargetPoolsGetHealth(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsGetHealthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetPoolInstanceHealth = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetPoolInstanceHealth', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a target pool in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertResponse
     */
	public function computeTargetPoolsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetPool", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of target pools available to the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListResponse
     */
	public function computeTargetPoolsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetPoolList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetPoolList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes health check URL from a target pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckResponse
     */
	public function computeTargetPoolsRemoveHealthCheck(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetPoolsRemoveHealthCheckRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveHealthCheckResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes instance URL from a target pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceResponse
     */
	public function computeTargetPoolsRemoveInstance(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetPoolsRemoveInstanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsRemoveInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes a backup target pool's configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupResponse
     */
	public function computeTargetPoolsSetBackup(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetBackupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the Google Cloud Armor security policy for the specified target pool. For more information, see Google Cloud Armor Overview
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicyResponse
     */
	public function computeTargetPoolsSetSecurityPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{targetPool}/setSecurityPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsSetSecurityPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsResponse
     */
	public function computeTargetPoolsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetPoolsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}