"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class KeywordLeaseStatusEnum(str, Enum):
    r"""A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE"""
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    RELEASED = 'RELEASED'
    UNAVAILABLE = 'UNAVAILABLE'

class KeywordLeaseTypeEnum(str, Enum):
    r"""~"""
    PLAN = 'PLAN'
    EXTRA = 'EXTRA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KeywordLease:
    r"""Represents a lease object for a given keyword"""
    
    auto_renew: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRenew'), 'exclude': lambda f: f is None }})
    r"""Enables the auto renewal of a keyword lease at the end of each billing cycle"""  
    contact_list_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactListId'), 'exclude': lambda f: f is None }})
    r"""Existing contact list ID"""  
    double_opt_in_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doubleOptInEnabled'), 'exclude': lambda f: f is None }})
    r"""Enable/disable double opt in feature"""  
    keyword: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyword'), 'exclude': lambda f: f is None }})
    r"""A text used as a keyword"""  
    labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""~"""  
    lease_begin: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leaseBegin'), 'exclude': lambda f: f is None }})
    r"""A time of a lease timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT"""  
    lease_end: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leaseEnd'), 'exclude': lambda f: f is None }})
    r"""A date and time when the keyword lease is finishes. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000"""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""A number assigned to keyword. Example: 12132212344"""  
    opt_in_confirmation_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optInConfirmationMessage'), 'exclude': lambda f: f is None }})
    r"""Opt in confirmation message"""  
    short_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortCode'), 'exclude': lambda f: f is None }})
    r"""A short code assigned to keyword. Example: 67076 (Deprecated - please use number instead)"""  
    status: Optional[KeywordLeaseStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE"""  
    type: Optional[KeywordLeaseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""~"""  
    