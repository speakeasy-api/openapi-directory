/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Contains configurations for protected query results.
 */
export class StartProtectedQueryRequestBodyResultConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "outputConfiguration" })
  @Type(() => shared.ProtectedQueryOutputConfiguration)
  outputConfiguration?: shared.ProtectedQueryOutputConfiguration;
}

/**
 * The parameters for the SQL type Protected Query.
 */
export class StartProtectedQueryRequestBodySqlParameters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "queryString" })
  queryString?: string;
}

/**
 * The type of the protected query to be started.
 */
export enum StartProtectedQueryRequestBodyTypeEnum {
  Sql = "SQL",
}

export class StartProtectedQueryRequestBody extends SpeakeasyBase {
  /**
   * Contains configurations for protected query results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resultConfiguration" })
  @Type(() => StartProtectedQueryRequestBodyResultConfiguration)
  resultConfiguration: StartProtectedQueryRequestBodyResultConfiguration;

  /**
   * The parameters for the SQL type Protected Query.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sqlParameters" })
  @Type(() => StartProtectedQueryRequestBodySqlParameters)
  sqlParameters: StartProtectedQueryRequestBodySqlParameters;

  /**
   * The type of the protected query to be started.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: StartProtectedQueryRequestBodyTypeEnum;
}

export class StartProtectedQueryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartProtectedQueryRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * A unique identifier for the membership to run this query against. Currently accepts a membership ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=membershipIdentifier",
  })
  membershipIdentifier: string;
}

export class StartProtectedQueryResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startProtectedQueryOutput?: shared.StartProtectedQueryOutput;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
