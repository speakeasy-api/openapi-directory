"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class QuotesClassic:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_language_combination_1(self, request: operations.CreateLanguageCombination1Request) -> operations.CreateLanguageCombination1Response:
        r"""Creates a new language combination for a given quote without creating a task.
        Creates a new language combination for a given quote without creating a task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateLanguageCombination1Request, base_url, '/quotes/{quoteId}/languageCombinations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "common_language_combination_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLanguageCombination1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonLanguageCombinationDTO])
                res.common_language_combination_dto = out

        return res

    def create_payable_1(self, request: operations.CreatePayable1Request) -> operations.CreatePayable1Response:
        r"""Adds a payable.
        Adds a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePayable1Request, base_url, '/quotes/{quoteId}/finance/payables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payable_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePayable1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayableDTO])
                res.payable_dto = out

        return res

    def create_receivable_1(self, request: operations.CreateReceivable1Request) -> operations.CreateReceivable1Response:
        r"""Adds a receivable.
        Adds a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateReceivable1Request, base_url, '/quotes/{quoteId}/finance/receivables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receivable_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateReceivable1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReceivableDTO])
                res.receivable_dto = out

        return res

    def create_task_1(self, request: operations.CreateTask1Request) -> operations.CreateTask1Response:
        r"""Creates a new task for a given quote.
        Creates a new task for a given quote. Required fields are presented in the example.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateTask1Request, base_url, '/quotes/{quoteId}/tasks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTask1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskDTO])
                res.task_dto = out

        return res

    def delete_payable_1(self, request: operations.DeletePayable1Request) -> operations.DeletePayable1Response:
        r"""Deletes a payable.
        Deletes a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayable1Request, base_url, '/quotes/{quoteId}/finance/payables/{payableId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayable1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_receivable_1(self, request: operations.DeleteReceivable1Request) -> operations.DeleteReceivable1Response:
        r"""Deletes a receivable.
        Deletes a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteReceivable1Request, base_url, '/quotes/{quoteId}/finance/receivables/{receivableId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteReceivable1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_13(self, request: operations.Delete13Request) -> operations.Delete13Response:
        r"""Removes a quote.
        Removes a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete13Request, base_url, '/quotes/{quoteId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete13Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_all_ids_7(self, request: operations.GetAllIds7Request) -> operations.GetAllIds7Response:
        r"""Returns quotes' internal identifiers.
        Returns quotes' internal identifiers.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quotes/ids'
        
        query_params = utils.get_query_params(operations.GetAllIds7Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllIds7Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_all_ids_7_default_application_vnd_xtrf_v1_plus_json_int32_integers = out

        return res

    def get_by_id_8(self, request: operations.GetByID8Request) -> operations.GetByID8Response:
        r"""Returns quote details.
        Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID8Request, base_url, '/quotes/{quoteId}', request)
        
        query_params = utils.get_query_params(operations.GetByID8Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID8Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteDTOv1])
                res.quote_dt_ov1 = out

        return res

    def get_custom_fields_6(self, request: operations.GetCustomFields6Request) -> operations.GetCustomFields6Response:
        r"""Returns custom fields of a given quote.
        Returns custom fields of a given quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields6Request, base_url, '/quotes/{quoteId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields6Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_dates_2(self, request: operations.GetDates2Request) -> operations.GetDates2Response:
        r"""Returns dates of a given quote.
        Returns dates of a given quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDates2Request, base_url, '/quotes/{quoteId}/dates', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDates2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteDatesDTO])
                res.quote_dates_dto = out

        return res

    def get_finance_1(self, request: operations.GetFinance1Request) -> operations.GetFinance1Response:
        r"""Returns finance of a given quote.
        Returns finance of a given quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFinance1Request, base_url, '/quotes/{quoteId}/finance', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFinance1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FinanceDTO])
                res.finance_dto = out

        return res

    def get_instructions_1(self, request: operations.GetInstructions1Request) -> operations.GetInstructions1Response:
        r"""Returns instructions of a given quote.
        Returns instructions of a given quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInstructions1Request, base_url, '/quotes/{quoteId}/instructions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInstructions1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InstructionsDTO])
                res.instructions_dto = out

        return res

    def send_1(self, request: operations.Send1Request) -> operations.Send1Response:
        r"""Sends a quote for customer confirmation.
        Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Send1Request, base_url, '/quotes/{quoteId}/confirmation/send', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Send1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def start(self, request: operations.StartRequest) -> operations.StartResponse:
        r"""Starts a quote.
        Starts a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StartRequest, base_url, '/quotes/{quoteId}/start', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_custom_fields_4(self, request: operations.UpdateCustomFields4Request) -> operations.UpdateCustomFields4Response:
        r"""Updates custom fields of a given quote.
        Updates custom fields of a given quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomFields4Request, base_url, '/quotes/{quoteId}/customFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomFields4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def update_instructions_2(self, request: operations.UpdateInstructions2Request) -> operations.UpdateInstructions2Response:
        r"""Updates instructions of a given quote.
        Updates instructions of a given quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateInstructions2Request, base_url, '/quotes/{quoteId}/instructions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "instructions_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateInstructions2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InstructionsDTO])
                res.instructions_dto = out

        return res

    def update_payable_1(self, request: operations.UpdatePayable1Request) -> operations.UpdatePayable1Response:
        r"""Updates a payable.
        Updates a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePayable1Request, base_url, '/quotes/{quoteId}/finance/payables/{payableId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payable_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePayable1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayableDTO])
                res.payable_dto = out

        return res

    def update_receivable_1(self, request: operations.UpdateReceivable1Request) -> operations.UpdateReceivable1Response:
        r"""Updates a receivable.
        Updates a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateReceivable1Request, base_url, '/quotes/{quoteId}/finance/receivables/{receivableId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receivable_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateReceivable1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReceivableDTO])
                res.receivable_dto = out

        return res

    