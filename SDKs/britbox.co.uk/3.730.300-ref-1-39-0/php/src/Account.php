<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Account 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a new payment method to an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddPaymentMethodRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddPaymentMethodSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddPaymentMethodResponse
     */
	public function addPaymentMethod(
        \OpenAPI\OpenAPI\Models\Operations\AddPaymentMethodRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddPaymentMethodSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddPaymentMethodResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/billing/methods');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addPaymentMethodRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddPaymentMethodRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddPaymentMethodResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentMethod = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaymentMethod', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Authorize a device from a generated device authorization code.
     * 
     * This is the second step in the process of authorizing a device by pin code.
     * 
     * Firstly the device must request a generated authorization code via the
     * `/authorization/device/code` endpoint.
     * 
     * This endpoint then authorizes the device associated with the code to sign in
     * to a user account. Typically this endpoint will be called from a page
     * presented in the web app under the account section.
     * 
     * Once authorized, the device will then be able to sign in to that account
     * via the `/authorization/device` endpoint, without needing to provide the 
     * credentials of the user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthorizeDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthorizeDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthorizeDeviceResponse
     */
	public function authorizeDevice(
        \OpenAPI\OpenAPI\Models\Operations\AuthorizeDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthorizeDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthorizeDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/devices/authorization');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceAuthorizationCode", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthorizeDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthorizeDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel a plan subscription.
     * 
     * A cancelled subscription will continue to be valid until the subscription
     * expiry date or next renewal date.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionResponse
     */
	public function cancelSubscription(
        \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/billing/subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change the password of an account.
     * 
     * The expected token scope is Settings.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangePasswordSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse
     */
	public function changePassword(
        \OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChangePasswordSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/password');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changePasswordRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change the pin of an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangePinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangePinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangePinResponse
     */
	public function changePin(
        \OpenAPI\OpenAPI\Models\Operations\ChangePinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChangePinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangePinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/pin');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changePinRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangePinRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangePinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new profile under the active account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateProfileResponse
     */
	public function createProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/profiles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profileCreationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateProfileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profileDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProfileDetail', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a profile with a specific id under the active account.
     * 
     * Note that you cannot delete the primary profile.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdResponse
     */
	public function deleteProfileWithId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProfileWithIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deregister a playback device from an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceResponse
     */
	public function deregisterDevice(
        \OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/devices/{id}', \OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeregisterDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a new account nonce.
     * 
     * A nonce may be required to help sign a response from a third party
     * service which will be passed back to these services.
     * 
     * For example a Facebook single-sign-on request initiated by a client
     * application may first get a nonce from here to include in the request.
     * Facebook will then include the nonce in the auth token it issues. This
     * token can be passed back to our services and the nonce checked for validity.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenerateNonceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenerateNonceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenerateNonceResponse
     */
	public function generateNonce(
        \OpenAPI\OpenAPI\Models\Operations\GenerateNonceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenerateNonceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenerateNonceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/nonce');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GenerateNonceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenerateNonceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountNonce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountNonce', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the details of an account along with the profiles and entitlements under it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountResponse
     */
	public function getAccount(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a registered device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse
     */
	public function getDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/devices/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all devices registered under this account.
     * 
     * Also includes information around device registration and deregistration limits.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDevicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDevicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDevicesResponse
     */
	public function getDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetDevicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDevicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/devices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDevicesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountDevices = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountDevices', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all entitlements under the account.
     * 
     * This list is returned under the call to get account information so a call here is
     * only required when wishing to refresh a local copy of entitlements.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsResponse
     */
	public function getEntitlements(
        \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/entitlements');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEntitlementsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entitlements = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Entitlement>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the video files associated with an item given maximum resolution, device type
     * and one or more delivery types.
     * 
     * This endpoint accepts an Account Catalog token, however if when requesting
     * playback files you receive an *403 status code with error code 1* then the file
     * you're requesting is classification restricted. This means you should switch
     * to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account
     * Playback token. If not already obtained, this token can be requested via the
     * `/itv/pinauthorization` endpoint with an account level pin.
     * 
     * For convenience you may also access free / public files through this endpoint
     * instead of the /items/{id}/videos endpoint, when authenticated.
     * 
     * Returns an array of video file objects which each include a url to a video.
     * 
     * The first entry in the array contains what is predicted to be the best match.
     * The remainder of the entries, if any, may contain resolutions below what was
     * requests. For example if you request HD-720 the response may also contain
     * SD entries.
     * 
     * If you specify multiple delivery types, then the response array will insert
     * types in the order you specify them in the query. For example `stream,progressive`
     * would return an array with 0 or more stream files followed by 0 or more progressive files.
     * 
     * If no files are found a 404 is returned.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesResponse
     */
	public function getItemMediaFiles(
        \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/items/{id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaFiles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaFile>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the video files associated with an item given maximum resolution, device type
     * and one or more delivery types.
     * 
     * This endpoint is identical to the `/account/items/{id}/videos` however it expects
     * an Account Playback token. This token, and in association this endpoint, is specifically
     * for use when playback files are classification restricted and require an account
     * level pin to access them.
     * 
     * Returns an array of video file objects which each include a url to a video.
     * 
     * The first entry in the array contains what is predicted to be the best match.
     * The remainder of the entries, if any, may contain resolutions below what was
     * requests. For example if you request HD-720 the response may also contain
     * SD entries.
     * 
     * If you specify multiple delivery types, then the response array will insert
     * types in the order you specify them in the query. For example `stream,progressive`
     * would return an array with 0 or more stream files followed by 0 or more progressive files.
     * 
     * If no files are found a 404 is returned.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedResponse
     */
	public function getItemMediaFilesGuarded(
        \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/items/{id}/videos-guarded', \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItemMediaFilesGuardedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaFiles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaFile>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a payment method under an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodResponse
     */
	public function getPaymentMethod(
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/billing/methods/{id}', \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentMethod = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaymentMethod', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the available payment methods under an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodsResponse
     */
	public function getPaymentMethods(
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/billing/methods');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPaymentMethodsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentMethods = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PaymentMethod>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the summary of a profile with a specific id under the active account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdResponse
     */
	public function getProfileWithId(
        \OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProfileWithIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profileSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProfileSummary', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of all purchases made under an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPurchasesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPurchasesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPurchasesResponse
     */
	public function getPurchases(
        \OpenAPI\OpenAPI\Models\Operations\GetPurchasesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPurchasesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPurchasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/billing/purchases');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPurchasesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPurchasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->purchases = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Purchase>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Purchase a plan or item offer.
     * The result of a successful transaction is a new entitlement.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MakePurchaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MakePurchaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MakePurchaseResponse
     */
	public function makePurchase(
        \OpenAPI\OpenAPI\Models\Operations\MakePurchaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MakePurchaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MakePurchaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/billing/purchases');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "purchaseRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MakePurchaseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MakePurchaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entitlement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Entitlement', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a playback device under an account.
     * 
     * If a device with the same id already exists a `409` conflict will be returned.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RegisterDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RegisterDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RegisterDeviceResponse
     */
	public function registerDevice(
        \OpenAPI\OpenAPI\Models\Operations\RegisterDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RegisterDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RegisterDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/devices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceRegistrationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RegisterDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RegisterDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a payment method from an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodResponse
     */
	public function removePaymentMethod(
        \OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/billing/methods/{id}', \OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemovePaymentMethodResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rename a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RenameDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RenameDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RenameDeviceResponse
     */
	public function renameDevice(
        \OpenAPI\OpenAPI\Models\Operations\RenameDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RenameDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RenameDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/devices/{id}/name', \OpenAPI\OpenAPI\Models\Operations\RenameDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RenameDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RenameDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request that the email address tied to an account be verified.
     * 
     * This will send a verification email to the email address of the primary profile containing
     * a link which, once clicked, completes the verification process via the /verify-email endpoint.
     * 
     * Note that when an account is created this email is sent automatically so there's no need
     * to call this directly.
     * 
     * If the user doesn't click the link before it expires then this endpoint can be called
     * to request a new verification email. In the future it may also be used if we add support
     * for changing an account email address.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestEmailVerificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestEmailVerificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestEmailVerificationResponse
     */
	public function requestEmailVerification(
        \OpenAPI\OpenAPI\Models\Operations\RequestEmailVerificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RequestEmailVerificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestEmailVerificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/request-email-verification');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestEmailVerificationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestEmailVerificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the details of an account.
     * 
     * With the exception of the address, this supports partial updates, so you can send just the
     * properties you wish to update.
     * 
     * When the address is provided any properties which are omitted from the address will be cleared.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountResponse
     */
	public function updateAccount(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountUpdateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the summary of a profile with a specific id under the active account.
     * 
     * This supports partial updates so you can send just the properties you wish to update.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdResponse
     */
	public function updateProfileWithId(
        \OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profileUpdateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateProfileWithIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renew a cancelled subscription or switch subscription to a different plan.
     * 
     * When renewing a cancelled subscription membership, hit this endpoint with
     * the id of subscription to renew.
     * 
     * To switch plans provide the id of the current active subscription membership
     * of the account, and in the query specify the id of the plan to switch to.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse
     */
	public function updateSubscription(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/billing/subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
}