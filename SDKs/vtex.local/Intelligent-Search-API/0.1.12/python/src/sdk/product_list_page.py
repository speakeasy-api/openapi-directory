"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProductListPage:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_banners_facets_(self, request: operations.GetBannersFacetsRequest) -> operations.GetBannersFacetsResponse:
        r"""Get list of banners registered for query
        Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBannersFacetsRequest, base_url, '/banners/{facets}', request)
        
        query_params = utils.get_query_params(operations.GetBannersFacetsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBannersFacetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Banners])
                res.banners = out

        return res

    def get_correction_search(self, request: operations.GetCorrectionSearchRequest) -> operations.GetCorrectionSearchResponse:
        r"""Get attempt of correction of a misspelled term
        Tries to correct a misspelled term from the search.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/correction_search'
        
        query_params = utils.get_query_params(operations.GetCorrectionSearchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorrectionSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Correction])
                res.correction = out

        return res

    def get_facets_facets_(self, request: operations.GetFacetsFacetsRequest) -> operations.GetFacetsFacetsResponse:
        r"""Get list of the possible facets for a given query
        Lists the possible facets for a given query
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFacetsFacetsRequest, base_url, '/facets/{facets}', request)
        
        query_params = utils.get_query_params(operations.GetFacetsFacetsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFacetsFacetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Facets])
                res.facets = out

        return res

    def get_product_search_facets_(self, request: operations.GetProductSearchFacetsRequest) -> operations.GetProductSearchFacetsResponse:
        r"""Get list of products for a query
        Lists the products for a given query.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductSearchFacetsRequest, base_url, '/product_search/{facets}', request)
        
        query_params = utils.get_query_params(operations.GetProductSearchFacetsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductSearchFacetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductSearch])
                res.product_search = out

        return res

    def get_search_suggestions(self, request: operations.GetSearchSuggestionsRequest) -> operations.GetSearchSuggestionsResponse:
        r"""Get list of suggested terms similar to the search term
        Lists suggested terms similar to the search term.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/search_suggestions'
        
        query_params = utils.get_query_params(operations.GetSearchSuggestionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSearchSuggestionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchSuggestions])
                res.search_suggestions = out
        elif http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    