// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSearchJSONFieldsEnum - "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
//
// Optional fields are returned in result_set. They are briefly explained here:
//
// pages: A list of topic pages associated with a specific concept.
// ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
// links: A list of links from this concept to external data resources.
// taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
// combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
// geocodes: For geographic concepts, the full GIS record from geonames.
// article_list: A list of up to 10 articles associated with this concept.
// scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
// search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
type GetSearchJSONFieldsEnum string

const (
	GetSearchJSONFieldsEnumAll            GetSearchJSONFieldsEnum = "all"
	GetSearchJSONFieldsEnumPages          GetSearchJSONFieldsEnum = "pages"
	GetSearchJSONFieldsEnumTickerSymbol   GetSearchJSONFieldsEnum = "ticker_symbol"
	GetSearchJSONFieldsEnumLinks          GetSearchJSONFieldsEnum = "links"
	GetSearchJSONFieldsEnumTaxonomy       GetSearchJSONFieldsEnum = "taxonomy"
	GetSearchJSONFieldsEnumCombinations   GetSearchJSONFieldsEnum = "combinations"
	GetSearchJSONFieldsEnumGeocodes       GetSearchJSONFieldsEnum = "geocodes"
	GetSearchJSONFieldsEnumArticleList    GetSearchJSONFieldsEnum = "article_list"
	GetSearchJSONFieldsEnumScopeNotes     GetSearchJSONFieldsEnum = "scope_notes"
	GetSearchJSONFieldsEnumSearchAPIQuery GetSearchJSONFieldsEnum = "search_api_query"
)

func (e GetSearchJSONFieldsEnum) ToPointer() *GetSearchJSONFieldsEnum {
	return &e
}

func (e *GetSearchJSONFieldsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "pages":
		fallthrough
	case "ticker_symbol":
		fallthrough
	case "links":
		fallthrough
	case "taxonomy":
		fallthrough
	case "combinations":
		fallthrough
	case "geocodes":
		fallthrough
	case "article_list":
		fallthrough
	case "scope_notes":
		fallthrough
	case "search_api_query":
		*e = GetSearchJSONFieldsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchJSONFieldsEnum: %v", v)
	}
}

type GetSearchJSONRequest struct {
	// "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
	//
	// Optional fields are returned in result_set. They are briefly explained here:
	//
	// pages: A list of topic pages associated with a specific concept.
	// ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
	// links: A list of links from this concept to external data resources.
	// taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
	// combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
	// geocodes: For geographic concepts, the full GIS record from geonames.
	// article_list: A list of up to 10 articles associated with this concept.
	// scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
	// search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
	//
	Fields *GetSearchJSONFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Integer value for the index count from the first concept to the last concept, sorted alphabetically. Used in a Search Query. A Search Query will return up to 10 concepts in its results.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.
	Query string `queryParam:"style=form,explode=true,name=query"`
}

// GetSearchJSON200ApplicationJSON - An array of Concepts
type GetSearchJSON200ApplicationJSON struct {
	Copyright  *string                  `json:"copyright,omitempty"`
	NumResults *int64                   `json:"num_results,omitempty"`
	Results    []shared.ConceptRelation `json:"results,omitempty"`
	Status     *string                  `json:"status,omitempty"`
}

type GetSearchJSONResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An array of Concepts
	GetSearchJSON200ApplicationJSONObject *GetSearchJSON200ApplicationJSON
}
