"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class KeyManagement:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_a_key(self, request: operations.CreateAKeyRequestBody) -> operations.CreateAKeyResponse:
        r"""Create a key
        Create a key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keys'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_a_key(self) -> operations.DeleteAKeyResponse:
        r"""Delete a key
        Delete a key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keys/kN2aK9EO8a7b627e425717d9196c8081552ca004e513545ed178f8a56981dbd3080d4a5b'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_keys(self, request: operations.GetKeysRequest) -> operations.GetKeysResponse:
        r"""Get keys
        Get keys
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keys'
        
        query_params = utils.get_query_params(operations.GetKeysRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_one_key(self) -> operations.GetOneKeyResponse:
        r"""Get one key
        Get one key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keys/L8l05tFb188aab693735bbaf1f898b9902fb39f865160d39dddba2b47b940115a0430705'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOneKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_a_key(self, request: operations.UpdateAKeyRequestBody) -> operations.UpdateAKeyResponse:
        r"""Update a key
        Update a key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keys/wYZjGJyBcdb0621b97999c233246a8ec0a35d0fcd9a6417ef8ccee0c8978b64b123af2dd'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    