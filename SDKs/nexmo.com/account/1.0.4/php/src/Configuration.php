<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Configuration 
{
	
	public const CHANGE_ACCOUNT_SETTINGS_SERVERS = [
		'https://rest.nexmo.com',
	];
	
	public const REGISTER_SENDER_SERVERS = [
		'https://rest.nexmo.com',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Change Account Settings
     * 
     * Update the default webhook URLs associated with your account:
     *   * Callback URL for incoming SMS messages
     *   * Callback URL for delivery receipts
     * 
     * Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeAccountSettingsRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeAccountSettingsResponse
     */
	public function changeAccountSettings(
        \OpenAPI\OpenAPI\Models\Operations\ChangeAccountSettingsRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeAccountSettingsResponse
    {
        $baseUrl = Configuration::CHANGE_ACCOUNT_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/account/settings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountSettingsRequest", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeAccountSettingsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeAccountSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountSettings', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Register an email sender
     * 
     * Register an email sender with an API Key for using email with Verify V2.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RegisterSenderRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RegisterSenderResponse
     */
	public function registerSender(
        \OpenAPI\OpenAPI\Models\Operations\RegisterSenderRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RegisterSenderResponse
    {
        $baseUrl = Configuration::REGISTER_SENDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/account/register-sender');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "registerEmailRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RegisterSenderRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RegisterSenderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->registerEmailResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegisterEmailResponse', 'json');
            }
        }

        return $response;
    }
}