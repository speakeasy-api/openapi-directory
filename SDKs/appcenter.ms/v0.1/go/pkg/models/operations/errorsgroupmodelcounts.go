// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ErrorsGroupModelCountsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsGroupModelCountsRequest struct {
	// The maximum number of results to return. (0 will fetch all results till the max number.)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnumConflict            ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsGroupModelCountsDefaultApplicationJSONError struct {
	Code    ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                    `json:"message"`
}

// ErrorsGroupModelCountsDefaultApplicationJSON - Error code with reason
type ErrorsGroupModelCountsDefaultApplicationJSON struct {
	Error ErrorsGroupModelCountsDefaultApplicationJSONError `json:"error"`
}

type ErrorsGroupModelCounts200ApplicationJSONModels struct {
	// count of errors in a model
	ErrorCount *int64 `json:"errorCount,omitempty"`
	// model code
	ModelCode *string `json:"modelCode,omitempty"`
	// model name
	ModelName *string `json:"modelName,omitempty"`
}

// ErrorsGroupModelCounts200ApplicationJSON - Top Models with percentage in descending order
type ErrorsGroupModelCounts200ApplicationJSON struct {
	ErrorCount *int64                                           `json:"errorCount,omitempty"`
	Models     []ErrorsGroupModelCounts200ApplicationJSONModels `json:"models,omitempty"`
}

type ErrorsGroupModelCountsResponse struct {
	ContentType string
	// Top Models with percentage in descending order
	ErrorsGroupModelCounts200ApplicationJSONObject *ErrorsGroupModelCounts200ApplicationJSON
	// Error code with reason
	ErrorsGroupModelCountsDefaultApplicationJSONObject *ErrorsGroupModelCountsDefaultApplicationJSON
	StatusCode                                         int
	RawResponse                                        *http.Response
}
