/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GETPaymentRunSummaryTotalValues {
    /**
     * **Note:** This field is only available if you have the Credit Balance feature enabled.
     * 
     * The total amount of credit balance after the payment run is completed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfCreditBalance")
    public String totalValueOfCreditBalance;
    public GETPaymentRunSummaryTotalValues withTotalValueOfCreditBalance(String totalValueOfCreditBalance) {
        this.totalValueOfCreditBalance = totalValueOfCreditBalance;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total amount of credit memos that are successfully processed in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfCreditMemos")
    public String totalValueOfCreditMemos;
    public GETPaymentRunSummaryTotalValues withTotalValueOfCreditMemos(String totalValueOfCreditMemos) {
        this.totalValueOfCreditMemos = totalValueOfCreditMemos;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total amount of debit memos that are picked up for processing in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfDebitMemos")
    public String totalValueOfDebitMemos;
    public GETPaymentRunSummaryTotalValues withTotalValueOfDebitMemos(String totalValueOfDebitMemos) {
        this.totalValueOfDebitMemos = totalValueOfDebitMemos;
        return this;
    }
    
    /**
     * The total amount of receivables associated with the payments with the status of `Error` and `Processing`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfErrors")
    public String totalValueOfErrors;
    public GETPaymentRunSummaryTotalValues withTotalValueOfErrors(String totalValueOfErrors) {
        this.totalValueOfErrors = totalValueOfErrors;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total amount of invoices that are picked up for processing in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfInvoices")
    public String totalValueOfInvoices;
    public GETPaymentRunSummaryTotalValues withTotalValueOfInvoices(String totalValueOfInvoices) {
        this.totalValueOfInvoices = totalValueOfInvoices;
        return this;
    }
    
    /**
     * The total amount of payments that are successfully processed in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfPayments")
    public String totalValueOfPayments;
    public GETPaymentRunSummaryTotalValues withTotalValueOfPayments(String totalValueOfPayments) {
        this.totalValueOfPayments = totalValueOfPayments;
        return this;
    }
    
    /**
     * The total amount of receivables associated with the payment run.
     * 
     * The value of this field is the sum of the value of the `totalValueOfInvoices` field and that of the `totalValueOfDebitMemos` field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfReceivables")
    public String totalValueOfReceivables;
    public GETPaymentRunSummaryTotalValues withTotalValueOfReceivables(String totalValueOfReceivables) {
        this.totalValueOfReceivables = totalValueOfReceivables;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total amount of unapplied payments that are successfully processed in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfUnappliedPayments")
    public Long totalValueOfUnappliedPayments;
    public GETPaymentRunSummaryTotalValues withTotalValueOfUnappliedPayments(Long totalValueOfUnappliedPayments) {
        this.totalValueOfUnappliedPayments = totalValueOfUnappliedPayments;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total amount of debit memos with remaining positive balances after the payment run is completed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfUnprocessedDebitMemos")
    public String totalValueOfUnprocessedDebitMemos;
    public GETPaymentRunSummaryTotalValues withTotalValueOfUnprocessedDebitMemos(String totalValueOfUnprocessedDebitMemos) {
        this.totalValueOfUnprocessedDebitMemos = totalValueOfUnprocessedDebitMemos;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total amount of invoices with remaining positive balances after the payment run is completed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfUnprocessedInvoices")
    public String totalValueOfUnprocessedInvoices;
    public GETPaymentRunSummaryTotalValues withTotalValueOfUnprocessedInvoices(String totalValueOfUnprocessedInvoices) {
        this.totalValueOfUnprocessedInvoices = totalValueOfUnprocessedInvoices;
        return this;
    }
    
    /**
     * The total amount of receivables with remaining positive balances after the payment run is completed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueOfUnprocessedReceivables")
    public String totalValueOfUnprocessedReceivables;
    public GETPaymentRunSummaryTotalValues withTotalValueOfUnprocessedReceivables(String totalValueOfUnprocessedReceivables) {
        this.totalValueOfUnprocessedReceivables = totalValueOfUnprocessedReceivables;
        return this;
    }
    
}
