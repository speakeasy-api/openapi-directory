// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListLicenseSpecificationsForResourceXAmzTargetEnum
type ListLicenseSpecificationsForResourceXAmzTargetEnum string

const (
	ListLicenseSpecificationsForResourceXAmzTargetEnumAwsLicenseManagerListLicenseSpecificationsForResource ListLicenseSpecificationsForResourceXAmzTargetEnum = "AWSLicenseManager.ListLicenseSpecificationsForResource"
)

func (e ListLicenseSpecificationsForResourceXAmzTargetEnum) ToPointer() *ListLicenseSpecificationsForResourceXAmzTargetEnum {
	return &e
}

func (e *ListLicenseSpecificationsForResourceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSLicenseManager.ListLicenseSpecificationsForResource":
		*e = ListLicenseSpecificationsForResourceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLicenseSpecificationsForResourceXAmzTargetEnum: %v", v)
	}
}

type ListLicenseSpecificationsForResourceRequest struct {
	ListLicenseSpecificationsForResourceRequest shared.ListLicenseSpecificationsForResourceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                               *string                                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                           *string                                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                              *string                                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                    *string                                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                           *string                                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                               *string                                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                           *string                                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                                  ListLicenseSpecificationsForResourceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListLicenseSpecificationsForResourceResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// AuthorizationException
	AuthorizationException interface{}
	ContentType            string
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// Success
	ListLicenseSpecificationsForResourceResponse *shared.ListLicenseSpecificationsForResourceResponse
	// RateLimitExceededException
	RateLimitExceededException interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// ServerInternalException
	ServerInternalException interface{}
}
