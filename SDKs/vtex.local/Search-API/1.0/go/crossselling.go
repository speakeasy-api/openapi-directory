// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
)

type crossSelling struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newCrossSelling(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *crossSelling {
	return &crossSelling{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// ProductSearchAccessories - Get Product Search of Accessories
// Retrieves general information about the product's accessories.
func (s *crossSelling) ProductSearchAccessories(ctx context.Context, request operations.ProductSearchAccessoriesRequest, opts ...operations.Option) (*operations.ProductSearchAccessoriesResponse, error) {
	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionServerURL,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}
	baseURL := operations.ProductSearchAccessoriesServerList[0]
	if o.ServerURL != nil {
		baseURL = *o.ServerURL
	}

	url := utils.GenerateURL(ctx, baseURL, "/api/catalog_system/pub/products/crossselling/accessories/{productId}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ProductSearchAccessoriesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// ProductSearchShowTogether - Get Product Search of Show Together
// Retrieves general information about the products that are show together with the product in question.
func (s *crossSelling) ProductSearchShowTogether(ctx context.Context, request operations.ProductSearchShowTogetherRequest, opts ...operations.Option) (*operations.ProductSearchShowTogetherResponse, error) {
	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionServerURL,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}
	baseURL := operations.ProductSearchShowTogetherServerList[0]
	if o.ServerURL != nil {
		baseURL = *o.ServerURL
	}

	url := utils.GenerateURL(ctx, baseURL, "/api/catalog_system/pub/products/crossselling/showtogether/{productId}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ProductSearchShowTogetherResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// ProductSearchSimilars - Get Product Search of Similars
// Retrieves general information about related product searches.
func (s *crossSelling) ProductSearchSimilars(ctx context.Context, request operations.ProductSearchSimilarsRequest, opts ...operations.Option) (*operations.ProductSearchSimilarsResponse, error) {
	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionServerURL,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}
	baseURL := operations.ProductSearchSimilarsServerList[0]
	if o.ServerURL != nil {
		baseURL = *o.ServerURL
	}

	url := utils.GenerateURL(ctx, baseURL, "/api/catalog_system/pub/products/crossselling/similars/{productId}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ProductSearchSimilarsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// ProductSearchSuggestions - Get Product Search of Suggestions
// Retrieves general information about other product suggestions related to the product.
func (s *crossSelling) ProductSearchSuggestions(ctx context.Context, request operations.ProductSearchSuggestionsRequest, opts ...operations.Option) (*operations.ProductSearchSuggestionsResponse, error) {
	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionServerURL,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}
	baseURL := operations.ProductSearchSuggestionsServerList[0]
	if o.ServerURL != nil {
		baseURL = *o.ServerURL
	}

	url := utils.GenerateURL(ctx, baseURL, "/api/catalog_system/pub/products/crossselling/suggestions/{productId}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ProductSearchSuggestionsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// ProductSearchWhoBoughtAlsoBought - Get Product Search of Who Bought Also Bought
// Retrieves general information about other related products that the user also bought.
func (s *crossSelling) ProductSearchWhoBoughtAlsoBought(ctx context.Context, request operations.ProductSearchWhoBoughtAlsoBoughtRequest, opts ...operations.Option) (*operations.ProductSearchWhoBoughtAlsoBoughtResponse, error) {
	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionServerURL,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}
	baseURL := operations.ProductSearchWhoBoughtAlsoBoughtServerList[0]
	if o.ServerURL != nil {
		baseURL = *o.ServerURL
	}

	url := utils.GenerateURL(ctx, baseURL, "/api/catalog_system/pub/products/crossselling/whoboughtalsobought/{productId}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ProductSearchWhoBoughtAlsoBoughtResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []operations.ProductSearchWhoBoughtAlsoBought200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ProductSearchWhoBoughtAlsoBought200ApplicationJSONObjects = out
		}
	}

	return res, nil
}

// ProductSearchWhoSawAlsoBought - Get Product Search of Who Saw Also Bought
// Retrieves general information about other related products that the users saw and also bought.
func (s *crossSelling) ProductSearchWhoSawAlsoBought(ctx context.Context, request operations.ProductSearchWhoSawAlsoBoughtRequest, opts ...operations.Option) (*operations.ProductSearchWhoSawAlsoBoughtResponse, error) {
	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionServerURL,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}
	baseURL := operations.ProductSearchWhoSawAlsoBoughtServerList[0]
	if o.ServerURL != nil {
		baseURL = *o.ServerURL
	}

	url := utils.GenerateURL(ctx, baseURL, "/api/catalog_system/pub/products/crossselling/whosawalsobought/{productId}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ProductSearchWhoSawAlsoBoughtResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []operations.ProductSearchWhoSawAlsoBought200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ProductSearchWhoSawAlsoBought200ApplicationJSONObjects = out
		}
	}

	return res, nil
}

// ProductSearchWhoSawAlsoSaw - Get Product Search of Who Saw Also Saw
// Retrieves general information about other related products that the users also saw.
func (s *crossSelling) ProductSearchWhoSawAlsoSaw(ctx context.Context, request operations.ProductSearchWhoSawAlsoSawRequest, opts ...operations.Option) (*operations.ProductSearchWhoSawAlsoSawResponse, error) {
	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionServerURL,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}
	baseURL := operations.ProductSearchWhoSawAlsoSawServerList[0]
	if o.ServerURL != nil {
		baseURL = *o.ServerURL
	}

	url := utils.GenerateURL(ctx, baseURL, "/api/catalog_system/pub/products/crossselling/whosawalsosaw/{productId}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ProductSearchWhoSawAlsoSawResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []operations.ProductSearchWhoSawAlsoSaw200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ProductSearchWhoSawAlsoSaw200ApplicationJSONObjects = out
		}
	}

	return res, nil
}
