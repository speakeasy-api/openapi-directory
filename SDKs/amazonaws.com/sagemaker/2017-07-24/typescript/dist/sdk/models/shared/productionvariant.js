"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductionVariant = void 0;
var utils_1 = require("../../../internal/utils");
var productionvariantacceleratortypeenum_1 = require("./productionvariantacceleratortypeenum");
var productionvariantcoredumpconfig_1 = require("./productionvariantcoredumpconfig");
var productionvariantinstancetypeenum_1 = require("./productionvariantinstancetypeenum");
var productionvariantserverlessconfig_1 = require("./productionvariantserverlessconfig");
var class_transformer_1 = require("class-transformer");
/**
 *  Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html"> Production variants</a>.
 */
var ProductionVariant = /** @class */ (function (_super) {
    __extends(ProductionVariant, _super);
    function ProductionVariant() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AcceleratorType" }),
        __metadata("design:type", String)
    ], ProductionVariant.prototype, "acceleratorType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ContainerStartupHealthCheckTimeoutInSeconds" }),
        __metadata("design:type", Number)
    ], ProductionVariant.prototype, "containerStartupHealthCheckTimeoutInSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CoreDumpConfig" }),
        (0, class_transformer_1.Type)(function () { return productionvariantcoredumpconfig_1.ProductionVariantCoreDumpConfig; }),
        __metadata("design:type", productionvariantcoredumpconfig_1.ProductionVariantCoreDumpConfig)
    ], ProductionVariant.prototype, "coreDumpConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EnableSSMAccess" }),
        __metadata("design:type", Boolean)
    ], ProductionVariant.prototype, "enableSSMAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "InitialInstanceCount" }),
        __metadata("design:type", Number)
    ], ProductionVariant.prototype, "initialInstanceCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "InitialVariantWeight" }),
        __metadata("design:type", Number)
    ], ProductionVariant.prototype, "initialVariantWeight", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "InstanceType" }),
        __metadata("design:type", String)
    ], ProductionVariant.prototype, "instanceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ModelDataDownloadTimeoutInSeconds" }),
        __metadata("design:type", Number)
    ], ProductionVariant.prototype, "modelDataDownloadTimeoutInSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ModelName" }),
        __metadata("design:type", String)
    ], ProductionVariant.prototype, "modelName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ServerlessConfig" }),
        (0, class_transformer_1.Type)(function () { return productionvariantserverlessconfig_1.ProductionVariantServerlessConfig; }),
        __metadata("design:type", productionvariantserverlessconfig_1.ProductionVariantServerlessConfig)
    ], ProductionVariant.prototype, "serverlessConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "VariantName" }),
        __metadata("design:type", String)
    ], ProductionVariant.prototype, "variantName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "VolumeSizeInGB" }),
        __metadata("design:type", Number)
    ], ProductionVariant.prototype, "volumeSizeInGB", void 0);
    return ProductionVariant;
}(utils_1.SpeakeasyBase));
exports.ProductionVariant = ProductionVariant;
