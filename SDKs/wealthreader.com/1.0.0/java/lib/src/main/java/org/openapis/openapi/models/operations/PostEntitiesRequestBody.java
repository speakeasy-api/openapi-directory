/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PostEntitiesRequestBody {
    /**
     * Solo necesario cuando se esté completando la seguda petición de un login con 2 factores de autenticación, si el tipo de desafío es OTP. Requiere la clave que la entidad le ha enviado al usario final
     */
    @SpeakeasyMetadata("form:name=OTP")
    public String otp;

    public PostEntitiesRequestBody withOtp(String otp) {
        this.otp = otp;
        return this;
    }
    
    /**
     * Solo necesario cuando se esté completando la seguda petición de un login con 2 factores de autenticación. Requiere el valor de SESSION obtenido en la primera petición
     */
    @SpeakeasyMetadata("form:name=SESSION")
    public String session;

    public PostEntitiesRequestBody withSession(String session) {
        this.session = session;
        return this;
    }
    
    /**
     * Identifica al cliente en el servicio
     */
    @SpeakeasyMetadata("form:name=api_key")
    public String apiKey;

    public PostEntitiesRequestBody withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * Nombre de la entidad. El listado completo está disponible con GET
     */
    @SpeakeasyMetadata("form:name=code")
    public String code;

    public PostEntitiesRequestBody withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Solo necesario cuando el usuario puede acceder a más de un contrato. El listado de contratos disponibles se obtiene al realizar una conexión con un usuario con opción a trabajar con varios contratos en su entidad (que al hacer login en su banca online ve como primera opción una pantalla de selección de contratos) y cuya llamada a la API no se le ha especificado un valor a contract_code
     */
    @SpeakeasyMetadata("form:name=contract_code")
    public String contractCode;

    public PostEntitiesRequestBody withContractCode(String contractCode) {
        this.contractCode = contractCode;
        return this;
    }
    
    /**
     * Tipo de documento, requerido según la entidad. Si es requerido o no, está indicado en el listado de entidades. Ver definición.
     */
    @SpeakeasyMetadata("form:name=document_type")
    public PostEntitiesRequestBodyDocumentTypeEnum documentType;

    public PostEntitiesRequestBody withDocumentType(PostEntitiesRequestBodyDocumentTypeEnum documentType) {
        this.documentType = documentType;
        return this;
    }
    
    /**
     * Contraseña
     */
    @SpeakeasyMetadata("form:name=password")
    public String password;

    public PostEntitiesRequestBody withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Segunda contraseña, requerida según la entidad.
     */
    @SpeakeasyMetadata("form:name=second_password")
    public String secondPassword;

    public PostEntitiesRequestBody withSecondPassword(String secondPassword) {
        this.secondPassword = secondPassword;
        return this;
    }
    
    /**
     * Valor para credenciales custodiadas, tokenizadas previamente mediante una llamada a este método con el valor de tokenize=true. Están disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desafío OTP; MOCKLOGINKO, respuesta con error de login
     */
    @SpeakeasyMetadata("form:name=token")
    public String token;

    public PostEntitiesRequestBody withToken(String token) {
        this.token = token;
        return this;
    }
    
    /**
     * Indica si Wealth Reader debe custodiar los credenciales, de tal manera que incluído en el body de respuesta estará un token que permite conectar con la entidad sin necesidad de conocer los credenciales: document_type, user, password, second_password, contract_code
     */
    @SpeakeasyMetadata("form:name=tokenize")
    public Boolean tokenize;

    public PostEntitiesRequestBody withTokenize(Boolean tokenize) {
        this.tokenize = tokenize;
        return this;
    }
    
    /**
     * Usuario. Están disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desafío OTP; MOCKLOGINKO, respuesta con error de login
     */
    @SpeakeasyMetadata("form:name=user")
    public String user;

    public PostEntitiesRequestBody withUser(String user) {
        this.user = user;
        return this;
    }
    
    public PostEntitiesRequestBody(){}
}
