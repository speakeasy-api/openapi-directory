/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints for creating, deleting or updating accounts.
 */
export class Accounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add users to an account
   *
   * @remarks
   * You can add up to 100 users to an account.
   */
  addUserToAccount(
    req: operations.AddUserToAccountRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.AddUserToAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddUserToAccountRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounts/users/add";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddUserToAccountResponse =
        new operations.AddUserToAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addUserToAccount201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AddUserToAccount201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addUserToAccount400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AddUserToAccount400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addUserToAccount401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AddUserToAccount401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addUserToAccount429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AddUserToAccount429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addUserToAccount500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AddUserToAccount500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete account
   *
   * @remarks
   * Endpoint used to delete an account.
   */
  deleteAccount(
    req: operations.DeleteAccountRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteAccountRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounts";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAccountResponse =
        new operations.DeleteAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAccount202ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteAccount202ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAccount400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteAccount400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAccount401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteAccount401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAccount403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteAccount403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAccount429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteAccount429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAccount500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteAccount500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove user from account
   *
   * @remarks
   * You can remove up to 100 users from an account.
   *
   * When removing a user, the user will still be stored in journy.io, but marked as "removed".
   *
   */
  removeUserFromAccount(
    req: operations.RemoveUserFromAccountRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveUserFromAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveUserFromAccountRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounts/users/remove";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveUserFromAccountResponse =
        new operations.RemoveUserFromAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.removeUserFromAccount204ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemoveUserFromAccount204ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.removeUserFromAccount400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemoveUserFromAccount400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.removeUserFromAccount401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemoveUserFromAccount401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.removeUserFromAccount429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemoveUserFromAccount429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.removeUserFromAccount500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemoveUserFromAccount500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create or update account
   *
   * @remarks
   * Endpoint used to create or update an account.
   */
  upsertAccount(
    req: operations.UpsertAccountRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.UpsertAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpsertAccountRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounts/upsert";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpsertAccountResponse =
        new operations.UpsertAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertAccount201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertAccount201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertAccount400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertAccount400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertAccount401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertAccount401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertAccount403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertAccount403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertAccount429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertAccount429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertAccount500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertAccount500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
