"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var creatorroles_1 = require("./creatorroles");
var creators_1 = require("./creators");
var developers_1 = require("./developers");
var games_1 = require("./games");
var genres_1 = require("./genres");
var platforms_1 = require("./platforms");
var publishers_1 = require("./publishers");
var stores_1 = require("./stores");
var tags_1 = require("./tags");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.rawg.io/api"];
/**
 *
 * @remarks
 * The largest open video games database.
 *
 * ### Why build on RAWG
 * - More than 350,000 games for 50 platforms including mobiles.
 * - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates,
 * Metacritic ratings.
 * - Where to buy: links to digital distribution services
 * - Similar games based on visual similarity.
 * - Player activity data: Steam average playtime and RAWG player counts and ratings.
 * - Actively developing and constantly getting better by user contribution and our algorithms.
 *
 * ### Terms of Use
 * - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active
 * hyperlink from every page where the data of RAWG is used.
 * - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000
 * page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for
 * commercial terms.
 * - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy
 * to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt,
 * and we will talk it through.
 * - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs.
 * If you donâ€™t provide it, we may ban your requests.
 *
 * __[Read more](https://rawg.io/apidocs)__.
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.creatorRoles = new creatorroles_1.CreatorRoles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.creators = new creators_1.Creators(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.developers = new developers_1.Developers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.games = new games_1.Games(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.genres = new genres_1.Genres(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.platforms = new platforms_1.Platforms(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.publishers = new publishers_1.Publishers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stores = new stores_1.Stores(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.tags = new tags_1.Tags(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
