// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ScoutingObservationLocationDisplayColorEnum - Color of scouting pin assigned in the Climate FieldView app.
// Limited in the Ux to a set of RGB values.
// * #307af7
// * #38d753
// * #b037e4
// * #ef3e3e
// * #f7ec41
// * #ff8439
// * #808080
type ScoutingObservationLocationDisplayColorEnum string

const (
	ScoutingObservationLocationDisplayColorEnumNumber307af7 ScoutingObservationLocationDisplayColorEnum = "#307af7"
	ScoutingObservationLocationDisplayColorEnumNumber38d753 ScoutingObservationLocationDisplayColorEnum = "#38d753"
	ScoutingObservationLocationDisplayColorEnumNumberB037e4 ScoutingObservationLocationDisplayColorEnum = "#b037e4"
	ScoutingObservationLocationDisplayColorEnumNumberEf3e3e ScoutingObservationLocationDisplayColorEnum = "#ef3e3e"
	ScoutingObservationLocationDisplayColorEnumNumberF7ec41 ScoutingObservationLocationDisplayColorEnum = "#f7ec41"
	ScoutingObservationLocationDisplayColorEnumNumberFf8439 ScoutingObservationLocationDisplayColorEnum = "#ff8439"
	ScoutingObservationLocationDisplayColorEnumNumber808080 ScoutingObservationLocationDisplayColorEnum = "#808080"
)

func (e ScoutingObservationLocationDisplayColorEnum) ToPointer() *ScoutingObservationLocationDisplayColorEnum {
	return &e
}

func (e *ScoutingObservationLocationDisplayColorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "#307af7":
		fallthrough
	case "#38d753":
		fallthrough
	case "#b037e4":
		fallthrough
	case "#ef3e3e":
		fallthrough
	case "#f7ec41":
		fallthrough
	case "#ff8439":
		fallthrough
	case "#808080":
		*e = ScoutingObservationLocationDisplayColorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoutingObservationLocationDisplayColorEnum: %v", v)
	}
}

// ScoutingObservationStatusEnum - The status of the scouting observation For example : ACTIVE, DELETED
type ScoutingObservationStatusEnum string

const (
	ScoutingObservationStatusEnumActive  ScoutingObservationStatusEnum = "ACTIVE"
	ScoutingObservationStatusEnumDeleted ScoutingObservationStatusEnum = "DELETED"
)

func (e ScoutingObservationStatusEnum) ToPointer() *ScoutingObservationStatusEnum {
	return &e
}

func (e *ScoutingObservationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "DELETED":
		*e = ScoutingObservationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoutingObservationStatusEnum: %v", v)
	}
}

// ScoutingObservationTimespanEnum - Permanent or seasonal
type ScoutingObservationTimespanEnum string

const (
	ScoutingObservationTimespanEnumPermanent ScoutingObservationTimespanEnum = "PERMANENT"
	ScoutingObservationTimespanEnumSeasonal  ScoutingObservationTimespanEnum = "SEASONAL"
)

func (e ScoutingObservationTimespanEnum) ToPointer() *ScoutingObservationTimespanEnum {
	return &e
}

func (e *ScoutingObservationTimespanEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PERMANENT":
		fallthrough
	case "SEASONAL":
		*e = ScoutingObservationTimespanEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoutingObservationTimespanEnum: %v", v)
	}
}

// ScoutingObservation - Returns the requested scouting observation.
type ScoutingObservation struct {
	// The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).
	EndTime time.Time `json:"endTime"`
	// Array of field ids associated with this observation.
	FieldIds []string `json:"fieldIds"`
	// The id of a scouting observation.
	ID string `json:"id"`
	// GeoJSON
	Location Geometry `json:"location"`
	// Color of scouting pin assigned in the Climate FieldView app.
	// Limited in the Ux to a set of RGB values.
	// * #307af7
	// * #38d753
	// * #b037e4
	// * #ef3e3e
	// * #f7ec41
	// * #ff8439
	// * #808080
	//
	LocationDisplayColor ScoutingObservationLocationDisplayColorEnum `json:"locationDisplayColor"`
	// The text of the scouting observation. Maximum of 4000 characters.
	Note string `json:"note"`
	// The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).
	StartTime time.Time `json:"startTime"`
	// The status of the scouting observation For example : ACTIVE, DELETED
	Status ScoutingObservationStatusEnum `json:"status"`
	// For example, ROCK_STONE, PONDING_WET, HAIL Maximum 20 tags allowed, 40 characters per tag.
	Tags []ScoutingTag `json:"tags"`
	// Permanent or seasonal
	Timespan ScoutingObservationTimespanEnum `json:"timespan"`
	// The title or summary of the scouting observation. 40 Characters long, no emojis, and leading and trailing whitespace will be trimmed.
	Title string `json:"title"`
	// The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).
	UpdatedAt time.Time `json:"updatedAt"`
}
