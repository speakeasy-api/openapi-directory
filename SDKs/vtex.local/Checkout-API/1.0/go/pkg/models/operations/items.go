// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type ItemsRequestBodyOrderItems struct {
	// The ID of the SKU in VTEX platform.
	ID string `json:"id"`
	// The position of the item in the array.
	Index int64 `json:"index"`
	// Price of the item in cents. Send this value in case you want to make a bulk price change.
	Price *int64 `json:"price,omitempty"`
	// The quantity of the item (SKU) in the cart.
	Quantity int `json:"quantity"`
	// The seller responsible for the SKU.
	Seller string `json:"seller"`
}

type ItemsRequestBody struct {
	// Array containing the cart items. Each object inside this array corresponds to a different item.
	OrderItems []ItemsRequestBodyOrderItems `json:"orderItems,omitempty"`
}

type ItemsRequest struct {
	// HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Type of the content being sent.
	ContentType string           `header:"style=simple,explode=false,name=Content-Type"`
	RequestBody ItemsRequestBody `request:"mediaType=application/json"`
	// In order to optimize performance, this parameter allows some information to not be updated when there are changes in the minicart. For instance, if a shopper adds another unit of a given SKU to the cart, it may not be necessary to recalculate payment information, which could impact performance.
	//
	// This array accepts strings and currently the only possible value is `”paymentData”`.
	AllowedOutdatedData []interface{} `queryParam:"style=form,explode=true,name=allowedOutdatedData"`
	// ID of the orderForm corresponding to the cart in which the new item will be added.
	OrderFormID string `pathParam:"style=simple,explode=false,name=orderFormId"`
}

type Items200ApplicationJSONAvailableAddresses struct {
	// Address ID.
	AddressID *string `json:"addressId,omitempty"`
	// Address type.
	AddressType *string `json:"addressType,omitempty"`
	// City of the address.
	City *string `json:"city,omitempty"`
	// Complement to the address.
	Complement *string `json:"complement,omitempty"`
	// Country of the address. ISO three-letter code.
	Country *string `json:"country,omitempty"`
	// Array containing two floats with geocoordinates, first longitude, then latitude.
	GeoCoordinates []float64 `json:"geoCoordinates,omitempty"`
	// Indicates whether address is disposable.
	IsDisposable *bool `json:"isDisposable,omitempty"`
	// Neighborhood of the address.
	Neighborhood *string `json:"neighborhood,omitempty"`
	// Number of the address.
	Number *string `json:"number,omitempty"`
	// Name of the receiver.
	ReceiverName *string `json:"receiverName,omitempty"`
	// Reference that may help in the location of the address.
	Reference *string `json:"reference,omitempty"`
	// State of the address.
	State *string `json:"state,omitempty"`
	// Street of the address.
	Street *string `json:"street,omitempty"`
}

// Items200ApplicationJSONClientPreferencesData - Object containing preferences from the client who placed the order.
type Items200ApplicationJSONClientPreferencesData struct {
	// Client's locale. Examples: `pt-BR` and `en-US`.
	Locale *string `json:"locale,omitempty"`
	// `true` if the client opted to receive newsletter from the store.
	OptinNewsLetter *bool `json:"optinNewsLetter,omitempty"`
}

// Items200ApplicationJSONClientProfileData - Customer's profile information.
type Items200ApplicationJSONClientProfileData struct {
	// Corporate document, if the customer is a legal entity.
	CorporateDocument *string `json:"corporateDocument,omitempty"`
	// Company name, if the customer is a legal entity.
	CorporateName *string `json:"corporateName,omitempty"`
	// Corporate phone number, if the customer is a legal entity.
	CorporatePhone *string `json:"corporatePhone,omitempty"`
	// Customer class.
	CustomerClass *string `json:"customerClass,omitempty"`
	// Document informed by the customer.
	Document *string `json:"document,omitempty"`
	// Type of the document informed by the customer.
	DocumentType *string `json:"documentType,omitempty"`
	// Email address.
	Email *string `json:"email,omitempty"`
	// First name.
	FirstName *string `json:"firstName,omitempty"`
	// Indicates whether the customer is a legal entity.
	IsCorporate *bool `json:"isCorporate,omitempty"`
	// Last name.
	LastName *string `json:"lastName,omitempty"`
	// Phone number.
	Phone *string `json:"phone,omitempty"`
	// Indicates whether profile is complete on loading.
	ProfileCompleteOnLoading *bool `json:"profileCompleteOnLoading,omitempty"`
	// Indicates whether profile presents error on loading.
	ProfileErrorOnLoading *bool `json:"profileErrorOnLoading,omitempty"`
	// State inscription, if the customer is a legal entity.
	StateInscription *string `json:"stateInscription,omitempty"`
	// Trade name, if the customer is a legal entity.
	TradeName *string `json:"tradeName,omitempty"`
}

type Items200ApplicationJSONItemMetadataItems struct {
	// Detail URL.
	DetailURL *string `json:"detailUrl,omitempty"`
	// European Article Number.
	Ean *string `json:"ean,omitempty"`
	// Item ID.
	ID *string `json:"id,omitempty"`
	// Image URL.
	ImageURL *string `json:"imageUrl,omitempty"`
	// Product name.
	Name *string `json:"name,omitempty"`
	// Product ID.
	ProductID *string `json:"productId,omitempty"`
	// Ref ID.
	RefID *string `json:"refId,omitempty"`
	// Seller.
	Seller *string `json:"seller,omitempty"`
	// SKU name.
	SkuName *string `json:"skuName,omitempty"`
}

// Items200ApplicationJSONItemMetadata - Item metadata.
type Items200ApplicationJSONItemMetadata struct {
	// List of objects containing metadata on each item in the order.
	Items []Items200ApplicationJSONItemMetadataItems `json:"items,omitempty"`
}

// Items200ApplicationJSONItemsAdditionalInfo - Additional information.
type Items200ApplicationJSONItemsAdditionalInfo struct {
	// Brand ID.
	BrandID *string `json:"brandId,omitempty"`
	// Brand name.
	BrandName *string `json:"brandName,omitempty"`
	// Dimension.
	Dimension *string `json:"dimension,omitempty"`
	// Offering information.
	OfferingInfo *string `json:"offeringInfo,omitempty"`
	// Offering type.
	OfferingType *string `json:"offeringType,omitempty"`
	// Offering type ID.
	OfferingTypeID *string `json:"offeringTypeId,omitempty"`
}

type Items200ApplicationJSONItemsBundleItems struct {
	// Service identifier.
	ID *int64 `json:"id,omitempty"`
	// Service name.
	Name *string `json:"name,omitempty"`
	// Service price in cents.
	Price *int64 `json:"price,omitempty"`
	// Service type.
	Type *string `json:"type,omitempty"`
}

type Items200ApplicationJSONItemsPriceDefinitionSellingPrices struct {
	// Rounding quantity, meaning how many items are rounded to this value.
	Quantity *int64 `json:"quantity,omitempty"`
	// Value in cents for that specific rounding.
	Value *int64 `json:"value,omitempty"`
}

// Items200ApplicationJSONItemsPriceDefinition - Price information for all units of a specific item.
type Items200ApplicationJSONItemsPriceDefinition struct {
	// Item's calculated unitary selling price in cents.
	CalculatedSellingPrice *int64 `json:"calculatedSellingPrice,omitempty"`
	// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
	SellingPrices []Items200ApplicationJSONItemsPriceDefinitionSellingPrices `json:"sellingPrices,omitempty"`
	// Total value for all units of the item in cents.
	Total *int64 `json:"total,omitempty"`
}

type Items200ApplicationJSONItemsPriceTags struct {
	// Price tag identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Indicates whether price tag value is applied through a percentage.
	IsPercentual *bool `json:"isPercentual,omitempty"`
	// Price tag name.
	Name *string `json:"name,omitempty"`
	// Price tag raw value.
	RawValue *int64 `json:"rawValue,omitempty"`
	// Price tag value.
	Value *int64 `json:"value,omitempty"`
}

// Items200ApplicationJSONItemsProductCategories - Object, where each field is an ID from `productCategoryIds`.
type Items200ApplicationJSONItemsProductCategories struct {
	// Product category corresponding to the ID in the field key.
	ID *string `json:"{ID},omitempty"`
}

type Items200ApplicationJSONItems struct {
	// Additional information.
	AdditionalInfo *Items200ApplicationJSONItemsAdditionalInfo `json:"additionalInfo,omitempty"`
	// Array containing information on attachments.
	Attachments []string `json:"attachments,omitempty"`
	// Availability.
	Availability *string `json:"availability,omitempty"`
	// Information on services sold along with the SKU. Example: a gift package.
	BundleItems []Items200ApplicationJSONItemsBundleItems `json:"bundleItems,omitempty"`
	// Detail URL.
	DetailURL *string `json:"detailUrl,omitempty"`
	// European Article Number.
	Ean *string `json:"ean,omitempty"`
	// ID of the item.
	ID *string `json:"id,omitempty"`
	// Image URL.
	ImageURL *string `json:"imageUrl,omitempty"`
	// Indicates whether item is a gift.
	IsGift *bool `json:"isGift,omitempty"`
	// List price in cents.
	ListPrice *int64 `json:"listPrice,omitempty"`
	// Manual price in cents.
	ManualPrice *int64 `json:"manualPrice,omitempty"`
	// User that applied the manual price, if that is the case.
	ManualPriceAppliedBy *string `json:"manualPriceAppliedBy,omitempty"`
	// Manufacturer code.
	ManufacturerCode *string `json:"manufacturerCode,omitempty"`
	// Measurement unit.
	MeasurementUnit *string `json:"measurementUnit,omitempty"`
	// Modal type.
	ModalType *string `json:"modalType,omitempty"`
	// Product name.
	Name *string `json:"name,omitempty"`
	// Parent assembly binding.
	ParentAssemblyBinding *string `json:"parentAssemblyBinding,omitempty"`
	// Parent item index.
	ParentItemIndex *int64 `json:"parentItemIndex,omitempty"`
	// Presale date.
	PreSaleDate *string `json:"preSaleDate,omitempty"`
	// Price in cents.
	Price *int64 `json:"price,omitempty"`
	// Price information for all units of a specific item.
	PriceDefinition *Items200ApplicationJSONItemsPriceDefinition `json:"priceDefinition,omitempty"`
	// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
	PriceTags []Items200ApplicationJSONItemsPriceTags `json:"priceTags,omitempty"`
	// Price expiration date and time.
	PriceValidUntil *string `json:"priceValidUntil,omitempty"`
	// Object, where each field is an ID from `productCategoryIds`.
	ProductCategories *Items200ApplicationJSONItemsProductCategories `json:"productCategories,omitempty"`
	// Product category IDs.
	ProductCategoryIds *string `json:"productCategoryIds,omitempty"`
	// Product ID.
	ProductID *string `json:"productId,omitempty"`
	// Product Ref ID.
	ProductRefID *string `json:"productRefId,omitempty"`
	// Quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Ref ID.
	RefID *string `json:"refId,omitempty"`
	// Reward value in cents.
	RewardValue *int64 `json:"rewardValue,omitempty"`
	// Seller.
	Seller *string `json:"seller,omitempty"`
	// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
	SellerChain []string `json:"sellerChain,omitempty"`
	// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
	SellingPrice *int64 `json:"sellingPrice,omitempty"`
	// SKU name.
	SkuName *string `json:"skuName,omitempty"`
	// Tax value in cents.
	Tax *int64 `json:"tax,omitempty"`
	// Unique ID.
	UniqueID *string `json:"uniqueId,omitempty"`
	// Unit multiplier.
	UnitMultiplier *int64 `json:"unitMultiplier,omitempty"`
}

// Items200ApplicationJSONItemsOrdination - Object containing information about the ordering of items within the orderForm.
type Items200ApplicationJSONItemsOrdination struct {
	// Indicates whether the ordering is ascending.
	Ascending *bool `json:"ascending,omitempty"`
	// Criteria adopted to order the items in the list.
	Criteria *string `json:"criteria,omitempty"`
}

// Items200ApplicationJSONMarketingData - Object containing promotion data such as coupon tracking information and internal or external UTMs.
type Items200ApplicationJSONMarketingData struct {
	// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
	Coupon *string `json:"coupon,omitempty"`
	// UTM campaign
	UtmCampaign *string `json:"utmCampaign,omitempty"`
	// UTM medium.
	UtmMedium *string `json:"utmMedium,omitempty"`
	// UTM source.
	UtmSource *string `json:"utmSource,omitempty"`
	// utmi_campaign (internal utm).
	UtmiCampaign *string `json:"utmiCampaign,omitempty"`
	// utmi_page (internal utm).
	UtmiPage *string `json:"utmiPage,omitempty"`
	// utmi_part (internal utm).
	UtmiPart *string `json:"utmiPart,omitempty"`
}

type Items200ApplicationJSONPaymentDataGiftCards struct {
	// Gift card balance in cents.
	Balance *int64 `json:"balance,omitempty"`
	// Gift card ID.
	ID *string `json:"id,omitempty"`
	// Indicates whether gift card is in use.
	InUse *bool `json:"inUse,omitempty"`
	// Indicates whether gift card is special.
	IsSpecialCard *bool `json:"isSpecialCard,omitempty"`
	// Gift card name.
	Name *string `json:"name,omitempty"`
	// Gift card redemption code.
	RedemptionCode *string `json:"redemptionCode,omitempty"`
	// Gift card value in cents.
	Value *int64 `json:"value,omitempty"`
}

type Items200ApplicationJSONPaymentDataTransactionsPayments struct {
	// Account ID.
	AccountID *string `json:"accountId,omitempty"`
	// Bin.
	Bin *string `json:"bin,omitempty"`
	// Number of installments.
	Installments *int64 `json:"installments,omitempty"`
	// Payment system.
	PaymentSystem *string `json:"paymentSystem,omitempty"`
	// Reference value for calculating interest rates, in case it applies. Displayed in cents.
	ReferenceValue *int64 `json:"referenceValue,omitempty"`
	// Value including interest, in case it applies. Displayed in cents.
	Value *int64 `json:"value,omitempty"`
}

type Items200ApplicationJSONPaymentDataTransactions struct {
	// Indicates whether transaction is active.
	IsActive *bool `json:"isActive,omitempty"`
	// Merchant name.
	MerchantName *string `json:"merchantName,omitempty"`
	// Information on each payment.
	Payments []Items200ApplicationJSONPaymentDataTransactionsPayments `json:"payments,omitempty"`
	// Indicates whather transaction is shared.
	SharedTransaction *bool `json:"sharedTransaction,omitempty"`
	// Transaction ID.
	TransactionID *string `json:"transactionId,omitempty"`
}

// Items200ApplicationJSONPaymentData - Information on the order's payment.
type Items200ApplicationJSONPaymentData struct {
	// Gift card information, if it applies to the order.
	GiftCards []Items200ApplicationJSONPaymentDataGiftCards `json:"giftCards,omitempty"`
	// Information on each transaction pertinent to the order.
	Transactions []Items200ApplicationJSONPaymentDataTransactions `json:"transactions,omitempty"`
}

// Items200ApplicationJSONRatesAndBenefitsData - Information on rates and benefits that apply to the order.
type Items200ApplicationJSONRatesAndBenefitsData struct {
	// List with rates and benefits identifiers.
	RateAndBenefitsIdentifiers []string `json:"rateAndBenefitsIdentifiers,omitempty"`
	// List with rates and benefits teasers.
	Teaser []string `json:"teaser,omitempty"`
}

type Items200ApplicationJSONSellers struct {
	// Seller ID.
	ID *string `json:"id,omitempty"`
	// Seller logo.
	Logo *string `json:"logo,omitempty"`
	// Seller name.
	Name *string `json:"name,omitempty"`
}

// Items200ApplicationJSONShippingDataAddress - Address information.
type Items200ApplicationJSONShippingDataAddress struct {
	// Address ID.
	AddressID *string `json:"addressId,omitempty"`
	// Type of address. For example, `Residential` or `Pickup`.
	AddressType *string `json:"addressType,omitempty"`
	// City of the shipping address.
	City *string `json:"city,omitempty"`
	// Complement to the shipping address, in case it applies.
	Complement *string `json:"complement,omitempty"`
	// Three letter ISO code of the country of the shipping address.
	Country *string `json:"country,omitempty"`
	// Array containing two floats with geocoordinates, first longitude, then latitude.
	GeoCoordinates []float64 `json:"geoCoordinates,omitempty"`
	// Indicates whether address is disposable.
	IsDisposable *bool `json:"isDisposable,omitempty"`
	// Neighborhood of the shipping address.
	Neighborhood *string `json:"neighborhood,omitempty"`
	// Number of the building, house or apartment in the shipping address.
	Number *string `json:"number,omitempty"`
	// Postal code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Name of the person who is going to receive the order.
	ReceiverName *string `json:"receiverName,omitempty"`
	// Complement that might help locate the shipping address more precisely in case of delivery.
	Reference *string `json:"reference,omitempty"`
	// State of the shipping address.
	State *string `json:"state,omitempty"`
	// Street of the shipping address.
	Street *string `json:"street,omitempty"`
}

type Items200ApplicationJSONShippingDataAvailableAddresses struct {
	// Address ID.
	AddressID *string `json:"addressId,omitempty"`
	// Type of address. For example, `Residential` or `Pickup`.
	AddressType *string `json:"addressType,omitempty"`
	// City of the shipping address.
	City *string `json:"city,omitempty"`
	// Complement to the shipping address, in case it applies.
	Complement *string `json:"complement,omitempty"`
	// Three letter ISO code of the country of the shipping address.
	Country *string `json:"country,omitempty"`
	// Array containing two floats with geocoordinates, first longitude, then latitude.
	GeoCoordinates []float64 `json:"geoCoordinates,omitempty"`
	// Indicates whether address is disposable.
	IsDisposable *bool `json:"isDisposable,omitempty"`
	// Neighborhood of the shipping address.
	Neighborhood *string `json:"neighborhood,omitempty"`
	// Number of the building, house or apartment in the shipping address.
	Number *string `json:"number,omitempty"`
	// Postal code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Name of the person who is going to receive the order.
	ReceiverName *string `json:"receiverName,omitempty"`
	// Complement that might help locate the shipping address more precisely in case of delivery.
	Reference *string `json:"reference,omitempty"`
	// State of the shipping address.
	State *string `json:"state,omitempty"`
	// Street of the shipping address.
	Street *string `json:"street,omitempty"`
}

type Items200ApplicationJSONShippingDataLogisticsInfoDeliveryChannels struct {
	// Delivery channel ID.
	ID *string `json:"id,omitempty"`
}

type Items200ApplicationJSONShippingDataLogisticsInfoSlasDeliveryIds struct {
	// Courier ID.
	CourierID *string `json:"courierId,omitempty"`
	// Courier name.
	CourierName *string `json:"courierName,omitempty"`
	// Warehouse ID.
	DockID *string `json:"dockId,omitempty"`
	// Quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Warehouse ID.
	WarehouseID *string `json:"warehouseId,omitempty"`
}

// Items200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress - Address information.
type Items200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress struct {
	// Type of address. For example, `Residential` or `Pickup`.
	AddressType *string `json:"addressType,omitempty"`
	// City of the shipping address.
	City *string `json:"city,omitempty"`
	// Complement to the shipping address, in case it applies.
	Complement *string `json:"complement,omitempty"`
	// Three letter ISO code of the country of the shipping address.
	Country *string `json:"country,omitempty"`
	// Array containing two floats with geocoordinates, first longitude, then latitude.
	GeoCoordinates []float64 `json:"geoCoordinates,omitempty"`
	// Neighborhood of the shipping address.
	Neighborhood *string `json:"neighborhood,omitempty"`
	// Number of the building, house or apartment in the shipping address.
	Number *string `json:"number,omitempty"`
	// Postal code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Complement that might help locate the shipping address more precisely in case of delivery.
	Reference *string `json:"reference,omitempty"`
	// State of the shipping address.
	State *string `json:"state,omitempty"`
	// Street of the shipping address.
	Street *string `json:"street,omitempty"`
}

// Items200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfo - Information on the pickup store.
type Items200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfo struct {
	// Additional information.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	// Address information.
	Address *Items200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress `json:"address,omitempty"`
	// Corresponding dock ID.
	DockID *string `json:"dockId,omitempty"`
	// Friendly name.
	FriendlyName *string `json:"friendlyName,omitempty"`
	// Indicates whether it is the pickup store.
	IsPickupStore *bool `json:"isPickupStore,omitempty"`
}

type Items200ApplicationJSONShippingDataLogisticsInfoSlas struct {
	// Delivery channel.
	DeliveryChannel *string `json:"deliveryChannel,omitempty"`
	// Information on each delivery ID.
	DeliveryIds []Items200ApplicationJSONShippingDataLogisticsInfoSlasDeliveryIds `json:"deliveryIds,omitempty"`
	// SLA ID.
	ID *string `json:"id,omitempty"`
	// List price in cents.
	ListPrice *int64 `json:"listPrice,omitempty"`
	// Estimate date of delivery.
	LockTTL *string `json:"lockTTL,omitempty"`
	// SLA name.
	Name *string `json:"name,omitempty"`
	// Pickup point distance.
	PickupDistance *int64 `json:"pickupDistance,omitempty"`
	// Pickup point ID.
	PickupPointID *string `json:"pickupPointId,omitempty"`
	// Information on the pickup store.
	PickupStoreInfo *Items200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfo `json:"pickupStoreInfo,omitempty"`
	// Polygon name.
	PolygonName *string `json:"polygonName,omitempty"`
	// Price in cents.
	Price *int64 `json:"price,omitempty"`
	// Shipping estimate. For instance, Three business days will be represented `3bd`.
	ShippingEstimate *string `json:"shippingEstimate,omitempty"`
	// Shipping estimate date.
	ShippingEstimateDate *string `json:"shippingEstimateDate,omitempty"`
	// Tax in cents.
	Tax *int64 `json:"tax,omitempty"`
	// Transit time. For instance, "three business days" is represented `3bd`.
	TransitTime *string `json:"transitTime,omitempty"`
}

type Items200ApplicationJSONShippingDataLogisticsInfo struct {
	// Address ID.
	AddressID *string `json:"addressId,omitempty"`
	// List of available delivery channels.
	DeliveryChannels []Items200ApplicationJSONShippingDataLogisticsInfoDeliveryChannels `json:"deliveryChannels,omitempty"`
	// Item ID.
	ItemID *string `json:"itemId,omitempty"`
	// Index corresponding to the position of the object in the `items` array.
	ItemIndex *int64 `json:"itemIndex,omitempty"`
	// Delivery channel selected by the customer.
	SelectedDeliveryChannel *string `json:"selectedDeliveryChannel,omitempty"`
	// SLA selected by the customer.
	SelectedSLA *string `json:"selectedSla,omitempty"`
	// List of countries that the item may be shipped to.
	ShipsTo []string `json:"shipsTo,omitempty"`
	// Information on available SLAs.
	Slas []Items200ApplicationJSONShippingDataLogisticsInfoSlas `json:"slas,omitempty"`
}

type Items200ApplicationJSONShippingDataSelectedAddresses struct {
	// Address ID.
	AddressID *string `json:"addressId,omitempty"`
	// Type of address. For example, `Residential` or `Pickup`.
	AddressType *string `json:"addressType,omitempty"`
	// City of the shipping address.
	City *string `json:"city,omitempty"`
	// Complement to the shipping address, in case it applies.
	Complement *string `json:"complement,omitempty"`
	// Three letter ISO code of the country of the shipping address.
	Country *string `json:"country,omitempty"`
	// Array containing two floats with geocoordinates, first longitude, then latitude.
	GeoCoordinates []float64 `json:"geoCoordinates,omitempty"`
	// Indicates whether address is disposable.
	IsDisposable *bool `json:"isDisposable,omitempty"`
	// Neighborhood of the shipping address.
	Neighborhood *string `json:"neighborhood,omitempty"`
	// Number of the building, house or apartment in the shipping address.
	Number *string `json:"number,omitempty"`
	// Postal code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Name of the person who is going to receive the order.
	ReceiverName *string `json:"receiverName,omitempty"`
	// Complement that might help locate the shipping address more precisely in case of delivery.
	Reference *string `json:"reference,omitempty"`
	// State of the shipping address.
	State *string `json:"state,omitempty"`
	// Street of the shipping address.
	Street *string `json:"street,omitempty"`
}

// Items200ApplicationJSONShippingData - Shipping information pertinent to the order.
type Items200ApplicationJSONShippingData struct {
	// Address information.
	Address *Items200ApplicationJSONShippingDataAddress `json:"address,omitempty"`
	// Array with information on the available addresses for the order.
	AvailableAddresses []Items200ApplicationJSONShippingDataAvailableAddresses `json:"availableAddresses,omitempty"`
	// Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
	LogisticsInfo []Items200ApplicationJSONShippingDataLogisticsInfo `json:"logisticsInfo,omitempty"`
	// Array with information on the selected addresses for the order.
	SelectedAddresses []Items200ApplicationJSONShippingDataSelectedAddresses `json:"selectedAddresses,omitempty"`
}

// Items200ApplicationJSON - OK
type Items200ApplicationJSON struct {
	// Permission to modify item price manually.
	AllowManualPrice *bool `json:"allowManualPrice,omitempty"`
	// Available accounts.
	AvailableAccounts []string `json:"availableAccounts,omitempty"`
	// Information on each available address.
	AvailableAddresses []Items200ApplicationJSONAvailableAddresses `json:"availableAddresses,omitempty"`
	// Data can be edited.
	CanEditData *bool `json:"canEditData,omitempty"`
	// Object containing preferences from the client who placed the order.
	ClientPreferencesData *Items200ApplicationJSONClientPreferencesData `json:"clientPreferencesData,omitempty"`
	// Customer's profile information.
	ClientProfileData *Items200ApplicationJSONClientProfileData `json:"clientProfileData,omitempty"`
	// Object containing commercial condition information.
	CommercialConditionData map[string]interface{} `json:"commercialConditionData,omitempty"`
	// Customer additional information.
	CustomData map[string]interface{} `json:"customData,omitempty"`
	// Gift registry list information.
	GiftRegistryData map[string]interface{} `json:"giftRegistryData,omitempty"`
	// Hooks information.
	HooksData map[string]interface{} `json:"hooksData,omitempty"`
	// Ignore customer profile data.
	IgnoreProfileData *bool `json:"ignoreProfileData,omitempty"`
	// Object containing information pertinent to the order's invoice.
	InvoiceData map[string]interface{} `json:"invoiceData,omitempty"`
	// Indicates whether order is checked in.
	IsCheckedIn *bool `json:"isCheckedIn,omitempty"`
	// Item metadata.
	ItemMetadata *Items200ApplicationJSONItemMetadata `json:"itemMetadata,omitempty"`
	// Information on each item in the order.
	Items []Items200ApplicationJSONItems `json:"items,omitempty"`
	// Object containing information about the ordering of items within the orderForm.
	ItemsOrdination *Items200ApplicationJSONItemsOrdination `json:"itemsOrdination,omitempty"`
	// Indicates whether the user is logged into the store.
	LoggedIn *bool `json:"loggedIn,omitempty"`
	// Object containing promotion data such as coupon tracking information and internal or external UTMs.
	MarketingData *Items200ApplicationJSONMarketingData `json:"marketingData,omitempty"`
	// Array containing an object for each message generated by our servers while processing the request.
	Messages []interface{} `json:"messages,omitempty"`
	// Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1).
	OpenTextField *string `json:"openTextField,omitempty"`
	// ID of the orderForm corresponding to a specific cart.
	OrderFormID *string `json:"orderFormId,omitempty"`
	// Information on the order's payment.
	PaymentData *Items200ApplicationJSONPaymentData `json:"paymentData,omitempty"`
	// Profile provider.
	ProfileProvider *string `json:"profileProvider,omitempty"`
	// Information on rates and benefits that apply to the order.
	RatesAndBenefitsData *Items200ApplicationJSONRatesAndBenefitsData `json:"ratesAndBenefitsData,omitempty"`
	// Attribute created by the seller, in their VTEX store configuration.
	SalesChannel *string `json:"salesChannel,omitempty"`
	// Array containing the data of the item selected as a gift.
	SelectableGifts []interface{} `json:"selectableGifts,omitempty"`
	// Information on each seller.
	Sellers []Items200ApplicationJSONSellers `json:"sellers,omitempty"`
	// Shipping information pertinent to the order.
	ShippingData *Items200ApplicationJSONShippingData `json:"shippingData,omitempty"`
	// ID of the store.
	StoreID *string `json:"storeId,omitempty"`
	// Object containing data from the store's configuration (stored in VTEX's License Manager).
	StorePreferencesData map[string]interface{} `json:"storePreferencesData,omitempty"`
	// Subscription information.
	SubscriptionData map[string]interface{} `json:"subscriptionData,omitempty"`
	// Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
	Totalizers []interface{} `json:"totalizers,omitempty"`
	// Unique ID associated with the customer profile.
	UserProfileID *string `json:"userProfileId,omitempty"`
	// User type.
	UserType *string `json:"userType,omitempty"`
	// Total value of the order without separating cents. For example, $24.99 is represented `2499`.
	Value *int64 `json:"value,omitempty"`
}

type ItemsResponse struct {
	ContentType string
	// OK
	Items200ApplicationJSONObject *Items200ApplicationJSON
	StatusCode                    int
	RawResponse                   *http.Response
}
