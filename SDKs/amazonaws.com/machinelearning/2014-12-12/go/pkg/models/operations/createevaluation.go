// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateEvaluationXAmzTargetEnum
type CreateEvaluationXAmzTargetEnum string

const (
	CreateEvaluationXAmzTargetEnumAmazonMl20141212CreateEvaluation CreateEvaluationXAmzTargetEnum = "AmazonML_20141212.CreateEvaluation"
)

func (e CreateEvaluationXAmzTargetEnum) ToPointer() *CreateEvaluationXAmzTargetEnum {
	return &e
}

func (e *CreateEvaluationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonML_20141212.CreateEvaluation":
		*e = CreateEvaluationXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEvaluationXAmzTargetEnum: %v", v)
	}
}

type CreateEvaluationRequest struct {
	CreateEvaluationInput shared.CreateEvaluationInput   `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateEvaluationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateEvaluationResponse struct {
	ContentType string
	// Success
	CreateEvaluationOutput *shared.CreateEvaluationOutput
	// IdempotentParameterMismatchException
	IdempotentParameterMismatchException interface{}
	// InternalServerException
	InternalServerException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	StatusCode            int
	RawResponse           *http.Response
}
