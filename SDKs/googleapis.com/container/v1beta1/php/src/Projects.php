<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists subnetworks that can be used for creating clusters in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListResponse
     */
	public function containerProjectsAggregatedUsableSubnetworksList(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/aggregated/usableSubnetworks', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsAggregatedUsableSubnetworksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsableSubnetworksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUsableSubnetworksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Completes master IP rotation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationResponse
     */
	public function containerProjectsLocationsClustersCompleteIpRotation(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:completeIpRotation', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "completeIPRotationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCompleteIpRotationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateResponse
     */
	public function containerProjectsLocationsClustersCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/clusters', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createClusterRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the public component of the cluster signing keys in JSON Web Key format. This API is not yet intended for general use, and is not available for all clusters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersGetJwksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersGetJwksResponse
     */
	public function containerProjectsLocationsClustersGetJwks(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersGetJwksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersGetJwksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/jwks', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersGetJwksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersGetJwksRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersGetJwksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getJSONWebKeysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetJSONWebKeysResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all clusters owned by a project in either the specified zone or all zones.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListResponse
     */
	public function containerProjectsLocationsClustersList(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/clusters', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClustersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClustersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CompleteNodePoolUpgrade will signal an on-going node pool upgrade to complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeResponse
     */
	public function containerProjectsLocationsClustersNodePoolsCompleteUpgrade(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:completeUpgrade', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCompleteUpgradeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a node pool for a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateResponse
     */
	public function containerProjectsLocationsClustersNodePoolsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/nodePools', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createNodePoolRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a node pool from a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteResponse
     */
	public function containerProjectsLocationsClustersNodePoolsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the node pools for a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListResponse
     */
	public function containerProjectsLocationsClustersNodePoolsList(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/nodePools', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNodePoolsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNodePoolsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackResponse
     */
	public function containerProjectsLocationsClustersNodePoolsRollback(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:rollback', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rollbackNodePoolUpgradeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the autoscaling settings of a specific node pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingResponse
     */
	public function containerProjectsLocationsClustersNodePoolsSetAutoscaling(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setAutoscaling', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setNodePoolAutoscalingRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetAutoscalingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the NodeManagement options for a node pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementResponse
     */
	public function containerProjectsLocationsClustersNodePoolsSetManagement(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setManagement', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setNodePoolManagementRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetManagementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SetNodePoolSizeRequest sets the size of a node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeResponse
     */
	public function containerProjectsLocationsClustersNodePoolsSetSize(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setSize', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setNodePoolSizeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsSetSizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the version and/or image type of a specific node pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateResponse
     */
	public function containerProjectsLocationsClustersNodePoolsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateNodePoolRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersNodePoolsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the addons for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsResponse
     */
	public function containerProjectsLocationsClustersSetAddons(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setAddons', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setAddonsConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetAddonsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables or disables the ABAC authorization mechanism on a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacResponse
     */
	public function containerProjectsLocationsClustersSetLegacyAbac(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setLegacyAbac', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLegacyAbacRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLegacyAbacResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters/update) instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsResponse
     */
	public function containerProjectsLocationsClustersSetLocations(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setLocations', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLocationsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the logging service for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingResponse
     */
	public function containerProjectsLocationsClustersSetLogging(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setLogging', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLoggingServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetLoggingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the maintenance policy for a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicyResponse
     */
	public function containerProjectsLocationsClustersSetMaintenancePolicy(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setMaintenancePolicy', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setMaintenancePolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMaintenancePolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthResponse
     */
	public function containerProjectsLocationsClustersSetMasterAuth(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setMasterAuth', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setMasterAuthRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMasterAuthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the monitoring service for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringResponse
     */
	public function containerProjectsLocationsClustersSetMonitoring(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setMonitoring', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setMonitoringServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetMonitoringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables or disables Network Policy for a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicyResponse
     */
	public function containerProjectsLocationsClustersSetNetworkPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setNetworkPolicy', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setNetworkPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetNetworkPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets labels on a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsResponse
     */
	public function containerProjectsLocationsClustersSetResourceLabels(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setResourceLabels', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersSetResourceLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts master IP rotation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationResponse
     */
	public function containerProjectsLocationsClustersStartIpRotation(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:startIpRotation', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startIPRotationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersStartIpRotationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the master for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterResponse
     */
	public function containerProjectsLocationsClustersUpdateMaster(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:updateMaster', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateMasterRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersUpdateMasterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the OIDC discovery document for the cluster. See the [OpenID Connect Discovery 1.0 specification](https://openid.net/specs/openid-connect-discovery-1_0.html) for details. This API is not yet intended for general use, and is not available for all clusters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersWellKnownGetOpenidConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersWellKnownGetOpenidConfigurationResponse
     */
	public function containerProjectsLocationsClustersWellKnownGetOpenidConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersWellKnownGetOpenidConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersWellKnownGetOpenidConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/.well-known/openid-configuration', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersWellKnownGetOpenidConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersWellKnownGetOpenidConfigurationRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsClustersWellKnownGetOpenidConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOpenIDConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetOpenIDConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns configuration info about the Google Kubernetes Engine service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigResponse
     */
	public function containerProjectsLocationsGetServerConfig(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/serverConfig', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsGetServerConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches locations that offer Google Kubernetes Engine.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListResponse
     */
	public function containerProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/locations', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels the specified operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelResponse
     */
	public function containerProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cancelOperationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetResponse
     */
	public function containerProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all operations in a project in the specified zone or all zones.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListResponse
     */
	public function containerProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/operations', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the addons for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsResponse
     */
	public function containerProjectsZonesClustersAddons(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/addons', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setAddonsConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersAddonsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Completes master IP rotation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationResponse
     */
	public function containerProjectsZonesClustersCompleteIpRotation(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "completeIPRotationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCompleteIpRotationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateResponse
     */
	public function containerProjectsZonesClustersCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createClusterRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteResponse
     */
	public function containerProjectsZonesClustersDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the details for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetResponse
     */
	public function containerProjectsZonesClustersGet(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cluster = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Cluster', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables or disables the ABAC authorization mechanism on a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacResponse
     */
	public function containerProjectsZonesClustersLegacyAbac(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLegacyAbacRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLegacyAbacResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all clusters owned by a project in either the specified zone or all zones.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListResponse
     */
	public function containerProjectsZonesClustersList(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClustersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClustersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters/update) instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsResponse
     */
	public function containerProjectsZonesClustersLocations(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/locations', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLocationsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the logging service for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingResponse
     */
	public function containerProjectsZonesClustersLogging(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/logging', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLoggingServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersLoggingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the master for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterResponse
     */
	public function containerProjectsZonesClustersMaster(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/master', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateMasterRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMasterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the monitoring service for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringResponse
     */
	public function containerProjectsZonesClustersMonitoring(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/monitoring', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setMonitoringServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersMonitoringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the autoscaling settings of a specific node pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingResponse
     */
	public function containerProjectsZonesClustersNodePoolsAutoscaling(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/autoscaling', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setNodePoolAutoscalingRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsAutoscalingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a node pool for a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateResponse
     */
	public function containerProjectsZonesClustersNodePoolsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createNodePoolRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a node pool from a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteResponse
     */
	public function containerProjectsZonesClustersNodePoolsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the requested node pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetResponse
     */
	public function containerProjectsZonesClustersNodePoolsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodePool = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodePool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the node pools for a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListResponse
     */
	public function containerProjectsZonesClustersNodePoolsList(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNodePoolsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNodePoolsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackResponse
     */
	public function containerProjectsZonesClustersNodePoolsRollback(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rollbackNodePoolUpgradeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the NodeManagement options for a node pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementResponse
     */
	public function containerProjectsZonesClustersNodePoolsSetManagement(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setNodePoolManagementRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetManagementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SetNodePoolSizeRequest sets the size of a node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeResponse
     */
	public function containerProjectsZonesClustersNodePoolsSetSize(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setSize', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setNodePoolSizeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsSetSizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the version and/or image type of a specific node pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateResponse
     */
	public function containerProjectsZonesClustersNodePoolsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/update', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateNodePoolRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersNodePoolsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets labels on a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsResponse
     */
	public function containerProjectsZonesClustersResourceLabels(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersResourceLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the maintenance policy for a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicyResponse
     */
	public function containerProjectsZonesClustersSetMaintenancePolicy(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMaintenancePolicy', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setMaintenancePolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMaintenancePolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthResponse
     */
	public function containerProjectsZonesClustersSetMasterAuth(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setMasterAuthRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetMasterAuthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables or disables Network Policy for a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicyResponse
     */
	public function containerProjectsZonesClustersSetNetworkPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setNetworkPolicy', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setNetworkPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersSetNetworkPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts master IP rotation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationResponse
     */
	public function containerProjectsZonesClustersStartIpRotation(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startIPRotationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersStartIpRotationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the settings for a specific cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateResponse
     */
	public function containerProjectsZonesClustersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateClusterRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesClustersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns configuration info about the Google Kubernetes Engine service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigResponse
     */
	public function containerProjectsZonesGetServerconfig(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/serverconfig', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesGetServerconfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels the specified operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelResponse
     */
	public function containerProjectsZonesOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cancelOperationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetResponse
     */
	public function containerProjectsZonesOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all operations in a project in the specified zone or all zones.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListResponse
     */
	public function containerProjectsZonesOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/projects/{projectId}/zones/{zone}/operations', \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContainerProjectsZonesOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}