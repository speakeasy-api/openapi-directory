// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PsnocSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PsnocRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration Number
	RegNum string `json:"RegNum"`
	// Aadhaar number
	UID string `json:"UID"`
}

// PsnocRequestBodyFormatEnum - The format of the certificate in response.
type PsnocRequestBodyFormatEnum string

const (
	PsnocRequestBodyFormatEnumPdf PsnocRequestBodyFormatEnum = "pdf"
)

func (e PsnocRequestBodyFormatEnum) ToPointer() *PsnocRequestBodyFormatEnum {
	return &e
}

func (e *PsnocRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = PsnocRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PsnocRequestBodyFormatEnum: %v", v)
	}
}

// PsnocRequestBody - Request format
type PsnocRequestBody struct {
	CertificateParameters *PsnocRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PsnocRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Psnoc504ApplicationJSONErrorEnum string

const (
	Psnoc504ApplicationJSONErrorEnumGatewayTimeout Psnoc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Psnoc504ApplicationJSONErrorEnum) ToPointer() *Psnoc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Psnoc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Psnoc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Psnoc504ApplicationJSONErrorDescriptionEnum string

const (
	Psnoc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Psnoc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Psnoc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Psnoc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Psnoc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Psnoc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Psnoc504ApplicationJSON - Gateway timeout
type Psnoc504ApplicationJSON struct {
	Error            *Psnoc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psnoc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psnoc503ApplicationJSONErrorEnum string

const (
	Psnoc503ApplicationJSONErrorEnumServiceUnavailable Psnoc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Psnoc503ApplicationJSONErrorEnum) ToPointer() *Psnoc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Psnoc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Psnoc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Psnoc503ApplicationJSONErrorDescriptionEnum string

const (
	Psnoc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Psnoc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Psnoc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Psnoc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Psnoc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Psnoc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Psnoc503ApplicationJSON - Service unavailable
type Psnoc503ApplicationJSON struct {
	Error            *Psnoc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psnoc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psnoc502ApplicationJSONErrorEnum string

const (
	Psnoc502ApplicationJSONErrorEnumBadGatewy Psnoc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Psnoc502ApplicationJSONErrorEnum) ToPointer() *Psnoc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Psnoc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Psnoc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Psnoc502ApplicationJSONErrorDescriptionEnum string

const (
	Psnoc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Psnoc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Psnoc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Psnoc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Psnoc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Psnoc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Psnoc502ApplicationJSON - Bad gateway
type Psnoc502ApplicationJSON struct {
	Error            *Psnoc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psnoc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psnoc500ApplicationJSONErrorEnum string

const (
	Psnoc500ApplicationJSONErrorEnumInternalServerError Psnoc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Psnoc500ApplicationJSONErrorEnum) ToPointer() *Psnoc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Psnoc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Psnoc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Psnoc500ApplicationJSONErrorDescriptionEnum string

const (
	Psnoc500ApplicationJSONErrorDescriptionEnumInternalServerError Psnoc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Psnoc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Psnoc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Psnoc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Psnoc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Psnoc500ApplicationJSON - Internal server error
type Psnoc500ApplicationJSON struct {
	Error            *Psnoc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psnoc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psnoc404ApplicationJSONErrorEnum string

const (
	Psnoc404ApplicationJSONErrorEnumRecordNotFound Psnoc404ApplicationJSONErrorEnum = "record_not_found"
	Psnoc404ApplicationJSONErrorEnumURLNotFound    Psnoc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Psnoc404ApplicationJSONErrorEnum) ToPointer() *Psnoc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Psnoc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Psnoc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Psnoc404ApplicationJSONErrorDescriptionEnum string

const (
	Psnoc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Psnoc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Psnoc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Psnoc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Psnoc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Psnoc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Psnoc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Psnoc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Psnoc404ApplicationJSON - No record found
type Psnoc404ApplicationJSON struct {
	Error            *Psnoc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psnoc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psnoc401ApplicationJSONErrorEnum string

const (
	Psnoc401ApplicationJSONErrorEnumInvalidAuthentication Psnoc401ApplicationJSONErrorEnum = "invalid_authentication"
	Psnoc401ApplicationJSONErrorEnumInvalidAuthorization  Psnoc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Psnoc401ApplicationJSONErrorEnum) ToPointer() *Psnoc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Psnoc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Psnoc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Psnoc401ApplicationJSONErrorDescriptionEnum string

const (
	Psnoc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Psnoc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Psnoc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Psnoc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Psnoc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Psnoc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Psnoc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Psnoc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Psnoc401ApplicationJSON - Unauthorized access
type Psnoc401ApplicationJSON struct {
	Error            *Psnoc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psnoc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psnoc400ApplicationJSONErrorEnum string

const (
	Psnoc400ApplicationJSONErrorEnumMissingParameter Psnoc400ApplicationJSONErrorEnum = "missing_parameter"
	Psnoc400ApplicationJSONErrorEnumInvalidParameter Psnoc400ApplicationJSONErrorEnum = "invalid_parameter"
	Psnoc400ApplicationJSONErrorEnumInvalidFormat    Psnoc400ApplicationJSONErrorEnum = "invalid_format"
	Psnoc400ApplicationJSONErrorEnumInvalidTxnid     Psnoc400ApplicationJSONErrorEnum = "invalid_txnid"
	Psnoc400ApplicationJSONErrorEnumInvalidConsentid Psnoc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Psnoc400ApplicationJSONErrorEnum) ToPointer() *Psnoc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Psnoc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Psnoc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Psnoc400ApplicationJSONErrorDescriptionEnum string

const (
	Psnoc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Psnoc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Psnoc400ApplicationJSONErrorDescriptionEnumBadRequest                              Psnoc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Psnoc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Psnoc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Psnoc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Psnoc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Psnoc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Psnoc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Psnoc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Psnoc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Psnoc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Psnoc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Psnoc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Psnoc400ApplicationJSON - Bad request
type Psnoc400ApplicationJSON struct {
	Error            *Psnoc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psnoc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PsnocResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Psnoc400ApplicationJSONObject *Psnoc400ApplicationJSON
	// Unauthorized access
	Psnoc401ApplicationJSONObject *Psnoc401ApplicationJSON
	// No record found
	Psnoc404ApplicationJSONObject *Psnoc404ApplicationJSON
	// Internal server error
	Psnoc500ApplicationJSONObject *Psnoc500ApplicationJSON
	// Bad gateway
	Psnoc502ApplicationJSONObject *Psnoc502ApplicationJSON
	// Service unavailable
	Psnoc503ApplicationJSONObject *Psnoc503ApplicationJSON
	// Gateway timeout
	Psnoc504ApplicationJSONObject *Psnoc504ApplicationJSON
}
