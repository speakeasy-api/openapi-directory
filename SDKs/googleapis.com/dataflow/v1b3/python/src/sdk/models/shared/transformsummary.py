"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import displaydata as shared_displaydata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TransformSummaryKindEnum(str, Enum):
    r"""Type of transform."""
    UNKNOWN_KIND = 'UNKNOWN_KIND'
    PAR_DO_KIND = 'PAR_DO_KIND'
    GROUP_BY_KEY_KIND = 'GROUP_BY_KEY_KIND'
    FLATTEN_KIND = 'FLATTEN_KIND'
    READ_KIND = 'READ_KIND'
    WRITE_KIND = 'WRITE_KIND'
    CONSTANT_KIND = 'CONSTANT_KIND'
    SINGLETON_KIND = 'SINGLETON_KIND'
    SHUFFLE_KIND = 'SHUFFLE_KIND'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransformSummary:
    r"""Description of the type, names/ids, and input/outputs for a transform."""
    
    display_data: Optional[list[shared_displaydata.DisplayData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayData'), 'exclude': lambda f: f is None }})
    r"""Transform-specific display data."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""SDK generated id of this transform instance."""  
    input_collection_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputCollectionName'), 'exclude': lambda f: f is None }})
    r"""User names for all collection inputs to this transform."""  
    kind: Optional[TransformSummaryKindEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Type of transform."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""User provided name for this transform instance."""  
    output_collection_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputCollectionName'), 'exclude': lambda f: f is None }})
    r"""User names for all collection outputs to this transform."""  
    