"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customaction as shared_customaction
from ..shared import statefulengineoptions as shared_statefulengineoptions
from ..shared import statefulrulegroupreference as shared_statefulrulegroupreference
from ..shared import statelessrulegroupreference as shared_statelessrulegroupreference
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FirewallPolicy:
    r"""<p>The firewall policy defines the behavior of a firewall using a collection of stateless and stateful rule groups and other settings. You can use one firewall policy for multiple firewalls. </p> <p>This, along with <a>FirewallPolicyResponse</a>, define the policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>.</p>"""
    
    stateless_default_actions: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatelessDefaultActions') }})  
    stateless_fragment_default_actions: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatelessFragmentDefaultActions') }})  
    stateful_default_actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatefulDefaultActions'), 'exclude': lambda f: f is None }})  
    stateful_engine_options: Optional[shared_statefulengineoptions.StatefulEngineOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatefulEngineOptions'), 'exclude': lambda f: f is None }})  
    stateful_rule_group_references: Optional[list[shared_statefulrulegroupreference.StatefulRuleGroupReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatefulRuleGroupReferences'), 'exclude': lambda f: f is None }})  
    stateless_custom_actions: Optional[list[shared_customaction.CustomAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatelessCustomActions'), 'exclude': lambda f: f is None }})  
    stateless_rule_group_references: Optional[list[shared_statelessrulegroupreference.StatelessRuleGroupReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatelessRuleGroupReferences'), 'exclude': lambda f: f is None }})  
    