// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OptionStateEnum - <p>The state of processing a change to an option. One of:</p> <ul> <li>RequiresIndexDocuments: The option's latest value will not be deployed until <a>IndexDocuments</a> has been called and indexing is complete.</li> <li>Processing: The option's latest value is in the process of being activated.</li> <li>Active: The option's latest value is fully deployed. </li> <li>FailedToValidate: The option value is not compatible with the domain's data and cannot be used to index the data. You must either modify the option value or update or remove the incompatible documents.</li> </ul>
type OptionStateEnum string

const (
	OptionStateEnumRequiresIndexDocuments OptionStateEnum = "RequiresIndexDocuments"
	OptionStateEnumProcessing             OptionStateEnum = "Processing"
	OptionStateEnumActive                 OptionStateEnum = "Active"
	OptionStateEnumFailedToValidate       OptionStateEnum = "FailedToValidate"
)

func (e OptionStateEnum) ToPointer() *OptionStateEnum {
	return &e
}

func (e *OptionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RequiresIndexDocuments":
		fallthrough
	case "Processing":
		fallthrough
	case "Active":
		fallthrough
	case "FailedToValidate":
		*e = OptionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OptionStateEnum: %v", v)
	}
}
