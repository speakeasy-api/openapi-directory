// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type KeysAPIExpiryRequest struct {
	Serial string `pathParam:"style=simple,explode=false,name=serial"`
}

type KeysAPIExpiry200ApplicationJSONType string

const (
	KeysAPIExpiry200ApplicationJSONTypeExpiry KeysAPIExpiry200ApplicationJSONType = "Expiry"
)

type KeysAPIExpiry200ApplicationJSON struct {
	Expiry *shared.Expiry

	Type KeysAPIExpiry200ApplicationJSONType
}

func CreateKeysAPIExpiry200ApplicationJSONExpiry(expiry shared.Expiry) KeysAPIExpiry200ApplicationJSON {
	typ := KeysAPIExpiry200ApplicationJSONTypeExpiry

	return KeysAPIExpiry200ApplicationJSON{
		Expiry: &expiry,
		Type:   typ,
	}
}

func (u *KeysAPIExpiry200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	expiry := new(shared.Expiry)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&expiry); err == nil {
		u.Expiry = expiry
		u.Type = KeysAPIExpiry200ApplicationJSONTypeExpiry
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u KeysAPIExpiry200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Expiry != nil {
		return json.Marshal(u.Expiry)
	}

	return nil, nil
}

type KeysAPIExpiryResponse struct {
	ContentType                          string
	KeysAPIExpiry200ApplicationJSONOneOf *KeysAPIExpiry200ApplicationJSON
	StatusCode                           int
	RawResponse                          *http.Response
}
