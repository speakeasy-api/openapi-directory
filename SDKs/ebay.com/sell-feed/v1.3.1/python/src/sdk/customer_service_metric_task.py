"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomerServiceMetricTask:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_customer_service_metric_task(self, request: operations.CreateCustomerServiceMetricTaskRequest, security: operations.CreateCustomerServiceMetricTaskSecurity) -> operations.CreateCustomerServiceMetricTaskResponse:
        r"""<p>Use this method to create a customer service metrics download task with filter criteria for the customer service metrics report. When using this method, specify the <strong>feedType</strong> and <strong>filterCriteria</strong> including both <strong>evaluationMarketplaceId</strong> and <strong>customerServiceMetricType</strong> for the report. The method returns the location response header containing the call URI to use with <strong>getCustomerServiceMetricTask</strong> to retrieve status and details on the task.</p><p>Only CURRENT Customer Service Metrics reports can be generated with the Sell Feed API. PROJECTED reports are not supported at this time. See the <a href=\\"/api-docs/sell/analytics/resources/customer_service_metric/methods/getCustomerServiceMetric\\">getCustomerServiceMetric</a> method document in the Analytics API for more information about these two types of reports.</p><p><span class=\\"tablenote\\"><strong>Note:</strong> Before calling this API, retrieve the summary of the seller's performance and rating for the customer service metric by calling <strong>getCustomerServiceMetric</strong> (part of the <a href=\\"/api-docs/sell/analytics/resources/methods\\">Analytics API</a>). You can then populate the create task request fields with the values from the response. This technique eliminates failed tasks that request a report for a <strong>customerServiceMetricType</strong> and <strong>evaluationMarketplaceId</strong> that are without evaluation.</span></p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customer_service_metric_task'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_service_metrics_task_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomerServiceMetricTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_customer_service_metric_task(self, request: operations.GetCustomerServiceMetricTaskRequest, security: operations.GetCustomerServiceMetricTaskSecurity) -> operations.GetCustomerServiceMetricTaskResponse:
        r"""<p>Use this method to retrieve customer service metric task details for the specified task. The input is <strong>task_id</strong>.</p>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomerServiceMetricTaskRequest, base_url, '/customer_service_metric_task/{task_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomerServiceMetricTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceMetricsTask])
                res.service_metrics_task = out
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def get_customer_service_metric_tasks(self, request: operations.GetCustomerServiceMetricTasksRequest, security: operations.GetCustomerServiceMetricTasksSecurity) -> operations.GetCustomerServiceMetricTasksResponse:
        r"""Use this method to return an array of customer service metric tasks. You can limit the tasks returned by specifying a date range. </p> <p> <span class=\\"tablenote\\"><strong>Note:</strong> You can pass in either the <code>look_back_days </code>or<code> date_range</code>, but not both.</span></p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customer_service_metric_task'
        
        query_params = utils.get_query_params(operations.GetCustomerServiceMetricTasksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomerServiceMetricTasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerServiceMetricTaskCollection])
                res.customer_service_metric_task_collection = out
        elif http_res.status_code in [400, 403, 500]:
            pass

        return res

    