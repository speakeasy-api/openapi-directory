<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Roles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a role by name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameResponse
     */
	public function deleteRealmClientsIdRolesRoleName(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Remove roles from the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameCompositesResponse
     */
	public function deleteRealmClientsIdRolesRoleNameComposites(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/composites', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRolesRoleNameCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete a role by name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameResponse
     */
	public function deleteRealmRolesRoleName(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Remove roles from the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameCompositesResponse
     */
	public function deleteRealmRolesRoleNameComposites(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/composites', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesRoleNameCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get all roles for the realm or client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesResponse
     */
	public function getRealmClientsIdRoles(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a role by name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameResponse
     */
	public function getRealmClientsIdRolesRoleName(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoleRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get composites of the role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesResponse
     */
	public function getRealmClientsIdRolesRoleNameComposites(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/composites', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * An app-level roles for the specified app for the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse
     */
	public function getRealmClientsIdRolesRoleNameCompositesClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/composites/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles of the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRealmResponse
     */
	public function getRealmClientsIdRolesRoleNameCompositesRealm(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/composites/realm', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameCompositesRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return List of Groups that have the specified role name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameGroupsResponse
     */
	public function getRealmClientsIdRolesRoleNameGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/groups', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GroupRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameManagementPermissionsResponse
     */
	public function getRealmClientsIdRolesRoleNameManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return List of Users that have the specified role name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameUsersResponse
     */
	public function getRealmClientsIdRolesRoleNameUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/users', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRolesRoleNameUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all roles for the realm or client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesResponse
     */
	public function getRealmRoles(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a role by name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameResponse
     */
	public function getRealmRolesRoleName(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoleRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get composites of the role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesResponse
     */
	public function getRealmRolesRoleNameComposites(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/composites', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * An app-level roles for the specified app for the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesClientsClientResponse
     */
	public function getRealmRolesRoleNameCompositesClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/composites/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles of the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRealmResponse
     */
	public function getRealmRolesRoleNameCompositesRealm(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/composites/realm', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameCompositesRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return List of Groups that have the specified role name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameGroupsResponse
     */
	public function getRealmRolesRoleNameGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/groups', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GroupRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameManagementPermissionsResponse
     */
	public function getRealmRolesRoleNameManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return List of Users that have the specified role name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameUsersResponse
     */
	public function getRealmRolesRoleNameUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/users', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesRoleNameUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new role for the realm or client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesResponse
     */
	public function postRealmClientsIdRoles(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "roleRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add a composite to the role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRoleNameCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRoleNameCompositesResponse
     */
	public function postRealmClientsIdRolesRoleNameComposites(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRoleNameCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRoleNameCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/composites', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRoleNameCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRolesRoleNameCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Create a new role for the realm or client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesResponse
     */
	public function postRealmRoles(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles', \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "roleRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add a composite to the role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRoleNameCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRoleNameCompositesResponse
     */
	public function postRealmRolesRoleNameComposites(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRoleNameCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRoleNameCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/composites', \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRoleNameCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesRoleNameCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update a role by name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameResponse
     */
	public function putRealmClientsIdRolesRoleName(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}', \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "roleRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameManagementPermissionsResponse
     */
	public function putRealmClientsIdRolesRoleNameManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/roles/{role-name}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managementPermissionReference", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRolesRoleNameManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a role by name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameResponse
     */
	public function putRealmRolesRoleName(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}', \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "roleRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameManagementPermissionsResponse
     */
	public function putRealmRolesRoleNameManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles/{role-name}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managementPermissionReference", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesRoleNameManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
}