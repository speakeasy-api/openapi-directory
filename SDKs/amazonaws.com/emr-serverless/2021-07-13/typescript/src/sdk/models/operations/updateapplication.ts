/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The CPU architecture of an application.
 */
export enum UpdateApplicationRequestBodyArchitectureEnum {
  Arm64 = "ARM64",
  X8664 = "X86_64",
}

/**
 * The configuration for an application to automatically start on job submission.
 */
export class UpdateApplicationRequestBodyAutoStartConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * The configuration for an application to automatically stop after a certain amount of time being idle.
 */
export class UpdateApplicationRequestBodyAutoStopConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "idleTimeoutMinutes" })
  idleTimeoutMinutes?: number;
}

/**
 * The image configuration.
 */
export class UpdateApplicationRequestBodyImageConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "imageUri" })
  imageUri?: string;
}

/**
 * The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.
 */
export class UpdateApplicationRequestBodyMaximumCapacity extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cpu" })
  cpu?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "disk" })
  disk?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "memory" })
  memory?: string;
}

/**
 * The network configuration for customer VPC connectivity.
 */
export class UpdateApplicationRequestBodyNetworkConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "securityGroupIds" })
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "subnetIds" })
  subnetIds?: string[];
}

export class UpdateApplicationRequestBody extends SpeakeasyBase {
  /**
   * The CPU architecture of an application.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "architecture" })
  architecture?: UpdateApplicationRequestBodyArchitectureEnum;

  /**
   * The configuration for an application to automatically start on job submission.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoStartConfiguration" })
  @Type(() => UpdateApplicationRequestBodyAutoStartConfiguration)
  autoStartConfiguration?: UpdateApplicationRequestBodyAutoStartConfiguration;

  /**
   * The configuration for an application to automatically stop after a certain amount of time being idle.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoStopConfiguration" })
  @Type(() => UpdateApplicationRequestBodyAutoStopConfiguration)
  autoStopConfiguration?: UpdateApplicationRequestBodyAutoStopConfiguration;

  /**
   * The client idempotency token of the application to update. Its value must be unique for each request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * The image configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "imageConfiguration" })
  @Type(() => UpdateApplicationRequestBodyImageConfiguration)
  imageConfiguration?: UpdateApplicationRequestBodyImageConfiguration;

  /**
   * The capacity to initialize when the application is updated.
   */
  @SpeakeasyMetadata({ elemType: shared.InitialCapacityConfig })
  @Expose({ name: "initialCapacity" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.InitialCapacityConfig> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.InitialCapacityConfig);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  initialCapacity?: Record<string, shared.InitialCapacityConfig>;

  /**
   * The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumCapacity" })
  @Type(() => UpdateApplicationRequestBodyMaximumCapacity)
  maximumCapacity?: UpdateApplicationRequestBodyMaximumCapacity;

  /**
   * The network configuration for customer VPC connectivity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkConfiguration" })
  @Type(() => UpdateApplicationRequestBodyNetworkConfiguration)
  networkConfiguration?: UpdateApplicationRequestBodyNetworkConfiguration;

  /**
   * The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.
   */
  @SpeakeasyMetadata({ elemType: shared.WorkerTypeSpecificationInput })
  @Expose({ name: "workerTypeSpecifications" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.WorkerTypeSpecificationInput> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.WorkerTypeSpecificationInput
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  workerTypeSpecifications?: Record<
    string,
    shared.WorkerTypeSpecificationInput
  >;
}

export class UpdateApplicationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateApplicationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the application to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=applicationId",
  })
  applicationId: string;
}

export class UpdateApplicationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateApplicationResponse?: shared.UpdateApplicationResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
