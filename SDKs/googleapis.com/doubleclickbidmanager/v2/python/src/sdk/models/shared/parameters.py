"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filterpair as shared_filterpair
from ..shared import options as shared_options
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ParametersTypeEnum(str, Enum):
    r"""The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used."""
    REPORT_TYPE_UNSPECIFIED = 'REPORT_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    INVENTORY_AVAILABILITY = 'INVENTORY_AVAILABILITY'
    AUDIENCE_COMPOSITION = 'AUDIENCE_COMPOSITION'
    FLOODLIGHT = 'FLOODLIGHT'
    YOUTUBE = 'YOUTUBE'
    GRP = 'GRP'
    YOUTUBE_PROGRAMMATIC_GUARANTEED = 'YOUTUBE_PROGRAMMATIC_GUARANTEED'
    REACH = 'REACH'
    UNIQUE_REACH_AUDIENCE = 'UNIQUE_REACH_AUDIENCE'
    FULL_PATH = 'FULL_PATH'
    PATH_ATTRIBUTION = 'PATH_ATTRIBUTION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Parameters:
    r"""Parameters of a query or report."""
    
    filters: Optional[list[shared_filterpair.FilterPair]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""Filters used to match traffic data in your report."""  
    group_bys: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupBys'), 'exclude': lambda f: f is None }})
    r"""Data is grouped by the filters listed in this field."""  
    metrics: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is None }})
    r"""Metrics to include as columns in your report."""  
    options: Optional[shared_options.Options] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Additional query options."""  
    type: Optional[ParametersTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used."""  
    