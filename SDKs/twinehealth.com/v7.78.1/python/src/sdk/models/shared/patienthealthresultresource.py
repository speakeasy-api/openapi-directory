"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceAttributesAnnotations:
    
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceAttributesData:
    
    value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number"""  
    
class PatientHealthResultResourceAttributesMetricTypeEnum(str, Enum):
    BLOOD_PRESSURE_SYSTOLIC = 'blood_pressure_systolic'
    BLOOD_PRESSURE_DIASTOLIC = 'blood_pressure_diastolic'
    HEMOGLOBIN_A1C = 'hemoglobin_a1c'
    HDL_CHOLESTEROL = 'hdl_cholesterol'
    LDL_CHOLESTEROL = 'ldl_cholesterol'
    TOTAL_CHOLESTEROL = 'total_cholesterol'
    TRIGLYCERIDES = 'triglycerides'
    BLOOD_UREA_NITROGEN = 'blood_urea_nitrogen'
    CREATININE = 'creatinine'
    HEMOGLOBIN = 'hemoglobin'
    HEMATOCRIT = 'hematocrit'
    TOTAL_SERUM_IRON = 'total_serum_iron'
    THYROID_STIMULATING_HORMONE = 'thyroid_stimulating_hormone'
    FREE_THYROXINE = 'free_thyroxine'
    FREE_TRIIODOTHYRONINE = 'free_triiodothyronine'
    TOTAL_TRIIODOTHYRONINE = 'total_triiodothyronine'
    CD4_CELL_COUNT = 'cd4_cell_count'
    HIV_VIRAL_LOAD = 'hiv_viral_load'
    INR = 'inr'
    FREE_TESTOSTERONE = 'free_testosterone'
    TOTAL_TESTOSTERONE = 'total_testosterone'
    C_REACTIVE_PROTEIN = 'c_reactive_protein'
    PROSTATE_SPECIFIC_ANTIGEN = 'prostate_specific_antigen'
    COTININE = 'cotinine'
    C_PEPTIDE = 'c_peptide'
    BLOOD_PRESSURE = 'blood_pressure'
    BLOOD_GLUCOSE = 'blood_glucose'
    WEIGHT = 'weight'
    HEART_RATE = 'heart_rate'
    BODY_FAT_PERCENTAGE = 'body_fat_percentage'
    BODY_MASS_INDEX = 'body_mass_index'
    BODY_TEMPERATURE = 'body_temperature'
    FORCED_EXPIRATORY_VOLUME1 = 'forced_expiratory_volume1'
    FORCED_VITAL_CAPACITY = 'forced_vital_capacity'
    LEAN_BODY_MASS = 'lean_body_mass'
    NAUSEA_LEVEL = 'nausea_level'
    OXYGEN_SATURATION = 'oxygen_saturation'
    PAIN_LEVEL = 'pain_level'
    PEAK_EXPIRATORY_FLOW_RATE = 'peak_expiratory_flow_rate'
    PERIPHERAL_PERFUSION_INDEX = 'peripheral_perfusion_index'
    RESPIRATORY_RATE = 'respiratory_rate'
    INHALER_USAGE = 'inhaler_usage'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceAttributesSource:
    
    metadata: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Can be any value"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    source_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_id'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceAttributes:
    
    thread: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_thread'), 'exclude': lambda f: f is None }})
    r"""Links together results. This should be the same as the thread of _action, if it is defined"""  
    aggregation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregation'), 'exclude': lambda f: f is None }})  
    annotations: Optional[list[PatientHealthResultResourceAttributesAnnotations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotations'), 'exclude': lambda f: f is None }})  
    channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})  
    data: Optional[PatientHealthResultResourceAttributesData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_id'), 'exclude': lambda f: f is None }})  
    metric_type: Optional[PatientHealthResultResourceAttributesMetricTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric_type'), 'exclude': lambda f: f is None }})  
    occurred_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occurred_at'), 'exclude': lambda f: f is None }})  
    occurred_at_time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occurred_at_time_zone'), 'exclude': lambda f: f is None }})  
    skipped: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipped'), 'exclude': lambda f: f is None }})  
    source: Optional[PatientHealthResultResourceAttributesSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of result. Usually the same as metric_type except for lifestyle actions"""  
    window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('window'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsActionData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsAction:
    
    data: Optional[PatientHealthResultResourceRelationshipsActionData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsMetricData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsMetric:
    
    data: Optional[PatientHealthResultResourceRelationshipsMetricData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsPatientDataMetaQueryIdentifier:
    
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsPatientDataMetaQuery:
    r"""The query must return one and only one patient."""
    
    identifier: PatientHealthResultResourceRelationshipsPatientDataMetaQueryIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})  
    groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})  
    organization: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsPatientDataMeta:
    r"""Allows the specification of a query for a patient rather than providing a patient id directly"""
    
    query: PatientHealthResultResourceRelationshipsPatientDataMetaQuery = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})
    r"""The query must return one and only one patient."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsPatientData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required if the `meta.query` is not defined."""  
    meta: Optional[PatientHealthResultResourceRelationshipsPatientDataMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""Allows the specification of a query for a patient rather than providing a patient id directly"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationshipsPatient:
    
    data: Optional[PatientHealthResultResourceRelationshipsPatientData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResourceRelationships:
    
    action: Optional[PatientHealthResultResourceRelationshipsAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    metric: Optional[PatientHealthResultResourceRelationshipsMetric] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric'), 'exclude': lambda f: f is None }})  
    patient: Optional[PatientHealthResultResourceRelationshipsPatient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthResultResource:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[PatientHealthResultResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    relationships: Optional[PatientHealthResultResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    