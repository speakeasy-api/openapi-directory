// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutConfigurationRecorderXAmzTargetEnum
type PutConfigurationRecorderXAmzTargetEnum string

const (
	PutConfigurationRecorderXAmzTargetEnumStarlingDoveServicePutConfigurationRecorder PutConfigurationRecorderXAmzTargetEnum = "StarlingDoveService.PutConfigurationRecorder"
)

func (e PutConfigurationRecorderXAmzTargetEnum) ToPointer() *PutConfigurationRecorderXAmzTargetEnum {
	return &e
}

func (e *PutConfigurationRecorderXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "StarlingDoveService.PutConfigurationRecorder":
		*e = PutConfigurationRecorderXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutConfigurationRecorderXAmzTargetEnum: %v", v)
	}
}

type PutConfigurationRecorderRequest struct {
	PutConfigurationRecorderRequest shared.PutConfigurationRecorderRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                   *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256               *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                  *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                        *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken               *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                   *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders               *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                      PutConfigurationRecorderXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutConfigurationRecorderResponse struct {
	ContentType string
	// InvalidConfigurationRecorderNameException
	InvalidConfigurationRecorderNameException interface{}
	// InvalidRecordingGroupException
	InvalidRecordingGroupException interface{}
	// InvalidRoleException
	InvalidRoleException interface{}
	// MaxNumberOfConfigurationRecordersExceededException
	MaxNumberOfConfigurationRecordersExceededException interface{}
	StatusCode                                         int
	RawResponse                                        *http.Response
}
