"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import classstate_enum as shared_classstate_enum
from ..shared import groupdetails as shared_groupdetails
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsCanvas:
    r"""Meta information provided by Canvs LMS"""
    
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""Canvas instance domain (e.g. \\"canvas.instructure.com\\")"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the course on Canvas"""  
    
class ClassDetailsCleverSubjectEnum(str, Enum):
    r"""Normalized subject of the course"""
    ENGLISH_LANGUAGE_ARTS = 'english/language arts'
    MATH = 'math'
    SCIENCE = 'science'
    SOCIAL_STUDIES = 'social studies'
    LANGUAGE = 'language'
    HOMEROOM_ADVISORY = 'homeroom/advisory'
    INTERVENTIONS_ONLINE_LEARNING = 'interventions/online learning'
    TECHNOLOGY_AND_ENGINEERING = 'technology and engineering'
    PE_AND_HEALTH = 'PE and health'
    ARTS_AND_MUSIC = 'arts and music'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsClever:
    r"""Clever.com section-related information"""
    
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The creation date of the section on clever"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Clever section unique identifier"""  
    modification_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modificationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last modification date of the section on clever"""  
    subject: Optional[ClassDetailsCleverSubjectEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject'), 'exclude': lambda f: f is None }})
    r"""Normalized subject of the course"""  
    term_end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termEndDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of the term"""  
    term_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termName'), 'exclude': lambda f: f is None }})
    r"""Name of the term when this course happens"""  
    term_start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termStartDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Beginning date of the term"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsGoogleClassroom:
    r"""Google Classroom course-related information"""
    
    alternate_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateLink'), 'exclude': lambda f: f is None }})
    r"""Absolute link to this course in the Classroom web UI"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The course identifier on Google Classroom"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsGoogleDrive:
    r"""Google Drive course-related information provided by Google Classroom"""
    
    teacher_folder_alternate_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teacherFolderAlternateLink'), 'exclude': lambda f: f is None }})
    r"""[Teachers only] The Drive URL of the teachers' folder"""  
    teacher_folder_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teacherFolderId'), 'exclude': lambda f: f is None }})
    r"""[Teachers only] The Drive directory identifier of the teachers' folder"""  
    
class ClassDetailsIssuesSyncReasonEnum(str, Enum):
    r"""The reason why the account cannot be synced"""
    OTHER_ORGNANIZATION = 'otherOrgnanization'
    PERSONAL_SUBSCRIPTION = 'personalSubscription'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsIssuesSync:
    r"""A sync issue"""
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The email address of the user concerned by this sync issue"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The account user identifier"""  
    reason: Optional[ClassDetailsIssuesSyncReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The reason why the account cannot be synced"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsIssues:
    r"""Detected issues for this class"""
    
    sync: Optional[list[ClassDetailsIssuesSync]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sync'), 'exclude': lambda f: f is None }})
    r"""Synchronization issues for the class"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsLti:
    r"""Meta information provided by the LTI consumer"""
    
    context_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contextId'), 'exclude': lambda f: f is None }})
    r"""Unique context identifier provided"""  
    context_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contextLabel'), 'exclude': lambda f: f is None }})
    r"""Context label"""  
    context_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contextTitle'), 'exclude': lambda f: f is None }})
    r"""Context title"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsMfc:
    r"""Meta information provided by Canvs LMS"""
    
    alternate_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateLink'), 'exclude': lambda f: f is None }})
    r"""Link to MusicFirst Classroom class"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the course on MusicFirst Classroom"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetailsMicrosoftGraph:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The course identifier on Microsoft Graph"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassDetails:
    r"""A classroom"""
    
    assignments_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentsCount'), 'exclude': lambda f: f is None }})
    r"""The number of assignments created in the class"""  
    canvas: Optional[ClassDetailsCanvas] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canvas'), 'exclude': lambda f: f is None }})
    r"""Meta information provided by Canvs LMS"""  
    clever: Optional[ClassDetailsClever] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clever'), 'exclude': lambda f: f is None }})
    r"""Clever.com section-related information"""  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the class was create"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""An optionnal description for this class"""  
    enrollment_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enrollmentCode'), 'exclude': lambda f: f is None }})
    r"""[Teachers only] The enrollment code that can be used by the students to join the class"""  
    google_classroom: Optional[ClassDetailsGoogleClassroom] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleClassroom'), 'exclude': lambda f: f is None }})
    r"""Google Classroom course-related information"""  
    google_drive: Optional[ClassDetailsGoogleDrive] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleDrive'), 'exclude': lambda f: f is None }})
    r"""Google Drive course-related information provided by Google Classroom"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the class"""  
    issues: Optional[ClassDetailsIssues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues'), 'exclude': lambda f: f is None }})
    r"""Detected issues for this class"""  
    lti: Optional[ClassDetailsLti] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lti'), 'exclude': lambda f: f is None }})
    r"""Meta information provided by the LTI consumer"""  
    mfc: Optional[ClassDetailsMfc] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfc'), 'exclude': lambda f: f is None }})
    r"""Meta information provided by Canvs LMS"""  
    microsoft_graph: Optional[ClassDetailsMicrosoftGraph] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('microsoftGraph'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the class"""  
    organization: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the Organization owning this class"""  
    owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the User owning this class"""  
    section: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('section'), 'exclude': lambda f: f is None }})
    r"""The section of the class"""  
    state: Optional[shared_classstate_enum.ClassStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of a classroom"""  
    students_group: Optional[shared_groupdetails.GroupDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('studentsGroup'), 'exclude': lambda f: f is None }})
    r"""The details of a group"""  
    teachers_group: Optional[shared_groupdetails.GroupDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teachersGroup'), 'exclude': lambda f: f is None }})
    r"""The details of a group"""  
    theme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('theme'), 'exclude': lambda f: f is None }})
    r"""The theme identifier using in Flat User Interface"""  
    