/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Configuration for type label_selector, required if type is `label_selector`
 */
export class PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesLabelSelector extends SpeakeasyBase {
  /**
   * Label selector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selector" })
  selector: string;
}

/**
 * Configuration for type server, required if type is `server`
 */
export class PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesServer extends SpeakeasyBase {
  /**
   * ID of the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;
}

/**
 * Type of the resource
 */
export enum PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum {
  Server = "server",
  LabelSelector = "label_selector",
}

export class PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResources extends SpeakeasyBase {
  /**
   * Configuration for type label_selector, required if type is `label_selector`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_selector" })
  @Type(
    () =>
      PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesLabelSelector
  )
  labelSelector?: PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesLabelSelector;

  /**
   * Configuration for type server, required if type is `server`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  @Type(
    () =>
      PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesServer
  )
  server?: PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesServer;

  /**
   * Type of the resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum;
}

export class PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequest extends SpeakeasyBase {
  /**
   * Resources the Firewall should be applied to
   */
  @SpeakeasyMetadata({
    elemType:
      PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResources,
  })
  @Expose({ name: "apply_to" })
  @Type(
    () =>
      PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResources
  )
  applyTo: PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResources[];
}

export class PostFirewallsIdActionsApplyToResourcesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PostFirewallsIdActionsApplyToResourcesApplyToResourcesRequest;

  /**
   * ID of the Firewall
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostFirewallsIdActionsApplyToResourcesActionsResponseActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostFirewallsIdActionsApplyToResourcesActionsResponseActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostFirewallsIdActionsApplyToResourcesActionsResponseActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostFirewallsIdActionsApplyToResourcesActionsResponseAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostFirewallsIdActionsApplyToResourcesActionsResponseActionError)
  error: PostFirewallsIdActionsApplyToResourcesActionsResponseActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType:
      PostFirewallsIdActionsApplyToResourcesActionsResponseActionResources,
  })
  @Expose({ name: "resources" })
  @Type(
    () => PostFirewallsIdActionsApplyToResourcesActionsResponseActionResources
  )
  resources: PostFirewallsIdActionsApplyToResourcesActionsResponseActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostFirewallsIdActionsApplyToResourcesActionsResponseActionStatusEnum;
}

export class PostFirewallsIdActionsApplyToResourcesActionsResponseMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class PostFirewallsIdActionsApplyToResourcesActionsResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(
    () => PostFirewallsIdActionsApplyToResourcesActionsResponseMetaPagination
  )
  pagination: PostFirewallsIdActionsApplyToResourcesActionsResponseMetaPagination;
}

/**
 * The `actions` key contains multiple `apply_firewall` Actions
 */
export class PostFirewallsIdActionsApplyToResourcesActionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PostFirewallsIdActionsApplyToResourcesActionsResponseAction,
  })
  @Expose({ name: "actions" })
  @Type(() => PostFirewallsIdActionsApplyToResourcesActionsResponseAction)
  actions: PostFirewallsIdActionsApplyToResourcesActionsResponseAction[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => PostFirewallsIdActionsApplyToResourcesActionsResponseMeta)
  meta?: PostFirewallsIdActionsApplyToResourcesActionsResponseMeta;
}

export class PostFirewallsIdActionsApplyToResourcesResponse extends SpeakeasyBase {
  /**
   * The `actions` key contains multiple `apply_firewall` Actions
   */
  @SpeakeasyMetadata()
  actionsResponse?: PostFirewallsIdActionsApplyToResourcesActionsResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
