/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Licensee } from "./licensee";
import { Expose, Type } from "class-transformer";

export enum LicenseesResponseCodeEnum {
  TwoThousand = "2000",
}

export enum LicenseesResponseMessageEnum {
  Success = "Success",
}

/**
 * List of licensees
 */
export class LicenseesResponseResult extends SpeakeasyBase {
  /**
   * Returns true if there are more licensees listed after the maximum number of results as implied by `limit`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasMore" })
  hasMore?: boolean;

  @SpeakeasyMetadata({ elemType: Licensee })
  @Expose({ name: "licensees" })
  @Type(() => Licensee)
  licensees?: Licensee[];
}

/**
 * Success
 */
export class LicenseesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: LicenseesResponseCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: LicenseesResponseMessageEnum;

  /**
   * List of licensees
   */
  @SpeakeasyMetadata()
  @Expose({ name: "result" })
  @Type(() => LicenseesResponseResult)
  result: LicenseesResponseResult;
}
