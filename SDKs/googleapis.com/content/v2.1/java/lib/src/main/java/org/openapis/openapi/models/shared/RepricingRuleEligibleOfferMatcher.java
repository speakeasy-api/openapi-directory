/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RepricingRuleEligibleOfferMatcher - Matcher that specifies eligible offers. When the USE_FEED_ATTRIBUTE option is selected, only the repricing_rule_id attribute on the product feed is used to specify offer-rule mapping. When the CUSTOM_FILTER option is selected, only the *_matcher fields are used to filter the offers for offer-rule mapping. If the CUSTOM_FILTER option is selected, an offer needs to satisfy each custom filter matcher to be eligible for a rule. Size limit: the sum of the number of entries in all the matchers should not exceed 20. For example, there can be 15 product ids and 5 brands, but not 10 product ids and 11 brands.
 */
public class RepricingRuleEligibleOfferMatcher {
    /**
     * Matcher by string attributes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brandMatcher")
    public RepricingRuleEligibleOfferMatcherStringMatcher brandMatcher;

    public RepricingRuleEligibleOfferMatcher withBrandMatcher(RepricingRuleEligibleOfferMatcherStringMatcher brandMatcher) {
        this.brandMatcher = brandMatcher;
        return this;
    }
    
    /**
     * Matcher by string attributes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemGroupIdMatcher")
    public RepricingRuleEligibleOfferMatcherStringMatcher itemGroupIdMatcher;

    public RepricingRuleEligibleOfferMatcher withItemGroupIdMatcher(RepricingRuleEligibleOfferMatcherStringMatcher itemGroupIdMatcher) {
        this.itemGroupIdMatcher = itemGroupIdMatcher;
        return this;
    }
    
    /**
     * Determines whether to use the custom matchers or the product feed attribute "repricing_rule_id" to specify offer-rule mapping.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matcherOption")
    public RepricingRuleEligibleOfferMatcherMatcherOptionEnum matcherOption;

    public RepricingRuleEligibleOfferMatcher withMatcherOption(RepricingRuleEligibleOfferMatcherMatcherOptionEnum matcherOption) {
        this.matcherOption = matcherOption;
        return this;
    }
    
    /**
     * Matcher by string attributes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offerIdMatcher")
    public RepricingRuleEligibleOfferMatcherStringMatcher offerIdMatcher;

    public RepricingRuleEligibleOfferMatcher withOfferIdMatcher(RepricingRuleEligibleOfferMatcherStringMatcher offerIdMatcher) {
        this.offerIdMatcher = offerIdMatcher;
        return this;
    }
    
    /**
     * When true, the rule won't be applied to offers with active promotions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipWhenOnPromotion")
    public Boolean skipWhenOnPromotion;

    public RepricingRuleEligibleOfferMatcher withSkipWhenOnPromotion(Boolean skipWhenOnPromotion) {
        this.skipWhenOnPromotion = skipWhenOnPromotion;
        return this;
    }
    
    public RepricingRuleEligibleOfferMatcher(){}
}
