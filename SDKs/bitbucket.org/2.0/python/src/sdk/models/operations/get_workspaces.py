"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import paginated_workspaces as shared_paginated_workspaces
from ..shared import security as shared_security
from enum import Enum
from typing import Any, Optional


@dataclasses.dataclass
class GetWorkspacesSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetWorkspacesRoleEnum(str, Enum):
    r"""Filters the workspaces based on the authenticated user's role on each workspace.
    
                * **member**: returns a list of all the workspaces which the caller is a member of
                    at least one workspace group or repository
                * **collaborator**: returns a list of workspaces which the caller has write access
                    to at least one repository in the workspace
                * **owner**: returns a list of workspaces which the caller has administrator access
    """
    OWNER = 'owner'
    COLLABORATOR = 'collaborator'
    MEMBER = 'member'


@dataclasses.dataclass
class GetWorkspacesRequest:
    
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Query string to narrow down the response. See
    [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
    """  
    role: Optional[GetWorkspacesRoleEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role', 'style': 'form', 'explode': True }})
    r"""Filters the workspaces based on the authenticated user's role on each workspace.
    
                * **member**: returns a list of all the workspaces which the caller is a member of
                    at least one workspace group or repository
                * **collaborator**: returns a list of workspaces which the caller has write access
                    to at least one repository in the workspace
                * **owner**: returns a list of workspaces which the caller has administrator access
    """  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Name of a response property to sort results. See
    [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results)
    for details.
    """  
    

@dataclasses.dataclass
class GetWorkspacesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""The request wasn't authenticated."""  
    paginated_workspaces: Optional[shared_paginated_workspaces.PaginatedWorkspaces] = dataclasses.field(default=None)
    r"""The list of workspaces accessible by the authenticated user."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    