/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The criteria that determine when and how a job abort takes place.
 */
export class UpdateJobRequestBodyAbortConfig extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.AbortCriteria })
  @Expose({ name: "criteriaList" })
  @Type(() => shared.AbortCriteria)
  criteriaList?: shared.AbortCriteria[];
}

/**
 * The configuration that determines how many retries are allowed for each failure type for a job.
 */
export class UpdateJobRequestBodyJobExecutionsRetryConfig extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.RetryCriteria })
  @Expose({ name: "criteriaList" })
  @Type(() => shared.RetryCriteria)
  criteriaList?: shared.RetryCriteria[];
}

/**
 * Allows you to create a staged rollout of a job.
 */
export class UpdateJobRequestBodyJobExecutionsRolloutConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "exponentialRate" })
  @Type(() => shared.ExponentialRolloutRate)
  exponentialRate?: shared.ExponentialRolloutRate;

  @SpeakeasyMetadata()
  @Expose({ name: "maximumPerMinute" })
  maximumPerMinute?: number;
}

/**
 * Configuration for pre-signed S3 URLs.
 */
export class UpdateJobRequestBodyPresignedUrlConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "expiresInSec" })
  expiresInSec?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;
}

/**
 * Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
 */
export class UpdateJobRequestBodyTimeoutConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "inProgressTimeoutInMinutes" })
  inProgressTimeoutInMinutes?: number;
}

export class UpdateJobRequestBody extends SpeakeasyBase {
  /**
   * The criteria that determine when and how a job abort takes place.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "abortConfig" })
  @Type(() => UpdateJobRequestBodyAbortConfig)
  abortConfig?: UpdateJobRequestBodyAbortConfig;

  /**
   * A short text description of the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The configuration that determines how many retries are allowed for each failure type for a job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobExecutionsRetryConfig" })
  @Type(() => UpdateJobRequestBodyJobExecutionsRetryConfig)
  jobExecutionsRetryConfig?: UpdateJobRequestBodyJobExecutionsRetryConfig;

  /**
   * Allows you to create a staged rollout of a job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobExecutionsRolloutConfig" })
  @Type(() => UpdateJobRequestBodyJobExecutionsRolloutConfig)
  jobExecutionsRolloutConfig?: UpdateJobRequestBodyJobExecutionsRolloutConfig;

  /**
   * Configuration for pre-signed S3 URLs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "presignedUrlConfig" })
  @Type(() => UpdateJobRequestBodyPresignedUrlConfig)
  presignedUrlConfig?: UpdateJobRequestBodyPresignedUrlConfig;

  /**
   * Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeoutConfig" })
  @Type(() => UpdateJobRequestBodyTimeoutConfig)
  timeoutConfig?: UpdateJobRequestBodyTimeoutConfig;
}

export class UpdateJobRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateJobRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the job to be updated.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=jobId",
  })
  jobId: string;

  /**
   * <p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=namespaceId",
  })
  namespaceId?: string;
}

export class UpdateJobResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
