/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Event - A Probely event
 */
public class Event {
    /**
     * Event object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public Object content;
    public Event withContent(Object content) {
        this.content = content;
        return this;
    }
    
    /**
     * Event type:
     * - `user_created` new user added to account
     * - `user_deleted` user deleted from account
     * - `target_created` new target added to account
     * - `target_deleted` target deleted from account
     * - `target_verified` target ownership verified
     * - `target_verification_failed` target ownership verification failed
     * - `scan_started` scan started on target
     * - `scan_canceled` scan on target canceled
     * - `scan_completed` scan finished with successfuly
     * - `scan_failed` scan finished unsuccessfuly
     * - `finding_detected` new finding detected (not found before)
     * - `finding_fixed` finding was fixed
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_type")
    public EventTypeEnum eventType;
    public Event withEventType(EventTypeEnum eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * Object id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Event withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Type of object in the event content.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_type")
    public EventObjectTypeEnum objectType;
    public Event withObjectType(EventObjectTypeEnum objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * Date time of when the event occurred
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ocurred_at")
    public OffsetDateTime ocurredAt;
    public Event withOcurredAt(OffsetDateTime ocurredAt) {
        this.ocurredAt = ocurredAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhooks")
    public Webhook[] webhooks;
    public Event withWebhooks(Webhook[] webhooks) {
        this.webhooks = webhooks;
        return this;
    }
    
}
