/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EnvironmentVariable } from "./environmentvariable";
import { File } from "./file";
import { Expose, Type } from "class-transformer";

/**
 * Represents an operating system process.
 */
export class Process extends SpeakeasyBase {
  /**
   * Process arguments as JSON encoded strings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "args" })
  args?: string[];

  /**
   * True if `args` is incomplete.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "argumentsTruncated" })
  argumentsTruncated?: boolean;

  /**
   * File information about the related binary/library used by an executable, or the script used by a script interpreter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "binary" })
  @Type(() => File)
  binary?: File;

  /**
   * Process environment variables.
   */
  @SpeakeasyMetadata({ elemType: EnvironmentVariable })
  @Expose({ name: "envVariables" })
  @Type(() => EnvironmentVariable)
  envVariables?: EnvironmentVariable[];

  /**
   * True if `env_variables` is incomplete.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "envVariablesTruncated" })
  envVariablesTruncated?: boolean;

  /**
   * File information for libraries loaded by the process.
   */
  @SpeakeasyMetadata({ elemType: File })
  @Expose({ name: "libraries" })
  @Type(() => File)
  libraries?: File[];

  /**
   * The process name visible in utilities like `top` and `ps`; it can be accessed via `/proc/[pid]/comm` and changed with `prctl(PR_SET_NAME)`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The parent process id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentPid" })
  parentPid?: string;

  /**
   * The process id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pid" })
  pid?: string;

  /**
   * File information about the related binary/library used by an executable, or the script used by a script interpreter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "script" })
  @Type(() => File)
  script?: File;
}
