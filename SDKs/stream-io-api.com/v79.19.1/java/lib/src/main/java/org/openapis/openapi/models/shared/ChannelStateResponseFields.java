/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ChannelStateResponseFields {
    /**
     * Represents channel in chat
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    public java.util.Map<String, Object> channel;
    public ChannelStateResponseFields withChannel(java.util.Map<String, Object> channel) {
        this.channel = channel;
        return this;
    }
    
    /**
     * Whether this channel is hidden or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    public Boolean hidden;
    public ChannelStateResponseFields withHidden(Boolean hidden) {
        this.hidden = hidden;
        return this;
    }
    
    /**
     * Messages before this date are hidden from the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("hide_messages_before")
    public OffsetDateTime hideMessagesBefore;
    public ChannelStateResponseFields withHideMessagesBefore(OffsetDateTime hideMessagesBefore) {
        this.hideMessagesBefore = hideMessagesBefore;
        return this;
    }
    
    /**
     * List of channel members
     */
    @JsonProperty("members")
    public ChannelMember[] members;
    public ChannelStateResponseFields withMembers(ChannelMember[] members) {
        this.members = members;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("membership")
    public ChannelMember membership;
    public ChannelStateResponseFields withMembership(ChannelMember membership) {
        this.membership = membership;
        return this;
    }
    
    /**
     * List of channel messages
     */
    @JsonProperty("messages")
    public java.util.Map<String, Object>[] messages;
    public ChannelStateResponseFields withMessages(java.util.Map<String, Object>[] messages) {
        this.messages = messages;
        return this;
    }
    
    /**
     * Pending messages that this user has sent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_messages")
    public PendingMessage[] pendingMessages;
    public ChannelStateResponseFields withPendingMessages(PendingMessage[] pendingMessages) {
        this.pendingMessages = pendingMessages;
        return this;
    }
    
    /**
     * List of pinned messages in the channel
     */
    @JsonProperty("pinned_messages")
    public java.util.Map<String, Object>[] pinnedMessages;
    public ChannelStateResponseFields withPinnedMessages(java.util.Map<String, Object>[] pinnedMessages) {
        this.pinnedMessages = pinnedMessages;
        return this;
    }
    
    /**
     * List of read states
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("read")
    public Read[] read;
    public ChannelStateResponseFields withRead(Read[] read) {
        this.read = read;
        return this;
    }
    
    /**
     * Number of channel watchers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watcher_count")
    public Double watcherCount;
    public ChannelStateResponseFields withWatcherCount(Double watcherCount) {
        this.watcherCount = watcherCount;
        return this;
    }
    
    /**
     * List of user who is watching the channel
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watchers")
    public java.util.Map<String, Object>[] watchers;
    public ChannelStateResponseFields withWatchers(java.util.Map<String, Object>[] watchers) {
        this.watchers = watchers;
        return this;
    }
    
}
