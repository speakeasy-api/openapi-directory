/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CartSimulation200ApplicationJSONPaymentData - Payment data information.
 */
public class CartSimulation200ApplicationJSONPaymentData {
    /**
     * Available accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableAccounts")
    public Object[] availableAccounts;
    public CartSimulation200ApplicationJSONPaymentData withAvailableAccounts(Object[] availableAccounts) {
        this.availableAccounts = availableAccounts;
        return this;
    }
    
    /**
     * Available associations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableAssociations")
    public java.util.Map<String, Object> availableAssociations;
    public CartSimulation200ApplicationJSONPaymentData withAvailableAssociations(java.util.Map<String, Object> availableAssociations) {
        this.availableAssociations = availableAssociations;
        return this;
    }
    
    /**
     * Available tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableTokens")
    public Object[] availableTokens;
    public CartSimulation200ApplicationJSONPaymentData withAvailableTokens(Object[] availableTokens) {
        this.availableTokens = availableTokens;
        return this;
    }
    
    /**
     * Array of gift card messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("giftCardMessages")
    public Object[] giftCardMessages;
    public CartSimulation200ApplicationJSONPaymentData withGiftCardMessages(Object[] giftCardMessages) {
        this.giftCardMessages = giftCardMessages;
        return this;
    }
    
    /**
     * Gift card information, if it applies to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("giftCards")
    public Object[] giftCards;
    public CartSimulation200ApplicationJSONPaymentData withGiftCards(Object[] giftCards) {
        this.giftCards = giftCards;
        return this;
    }
    
    /**
     * Installment options information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installmentOptions")
    public Object[] installmentOptions;
    public CartSimulation200ApplicationJSONPaymentData withInstallmentOptions(Object[] installmentOptions) {
        this.installmentOptions = installmentOptions;
        return this;
    }
    
    /**
     * Information on payment systems.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentSystems")
    public CartSimulation200ApplicationJSONPaymentDataPaymentSystems[] paymentSystems;
    public CartSimulation200ApplicationJSONPaymentData withPaymentSystems(CartSimulation200ApplicationJSONPaymentDataPaymentSystems[] paymentSystems) {
        this.paymentSystems = paymentSystems;
        return this;
    }
    
    /**
     * Information on each payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payments")
    public Object[] payments;
    public CartSimulation200ApplicationJSONPaymentData withPayments(Object[] payments) {
        this.payments = payments;
        return this;
    }
    
}
