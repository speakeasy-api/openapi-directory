/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Authenticate KumpeApps users (required to get apiKey)
 */
export class Authentication {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Compromise app key
   *
   * @remarks
   * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
   */
  appkeyPatch(
    req: operations.AppkeyPatchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppkeyPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppkeyPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/appkey";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppkeyPatchResponse =
        new operations.AppkeyPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse202 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse202
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request app key
   *
   * @remarks
   * Request a new app key by passing username and password for app account
   */
  appkeyPost(
    req: operations.AppkeyPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppkeyPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppkeyPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/appkey";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppkeyPostResponse =
        new operations.AppkeyPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse201 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse201
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deactivate app key
   *
   * @remarks
   * Pass your app key to deactivate the key
   */
  appkeyPut(
    req: operations.AppkeyPutRequest,
    security: operations.AppkeyPutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppkeyPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppkeyPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/appkey";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppkeyPutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppkeyPutResponse =
        new operations.AppkeyPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse202 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse202
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Compromise app key
   *
   * @remarks
   * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
   */
  authAppkeyPatch(
    req: operations.AuthAppkeyPatchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthAppkeyPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthAppkeyPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authentication/appkey";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthAppkeyPatchResponse =
        new operations.AuthAppkeyPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse202 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse202
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request app key
   *
   * @remarks
   * Request a new app key by passing username and password for app account
   */
  authAppkeyPost(
    req: operations.AuthAppkeyPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthAppkeyPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthAppkeyPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authentication/appkey";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthAppkeyPostResponse =
        new operations.AuthAppkeyPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse201 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse201
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deactivate app key
   *
   * @remarks
   * Pass your app key to deactivate the key
   */
  authAppkeyPut(
    req: operations.AuthAppkeyPutRequest,
    security: operations.AuthAppkeyPutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthAppkeyPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthAppkeyPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authentication/appkey";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AuthAppkeyPutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthAppkeyPutResponse =
        new operations.AuthAppkeyPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse202 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse202
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request auth key for user (login user)
   *
   * @remarks
   * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
   */
  authAuthkeyGet(
    req: operations.AuthAuthkeyGetRequest,
    security: operations.AuthAuthkeyGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthAuthkeyGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthAuthkeyGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authentication/authkey";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AuthAuthkeyGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthAuthkeyGetResponse =
        new operations.AuthAuthkeyGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse2011 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse2011
            );
          }
          break;
        case httpRes?.status == 401:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndThree = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndThree
            );
          }
          break;
        case httpRes?.status == 449:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFortyNine = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFortyNine
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Compromise auth key
   *
   * @remarks
   * Mark user auth key as compromised
   */
  authAuthkeyPatch(
    req: operations.AuthAuthkeyPatchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthAuthkeyPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthAuthkeyPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authentication/authkey";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthAuthkeyPatchResponse =
        new operations.AuthAuthkeyPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse202 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse202
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Request auth key for user (login user)
   *
   * @remarks
   * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
   */
  authAuthkeyPost(
    req: operations.AuthAuthkeyPostRequest,
    security: operations.AuthAuthkeyPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthAuthkeyPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthAuthkeyPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authentication/authkey";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AuthAuthkeyPostSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthAuthkeyPostResponse =
        new operations.AuthAuthkeyPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse2011 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse2011
            );
          }
          break;
        case httpRes?.status == 401:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndThree = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndThree
            );
          }
          break;
        case httpRes?.status == 449:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFortyNine = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFortyNine
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deactivate auth key (logout)
   *
   * @remarks
   * Deactivate auth key for user logging them out of your application
   */
  authAuthkeyPut(
    req: operations.AuthAuthkeyPutRequest,
    security: operations.AuthAuthkeyPutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthAuthkeyPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthAuthkeyPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authentication/authkey";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AuthAuthkeyPutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthAuthkeyPutResponse =
        new operations.AuthAuthkeyPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse202 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse202
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Verifies YubiKey OTP for authenticated user
   *
   * @remarks
   * Verifies YubiKey OTP for authenticated user
   */
  authVerifyotpGet(
    req: operations.AuthVerifyotpGetRequest,
    security: operations.AuthVerifyotpGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthVerifyotpGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthVerifyotpGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/authentication/verifyotp";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AuthVerifyotpGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthVerifyotpGetResponse =
        new operations.AuthVerifyotpGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndThree = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndThree
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request auth key for user (login user)
   *
   * @remarks
   * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
   */
  authkeyGet(
    req: operations.AuthkeyGetRequest,
    security: operations.AuthkeyGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthkeyGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthkeyGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authkey";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AuthkeyGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthkeyGetResponse =
        new operations.AuthkeyGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse2011 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse2011
            );
          }
          break;
        case httpRes?.status == 401:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndThree = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndThree
            );
          }
          break;
        case httpRes?.status == 449:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFortyNine = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFortyNine
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Compromise auth key
   *
   * @remarks
   * Mark user auth key as compromised
   */
  authkeyPatch(
    req: operations.AuthkeyPatchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthkeyPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthkeyPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authkey";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthkeyPatchResponse =
        new operations.AuthkeyPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse202 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse202
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Request auth key for user (login user)
   *
   * @remarks
   * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
   */
  authkeyPost(
    req: operations.AuthkeyPostRequest,
    security: operations.AuthkeyPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthkeyPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthkeyPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authkey";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AuthkeyPostSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthkeyPostResponse =
        new operations.AuthkeyPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse2011 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse2011
            );
          }
          break;
        case httpRes?.status == 401:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndThree = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndThree
            );
          }
          break;
        case httpRes?.status == 449:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFortyNine = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFortyNine
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deactivate auth key (logout)
   *
   * @remarks
   * Deactivate auth key for user logging them out of your application
   */
  authkeyPut(
    req: operations.AuthkeyPutRequest,
    security: operations.AuthkeyPutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthkeyPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthkeyPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authkey";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AuthkeyPutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthkeyPutResponse =
        new operations.AuthkeyPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse202 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse202
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }
}
