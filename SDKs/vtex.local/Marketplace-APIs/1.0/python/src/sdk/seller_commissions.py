"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class SellerCommissions:
    r"""Get sellers' data"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bulk_upsert_seller_commissions(self, request: operations.BulkUpsertSellerCommissionsRequest) -> operations.BulkUpsertSellerCommissionsResponse:
        r"""Upsert Seller Commissions in Bulk
        This endpoint is used by marketplace operators to define comissions for multiple categories.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkUpsertSellerCommissionsRequest, base_url, '/seller-register/pvt/sellers/{sellerId}/commissions/categories', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.BulkUpsertSellerCommissionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkUpsertSellerCommissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def list_seller_commissions(self, request: operations.ListSellerCommissionsRequest) -> operations.ListSellerCommissionsResponse:
        r"""List Seller Commissions by seller ID
        This endpoint retrieves all comissions configured for a specific seller.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListSellerCommissionsRequest, base_url, '/seller-register/pvt/sellers/{sellerId}/commissions', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListSellerCommissionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSellerCommissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_seller_commissions(self, request: operations.RemoveSellerCommissionsRequest) -> operations.RemoveSellerCommissionsResponse:
        r"""Remove Seller Commissions by Category ID
        This endpoint removes a seller comission on the selected category.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveSellerCommissionsRequest, base_url, '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RemoveSellerCommissionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveSellerCommissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def retrieve_seller_commissions(self, request: operations.RetrieveSellerCommissionsRequest) -> operations.RetrieveSellerCommissionsResponse:
        r"""Get Seller Commissions by Category ID
        This endpoint retrieves seller comissions applied to the selected category.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveSellerCommissionsRequest, base_url, '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RetrieveSellerCommissionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveSellerCommissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def upsert_seller_commissions(self, request: operations.UpsertSellerCommissionsRequest) -> operations.UpsertSellerCommissionsResponse:
        r"""Upsert Seller Commissions by Category ID
        This endpoint is used by marketplace operators to define comissions for a single category, by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpsertSellerCommissionsRequest, base_url, '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "upsert_seller_commissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpsertSellerCommissionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpsertSellerCommissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    