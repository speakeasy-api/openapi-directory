"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import documentlocation as shared_documentlocation
from ..shared import featuretype_enum as shared_featuretype_enum
from ..shared import notificationchannel as shared_notificationchannel
from ..shared import outputconfig as shared_outputconfig
from ..shared import queriesconfig as shared_queriesconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartDocumentAnalysisRequest:
    
    document_location: shared_documentlocation.DocumentLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentLocation') }})  
    feature_types: list[shared_featuretype_enum.FeatureTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureTypes') }})  
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientRequestToken'), 'exclude': lambda f: f is None }})  
    job_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobTag'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KMSKeyId'), 'exclude': lambda f: f is None }})  
    notification_channel: Optional[shared_notificationchannel.NotificationChannel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotificationChannel'), 'exclude': lambda f: f is None }})  
    output_config: Optional[shared_outputconfig.OutputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputConfig'), 'exclude': lambda f: f is None }})  
    queries_config: Optional[shared_queriesconfig.QueriesConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QueriesConfig'), 'exclude': lambda f: f is None }})
    r"""<p/>"""  
    