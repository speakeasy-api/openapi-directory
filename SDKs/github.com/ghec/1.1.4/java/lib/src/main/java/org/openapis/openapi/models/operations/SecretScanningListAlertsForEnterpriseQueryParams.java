/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class SecretScanningListAlertsForEnterpriseQueryParams {
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=after")
    public String after;
    public SecretScanningListAlertsForEnterpriseQueryParams withAfter(String after) {
        this.after = after;
        return this;
    }
    
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=before")
    public String before;
    public SecretScanningListAlertsForEnterpriseQueryParams withBefore(String before) {
        this.before = before;
        return this;
    }
    
    /**
     * The direction to sort the results by.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=direction")
    public org.openapis.openapi.models.shared.DirectionEnum direction;
    public SecretScanningListAlertsForEnterpriseQueryParams withDirection(org.openapis.openapi.models.shared.DirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * The number of results per page (max 100).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public SecretScanningListAlertsForEnterpriseQueryParams withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=resolution")
    public String resolution;
    public SecretScanningListAlertsForEnterpriseQueryParams withResolution(String resolution) {
        this.resolution = resolution;
        return this;
    }
    
    /**
     * A comma-separated list of secret types to return. By default all secret types are returned.
     * See "[Secret scanning patterns](https://docs.github.com/enterprise-cloud@latest//code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     * for a complete list of secret types.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=secret_type")
    public String secretType;
    public SecretScanningListAlertsForEnterpriseQueryParams withSecretType(String secretType) {
        this.secretType = secretType;
        return this;
    }
    
    /**
     * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public org.openapis.openapi.models.shared.SecretScanningAlertSortEnum sort;
    public SecretScanningListAlertsForEnterpriseQueryParams withSort(org.openapis.openapi.models.shared.SecretScanningAlertSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    public org.openapis.openapi.models.shared.SecretScanningAlertStateEnum state;
    public SecretScanningListAlertsForEnterpriseQueryParams withState(org.openapis.openapi.models.shared.SecretScanningAlertStateEnum state) {
        this.state = state;
        return this;
    }
    
}
