// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ErrorsErrorAttachmentLocationSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsErrorAttachmentLocationRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Error attachment id.
	AttachmentID string `pathParam:"style=simple,explode=false,name=attachmentId"`
	// The id of the error
	ErrorID string `pathParam:"style=simple,explode=false,name=errorId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsErrorAttachmentLocationDefaultApplicationJSONError struct {
	Code    ErrorsErrorAttachmentLocationDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                           `json:"message"`
}

// ErrorsErrorAttachmentLocationDefaultApplicationJSON - Error code with reason
type ErrorsErrorAttachmentLocationDefaultApplicationJSON struct {
	Error ErrorsErrorAttachmentLocationDefaultApplicationJSONError `json:"error"`
}

// ErrorsErrorAttachmentLocation200ApplicationJSON - Error attachment location.
type ErrorsErrorAttachmentLocation200ApplicationJSON struct {
	URI *string `json:"uri,omitempty"`
}

type ErrorsErrorAttachmentLocationResponse struct {
	ContentType string
	// Error attachment location.
	ErrorsErrorAttachmentLocation200ApplicationJSONObject *ErrorsErrorAttachmentLocation200ApplicationJSON
	// Error code with reason
	ErrorsErrorAttachmentLocationDefaultApplicationJSONObject *ErrorsErrorAttachmentLocationDefaultApplicationJSON
	StatusCode                                                int
	RawResponse                                               *http.Response
}
