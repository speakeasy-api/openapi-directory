"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import doc as shared_doc
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetArticlesearchJSONSortEnum(str, Enum):
    r"""\\"By default, search results are sorted by their relevance to the query term (q). Use the sort parameter to sort by pub_date.\\" """
    NEWEST = 'newest'
    OLDEST = 'oldest'


@dataclasses.dataclass
class GetArticlesearchJSONRequest:
    
    begin_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'begin_date', 'style': 'form', 'explode': True }})
    r"""\\"Format: YYYYMMDD
    
    Restricts responses to results with publication dates of the date specified or later.\" 
    """  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end_date', 'style': 'form', 'explode': True }})
    r"""\\"Format: YYYYMMDD
    
    Restricts responses to results with publication dates of the date specified or earlier.\" 
    """  
    facet_field: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facet_field', 'style': 'form', 'explode': True }})
    r"""Comma-delimited list of facets
    
    Specifies the sets of facet values to include in the facets array at the end of response, which collects the facet values from all the search results. By default no facet fields will be returned. Below is the list of valid facets:
    
    section_name
    
    document_type
    
    type_of_material
    
    source
    
    day_of_week
    
    To learn more about using facets, see Using Facets.
    """  
    facet_filter: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facet_filter', 'style': 'form', 'explode': True }})
    r"""When set to true, facet counts will respect any applied filters (fq, date range, etc.) in addition to the main query term. To filter facet counts, specifying at least one facet_field is required. To learn more about using facets, see Using Facets."""  
    fl: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fl', 'style': 'form', 'explode': True }})
    r"""\\"Comma-delimited list of fields (no limit)
    
      Limits the fields returned in your search results. By default (unless you include an fl list in your request), the following fields are returned: 
      
      web_url
      
      snippet
      
      lead_paragraph
      
      abstract
      
      print_page
      
      blog
      
      source
      
      multimedia
      
      headline
      
      keywords
      
      pub_date
      
      document_type
      
      news_desk
      
      byline
      
      type_of_material
      
      _id
      
      word_count\" 
    """  
    fq: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fq', 'style': 'form', 'explode': True }})
    r"""\\"Filtered search query using standard Lucene syntax.
    
    The filter query can be specified with or without a limiting field: label. 
    
    See Filtering Your Search for more information about filtering.\" 
    """  
    hl: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hl', 'style': 'form', 'explode': True }})
    r"""Enables highlighting in search results. When set to true, the query term (q) is highlighted in the headline and lead_paragraph fields.
    
    Note: If highlighting is enabled, snippet will be returned even if it is not specified in your fl list.\" 
    """  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""\\"The value of page corresponds to a set of 10 results (it does not indicate the starting number of the result set). For example, page=0 corresponds to records 0-9. To return records 10-19, set page to 1, not 10.\\" """  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Search query term. Search is performed on the article body, headline and byline."""  
    sort: Optional[GetArticlesearchJSONSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""\\"By default, search results are sorted by their relevance to the query term (q). Use the sort parameter to sort by pub_date.\\" """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetArticlesearchJSON200ApplicationJSONResponseMeta:
    
    hits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hits'), 'exclude': lambda f: f is None }})  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})  
    time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetArticlesearchJSON200ApplicationJSONResponse:
    
    docs: Optional[list[shared_doc.Doc]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('docs'), 'exclude': lambda f: f is None }})  
    meta: Optional[GetArticlesearchJSON200ApplicationJSONResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetArticlesearchJSON200ApplicationJSON:
    r"""The docs requested by the article search."""
    
    response: Optional[GetArticlesearchJSON200ApplicationJSONResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetArticlesearchJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_articlesearch_json_200_application_json_object: Optional[GetArticlesearchJSON200ApplicationJSON] = dataclasses.field(default=None)
    r"""The docs requested by the article search."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    