// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TriggerTypeEnum - Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
type TriggerTypeEnum string

const (
	TriggerTypeEnumEventTypeUnspecified           TriggerTypeEnum = "eventTypeUnspecified"
	TriggerTypeEnumPageview                       TriggerTypeEnum = "pageview"
	TriggerTypeEnumDomReady                       TriggerTypeEnum = "domReady"
	TriggerTypeEnumWindowLoaded                   TriggerTypeEnum = "windowLoaded"
	TriggerTypeEnumCustomEvent                    TriggerTypeEnum = "customEvent"
	TriggerTypeEnumTriggerGroup                   TriggerTypeEnum = "triggerGroup"
	TriggerTypeEnumInit                           TriggerTypeEnum = "init"
	TriggerTypeEnumConsentInit                    TriggerTypeEnum = "consentInit"
	TriggerTypeEnumServerPageview                 TriggerTypeEnum = "serverPageview"
	TriggerTypeEnumAlways                         TriggerTypeEnum = "always"
	TriggerTypeEnumFirebaseAppException           TriggerTypeEnum = "firebaseAppException"
	TriggerTypeEnumFirebaseAppUpdate              TriggerTypeEnum = "firebaseAppUpdate"
	TriggerTypeEnumFirebaseCampaign               TriggerTypeEnum = "firebaseCampaign"
	TriggerTypeEnumFirebaseFirstOpen              TriggerTypeEnum = "firebaseFirstOpen"
	TriggerTypeEnumFirebaseInAppPurchase          TriggerTypeEnum = "firebaseInAppPurchase"
	TriggerTypeEnumFirebaseNotificationDismiss    TriggerTypeEnum = "firebaseNotificationDismiss"
	TriggerTypeEnumFirebaseNotificationForeground TriggerTypeEnum = "firebaseNotificationForeground"
	TriggerTypeEnumFirebaseNotificationOpen       TriggerTypeEnum = "firebaseNotificationOpen"
	TriggerTypeEnumFirebaseNotificationReceive    TriggerTypeEnum = "firebaseNotificationReceive"
	TriggerTypeEnumFirebaseOsUpdate               TriggerTypeEnum = "firebaseOsUpdate"
	TriggerTypeEnumFirebaseSessionStart           TriggerTypeEnum = "firebaseSessionStart"
	TriggerTypeEnumFirebaseUserEngagement         TriggerTypeEnum = "firebaseUserEngagement"
	TriggerTypeEnumFormSubmission                 TriggerTypeEnum = "formSubmission"
	TriggerTypeEnumClick                          TriggerTypeEnum = "click"
	TriggerTypeEnumLinkClick                      TriggerTypeEnum = "linkClick"
	TriggerTypeEnumJsError                        TriggerTypeEnum = "jsError"
	TriggerTypeEnumHistoryChange                  TriggerTypeEnum = "historyChange"
	TriggerTypeEnumTimer                          TriggerTypeEnum = "timer"
	TriggerTypeEnumAmpClick                       TriggerTypeEnum = "ampClick"
	TriggerTypeEnumAmpTimer                       TriggerTypeEnum = "ampTimer"
	TriggerTypeEnumAmpScroll                      TriggerTypeEnum = "ampScroll"
	TriggerTypeEnumAmpVisibility                  TriggerTypeEnum = "ampVisibility"
	TriggerTypeEnumYouTubeVideo                   TriggerTypeEnum = "youTubeVideo"
	TriggerTypeEnumScrollDepth                    TriggerTypeEnum = "scrollDepth"
	TriggerTypeEnumElementVisibility              TriggerTypeEnum = "elementVisibility"
)

func (e TriggerTypeEnum) ToPointer() *TriggerTypeEnum {
	return &e
}

func (e *TriggerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "eventTypeUnspecified":
		fallthrough
	case "pageview":
		fallthrough
	case "domReady":
		fallthrough
	case "windowLoaded":
		fallthrough
	case "customEvent":
		fallthrough
	case "triggerGroup":
		fallthrough
	case "init":
		fallthrough
	case "consentInit":
		fallthrough
	case "serverPageview":
		fallthrough
	case "always":
		fallthrough
	case "firebaseAppException":
		fallthrough
	case "firebaseAppUpdate":
		fallthrough
	case "firebaseCampaign":
		fallthrough
	case "firebaseFirstOpen":
		fallthrough
	case "firebaseInAppPurchase":
		fallthrough
	case "firebaseNotificationDismiss":
		fallthrough
	case "firebaseNotificationForeground":
		fallthrough
	case "firebaseNotificationOpen":
		fallthrough
	case "firebaseNotificationReceive":
		fallthrough
	case "firebaseOsUpdate":
		fallthrough
	case "firebaseSessionStart":
		fallthrough
	case "firebaseUserEngagement":
		fallthrough
	case "formSubmission":
		fallthrough
	case "click":
		fallthrough
	case "linkClick":
		fallthrough
	case "jsError":
		fallthrough
	case "historyChange":
		fallthrough
	case "timer":
		fallthrough
	case "ampClick":
		fallthrough
	case "ampTimer":
		fallthrough
	case "ampScroll":
		fallthrough
	case "ampVisibility":
		fallthrough
	case "youTubeVideo":
		fallthrough
	case "scrollDepth":
		fallthrough
	case "elementVisibility":
		*e = TriggerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerTypeEnum: %v", v)
	}
}

// Trigger - Represents a Google Tag Manager Trigger
type Trigger struct {
	// GTM Account ID.
	AccountID *string `json:"accountId,omitempty"`
	// Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
	AutoEventFilter []Condition `json:"autoEventFilter,omitempty"`
	// Represents a Google Tag Manager Parameter.
	CheckValidation *Parameter `json:"checkValidation,omitempty"`
	// GTM Container ID.
	ContainerID *string `json:"containerId,omitempty"`
	// Represents a Google Tag Manager Parameter.
	ContinuousTimeMinMilliseconds *Parameter `json:"continuousTimeMinMilliseconds,omitempty"`
	// Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
	CustomEventFilter []Condition `json:"customEventFilter,omitempty"`
	// Represents a Google Tag Manager Parameter.
	EventName *Parameter `json:"eventName,omitempty"`
	// The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
	Filter []Condition `json:"filter,omitempty"`
	// The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Represents a Google Tag Manager Parameter.
	HorizontalScrollPercentageList *Parameter `json:"horizontalScrollPercentageList,omitempty"`
	// Represents a Google Tag Manager Parameter.
	Interval *Parameter `json:"interval,omitempty"`
	// Represents a Google Tag Manager Parameter.
	IntervalSeconds *Parameter `json:"intervalSeconds,omitempty"`
	// Represents a Google Tag Manager Parameter.
	Limit *Parameter `json:"limit,omitempty"`
	// Represents a Google Tag Manager Parameter.
	MaxTimerLengthSeconds *Parameter `json:"maxTimerLengthSeconds,omitempty"`
	// Trigger display name. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
	Name *string `json:"name,omitempty"`
	// User notes on how to apply this trigger in the container. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
	Notes *string `json:"notes,omitempty"`
	// Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
	Parameter []Parameter `json:"parameter,omitempty"`
	// Parent folder id.
	ParentFolderID *string `json:"parentFolderId,omitempty"`
	// GTM Trigger's API relative path.
	Path *string `json:"path,omitempty"`
	// Represents a Google Tag Manager Parameter.
	Selector *Parameter `json:"selector,omitempty"`
	// Auto generated link to the tag manager UI
	TagManagerURL *string `json:"tagManagerUrl,omitempty"`
	// Represents a Google Tag Manager Parameter.
	TotalTimeMinMilliseconds *Parameter `json:"totalTimeMinMilliseconds,omitempty"`
	// The Trigger ID uniquely identifies the GTM Trigger.
	TriggerID *string `json:"triggerId,omitempty"`
	// Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
	Type *TriggerTypeEnum `json:"type,omitempty"`
	// Represents a Google Tag Manager Parameter.
	UniqueTriggerID *Parameter `json:"uniqueTriggerId,omitempty"`
	// Represents a Google Tag Manager Parameter.
	VerticalScrollPercentageList *Parameter `json:"verticalScrollPercentageList,omitempty"`
	// Represents a Google Tag Manager Parameter.
	VisibilitySelector *Parameter `json:"visibilitySelector,omitempty"`
	// Represents a Google Tag Manager Parameter.
	VisiblePercentageMax *Parameter `json:"visiblePercentageMax,omitempty"`
	// Represents a Google Tag Manager Parameter.
	VisiblePercentageMin *Parameter `json:"visiblePercentageMin,omitempty"`
	// Represents a Google Tag Manager Parameter.
	WaitForTags *Parameter `json:"waitForTags,omitempty"`
	// Represents a Google Tag Manager Parameter.
	WaitForTagsTimeout *Parameter `json:"waitForTagsTimeout,omitempty"`
	// GTM Workspace ID.
	WorkspaceID *string `json:"workspaceId,omitempty"`
}
