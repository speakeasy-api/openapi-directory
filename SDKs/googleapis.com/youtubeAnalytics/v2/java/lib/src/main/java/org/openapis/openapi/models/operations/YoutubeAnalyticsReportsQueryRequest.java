/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class YoutubeAnalyticsReportsQueryRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;

    public YoutubeAnalyticsReportsQueryRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;

    public YoutubeAnalyticsReportsQueryRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public YoutubeAnalyticsReportsQueryRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;

    public YoutubeAnalyticsReportsQueryRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * The currency to which financial metrics should be converted. The default is US Dollar (USD). If the result contains no financial metrics, this flag will be ignored. Responds with an error if the specified currency is not recognized.", pattern: [A-Z]{3}
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=currency")
    public String currency;

    public YoutubeAnalyticsReportsQueryRequest withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * A comma-separated list of YouTube Analytics dimensions, such as `views` or `ageGroup,gender`. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the dimensions used for those reports. Also see the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document for definitions of those dimensions." pattern: [0-9a-zA-Z,]+
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dimensions")
    public String dimensions;

    public YoutubeAnalyticsReportsQueryRequest withDimensions(String dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    /**
     * The end date for fetching YouTube Analytics data. The value should be in `YYYY-MM-DD` format. required: true, pattern: [0-9]{4}-[0-9]{2}-[0-9]{2}
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=endDate")
    public String endDate;

    public YoutubeAnalyticsReportsQueryRequest withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public YoutubeAnalyticsReportsQueryRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * A list of filters that should be applied when retrieving YouTube Analytics data. The [Available Reports](/youtube/analytics/v2/available_reports) document identifies the dimensions that can be used to filter each report, and the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document defines those dimensions. If a request uses multiple filters, join them together with a semicolon (`;`), and the returned result table will satisfy both filters. For example, a filters parameter value of `video==dMH0bHeiRNg;country==IT` restricts the result set to include data for the given video in Italy.",
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filters")
    public String filters;

    public YoutubeAnalyticsReportsQueryRequest withFilters(String filters) {
        this.filters = filters;
        return this;
    }
    
    /**
     * Identifies the YouTube channel or content owner for which you are retrieving YouTube Analytics data. - To request data for a YouTube user, set the `ids` parameter value to `channel==CHANNEL_ID`, where `CHANNEL_ID` specifies the unique YouTube channel ID. - To request data for a YouTube CMS content owner, set the `ids` parameter value to `contentOwner==OWNER_NAME`, where `OWNER_NAME` is the CMS name of the content owner. required: true, pattern: [a-zA-Z]+==[a-zA-Z0-9_+-]+
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ids")
    public String ids;

    public YoutubeAnalyticsReportsQueryRequest withIds(String ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * If set to true historical data (i.e. channel data from before the linking of the channel to the content owner) will be retrieved.",
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeHistoricalChannelData")
    public Boolean includeHistoricalChannelData;

    public YoutubeAnalyticsReportsQueryRequest withIncludeHistoricalChannelData(Boolean includeHistoricalChannelData) {
        this.includeHistoricalChannelData = includeHistoricalChannelData;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public YoutubeAnalyticsReportsQueryRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The maximum number of rows to include in the response.", minValue: 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;

    public YoutubeAnalyticsReportsQueryRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * A comma-separated list of YouTube Analytics metrics, such as `views` or `likes,dislikes`. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the metrics available in each report, and see the [Metrics](/youtube/analytics/v2/dimsmets/mets) document for definitions of those metrics. required: true, pattern: [0-9a-zA-Z,]+
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=metrics")
    public String metrics;

    public YoutubeAnalyticsReportsQueryRequest withMetrics(String metrics) {
        this.metrics = metrics;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public YoutubeAnalyticsReportsQueryRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public YoutubeAnalyticsReportsQueryRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public YoutubeAnalyticsReportsQueryRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * A comma-separated list of dimensions or metrics that determine the sort order for YouTube Analytics data. By default the sort order is ascending. The '`-`' prefix causes descending sort order.", pattern: [-0-9a-zA-Z,]+
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;

    public YoutubeAnalyticsReportsQueryRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * The start date for fetching YouTube Analytics data. The value should be in `YYYY-MM-DD` format. required: true, pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startDate")
    public String startDate;

    public YoutubeAnalyticsReportsQueryRequest withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter (one-based, inclusive).", minValue: 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startIndex")
    public Long startIndex;

    public YoutubeAnalyticsReportsQueryRequest withStartIndex(Long startIndex) {
        this.startIndex = startIndex;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;

    public YoutubeAnalyticsReportsQueryRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;

    public YoutubeAnalyticsReportsQueryRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    public YoutubeAnalyticsReportsQueryRequest(){}
}
