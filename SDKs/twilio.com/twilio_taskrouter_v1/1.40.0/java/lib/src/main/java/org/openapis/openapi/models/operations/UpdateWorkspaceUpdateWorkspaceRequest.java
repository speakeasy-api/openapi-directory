/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateWorkspaceUpdateWorkspaceRequest {
    /**
     * The SID of the Activity that will be used when new Workers are created in the Workspace.
     */
    @SpeakeasyMetadata("form:name=DefaultActivitySid")
    public String defaultActivitySid;
    public UpdateWorkspaceUpdateWorkspaceRequest withDefaultActivitySid(String defaultActivitySid) {
        this.defaultActivitySid = defaultActivitySid;
        return this;
    }
    
    /**
     * The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
     */
    @SpeakeasyMetadata("form:name=EventCallbackUrl")
    public String eventCallbackUrl;
    public UpdateWorkspaceUpdateWorkspaceRequest withEventCallbackUrl(String eventCallbackUrl) {
        this.eventCallbackUrl = eventCallbackUrl;
        return this;
    }
    
    /**
     * The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
     */
    @SpeakeasyMetadata("form:name=EventsFilter")
    public String eventsFilter;
    public UpdateWorkspaceUpdateWorkspaceRequest withEventsFilter(String eventsFilter) {
        this.eventsFilter = eventsFilter;
        return this;
    }
    
    /**
     * A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    public String friendlyName;
    public UpdateWorkspaceUpdateWorkspaceRequest withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be maintained as multi-tasking. There is no default when omitting this parameter. A multi-tasking Workspace can't be updated to single-tasking unless it is not a Flex Project and another (legacy) single-tasking Workspace exists. Multi-tasking allows Workers to handle multiple Tasks simultaneously. In multi-tasking mode, each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
     */
    @SpeakeasyMetadata("form:name=MultiTaskEnabled")
    public Boolean multiTaskEnabled;
    public UpdateWorkspaceUpdateWorkspaceRequest withMultiTaskEnabled(Boolean multiTaskEnabled) {
        this.multiTaskEnabled = multiTaskEnabled;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=PrioritizeQueueOrder")
    public org.openapis.openapi.models.shared.WorkspaceEnumQueueOrderEnum prioritizeQueueOrder;
    public UpdateWorkspaceUpdateWorkspaceRequest withPrioritizeQueueOrder(org.openapis.openapi.models.shared.WorkspaceEnumQueueOrderEnum prioritizeQueueOrder) {
        this.prioritizeQueueOrder = prioritizeQueueOrder;
        return this;
    }
    
    /**
     * The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
     */
    @SpeakeasyMetadata("form:name=TimeoutActivitySid")
    public String timeoutActivitySid;
    public UpdateWorkspaceUpdateWorkspaceRequest withTimeoutActivitySid(String timeoutActivitySid) {
        this.timeoutActivitySid = timeoutActivitySid;
        return this;
    }
    
}
