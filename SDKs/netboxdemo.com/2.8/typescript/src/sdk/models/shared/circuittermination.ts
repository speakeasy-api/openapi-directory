/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NestedCable } from "./nestedcable";
import { NestedCircuit } from "./nestedcircuit";
import { NestedSite } from "./nestedsite";
import { Expose, Type } from "class-transformer";

export enum CircuitTerminationConnectionStatusLabelEnum {
  NotConnected = "Not Connected",
  Connected = "Connected",
}

export enum CircuitTerminationConnectionStatusValueEnum {
  False = "false",
  True = "true",
}

export class CircuitTerminationConnectionStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: CircuitTerminationConnectionStatusLabelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: CircuitTerminationConnectionStatusValueEnum;
}

export enum CircuitTerminationTerminationEnum {
  A = "A",
  Z = "Z",
}

export class CircuitTermination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cable" })
  @Type(() => NestedCable)
  cable?: NestedCable;

  @SpeakeasyMetadata()
  @Expose({ name: "circuit" })
  @Type(() => NestedCircuit)
  circuit: NestedCircuit;

  /**
   *
   * @remarks
   * Return the appropriate serializer for the type of connected object.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connected_endpoint" })
  connectedEndpoint?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "connected_endpoint_type" })
  connectedEndpointType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "connection_status" })
  @Type(() => CircuitTerminationConnectionStatus)
  connectionStatus?: CircuitTerminationConnectionStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "port_speed" })
  portSpeed: number;

  @SpeakeasyMetadata()
  @Expose({ name: "pp_info" })
  ppInfo?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "site" })
  @Type(() => NestedSite)
  site: NestedSite;

  @SpeakeasyMetadata()
  @Expose({ name: "term_side" })
  termSide: CircuitTerminationTerminationEnum;

  /**
   * Upstream speed, if different from port speed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upstream_speed" })
  upstreamSpeed?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "xconnect_id" })
  xconnectId?: string;
}
