// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationActionEnum
type GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationActionEnum string

const (
	GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationActionEnumDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationActionEnum = "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation"
)

func (e *GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation":
		*e = GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationActionEnum: %s", s)
	}
}

// GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationVersionEnum
type GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationVersionEnum string

const (
	GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationVersionEnumTwoThousandAndSixteen1115 GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationVersionEnum = "2016-11-15"
)

func (e *GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationVersionEnum: %s", s)
	}
}

type GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationQueryParams struct {
	Action GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	//  The ID of the local gateway route table virtual interface group association.
	LocalGatewayRouteTableVirtualInterfaceGroupAssociationID string                                                                     `queryParam:"style=form,explode=true,name=LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"`
	Version                                                  GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest struct {
	QueryParams GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationQueryParams
	Headers     GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationHeaders
}

type GETDeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
