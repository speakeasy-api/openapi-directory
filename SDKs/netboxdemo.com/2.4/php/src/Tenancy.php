<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tenancy 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * tenancyChoicesList
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesListResponse
     */
	public function tenancyChoicesList(
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/_choices/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * tenancyChoicesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesReadResponse
     */
	public function tenancyChoicesRead(
        \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/_choices/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyChoicesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * tenancyTenantGroupsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TenantGroupInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsCreateResponse
     */
	public function tenancyTenantGroupsCreate(
        \OpenAPI\OpenAPI\Models\Shared\TenantGroupInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenant-groups/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenantGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TenantGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantGroupsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsDeleteResponse
     */
	public function tenancyTenantGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenant-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * tenancyTenantGroupsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsListResponse
     */
	public function tenancyTenantGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenant-groups/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenancyTenantGroupsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantGroupsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsPartialUpdateResponse
     */
	public function tenancyTenantGroupsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenant-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tenantGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenantGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TenantGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantGroupsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsReadResponse
     */
	public function tenancyTenantGroupsRead(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenant-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenantGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TenantGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantGroupsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsUpdateResponse
     */
	public function tenancyTenantGroupsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenant-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tenantGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantGroupsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenantGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TenantGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableTenantInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsCreateResponse
     */
	public function tenancyTenantsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableTenantInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenants/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tenant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsDeleteResponse
     */
	public function tenancyTenantsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenants/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * tenancyTenantsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsListResponse
     */
	public function tenancyTenantsList(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenants/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TenancyTenantsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenancyTenantsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TenancyTenantsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsPartialUpdateResponse
     */
	public function tenancyTenantsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenants/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableTenantInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tenant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsReadResponse
     */
	public function tenancyTenantsRead(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenants/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tenant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * tenancyTenantsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsUpdateResponse
     */
	public function tenancyTenantsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tenancy/tenants/{id}/', \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableTenantInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TenancyTenantsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tenant', 'json');
            }
        }

        return $response;
    }
}