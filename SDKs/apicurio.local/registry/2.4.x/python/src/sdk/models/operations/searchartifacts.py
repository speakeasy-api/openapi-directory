"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import artifactsearchresults as shared_artifactsearchresults
from ..shared import error as shared_error
from ..shared import sortby_enum as shared_sortby_enum
from ..shared import sortorder_enum as shared_sortorder_enum
from typing import Optional


@dataclasses.dataclass
class SearchArtifactsRequest:
    
    content_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentId', 'style': 'form', 'explode': True }})
    r"""Filter by contentId."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description', 'style': 'form', 'explode': True }})
    r"""Filter by description."""  
    global_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'globalId', 'style': 'form', 'explode': True }})
    r"""Filter by globalId."""  
    group: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group', 'style': 'form', 'explode': True }})
    r"""Filter by artifact group."""  
    labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'labels', 'style': 'form', 'explode': True }})
    r"""Filter by label.  Include one or more label to only return artifacts containing all of the
    specified labels.
    """  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The number of artifacts to return.  Defaults to 20."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Filter by artifact name."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The number of artifacts to skip before starting to collect the result set.  Defaults to 0."""  
    order: Optional[shared_sortorder_enum.SortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""Sort order, ascending (`asc`) or descending (`desc`)."""  
    orderby: Optional[shared_sortby_enum.SortByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderby', 'style': 'form', 'explode': True }})
    r"""The field to sort by.  Can be one of:
    
    * `name`
    * `createdOn`
    """  
    properties: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'properties', 'style': 'form', 'explode': True }})
    r"""Filter by one or more name/value property.  Separate each name/value pair using a colon.  For
    example `properties=foo:bar` will return only artifacts with a custom property named `foo`
    and value `bar`.
    """  
    

@dataclasses.dataclass
class SearchArtifactsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    artifact_search_results: Optional[shared_artifactsearchresults.ArtifactSearchResults] = dataclasses.field(default=None)
    r"""On a successful response, returns a result set of artifacts - one for each artifact
    in the registry that matches the criteria.
    """  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Common response for all operations that can fail with an unexpected server error."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    