/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
 */
export enum UsersGetContextForUserSubjectTypeEnum {
  Organization = "organization",
  Repository = "repository",
  Issue = "issue",
  PullRequest = "pull_request",
}

export class UsersGetContextForUserRequest extends SpeakeasyBase {
  /**
   * Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=subject_id",
  })
  subjectId?: string;

  /**
   * Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=subject_type",
  })
  subjectType?: UsersGetContextForUserSubjectTypeEnum;

  /**
   * The handle for the GitHub user account.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=username",
  })
  username: string;
}

export class UsersGetContextForUserResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  hovercard?: shared.Hovercard;

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
