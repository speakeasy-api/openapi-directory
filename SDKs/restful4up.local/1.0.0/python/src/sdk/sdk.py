"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "http://restful4up.local",
    "/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""RESTful API 4 Unipacker"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def apply_yara_rules(self, request: operations.ApplyYaraRulesRequestBody) -> operations.ApplyYaraRulesResponse:
        r"""apply given YARA rules to the given executable. (upto 10 rules)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/apply-yara-rules'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApplyYaraRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def clean(self) -> operations.CleanResponse:
        r"""clean up the uploaded files"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/clean'
        
        
        client = self._client
        
        http_res = client.request('HEAD', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CleanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def emulation_output(self, request: operations.EmulationOutputRequestBody) -> operations.EmulationOutputResponse:
        r"""try to get the emulation output after unpacking the file"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/emulation-output'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EmulationOutputResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def generate_partial_yara_rule(self, request: operations.GeneratePartialYaraRuleRequestBody) -> operations.GeneratePartialYaraRuleResponse:
        r"""generate partial YARA rules for give executable. (Rule without the condition section)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/generate-partial-yara-rules'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GeneratePartialYaraRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def unpack(self, request: operations.UnpackRequestBody) -> operations.UnpackResponse:
        r"""try to unpack the given file"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/unpack'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnpackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.unpack_200_wildcard_binary_string = http_res.content
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    