"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DirectoryLimits:
    r"""Contains directory limit information for a Region."""
    
    cloud_only_directories_current_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudOnlyDirectoriesCurrentCount'), 'exclude': lambda f: f is None }})  
    cloud_only_directories_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudOnlyDirectoriesLimit'), 'exclude': lambda f: f is None }})  
    cloud_only_directories_limit_reached: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudOnlyDirectoriesLimitReached'), 'exclude': lambda f: f is None }})  
    cloud_only_microsoft_ad_current_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudOnlyMicrosoftADCurrentCount'), 'exclude': lambda f: f is None }})  
    cloud_only_microsoft_ad_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudOnlyMicrosoftADLimit'), 'exclude': lambda f: f is None }})  
    cloud_only_microsoft_ad_limit_reached: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudOnlyMicrosoftADLimitReached'), 'exclude': lambda f: f is None }})  
    connected_directories_current_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectedDirectoriesCurrentCount'), 'exclude': lambda f: f is None }})  
    connected_directories_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectedDirectoriesLimit'), 'exclude': lambda f: f is None }})  
    connected_directories_limit_reached: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectedDirectoriesLimitReached'), 'exclude': lambda f: f is None }})  
    