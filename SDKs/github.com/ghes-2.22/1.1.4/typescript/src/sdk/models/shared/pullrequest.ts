/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthorAssociationEnum } from "./authorassociationenum";
import { Link } from "./link";
import { NullableLicenseSimple } from "./nullablelicensesimple";
import { NullableMilestone } from "./nullablemilestone";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { SimpleUser } from "./simpleuser";
import { TeamSimple } from "./teamsimple";
import { Expose, Transform, Type } from "class-transformer";

export class PullRequestLinks extends SpeakeasyBase {
  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  @Type(() => Link)
  comments: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commits" })
  @Type(() => Link)
  commits: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "html" })
  @Type(() => Link)
  html: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issue" })
  @Type(() => Link)
  issue: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "review_comment" })
  @Type(() => Link)
  reviewComment: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "review_comments" })
  @Type(() => Link)
  reviewComments: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => Link)
  self: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statuses" })
  @Type(() => Link)
  statuses: Link;
}

export class PullRequestBaseRepoOwner extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "avatar_url" })
  avatarUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "followers_url" })
  followersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "following_url" })
  followingUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gists_url" })
  gistsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gravatar_id" })
  gravatarId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "login" })
  login: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "organizations_url" })
  organizationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "received_events_url" })
  receivedEventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "repos_url" })
  reposUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "site_admin" })
  siteAdmin: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "starred_url" })
  starredUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriptions_url" })
  subscriptionsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class PullRequestBaseRepoPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "admin" })
  admin: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "maintain" })
  maintain?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pull" })
  pull: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "push" })
  push: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "triage" })
  triage?: boolean;
}

export class PullRequestBaseRepo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allow_forking" })
  allowForking?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_merge_commit" })
  allowMergeCommit?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_rebase_merge" })
  allowRebaseMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_squash_merge" })
  allowSquashMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "archive_url" })
  archiveUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "assignees_url" })
  assigneesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "blobs_url" })
  blobsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "branches_url" })
  branchesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "clone_url" })
  cloneUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "collaborators_url" })
  collaboratorsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commits_url" })
  commitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "compare_url" })
  compareUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contents_url" })
  contentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contributors_url" })
  contributorsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "default_branch" })
  defaultBranch: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deployments_url" })
  deploymentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "downloads_url" })
  downloadsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fork" })
  fork: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "forks" })
  forks: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_count" })
  forksCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_url" })
  forksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "full_name" })
  fullName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_commits_url" })
  gitCommitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_refs_url" })
  gitRefsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_tags_url" })
  gitTagsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_url" })
  gitUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "has_downloads" })
  hasDownloads: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_issues" })
  hasIssues: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_pages" })
  hasPages: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_projects" })
  hasProjects: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_wiki" })
  hasWiki: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "homepage" })
  homepage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hooks_url" })
  hooksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "is_template" })
  isTemplate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_comment_url" })
  issueCommentUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_events_url" })
  issueEventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issues_url" })
  issuesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "keys_url" })
  keysUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "labels_url" })
  labelsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language: string;

  @SpeakeasyMetadata()
  @Expose({ name: "languages_url" })
  languagesUrl: string;

  /**
   * License Simple
   */
  @SpeakeasyMetadata()
  @Expose({ name: "license" })
  @Type(() => NullableLicenseSimple)
  license: NullableLicenseSimple;

  @SpeakeasyMetadata()
  @Expose({ name: "master_branch" })
  masterBranch?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merges_url" })
  mergesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "milestones_url" })
  milestonesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mirror_url" })
  mirrorUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "notifications_url" })
  notificationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues" })
  openIssues: number;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues_count" })
  openIssuesCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => PullRequestBaseRepoOwner)
  owner: PullRequestBaseRepoOwner;

  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => PullRequestBaseRepoPermissions)
  permissions?: PullRequestBaseRepoPermissions;

  @SpeakeasyMetadata()
  @Expose({ name: "private" })
  private: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pulls_url" })
  pullsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pushed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  pushedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "releases_url" })
  releasesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ssh_url" })
  sshUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_count" })
  stargazersCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_url" })
  stargazersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statuses_url" })
  statusesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscribers_url" })
  subscribersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscription_url" })
  subscriptionUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "svn_url" })
  svnUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags_url" })
  tagsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "teams_url" })
  teamsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "temp_clone_token" })
  tempCloneToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "topics" })
  topics?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "trees_url" })
  treesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * The repository visibility: public, private, or internal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers" })
  watchers: number;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers_count" })
  watchersCount: number;
}

export class PullRequestBaseUser extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "avatar_url" })
  avatarUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "followers_url" })
  followersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "following_url" })
  followingUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gists_url" })
  gistsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gravatar_id" })
  gravatarId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "login" })
  login: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "organizations_url" })
  organizationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "received_events_url" })
  receivedEventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "repos_url" })
  reposUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "site_admin" })
  siteAdmin: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "starred_url" })
  starredUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriptions_url" })
  subscriptionsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class PullRequestBase extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ref" })
  ref: string;

  @SpeakeasyMetadata()
  @Expose({ name: "repo" })
  @Type(() => PullRequestBaseRepo)
  repo: PullRequestBaseRepo;

  @SpeakeasyMetadata()
  @Expose({ name: "sha" })
  sha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => PullRequestBaseUser)
  user: PullRequestBaseUser;
}

export class PullRequestHeadRepoLicense extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "spdx_id" })
  spdxId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class PullRequestHeadRepoOwner extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "avatar_url" })
  avatarUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "followers_url" })
  followersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "following_url" })
  followingUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gists_url" })
  gistsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gravatar_id" })
  gravatarId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "login" })
  login: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "organizations_url" })
  organizationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "received_events_url" })
  receivedEventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "repos_url" })
  reposUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "site_admin" })
  siteAdmin: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "starred_url" })
  starredUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriptions_url" })
  subscriptionsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class PullRequestHeadRepoPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "admin" })
  admin: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "maintain" })
  maintain?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pull" })
  pull: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "push" })
  push: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "triage" })
  triage?: boolean;
}

export class PullRequestHeadRepo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allow_forking" })
  allowForking?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_merge_commit" })
  allowMergeCommit?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_rebase_merge" })
  allowRebaseMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_squash_merge" })
  allowSquashMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "archive_url" })
  archiveUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "assignees_url" })
  assigneesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "blobs_url" })
  blobsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "branches_url" })
  branchesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "clone_url" })
  cloneUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "collaborators_url" })
  collaboratorsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commits_url" })
  commitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "compare_url" })
  compareUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contents_url" })
  contentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contributors_url" })
  contributorsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "default_branch" })
  defaultBranch: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deployments_url" })
  deploymentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "downloads_url" })
  downloadsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fork" })
  fork: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "forks" })
  forks: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_count" })
  forksCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_url" })
  forksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "full_name" })
  fullName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_commits_url" })
  gitCommitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_refs_url" })
  gitRefsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_tags_url" })
  gitTagsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_url" })
  gitUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "has_downloads" })
  hasDownloads: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_issues" })
  hasIssues: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_pages" })
  hasPages: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_projects" })
  hasProjects: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_wiki" })
  hasWiki: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "homepage" })
  homepage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hooks_url" })
  hooksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "is_template" })
  isTemplate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_comment_url" })
  issueCommentUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_events_url" })
  issueEventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issues_url" })
  issuesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "keys_url" })
  keysUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "labels_url" })
  labelsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language: string;

  @SpeakeasyMetadata()
  @Expose({ name: "languages_url" })
  languagesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "license" })
  @Type(() => PullRequestHeadRepoLicense)
  license: PullRequestHeadRepoLicense;

  @SpeakeasyMetadata()
  @Expose({ name: "master_branch" })
  masterBranch?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merges_url" })
  mergesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "milestones_url" })
  milestonesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mirror_url" })
  mirrorUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "notifications_url" })
  notificationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues" })
  openIssues: number;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues_count" })
  openIssuesCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => PullRequestHeadRepoOwner)
  owner: PullRequestHeadRepoOwner;

  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => PullRequestHeadRepoPermissions)
  permissions?: PullRequestHeadRepoPermissions;

  @SpeakeasyMetadata()
  @Expose({ name: "private" })
  private: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pulls_url" })
  pullsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pushed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  pushedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "releases_url" })
  releasesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ssh_url" })
  sshUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_count" })
  stargazersCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_url" })
  stargazersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statuses_url" })
  statusesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscribers_url" })
  subscribersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscription_url" })
  subscriptionUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "svn_url" })
  svnUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags_url" })
  tagsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "teams_url" })
  teamsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "temp_clone_token" })
  tempCloneToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "topics" })
  topics?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "trees_url" })
  treesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * The repository visibility: public, private, or internal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers" })
  watchers: number;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers_count" })
  watchersCount: number;
}

export class PullRequestHeadUser extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "avatar_url" })
  avatarUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "followers_url" })
  followersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "following_url" })
  followingUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gists_url" })
  gistsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gravatar_id" })
  gravatarId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "login" })
  login: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "organizations_url" })
  organizationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "received_events_url" })
  receivedEventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "repos_url" })
  reposUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "site_admin" })
  siteAdmin: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "starred_url" })
  starredUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriptions_url" })
  subscriptionsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class PullRequestHead extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ref" })
  ref: string;

  @SpeakeasyMetadata()
  @Expose({ name: "repo" })
  @Type(() => PullRequestHeadRepo)
  repo: PullRequestHeadRepo;

  @SpeakeasyMetadata()
  @Expose({ name: "sha" })
  sha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => PullRequestHeadUser)
  user: PullRequestHeadUser;
}

export class PullRequestLabels extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color: string;

  @SpeakeasyMetadata()
  @Expose({ name: "default" })
  default: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * State of this Pull Request. Either `open` or `closed`.
 */
export enum PullRequestStateEnum {
  Open = "open",
  Closed = "closed",
}

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export class PullRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => PullRequestLinks)
  links: PullRequestLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "active_lock_reason" })
  activeLockReason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "additions" })
  additions: number;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee" })
  @Type(() => NullableSimpleUser)
  assignee: NullableSimpleUser;

  @SpeakeasyMetadata({ elemType: SimpleUser })
  @Expose({ name: "assignees" })
  @Type(() => SimpleUser)
  assignees?: SimpleUser[];

  /**
   * How the author is associated with the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author_association" })
  authorAssociation: AuthorAssociationEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "base" })
  @Type(() => PullRequestBase)
  base: PullRequestBase;

  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body: string;

  @SpeakeasyMetadata()
  @Expose({ name: "changed_files" })
  changedFiles: number;

  @SpeakeasyMetadata()
  @Expose({ name: "closed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  closedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments: number;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commits" })
  commits: number;

  @SpeakeasyMetadata()
  @Expose({ name: "commits_url" })
  commitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "deletions" })
  deletions: number;

  @SpeakeasyMetadata()
  @Expose({ name: "diff_url" })
  diffUrl: string;

  /**
   * Indicates whether or not the pull request is a draft.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "draft" })
  draft?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "head" })
  @Type(() => PullRequestHead)
  head: PullRequestHead;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_url" })
  issueUrl: string;

  @SpeakeasyMetadata({ elemType: PullRequestLabels })
  @Expose({ name: "labels" })
  @Type(() => PullRequestLabels)
  labels: PullRequestLabels[];

  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked: boolean;

  /**
   * Indicates whether maintainers can modify the pull request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maintainer_can_modify" })
  maintainerCanModify: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "merge_commit_sha" })
  mergeCommitSha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mergeable" })
  mergeable: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "mergeable_state" })
  mergeableState: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merged" })
  merged: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "merged_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  mergedAt: Date;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merged_by" })
  @Type(() => NullableSimpleUser)
  mergedBy: NullableSimpleUser;

  /**
   * A collection of related issues and pull requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "milestone" })
  @Type(() => NullableMilestone)
  milestone: NullableMilestone;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  /**
   * Number uniquely identifying the pull request within its repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: number;

  @SpeakeasyMetadata()
  @Expose({ name: "patch_url" })
  patchUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "rebaseable" })
  rebaseable?: boolean;

  @SpeakeasyMetadata({ elemType: SimpleUser })
  @Expose({ name: "requested_reviewers" })
  @Type(() => SimpleUser)
  requestedReviewers?: SimpleUser[];

  @SpeakeasyMetadata({ elemType: TeamSimple })
  @Expose({ name: "requested_teams" })
  @Type(() => TeamSimple)
  requestedTeams?: TeamSimple[];

  @SpeakeasyMetadata()
  @Expose({ name: "review_comment_url" })
  reviewCommentUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "review_comments" })
  reviewComments: number;

  @SpeakeasyMetadata()
  @Expose({ name: "review_comments_url" })
  reviewCommentsUrl: string;

  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: PullRequestStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statuses_url" })
  statusesUrl: string;

  /**
   * The title of the pull request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => NullableSimpleUser)
  user: NullableSimpleUser;
}
