"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AcceleratorConfigTypeEnum(str, Enum):
    r"""Required. Type of TPU."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    V2 = 'V2'
    V3 = 'V3'
    V4 = 'V4'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AcceleratorConfig:
    r"""A TPU accelerator configuration."""
    
    topology: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topology'), 'exclude': lambda f: f is None }})
    r"""Required. Topology of TPU in chips."""  
    type: Optional[AcceleratorConfigTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. Type of TPU."""  
    