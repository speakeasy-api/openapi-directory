// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateAsyncReportSecurity struct {
	BasicAuth shared.SchemeBasicAuth `security:"scheme,type=http,subtype=basic"`
}

type CreateAsyncReportRequestBodyType string

const (
	CreateAsyncReportRequestBodyTypeSms           CreateAsyncReportRequestBodyType = "SMS"
	CreateAsyncReportRequestBodyTypeVoiceCall     CreateAsyncReportRequestBodyType = "VOICE-CALL"
	CreateAsyncReportRequestBodyTypeInAppVoice    CreateAsyncReportRequestBodyType = "IN-APP-VOICE"
	CreateAsyncReportRequestBodyTypeWebsocketCall CreateAsyncReportRequestBodyType = "WEBSOCKET-CALL"
	CreateAsyncReportRequestBodyTypeVerifyAPI     CreateAsyncReportRequestBodyType = "VERIFY-API"
	CreateAsyncReportRequestBodyTypeNumberInsight CreateAsyncReportRequestBodyType = "NUMBER-INSIGHT"
	CreateAsyncReportRequestBodyTypeMessages      CreateAsyncReportRequestBodyType = "MESSAGES"
	CreateAsyncReportRequestBodyTypeConversations CreateAsyncReportRequestBodyType = "CONVERSATIONS"
	CreateAsyncReportRequestBodyTypeAsr           CreateAsyncReportRequestBodyType = "ASR"
)

type CreateAsyncReportRequestBody struct {
	Sms           *shared.Sms
	VoiceCall     *shared.VoiceCall
	InAppVoice    *shared.InAppVoice
	WebsocketCall *shared.WebsocketCall
	VerifyAPI     *shared.VerifyAPI
	NumberInsight *shared.NumberInsight
	Messages      *shared.Messages
	Conversations *shared.Conversations
	Asr           *shared.Asr

	Type CreateAsyncReportRequestBodyType
}

func CreateCreateAsyncReportRequestBodySms(sms shared.Sms) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeSms
	typStr := shared.ProductSmsEnum(typ)
	sms.Product = typStr

	return CreateAsyncReportRequestBody{
		Sms:  &sms,
		Type: typ,
	}
}

func CreateCreateAsyncReportRequestBodyVoiceCall(voiceCall shared.VoiceCall) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeVoiceCall
	typStr := shared.ProductVoiceEnum(typ)
	voiceCall.Product = typStr

	return CreateAsyncReportRequestBody{
		VoiceCall: &voiceCall,
		Type:      typ,
	}
}

func CreateCreateAsyncReportRequestBodyInAppVoice(inAppVoice shared.InAppVoice) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeInAppVoice
	typStr := shared.ProductInAppVoiceEnum(typ)
	inAppVoice.Product = typStr

	return CreateAsyncReportRequestBody{
		InAppVoice: &inAppVoice,
		Type:       typ,
	}
}

func CreateCreateAsyncReportRequestBodyWebsocketCall(websocketCall shared.WebsocketCall) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeWebsocketCall
	typStr := shared.ProductWebsocketEnum(typ)
	websocketCall.Product = typStr

	return CreateAsyncReportRequestBody{
		WebsocketCall: &websocketCall,
		Type:          typ,
	}
}

func CreateCreateAsyncReportRequestBodyVerifyAPI(verifyAPI shared.VerifyAPI) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeVerifyAPI
	typStr := shared.ProductVerifyEnum(typ)
	verifyAPI.Product = typStr

	return CreateAsyncReportRequestBody{
		VerifyAPI: &verifyAPI,
		Type:      typ,
	}
}

func CreateCreateAsyncReportRequestBodyNumberInsight(numberInsight shared.NumberInsight) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeNumberInsight
	typStr := shared.ProductNiEnum(typ)
	numberInsight.Product = typStr

	return CreateAsyncReportRequestBody{
		NumberInsight: &numberInsight,
		Type:          typ,
	}
}

func CreateCreateAsyncReportRequestBodyMessages(messages shared.Messages) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeMessages
	typStr := shared.ProductMessagesEnum(typ)
	messages.Product = typStr

	return CreateAsyncReportRequestBody{
		Messages: &messages,
		Type:     typ,
	}
}

func CreateCreateAsyncReportRequestBodyConversations(conversations shared.Conversations) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeConversations
	typStr := shared.ProductConversationsEnum(typ)
	conversations.Product = typStr

	return CreateAsyncReportRequestBody{
		Conversations: &conversations,
		Type:          typ,
	}
}

func CreateCreateAsyncReportRequestBodyAsr(asr shared.Asr) CreateAsyncReportRequestBody {
	typ := CreateAsyncReportRequestBodyTypeAsr
	typStr := shared.ProductAsrEnum(typ)
	asr.Product = typStr

	return CreateAsyncReportRequestBody{
		Asr:  &asr,
		Type: typ,
	}
}

func (u *CreateAsyncReportRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Product string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Product {
	case "SMS":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		sms := new(shared.Sms)
		if err := d.Decode(&sms); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.Sms = sms
		u.Type = CreateAsyncReportRequestBodyTypeSms
		return nil
	case "VOICE-CALL":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		voiceCall := new(shared.VoiceCall)
		if err := d.Decode(&voiceCall); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.VoiceCall = voiceCall
		u.Type = CreateAsyncReportRequestBodyTypeVoiceCall
		return nil
	case "IN-APP-VOICE":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		inAppVoice := new(shared.InAppVoice)
		if err := d.Decode(&inAppVoice); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.InAppVoice = inAppVoice
		u.Type = CreateAsyncReportRequestBodyTypeInAppVoice
		return nil
	case "WEBSOCKET-CALL":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		websocketCall := new(shared.WebsocketCall)
		if err := d.Decode(&websocketCall); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WebsocketCall = websocketCall
		u.Type = CreateAsyncReportRequestBodyTypeWebsocketCall
		return nil
	case "VERIFY-API":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		verifyAPI := new(shared.VerifyAPI)
		if err := d.Decode(&verifyAPI); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.VerifyAPI = verifyAPI
		u.Type = CreateAsyncReportRequestBodyTypeVerifyAPI
		return nil
	case "NUMBER-INSIGHT":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		numberInsight := new(shared.NumberInsight)
		if err := d.Decode(&numberInsight); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.NumberInsight = numberInsight
		u.Type = CreateAsyncReportRequestBodyTypeNumberInsight
		return nil
	case "MESSAGES":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		messages := new(shared.Messages)
		if err := d.Decode(&messages); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.Messages = messages
		u.Type = CreateAsyncReportRequestBodyTypeMessages
		return nil
	case "CONVERSATIONS":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		conversations := new(shared.Conversations)
		if err := d.Decode(&conversations); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.Conversations = conversations
		u.Type = CreateAsyncReportRequestBodyTypeConversations
		return nil
	case "ASR":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		asr := new(shared.Asr)
		if err := d.Decode(&asr); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.Asr = asr
		u.Type = CreateAsyncReportRequestBodyTypeAsr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateAsyncReportRequestBody) MarshalJSON() ([]byte, error) {
	if u.Sms != nil {
		return json.Marshal(u.Sms)
	}

	if u.VoiceCall != nil {
		return json.Marshal(u.VoiceCall)
	}

	if u.InAppVoice != nil {
		return json.Marshal(u.InAppVoice)
	}

	if u.WebsocketCall != nil {
		return json.Marshal(u.WebsocketCall)
	}

	if u.VerifyAPI != nil {
		return json.Marshal(u.VerifyAPI)
	}

	if u.NumberInsight != nil {
		return json.Marshal(u.NumberInsight)
	}

	if u.Messages != nil {
		return json.Marshal(u.Messages)
	}

	if u.Conversations != nil {
		return json.Marshal(u.Conversations)
	}

	if u.Asr != nil {
		return json.Marshal(u.Asr)
	}

	return nil, nil
}

type CreateAsyncReportRequest struct {
	// The parameters of the JSON body will be used to create and filter the report.<br> The value of the `product` field will define which product the report will be created for and which parameters are accepted.
	//
	Request  *CreateAsyncReportRequestBody `request:"mediaType=application/json"`
	Security CreateAsyncReportSecurity
}

// CreateAsyncReport422ApplicationJSON - Unprocessable entity
type CreateAsyncReport422ApplicationJSON struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// CreateAsyncReport403ApplicationJSON - Forbidden
type CreateAsyncReport403ApplicationJSON struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// CreateAsyncReport401ApplicationJSON - Unauthorized
type CreateAsyncReport401ApplicationJSON struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// CreateAsyncReport400ApplicationJSON - Bad Request
type CreateAsyncReport400ApplicationJSON struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

type CreateAsyncReport200ApplicationJSONType string

const (
	CreateAsyncReport200ApplicationJSONTypeSmsResponseCreateReport           CreateAsyncReport200ApplicationJSONType = "sms_response_create_report"
	CreateAsyncReport200ApplicationJSONTypeVoiceCallResponseCreateReport     CreateAsyncReport200ApplicationJSONType = "voice_call_response_create_report"
	CreateAsyncReport200ApplicationJSONTypeInAppVoiceResponseCreateReport    CreateAsyncReport200ApplicationJSONType = "in_app_voice_response_create_report"
	CreateAsyncReport200ApplicationJSONTypeWebsocketCallResponseCreateReport CreateAsyncReport200ApplicationJSONType = "websocket_call_response_create_report"
	CreateAsyncReport200ApplicationJSONTypeVerifyAPIResponseCreateReport     CreateAsyncReport200ApplicationJSONType = "verify_api_response_create_report"
	CreateAsyncReport200ApplicationJSONTypeNumberInsightResponseCreateReport CreateAsyncReport200ApplicationJSONType = "number_insight_response_create_report"
	CreateAsyncReport200ApplicationJSONTypeMessagesResponseCreateReport      CreateAsyncReport200ApplicationJSONType = "messages_response_create_report"
	CreateAsyncReport200ApplicationJSONTypeConversationsResponseCreateReport CreateAsyncReport200ApplicationJSONType = "conversations_response_create_report"
	CreateAsyncReport200ApplicationJSONTypeAsrResponseCreateReport           CreateAsyncReport200ApplicationJSONType = "asr_response_create_report"
)

type CreateAsyncReport200ApplicationJSON struct {
	SmsResponseCreateReport           *shared.SmsResponseCreateReport
	VoiceCallResponseCreateReport     *shared.VoiceCallResponseCreateReport
	InAppVoiceResponseCreateReport    *shared.InAppVoiceResponseCreateReport
	WebsocketCallResponseCreateReport *shared.WebsocketCallResponseCreateReport
	VerifyAPIResponseCreateReport     *shared.VerifyAPIResponseCreateReport
	NumberInsightResponseCreateReport *shared.NumberInsightResponseCreateReport
	MessagesResponseCreateReport      *shared.MessagesResponseCreateReport
	ConversationsResponseCreateReport *shared.ConversationsResponseCreateReport
	AsrResponseCreateReport           *shared.AsrResponseCreateReport

	Type CreateAsyncReport200ApplicationJSONType
}

func CreateCreateAsyncReport200ApplicationJSONSmsResponseCreateReport(smsResponseCreateReport shared.SmsResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeSmsResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		SmsResponseCreateReport: &smsResponseCreateReport,
		Type:                    typ,
	}
}

func CreateCreateAsyncReport200ApplicationJSONVoiceCallResponseCreateReport(voiceCallResponseCreateReport shared.VoiceCallResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeVoiceCallResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		VoiceCallResponseCreateReport: &voiceCallResponseCreateReport,
		Type:                          typ,
	}
}

func CreateCreateAsyncReport200ApplicationJSONInAppVoiceResponseCreateReport(inAppVoiceResponseCreateReport shared.InAppVoiceResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeInAppVoiceResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		InAppVoiceResponseCreateReport: &inAppVoiceResponseCreateReport,
		Type:                           typ,
	}
}

func CreateCreateAsyncReport200ApplicationJSONWebsocketCallResponseCreateReport(websocketCallResponseCreateReport shared.WebsocketCallResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeWebsocketCallResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		WebsocketCallResponseCreateReport: &websocketCallResponseCreateReport,
		Type:                              typ,
	}
}

func CreateCreateAsyncReport200ApplicationJSONVerifyAPIResponseCreateReport(verifyAPIResponseCreateReport shared.VerifyAPIResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeVerifyAPIResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		VerifyAPIResponseCreateReport: &verifyAPIResponseCreateReport,
		Type:                          typ,
	}
}

func CreateCreateAsyncReport200ApplicationJSONNumberInsightResponseCreateReport(numberInsightResponseCreateReport shared.NumberInsightResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeNumberInsightResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		NumberInsightResponseCreateReport: &numberInsightResponseCreateReport,
		Type:                              typ,
	}
}

func CreateCreateAsyncReport200ApplicationJSONMessagesResponseCreateReport(messagesResponseCreateReport shared.MessagesResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeMessagesResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		MessagesResponseCreateReport: &messagesResponseCreateReport,
		Type:                         typ,
	}
}

func CreateCreateAsyncReport200ApplicationJSONConversationsResponseCreateReport(conversationsResponseCreateReport shared.ConversationsResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeConversationsResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		ConversationsResponseCreateReport: &conversationsResponseCreateReport,
		Type:                              typ,
	}
}

func CreateCreateAsyncReport200ApplicationJSONAsrResponseCreateReport(asrResponseCreateReport shared.AsrResponseCreateReport) CreateAsyncReport200ApplicationJSON {
	typ := CreateAsyncReport200ApplicationJSONTypeAsrResponseCreateReport

	return CreateAsyncReport200ApplicationJSON{
		AsrResponseCreateReport: &asrResponseCreateReport,
		Type:                    typ,
	}
}

func (u *CreateAsyncReport200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	smsResponseCreateReport := new(shared.SmsResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&smsResponseCreateReport); err == nil {
		u.SmsResponseCreateReport = smsResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeSmsResponseCreateReport
		return nil
	}

	voiceCallResponseCreateReport := new(shared.VoiceCallResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&voiceCallResponseCreateReport); err == nil {
		u.VoiceCallResponseCreateReport = voiceCallResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeVoiceCallResponseCreateReport
		return nil
	}

	inAppVoiceResponseCreateReport := new(shared.InAppVoiceResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inAppVoiceResponseCreateReport); err == nil {
		u.InAppVoiceResponseCreateReport = inAppVoiceResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeInAppVoiceResponseCreateReport
		return nil
	}

	websocketCallResponseCreateReport := new(shared.WebsocketCallResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&websocketCallResponseCreateReport); err == nil {
		u.WebsocketCallResponseCreateReport = websocketCallResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeWebsocketCallResponseCreateReport
		return nil
	}

	verifyAPIResponseCreateReport := new(shared.VerifyAPIResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&verifyAPIResponseCreateReport); err == nil {
		u.VerifyAPIResponseCreateReport = verifyAPIResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeVerifyAPIResponseCreateReport
		return nil
	}

	numberInsightResponseCreateReport := new(shared.NumberInsightResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&numberInsightResponseCreateReport); err == nil {
		u.NumberInsightResponseCreateReport = numberInsightResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeNumberInsightResponseCreateReport
		return nil
	}

	messagesResponseCreateReport := new(shared.MessagesResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&messagesResponseCreateReport); err == nil {
		u.MessagesResponseCreateReport = messagesResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeMessagesResponseCreateReport
		return nil
	}

	conversationsResponseCreateReport := new(shared.ConversationsResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&conversationsResponseCreateReport); err == nil {
		u.ConversationsResponseCreateReport = conversationsResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeConversationsResponseCreateReport
		return nil
	}

	asrResponseCreateReport := new(shared.AsrResponseCreateReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&asrResponseCreateReport); err == nil {
		u.AsrResponseCreateReport = asrResponseCreateReport
		u.Type = CreateAsyncReport200ApplicationJSONTypeAsrResponseCreateReport
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateAsyncReport200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.SmsResponseCreateReport != nil {
		return json.Marshal(u.SmsResponseCreateReport)
	}

	if u.VoiceCallResponseCreateReport != nil {
		return json.Marshal(u.VoiceCallResponseCreateReport)
	}

	if u.InAppVoiceResponseCreateReport != nil {
		return json.Marshal(u.InAppVoiceResponseCreateReport)
	}

	if u.WebsocketCallResponseCreateReport != nil {
		return json.Marshal(u.WebsocketCallResponseCreateReport)
	}

	if u.VerifyAPIResponseCreateReport != nil {
		return json.Marshal(u.VerifyAPIResponseCreateReport)
	}

	if u.NumberInsightResponseCreateReport != nil {
		return json.Marshal(u.NumberInsightResponseCreateReport)
	}

	if u.MessagesResponseCreateReport != nil {
		return json.Marshal(u.MessagesResponseCreateReport)
	}

	if u.ConversationsResponseCreateReport != nil {
		return json.Marshal(u.ConversationsResponseCreateReport)
	}

	if u.AsrResponseCreateReport != nil {
		return json.Marshal(u.AsrResponseCreateReport)
	}

	return nil, nil
}

type CreateAsyncReportResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	CreateAsyncReport200ApplicationJSONOneOf *CreateAsyncReport200ApplicationJSON
	// Bad Request
	CreateAsyncReport400ApplicationJSONObject *CreateAsyncReport400ApplicationJSON
	// Unauthorized
	CreateAsyncReport401ApplicationJSONObject *CreateAsyncReport401ApplicationJSON
	// Forbidden
	CreateAsyncReport403ApplicationJSONObject *CreateAsyncReport403ApplicationJSON
	// Unprocessable entity
	CreateAsyncReport422ApplicationJSONObject *CreateAsyncReport422ApplicationJSON
}
