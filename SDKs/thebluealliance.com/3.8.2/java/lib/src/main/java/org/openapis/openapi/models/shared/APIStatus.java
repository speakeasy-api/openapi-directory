/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * APIStatus - Successful response
 */
public class APIStatus {
    @JsonProperty("android")
    public APIStatusAppVersion android;

    public APIStatus withAndroid(APIStatusAppVersion android) {
        this.android = android;
        return this;
    }
    
    /**
     * Year of the current FRC season.
     */
    @JsonProperty("current_season")
    public Long currentSeason;

    public APIStatus withCurrentSeason(Long currentSeason) {
        this.currentSeason = currentSeason;
        return this;
    }
    
    /**
     * An array of strings containing event keys of any active events that are no longer updating.
     */
    @JsonProperty("down_events")
    public String[] downEvents;

    public APIStatus withDownEvents(String[] downEvents) {
        this.downEvents = downEvents;
        return this;
    }
    
    @JsonProperty("ios")
    public APIStatusAppVersion ios;

    public APIStatus withIos(APIStatusAppVersion ios) {
        this.ios = ios;
        return this;
    }
    
    /**
     * True if the entire FMS API provided by FIRST is down.
     */
    @JsonProperty("is_datafeed_down")
    public Boolean isDatafeedDown;

    public APIStatus withIsDatafeedDown(Boolean isDatafeedDown) {
        this.isDatafeedDown = isDatafeedDown;
        return this;
    }
    
    /**
     * Maximum FRC season year for valid queries.
     */
    @JsonProperty("max_season")
    public Long maxSeason;

    public APIStatus withMaxSeason(Long maxSeason) {
        this.maxSeason = maxSeason;
        return this;
    }
    
    public APIStatus(@JsonProperty("android") APIStatusAppVersion android, @JsonProperty("current_season") Long currentSeason, @JsonProperty("down_events") String[] downEvents, @JsonProperty("ios") APIStatusAppVersion ios, @JsonProperty("is_datafeed_down") Boolean isDatafeedDown, @JsonProperty("max_season") Long maxSeason) {
        this.android = android;
        this.currentSeason = currentSeason;
        this.downEvents = downEvents;
        this.ios = ios;
        this.isDatafeedDown = isDatafeedDown;
        this.maxSeason = maxSeason;
  }
}
