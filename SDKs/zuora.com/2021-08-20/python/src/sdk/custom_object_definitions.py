"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomObjectDefinitions:
    r"""With Custom Objects service, you can define custom objects, extending the Zuora data model to accommodate your specific use cases.
    
    If you use Postman, you can import the custom objects endpoints as a collection into your Postman app and try out different requests to learn how the API works. Click the following button to get started:
    
    [![Run in Postman](https://run.pstmn.io/button.svg)](https://www.getpostman.com/run-collection/1f068ba43651bf63c0d4)
    
    You can sign up for a free account on the [Postman website](https://identity.getpostman.com/signup) and download the app in case you do not use Postman yet.
    
    Note that the Custom Object Definitions API is versioned by `Zuora-Version` in the request header. The response may be different for the same request with a different API version. Specify `Zuora-Version` in the request header if you expect a specific response schema.
    
    ### Error handling      
    If the Custom Objects API call fails, an error code will be returned in the response body. See [Custom Objects API error code](https://knowledgecenter.zuora.com/Central_Platform/Custom_Objects/Z_Custom_Objects_API#Custom_Objects_API_error_code) for details.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_custom_object_definition_by_type(self, request: operations.DeleteCustomObjectDefinitionByTypeRequest) -> operations.DeleteCustomObjectDefinitionByTypeResponse:
        r"""Delete a custom object definition
        Deletes the custom object definition for the provided type.
        
        **Note:** A custom object definition can only be deleted if no record of this custom object type exists.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomObjectDefinitionByTypeRequest, base_url, '/objects/definitions/default/{object}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomObjectDefinitionByTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                res.delete_custom_object_definition_by_type_200_application_json_uri_string = http_res.content

        return res

    def get_all_custom_object_definitions_in_namespace(self, request: operations.GETAllCustomObjectDefinitionsInNamespaceRequest) -> operations.GETAllCustomObjectDefinitionsInNamespaceResponse:
        r"""List custom object definitions
        Get all custom objects definitions for a given tenant. If you want to copy all the existing custom objects from an old tenant to a new tenant, you can call this operation in your old tenant and then use its response directly as the request of the [Create custom object definitions](https://www.zuora.com/developer/api-reference/#operation/POST_CustomObjectDefinitions) call in the new tenant to import all the custom objects from the old tenant.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/objects/definitions/default'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETAllCustomObjectDefinitionsInNamespaceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAllCustomObjectDefinitionsInNamespaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GETAllCustomObjectDefinitionsInNamespaceResponse])
                res.get_all_custom_object_definitions_in_namespace_response = out

        return res

    def get_custom_object_definition_by_type(self, request: operations.GETCustomObjectDefinitionByTypeRequest) -> operations.GETCustomObjectDefinitionByTypeResponse:
        r"""Retrieve a custom object definition
        Retrieves the custom object definition by type for the given tenant.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETCustomObjectDefinitionByTypeRequest, base_url, '/objects/definitions/default/{object}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCustomObjectDefinitionByTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomObjectDefinition])
                res.custom_object_definition = out
        elif http_res.status_code == 404:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonErrorResponse])
                res.common_error_response = out

        return res

    def post_custom_object_definitions(self, request: operations.POSTCustomObjectDefinitionsRequest) -> operations.POSTCustomObjectDefinitionsResponse:
        r"""Create custom object definitions
        You can post custom object definitions with the request body schema described below. 
        
        This operation also allows you to use the [List custom object definitions](https://www.zuora.com/developer/api-reference/#operation/GET_AllCustomObjectDefinitionsInNamespace) response schema as its request schema. If you want to copy all the existing custom objects from an old tenant to a new tenant, you can make a [List custom object definitions](https://www.zuora.com/developer/api-reference/#operation/GET_AllCustomObjectDefinitionsInNamespace) call in your old tenant and then use its response directly as the request of this operation in the new tenant to import all the custom objects from the old tenant.
        
        The `label` field is the UI label of the custom object. The `object` field contains the API Name of the custom object.
        
        ## Limitations 
        
        This custom object definition has the following limitations:
        
        * The maximum number of characters for the Custom Object API Name (`object`) is 64.
        * The maximum number of characters for the Custom Object Label (`label`) is	64.
        * The maximum number of characters for the Custom Object Description 250.
        * The maximum number of custom fields in an custom object	is 50.
        * The maximum number of characters for the custom field API name is	64.
        * The maximum number of characters for the custom field label (`label`) is	64.
        * The maximum number of characters for the custom field Description	is 250.
        * The maximum number of picklist options is 250.
        * The default maximum number of characters for the Text field is 512. You can configure the max length up to 4,096 characters when creating or updating the custom object definition via API.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/objects/definitions/default'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "post_custom_object_definitions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCustomObjectDefinitionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GETAllCustomObjectDefinitionsInNamespaceResponse])
                res.get_all_custom_object_definitions_in_namespace_response = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonErrorResponse])
                res.common_error_response = out

        return res

    def post_update_custom_object_definition(self, request: operations.POSTUpdateCustomObjectDefinitionRequest) -> operations.POSTUpdateCustomObjectDefinitionResponse:
        r"""Update a custom object definition
        Updates a custom object definition by posting migration resource to initiate the migration of definitions.
        
        ## Limitations 
        
        Updating custom field definition has the following limitations:
        
        * You can only have one action per update request.
        * You cannot delete fields from custom objects that contain records.
        * You can only add required fields to custom objects with no records.
        * You can change optional fields to required only on the custom objects with no records.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/objects/migrations'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "migration_update_custom_object_definitions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTUpdateCustomObjectDefinitionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MigrationUpdateCustomObjectDefinitionsResponse])
                res.migration_update_custom_object_definitions_response = out

        return res

    