<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_ALPHA_SENDER_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_BRAND_REGISTRATION_OTP_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_BRAND_REGISTRATIONS_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_BRAND_VETTING_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_EXTERNAL_CAMPAIGN_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_PHONE_NUMBER_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_SERVICE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_SHORT_CODE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const CREATE_US_APP_TO_PERSON_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const DELETE_ALPHA_SENDER_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const DELETE_DOMAIN_CERT_V4_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const DELETE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const DELETE_PHONE_NUMBER_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const DELETE_SERVICE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const DELETE_SHORT_CODE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const DELETE_US_APP_TO_PERSON_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_ALPHA_SENDER_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_BRAND_REGISTRATIONS_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_BRAND_VETTING_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_DEACTIVATION_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_DOMAIN_CERT_V4_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_DOMAIN_CONFIG_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_DOMAIN_CONFIG_MESSAGING_SERVICE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_PHONE_NUMBER_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_SERVICE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_SHORT_CODE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_US_APP_TO_PERSON_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_US_APP_TO_PERSON_USECASE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const FETCH_USECASE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const LIST_ALPHA_SENDER_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const LIST_BRAND_REGISTRATIONS_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const LIST_BRAND_VETTING_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const LIST_PHONE_NUMBER_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const LIST_SERVICE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const LIST_SHORT_CODE_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const LIST_US_APP_TO_PERSON_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const UPDATE_BRAND_REGISTRATIONS_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const UPDATE_DOMAIN_CERT_V4_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const UPDATE_DOMAIN_CONFIG_SERVERS = [
		'https://messaging.twilio.com',
	];
	
	public const UPDATE_SERVICE_SERVERS = [
		'https://messaging.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createAlphaSender
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlphaSenderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlphaSenderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAlphaSenderResponse
     */
	public function createAlphaSender(
        \OpenAPI\OpenAPI\Models\Operations\CreateAlphaSenderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAlphaSenderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAlphaSenderResponse
    {
        $baseUrl = SDK::CREATE_ALPHA_SENDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/AlphaSenders', \OpenAPI\OpenAPI\Models\Operations\CreateAlphaSenderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAlphaSenderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServiceAlphaSender = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServiceAlphaSender', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createBrandRegistrationOtp
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationOtpRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationOtpSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationOtpResponse
     */
	public function createBrandRegistrationOtp(
        \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationOtpRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationOtpSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationOtpResponse
    {
        $baseUrl = SDK::CREATE_BRAND_REGISTRATION_OTP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/a2p/BrandRegistrations/{BrandRegistrationSid}/SmsOtp', \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationOtpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationOtpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1BrandRegistrationsBrandRegistrationOtp = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1BrandRegistrationsBrandRegistrationOtp', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createBrandRegistrations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationsCreateBrandRegistrationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationsResponse
     */
	public function createBrandRegistrations(
        \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationsCreateBrandRegistrationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationsResponse
    {
        $baseUrl = SDK::CREATE_BRAND_REGISTRATIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/a2p/BrandRegistrations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBrandRegistrationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1BrandRegistrations = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1BrandRegistrations', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createBrandVetting
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBrandVettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBrandVettingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBrandVettingResponse
     */
	public function createBrandVetting(
        \OpenAPI\OpenAPI\Models\Operations\CreateBrandVettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBrandVettingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBrandVettingResponse
    {
        $baseUrl = SDK::CREATE_BRAND_VETTING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings', \OpenAPI\OpenAPI\Models\Operations\CreateBrandVettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBrandVettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1BrandRegistrationsBrandVetting = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1BrandRegistrationsBrandVetting', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createExternalCampaign
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateExternalCampaignCreateExternalCampaignRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateExternalCampaignSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateExternalCampaignResponse
     */
	public function createExternalCampaign(
        \OpenAPI\OpenAPI\Models\Operations\CreateExternalCampaignCreateExternalCampaignRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateExternalCampaignSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateExternalCampaignResponse
    {
        $baseUrl = SDK::CREATE_EXTERNAL_CAMPAIGN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/PreregisteredUsa2p');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateExternalCampaignResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ExternalCampaign = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ExternalCampaign', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createLinkshorteningMessagingService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLinkshorteningMessagingServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLinkshorteningMessagingServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLinkshorteningMessagingServiceResponse
     */
	public function createLinkshorteningMessagingService(
        \OpenAPI\OpenAPI\Models\Operations\CreateLinkshorteningMessagingServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateLinkshorteningMessagingServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLinkshorteningMessagingServiceResponse
    {
        $baseUrl = SDK::CREATE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LinkShortening/Domains/{DomainSid}/MessagingServices/{MessagingServiceSid}', \OpenAPI\OpenAPI\Models\Operations\CreateLinkshorteningMessagingServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLinkshorteningMessagingServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1LinkshorteningMessagingService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1LinkshorteningMessagingService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createPhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse
     */
	public function createPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse
    {
        $baseUrl = SDK::CREATE_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers', \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServicePhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServicePhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createShortCode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeResponse
     */
	public function createShortCode(
        \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeResponse
    {
        $baseUrl = SDK::CREATE_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes', \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServiceShortCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServiceShortCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUsAppToPerson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUsAppToPersonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUsAppToPersonSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUsAppToPersonResponse
     */
	public function createUsAppToPerson(
        \OpenAPI\OpenAPI\Models\Operations\CreateUsAppToPersonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUsAppToPersonSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUsAppToPersonResponse
    {
        $baseUrl = SDK::CREATE_US_APP_TO_PERSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p', \OpenAPI\OpenAPI\Models\Operations\CreateUsAppToPersonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUsAppToPersonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServiceUsAppToPerson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServiceUsAppToPerson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteAlphaSender
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlphaSenderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlphaSenderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAlphaSenderResponse
     */
	public function deleteAlphaSender(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlphaSenderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlphaSenderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAlphaSenderResponse
    {
        $baseUrl = SDK::DELETE_ALPHA_SENDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/AlphaSenders/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteAlphaSenderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAlphaSenderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteDomainCertV4
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDomainCertV4Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDomainCertV4Security $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDomainCertV4Response
     */
	public function deleteDomainCertV4(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDomainCertV4Request $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDomainCertV4Security $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDomainCertV4Response
    {
        $baseUrl = SDK::DELETE_DOMAIN_CERT_V4_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LinkShortening/Domains/{DomainSid}/Certificate', \OpenAPI\OpenAPI\Models\Operations\DeleteDomainCertV4Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDomainCertV4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteLinkshorteningMessagingService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteLinkshorteningMessagingServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteLinkshorteningMessagingServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteLinkshorteningMessagingServiceResponse
     */
	public function deleteLinkshorteningMessagingService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteLinkshorteningMessagingServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteLinkshorteningMessagingServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteLinkshorteningMessagingServiceResponse
    {
        $baseUrl = SDK::DELETE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LinkShortening/Domains/{DomainSid}/MessagingServices/{MessagingServiceSid}', \OpenAPI\OpenAPI\Models\Operations\DeleteLinkshorteningMessagingServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteLinkshorteningMessagingServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deletePhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse
     */
	public function deletePhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse
    {
        $baseUrl = SDK::DELETE_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteShortCode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeResponse
     */
	public function deleteShortCode(
        \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeResponse
    {
        $baseUrl = SDK::DELETE_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUsAppToPerson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsAppToPersonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsAppToPersonSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsAppToPersonResponse
     */
	public function deleteUsAppToPerson(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsAppToPersonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsAppToPersonSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsAppToPersonResponse
    {
        $baseUrl = SDK::DELETE_US_APP_TO_PERSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUsAppToPersonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsAppToPersonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchAlphaSender
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAlphaSenderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAlphaSenderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAlphaSenderResponse
     */
	public function fetchAlphaSender(
        \OpenAPI\OpenAPI\Models\Operations\FetchAlphaSenderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAlphaSenderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAlphaSenderResponse
    {
        $baseUrl = SDK::FETCH_ALPHA_SENDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/AlphaSenders/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchAlphaSenderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAlphaSenderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServiceAlphaSender = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServiceAlphaSender', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchBrandRegistrations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBrandRegistrationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBrandRegistrationsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchBrandRegistrationsResponse
     */
	public function fetchBrandRegistrations(
        \OpenAPI\OpenAPI\Models\Operations\FetchBrandRegistrationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchBrandRegistrationsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchBrandRegistrationsResponse
    {
        $baseUrl = SDK::FETCH_BRAND_REGISTRATIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/a2p/BrandRegistrations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchBrandRegistrationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchBrandRegistrationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1BrandRegistrations = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1BrandRegistrations', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchBrandVetting
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBrandVettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBrandVettingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchBrandVettingResponse
     */
	public function fetchBrandVetting(
        \OpenAPI\OpenAPI\Models\Operations\FetchBrandVettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchBrandVettingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchBrandVettingResponse
    {
        $baseUrl = SDK::FETCH_BRAND_VETTING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings/{BrandVettingSid}', \OpenAPI\OpenAPI\Models\Operations\FetchBrandVettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchBrandVettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1BrandRegistrationsBrandVetting = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1BrandRegistrationsBrandVetting', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a list of all United States numbers that have been deactivated on a specific date.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeactivationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeactivationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeactivationResponse
     */
	public function fetchDeactivation(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeactivationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeactivationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeactivationResponse
    {
        $baseUrl = SDK::FETCH_DEACTIVATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Deactivations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchDeactivationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeactivationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 307) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1Deactivation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1Deactivation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchDomainCertV4
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDomainCertV4Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDomainCertV4Security $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDomainCertV4Response
     */
	public function fetchDomainCertV4(
        \OpenAPI\OpenAPI\Models\Operations\FetchDomainCertV4Request $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDomainCertV4Security $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDomainCertV4Response
    {
        $baseUrl = SDK::FETCH_DOMAIN_CERT_V4_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LinkShortening/Domains/{DomainSid}/Certificate', \OpenAPI\OpenAPI\Models\Operations\FetchDomainCertV4Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDomainCertV4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1DomainCertV4 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1DomainCertV4', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchDomainConfig
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigResponse
     */
	public function fetchDomainConfig(
        \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigResponse
    {
        $baseUrl = SDK::FETCH_DOMAIN_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LinkShortening/Domains/{DomainSid}/Config', \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1DomainConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1DomainConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchDomainConfigMessagingService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigMessagingServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigMessagingServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigMessagingServiceResponse
     */
	public function fetchDomainConfigMessagingService(
        \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigMessagingServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigMessagingServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigMessagingServiceResponse
    {
        $baseUrl = SDK::FETCH_DOMAIN_CONFIG_MESSAGING_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LinkShortening/MessagingService/{MessagingServiceSid}/DomainConfig', \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigMessagingServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDomainConfigMessagingServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1DomainConfigMessagingService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1DomainConfigMessagingService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchPhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse
     */
	public function fetchPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse
    {
        $baseUrl = SDK::FETCH_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServicePhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServicePhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
     */
	public function fetchService(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchShortCode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse
     */
	public function fetchShortCode(
        \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse
    {
        $baseUrl = SDK::FETCH_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServiceShortCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServiceShortCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUsAppToPerson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonResponse
     */
	public function fetchUsAppToPerson(
        \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonResponse
    {
        $baseUrl = SDK::FETCH_US_APP_TO_PERSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServiceUsAppToPerson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServiceUsAppToPerson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUsAppToPersonUsecase
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseResponse
     */
	public function fetchUsAppToPersonUsecase(
        \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseResponse
    {
        $baseUrl = SDK::FETCH_US_APP_TO_PERSON_USECASE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/Usecases', \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUsAppToPersonUsecaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1ServiceUsAppToPersonUsecase = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1ServiceUsAppToPersonUsecase', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUsecase
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUsecaseSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUsecaseResponse
     */
	public function fetchUsecase(
        \OpenAPI\OpenAPI\Models\Operations\FetchUsecaseSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUsecaseResponse
    {
        $baseUrl = SDK::FETCH_USECASE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/Usecases');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUsecaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1Usecase = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1Usecase', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAlphaSender
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderResponse
     */
	public function listAlphaSender(
        \OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderResponse
    {
        $baseUrl = SDK::LIST_ALPHA_SENDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/AlphaSenders', \OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAlphaSenderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAlphaSenderListAlphaSenderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listBrandRegistrations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsResponse
     */
	public function listBrandRegistrations(
        \OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsResponse
    {
        $baseUrl = SDK::LIST_BRAND_REGISTRATIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/a2p/BrandRegistrations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBrandRegistrationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBrandRegistrationsListBrandRegistrationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listBrandVetting
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBrandVettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBrandVettingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBrandVettingResponse
     */
	public function listBrandVetting(
        \OpenAPI\OpenAPI\Models\Operations\ListBrandVettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBrandVettingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBrandVettingResponse
    {
        $baseUrl = SDK::LIST_BRAND_VETTING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings', \OpenAPI\OpenAPI\Models\Operations\ListBrandVettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBrandVettingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBrandVettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBrandVettingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBrandVettingListBrandVettingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listPhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse
     */
	public function listPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse
    {
        $baseUrl = SDK::LIST_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers', \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPhoneNumberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberListPhoneNumberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
     */
	public function listService(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
    {
        $baseUrl = SDK::LIST_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceListServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listShortCode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse
     */
	public function listShortCode(
        \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse
    {
        $baseUrl = SDK::LIST_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes', \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listShortCodeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListShortCodeListShortCodeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsAppToPerson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonResponse
     */
	public function listUsAppToPerson(
        \OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonResponse
    {
        $baseUrl = SDK::LIST_US_APP_TO_PERSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p', \OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsAppToPersonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsAppToPersonListUsAppToPersonResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateBrandRegistrations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBrandRegistrationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBrandRegistrationsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBrandRegistrationsResponse
     */
	public function updateBrandRegistrations(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBrandRegistrationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBrandRegistrationsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBrandRegistrationsResponse
    {
        $baseUrl = SDK::UPDATE_BRAND_REGISTRATIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/a2p/BrandRegistrations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateBrandRegistrationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBrandRegistrationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1BrandRegistrations = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1BrandRegistrations', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateDomainCertV4
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDomainCertV4Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDomainCertV4Security $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDomainCertV4Response
     */
	public function updateDomainCertV4(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDomainCertV4Request $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDomainCertV4Security $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDomainCertV4Response
    {
        $baseUrl = SDK::UPDATE_DOMAIN_CERT_V4_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LinkShortening/Domains/{DomainSid}/Certificate', \OpenAPI\OpenAPI\Models\Operations\UpdateDomainCertV4Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDomainCertV4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1DomainCertV4 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1DomainCertV4', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateDomainConfig
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDomainConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDomainConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDomainConfigResponse
     */
	public function updateDomainConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDomainConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDomainConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDomainConfigResponse
    {
        $baseUrl = SDK::UPDATE_DOMAIN_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LinkShortening/Domains/{DomainSid}/Config', \OpenAPI\OpenAPI\Models\Operations\UpdateDomainConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDomainConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1DomainConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1DomainConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
     */
	public function updateService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagingV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessagingV1Service', 'json');
            }
        }

        return $response;
    }
}