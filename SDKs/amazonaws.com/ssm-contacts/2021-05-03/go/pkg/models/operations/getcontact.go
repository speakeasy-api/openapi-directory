// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetContactXAmzTargetEnum
type GetContactXAmzTargetEnum string

const (
	GetContactXAmzTargetEnumSsmContactsGetContact GetContactXAmzTargetEnum = "SSMContacts.GetContact"
)

func (e *GetContactXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SSMContacts.GetContact":
		*e = GetContactXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContactXAmzTargetEnum: %s", s)
	}
}

type GetContactRequest struct {
	GetContactRequest shared.GetContactRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetContactXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetContactResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// DataEncryptionException
	DataEncryptionException interface{}
	// Success
	GetContactResult *shared.GetContactResult
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
