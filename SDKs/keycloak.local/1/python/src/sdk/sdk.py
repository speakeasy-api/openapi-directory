"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .attack_detection import AttackDetection
from .authentication_management import AuthenticationManagement
from .client_attribute_certificate import ClientAttributeCertificate
from .client_initial_access import ClientInitialAccess
from .client_registration_policy import ClientRegistrationPolicy
from .client_role_mappings import ClientRoleMappings
from .client_scopes import ClientScopes
from .clients import Clients
from .component import Component
from .groups import Groups
from .identity_providers import IdentityProviders
from .key import Key
from .protocol_mappers import ProtocolMappers
from .realms_admin import RealmsAdmin
from .role_mapper import RoleMapper
from .roles import Roles
from .roles_by_id_ import RolesByID
from .root import Root
from .scope_mappings import ScopeMappings
from .user_storage_provider import UserStorageProvider
from .users import Users
from sdk.models import shared

SERVERS = [
    "http://keycloak.local",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is a REST API reference for the Keycloak Admin
    https://github.com/keycloak/keycloak/tree/6.0.1/core/src/main/java/org/keycloak/representations - Schema source code
    """
    attack_detection: AttackDetection
    authentication_management: AuthenticationManagement
    client_attribute_certificate: ClientAttributeCertificate
    client_initial_access: ClientInitialAccess
    client_registration_policy: ClientRegistrationPolicy
    client_role_mappings: ClientRoleMappings
    client_scopes: ClientScopes
    clients: Clients
    component: Component
    groups: Groups
    identity_providers: IdentityProviders
    key: Key
    protocol_mappers: ProtocolMappers
    realms_admin: RealmsAdmin
    role_mapper: RoleMapper
    roles: Roles
    roles_by_id: RolesByID
    root: Root
    scope_mappings: ScopeMappings
    user_storage_provider: UserStorageProvider
    users: Users

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.attack_detection = AttackDetection(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.authentication_management = AuthenticationManagement(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.client_attribute_certificate = ClientAttributeCertificate(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.client_initial_access = ClientInitialAccess(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.client_registration_policy = ClientRegistrationPolicy(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.client_role_mappings = ClientRoleMappings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.client_scopes = ClientScopes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.clients = Clients(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.component = Component(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.groups = Groups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.identity_providers = IdentityProviders(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.key = Key(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.protocol_mappers = ProtocolMappers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.realms_admin = RealmsAdmin(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.role_mapper = RoleMapper(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.roles = Roles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.roles_by_id = RolesByID(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.root = Root(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.scope_mappings = ScopeMappings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.user_storage_provider = UserStorageProvider(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users = Users(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    