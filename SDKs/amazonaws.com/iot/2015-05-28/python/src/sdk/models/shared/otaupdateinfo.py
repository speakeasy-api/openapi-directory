"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import awsjobexecutionsrolloutconfig as shared_awsjobexecutionsrolloutconfig
from ..shared import awsjobpresignedurlconfig as shared_awsjobpresignedurlconfig
from ..shared import errorinfo as shared_errorinfo
from ..shared import otaupdatefile as shared_otaupdatefile
from ..shared import otaupdatestatus_enum as shared_otaupdatestatus_enum
from ..shared import protocol_enum as shared_protocol_enum
from ..shared import targetselection_enum as shared_targetselection_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OTAUpdateInfo:
    r"""Information about an OTA update."""
    
    additional_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalParameters'), 'exclude': lambda f: f is None }})  
    aws_iot_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsIotJobArn'), 'exclude': lambda f: f is None }})  
    aws_iot_job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsIotJobId'), 'exclude': lambda f: f is None }})  
    aws_job_executions_rollout_config: Optional[shared_awsjobexecutionsrolloutconfig.AwsJobExecutionsRolloutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsJobExecutionsRolloutConfig'), 'exclude': lambda f: f is None }})  
    aws_job_presigned_url_config: Optional[shared_awsjobpresignedurlconfig.AwsJobPresignedURLConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsJobPresignedUrlConfig'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    error_info: Optional[shared_errorinfo.ErrorInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorInfo'), 'exclude': lambda f: f is None }})  
    last_modified_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    ota_update_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otaUpdateArn'), 'exclude': lambda f: f is None }})  
    ota_update_files: Optional[list[shared_otaupdatefile.OTAUpdateFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otaUpdateFiles'), 'exclude': lambda f: f is None }})  
    ota_update_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otaUpdateId'), 'exclude': lambda f: f is None }})  
    ota_update_status: Optional[shared_otaupdatestatus_enum.OTAUpdateStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otaUpdateStatus'), 'exclude': lambda f: f is None }})  
    protocols: Optional[list[shared_protocol_enum.ProtocolEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocols'), 'exclude': lambda f: f is None }})  
    targets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets'), 'exclude': lambda f: f is None }})  
    target_selection: Optional[shared_targetselection_enum.TargetSelectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetSelection'), 'exclude': lambda f: f is None }})  
    