/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
 */
export enum DeleteV2LoggingLevelTargetTypeEnum {
  Default = "DEFAULT",
  ThingGroup = "THING_GROUP",
  ClientId = "CLIENT_ID",
  SourceIp = "SOURCE_IP",
  PrincipalId = "PRINCIPAL_ID",
}

export class DeleteV2LoggingLevelRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the resource for which you are configuring logging.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=targetName",
  })
  targetName: string;

  /**
   * The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=targetType",
  })
  targetType: DeleteV2LoggingLevelTargetTypeEnum;
}

export class DeleteV2LoggingLevelResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalException
   */
  @SpeakeasyMetadata()
  internalException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;
}
