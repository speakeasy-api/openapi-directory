/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The input structure for the InputConfig in a VectorEnrichmentJob.
 */
export class StartVectorEnrichmentJobRequestBodyInputConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DataSourceConfig" })
  @Type(() => shared.VectorEnrichmentJobDataSourceConfigInput)
  dataSourceConfig?: shared.VectorEnrichmentJobDataSourceConfigInput;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentType" })
  documentType?: shared.VectorEnrichmentJobDocumentTypeEnum;
}

/**
 * It contains configs such as ReverseGeocodingConfig and MapMatchingConfig.
 */
export class StartVectorEnrichmentJobRequestBodyJobConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "MapMatchingConfig" })
  @Type(() => shared.MapMatchingConfig)
  mapMatchingConfig?: shared.MapMatchingConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "ReverseGeocodingConfig" })
  @Type(() => shared.ReverseGeocodingConfig)
  reverseGeocodingConfig?: shared.ReverseGeocodingConfig;
}

export class StartVectorEnrichmentJobRequestBody extends SpeakeasyBase {
  /**
   * A unique token that guarantees that the call to this API is idempotent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClientToken" })
  clientToken?: string;

  /**
   * The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExecutionRoleArn" })
  executionRoleArn: string;

  /**
   * The input structure for the InputConfig in a VectorEnrichmentJob.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "InputConfig" })
  @Type(() => StartVectorEnrichmentJobRequestBodyInputConfig)
  inputConfig: StartVectorEnrichmentJobRequestBodyInputConfig;

  /**
   * It contains configs such as ReverseGeocodingConfig and MapMatchingConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "JobConfig" })
  @Type(() => StartVectorEnrichmentJobRequestBodyJobConfig)
  jobConfig: StartVectorEnrichmentJobRequestBodyJobConfig;

  /**
   * The Amazon Key Management Service (KMS) key ID for server-side encryption.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "KmsKeyId" })
  kmsKeyId?: string;

  /**
   * The name of the Vector Enrichment job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * Each tag consists of a key and a value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}

export class StartVectorEnrichmentJobRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartVectorEnrichmentJobRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class StartVectorEnrichmentJobResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startVectorEnrichmentJobOutput?: shared.StartVectorEnrichmentJobOutput;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
