// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssociateVirtualInterfaceXAmzTargetEnum
type AssociateVirtualInterfaceXAmzTargetEnum string

const (
	AssociateVirtualInterfaceXAmzTargetEnumOvertureServiceAssociateVirtualInterface AssociateVirtualInterfaceXAmzTargetEnum = "OvertureService.AssociateVirtualInterface"
)

func (e AssociateVirtualInterfaceXAmzTargetEnum) ToPointer() *AssociateVirtualInterfaceXAmzTargetEnum {
	return &e
}

func (e *AssociateVirtualInterfaceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OvertureService.AssociateVirtualInterface":
		*e = AssociateVirtualInterfaceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateVirtualInterfaceXAmzTargetEnum: %v", v)
	}
}

type AssociateVirtualInterfaceRequest struct {
	AssociateVirtualInterfaceRequest shared.AssociateVirtualInterfaceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                   *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                         *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                       AssociateVirtualInterfaceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AssociateVirtualInterfaceResponse struct {
	ContentType string
	// DirectConnectClientException
	DirectConnectClientException interface{}
	// DirectConnectServerException
	DirectConnectServerException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
	// Success
	VirtualInterface *shared.VirtualInterface
}
