"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddatalabelingv1beta1annotationmetadata as shared_googleclouddatalabelingv1beta1annotationmetadata
from ..shared import googleclouddatalabelingv1beta1annotationvalue as shared_googleclouddatalabelingv1beta1annotationvalue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum(str, Enum):
    r"""Output only. Sentiment for this annotation."""
    ANNOTATION_SENTIMENT_UNSPECIFIED = 'ANNOTATION_SENTIMENT_UNSPECIFIED'
    NEGATIVE = 'NEGATIVE'
    POSITIVE = 'POSITIVE'

class GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum(str, Enum):
    r"""Output only. The source of the annotation."""
    ANNOTATION_SOURCE_UNSPECIFIED = 'ANNOTATION_SOURCE_UNSPECIFIED'
    OPERATOR = 'OPERATOR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDatalabelingV1beta1Annotation:
    r"""Annotation for Example. Each example may have one or more annotations. For example in image classification problem, each image might have one or more labels. We call labels binded with this image an Annotation."""
    
    annotation_metadata: Optional[shared_googleclouddatalabelingv1beta1annotationmetadata.GoogleCloudDatalabelingV1beta1AnnotationMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationMetadata'), 'exclude': lambda f: f is None }})
    r"""Additional information associated with the annotation."""  
    annotation_sentiment: Optional[GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationSentiment'), 'exclude': lambda f: f is None }})
    r"""Output only. Sentiment for this annotation."""  
    annotation_source: Optional[GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationSource'), 'exclude': lambda f: f is None }})
    r"""Output only. The source of the annotation."""  
    annotation_value: Optional[shared_googleclouddatalabelingv1beta1annotationvalue.GoogleCloudDatalabelingV1beta1AnnotationValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationValue'), 'exclude': lambda f: f is None }})
    r"""Annotation value for an example."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Unique name of this annotation, format is: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset}/examples/{example_id}/annotations/{annotation_id}"""  
    