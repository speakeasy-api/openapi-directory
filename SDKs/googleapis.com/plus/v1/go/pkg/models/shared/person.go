// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// PersonAgeRange - The age range of the person. Valid ranges are 17 or younger, 18 to 20, and 21 or older. Age is determined from the user's birthday using Western age reckoning.
type PersonAgeRange struct {
	// The age range's upper bound, if any. Possible values include, but are not limited to, the following:
	// - "17" - for age 17
	// - "20" - for age 20
	Max *int `json:"max,omitempty"`
	// The age range's lower bound, if any. Possible values include, but are not limited to, the following:
	// - "21" - for age 21
	// - "18" - for age 18
	Min *int `json:"min,omitempty"`
}

// PersonCoverCoverInfo - Extra information about the cover photo.
type PersonCoverCoverInfo struct {
	// The difference between the left position of the cover image and the actual displayed cover image. Only valid for banner layout.
	LeftImageOffset *int `json:"leftImageOffset,omitempty"`
	// The difference between the top position of the cover image and the actual displayed cover image. Only valid for banner layout.
	TopImageOffset *int `json:"topImageOffset,omitempty"`
}

// PersonCoverCoverPhoto - The person's primary cover image.
type PersonCoverCoverPhoto struct {
	// The height of the image.
	Height *int `json:"height,omitempty"`
	// The URL of the image.
	URL *string `json:"url,omitempty"`
	// The width of the image.
	Width *int `json:"width,omitempty"`
}

// PersonCover - The cover photo content.
type PersonCover struct {
	// Extra information about the cover photo.
	CoverInfo *PersonCoverCoverInfo `json:"coverInfo,omitempty"`
	// The person's primary cover image.
	CoverPhoto *PersonCoverCoverPhoto `json:"coverPhoto,omitempty"`
	// The layout of the cover art. Possible values include, but are not limited to, the following values:
	// - "banner" - One large image banner.
	Layout *string `json:"layout,omitempty"`
}

type PersonEmails struct {
	// The type of address. Possible values include, but are not limited to, the following values:
	// - "account" - Google account email address.
	// - "home" - Home email address.
	// - "work" - Work email address.
	// - "other" - Other.
	Type *string `json:"type,omitempty"`
	// The email address.
	Value *string `json:"value,omitempty"`
}

// PersonImage - The representation of the person's profile photo.
type PersonImage struct {
	// Whether the person's profile photo is the default one
	IsDefault *bool `json:"isDefault,omitempty"`
	// The URL of the person's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
	URL *string `json:"url,omitempty"`
}

// PersonName - An object representation of the individual components of a person's name.
type PersonName struct {
	// The family name (last name) of this person.
	FamilyName *string `json:"familyName,omitempty"`
	// The full name of this person, including middle names, suffixes, etc.
	Formatted *string `json:"formatted,omitempty"`
	// The given name (first name) of this person.
	GivenName *string `json:"givenName,omitempty"`
	// The honorific prefixes (such as "Dr." or "Mrs.") for this person.
	HonorificPrefix *string `json:"honorificPrefix,omitempty"`
	// The honorific suffixes (such as "Jr.") for this person.
	HonorificSuffix *string `json:"honorificSuffix,omitempty"`
	// The middle name of this person.
	MiddleName *string `json:"middleName,omitempty"`
}

type PersonOrganizations struct {
	// The department within the organization. Deprecated.
	Department *string `json:"department,omitempty"`
	// A short description of the person's role in this organization. Deprecated.
	Description *string `json:"description,omitempty"`
	// The date that the person left this organization.
	EndDate *string `json:"endDate,omitempty"`
	// The location of this organization. Deprecated.
	Location *string `json:"location,omitempty"`
	// The name of the organization.
	Name *string `json:"name,omitempty"`
	// If "true", indicates this organization is the person's primary one, which is typically interpreted as the current one.
	Primary *bool `json:"primary,omitempty"`
	// The date that the person joined this organization.
	StartDate *string `json:"startDate,omitempty"`
	// The person's job title or role within the organization.
	Title *string `json:"title,omitempty"`
	// The type of organization. Possible values include, but are not limited to, the following values:
	// - "work" - Work.
	// - "school" - School.
	Type *string `json:"type,omitempty"`
}

type PersonPlacesLived struct {
	// If "true", this place of residence is this person's primary residence.
	Primary *bool `json:"primary,omitempty"`
	// A place where this person has lived. For example: "Seattle, WA", "Near Toronto".
	Value *string `json:"value,omitempty"`
}

type PersonUrls struct {
	// The label of the URL.
	Label *string `json:"label,omitempty"`
	// The type of URL. Possible values include, but are not limited to, the following values:
	// - "otherProfile" - URL for another profile.
	// - "contributor" - URL to a site for which this person is a contributor.
	// - "website" - URL for this Google+ Page's primary website.
	// - "other" - Other URL.
	Type *string `json:"type,omitempty"`
	// The URL value.
	Value *string `json:"value,omitempty"`
}

// Person - Successful response
type Person struct {
	// A short biography for this person.
	AboutMe *string `json:"aboutMe,omitempty"`
	// The age range of the person. Valid ranges are 17 or younger, 18 to 20, and 21 or older. Age is determined from the user's birthday using Western age reckoning.
	AgeRange *PersonAgeRange `json:"ageRange,omitempty"`
	// The person's date of birth, represented as YYYY-MM-DD.
	Birthday *string `json:"birthday,omitempty"`
	// The "bragging rights" line of this person.
	BraggingRights *string `json:"braggingRights,omitempty"`
	// For followers who are visible, the number of people who have added this person or page to a circle.
	CircledByCount *int `json:"circledByCount,omitempty"`
	// The cover photo content.
	Cover *PersonCover `json:"cover,omitempty"`
	// (this field is not currently used)
	CurrentLocation *string `json:"currentLocation,omitempty"`
	// The name of this person, which is suitable for display.
	DisplayName *string `json:"displayName,omitempty"`
	// The hosted domain name for the user's Google Apps account. For instance, example.com. The plus.profile.emails.read or email scope is needed to get this domain name.
	Domain *string `json:"domain,omitempty"`
	// A list of email addresses that this person has, including their Google account email address, and the public verified email addresses on their Google+ profile. The plus.profile.emails.read scope is needed to retrieve these email addresses, or the email scope can be used to retrieve just the Google account email address.
	Emails []PersonEmails `json:"emails,omitempty"`
	// ETag of this response for caching purposes.
	Etag *string `json:"etag,omitempty"`
	// The person's gender. Possible values include, but are not limited to, the following values:
	// - "male" - Male gender.
	// - "female" - Female gender.
	// - "other" - Other.
	Gender *string `json:"gender,omitempty"`
	// The ID of this person.
	ID *string `json:"id,omitempty"`
	// The representation of the person's profile photo.
	Image *PersonImage `json:"image,omitempty"`
	// Whether this user has signed up for Google+.
	IsPlusUser *bool `json:"isPlusUser,omitempty"`
	// Identifies this resource as a person. Value: "plus#person".
	Kind *string `json:"kind,omitempty"`
	// The user's preferred language for rendering.
	Language *string `json:"language,omitempty"`
	// An object representation of the individual components of a person's name.
	Name *PersonName `json:"name,omitempty"`
	// The nickname of this person.
	Nickname *string `json:"nickname,omitempty"`
	// Type of person within Google+. Possible values include, but are not limited to, the following values:
	// - "person" - represents an actual person.
	// - "page" - represents a page.
	ObjectType *string `json:"objectType,omitempty"`
	// The occupation of this person.
	Occupation *string `json:"occupation,omitempty"`
	// A list of current or past organizations with which this person is associated.
	Organizations []PersonOrganizations `json:"organizations,omitempty"`
	// A list of places where this person has lived.
	PlacesLived []PersonPlacesLived `json:"placesLived,omitempty"`
	// If a Google+ Page, the number of people who have +1'd this page.
	PlusOneCount *int `json:"plusOneCount,omitempty"`
	// The person's relationship status. Possible values include, but are not limited to, the following values:
	// - "single" - Person is single.
	// - "in_a_relationship" - Person is in a relationship.
	// - "engaged" - Person is engaged.
	// - "married" - Person is married.
	// - "its_complicated" - The relationship is complicated.
	// - "open_relationship" - Person is in an open relationship.
	// - "widowed" - Person is widowed.
	// - "in_domestic_partnership" - Person is in a domestic partnership.
	// - "in_civil_union" - Person is in a civil union.
	RelationshipStatus *string `json:"relationshipStatus,omitempty"`
	// The person's skills.
	Skills *string `json:"skills,omitempty"`
	// The brief description (tagline) of this person.
	Tagline *string `json:"tagline,omitempty"`
	// The URL of this person's profile.
	URL *string `json:"url,omitempty"`
	// A list of URLs for this person.
	Urls []PersonUrls `json:"urls,omitempty"`
	// Whether the person or Google+ Page has been verified.
	Verified *bool `json:"verified,omitempty"`
}
