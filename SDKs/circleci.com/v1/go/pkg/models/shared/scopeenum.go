// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScopeEnum string

const (
	ScopeEnumWriteSettings ScopeEnum = "write-settings"
	ScopeEnumViewBuilds    ScopeEnum = "view-builds"
	ScopeEnumReadSettings  ScopeEnum = "read-settings"
	ScopeEnumTriggerBuilds ScopeEnum = "trigger-builds"
	ScopeEnumAll           ScopeEnum = "all"
	ScopeEnumStatus        ScopeEnum = "status"
	ScopeEnumNone          ScopeEnum = "none"
)

func (e ScopeEnum) ToPointer() *ScopeEnum {
	return &e
}

func (e *ScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "write-settings":
		fallthrough
	case "view-builds":
		fallthrough
	case "read-settings":
		fallthrough
	case "trigger-builds":
		fallthrough
	case "all":
		fallthrough
	case "status":
		fallthrough
	case "none":
		*e = ScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScopeEnum: %v", v)
	}
}
