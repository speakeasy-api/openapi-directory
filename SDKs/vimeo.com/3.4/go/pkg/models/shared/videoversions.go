// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VideoVersionsMetadataConnectionsVideo - Data from video associated with version
type VideoVersionsMetadataConnectionsVideo struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type VideoVersionsMetadataConnections struct {
	// Data from video associated with version
	Video VideoVersionsMetadataConnectionsVideo `json:"video"`
}

// VideoVersionsMetadata - The video version's metadata.
type VideoVersionsMetadata struct {
	Connections VideoVersionsMetadataConnections `json:"connections"`
}

// VideoVersionsUploadApproachEnum - The approach for uploading the video.
type VideoVersionsUploadApproachEnum string

const (
	VideoVersionsUploadApproachEnumPost      VideoVersionsUploadApproachEnum = "post"
	VideoVersionsUploadApproachEnumPull      VideoVersionsUploadApproachEnum = "pull"
	VideoVersionsUploadApproachEnumStreaming VideoVersionsUploadApproachEnum = "streaming"
	VideoVersionsUploadApproachEnumTus       VideoVersionsUploadApproachEnum = "tus"
)

func (e *VideoVersionsUploadApproachEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "post":
		fallthrough
	case "pull":
		fallthrough
	case "streaming":
		fallthrough
	case "tus":
		*e = VideoVersionsUploadApproachEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoVersionsUploadApproachEnum: %s", s)
	}
}

// VideoVersionsUploadStatusEnum - The status code for the availability of the uploaded video:
//
// Option descriptions:
//   - `complete` - The upload is complete.
//   - `error` - The upload ended with an error.
//   - `in_progress` - The upload is underway.
type VideoVersionsUploadStatusEnum string

const (
	VideoVersionsUploadStatusEnumComplete   VideoVersionsUploadStatusEnum = "complete"
	VideoVersionsUploadStatusEnumError      VideoVersionsUploadStatusEnum = "error"
	VideoVersionsUploadStatusEnumInProgress VideoVersionsUploadStatusEnum = "in_progress"
)

func (e *VideoVersionsUploadStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "complete":
		fallthrough
	case "error":
		fallthrough
	case "in_progress":
		*e = VideoVersionsUploadStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoVersionsUploadStatusEnum: %s", s)
	}
}

// VideoVersionsUpload - The upload information for this version.
type VideoVersionsUpload struct {
	// The approach for uploading the video.
	Approach *VideoVersionsUploadApproachEnum `json:"approach,omitempty"`
	// The URI for completing the upload.
	CompleteURI *string `json:"complete_uri,omitempty"`
	// The HTML form for uploading a video through the post approach.
	Form *string `json:"form,omitempty"`
	// The link of the video to capture through the pull approach.
	Link *string `json:"link,omitempty"`
	// The redirect URL for the upload app.
	RedirectURL *string `json:"redirect_url,omitempty"`
	// The file size in bytes of the uploaded video.
	Size *float64 `json:"size,omitempty"`
	// The status code for the availability of the uploaded video:
	//
	// Option descriptions:
	//  * `complete` - The upload is complete.
	//  * `error` - The upload ended with an error.
	//  * `in_progress` - The upload is underway.
	//
	Status VideoVersionsUploadStatusEnum `json:"status"`
	// The link for sending video file data.
	UploadLink *string `json:"upload_link,omitempty"`
}

// VideoVersionsUserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type VideoVersionsUserAccountEnum string

const (
	VideoVersionsUserAccountEnumBasic        VideoVersionsUserAccountEnum = "basic"
	VideoVersionsUserAccountEnumBusiness     VideoVersionsUserAccountEnum = "business"
	VideoVersionsUserAccountEnumLiveBusiness VideoVersionsUserAccountEnum = "live_business"
	VideoVersionsUserAccountEnumLivePremium  VideoVersionsUserAccountEnum = "live_premium"
	VideoVersionsUserAccountEnumLivePro      VideoVersionsUserAccountEnum = "live_pro"
	VideoVersionsUserAccountEnumPlus         VideoVersionsUserAccountEnum = "plus"
	VideoVersionsUserAccountEnumPro          VideoVersionsUserAccountEnum = "pro"
	VideoVersionsUserAccountEnumProUnlimited VideoVersionsUserAccountEnum = "pro_unlimited"
	VideoVersionsUserAccountEnumProducer     VideoVersionsUserAccountEnum = "producer"
)

func (e *VideoVersionsUserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = VideoVersionsUserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoVersionsUserAccountEnum: %s", s)
	}
}

// VideoVersionsUserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type VideoVersionsUserContentFilterEnum string

const (
	VideoVersionsUserContentFilterEnumDrugs    VideoVersionsUserContentFilterEnum = "drugs"
	VideoVersionsUserContentFilterEnumLanguage VideoVersionsUserContentFilterEnum = "language"
	VideoVersionsUserContentFilterEnumNudity   VideoVersionsUserContentFilterEnum = "nudity"
	VideoVersionsUserContentFilterEnumSafe     VideoVersionsUserContentFilterEnum = "safe"
	VideoVersionsUserContentFilterEnumUnrated  VideoVersionsUserContentFilterEnum = "unrated"
	VideoVersionsUserContentFilterEnumViolence VideoVersionsUserContentFilterEnum = "violence"
)

func (e *VideoVersionsUserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = VideoVersionsUserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoVersionsUserContentFilterEnum: %s", s)
	}
}

// VideoVersionsUserMetadataConnectionsAlbums - Information about the albums created by this user.
type VideoVersionsUserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type VideoVersionsUserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type VideoVersionsUserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsCategories - Information about this user's followed categories.
type VideoVersionsUserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsChannels - Information about this user's subscribed channels.
type VideoVersionsUserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsFeed - Information about this user's feed.
type VideoVersionsUserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsFolders - Information about this user's folders.
type VideoVersionsUserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsFollowers - Information about the user's followers.
type VideoVersionsUserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsFollowing - Information about the users that the current user is following.
type VideoVersionsUserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsGroups - Information about the groups created by this user.
type VideoVersionsUserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsLikes - Information about the videos that this user has liked.
type VideoVersionsUserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type VideoVersionsUserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsPictures - Information about this user's portraits.
type VideoVersionsUserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsPortfolios - Information about this user's portfolios.
type VideoVersionsUserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type VideoVersionsUserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type VideoVersionsUserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type VideoVersionsUserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type VideoVersionsUserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type VideoVersionsUserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type VideoVersionsUserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataConnections - The list of resource URIs related to the user.
type VideoVersionsUserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums VideoVersionsUserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances VideoVersionsUserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block VideoVersionsUserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories VideoVersionsUserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels VideoVersionsUserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed VideoVersionsUserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders VideoVersionsUserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers VideoVersionsUserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following VideoVersionsUserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups VideoVersionsUserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes VideoVersionsUserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels VideoVersionsUserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures VideoVersionsUserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios VideoVersionsUserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels VideoVersionsUserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers VideoVersionsUserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared VideoVersionsUserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos VideoVersionsUserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos VideoVersionsUserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater VideoVersionsUserMetadataConnectionsWatchlater `json:"watchlater"`
}

type VideoVersionsUserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// VideoVersionsUserMetadataInteractionsBlock - Information related to the block status of this user.
type VideoVersionsUserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataInteractionsFollow - Information related to the followed status of this user.
type VideoVersionsUserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// VideoVersionsUserMetadataInteractionsReport - Information regarding where and how to report a user.
type VideoVersionsUserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type VideoVersionsUserMetadataInteractions struct {
	AddPrivacyUser *VideoVersionsUserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block VideoVersionsUserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow VideoVersionsUserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report VideoVersionsUserMetadataInteractionsReport `json:"report"`
}

// VideoVersionsUserMetadata - The user's metadata.
type VideoVersionsUserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  VideoVersionsUserMetadataConnections  `json:"connections"`
	Interactions VideoVersionsUserMetadataInteractions `json:"interactions"`
}

// VideoVersionsUserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type VideoVersionsUserPreferencesVideosPrivacyCommentsEnum string

const (
	VideoVersionsUserPreferencesVideosPrivacyCommentsEnumAnybody  VideoVersionsUserPreferencesVideosPrivacyCommentsEnum = "anybody"
	VideoVersionsUserPreferencesVideosPrivacyCommentsEnumContacts VideoVersionsUserPreferencesVideosPrivacyCommentsEnum = "contacts"
	VideoVersionsUserPreferencesVideosPrivacyCommentsEnumNobody   VideoVersionsUserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *VideoVersionsUserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = VideoVersionsUserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoVersionsUserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// VideoVersionsUserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type VideoVersionsUserPreferencesVideosPrivacyEmbedEnum string

const (
	VideoVersionsUserPreferencesVideosPrivacyEmbedEnumPrivate   VideoVersionsUserPreferencesVideosPrivacyEmbedEnum = "private"
	VideoVersionsUserPreferencesVideosPrivacyEmbedEnumPublic    VideoVersionsUserPreferencesVideosPrivacyEmbedEnum = "public"
	VideoVersionsUserPreferencesVideosPrivacyEmbedEnumWhitelist VideoVersionsUserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *VideoVersionsUserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = VideoVersionsUserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoVersionsUserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// VideoVersionsUserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type VideoVersionsUserPreferencesVideosPrivacyViewEnum string

const (
	VideoVersionsUserPreferencesVideosPrivacyViewEnumAnybody  VideoVersionsUserPreferencesVideosPrivacyViewEnum = "anybody"
	VideoVersionsUserPreferencesVideosPrivacyViewEnumContacts VideoVersionsUserPreferencesVideosPrivacyViewEnum = "contacts"
	VideoVersionsUserPreferencesVideosPrivacyViewEnumDisable  VideoVersionsUserPreferencesVideosPrivacyViewEnum = "disable"
	VideoVersionsUserPreferencesVideosPrivacyViewEnumNobody   VideoVersionsUserPreferencesVideosPrivacyViewEnum = "nobody"
	VideoVersionsUserPreferencesVideosPrivacyViewEnumPassword VideoVersionsUserPreferencesVideosPrivacyViewEnum = "password"
	VideoVersionsUserPreferencesVideosPrivacyViewEnumUnlisted VideoVersionsUserPreferencesVideosPrivacyViewEnum = "unlisted"
	VideoVersionsUserPreferencesVideosPrivacyViewEnumUsers    VideoVersionsUserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *VideoVersionsUserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = VideoVersionsUserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoVersionsUserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type VideoVersionsUserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *VideoVersionsUserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *VideoVersionsUserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *VideoVersionsUserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type VideoVersionsUserPreferencesVideos struct {
	Privacy *VideoVersionsUserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type VideoVersionsUserPreferences struct {
	Videos *VideoVersionsUserPreferencesVideos `json:"videos,omitempty"`
}

// VideoVersionsUserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type VideoVersionsUserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// VideoVersionsUserUploadQuotaPeriodic - Information about the user's usage for the current period.
type VideoVersionsUserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// VideoVersionsUserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type VideoVersionsUserUploadQuotaSpaceShowingEnum string

const (
	VideoVersionsUserUploadQuotaSpaceShowingEnumLifetime VideoVersionsUserUploadQuotaSpaceShowingEnum = "lifetime"
	VideoVersionsUserUploadQuotaSpaceShowingEnumPeriodic VideoVersionsUserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *VideoVersionsUserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = VideoVersionsUserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoVersionsUserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// VideoVersionsUserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type VideoVersionsUserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing VideoVersionsUserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// VideoVersionsUserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type VideoVersionsUserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime VideoVersionsUserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic VideoVersionsUserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space VideoVersionsUserUploadQuotaSpace `json:"space"`
}

type VideoVersionsUserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// VideoVersionsUser - The owner of the video version.
type VideoVersionsUser struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account VideoVersionsUserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *VideoVersionsUserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata VideoVersionsUserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture                       `json:"pictures"`
	Preferences *VideoVersionsUserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota VideoVersionsUserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []VideoVersionsUserWebsites `json:"websites"`
}

// VideoVersions - Standard request.
type VideoVersions struct {
	// Whether this video version is the currently active one.
	Active bool `json:"active"`
	// The API app associated with the video version.
	App APIApp `json:"app"`
	// The time in ISO 8601 for when the video version was created.
	CreatedTime string `json:"created_time"`
	// The duration of the video version in seconds.
	Duration float64 `json:"duration"`
	// The file name of the video version.
	Filename string `json:"filename"`
	// The size in byes of the video version file.
	Filesize float64 `json:"filesize"`
	// The video version's metadata.
	Metadata VideoVersionsMetadata `json:"metadata"`
	// The time in ISO 8601 format when the video version was last modified.
	ModifiedTime string `json:"modified_time"`
	// The Play representation.
	Play Play `json:"play"`
	// The upload information for this version.
	Upload VideoVersionsUpload `json:"upload"`
	// The time in ISO 8601 format when the video version was uploaded.
	UploadDate string `json:"upload_date"`
	// The version's canonical relative URI.
	URI string `json:"uri"`
	// The owner of the video version.
	User VideoVersionsUser `json:"user"`
}
