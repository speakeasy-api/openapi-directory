// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum - The file format name extension used to represent the geomark download.
type GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum string

const (
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumJSON    GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "json"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumXML     GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "xml"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumKml     GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "kml"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumKmz     GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "kmz"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumShp     GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "shp"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumShpz    GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "shpz"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumGeojson GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "geojson"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumGml     GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "gml"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumGpkg    GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "gpkg"
	GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnumWkt     GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum = "wkt"
)

func (e *GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "kmz":
		fallthrough
	case "shp":
		fallthrough
	case "shpz":
		fallthrough
	case "geojson":
		fallthrough
	case "gml":
		fallthrough
	case "gpkg":
		fallthrough
	case "wkt":
		*e = GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum: %s", s)
	}
}

type GetGeomarksGeomarkIDPointFileFormatExtensionPathParams struct {
	// The file format name extension used to represent the geomark download.
	FileFormatExtension GetGeomarksGeomarkIDPointFileFormatExtensionFileFormatExtensionEnum `pathParam:"style=simple,explode=false,name=fileFormatExtension"`
	// The unique identifier for the geomark.
	GeomarkID string `pathParam:"style=simple,explode=false,name=geomarkId"`
}

// GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum - The srid of the coordinate system the geometry should be converted to.
type GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum string

const (
	GetGeomarksGeomarkIDPointFileFormatExtensionSridEnumFourThousandThreeHundredAndTwentySix   GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum = "4326"
	GetGeomarksGeomarkIDPointFileFormatExtensionSridEnumThreeThousandAndFive                   GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum = "3005"
	GetGeomarksGeomarkIDPointFileFormatExtensionSridEnumThreeThousandEightHundredAndFiftySeven GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum = "3857"
	GetGeomarksGeomarkIDPointFileFormatExtensionSridEnumTwentySixThousandNineHundredAndSeven   GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum = "26907"
	GetGeomarksGeomarkIDPointFileFormatExtensionSridEnumTwentySixThousandNineHundredAndEight   GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum = "26908"
	GetGeomarksGeomarkIDPointFileFormatExtensionSridEnumTwentySixThousandNineHundredAndNine    GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum = "26909"
	GetGeomarksGeomarkIDPointFileFormatExtensionSridEnumTwentySixThousandNineHundredAndTen     GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum = "26910"
	GetGeomarksGeomarkIDPointFileFormatExtensionSridEnumTwentySixThousandNineHundredAndEleven  GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum = "26911"
)

func (e *GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "3005":
		fallthrough
	case "3857":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum: %s", s)
	}
}

type GetGeomarksGeomarkIDPointFileFormatExtensionQueryParams struct {
	// The srid of the coordinate system the geometry should be converted to.
	Srid *GetGeomarksGeomarkIDPointFileFormatExtensionSridEnum `queryParam:"style=form,explode=true,name=srid"`
}

type GetGeomarksGeomarkIDPointFileFormatExtensionRequest struct {
	PathParams  GetGeomarksGeomarkIDPointFileFormatExtensionPathParams
	QueryParams GetGeomarksGeomarkIDPointFileFormatExtensionQueryParams
}

type GetGeomarksGeomarkIDPointFileFormatExtensionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
