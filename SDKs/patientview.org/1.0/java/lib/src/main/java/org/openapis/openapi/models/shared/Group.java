/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Group {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address1")
    public String address1;

    public Group withAddress1(String address1) {
        this.address1 = address1;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address2")
    public String address2;

    public Group withAddress2(String address2) {
        this.address2 = address2;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address3")
    public String address3;

    public Group withAddress3(String address3) {
        this.address3 = address3;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childGroups")
    public Group[] childGroups;

    public Group withChildGroups(Group[] childGroups) {
        this.childGroups = childGroups;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;

    public Group withCode(String code) {
        this.code = code;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contactPoints")
    public ContactPoint[] contactPoints;

    public Group withContactPoints(ContactPoint[] contactPoints) {
        this.contactPoints = contactPoints;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;

    public Group withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fhirResourceId")
    public String fhirResourceId;

    public Group withFhirResourceId(String fhirResourceId) {
        this.fhirResourceId = fhirResourceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupFeatures")
    public GroupFeature[] groupFeatures;

    public Group withGroupFeatures(GroupFeature[] groupFeatures) {
        this.groupFeatures = groupFeatures;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupType")
    public Lookup groupType;

    public Group withGroupType(Lookup groupType) {
        this.groupType = groupType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public Group withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastImportDate")
    public OffsetDateTime lastImportDate;

    public Group withLastImportDate(OffsetDateTime lastImportDate) {
        this.lastImportDate = lastImportDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdate")
    public OffsetDateTime lastUpdate;

    public Group withLastUpdate(OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public Link[] links;

    public Group withLinks(Link[] links) {
        this.links = links;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    public Location[] locations;

    public Group withLocations(Location[] locations) {
        this.locations = locations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Group withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentGroups")
    public Group[] parentGroups;

    public Group withParentGroups(Group[] parentGroups) {
        this.parentGroups = parentGroups;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postcode")
    public String postcode;

    public Group withPostcode(String postcode) {
        this.postcode = postcode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sftpUser")
    public String sftpUser;

    public Group withSftpUser(String sftpUser) {
        this.sftpUser = sftpUser;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortName")
    public String shortName;

    public Group withShortName(String shortName) {
        this.shortName = shortName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visible")
    public Boolean visible;

    public Group withVisible(Boolean visible) {
        this.visible = visible;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibleToJoin")
    public Boolean visibleToJoin;

    public Group withVisibleToJoin(Boolean visibleToJoin) {
        this.visibleToJoin = visibleToJoin;
        return this;
    }
    
    public Group(){}
}
