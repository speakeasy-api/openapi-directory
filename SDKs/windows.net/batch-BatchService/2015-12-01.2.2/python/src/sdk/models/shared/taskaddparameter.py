"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import affinityinformation as shared_affinityinformation
from ..shared import environmentsetting as shared_environmentsetting
from ..shared import multiinstancesettings as shared_multiinstancesettings
from ..shared import resourcefile as shared_resourcefile
from ..shared import taskconstraints as shared_taskconstraints
from ..shared import taskdependencies as shared_taskdependencies
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaskAddParameter:
    r"""An Azure Batch task to add."""
    
    command_line: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commandLine') }})
    r"""Gets or sets the command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Gets or sets a string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters."""  
    affinity_info: Optional[shared_affinityinformation.AffinityInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affinityInfo'), 'exclude': lambda f: f is None }})
    r"""A locality hint that can be used by the Batch service to select a compute node on which to start a task."""  
    constraints: Optional[shared_taskconstraints.TaskConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraints'), 'exclude': lambda f: f is None }})
    r"""Constraints to apply to the Job Manager task."""  
    depends_on: Optional[shared_taskdependencies.TaskDependencies] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependsOn'), 'exclude': lambda f: f is None }})
    r"""Specifies any dependencies of a task.  Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a display name for the task."""  
    environment_settings: Optional[list[shared_environmentsetting.EnvironmentSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentSettings'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a list of environment variable settings for the task."""  
    multi_instance_settings: Optional[shared_multiinstancesettings.MultiInstanceSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiInstanceSettings'), 'exclude': lambda f: f is None }})
    r"""Information about the settings required for multi-instance task."""  
    resource_files: Optional[list[shared_resourcefile.ResourceFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceFiles'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a list of files that Batch will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed."""  
    run_elevated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runElevated'), 'exclude': lambda f: f is None }})
    r"""Gets or sets whether to run the task in elevated mode."""  
    