// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppAPITokensListSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type AppAPITokensListRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AppAPITokensList401ApplicationJSONErrorCodeEnum string

const (
	AppAPITokensList401ApplicationJSONErrorCodeEnumBadRequest          AppAPITokensList401ApplicationJSONErrorCodeEnum = "BadRequest"
	AppAPITokensList401ApplicationJSONErrorCodeEnumConflict            AppAPITokensList401ApplicationJSONErrorCodeEnum = "Conflict"
	AppAPITokensList401ApplicationJSONErrorCodeEnumNotAcceptable       AppAPITokensList401ApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppAPITokensList401ApplicationJSONErrorCodeEnumNotFound            AppAPITokensList401ApplicationJSONErrorCodeEnum = "NotFound"
	AppAPITokensList401ApplicationJSONErrorCodeEnumInternalServerError AppAPITokensList401ApplicationJSONErrorCodeEnum = "InternalServerError"
	AppAPITokensList401ApplicationJSONErrorCodeEnumUnauthorized        AppAPITokensList401ApplicationJSONErrorCodeEnum = "Unauthorized"
	AppAPITokensList401ApplicationJSONErrorCodeEnumTooManyRequests     AppAPITokensList401ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AppAPITokensList401ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppAPITokensList401ApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppAPITokensList401ApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AppAPITokensList401ApplicationJSONError struct {
	Code    AppAPITokensList401ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                          `json:"message"`
}

// AppAPITokensList401ApplicationJSON - Unauthorized
type AppAPITokensList401ApplicationJSON struct {
	Error AppAPITokensList401ApplicationJSONError `json:"error"`
}

type AppAPITokensList400ApplicationJSONErrorCodeEnum string

const (
	AppAPITokensList400ApplicationJSONErrorCodeEnumBadRequest          AppAPITokensList400ApplicationJSONErrorCodeEnum = "BadRequest"
	AppAPITokensList400ApplicationJSONErrorCodeEnumConflict            AppAPITokensList400ApplicationJSONErrorCodeEnum = "Conflict"
	AppAPITokensList400ApplicationJSONErrorCodeEnumNotAcceptable       AppAPITokensList400ApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppAPITokensList400ApplicationJSONErrorCodeEnumNotFound            AppAPITokensList400ApplicationJSONErrorCodeEnum = "NotFound"
	AppAPITokensList400ApplicationJSONErrorCodeEnumInternalServerError AppAPITokensList400ApplicationJSONErrorCodeEnum = "InternalServerError"
	AppAPITokensList400ApplicationJSONErrorCodeEnumUnauthorized        AppAPITokensList400ApplicationJSONErrorCodeEnum = "Unauthorized"
	AppAPITokensList400ApplicationJSONErrorCodeEnumTooManyRequests     AppAPITokensList400ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AppAPITokensList400ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppAPITokensList400ApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppAPITokensList400ApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AppAPITokensList400ApplicationJSONError struct {
	Code    AppAPITokensList400ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                          `json:"message"`
}

// AppAPITokensList400ApplicationJSON - Error
type AppAPITokensList400ApplicationJSON struct {
	Error AppAPITokensList400ApplicationJSONError `json:"error"`
}

type AppAPITokensList200ApplicationJSONScopeEnum string

const (
	AppAPITokensList200ApplicationJSONScopeEnumAll    AppAPITokensList200ApplicationJSONScopeEnum = "all"
	AppAPITokensList200ApplicationJSONScopeEnumViewer AppAPITokensList200ApplicationJSONScopeEnum = "viewer"
)

func (e *AppAPITokensList200ApplicationJSONScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "viewer":
		*e = AppAPITokensList200ApplicationJSONScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppAPITokensList200ApplicationJSONScopeEnum: %s", s)
	}
}

type AppAPITokensList200ApplicationJSON struct {
	// The creation time
	CreatedAt string `json:"created_at"`
	// The description of the token
	Description *string `json:"description,omitempty"`
	// The unique id (UUID) of the api token
	ID string `json:"id"`
	// The scope for this token.
	Scope []AppAPITokensList200ApplicationJSONScopeEnum `json:"scope,omitempty"`
}

type AppAPITokensListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppAPITokensList200ApplicationJSONObjects []AppAPITokensList200ApplicationJSON
	// Error
	AppAPITokensList400ApplicationJSONObject *AppAPITokensList400ApplicationJSON
	// Unauthorized
	AppAPITokensList401ApplicationJSONObject *AppAPITokensList401ApplicationJSON
}
