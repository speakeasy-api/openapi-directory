/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The BGP status.
 */
export enum CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfigurationBgpConfigurationsBgpStatusEnum {
  Up = "up",
  Down = "down",
}

/**
 * The BGP configuration information.
 */
export class CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfigurationBgpConfigurations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  bgpStatus?: CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfigurationBgpConfigurationsBgpStatusEnum;

  @SpeakeasyMetadata()
  peerAddress?: string;

  @SpeakeasyMetadata()
  peerAsn?: number;

  @SpeakeasyMetadata()
  transitGatewayAddress?: string;

  @SpeakeasyMetadata()
  transitGatewayAsn?: number;
}

/**
 * The tunnel protocol.
 */
export enum CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfigurationProtocolEnum {
  Gre = "gre",
}

/**
 * The Connect peer details.
 */
export class CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfigurationBgpConfigurations,
  })
  bgpConfigurations?: CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfigurationBgpConfigurations[];

  @SpeakeasyMetadata()
  insideCidrBlocks?: string[];

  @SpeakeasyMetadata()
  peerAddress?: string;

  @SpeakeasyMetadata()
  protocol?: CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfigurationProtocolEnum;

  @SpeakeasyMetadata()
  transitGatewayAddress?: string;
}

/**
 * The state of the Connect peer.
 */
export enum CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerStateEnum {
  Pending = "pending",
  Available = "available",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a tag.
 */
export class CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the Connect peer.
 */
export class CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeer extends SpeakeasyBase {
  @SpeakeasyMetadata()
  connectPeerConfiguration?: CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerConnectPeerConfiguration;

  @SpeakeasyMetadata()
  creationTime?: Date;

  @SpeakeasyMetadata()
  state?: CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerStateEnum;

  @SpeakeasyMetadata({
    elemType:
      CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerTags,
  })
  tags?: CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeerTags[];

  @SpeakeasyMetadata()
  transitGatewayAttachmentId?: string;

  @SpeakeasyMetadata()
  transitGatewayConnectPeerId?: string;
}

/**
 * Success
 */
export class CreateTransitGatewayConnectPeerResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  transitGatewayConnectPeer?: CreateTransitGatewayConnectPeerResultTransitGatewayConnectPeer;
}
