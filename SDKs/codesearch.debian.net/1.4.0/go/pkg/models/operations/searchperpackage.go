// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SearchperpackageSecurity struct {
	APIKey shared.SchemeAPIKey `security:"scheme,type=apiKey,subtype=header"`
}

// SearchperpackageMatchModeEnum - Whether the query is to be interpreted as a literal (`literal`) instead of as an RE2 regular expression (`regexp`). Literal searches are faster and do not require escaping special characters, regular expression searches are more powerful.
type SearchperpackageMatchModeEnum string

const (
	SearchperpackageMatchModeEnumLiteral SearchperpackageMatchModeEnum = "literal"
	SearchperpackageMatchModeEnumRegexp  SearchperpackageMatchModeEnum = "regexp"
)

func (e *SearchperpackageMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "literal":
		fallthrough
	case "regexp":
		*e = SearchperpackageMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchperpackageMatchModeEnum: %s", s)
	}
}

type SearchperpackageQueryParams struct {
	// Whether the query is to be interpreted as a literal (`literal`) instead of as an RE2 regular expression (`regexp`). Literal searches are faster and do not require escaping special characters, regular expression searches are more powerful.
	MatchMode *SearchperpackageMatchModeEnum `queryParam:"style=form,explode=true,name=match_mode"`
	// The search query, for example `who knows...` (literal) or `who knows\.\.\.` (regular expression). See https://codesearch.debian.net/faq for more details about which keywords are supported. The regular expression flavor is RE2, see https://github.com/google/re2/blob/master/doc/syntax.txt
	Query string `queryParam:"style=form,explode=true,name=query"`
}

type SearchperpackageRequest struct {
	QueryParams SearchperpackageQueryParams
	Security    SearchperpackageSecurity
}

type SearchperpackageResponse struct {
	ContentType string
	// All search results
	PackageSearchResults []shared.PackageSearchResult
	StatusCode           int
	RawResponse          *http.Response
}
