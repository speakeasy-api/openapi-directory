/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class PriceTables {
	
    /**
	 * GETRULESFORAPRICETABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] GETRULESFORAPRICETABLE_SERVERS = {
        "https://api.vtex.com/{account}/pricing",
    };
	
    /**
	 * LISTPRICETABLES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LISTPRICETABLES_SERVERS = {
        "https://api.vtex.com/{account}/pricing",
    };
	
    /**
	 * GETALLPRICETABLESANDRULES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] GETALLPRICETABLESANDRULES_SERVERS = {
        "https://api.vtex.com/{account}/pricing",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public PriceTables(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get rules for a price table
     * This method will retrieve the rules from a specific Price Table.
     * 
     * ## Response body example
     * 
     * ```json
     * {
     *     "tradePolicyId": "b2c",
     *     "rules": [{
     *         "id": 0,
     *         "context": {
     *             "categories": {},
     *             "brands": {
     *                 "2000009": "Whiskas"
     *             },
     *             "stockStatuses": null,
     *             "internalCategories": null,
     *             "markupRange": null,
     *             "dateRange": null
     *         },
     *         "percentualModifier": 15
     *     }]
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetrulesforapricetableResponse getrulesforapricetable(org.openapis.openapi.models.operations.GetrulesforapricetableRequest request) throws Exception {
        return this.getrulesforapricetable(request, null);
    }

    /**
     * Get rules for a price table
     * This method will retrieve the rules from a specific Price Table.
     * 
     * ## Response body example
     * 
     * ```json
     * {
     *     "tradePolicyId": "b2c",
     *     "rules": [{
     *         "id": 0,
     *         "context": {
     *             "categories": {},
     *             "brands": {
     *                 "2000009": "Whiskas"
     *             },
     *             "stockStatuses": null,
     *             "internalCategories": null,
     *             "markupRange": null,
     *             "dateRange": null
     *         },
     *         "percentualModifier": 15
     *     }]
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetrulesforapricetableResponse getrulesforapricetable(org.openapis.openapi.models.operations.GetrulesforapricetableRequest request, String serverURL) throws Exception {
        String baseUrl = GETRULESFORAPRICETABLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetrulesforapricetableRequest.class, baseUrl, "/pricing/pipeline/catalog/{priceTableId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetrulesforapricetableResponse res = new org.openapis.openapi.models.operations.GetrulesforapricetableResponse(contentType, httpRes.statusCode()) {{
            getrulesforapricetable200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Getrulesforapricetable200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Getrulesforapricetable200ApplicationJSON.class);
                res.getrulesforapricetable200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 429) {
        }

        return res;
    }

    /**
     * List price tables
     * This method will list all price tables.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     "1",
     *     "2",
     *     "3",
     *     "b2c",
     *     "b2b",
     *     "gold"
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListpricetablesResponse listpricetables(org.openapis.openapi.models.operations.ListpricetablesRequest request) throws Exception {
        return this.listpricetables(request, null);
    }

    /**
     * List price tables
     * This method will list all price tables.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     "1",
     *     "2",
     *     "3",
     *     "b2c",
     *     "b2b",
     *     "gold"
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListpricetablesResponse listpricetables(org.openapis.openapi.models.operations.ListpricetablesRequest request, String serverURL) throws Exception {
        String baseUrl = LISTPRICETABLES_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/pricing/tables");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListpricetablesResponse res = new org.openapis.openapi.models.operations.ListpricetablesResponse(contentType, httpRes.statusCode()) {{
            listpricetables200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.listpricetables200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    /**
     * Get all price tables and their rules
     * This method will retrieve all price tables and their rules.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "tradePolicyId": "2",
     *         "rules": [
     *             {
     *                 "id": 0,
     *                 "context": {
     *                     "categories": {},
     *                     "brands": {},
     *                     "stockStatuses": null,
     *                     "internalCategories": null,
     *                     "markupRange": null,
     *                     "dateRange": null
     *                 },
     *                 "percentualModifier": 20
     *             }
     *         ]
     *     },
     *     {
     *         "tradePolicyId": "b2c",
     *         "rules": [
     *             {
     *                 "id": 0,
     *                 "context": {
     *                     "categories": {},
     *                     "brands": {
     *                         "2000009": "Whiskas"
     *                     },
     *                     "stockStatuses": null,
     *                     "internalCategories": null,
     *                     "markupRange": null,
     *                     "dateRange": null
     *                 },
     *                 "percentualModifier": 15
     *             }
     *         ]
     *     }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetallpricetablesandrulesResponse getallpricetablesandrules(org.openapis.openapi.models.operations.GetallpricetablesandrulesRequest request) throws Exception {
        return this.getallpricetablesandrules(request, null);
    }

    /**
     * Get all price tables and their rules
     * This method will retrieve all price tables and their rules.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "tradePolicyId": "2",
     *         "rules": [
     *             {
     *                 "id": 0,
     *                 "context": {
     *                     "categories": {},
     *                     "brands": {},
     *                     "stockStatuses": null,
     *                     "internalCategories": null,
     *                     "markupRange": null,
     *                     "dateRange": null
     *                 },
     *                 "percentualModifier": 20
     *             }
     *         ]
     *     },
     *     {
     *         "tradePolicyId": "b2c",
     *         "rules": [
     *             {
     *                 "id": 0,
     *                 "context": {
     *                     "categories": {},
     *                     "brands": {
     *                         "2000009": "Whiskas"
     *                     },
     *                     "stockStatuses": null,
     *                     "internalCategories": null,
     *                     "markupRange": null,
     *                     "dateRange": null
     *                 },
     *                 "percentualModifier": 15
     *             }
     *         ]
     *     }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetallpricetablesandrulesResponse getallpricetablesandrules(org.openapis.openapi.models.operations.GetallpricetablesandrulesRequest request, String serverURL) throws Exception {
        String baseUrl = GETALLPRICETABLESANDRULES_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/pricing/pipeline/catalog");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetallpricetablesandrulesResponse res = new org.openapis.openapi.models.operations.GetallpricetablesandrulesResponse(contentType, httpRes.statusCode()) {{
            getallpricetablesandrules200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Getallpricetablesandrules200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Getallpricetablesandrules200ApplicationJSON[].class);
                res.getallpricetablesandrules200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Update rules for a price table
     * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.
     * 
     * ## Request body example
     * 
     * ```json
     * {
     *     "rules": [
     *           {
     *                "id": 1,
     *                "context": {
     *                     "categories": {
     *                          "Category ID": "1",
     *                          "Category Name": "Alimentação"
     *                     },
     *                     "brands": {
     *                          "Brand ID": "2000002",
     *                          "Brand Name": "Whiskas"
     *                     },
     *                     "markupRange": {
     *                          "from": 0,
     *                          "to": 200
     *                     },
     *                     "dateRange": {
     *                          "from": "2022-01-23T19:00:00.000Z",
     *                          "to": "2023-10-26T00:00:00.000Z"
     *                     }
     *                },
     *                "percentualModifier": 0
     *           }
     *     ]
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutPricingPipelineCatalogPriceTableIdResponse putPricingPipelineCatalogPriceTableId(org.openapis.openapi.models.operations.PutPricingPipelineCatalogPriceTableIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutPricingPipelineCatalogPriceTableIdRequest.class, baseUrl, "/pricing/pipeline/catalog/{priceTableId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutPricingPipelineCatalogPriceTableIdResponse res = new org.openapis.openapi.models.operations.PutPricingPipelineCatalogPriceTableIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
        }

        return res;
    }
}