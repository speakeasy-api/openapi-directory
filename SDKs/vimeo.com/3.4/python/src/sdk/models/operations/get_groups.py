"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import group as shared_group
from enum import Enum
from typing import Optional

class GetGroupsDirectionEnum(str, Enum):
    r"""The sort direction of the results."""
    ASC = 'asc'
    DESC = 'desc'

class GetGroupsFilterEnum(str, Enum):
    r"""The attribute by which to filter the results."""
    FEATURED = 'featured'

class GetGroupsSortEnum(str, Enum):
    r"""The way to sort the results.
    
    Option descriptions:
     * `relevant` - Relevant sorting is available only for search queries.
    """
    ALPHABETICAL = 'alphabetical'
    DATE = 'date'
    FOLLOWERS = 'followers'
    RELEVANT = 'relevant'
    VIDEOS = 'videos'


@dataclasses.dataclass
class GetGroupsRequest:
    
    direction: Optional[GetGroupsDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The sort direction of the results."""  
    filter: Optional[GetGroupsFilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""The attribute by which to filter the results."""  
    page: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The page number of the results to show."""  
    per_page: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of items to show on each page of results, up to a maximum of 100."""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""The search query to use to filter the results."""  
    sort: Optional[GetGroupsSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The way to sort the results.
    
    Option descriptions:
     * `relevant` - Relevant sorting is available only for search queries.
    """  
    

@dataclasses.dataclass
class GetGroupsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    groups: Optional[list[shared_group.Group]] = dataclasses.field(default=None)
    r"""The groups were returned."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    