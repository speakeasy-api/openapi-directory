"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ordermoneyamounts as shared_ordermoneyamounts
from ..shared import orderreturndiscount as shared_orderreturndiscount
from ..shared import orderreturnlineitem as shared_orderreturnlineitem
from ..shared import orderreturnservicecharge as shared_orderreturnservicecharge
from ..shared import orderreturntax as shared_orderreturntax
from ..shared import orderroundingadjustment as shared_orderroundingadjustment
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderReturn:
    r"""The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order."""
    
    return_amounts: Optional[shared_ordermoneyamounts.OrderMoneyAmounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_amounts'), 'exclude': lambda f: f is None }})
    r"""A collection of various money amounts."""  
    return_discounts: Optional[list[shared_orderreturndiscount.OrderReturnDiscount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_discounts'), 'exclude': lambda f: f is None }})
    r"""A collection of references to discounts being returned for an order, including the total
    applied discount amount to be returned. The discounts must reference a top-level discount ID
    from the source order.
    """  
    return_line_items: Optional[list[shared_orderreturnlineitem.OrderReturnLineItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_line_items'), 'exclude': lambda f: f is None }})
    r"""A collection of line items that are being returned."""  
    return_service_charges: Optional[list[shared_orderreturnservicecharge.OrderReturnServiceCharge]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_service_charges'), 'exclude': lambda f: f is None }})
    r"""A collection of service charges that are being returned."""  
    return_taxes: Optional[list[shared_orderreturntax.OrderReturnTax]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_taxes'), 'exclude': lambda f: f is None }})
    r"""A collection of references to taxes being returned for an order, including the total
    applied tax amount to be returned. The taxes must reference a top-level tax ID from the source
    order.
    """  
    rounding_adjustment: Optional[shared_orderroundingadjustment.OrderRoundingAdjustment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rounding_adjustment'), 'exclude': lambda f: f is None }})
    r"""A rounding adjustment of the money being returned. Commonly used to apply cash rounding
    when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
    """  
    source_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_order_id'), 'exclude': lambda f: f is None }})
    r"""An order that contains the original sale of these return line items. This is unset
    for unlinked returns.
    """  
    uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uid'), 'exclude': lambda f: f is None }})
    r"""A unique ID that identifies the return only within this order."""  
    