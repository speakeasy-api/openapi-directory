// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ProblemType string

const (
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsOperationalDisconnect     ProblemType = "https://api.twitter.com/labs/1/problems/operational-disconnect"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsInvalidRequest            ProblemType = "https://api.twitter.com/labs/1/problems/invalid-request"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsNotAuthorizedForResource  ProblemType = "https://api.twitter.com/labs/1/problems/not-authorized-for-resource"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsDisallowedResource        ProblemType = "https://api.twitter.com/labs/1/problems/disallowed-resource"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsDuplicateRules            ProblemType = "https://api.twitter.com/labs/1/problems/duplicate-rules"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsResourceNotFound          ProblemType = "https://api.twitter.com/labs/1/problems/resource-not-found"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsRuleCap                   ProblemType = "https://api.twitter.com/labs/1/problems/rule-cap"
	ProblemTypeAboutBlank                                               ProblemType = "about:blank"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsInvalidRules              ProblemType = "https://api.twitter.com/labs/1/problems/invalid-rules"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsUnsupportedAuthentication ProblemType = "https://api.twitter.com/labs/1/problems/unsupported-authentication"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsUsageCapped               ProblemType = "https://api.twitter.com/labs/1/problems/usage-capped"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsClientDisconnected        ProblemType = "https://api.twitter.com/labs/1/problems/client-disconnected"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsClientForbidden           ProblemType = "https://api.twitter.com/labs/1/problems/client-forbidden"
	ProblemTypeHTTPSAPITwitterComLabs1ProblemsStreamingConnection       ProblemType = "https://api.twitter.com/labs/1/problems/streaming-connection"
)

type Problem struct {
	GenericProblem                   *GenericProblem
	InvalidRequestProblem            *InvalidRequestProblem
	ClientForbiddenProblem           *ClientForbiddenProblem
	ResourceNotFoundProblem          *ResourceNotFoundProblem
	ResourceUnauthorizedProblem      *ResourceUnauthorizedProblem
	DisallowedResourceProblem        *DisallowedResourceProblem
	UnsupportedAuthenticationProblem *UnsupportedAuthenticationProblem
	UsageCapExceededProblem          *UsageCapExceededProblem
	ConnectionExceptionProblem       *ConnectionExceptionProblem
	ClientDisconnectedProblem        *ClientDisconnectedProblem
	OperationalDisconnectProblem     *OperationalDisconnectProblem
	RulesCapProblem                  *RulesCapProblem
	InvalidRuleProblem               *InvalidRuleProblem
	DuplicateRuleProblem             *DuplicateRuleProblem

	Type ProblemType
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsOperationalDisconnect(httpsAPITwitterComLabs1ProblemsOperationalDisconnect OperationalDisconnectProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsOperationalDisconnect
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsOperationalDisconnect.Type = typStr

	return Problem{
		OperationalDisconnectProblem: &httpsAPITwitterComLabs1ProblemsOperationalDisconnect,
		Type:                         typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsInvalidRequest(httpsAPITwitterComLabs1ProblemsInvalidRequest InvalidRequestProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsInvalidRequest
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsInvalidRequest.Type = typStr

	return Problem{
		InvalidRequestProblem: &httpsAPITwitterComLabs1ProblemsInvalidRequest,
		Type:                  typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsNotAuthorizedForResource(httpsAPITwitterComLabs1ProblemsNotAuthorizedForResource ResourceUnauthorizedProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsNotAuthorizedForResource
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsNotAuthorizedForResource.Type = typStr

	return Problem{
		ResourceUnauthorizedProblem: &httpsAPITwitterComLabs1ProblemsNotAuthorizedForResource,
		Type:                        typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsDisallowedResource(httpsAPITwitterComLabs1ProblemsDisallowedResource DisallowedResourceProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsDisallowedResource
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsDisallowedResource.Type = typStr

	return Problem{
		DisallowedResourceProblem: &httpsAPITwitterComLabs1ProblemsDisallowedResource,
		Type:                      typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsDuplicateRules(httpsAPITwitterComLabs1ProblemsDuplicateRules DuplicateRuleProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsDuplicateRules
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsDuplicateRules.Type = typStr

	return Problem{
		DuplicateRuleProblem: &httpsAPITwitterComLabs1ProblemsDuplicateRules,
		Type:                 typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsResourceNotFound(httpsAPITwitterComLabs1ProblemsResourceNotFound ResourceNotFoundProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsResourceNotFound
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsResourceNotFound.Type = typStr

	return Problem{
		ResourceNotFoundProblem: &httpsAPITwitterComLabs1ProblemsResourceNotFound,
		Type:                    typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsRuleCap(httpsAPITwitterComLabs1ProblemsRuleCap RulesCapProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsRuleCap
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsRuleCap.Type = typStr

	return Problem{
		RulesCapProblem: &httpsAPITwitterComLabs1ProblemsRuleCap,
		Type:            typ,
	}
}

func CreateProblemAboutBlank(aboutBlank GenericProblem) Problem {
	typ := ProblemTypeAboutBlank
	typStr := string(typ)
	aboutBlank.Type = typStr

	return Problem{
		GenericProblem: &aboutBlank,
		Type:           typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsInvalidRules(httpsAPITwitterComLabs1ProblemsInvalidRules InvalidRuleProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsInvalidRules
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsInvalidRules.Type = typStr

	return Problem{
		InvalidRuleProblem: &httpsAPITwitterComLabs1ProblemsInvalidRules,
		Type:               typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsUnsupportedAuthentication(httpsAPITwitterComLabs1ProblemsUnsupportedAuthentication UnsupportedAuthenticationProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsUnsupportedAuthentication
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsUnsupportedAuthentication.Type = typStr

	return Problem{
		UnsupportedAuthenticationProblem: &httpsAPITwitterComLabs1ProblemsUnsupportedAuthentication,
		Type:                             typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsUsageCapped(httpsAPITwitterComLabs1ProblemsUsageCapped UsageCapExceededProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsUsageCapped
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsUsageCapped.Type = typStr

	return Problem{
		UsageCapExceededProblem: &httpsAPITwitterComLabs1ProblemsUsageCapped,
		Type:                    typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsClientDisconnected(httpsAPITwitterComLabs1ProblemsClientDisconnected ClientDisconnectedProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsClientDisconnected
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsClientDisconnected.Type = typStr

	return Problem{
		ClientDisconnectedProblem: &httpsAPITwitterComLabs1ProblemsClientDisconnected,
		Type:                      typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsClientForbidden(httpsAPITwitterComLabs1ProblemsClientForbidden ClientForbiddenProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsClientForbidden
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsClientForbidden.Type = typStr

	return Problem{
		ClientForbiddenProblem: &httpsAPITwitterComLabs1ProblemsClientForbidden,
		Type:                   typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs1ProblemsStreamingConnection(httpsAPITwitterComLabs1ProblemsStreamingConnection ConnectionExceptionProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs1ProblemsStreamingConnection
	typStr := string(typ)
	httpsAPITwitterComLabs1ProblemsStreamingConnection.Type = typStr

	return Problem{
		ConnectionExceptionProblem: &httpsAPITwitterComLabs1ProblemsStreamingConnection,
		Type:                       typ,
	}
}

func (u *Problem) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "https://api.twitter.com/labs/1/problems/operational-disconnect":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		operationalDisconnectProblem := new(OperationalDisconnectProblem)
		if err := d.Decode(&operationalDisconnectProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.OperationalDisconnectProblem = operationalDisconnectProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsOperationalDisconnect
		return nil
	case "https://api.twitter.com/labs/1/problems/invalid-request":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		invalidRequestProblem := new(InvalidRequestProblem)
		if err := d.Decode(&invalidRequestProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.InvalidRequestProblem = invalidRequestProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsInvalidRequest
		return nil
	case "https://api.twitter.com/labs/1/problems/not-authorized-for-resource":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		resourceUnauthorizedProblem := new(ResourceUnauthorizedProblem)
		if err := d.Decode(&resourceUnauthorizedProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ResourceUnauthorizedProblem = resourceUnauthorizedProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsNotAuthorizedForResource
		return nil
	case "https://api.twitter.com/labs/1/problems/disallowed-resource":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		disallowedResourceProblem := new(DisallowedResourceProblem)
		if err := d.Decode(&disallowedResourceProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DisallowedResourceProblem = disallowedResourceProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsDisallowedResource
		return nil
	case "https://api.twitter.com/labs/1/problems/duplicate-rules":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		duplicateRuleProblem := new(DuplicateRuleProblem)
		if err := d.Decode(&duplicateRuleProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DuplicateRuleProblem = duplicateRuleProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsDuplicateRules
		return nil
	case "https://api.twitter.com/labs/1/problems/resource-not-found":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		resourceNotFoundProblem := new(ResourceNotFoundProblem)
		if err := d.Decode(&resourceNotFoundProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ResourceNotFoundProblem = resourceNotFoundProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsResourceNotFound
		return nil
	case "https://api.twitter.com/labs/1/problems/rule-cap":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		rulesCapProblem := new(RulesCapProblem)
		if err := d.Decode(&rulesCapProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.RulesCapProblem = rulesCapProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsRuleCap
		return nil
	case "about:blank":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		genericProblem := new(GenericProblem)
		if err := d.Decode(&genericProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GenericProblem = genericProblem
		u.Type = ProblemTypeAboutBlank
		return nil
	case "https://api.twitter.com/labs/1/problems/invalid-rules":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		invalidRuleProblem := new(InvalidRuleProblem)
		if err := d.Decode(&invalidRuleProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.InvalidRuleProblem = invalidRuleProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsInvalidRules
		return nil
	case "https://api.twitter.com/labs/1/problems/unsupported-authentication":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		unsupportedAuthenticationProblem := new(UnsupportedAuthenticationProblem)
		if err := d.Decode(&unsupportedAuthenticationProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UnsupportedAuthenticationProblem = unsupportedAuthenticationProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsUnsupportedAuthentication
		return nil
	case "https://api.twitter.com/labs/1/problems/usage-capped":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		usageCapExceededProblem := new(UsageCapExceededProblem)
		if err := d.Decode(&usageCapExceededProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UsageCapExceededProblem = usageCapExceededProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsUsageCapped
		return nil
	case "https://api.twitter.com/labs/1/problems/client-disconnected":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		clientDisconnectedProblem := new(ClientDisconnectedProblem)
		if err := d.Decode(&clientDisconnectedProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ClientDisconnectedProblem = clientDisconnectedProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsClientDisconnected
		return nil
	case "https://api.twitter.com/labs/1/problems/client-forbidden":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		clientForbiddenProblem := new(ClientForbiddenProblem)
		if err := d.Decode(&clientForbiddenProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ClientForbiddenProblem = clientForbiddenProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsClientForbidden
		return nil
	case "https://api.twitter.com/labs/1/problems/streaming-connection":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		connectionExceptionProblem := new(ConnectionExceptionProblem)
		if err := d.Decode(&connectionExceptionProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionExceptionProblem = connectionExceptionProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs1ProblemsStreamingConnection
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Problem) MarshalJSON() ([]byte, error) {
	if u.GenericProblem != nil {
		return json.Marshal(u.GenericProblem)
	}

	if u.InvalidRequestProblem != nil {
		return json.Marshal(u.InvalidRequestProblem)
	}

	if u.ClientForbiddenProblem != nil {
		return json.Marshal(u.ClientForbiddenProblem)
	}

	if u.ResourceNotFoundProblem != nil {
		return json.Marshal(u.ResourceNotFoundProblem)
	}

	if u.ResourceUnauthorizedProblem != nil {
		return json.Marshal(u.ResourceUnauthorizedProblem)
	}

	if u.DisallowedResourceProblem != nil {
		return json.Marshal(u.DisallowedResourceProblem)
	}

	if u.UnsupportedAuthenticationProblem != nil {
		return json.Marshal(u.UnsupportedAuthenticationProblem)
	}

	if u.UsageCapExceededProblem != nil {
		return json.Marshal(u.UsageCapExceededProblem)
	}

	if u.ConnectionExceptionProblem != nil {
		return json.Marshal(u.ConnectionExceptionProblem)
	}

	if u.ClientDisconnectedProblem != nil {
		return json.Marshal(u.ClientDisconnectedProblem)
	}

	if u.OperationalDisconnectProblem != nil {
		return json.Marshal(u.OperationalDisconnectProblem)
	}

	if u.RulesCapProblem != nil {
		return json.Marshal(u.RulesCapProblem)
	}

	if u.InvalidRuleProblem != nil {
		return json.Marshal(u.InvalidRuleProblem)
	}

	if u.DuplicateRuleProblem != nil {
		return json.Marshal(u.DuplicateRuleProblem)
	}

	return nil, nil
}
