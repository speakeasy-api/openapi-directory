<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AppPkgm 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     * 
     * Reads the content of the AppD of on-boarded individual application package resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppDGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppDGETResponse
     */
	public function appDGET(
        \OpenAPI\OpenAPI\Models\Operations\AppDGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppDGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/onboarded_app_packages/{appDId}/appd', \OpenAPI\OpenAPI\Models\Operations\AppDGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppDGETRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppDGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/zip')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->appD = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * 
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppDIdGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppDIdGETResponse
     */
	public function appDIdGET(
        \OpenAPI\OpenAPI\Models\Operations\AppDIdGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppDIdGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/onboarded_app_packages/{appDId}/package_content', \OpenAPI\OpenAPI\Models\Operations\AppDIdGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppDIdGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206 or $httpResponse->getStatusCode() === 416) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads the content of application package.
     * 
     * Uploads the content of application package.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppDIdPUTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppDIdPUTResponse
     */
	public function appDIdPUT(
        \OpenAPI\OpenAPI\Models\Operations\AppDIdPUTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppDIdPUTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/onboarded_app_packages/{appDId}/package_content', \OpenAPI\OpenAPI\Models\Operations\AppDIdPUTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppDIdPUTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * 
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppPkgGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppPkgGETResponse
     */
	public function appPkgGET(
        \OpenAPI\OpenAPI\Models\Operations\AppPkgGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppPkgGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app_packages/{appPkgId}/package_content', \OpenAPI\OpenAPI\Models\Operations\AppPkgGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppPkgGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206 or $httpResponse->getStatusCode() === 416) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     * 
     * Reads the content of the AppD of on-boarded individual application package resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppPkgIdGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppPkgIdGETResponse
     */
	public function appPkgIdGET(
        \OpenAPI\OpenAPI\Models\Operations\AppPkgIdGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppPkgIdGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app_packages/{appPkgId}/appd', \OpenAPI\OpenAPI\Models\Operations\AppPkgIdGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppPkgIdGETRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppPkgIdGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/zip')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->appD = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads the content of application package.
     * 
     * Uploads the content of application package.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppPkgPUTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppPkgPUTResponse
     */
	public function appPkgPUT(
        \OpenAPI\OpenAPI\Models\Operations\AppPkgPUTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppPkgPUTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app_packages/{appPkgId}/package_content', \OpenAPI\OpenAPI\Models\Operations\AppPkgPUTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppPkgPUTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an individual application package resources
     * 
     * Deletes an individual application package resources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppPackageDELETERequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppPackageDELETEResponse
     */
	public function appPackageDELETE(
        \OpenAPI\OpenAPI\Models\Operations\AppPackageDELETERequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppPackageDELETEResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app_packages/{appPkgId}', \OpenAPI\OpenAPI\Models\Operations\AppPackageDELETERequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppPackageDELETEResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Queries the information related to individual application package resources
     * 
     * Queries the information related to individual application package resources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppPackageGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppPackageGETResponse
     */
	public function appPackageGET(
        \OpenAPI\OpenAPI\Models\Operations\AppPackageGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppPackageGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app_packages/{appPkgId}', \OpenAPI\OpenAPI\Models\Operations\AppPackageGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppPackageGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appPkgInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppPkgInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the operational state of an individual application package resource
     * 
     * Updates the operational state of an individual application package resources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppPackagePATCHRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppPackagePATCHResponse
     */
	public function appPackagePATCH(
        \OpenAPI\OpenAPI\Models\Operations\AppPackagePATCHRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppPackagePATCHResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app_packages/{appPkgId}', \OpenAPI\OpenAPI\Models\Operations\AppPackagePATCHRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "appPkgInfoModifications", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppPackagePATCHResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appPkgInfoModifications = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppPkgInfoModifications', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Queries information relating to on-boarded application packages in the MEO
     * 
     * queries information relating to on-boarded application packages in the MEO
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppPackagesGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppPackagesGETResponse
     */
	public function appPackagesGET(
        \OpenAPI\OpenAPI\Models\Operations\AppPackagesGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppPackagesGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app_packages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppPackagesGETRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppPackagesGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appPkgInfos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AppPkgInfo>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a resource for on-boarding an application package to a MEO
     * 
     * Create a resource for on-boarding an application package to a MEO
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateAppPkg $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppPackagesPOSTResponse
     */
	public function appPackagesPOST(
        \OpenAPI\OpenAPI\Models\Shared\CreateAppPkg $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppPackagesPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app_packages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppPackagesPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appPkgInfos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AppPkgInfo>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * 
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionDELETERequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionDELETEResponse
     */
	public function individualSubscriptionDELETE(
        \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionDELETERequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionDELETEResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{subscriptionId}', \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionDELETERequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionDELETEResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Used to represent an individual subscription to notifications about application package changes.
     * 
     * Used to represent an individual subscription to notifications about application package changes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionGETResponse
     */
	public function individualSubscriptionGET(
        \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{subscriptionId}', \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IndividualSubscriptionGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appPkgSubscriptionInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppPkgSubscriptionInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * used to retrieve the information of subscriptions to individual application package resource in MEO
     * 
     * used to retrieve the information of subscriptions to individual application package resource in MEO package
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsGETResponse
     */
	public function subscriptionsGET(
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appPkgSubscriptionLinkList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppPkgSubscriptionLinkList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subscribe to notifications about on-boarding an application package
     * 
     * Subscribe to notifications about on-boarding an application package
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AppPkgSubscription $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsPOSTResponse
     */
	public function subscriptionsPOST(
        \OpenAPI\OpenAPI\Models\Shared\AppPkgSubscription $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appPkgSubscriptionInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppPkgSubscriptionInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetails', 'json');
            }
        }

        return $response;
    }
}