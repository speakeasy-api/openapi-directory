<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Firewalls 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified firewall.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteResponse
     */
	public function computeFirewallsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewalls/{firewall}', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified firewall.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetResponse
     */
	public function computeFirewallsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewalls/{firewall}', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewall = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Firewall', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a firewall rule in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertResponse
     */
	public function computeFirewallsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewalls', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewall", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of firewall rules available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListResponse
     */
	public function computeFirewallsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewalls', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchResponse
     */
	public function computeFirewallsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewalls/{firewall}', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewall1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateResponse
     */
	public function computeFirewallsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewalls/{firewall}', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewall1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}