/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TestInvokeAuthorizerRequestBody {
    /**
     * Specifies the HTTP context to use for the test authorizer request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpContext")
    public TestInvokeAuthorizerRequestBodyHttpContext httpContext;

    public TestInvokeAuthorizerRequestBody withHttpContext(TestInvokeAuthorizerRequestBodyHttpContext httpContext) {
        this.httpContext = httpContext;
        return this;
    }
    
    /**
     * Specifies the MQTT context to use for the test authorizer request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mqttContext")
    public TestInvokeAuthorizerRequestBodyMqttContext mqttContext;

    public TestInvokeAuthorizerRequestBody withMqttContext(TestInvokeAuthorizerRequestBodyMqttContext mqttContext) {
        this.mqttContext = mqttContext;
        return this;
    }
    
    /**
     * Specifies the TLS context to use for the test authorizer request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsContext")
    public TestInvokeAuthorizerRequestBodyTlsContext tlsContext;

    public TestInvokeAuthorizerRequestBody withTlsContext(TestInvokeAuthorizerRequestBodyTlsContext tlsContext) {
        this.tlsContext = tlsContext;
        return this;
    }
    
    /**
     * The token returned by your custom authentication service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    public String token;

    public TestInvokeAuthorizerRequestBody withToken(String token) {
        this.token = token;
        return this;
    }
    
    /**
     * The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenSignature")
    public String tokenSignature;

    public TestInvokeAuthorizerRequestBody withTokenSignature(String tokenSignature) {
        this.tokenSignature = tokenSignature;
        return this;
    }
    
    public TestInvokeAuthorizerRequestBody(){}
}
