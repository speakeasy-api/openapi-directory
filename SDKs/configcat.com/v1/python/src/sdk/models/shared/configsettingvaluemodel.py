"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import integrationlinkmodel as shared_integrationlinkmodel
from ..shared import rolloutpercentageitemmodel as shared_rolloutpercentageitemmodel
from ..shared import rolloutrulemodel as shared_rolloutrulemodel
from ..shared import settingdatamodel as shared_settingdatamodel
from ..shared import settingtagmodel as shared_settingtagmodel
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigSettingValueModel:
    
    integration_links: Optional[list[shared_integrationlinkmodel.IntegrationLinkModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrationLinks'), 'exclude': lambda f: f is None }})  
    last_updater_user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdaterUserEmail'), 'exclude': lambda f: f is None }})  
    last_updater_user_full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdaterUserFullName'), 'exclude': lambda f: f is None }})  
    rollout_percentage_items: Optional[list[shared_rolloutpercentageitemmodel.RolloutPercentageItemModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rolloutPercentageItems'), 'exclude': lambda f: f is None }})
    r"""The percentage rule collection."""  
    rollout_rules: Optional[list[shared_rolloutrulemodel.RolloutRuleModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rolloutRules'), 'exclude': lambda f: f is None }})
    r"""The targeting rule collection."""  
    setting: Optional[shared_settingdatamodel.SettingDataModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setting'), 'exclude': lambda f: f is None }})  
    setting_tags: Optional[list[shared_settingtagmodel.SettingTagModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settingTags'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The value to serve. It must respect the setting type."""  
    