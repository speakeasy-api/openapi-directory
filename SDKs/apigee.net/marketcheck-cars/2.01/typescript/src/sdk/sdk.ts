/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { CarCachedImage } from "./carcachedimage";
import { CarSearch } from "./carsearch";
import { CarsHistoryAPI } from "./carshistoryapi";
import { CarsMarketAPI } from "./carsmarketapi";
import { ClientFilters } from "./clientfilters";
import { CRMCleanseAPI } from "./crmcleanseapi";
import { DealerAPI } from "./dealerapi";
import { HeavyEquipmentSearch } from "./heavyequipmentsearch";
import * as shared from "./models/shared";
import { MotorcycleSearch } from "./motorcyclesearch";
import { OEMIncentiveSearch } from "./oemincentivesearch";
import { RankCarListings } from "./rankcarlistings";
import { RecallSearch } from "./recallsearch";
import { RVSearch } from "./rvsearch";
import { VINDecoderAPI } from "./vindecoderapi";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://marketcheck-prod.apigee.net/v2"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * One API serving data spanned across multiple verticals
 */
export class SDK {
  public crmCleanseAPI: CRMCleanseAPI;
  public carCachedImage: CarCachedImage;
  public carSearch: CarSearch;
  public carsHistoryAPI: CarsHistoryAPI;
  public carsMarketAPI: CarsMarketAPI;
  public dealerAPI: DealerAPI;
  public heavyEquipmentSearch: HeavyEquipmentSearch;
  public motorcycleSearch: MotorcycleSearch;
  public oemIncentiveSearch: OEMIncentiveSearch;
  public rvSearch: RVSearch;
  public rankCarListings: RankCarListings;
  public recallSearch: RecallSearch;
  public vinDecoderAPI: VINDecoderAPI;
  public clientFilters: ClientFilters;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.crmCleanseAPI = new CRMCleanseAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.carCachedImage = new CarCachedImage(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.carSearch = new CarSearch(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.carsHistoryAPI = new CarsHistoryAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.carsMarketAPI = new CarsMarketAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.dealerAPI = new DealerAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.heavyEquipmentSearch = new HeavyEquipmentSearch(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.motorcycleSearch = new MotorcycleSearch(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.oemIncentiveSearch = new OEMIncentiveSearch(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rvSearch = new RVSearch(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rankCarListings = new RankCarListings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.recallSearch = new RecallSearch(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.vinDecoderAPI = new VINDecoderAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.clientFilters = new ClientFilters(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
