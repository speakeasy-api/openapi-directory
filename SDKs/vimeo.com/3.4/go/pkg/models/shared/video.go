// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VideoContextActionEnum - The contextual action:
//
// Option descriptions:
//   - `Added to` - An Added To action.
//   - `Appearance by` - An Appearance By action.
//   - `Liked by` - A Liked By action.
//   - `Uploaded by` - An Unloaded By action.
type VideoContextActionEnum string

const (
	VideoContextActionEnumAddedTo      VideoContextActionEnum = "Added to"
	VideoContextActionEnumAppearanceBy VideoContextActionEnum = "Appearance by"
	VideoContextActionEnumLikedBy      VideoContextActionEnum = "Liked by"
	VideoContextActionEnumUploadedBy   VideoContextActionEnum = "Uploaded by"
)

func (e *VideoContextActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Added to":
		fallthrough
	case "Appearance by":
		fallthrough
	case "Liked by":
		fallthrough
	case "Uploaded by":
		*e = VideoContextActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoContextActionEnum: %s", s)
	}
}

// VideoContext - The context of the video's subscription, if this video is part of a subscription.
type VideoContext struct {
	// The contextual action:
	//
	// Option descriptions:
	//  * `Added to` - An Added To action.
	//  * `Appearance by` - An Appearance By action.
	//  * `Liked by` - A Liked By action.
	//  * `Uploaded by` - An Unloaded By action.
	//
	Action VideoContextActionEnum `json:"action"`
	// The contextual resource: a user, group, or channel representation, or an object of a tag.
	Resource map[string]interface{} `json:"resource"`
	// The contextual resource type.
	ResourceType string `json:"resource_type"`
}

// VideoLicenseEnum - The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
//
// Option descriptions:
//   - `by` - Attribution
//   - `by-nc` - Attribution Non-Commercial
//   - `by-nc-nd` - Attribution Non-Commercial No Derivatives
//   - `by-nc-sa` - Attribution Non-Commercial Share Alike
//   - `by-nd` - Attribution No Derivatives
//   - `by-sa` - Attribution Share Alike
//   - `cc0` - Public Domain Dedication
type VideoLicenseEnum string

const (
	VideoLicenseEnumBy     VideoLicenseEnum = "by"
	VideoLicenseEnumByNc   VideoLicenseEnum = "by-nc"
	VideoLicenseEnumByNcNd VideoLicenseEnum = "by-nc-nd"
	VideoLicenseEnumByNcSa VideoLicenseEnum = "by-nc-sa"
	VideoLicenseEnumByNd   VideoLicenseEnum = "by-nd"
	VideoLicenseEnumBySa   VideoLicenseEnum = "by-sa"
	VideoLicenseEnumCc0    VideoLicenseEnum = "cc0"
)

func (e *VideoLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "by":
		fallthrough
	case "by-nc":
		fallthrough
	case "by-nc-nd":
		fallthrough
	case "by-nc-sa":
		fallthrough
	case "by-nd":
		fallthrough
	case "by-sa":
		fallthrough
	case "cc0":
		*e = VideoLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoLicenseEnum: %s", s)
	}
}

// VideoMetadataConnectionsComments - Information about the comments on this video.
type VideoMetadataConnectionsComments struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of comments on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsCredits - Information about the users credited in this video.
type VideoMetadataConnectionsCredits struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options,omitempty"`
	// The total number of users on this connection.
	Total *float64 `json:"total,omitempty"`
	// The API URI that resolves to the connection data.
	URI *string `json:"uri,omitempty"`
}

// VideoMetadataConnectionsLikes - Information about the users who have liked this video.
type VideoMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsOndemand - Information about this video's ondemand data.
type VideoMetadataConnectionsOndemand struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The On Demand connection resource key.
	ResourceKey string `json:"resource_key"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsPictures - Information about this video's thumbnails.
type VideoMetadataConnectionsPictures struct {
	// An array of HTTP methods allowed on this URI.
	Options []string `json:"options"`
	// Total number of thumbnails on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsPlayback - The DRM playback status connection for this video.
type VideoMetadataConnectionsPlayback struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsRecommendations - The recommendations for this video.
type VideoMetadataConnectionsRecommendations struct {
	// An array of HTTP methods allowed on this URI.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data.
	URI *string `json:"uri,omitempty"`
}

// VideoMetadataConnectionsRelated - Related content for this video.
type VideoMetadataConnectionsRelated struct {
	// An array of HTTP methods allowed on this URI.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data.
	URI *string `json:"uri,omitempty"`
}

// VideoMetadataConnectionsSeason - Information about the video's season.
type VideoMetadataConnectionsSeason struct {
	// The name of this season.
	Name string `json:"name"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsTexttracks - Information about this video's text tracks.
type VideoMetadataConnectionsTexttracks struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of text tracks on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsTrailer - Information about this video's VOD trailer.
type VideoMetadataConnectionsTrailer struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The trailer connection resource key.
	ResourceKey string `json:"resource_key"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsUsersWithAccess - Information about the user privacy of this video, if the video privacy is `users`.
type VideoMetadataConnectionsUsersWithAccess struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnectionsVersions - Information about the versions of this video.
type VideoMetadataConnectionsVersions struct {
	// The URI of the current version of the video.
	CurrentURI *string `json:"current_uri,omitempty"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of versions on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataConnections - A list of resource URIs related to the video.
type VideoMetadataConnections struct {
	// Information about the comments on this video.
	Comments VideoMetadataConnectionsComments `json:"comments"`
	// Information about the users credited in this video.
	Credits VideoMetadataConnectionsCredits `json:"credits"`
	// Information about the users who have liked this video.
	Likes VideoMetadataConnectionsLikes `json:"likes"`
	// Information about this video's ondemand data.
	Ondemand VideoMetadataConnectionsOndemand `json:"ondemand"`
	// Information about this video's thumbnails.
	Pictures VideoMetadataConnectionsPictures `json:"pictures"`
	// The DRM playback status connection for this video.
	Playback VideoMetadataConnectionsPlayback `json:"playback"`
	// The recommendations for this video.
	Recommendations VideoMetadataConnectionsRecommendations `json:"recommendations"`
	// Related content for this video.
	Related VideoMetadataConnectionsRelated `json:"related"`
	// Information about the video's season.
	Season VideoMetadataConnectionsSeason `json:"season"`
	// Information about this video's text tracks.
	Texttracks VideoMetadataConnectionsTexttracks `json:"texttracks"`
	// Information about this video's VOD trailer.
	Trailer VideoMetadataConnectionsTrailer `json:"trailer"`
	// Information about the user privacy of this video, if the video privacy is `users`.
	UsersWithAccess VideoMetadataConnectionsUsersWithAccess `json:"users_with_access"`
	// Information about the versions of this video.
	Versions VideoMetadataConnectionsVersions `json:"versions"`
}

// VideoMetadataInteractionsBuyDownloadEnum - The user's download access to this On Demand video:
//
// Option descriptions:
//   - `available` - The video is available for download.
//   - `purchased` - The user has purchased the video.
//   - `restricted` - The user isn't permitted to download the video.
//   - `unavailable` - The video isn't available for download.
type VideoMetadataInteractionsBuyDownloadEnum string

const (
	VideoMetadataInteractionsBuyDownloadEnumAvailable   VideoMetadataInteractionsBuyDownloadEnum = "available"
	VideoMetadataInteractionsBuyDownloadEnumPurchased   VideoMetadataInteractionsBuyDownloadEnum = "purchased"
	VideoMetadataInteractionsBuyDownloadEnumRestricted  VideoMetadataInteractionsBuyDownloadEnum = "restricted"
	VideoMetadataInteractionsBuyDownloadEnumUnavailable VideoMetadataInteractionsBuyDownloadEnum = "unavailable"
)

func (e *VideoMetadataInteractionsBuyDownloadEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "purchased":
		fallthrough
	case "restricted":
		fallthrough
	case "unavailable":
		*e = VideoMetadataInteractionsBuyDownloadEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoMetadataInteractionsBuyDownloadEnum: %s", s)
	}
}

// VideoMetadataInteractionsBuyStreamEnum - The user's streaming access to this On Demand video:
//
// Option descriptions:
//   - `available` - The video is available for streaming.
//   - `purchased` - The user has purchased the video.
//   - `restricted` - The user isn't permitted to stream the video.
//   - `unavailable` - The video isn't available for streaming
type VideoMetadataInteractionsBuyStreamEnum string

const (
	VideoMetadataInteractionsBuyStreamEnumAvailable   VideoMetadataInteractionsBuyStreamEnum = "available"
	VideoMetadataInteractionsBuyStreamEnumPurchased   VideoMetadataInteractionsBuyStreamEnum = "purchased"
	VideoMetadataInteractionsBuyStreamEnumRestricted  VideoMetadataInteractionsBuyStreamEnum = "restricted"
	VideoMetadataInteractionsBuyStreamEnumUnavailable VideoMetadataInteractionsBuyStreamEnum = "unavailable"
)

func (e *VideoMetadataInteractionsBuyStreamEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "purchased":
		fallthrough
	case "restricted":
		fallthrough
	case "unavailable":
		*e = VideoMetadataInteractionsBuyStreamEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoMetadataInteractionsBuyStreamEnum: %s", s)
	}
}

// VideoMetadataInteractionsBuy - The Buy interaction for a On Demand video.
type VideoMetadataInteractionsBuy struct {
	// The currency code for the current user's region.
	Currency string `json:"currency"`
	// Formatted price to display to buy an On Demand video.
	DisplayPrice string `json:"display_price"`
	// The user's download access to this On Demand video:
	//
	// Option descriptions:
	//  * `available` - The video is available for download.
	//  * `purchased` - The user has purchased the video.
	//  * `restricted` - The user isn't permitted to download the video.
	//  * `unavailable` - The video isn't available for download.
	//
	Download VideoMetadataInteractionsBuyDownloadEnum `json:"download"`
	// Whether the video has DRM.
	Drm bool `json:"drm"`
	// The URL to buy the On Demand video on Vimeo.
	Link string `json:"link"`
	// The numeric value of the price for buying the On Demand video.
	Price float64 `json:"price"`
	// The time in ISO 8601 format when the On Demand video was purchased.
	PurchaseTime string `json:"purchase_time"`
	// The user's streaming access to this On Demand video:
	//
	// Option descriptions:
	//  * `available` - The video is available for streaming.
	//  * `purchased` - The user has purchased the video.
	//  * `restricted` - The user isn't permitted to stream the video.
	//  * `unavailable` - The video isn't available for streaming
	//
	Stream VideoMetadataInteractionsBuyStreamEnum `json:"stream"`
	// The product URI to purchase the On Demand video.
	URI string `json:"uri"`
}

// VideoMetadataInteractionsChannel - When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
type VideoMetadataInteractionsChannel struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataInteractionsLike - Information about whether the authenticated user has liked this video.
type VideoMetadataInteractionsLike struct {
	// Whether the user has liked the video.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the user liked the video.
	AddedTime string `json:"added_time"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataInteractionsRentStreamEnum - The user's streaming access to this On Demand video:
//
// Option descriptions:
//   - `available` - The video is available for streaming.
//   - `purchased` - The user has purchased the video.
//   - `restricted` - The user isn't permitted to stream the video.
//   - `unavailable` - The video isn't available for streaming.
type VideoMetadataInteractionsRentStreamEnum string

const (
	VideoMetadataInteractionsRentStreamEnumAvailable   VideoMetadataInteractionsRentStreamEnum = "available"
	VideoMetadataInteractionsRentStreamEnumPurchased   VideoMetadataInteractionsRentStreamEnum = "purchased"
	VideoMetadataInteractionsRentStreamEnumRestricted  VideoMetadataInteractionsRentStreamEnum = "restricted"
	VideoMetadataInteractionsRentStreamEnumUnavailable VideoMetadataInteractionsRentStreamEnum = "unavailable"
)

func (e *VideoMetadataInteractionsRentStreamEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "purchased":
		fallthrough
	case "restricted":
		fallthrough
	case "unavailable":
		*e = VideoMetadataInteractionsRentStreamEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoMetadataInteractionsRentStreamEnum: %s", s)
	}
}

// VideoMetadataInteractionsRent - The Rent interaction for an On Demand video.
type VideoMetadataInteractionsRent struct {
	// The currency code for the current user's region.
	Currency string `json:"currency"`
	// Formatted price to display to rent an On Demand video.
	DisplayPrice string `json:"display_price"`
	// Whether the video has DRM.
	Drm bool `json:"drm"`
	// The time in ISO 8601 format when the rental period for the video expires.
	ExpiresTime string `json:"expires_time"`
	// The URL to rent the On Demand video on Vimeo.
	Link string `json:"link"`
	// The numeric value of the price for buying the On Demand video.
	Price float64 `json:"price"`
	// The time in ISO 8601 format when the On Demand video was rented.
	PurchaseTime string `json:"purchase_time"`
	// The user's streaming access to this On Demand video:
	//
	// Option descriptions:
	//  * `available` - The video is available for streaming.
	//  * `purchased` - The user has purchased the video.
	//  * `restricted` - The user isn't permitted to stream the video.
	//  * `unavailable` - The video isn't available for streaming.
	//
	Stream VideoMetadataInteractionsRentStreamEnum `json:"stream"`
	// The product URI to rent the On Demand video.
	URI string `json:"uri"`
}

// VideoMetadataInteractionsReport - Information about where and how to report a video.
type VideoMetadataInteractionsReport struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// A list of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataInteractionsSubscribe - Subscription information for an On Demand video.
type VideoMetadataInteractionsSubscribe struct {
	// Whether the video has DRM.
	Drm *bool `json:"drm,omitempty"`
	// The time in ISO 8601 format when the subscription expires.
	ExpiresTime *string `json:"expires_time,omitempty"`
	// The tine in ISO 8601 format when the subscription was purchased.
	PurchaseTime *string `json:"purchase_time,omitempty"`
	// The stream type.
	Stream *string `json:"stream,omitempty"`
}

// VideoMetadataInteractionsWatched - Information about removing this video from the user's list of watched videos.
type VideoMetadataInteractionsWatched struct {
	// Whether the user has watched the video.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the user watched the video.
	AddedTime string `json:"added_time"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataInteractionsWatchlater - Information about whether this video appears on the authenticated user's Watch Later list.
type VideoMetadataInteractionsWatchlater struct {
	// Whether the user has added the video to their Watch later list.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the user added the video to their Watch Later list.
	AddedTime string `json:"added_time"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoMetadataInteractions - A list of resource URIs related to the video.
type VideoMetadataInteractions struct {
	// The Buy interaction for a On Demand video.
	Buy VideoMetadataInteractionsBuy `json:"buy"`
	// When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
	Channel VideoMetadataInteractionsChannel `json:"channel"`
	// Information about whether the authenticated user has liked this video.
	Like VideoMetadataInteractionsLike `json:"like"`
	// The Rent interaction for an On Demand video.
	Rent VideoMetadataInteractionsRent `json:"rent"`
	// Information about where and how to report a video.
	Report VideoMetadataInteractionsReport `json:"report"`
	// Subscription information for an On Demand video.
	Subscribe *VideoMetadataInteractionsSubscribe `json:"subscribe,omitempty"`
	// Information about removing this video from the user's list of watched videos.
	Watched VideoMetadataInteractionsWatched `json:"watched"`
	// Information about whether this video appears on the authenticated user's Watch Later list.
	Watchlater VideoMetadataInteractionsWatchlater `json:"watchlater"`
}

// VideoMetadata - The video's metadata.
type VideoMetadata struct {
	// A list of resource URIs related to the video.
	Connections VideoMetadataConnections `json:"connections"`
	// A list of resource URIs related to the video.
	Interactions VideoMetadataInteractions `json:"interactions"`
}

// VideoProjectMetadataConnectionsVideos - A standard connection object indicating how to get all the videos in this project.
type VideoProjectMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoProjectMetadataConnections - A list of resource URIs related to the project.
type VideoProjectMetadataConnections struct {
	// A standard connection object indicating how to get all the videos in this project.
	Videos VideoProjectMetadataConnectionsVideos `json:"videos"`
}

// VideoProjectMetadata - The project's metadata.
type VideoProjectMetadata struct {
	// A list of resource URIs related to the project.
	Connections VideoProjectMetadataConnections `json:"connections"`
}

// VideoProject - Information about the folder that contains this video.
type VideoProject struct {
	// The time in ISO 8601 format when the project was created.
	CreatedTime string `json:"created_time"`
	// The project's metadata.
	Metadata VideoProjectMetadata `json:"metadata"`
	// The time in ISO 8601 format when the project was last modified.
	ModifiedTime string `json:"modified_time"`
	// The name of the folder.
	Name string `json:"name"`
	// The resource key string of the project.
	ResourceKey string `json:"resource_key"`
	// The URI of the project.
	URI string `json:"uri"`
	// The owner of the project.
	User User `json:"user"`
}

// VideoPrivacyCommentsEnum - Who can comment on the video:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the video.
//   - `contacts` - Only contacts can comment on the video.
//   - `nobody` - No one can comment on the video.
type VideoPrivacyCommentsEnum string

const (
	VideoPrivacyCommentsEnumAnybody  VideoPrivacyCommentsEnum = "anybody"
	VideoPrivacyCommentsEnumContacts VideoPrivacyCommentsEnum = "contacts"
	VideoPrivacyCommentsEnumNobody   VideoPrivacyCommentsEnum = "nobody"
)

func (e *VideoPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = VideoPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoPrivacyCommentsEnum: %s", s)
	}
}

// VideoPrivacyEmbedEnum - The video's embed permission setting:
//
// Option descriptions:
//   - `private` - The video is private.
//   - `public` - Anyone can embed the video.
type VideoPrivacyEmbedEnum string

const (
	VideoPrivacyEmbedEnumPrivate VideoPrivacyEmbedEnum = "private"
	VideoPrivacyEmbedEnumPublic  VideoPrivacyEmbedEnum = "public"
)

func (e *VideoPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		*e = VideoPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoPrivacyEmbedEnum: %s", s)
	}
}

// VideoPrivacyViewEnum - The general privacy setting for the video:
//
// Option descriptions:
//   - `anybody` - Anyone can view the video.
//   - `contacts` - Only contacts can view the video.
//   - `disable` - Hide from vimeo
//   - `nobody` - No one besides the owner can view the video.
//   - `password` - Anyone with the video's password can view the video.
//   - `unlisted` - Not searchable from vimeo.com
//   - `users` - Only people with a Vimeo account can view the video.
type VideoPrivacyViewEnum string

const (
	VideoPrivacyViewEnumAnybody  VideoPrivacyViewEnum = "anybody"
	VideoPrivacyViewEnumContacts VideoPrivacyViewEnum = "contacts"
	VideoPrivacyViewEnumDisable  VideoPrivacyViewEnum = "disable"
	VideoPrivacyViewEnumNobody   VideoPrivacyViewEnum = "nobody"
	VideoPrivacyViewEnumPassword VideoPrivacyViewEnum = "password"
	VideoPrivacyViewEnumUnlisted VideoPrivacyViewEnum = "unlisted"
	VideoPrivacyViewEnumUsers    VideoPrivacyViewEnum = "users"
)

func (e *VideoPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = VideoPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoPrivacyViewEnum: %s", s)
	}
}

// VideoPrivacy - The video's privacy setting.
type VideoPrivacy struct {
	// Whether the video can be added to collections.
	Add bool `json:"add"`
	// Who can comment on the video:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the video.
	//  * `contacts` - Only contacts can comment on the video.
	//  * `nobody` - No one can comment on the video.
	//
	Comments VideoPrivacyCommentsEnum `json:"comments"`
	// The video's download permission setting.
	Download bool `json:"download"`
	// The video's embed permission setting:
	//
	// Option descriptions:
	//  * `private` - The video is private.
	//  * `public` - Anyone can embed the video.
	//
	Embed VideoPrivacyEmbedEnum `json:"embed"`
	// The general privacy setting for the video:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the video.
	//  * `contacts` - Only contacts can view the video.
	//  * `disable` - Hide from vimeo
	//  * `nobody` - No one besides the owner can view the video.
	//  * `password` - Anyone with the video's password can view the video.
	//  * `unlisted` - Not searchable from vimeo.com
	//  * `users` - Only people with a Vimeo account can view the video.
	//
	View VideoPrivacyViewEnum `json:"view"`
}

type VideoSpatialDirectorTimeline struct {
	// The director timeline pitch, from -90 (minimum) to 90 (maximum).
	Pitch *float64 `json:"pitch,omitempty"`
	// The director timeline roll.
	Roll *float64 `json:"roll,omitempty"`
	// The director timeline time code.
	TimeCode *float64 `json:"time_code,omitempty"`
	// The director timeline yaw, from 0 (minimum) to 360 (maximum).
	Yaw *float64 `json:"yaw,omitempty"`
}

// VideoSpatialProjectionEnum - The 360 spatial projection:
//
// Option descriptions:
//   - `cubical` - The spatial projection is cubical.
//   - `cylindrical` - The spatial projection is cylindrical.
//   - `dome` - The spatial projection is dome-shaped.
//   - `equirectangular` - The spatial projection is equirectangular.
//   - `pyramid` - The spatial projection is pyramid-shaped.
type VideoSpatialProjectionEnum string

const (
	VideoSpatialProjectionEnumCubical         VideoSpatialProjectionEnum = "cubical"
	VideoSpatialProjectionEnumCylindrical     VideoSpatialProjectionEnum = "cylindrical"
	VideoSpatialProjectionEnumDome            VideoSpatialProjectionEnum = "dome"
	VideoSpatialProjectionEnumEquirectangular VideoSpatialProjectionEnum = "equirectangular"
	VideoSpatialProjectionEnumPyramid         VideoSpatialProjectionEnum = "pyramid"
)

func (e *VideoSpatialProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cubical":
		fallthrough
	case "cylindrical":
		fallthrough
	case "dome":
		fallthrough
	case "equirectangular":
		fallthrough
	case "pyramid":
		*e = VideoSpatialProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoSpatialProjectionEnum: %s", s)
	}
}

// VideoSpatialStereoFormatEnum - The 360 stereo format:
//
// Option descriptions:
//   - `left-right` - The stereo format is left-right.
//   - `mono` - The audio is monaural.
//   - `top-bottom` - The stereo format is top-bottom.
type VideoSpatialStereoFormatEnum string

const (
	VideoSpatialStereoFormatEnumLeftRight VideoSpatialStereoFormatEnum = "left-right"
	VideoSpatialStereoFormatEnumMono      VideoSpatialStereoFormatEnum = "mono"
	VideoSpatialStereoFormatEnumTopBottom VideoSpatialStereoFormatEnum = "top-bottom"
)

func (e *VideoSpatialStereoFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left-right":
		fallthrough
	case "mono":
		fallthrough
	case "top-bottom":
		*e = VideoSpatialStereoFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoSpatialStereoFormatEnum: %s", s)
	}
}

// VideoSpatial - 360 spatial data.
type VideoSpatial struct {
	// 360 director timeline.
	DirectorTimeline []VideoSpatialDirectorTimeline `json:"director_timeline"`
	// The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.
	FieldOfView float64 `json:"field_of_view"`
	// The 360 spatial projection:
	//
	// Option descriptions:
	//  * `cubical` - The spatial projection is cubical.
	//  * `cylindrical` - The spatial projection is cylindrical.
	//  * `dome` - The spatial projection is dome-shaped.
	//  * `equirectangular` - The spatial projection is equirectangular.
	//  * `pyramid` - The spatial projection is pyramid-shaped.
	//
	Projection VideoSpatialProjectionEnum `json:"projection"`
	// The 360 stereo format:
	//
	// Option descriptions:
	//  * `left-right` - The stereo format is left-right.
	//  * `mono` - The audio is monaural.
	//  * `top-bottom` - The stereo format is top-bottom.
	//
	StereoFormat VideoSpatialStereoFormatEnum `json:"stereo_format"`
}

// VideoStats - A collection of stats associated with this video.
type VideoStats struct {
	// The current total number of times that the video has been played.
	Plays float64 `json:"plays"`
}

// VideoStatusEnum - The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
//
// Option descriptions:
//   - `available` - The video is available.
//   - `quota_exceeded` - The user's quota is exceeded with this video.
//   - `total_cap_exceeded` - The user has exceeded their total cap with this video.
//   - `transcode_starting` - Transcoding is beginning for the video.
//   - `transcoding` - Transcoding is underway for the video.
//   - `transcoding_error` - There was an error in transcoding the video.
//   - `unavailable` - The video is unavailable.
//   - `uploading` - The video is being uploaded.
//   - `uploading_error` - There was an error in uploading the video.
type VideoStatusEnum string

const (
	VideoStatusEnumAvailable         VideoStatusEnum = "available"
	VideoStatusEnumQuotaExceeded     VideoStatusEnum = "quota_exceeded"
	VideoStatusEnumTotalCapExceeded  VideoStatusEnum = "total_cap_exceeded"
	VideoStatusEnumTranscodeStarting VideoStatusEnum = "transcode_starting"
	VideoStatusEnumTranscoding       VideoStatusEnum = "transcoding"
	VideoStatusEnumTranscodingError  VideoStatusEnum = "transcoding_error"
	VideoStatusEnumUnavailable       VideoStatusEnum = "unavailable"
	VideoStatusEnumUploading         VideoStatusEnum = "uploading"
	VideoStatusEnumUploadingError    VideoStatusEnum = "uploading_error"
)

func (e *VideoStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "quota_exceeded":
		fallthrough
	case "total_cap_exceeded":
		fallthrough
	case "transcode_starting":
		fallthrough
	case "transcoding":
		fallthrough
	case "transcoding_error":
		fallthrough
	case "unavailable":
		fallthrough
	case "uploading":
		fallthrough
	case "uploading_error":
		*e = VideoStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoStatusEnum: %s", s)
	}
}

// VideoTranscodeStatusEnum - Status code for this video's availability.
type VideoTranscodeStatusEnum string

const (
	VideoTranscodeStatusEnumComplete   VideoTranscodeStatusEnum = "complete"
	VideoTranscodeStatusEnumError      VideoTranscodeStatusEnum = "error"
	VideoTranscodeStatusEnumInProgress VideoTranscodeStatusEnum = "in_progress"
)

func (e *VideoTranscodeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "complete":
		fallthrough
	case "error":
		fallthrough
	case "in_progress":
		*e = VideoTranscodeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoTranscodeStatusEnum: %s", s)
	}
}

// VideoTranscode - The transcode information for a video upload.
type VideoTranscode struct {
	// Status code for this video's availability.
	Status *VideoTranscodeStatusEnum `json:"status,omitempty"`
}

// VideoUploadApproachEnum - The approach for uploading the video.
type VideoUploadApproachEnum string

const (
	VideoUploadApproachEnumPost      VideoUploadApproachEnum = "post"
	VideoUploadApproachEnumPull      VideoUploadApproachEnum = "pull"
	VideoUploadApproachEnumStreaming VideoUploadApproachEnum = "streaming"
	VideoUploadApproachEnumTus       VideoUploadApproachEnum = "tus"
)

func (e *VideoUploadApproachEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "post":
		fallthrough
	case "pull":
		fallthrough
	case "streaming":
		fallthrough
	case "tus":
		*e = VideoUploadApproachEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoUploadApproachEnum: %s", s)
	}
}

// VideoUploadStatusEnum - The status code for the availability of the uploaded video:
//
// Option descriptions:
//   - `complete` - The upload is complete.
//   - `error` - The upload ended with an error.
//   - `in_progress` - The upload is underway.
type VideoUploadStatusEnum string

const (
	VideoUploadStatusEnumComplete   VideoUploadStatusEnum = "complete"
	VideoUploadStatusEnumError      VideoUploadStatusEnum = "error"
	VideoUploadStatusEnumInProgress VideoUploadStatusEnum = "in_progress"
)

func (e *VideoUploadStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "complete":
		fallthrough
	case "error":
		fallthrough
	case "in_progress":
		*e = VideoUploadStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoUploadStatusEnum: %s", s)
	}
}

// VideoUpload - The upload information for this video.
type VideoUpload struct {
	// The approach for uploading the video.
	Approach *VideoUploadApproachEnum `json:"approach,omitempty"`
	// The URI for completing the upload.
	CompleteURI *string `json:"complete_uri,omitempty"`
	// The HTML form for uploading a video through the post approach.
	Form *string `json:"form,omitempty"`
	// The link of the video to capture through the pull approach.
	Link *string `json:"link,omitempty"`
	// The redirect URL for the upload app.
	RedirectURL *string `json:"redirect_url,omitempty"`
	// The file size in bytes of the uploaded video.
	Size *float64 `json:"size,omitempty"`
	// The status code for the availability of the uploaded video:
	//
	// Option descriptions:
	//  * `complete` - The upload is complete.
	//  * `error` - The upload ended with an error.
	//  * `in_progress` - The upload is underway.
	//
	Status VideoUploadStatusEnum `json:"status"`
	// The link for sending video file data.
	UploadLink *string `json:"upload_link,omitempty"`
}

// VideoUserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type VideoUserAccountEnum string

const (
	VideoUserAccountEnumBasic        VideoUserAccountEnum = "basic"
	VideoUserAccountEnumBusiness     VideoUserAccountEnum = "business"
	VideoUserAccountEnumLiveBusiness VideoUserAccountEnum = "live_business"
	VideoUserAccountEnumLivePremium  VideoUserAccountEnum = "live_premium"
	VideoUserAccountEnumLivePro      VideoUserAccountEnum = "live_pro"
	VideoUserAccountEnumPlus         VideoUserAccountEnum = "plus"
	VideoUserAccountEnumPro          VideoUserAccountEnum = "pro"
	VideoUserAccountEnumProUnlimited VideoUserAccountEnum = "pro_unlimited"
	VideoUserAccountEnumProducer     VideoUserAccountEnum = "producer"
)

func (e *VideoUserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = VideoUserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoUserAccountEnum: %s", s)
	}
}

// VideoUserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type VideoUserContentFilterEnum string

const (
	VideoUserContentFilterEnumDrugs    VideoUserContentFilterEnum = "drugs"
	VideoUserContentFilterEnumLanguage VideoUserContentFilterEnum = "language"
	VideoUserContentFilterEnumNudity   VideoUserContentFilterEnum = "nudity"
	VideoUserContentFilterEnumSafe     VideoUserContentFilterEnum = "safe"
	VideoUserContentFilterEnumUnrated  VideoUserContentFilterEnum = "unrated"
	VideoUserContentFilterEnumViolence VideoUserContentFilterEnum = "violence"
)

func (e *VideoUserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = VideoUserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoUserContentFilterEnum: %s", s)
	}
}

// VideoUserMetadataConnectionsAlbums - Information about the albums created by this user.
type VideoUserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type VideoUserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type VideoUserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsCategories - Information about this user's followed categories.
type VideoUserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsChannels - Information about this user's subscribed channels.
type VideoUserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsFeed - Information about this user's feed.
type VideoUserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsFolders - Information about this user's folders.
type VideoUserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsFollowers - Information about the user's followers.
type VideoUserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsFollowing - Information about the users that the current user is following.
type VideoUserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsGroups - Information about the groups created by this user.
type VideoUserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsLikes - Information about the videos that this user has liked.
type VideoUserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type VideoUserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsPictures - Information about this user's portraits.
type VideoUserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsPortfolios - Information about this user's portfolios.
type VideoUserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type VideoUserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type VideoUserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type VideoUserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type VideoUserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type VideoUserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type VideoUserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// VideoUserMetadataConnections - The list of resource URIs related to the user.
type VideoUserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums VideoUserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances VideoUserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block VideoUserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories VideoUserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels VideoUserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed VideoUserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders VideoUserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers VideoUserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following VideoUserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups VideoUserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes VideoUserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels VideoUserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures VideoUserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios VideoUserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels VideoUserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers VideoUserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared VideoUserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos VideoUserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos VideoUserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater VideoUserMetadataConnectionsWatchlater `json:"watchlater"`
}

type VideoUserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// VideoUserMetadataInteractionsBlock - Information related to the block status of this user.
type VideoUserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// VideoUserMetadataInteractionsFollow - Information related to the followed status of this user.
type VideoUserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// VideoUserMetadataInteractionsReport - Information regarding where and how to report a user.
type VideoUserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type VideoUserMetadataInteractions struct {
	AddPrivacyUser *VideoUserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block VideoUserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow VideoUserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report VideoUserMetadataInteractionsReport `json:"report"`
}

// VideoUserMetadata - The user's metadata.
type VideoUserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  VideoUserMetadataConnections  `json:"connections"`
	Interactions VideoUserMetadataInteractions `json:"interactions"`
}

// VideoUserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type VideoUserPreferencesVideosPrivacyCommentsEnum string

const (
	VideoUserPreferencesVideosPrivacyCommentsEnumAnybody  VideoUserPreferencesVideosPrivacyCommentsEnum = "anybody"
	VideoUserPreferencesVideosPrivacyCommentsEnumContacts VideoUserPreferencesVideosPrivacyCommentsEnum = "contacts"
	VideoUserPreferencesVideosPrivacyCommentsEnumNobody   VideoUserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *VideoUserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = VideoUserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoUserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// VideoUserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type VideoUserPreferencesVideosPrivacyEmbedEnum string

const (
	VideoUserPreferencesVideosPrivacyEmbedEnumPrivate   VideoUserPreferencesVideosPrivacyEmbedEnum = "private"
	VideoUserPreferencesVideosPrivacyEmbedEnumPublic    VideoUserPreferencesVideosPrivacyEmbedEnum = "public"
	VideoUserPreferencesVideosPrivacyEmbedEnumWhitelist VideoUserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *VideoUserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = VideoUserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoUserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// VideoUserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type VideoUserPreferencesVideosPrivacyViewEnum string

const (
	VideoUserPreferencesVideosPrivacyViewEnumAnybody  VideoUserPreferencesVideosPrivacyViewEnum = "anybody"
	VideoUserPreferencesVideosPrivacyViewEnumContacts VideoUserPreferencesVideosPrivacyViewEnum = "contacts"
	VideoUserPreferencesVideosPrivacyViewEnumDisable  VideoUserPreferencesVideosPrivacyViewEnum = "disable"
	VideoUserPreferencesVideosPrivacyViewEnumNobody   VideoUserPreferencesVideosPrivacyViewEnum = "nobody"
	VideoUserPreferencesVideosPrivacyViewEnumPassword VideoUserPreferencesVideosPrivacyViewEnum = "password"
	VideoUserPreferencesVideosPrivacyViewEnumUnlisted VideoUserPreferencesVideosPrivacyViewEnum = "unlisted"
	VideoUserPreferencesVideosPrivacyViewEnumUsers    VideoUserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *VideoUserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = VideoUserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoUserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type VideoUserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *VideoUserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *VideoUserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *VideoUserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type VideoUserPreferencesVideos struct {
	Privacy *VideoUserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type VideoUserPreferences struct {
	Videos *VideoUserPreferencesVideos `json:"videos,omitempty"`
}

// VideoUserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type VideoUserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// VideoUserUploadQuotaPeriodic - Information about the user's usage for the current period.
type VideoUserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// VideoUserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type VideoUserUploadQuotaSpaceShowingEnum string

const (
	VideoUserUploadQuotaSpaceShowingEnumLifetime VideoUserUploadQuotaSpaceShowingEnum = "lifetime"
	VideoUserUploadQuotaSpaceShowingEnumPeriodic VideoUserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *VideoUserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = VideoUserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoUserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// VideoUserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type VideoUserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing VideoUserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// VideoUserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type VideoUserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime VideoUserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic VideoUserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space VideoUserUploadQuotaSpace `json:"space"`
}

type VideoUserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// VideoUser - The video owner.
type VideoUser struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account VideoUserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *VideoUserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata VideoUserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture               `json:"pictures"`
	Preferences *VideoUserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota VideoUserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []VideoUserWebsites `json:"websites"`
}

// Video - The video belongs to the category.
type Video struct {
	// The categories to which this video belongs.
	Categories []Category `json:"categories"`
	// The content ratings of this video.
	ContentRating []string `json:"content_rating"`
	// The context of the video's subscription, if this video is part of a subscription.
	Context VideoContext `json:"context"`
	// The time in ISO 8601 format when the video was created.
	CreatedTime string `json:"created_time"`
	// A brief explanation of the video's content.
	Description string `json:"description"`
	// The video's duration in seconds.
	Duration float64 `json:"duration"`
	// Information about embedding this video.
	Embed EmbedSettings `json:"embed"`
	// The video's height in pixels.
	Height float64 `json:"height"`
	// The video's primary language.
	Language string `json:"language"`
	// The time in ISO 8601 format when the user last modified the video.
	LastUserActionEventDate *string `json:"last_user_action_event_date,omitempty"`
	// The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
	//
	// Option descriptions:
	//  * `by` - Attribution
	//  * `by-nc` - Attribution Non-Commercial
	//  * `by-nc-nd` - Attribution Non-Commercial No Derivatives
	//  * `by-nc-sa` - Attribution Non-Commercial Share Alike
	//  * `by-nd` - Attribution No Derivatives
	//  * `by-sa` - Attribution Share Alike
	//  * `cc0` - Public Domain Dedication
	//
	License VideoLicenseEnum `json:"license"`
	// The link to the video.
	Link string `json:"link"`
	// The video's metadata.
	Metadata VideoMetadata `json:"metadata"`
	// The time in ISO 8601 format when the video metadata was last modified.
	ModifiedTime string `json:"modified_time"`
	// The video's title.
	Name string `json:"name"`
	// Information about the folder that contains this video.
	ParentFolder *VideoProject `json:"parent_folder,omitempty"`
	// The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.
	Password *string `json:"password,omitempty"`
	// The active picture for this video.
	Pictures Picture `json:"pictures"`
	// The video's privacy setting.
	Privacy VideoPrivacy `json:"privacy"`
	// The time in ISO 8601 format when the video was released.
	ReleaseTime string `json:"release_time"`
	// The resource key string of the video.
	ResourceKey string `json:"resource_key"`
	// 360 spatial data.
	Spatial VideoSpatial `json:"spatial"`
	// A collection of stats associated with this video.
	Stats VideoStats `json:"stats"`
	// The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
	//
	// Option descriptions:
	//  * `available` - The video is available.
	//  * `quota_exceeded` - The user's quota is exceeded with this video.
	//  * `total_cap_exceeded` - The user has exceeded their total cap with this video.
	//  * `transcode_starting` - Transcoding is beginning for the video.
	//  * `transcoding` - Transcoding is underway for the video.
	//  * `transcoding_error` - There was an error in transcoding the video.
	//  * `unavailable` - The video is unavailable.
	//  * `uploading` - The video is being uploaded.
	//  * `uploading_error` - There was an error in uploading the video.
	//
	Status VideoStatusEnum `json:"status"`
	// An array of all tags assigned to this video.
	Tags []Tag `json:"tags"`
	// The transcode information for a video upload.
	Transcode VideoTranscode `json:"transcode"`
	// The upload information for this video.
	Upload VideoUpload `json:"upload"`
	// The video's canonical relative URI.
	URI string `json:"uri"`
	// The video owner.
	User VideoUser `json:"user"`
	// The video's width in pixels.
	Width float64 `json:"width"`
}
