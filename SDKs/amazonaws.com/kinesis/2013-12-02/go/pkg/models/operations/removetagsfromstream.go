// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RemoveTagsFromStreamXAmzTargetEnum
type RemoveTagsFromStreamXAmzTargetEnum string

const (
	RemoveTagsFromStreamXAmzTargetEnumKinesis20131202RemoveTagsFromStream RemoveTagsFromStreamXAmzTargetEnum = "Kinesis_20131202.RemoveTagsFromStream"
)

func (e *RemoveTagsFromStreamXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Kinesis_20131202.RemoveTagsFromStream":
		*e = RemoveTagsFromStreamXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveTagsFromStreamXAmzTargetEnum: %s", s)
	}
}

type RemoveTagsFromStreamRequest struct {
	RemoveTagsFromStreamInput shared.RemoveTagsFromStreamInput   `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                RemoveTagsFromStreamXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RemoveTagsFromStreamResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
