"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Two4UserSafeScoringOptional:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def user_safe_scoring_accumulated_value_v1_scorings_individual(self, request: operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualRequest) -> operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualResponse:
        r"""User safe scoring - Accumulated value - v1/Scorings/individual
        Safe driving score API. This API is a part of Telematics API that we provide to our clients.
        
        Rating description presents the universal approach, developed by our company on the basis of many years of experience; most of the input variables presented in this document could be adopted depending on the needs of the company and the focus on the specific characteristics of clients' driving style.
        Since 2019 we have moved to the 3rd Generation of the scoring model which allows distinguishing a context of events and add penalty points in accordance with a level of risk generated by an event
        
        [More details](https://docs.telematicssdk.com)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/statistics/v1/Scorings/individual/'
        
        query_params = utils.get_query_params(operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UserSafeScoringAccumulatedValueV1ScoringsIndividual200ApplicationJSON])
                res.user_safe_scoring_accumulated_value_v1_scorings_individual_200_application_json_object = out

        return res

    def user_safe_scoring_daily_value_v1_scorings_individual_daily(self, request: operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyRequest) -> operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyResponse:
        r"""User safe scoring - daily value - /v1/Scorings/individual/daily
        User safe scoring - daily value - /v1/Scorings/individual/daily
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/statistics/v1/Scorings/individual/daily'
        
        query_params = utils.get_query_params(operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UserSafeScoringDailyValueV1ScoringsIndividualDaily200ApplicationJSON])
                res.user_safe_scoring_daily_value_v1_scorings_individual_daily_200_application_json_object = out

        return res

    