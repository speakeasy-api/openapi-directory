/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Question - Any question. The specific type of question is known by its `kind`.
 */
public class Question {
    /**
     * A radio/checkbox/dropdown question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("choiceQuestion")
    public ChoiceQuestion choiceQuestion;
    public Question withChoiceQuestion(ChoiceQuestion choiceQuestion) {
        this.choiceQuestion = choiceQuestion;
        return this;
    }
    
    /**
     * A date question. Date questions default to just month + day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateQuestion")
    public DateQuestion dateQuestion;
    public Question withDateQuestion(DateQuestion dateQuestion) {
        this.dateQuestion = dateQuestion;
        return this;
    }
    
    /**
     * A file upload question. The API currently does not support creating file upload questions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileUploadQuestion")
    public FileUploadQuestion fileUploadQuestion;
    public Question withFileUploadQuestion(FileUploadQuestion fileUploadQuestion) {
        this.fileUploadQuestion = fileUploadQuestion;
        return this;
    }
    
    /**
     * Grading for a single question
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grading")
    public Grading grading;
    public Question withGrading(Grading grading) {
        this.grading = grading;
        return this;
    }
    
    /**
     * Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("questionId")
    public String questionId;
    public Question withQuestionId(String questionId) {
        this.questionId = questionId;
        return this;
    }
    
    /**
     * Whether the question must be answered in order for a respondent to submit their response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    public Boolean required;
    public Question withRequired(Boolean required) {
        this.required = required;
        return this;
    }
    
    /**
     * Configuration for a question that is part of a question group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowQuestion")
    public RowQuestion rowQuestion;
    public Question withRowQuestion(RowQuestion rowQuestion) {
        this.rowQuestion = rowQuestion;
        return this;
    }
    
    /**
     * A scale question. The user has a range of numeric values to choose from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaleQuestion")
    public ScaleQuestion scaleQuestion;
    public Question withScaleQuestion(ScaleQuestion scaleQuestion) {
        this.scaleQuestion = scaleQuestion;
        return this;
    }
    
    /**
     * A text-based question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textQuestion")
    public TextQuestion textQuestion;
    public Question withTextQuestion(TextQuestion textQuestion) {
        this.textQuestion = textQuestion;
        return this;
    }
    
    /**
     * A time question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeQuestion")
    public TimeQuestion timeQuestion;
    public Question withTimeQuestion(TimeQuestion timeQuestion) {
        this.timeQuestion = timeQuestion;
        return this;
    }
    
}
