<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class ReposCreateReleaseRequestBody
{
    /**
     * Text describing the contents of the tag.
     * 
     * @var ?string $body
     */
	#[\JMS\Serializer\Annotation\SerializedName('body')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $body = null;
    
    /**
     * `true` to create a draft (unpublished) release, `false` to create a published one.
     * 
     * @var ?bool $draft
     */
	#[\JMS\Serializer\Annotation\SerializedName('draft')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $draft = null;
    
    /**
     * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
     * 
     * @var ?bool $generateReleaseNotes
     */
	#[\JMS\Serializer\Annotation\SerializedName('generate_release_notes')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $generateReleaseNotes = null;
    
    /**
     * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateReleaseRequestBodyMakeLatestEnum $makeLatest
     */
	#[\JMS\Serializer\Annotation\SerializedName('make_latest')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateReleaseRequestBodyMakeLatestEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateReleaseRequestBodyMakeLatestEnum $makeLatest = null;
    
    /**
     * The name of the release.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
     * 
     * @var ?bool $prerelease
     */
	#[\JMS\Serializer\Annotation\SerializedName('prerelease')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $prerelease = null;
    
    /**
     * The name of the tag.
     * 
     * @var string $tagName
     */
	#[\JMS\Serializer\Annotation\SerializedName('tag_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $tagName;
    
    /**
     * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
     * 
     * @var ?string $targetCommitish
     */
	#[\JMS\Serializer\Annotation\SerializedName('target_commitish')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetCommitish = null;
    
	public function __construct()
	{
		$this->body = null;
		$this->draft = null;
		$this->generateReleaseNotes = null;
		$this->makeLatest = null;
		$this->name = null;
		$this->prerelease = null;
		$this->tagName = "";
		$this->targetCommitish = null;
	}
}
