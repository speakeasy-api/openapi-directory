<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class NAModule
{
	#[\JMS\Serializer\Annotation\SerializedName('_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * It contains the current battery level in percentage.
     * 
     * @var ?int $batteryPercent
     */
	#[\JMS\Serializer\Annotation\SerializedName('battery_percent')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $batteryPercent = null;
    
    /**
     * It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.
     * 
     * "Indoor module Battery range: 6000 ... 4200" |
     * INDOOR_BATTERY_LEVEL_FULL = 5640
     * INDOOR_BATTERY_LEVEL_HIGH = 5280
     * INDOOR_BATTERY_LEVEL_MEDIUM = 4920
     * INDOOR_BATTERY_LEVEL_LOW = 4560
     * "Below 4560: very low" |
     *     
     * "Raingauge and outdoor module Battery range: 6000 ... 3600" |
     * BATTERY_LEVEL_FULL = 5500
     * BATTERY_LEVEL_HIGH = 5000
     * BATTERY_LEVEL_MEDIUM = 4500
     * BATTERY_LEVEL_LOW = 4000
     * "Below 4000: very low" |
     *     
     * "Thermostat Battery range: 4500 ... 3000" |
     * THERMOSTAT_BATTERY_LEVEL_FULL = 4100
     * THERMOSTAT_BATTERY_LEVEL_HIGH = 3600
     * THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300
     * THERMOSTAT_BATTERY_LEVEL_LOW = 3000
     * "Below 3000: very low"
     * 
     * 
     * @var ?int $batteryVp
     */
	#[\JMS\Serializer\Annotation\SerializedName('battery_vp')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $batteryVp = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('dashboard_data')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NADashboardData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NADashboardData $dashboardData = null;
    
    /**
     * $dataType
     * 
     * @var ?array<string> $dataType
     */
	#[\JMS\Serializer\Annotation\SerializedName('data_type')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $dataType = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('date_setup')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NADate')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NADate $dateSetup = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('firmware')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $firmware = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('last_message')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $lastMessage = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('last_seen')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $lastSeen = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('main_device')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $mainDevice = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('module_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $moduleName = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('public_ext_data')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $publicExtData = null;
    
    /**
     * "It contains the current radio status. The different thresholds to take into account are :" |
     * 
     * RADIO_THRESHOLD_SIGNAL_LOW = 90 
     * RADIO_THRESHOLD_SIGNAL_MEDIUM = 80
     * RADIO_THRESHOLD_SIGNAL_HIGH = 70
     * RADIO_THRESHOLD_SIGNAL_FULL = 60
     * 
     * 
     * @var ?int $rfStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('rf_status')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $rfStatus = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('therm_orientation')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $thermOrientation = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('therm_relay_cmd')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $thermRelayCmd = null;
    
    /**
     * Included in every device or module. It defines the type of the device/module. Its values are among :
     * 
     * NAMain : for the base station
     * NAModule1 : for the outdoor module
     * NAModule4 : for the additionnal indoor module
     * NAModule3 : for the rain gauge module
     * NAPlug : for the thermostat relay/plug
     * NATherm1 : for the thermostat module
     * 
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
	public function __construct()
	{
		$this->id = null;
		$this->batteryPercent = null;
		$this->batteryVp = null;
		$this->dashboardData = null;
		$this->dataType = null;
		$this->dateSetup = null;
		$this->firmware = null;
		$this->lastMessage = null;
		$this->lastSeen = null;
		$this->mainDevice = null;
		$this->moduleName = null;
		$this->publicExtData = null;
		$this->rfStatus = null;
		$this->thermOrientation = null;
		$this->thermRelayCmd = null;
		$this->type = null;
	}
}
