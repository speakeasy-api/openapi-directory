// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum - The permission to grant to the team for this project. Can be one of:
// \* `read` - team members can read, but not write to or administer this project.
// \* `write` - team members can read and write, but not administer this project.
// \* `admin` - team members can read, write and administer this project.
// Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
type TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum string

const (
	TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnumRead  TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum = "read"
	TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnumWrite TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum = "write"
	TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnumAdmin TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum = "admin"
)

func (e *TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum: %s", s)
	}
}

type TeamsAddOrUpdateProjectPermissionsLegacyRequestBody struct {
	// The permission to grant to the team for this project. Can be one of:
	// \* `read` - team members can read, but not write to or administer this project.
	// \* `write` - team members can read and write, but not administer this project.
	// \* `admin` - team members can read, write and administer this project.
	// Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
	Permission *TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum `json:"permission,omitempty"`
}

type TeamsAddOrUpdateProjectPermissionsLegacyRequest struct {
	RequestBody *TeamsAddOrUpdateProjectPermissionsLegacyRequestBody `request:"mediaType=application/json"`
	ProjectID   int64                                                `pathParam:"style=simple,explode=false,name=project_id"`
	TeamID      int64                                                `pathParam:"style=simple,explode=false,name=team_id"`
}

// TeamsAddOrUpdateProjectPermissionsLegacy403ApplicationJSON - Forbidden if the project is not owned by the organization
type TeamsAddOrUpdateProjectPermissionsLegacy403ApplicationJSON struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

type TeamsAddOrUpdateProjectPermissionsLegacyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Forbidden if the project is not owned by the organization
	TeamsAddOrUpdateProjectPermissionsLegacy403ApplicationJSONObject *TeamsAddOrUpdateProjectPermissionsLegacy403ApplicationJSON
	// Validation failed
	ValidationError *shared.ValidationError
}
