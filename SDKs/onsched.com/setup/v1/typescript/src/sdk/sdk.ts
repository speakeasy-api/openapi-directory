/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Appointments } from "./appointments";
import { BusinessUsers } from "./businessusers";
import { Calendars } from "./calendars";
import { Companies } from "./companies";
import { Customers } from "./customers";
import { Locations } from "./locations";
import * as shared from "./models/shared";
import { ResourceGroups } from "./resourcegroups";
import { Resources } from "./resources";
import { ServiceGroups } from "./servicegroups";
import { Services } from "./services";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://sandbox-api.onsched.com/"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.
 *
 * @remarks
 * <br><br>
 * Take the API for a test drive. Just click on the Authorize button below and authenticate.
 * You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.
 * <br><br>
 * The API has two interfaces, consumer and setup.
 * <ul>
 * <li>
 * The consumer interface provides all the endpoints required for implementing consumer booking flows.
 * </li>
 * <li>
 * The setup interface provides endpoints for profile configuration and setup.
 * </li>
 * </ul>
 * Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.
 *
 */
export class SDK {
  public appointments: Appointments;
  public businessUsers: BusinessUsers;
  public calendars: Calendars;
  public companies: Companies;
  public customers: Customers;
  public locations: Locations;
  public resourceGroups: ResourceGroups;
  public resources: Resources;
  public serviceGroups: ServiceGroups;
  public services: Services;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.appointments = new Appointments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.businessUsers = new BusinessUsers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.calendars = new Calendars(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.companies = new Companies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customers = new Customers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.locations = new Locations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.resourceGroups = new ResourceGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.resources = new Resources(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.serviceGroups = new ServiceGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.services = new Services(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
