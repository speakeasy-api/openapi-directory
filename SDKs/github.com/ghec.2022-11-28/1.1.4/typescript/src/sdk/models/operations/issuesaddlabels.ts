/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class IssuesAddLabelsRequestBody4 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class IssuesAddLabelsRequestBody3Labels extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class IssuesAddLabelsRequestBody3 extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: IssuesAddLabelsRequestBody3Labels })
  @Expose({ name: "labels" })
  @Type(() => IssuesAddLabelsRequestBody3Labels)
  labels?: IssuesAddLabelsRequestBody3Labels[];
}

export class IssuesAddLabelsRequestBody1 extends SpeakeasyBase {
  /**
   * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/enterprise-cloud@latest//rest/reference/issues#set-labels-for-an-issue)."
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: string[];
}

export class IssuesAddLabelsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: any;

  /**
   * The number that identifies the issue.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=issue_number",
  })
  issueNumber: number;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class IssuesAddLabelsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Moved permanently
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.Label })
  labels?: shared.Label[];

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
