<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class WarmSpare 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return warm spare configuration for a switch
     * 
     * Return warm spare configuration for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse
     */
	public function getDeviceSwitchWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/warmSpare', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return MX warm spare settings
     * 
     * Return MX warm spare settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareResponse
     */
	public function getNetworkApplianceWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/warmSpare', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Swap MX primary and warm spare appliances
     * 
     * Swap MX primary and warm spare appliances
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareResponse
     */
	public function swapNetworkApplianceWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/warmSpare/swap', \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->swapNetworkApplianceWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update warm spare configuration for a switch
     * 
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse
     */
	public function updateDeviceSwitchWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/warmSpare', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update MX warm spare settings
     * 
     * Update MX warm spare settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareResponse
     */
	public function updateNetworkApplianceWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/warmSpare', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}