// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PutAPIV1FiltersIDSecurity struct {
	BearerAuth string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type PutAPIV1FiltersIDRequestBodyContextEnum string

const (
	PutAPIV1FiltersIDRequestBodyContextEnumHome          PutAPIV1FiltersIDRequestBodyContextEnum = "home"
	PutAPIV1FiltersIDRequestBodyContextEnumNotifications PutAPIV1FiltersIDRequestBodyContextEnum = "notifications"
	PutAPIV1FiltersIDRequestBodyContextEnumPublic        PutAPIV1FiltersIDRequestBodyContextEnum = "public"
	PutAPIV1FiltersIDRequestBodyContextEnumThread        PutAPIV1FiltersIDRequestBodyContextEnum = "thread"
)

func (e *PutAPIV1FiltersIDRequestBodyContextEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "home":
		fallthrough
	case "notifications":
		fallthrough
	case "public":
		fallthrough
	case "thread":
		*e = PutAPIV1FiltersIDRequestBodyContextEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAPIV1FiltersIDRequestBodyContextEnum: %s", s)
	}
}

type PutAPIV1FiltersIDRequestBody struct {
	// Array of enumerable strings `home`, `notifications`, `public`, `thread`. At least one context must be specified.
	Context []PutAPIV1FiltersIDRequestBodyContextEnum
	// Number of seconds from now the filter should expire. Otherwise, null for a filter that doesn't expire.
	ExpiresIn *int64
	// Should the server irreversibly drop matching entities from home and notifications?
	Irreversible *bool
	// Text to be filtered.
	Phrase string
	// Consider word boundaries?
	WholeWord *bool
}

type PutAPIV1FiltersIDRequest struct {
	RequestBody []byte `request:"mediaType=application/form-data"`
	// The id of the account in the database
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type PutAPIV1FiltersIDResponse struct {
	ContentType string
	// Invalid or missing Authorization header
	Error *shared.Error
	// Filter updated successfully.
	Filter      *shared.Filter
	StatusCode  int
	RawResponse *http.Response
}
