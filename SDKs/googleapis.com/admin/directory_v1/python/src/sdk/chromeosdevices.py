"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Chromeosdevices:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_chromeosdevices_action(self, request: operations.DirectoryChromeosdevicesActionRequest, security: operations.DirectoryChromeosdevicesActionSecurity) -> operations.DirectoryChromeosdevicesActionResponse:
        r"""Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryChromeosdevicesActionRequest, base_url, '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "chrome_os_device_action", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryChromeosdevicesActionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryChromeosdevicesActionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_chromeosdevices_get(self, request: operations.DirectoryChromeosdevicesGetRequest, security: operations.DirectoryChromeosdevicesGetSecurity) -> operations.DirectoryChromeosdevicesGetResponse:
        r"""Retrieves a Chrome OS device's properties."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryChromeosdevicesGetRequest, base_url, '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}', request)
        
        query_params = utils.get_query_params(operations.DirectoryChromeosdevicesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryChromeosdevicesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChromeOsDevice])
                res.chrome_os_device = out

        return res

    def directory_chromeosdevices_list(self, request: operations.DirectoryChromeosdevicesListRequest, security: operations.DirectoryChromeosdevicesListSecurity) -> operations.DirectoryChromeosdevicesListResponse:
        r"""Retrieves a paginated list of Chrome OS devices within an account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryChromeosdevicesListRequest, base_url, '/admin/directory/v1/customer/{customerId}/devices/chromeos', request)
        
        query_params = utils.get_query_params(operations.DirectoryChromeosdevicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryChromeosdevicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChromeOsDevices])
                res.chrome_os_devices = out

        return res

    def directory_chromeosdevices_move_devices_to_ou(self, request: operations.DirectoryChromeosdevicesMoveDevicesToOuRequest, security: operations.DirectoryChromeosdevicesMoveDevicesToOuSecurity) -> operations.DirectoryChromeosdevicesMoveDevicesToOuResponse:
        r"""Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryChromeosdevicesMoveDevicesToOuRequest, base_url, '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "chrome_os_move_devices_to_ou", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryChromeosdevicesMoveDevicesToOuRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryChromeosdevicesMoveDevicesToOuResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_chromeosdevices_patch(self, request: operations.DirectoryChromeosdevicesPatchRequest, security: operations.DirectoryChromeosdevicesPatchSecurity) -> operations.DirectoryChromeosdevicesPatchResponse:
        r"""Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryChromeosdevicesPatchRequest, base_url, '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "chrome_os_device", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryChromeosdevicesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryChromeosdevicesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChromeOsDevice])
                res.chrome_os_device = out

        return res

    def directory_chromeosdevices_update(self, request: operations.DirectoryChromeosdevicesUpdateRequest, security: operations.DirectoryChromeosdevicesUpdateSecurity) -> operations.DirectoryChromeosdevicesUpdateResponse:
        r"""Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryChromeosdevicesUpdateRequest, base_url, '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "chrome_os_device", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryChromeosdevicesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryChromeosdevicesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChromeOsDevice])
                res.chrome_os_device = out

        return res

    