// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartProjectVersionXAmzTargetEnum
type StartProjectVersionXAmzTargetEnum string

const (
	StartProjectVersionXAmzTargetEnumRekognitionServiceStartProjectVersion StartProjectVersionXAmzTargetEnum = "RekognitionService.StartProjectVersion"
)

func (e StartProjectVersionXAmzTargetEnum) ToPointer() *StartProjectVersionXAmzTargetEnum {
	return &e
}

func (e *StartProjectVersionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RekognitionService.StartProjectVersion":
		*e = StartProjectVersionXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartProjectVersionXAmzTargetEnum: %v", v)
	}
}

type StartProjectVersionRequest struct {
	StartProjectVersionRequest shared.StartProjectVersionRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 StartProjectVersionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartProjectVersionResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerError
	InternalServerError interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	StartProjectVersionResponse *shared.StartProjectVersionResponse
	StatusCode                  int
	RawResponse                 *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
