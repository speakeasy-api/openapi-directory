"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetLoadBalancersIDActionsSortParameterSortEnum(str, Enum):
    r"""Can be used multiple times."""
    ID = 'id'
    ID_ASC = 'id:asc'
    ID_DESC = 'id:desc'
    COMMAND = 'command'
    COMMAND_ASC = 'command:asc'
    COMMAND_DESC = 'command:desc'
    STATUS = 'status'
    STATUS_ASC = 'status:asc'
    STATUS_DESC = 'status:desc'
    PROGRESS = 'progress'
    PROGRESS_ASC = 'progress:asc'
    PROGRESS_DESC = 'progress:desc'
    STARTED = 'started'
    STARTED_ASC = 'started:asc'
    STARTED_DESC = 'started:desc'
    FINISHED = 'finished'
    FINISHED_ASC = 'finished:asc'
    FINISHED_DESC = 'finished:desc'

class GetLoadBalancersIDActionsStatusParameterStatusEnum(str, Enum):
    r"""Can be used multiple times, the response will contain only Actions with specified statuses"""
    RUNNING = 'running'
    SUCCESS = 'success'
    ERROR = 'error'


@dataclasses.dataclass
class GetLoadBalancersIDActionsRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the Load Balancer"""  
    sort: Optional[GetLoadBalancersIDActionsSortParameterSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times."""  
    status: Optional[GetLoadBalancersIDActionsStatusParameterStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times, the response will contain only Actions with specified statuses"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLoadBalancersIDActionsActionsResponseActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLoadBalancersIDActionsActionsResponseActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class GetLoadBalancersIDActionsActionsResponseActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLoadBalancersIDActionsActionsResponseAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: GetLoadBalancersIDActionsActionsResponseActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[GetLoadBalancersIDActionsActionsResponseActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: GetLoadBalancersIDActionsActionsResponseActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLoadBalancersIDActionsActionsResponseMetaPagination:
    
    last_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_page') }})
    r"""ID of the last page available. Can be null if the current page is the last one."""  
    next_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page') }})
    r"""ID of the next page. Can be null if the current page is the last one."""  
    page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page') }})
    r"""Current page number"""  
    per_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page') }})
    r"""Maximum number of items shown per page in the response"""  
    previous_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page') }})
    r"""ID of the previous page. Can be null if the current page is the first one."""  
    total_entries: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_entries') }})
    r"""The total number of entries that exist in the database for this query. Nullable if unknown."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLoadBalancersIDActionsActionsResponseMeta:
    
    pagination: GetLoadBalancersIDActionsActionsResponseMetaPagination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLoadBalancersIDActionsActionsResponse:
    r"""The `actions` key contains a list of Actions"""
    
    actions: list[GetLoadBalancersIDActionsActionsResponseAction] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions') }})  
    meta: Optional[GetLoadBalancersIDActionsActionsResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetLoadBalancersIDActionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    actions_response: Optional[GetLoadBalancersIDActionsActionsResponse] = dataclasses.field(default=None)
    r"""The `actions` key contains a list of Actions"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    