/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

/**
 * An engine for the workflow.
 */
export enum CreateWorkflowRequestBodyEngineEnum {
  Wdl = "WDL",
  Nextflow = "NEXTFLOW",
}

export class CreateWorkflowRequestBody extends SpeakeasyBase {
  /**
   * The URI of a definition for the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "definitionUri" })
  definitionUri?: string;

  /**
   * A ZIP archive for the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "definitionZip" })
  definitionZip?: string;

  /**
   * A description for the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * An engine for the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "engine" })
  engine?: CreateWorkflowRequestBodyEngineEnum;

  /**
   * The path of the main definition file for the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "main" })
  main?: string;

  /**
   * A name for the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * A parameter template for the workflow.
   */
  @SpeakeasyMetadata({ elemType: shared.WorkflowParameter })
  @Expose({ name: "parameterTemplate" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.WorkflowParameter> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.WorkflowParameter);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameterTemplate?: Record<string, shared.WorkflowParameter>;

  /**
   * To ensure that requests don't run multiple times, specify a unique ID for each request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * A storage capacity for the workflow in gigabytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storageCapacity" })
  storageCapacity?: number;

  /**
   * Tags for the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateWorkflowRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateWorkflowRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateWorkflowResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createWorkflowResponse?: shared.CreateWorkflowResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * RequestTimeoutException
   */
  @SpeakeasyMetadata()
  requestTimeoutException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
