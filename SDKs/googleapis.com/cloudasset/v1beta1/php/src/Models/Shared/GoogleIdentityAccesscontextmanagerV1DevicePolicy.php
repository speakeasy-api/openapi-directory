<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleIdentityAccesscontextmanagerV1DevicePolicy - `DevicePolicy` specifies device specific restrictions necessary to acquire a given access level. A `DevicePolicy` specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. `DevicePolicy` acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleIdentityAccesscontextmanagerV1DevicePolicy
{
    /**
     * Allowed device management levels, an empty list allows all management levels.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GoogleIdentityAccesscontextmanagerV1DevicePolicyAllowedDeviceManagementLevelsEnum> $allowedDeviceManagementLevels
     */
	#[\JMS\Serializer\Annotation\SerializedName('allowedDeviceManagementLevels')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\GoogleIdentityAccesscontextmanagerV1DevicePolicyAllowedDeviceManagementLevelsEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $allowedDeviceManagementLevels = null;
    
    /**
     * Allowed encryptions statuses, an empty list allows all statuses.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GoogleIdentityAccesscontextmanagerV1DevicePolicyAllowedEncryptionStatusesEnum> $allowedEncryptionStatuses
     */
	#[\JMS\Serializer\Annotation\SerializedName('allowedEncryptionStatuses')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\GoogleIdentityAccesscontextmanagerV1DevicePolicyAllowedEncryptionStatusesEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $allowedEncryptionStatuses = null;
    
    /**
     * Allowed OS versions, an empty list allows all types and all versions.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GoogleIdentityAccesscontextmanagerV1OsConstraint> $osConstraints
     */
	#[\JMS\Serializer\Annotation\SerializedName('osConstraints')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\GoogleIdentityAccesscontextmanagerV1OsConstraint>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $osConstraints = null;
    
    /**
     * Whether the device needs to be approved by the customer admin.
     * 
     * @var ?bool $requireAdminApproval
     */
	#[\JMS\Serializer\Annotation\SerializedName('requireAdminApproval')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requireAdminApproval = null;
    
    /**
     * Whether the device needs to be corp owned.
     * 
     * @var ?bool $requireCorpOwned
     */
	#[\JMS\Serializer\Annotation\SerializedName('requireCorpOwned')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requireCorpOwned = null;
    
    /**
     * Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`.
     * 
     * @var ?bool $requireScreenlock
     */
	#[\JMS\Serializer\Annotation\SerializedName('requireScreenlock')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requireScreenlock = null;
    
	public function __construct()
	{
		$this->allowedDeviceManagementLevels = null;
		$this->allowedEncryptionStatuses = null;
		$this->osConstraints = null;
		$this->requireAdminApproval = null;
		$this->requireCorpOwned = null;
		$this->requireScreenlock = null;
	}
}
