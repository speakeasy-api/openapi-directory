"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Reservations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def acknowledgment_reservation(self, request: operations.AcknowledgmentReservationRequest) -> operations.AcknowledgmentReservationResponse:
        r"""Acknowledgment reservation
        Acknowledges reservations made by reservation ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AcknowledgmentReservationRequest, base_url, '/api/logistics/pvt/inventory/reservations/{reservationId}/acknowledge', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AcknowledgmentReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def cancel_reservation(self, request: operations.CancelReservationRequest) -> operations.CancelReservationResponse:
        r"""Cancel reservation
        Cancels reservation by reservation ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelReservationRequest, base_url, '/api/logistics/pvt/inventory/reservations/{reservationId}/cancel', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def confirm_reservation(self, request: operations.ConfirmReservationRequest) -> operations.ConfirmReservationResponse:
        r"""Confirm reservation
        Confirms reservation by reservation ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfirmReservationRequest, base_url, '/api/logistics/pvt/inventory/reservations/{reservationId}/confirm', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_reservation(self, request: operations.CreateReservationRequest) -> operations.CreateReservationResponse:
        r"""Create reservation
        Creates [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/logistics/pvt/inventory/reservations'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateReservation200ApplicationJSON])
                res.create_reservation_200_application_json_object = out

        return res

    def reservation_by_id(self, request: operations.ReservationByIDRequest) -> operations.ReservationByIDResponse:
        r"""List reservation by ID
        Lists reservation's information by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReservationByIDRequest, base_url, '/api/logistics/pvt/inventory/reservations/{reservationId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReservationByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ReservationByID200ApplicationJSON])
                res.reservation_by_id_200_application_json_object = out

        return res

    def reservationby_warehouseand_sku(self, request: operations.ReservationbyWarehouseandSkuRequest) -> operations.ReservationbyWarehouseandSkuResponse:
        r"""List reservation by warehouse and SKU
        Lists reservations in your store, by searching through warehouse and SKU.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReservationbyWarehouseandSkuRequest, base_url, '/api/logistics/pvt/inventory/reservations/{warehouseId}/{skuId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReservationbyWarehouseandSkuResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    