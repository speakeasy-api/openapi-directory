/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Matcher {
    /**
     * Insert in this field any notes about the approval. This field is optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Description")
    public String description;

    public Matcher withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Whether the matcher is active in the account (`true`), or not (`false`).
     */
    @JsonProperty("IsActive")
    public Boolean isActive;

    public Matcher withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }
    
    /**
     * Identifies the matching entity. It can be either VTEX's matcher, or an external matcher developed by partners, for example. The `matcherId`'s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.
     */
    @JsonProperty("MatcherId")
    public String matcherId;

    public Matcher withMatcherId(String matcherId) {
        this.matcherId = matcherId;
        return this;
    }
    
    /**
     * The Received SKUs module uses this endpoint to send updates about a suggestion, to the chosen Matcher.
     */
    @JsonProperty("UpdatesNotificationEndpoint")
    public String updatesNotificationEndpoint;

    public Matcher withUpdatesNotificationEndpoint(String updatesNotificationEndpoint) {
        this.updatesNotificationEndpoint = updatesNotificationEndpoint;
        return this;
    }
    
    /**
     * The chosen Matcher's url. It is the endpoint that the Received SKUs module calls, to send new suggestions for the Matcher's review.
     */
    @JsonProperty("hook-base-address")
    public String hookBaseAddress;

    public Matcher withHookBaseAddress(String hookBaseAddress) {
        this.hookBaseAddress = hookBaseAddress;
        return this;
    }
    
    public Matcher(@JsonProperty("IsActive") Boolean isActive, @JsonProperty("MatcherId") String matcherId, @JsonProperty("UpdatesNotificationEndpoint") String updatesNotificationEndpoint, @JsonProperty("hook-base-address") String hookBaseAddress) {
        this.isActive = isActive;
        this.matcherId = matcherId;
        this.updatesNotificationEndpoint = updatesNotificationEndpoint;
        this.hookBaseAddress = hookBaseAddress;
  }
}
