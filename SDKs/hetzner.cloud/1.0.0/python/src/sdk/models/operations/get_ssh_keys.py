"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetSSHKeysSortEnum(str, Enum):
    r"""Can be used multiple times."""
    ID = 'id'
    ID_ASC = 'id:asc'
    ID_DESC = 'id:desc'
    NAME = 'name'
    NAME_ASC = 'name:asc'
    NAME_DESC = 'name:desc'


@dataclasses.dataclass
class GetSSHKeysRequest:
    
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fingerprint', 'style': 'form', 'explode': True }})
    r"""Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint."""  
    label_selector: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label_selector', 'style': 'form', 'explode': True }})
    r"""Can be used to filter resources by labels. The response will only contain resources matching the label selector."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Can be used to filter resources by their name. The response will only contain the resources matching the specified name"""  
    sort: Optional[GetSSHKeysSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSSHKeys200ApplicationJSONMetaPagination:
    
    last_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_page') }})
    r"""ID of the last page available. Can be null if the current page is the last one."""  
    next_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page') }})
    r"""ID of the next page. Can be null if the current page is the last one."""  
    page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page') }})
    r"""Current page number"""  
    per_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page') }})
    r"""Maximum number of items shown per page in the response"""  
    previous_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page') }})
    r"""ID of the previous page. Can be null if the current page is the first one."""  
    total_entries: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_entries') }})
    r"""The total number of entries that exist in the database for this query. Nullable if unknown."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSSHKeys200ApplicationJSONMeta:
    
    pagination: GetSSHKeys200ApplicationJSONMetaPagination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSSHKeys200ApplicationJSONSSHKeys:
    
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    fingerprint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint') }})
    r"""Fingerprint of public key"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    public_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_key') }})
    r"""Public key"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSSHKeys200ApplicationJSON:
    r"""The `ssh_keys` key in the reply contains an array of SSH key objects with this structure"""
    
    ssh_keys: list[GetSSHKeys200ApplicationJSONSSHKeys] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssh_keys') }})  
    meta: Optional[GetSSHKeys200ApplicationJSONMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetSSHKeysResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_ssh_keys_200_application_json_object: Optional[GetSSHKeys200ApplicationJSON] = dataclasses.field(default=None)
    r"""The `ssh_keys` key in the reply contains an array of SSH key objects with this structure"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    