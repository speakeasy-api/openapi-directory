/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IssueTokenRequest - Object representing the token to be created
 */
public class IssueTokenRequest {
    /**
     * Number of tokens to issue
     */
    @JsonProperty("amount")
    public Double amount;

    public IssueTokenRequest withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Number of decimal places the token should be divisble by (0-7)
     */
    @JsonProperty("divisibility")
    public Double divisibility;

    public IssueTokenRequest withDivisibility(Double divisibility) {
        this.divisibility = divisibility;
        return this;
    }
    
    /**
     * Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)
     */
    @JsonProperty("fee")
    public Double fee;

    public IssueTokenRequest withFee(Double fee) {
        this.fee = fee;
        return this;
    }
    
    /**
     * Object representing flags that potentialy modify this transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flags")
    public IssueTokenRequestFlags flags;

    public IssueTokenRequest withFlags(IssueTokenRequestFlags flags) {
        this.flags = flags;
        return this;
    }
    
    /**
     * Address issuing the token
     */
    @JsonProperty("issueAddress")
    public String issueAddress;

    public IssueTokenRequest withIssueAddress(String issueAddress) {
        this.issueAddress = issueAddress;
        return this;
    }
    
    /**
     * Object representing all metadata at token issuance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public IssueTokenRequestMetadata metadata;

    public IssueTokenRequest withMetadata(IssueTokenRequestMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * whether the token should be reissuable
     */
    @JsonProperty("reissuable")
    public Boolean reissuable;

    public IssueTokenRequest withReissuable(Boolean reissuable) {
        this.reissuable = reissuable;
        return this;
    }
    
    @JsonProperty("transfer")
    public IssueTokenRequestTransfer[] transfer;

    public IssueTokenRequest withTransfer(IssueTokenRequestTransfer[] transfer) {
        this.transfer = transfer;
        return this;
    }
    
    public IssueTokenRequest(@JsonProperty("amount") Double amount, @JsonProperty("divisibility") Double divisibility, @JsonProperty("fee") Double fee, @JsonProperty("issueAddress") String issueAddress, @JsonProperty("reissuable") Boolean reissuable, @JsonProperty("transfer") IssueTokenRequestTransfer[] transfer) {
        this.amount = amount;
        this.divisibility = divisibility;
        this.fee = fee;
        this.issueAddress = issueAddress;
        this.reissuable = reissuable;
        this.transfer = transfer;
  }
}
