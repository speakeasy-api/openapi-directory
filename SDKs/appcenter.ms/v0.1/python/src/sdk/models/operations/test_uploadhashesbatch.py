"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class TestUploadHashesBatchSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class TestUploadHashesBatchTestCloudFileHashFileTypeEnum(str, Enum):
    r"""Type of the file"""
    DSYM_FILE = 'dsym-file'
    APP_FILE = 'app-file'
    TEST_FILE = 'test-file'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUploadHashesBatchTestCloudFileHash:
    r"""Hash, type, path and byte range of a file that is required in test run"""
    
    checksum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checksum') }})
    r"""SHA256 hash of the file"""  
    file_type: TestUploadHashesBatchTestCloudFileHashFileTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileType') }})
    r"""Type of the file"""  
    relative_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativePath') }})
    r"""Relative path of the file"""  
    

@dataclasses.dataclass
class TestUploadHashesBatchRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: list[TestUploadHashesBatchTestCloudFileHash] = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""File hash information"""  
    test_run_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'test_run_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the test run"""  
    
class TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum(str, Enum):
    r"""Type of the file"""
    DSYM_FILE = 'dsym-file'
    APP_FILE = 'app-file'
    TEST_FILE = 'test-file'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUploadHashesBatchTestCloudFileHashResponseTestCloudHashUploadStatus:
    r"""Status of the upload"""
    
    status_code: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusCode') }})
    r"""HTTP status code that represent result of upload"""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUploadHashesBatchTestCloudFileHashResponse:
    r"""Response message for single uploaded file hash"""
    
    checksum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checksum') }})
    r"""SHA256 hash of the file"""  
    file_type: TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileType') }})
    r"""Type of the file"""  
    upload_status: TestUploadHashesBatchTestCloudFileHashResponseTestCloudHashUploadStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploadStatus') }})
    r"""Status of the upload"""  
    relative_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativePath'), 'exclude': lambda f: f is None }})
    r"""Relative path of the file"""  
    

@dataclasses.dataclass
class TestUploadHashesBatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    test_cloud_file_hash_responses: Optional[list[TestUploadHashesBatchTestCloudFileHashResponse]] = dataclasses.field(default=None)
    r"""OK"""  
    