/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Address {
    /**
     * \u2018Attn.\u2019 (if applicable). Only applicable for B2B customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attention")
    public String attention;

    public Address withAttention(String attention) {
        this.attention = attention;
        return this;
    }
    
    /**
     * Customer\u2019s city.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;

    public Address withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * Customer\u2019s country. This value overrides the purchase country if they are different. Should follow the standard of ISO 3166 alpha-2. E.g. GB, US, DE, SE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public Address withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Customer\u2019s email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public Address withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Customers family name in UTF-8 encoding.
     * Cannot be only numbers, must be more than 1 character.
     * Allowed special characters: -'\u2019.
     * More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("family_name")
    public String familyName;

    public Address withFamilyName(String familyName) {
        this.familyName = familyName;
        return this;
    }
    
    /**
     * Customers given name in UTF-8 encoding.
     * Cannot be only numbers, must be more than 1 character.
     * Allowed special characters: -'\u2019.
     * More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("given_name")
    public String givenName;

    public Address withGivenName(String givenName) {
        this.givenName = givenName;
        return this;
    }
    
    /**
     * Organization name (if applicable). Only applicable for B2B customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_name")
    public String organizationName;

    public Address withOrganizationName(String organizationName) {
        this.organizationName = organizationName;
        return this;
    }
    
    /**
     * Phone number. Preferably a mobile phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    public String phone;

    public Address withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * Customer\u2019s postal code. Validation according to Universal Postal Union addressing systems.
     * E.g. 12345, W1G OPW.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    public String postalCode;

    public Address withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * Customer\u2019s region or state - Mandatory for US and AU market. Validations according to ISO 3166-2 format, e.g. OH, NJ, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;

    public Address withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * Customer\u2019s street address. Regional formatting is required, as follows:
     * UK/US/FR: 33 Cavendish Square
     * Rest of EU: De Ruijterkade 7
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_address")
    public String streetAddress;

    public Address withStreetAddress(String streetAddress) {
        this.streetAddress = streetAddress;
        return this;
    }
    
    /**
     * Customer\u2019s street address. Second Line. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_address2")
    public String streetAddress2;

    public Address withStreetAddress2(String streetAddress2) {
        this.streetAddress2 = streetAddress2;
        return this;
    }
    
    /**
     * Customer\u2019s Title. Allowed values per country:
     * UK - "Mr", "Ms"
     * DE - "Herr", "Frau"
     * AT: "Herr, "Frau"
     * CH: de-CH: "Herr, "Frau" it-CH: "Sig.", "Sig.ra" fr-CH: "M", "Mme" 
     * BE: "Dhr.", "Mevr."
     * NL: "Dhr.", "Mevr."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Address withTitle(String title) {
        this.title = title;
        return this;
    }
    
    public Address(){}
}
