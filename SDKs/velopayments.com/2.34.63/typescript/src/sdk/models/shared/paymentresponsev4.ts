/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PaymentEventResponse } from "./paymenteventresponse";
import { PaymentResponseV4Payout } from "./paymentresponsev4payout";
import { PayoutSchedule } from "./payoutschedule";
import { PostInstructFxInfo } from "./postinstructfxinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * 200 response, request completed okay
 */
export class PaymentResponseV4 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accountName" })
  accountName?: string;

  /**
   * The account number for the account which will receive the payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountNumber" })
  accountNumber?: string;

  /**
   * Populated with rejection reason code if the payment was withdrawn automatically at instruct time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoWithdrawnReasonCode" })
  autoWithdrawnReasonCode?: string;

  /**
   * The country code of the payment channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "countryCode" })
  countryCode?: string;

  @SpeakeasyMetadata({ elemType: PaymentEventResponse })
  @Expose({ name: "events" })
  @Type(() => PaymentEventResponse)
  events: PaymentEventResponse[];

  /**
   * ACH file payment was submitted in, if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filenameReference" })
  filenameReference?: string;

  /**
   * Current funding status of the payment. One of the following values: FUNDED, INSTRUCTED, UNFUNDED
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fundingStatus" })
  fundingStatus: string;

  /**
   * The iban for the payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iban" })
  iban?: string;

  /**
   * Individual Identification Number assigned to the payment in the ACH file, if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "individualIdentificationNumber" })
  individualIdentificationNumber?: string;

  /**
   * The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invertedRate" })
  invertedRate?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "isPaymentCcyBaseCcy" })
  isPaymentCcyBaseCcy?: boolean;

  /**
   * The country code of the payee's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payeeAddressCountryCode" })
  payeeAddressCountryCode?: string;

  /**
   * The id of the paymeee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payeeId" })
  payeeId: string;

  /**
   * The amount which the payee will receive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentAmount" })
  paymentAmount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "paymentChannelId" })
  paymentChannelId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "paymentChannelName" })
  paymentChannelName?: string;

  /**
   * ISO-4217 3 character currency code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentCurrency" })
  paymentCurrency?: string;

  /**
   * The id of the payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentId" })
  paymentId: string;

  /**
   * The payment memo set by the payor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentMemo" })
  paymentMemo?: string;

  /**
   * Metadata for the payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentMetadata" })
  paymentMetadata?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "paymentScheme" })
  paymentScheme?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "paymentTrackingReference" })
  paymentTrackingReference?: string;

  /**
   * The id of the payor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payorId" })
  payorId: string;

  /**
   * The name of the payor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payorName" })
  payorName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payorPaymentId" })
  payorPaymentId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payout" })
  @Type(() => PaymentResponseV4Payout)
  payout?: PaymentResponseV4Payout;

  /**
   * FX details relating to a payout that was executed or is still waiting to be executed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postInstructFxInfo" })
  @Type(() => PostInstructFxInfo)
  postInstructFxInfo?: PostInstructFxInfo;

  /**
   * The quote Id used for the FX
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quoteId" })
  quoteId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "railsBatchId" })
  railsBatchId?: string;

  /**
   * The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "railsId" })
  railsId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "railsPaymentId" })
  railsPaymentId?: string;

  /**
   * The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rate" })
  rate?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "rejectionReason" })
  rejectionReason?: string;

  /**
   * The remote id by which the payor refers to the payee. Only populated once payment is confirmed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remoteId" })
  remoteId?: string;

  /**
   * The velo id of the remote system orchestrating the payment. Not populated for normal Velo payments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remoteSystemId" })
  remoteSystemId?: string;

  /**
   * The id of the payment in the remote system. Not populated for normal Velo payments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remoteSystemPaymentId" })
  remoteSystemPaymentId?: string;

  /**
   * The return cost if a returned payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "returnCost" })
  returnCost?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "returnReason" })
  returnReason?: string;

  /**
   * The routing number for the payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "routingNumber" })
  routingNumber?: string;

  /**
   * Details relating to a payout that was executed via a schedule or is still waiting to be executed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedule" })
  @Type(() => PayoutSchedule)
  schedule?: PayoutSchedule;

  /**
   * The id of the source account from which the payment was taken
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceAccountId" })
  sourceAccountId: string;

  /**
   * The name of the source account from which the payment was taken
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceAccountName" })
  sourceAccountName?: string;

  /**
   * The source amount for the payment (amount debited to make the payment)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceAmount" })
  sourceAmount?: number;

  /**
   * ISO-4217 3 character currency code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceCurrency" })
  sourceCurrency?: string;

  /**
   * Current status of the payment. One of the following values: ACCEPTED, AWAITING_FUNDS, FUNDED, UNFUNDED, BANK_PAYMENT_REQUESTED, REJECTED, ACCEPTED_BY_RAILS, CONFIRMED, RETURNED, WITHDRAWN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: string;

  @SpeakeasyMetadata()
  @Expose({ name: "submittedDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  submittedDateTime: Date;

  /**
   * Trace Number assigned to the payment in the ACH file, if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "traceNumber" })
  traceNumber?: string;

  /**
   * The transmission type of the payment, e.g. ACH, SAME_DAY_ACH, WIRE, GACHO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transmissionType" })
  transmissionType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "withdrawable" })
  withdrawable?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "withdrawnReason" })
  withdrawnReason?: string;
}
