// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateTableBorderPropertiesRequestBorderPositionEnum - The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.
type UpdateTableBorderPropertiesRequestBorderPositionEnum string

const (
	UpdateTableBorderPropertiesRequestBorderPositionEnumAll             UpdateTableBorderPropertiesRequestBorderPositionEnum = "ALL"
	UpdateTableBorderPropertiesRequestBorderPositionEnumBottom          UpdateTableBorderPropertiesRequestBorderPositionEnum = "BOTTOM"
	UpdateTableBorderPropertiesRequestBorderPositionEnumInner           UpdateTableBorderPropertiesRequestBorderPositionEnum = "INNER"
	UpdateTableBorderPropertiesRequestBorderPositionEnumInnerHorizontal UpdateTableBorderPropertiesRequestBorderPositionEnum = "INNER_HORIZONTAL"
	UpdateTableBorderPropertiesRequestBorderPositionEnumInnerVertical   UpdateTableBorderPropertiesRequestBorderPositionEnum = "INNER_VERTICAL"
	UpdateTableBorderPropertiesRequestBorderPositionEnumLeft            UpdateTableBorderPropertiesRequestBorderPositionEnum = "LEFT"
	UpdateTableBorderPropertiesRequestBorderPositionEnumOuter           UpdateTableBorderPropertiesRequestBorderPositionEnum = "OUTER"
	UpdateTableBorderPropertiesRequestBorderPositionEnumRight           UpdateTableBorderPropertiesRequestBorderPositionEnum = "RIGHT"
	UpdateTableBorderPropertiesRequestBorderPositionEnumTop             UpdateTableBorderPropertiesRequestBorderPositionEnum = "TOP"
)

func (e UpdateTableBorderPropertiesRequestBorderPositionEnum) ToPointer() *UpdateTableBorderPropertiesRequestBorderPositionEnum {
	return &e
}

func (e *UpdateTableBorderPropertiesRequestBorderPositionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "BOTTOM":
		fallthrough
	case "INNER":
		fallthrough
	case "INNER_HORIZONTAL":
		fallthrough
	case "INNER_VERTICAL":
		fallthrough
	case "LEFT":
		fallthrough
	case "OUTER":
		fallthrough
	case "RIGHT":
		fallthrough
	case "TOP":
		*e = UpdateTableBorderPropertiesRequestBorderPositionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTableBorderPropertiesRequestBorderPositionEnum: %v", v)
	}
}

// UpdateTableBorderPropertiesRequest - Updates the properties of the table borders in a Table.
type UpdateTableBorderPropertiesRequest struct {
	// The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.
	BorderPosition *UpdateTableBorderPropertiesRequestBorderPositionEnum `json:"borderPosition,omitempty"`
	// The fields that should be updated. At least one field must be specified. The root `tableBorderProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table border solid fill color, set `fields` to `"tableBorderFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
	Fields *string `json:"fields,omitempty"`
	// The object ID of the table.
	ObjectID *string `json:"objectId,omitempty"`
	// The border styling properties of the TableBorderCell.
	TableBorderProperties *TableBorderProperties `json:"tableBorderProperties,omitempty"`
	// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with location = (0, 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
	TableRange *TableRange `json:"tableRange,omitempty"`
}
