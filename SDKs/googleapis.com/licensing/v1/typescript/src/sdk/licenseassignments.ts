/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class LicenseAssignments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Revoke a license.
   */
  licensingLicenseAssignmentsDelete(
    req: operations.LicensingLicenseAssignmentsDeleteRequest,
    security: operations.LicensingLicenseAssignmentsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensingLicenseAssignmentsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensingLicenseAssignmentsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LicensingLicenseAssignmentsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensingLicenseAssignmentsDeleteResponse =
        new operations.LicensingLicenseAssignmentsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific user's license by product SKU.
   */
  licensingLicenseAssignmentsGet(
    req: operations.LicensingLicenseAssignmentsGetRequest,
    security: operations.LicensingLicenseAssignmentsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensingLicenseAssignmentsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensingLicenseAssignmentsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LicensingLicenseAssignmentsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensingLicenseAssignmentsGetResponse =
        new operations.LicensingLicenseAssignmentsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseAssignment = utils.objectToClass(
              httpRes?.data,
              shared.LicenseAssignment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Assign a license.
   */
  licensingLicenseAssignmentsInsert(
    req: operations.LicensingLicenseAssignmentsInsertRequest,
    security: operations.LicensingLicenseAssignmentsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensingLicenseAssignmentsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensingLicenseAssignmentsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apps/licensing/v1/product/{productId}/sku/{skuId}/user",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "licenseAssignmentInsert",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LicensingLicenseAssignmentsInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensingLicenseAssignmentsInsertResponse =
        new operations.LicensingLicenseAssignmentsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseAssignment = utils.objectToClass(
              httpRes?.data,
              shared.LicenseAssignment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all users assigned licenses for a specific product SKU.
   */
  licensingLicenseAssignmentsListForProduct(
    req: operations.LicensingLicenseAssignmentsListForProductRequest,
    security: operations.LicensingLicenseAssignmentsListForProductSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensingLicenseAssignmentsListForProductResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensingLicenseAssignmentsListForProductRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apps/licensing/v1/product/{productId}/users",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.LicensingLicenseAssignmentsListForProductSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensingLicenseAssignmentsListForProductResponse =
        new operations.LicensingLicenseAssignmentsListForProductResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseAssignmentList = utils.objectToClass(
              httpRes?.data,
              shared.LicenseAssignmentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all users assigned licenses for a specific product SKU.
   */
  licensingLicenseAssignmentsListForProductAndSku(
    req: operations.LicensingLicenseAssignmentsListForProductAndSkuRequest,
    security: operations.LicensingLicenseAssignmentsListForProductAndSkuSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensingLicenseAssignmentsListForProductAndSkuResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.LicensingLicenseAssignmentsListForProductAndSkuRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apps/licensing/v1/product/{productId}/sku/{skuId}/users",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.LicensingLicenseAssignmentsListForProductAndSkuSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensingLicenseAssignmentsListForProductAndSkuResponse =
        new operations.LicensingLicenseAssignmentsListForProductAndSkuResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseAssignmentList = utils.objectToClass(
              httpRes?.data,
              shared.LicenseAssignmentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reassign a user's product SKU with a different SKU in the same product. This method supports patch semantics.
   */
  licensingLicenseAssignmentsPatch(
    req: operations.LicensingLicenseAssignmentsPatchRequest,
    security: operations.LicensingLicenseAssignmentsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensingLicenseAssignmentsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensingLicenseAssignmentsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "licenseAssignment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LicensingLicenseAssignmentsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensingLicenseAssignmentsPatchResponse =
        new operations.LicensingLicenseAssignmentsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseAssignment = utils.objectToClass(
              httpRes?.data,
              shared.LicenseAssignment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reassign a user's product SKU with a different SKU in the same product.
   */
  licensingLicenseAssignmentsUpdate(
    req: operations.LicensingLicenseAssignmentsUpdateRequest,
    security: operations.LicensingLicenseAssignmentsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensingLicenseAssignmentsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensingLicenseAssignmentsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "licenseAssignment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LicensingLicenseAssignmentsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensingLicenseAssignmentsUpdateResponse =
        new operations.LicensingLicenseAssignmentsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseAssignment = utils.objectToClass(
              httpRes?.data,
              shared.LicenseAssignment
            );
          }
          break;
      }

      return res;
    });
  }
}
