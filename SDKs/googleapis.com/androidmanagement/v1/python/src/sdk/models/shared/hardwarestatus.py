"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HardwareStatus:
    r"""Hardware status. Temperatures may be compared to the temperature thresholds available in hardwareInfo to determine hardware health."""
    
    battery_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batteryTemperatures'), 'exclude': lambda f: f is None }})
    r"""Current battery temperatures in Celsius for each battery on the device."""  
    cpu_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuTemperatures'), 'exclude': lambda f: f is None }})
    r"""Current CPU temperatures in Celsius for each CPU on the device."""  
    cpu_usages: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuUsages'), 'exclude': lambda f: f is None }})
    r"""CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged core. Empty array implies that CPU usage is not supported in the system."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""The time the measurements were taken."""  
    fan_speeds: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fanSpeeds'), 'exclude': lambda f: f is None }})
    r"""Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan speed is not supported on the system."""  
    gpu_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gpuTemperatures'), 'exclude': lambda f: f is None }})
    r"""Current GPU temperatures in Celsius for each GPU on the device."""  
    skin_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skinTemperatures'), 'exclude': lambda f: f is None }})
    r"""Current device skin temperatures in Celsius."""  
    