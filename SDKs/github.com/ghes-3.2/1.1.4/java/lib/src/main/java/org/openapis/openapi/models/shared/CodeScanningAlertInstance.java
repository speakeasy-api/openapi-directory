/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CodeScanningAlertInstance {
    /**
     * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("analysis_key")
    public String analysisKey;

    public CodeScanningAlertInstance withAnalysisKey(String analysisKey) {
        this.analysisKey = analysisKey;
        return this;
    }
    
    /**
     * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public String category;

    public CodeScanningAlertInstance withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * Classifications that have been applied to the file that triggered the alert.
     * For example identifying it as documentation, or a generated file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classifications")
    public CodeScanningAlertClassificationEnum[] classifications;

    public CodeScanningAlertInstance withClassifications(CodeScanningAlertClassificationEnum[] classifications) {
        this.classifications = classifications;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commit_sha")
    public String commitSha;

    public CodeScanningAlertInstance withCommitSha(String commitSha) {
        this.commitSha = commitSha;
        return this;
    }
    
    /**
     * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public String environment;

    public CodeScanningAlertInstance withEnvironment(String environment) {
        this.environment = environment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_url")
    public String htmlUrl;

    public CodeScanningAlertInstance withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * Describe a region within a file for the alert.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public CodeScanningAlertLocation location;

    public CodeScanningAlertInstance withLocation(CodeScanningAlertLocation location) {
        this.location = location;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    public CodeScanningAlertInstanceMessage message;

    public CodeScanningAlertInstance withMessage(CodeScanningAlertInstanceMessage message) {
        this.message = message;
        return this;
    }
    
    /**
     * The full Git reference, formatted as `refs/heads/&lt;branch name&gt;`,
     * `refs/pull/&lt;number&gt;/merge`, or `refs/pull/&lt;number&gt;/head`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ref")
    public String ref;

    public CodeScanningAlertInstance withRef(String ref) {
        this.ref = ref;
        return this;
    }
    
    /**
     * State of a code scanning alert.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CodeScanningAlertStateEnum state;

    public CodeScanningAlertInstance withState(CodeScanningAlertStateEnum state) {
        this.state = state;
        return this;
    }
    
    public CodeScanningAlertInstance(){}
}
