// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MigrationJobStateEnum - The current migration job state.
type MigrationJobStateEnum string

const (
	MigrationJobStateEnumStateUnspecified MigrationJobStateEnum = "STATE_UNSPECIFIED"
	MigrationJobStateEnumMaintenance      MigrationJobStateEnum = "MAINTENANCE"
	MigrationJobStateEnumDraft            MigrationJobStateEnum = "DRAFT"
	MigrationJobStateEnumCreating         MigrationJobStateEnum = "CREATING"
	MigrationJobStateEnumNotStarted       MigrationJobStateEnum = "NOT_STARTED"
	MigrationJobStateEnumRunning          MigrationJobStateEnum = "RUNNING"
	MigrationJobStateEnumFailed           MigrationJobStateEnum = "FAILED"
	MigrationJobStateEnumCompleted        MigrationJobStateEnum = "COMPLETED"
	MigrationJobStateEnumDeleting         MigrationJobStateEnum = "DELETING"
	MigrationJobStateEnumStopping         MigrationJobStateEnum = "STOPPING"
	MigrationJobStateEnumStopped          MigrationJobStateEnum = "STOPPED"
	MigrationJobStateEnumDeleted          MigrationJobStateEnum = "DELETED"
	MigrationJobStateEnumUpdating         MigrationJobStateEnum = "UPDATING"
	MigrationJobStateEnumStarting         MigrationJobStateEnum = "STARTING"
	MigrationJobStateEnumRestarting       MigrationJobStateEnum = "RESTARTING"
	MigrationJobStateEnumResuming         MigrationJobStateEnum = "RESUMING"
)

func (e *MigrationJobStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "DRAFT":
		fallthrough
	case "CREATING":
		fallthrough
	case "NOT_STARTED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "FAILED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "DELETING":
		fallthrough
	case "STOPPING":
		fallthrough
	case "STOPPED":
		fallthrough
	case "DELETED":
		fallthrough
	case "UPDATING":
		fallthrough
	case "STARTING":
		fallthrough
	case "RESTARTING":
		fallthrough
	case "RESUMING":
		*e = MigrationJobStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MigrationJobStateEnum: %s", s)
	}
}

// MigrationJobTypeEnum - Required. The migration job type.
type MigrationJobTypeEnum string

const (
	MigrationJobTypeEnumTypeUnspecified MigrationJobTypeEnum = "TYPE_UNSPECIFIED"
	MigrationJobTypeEnumOneTime         MigrationJobTypeEnum = "ONE_TIME"
	MigrationJobTypeEnumContinuous      MigrationJobTypeEnum = "CONTINUOUS"
)

func (e *MigrationJobTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "ONE_TIME":
		fallthrough
	case "CONTINUOUS":
		*e = MigrationJobTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MigrationJobTypeEnum: %s", s)
	}
}

// MigrationJobInput - Represents a Database Migration Service migration job object.
type MigrationJobInput struct {
	// Required. The resource name (URI) of the destination connection profile.
	Destination *string `json:"destination,omitempty"`
	// A message defining the database engine and provider.
	DestinationDatabase *DatabaseType `json:"destinationDatabase,omitempty"`
	// The migration job display name.
	DisplayName *string `json:"displayName,omitempty"`
	// The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
	DumpPath *string `json:"dumpPath,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
	Labels map[string]string `json:"labels,omitempty"`
	// The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
	Name *string `json:"name,omitempty"`
	// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1beta1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
	ReverseSSHConnectivity *ReverseSSHConnectivity `json:"reverseSshConnectivity,omitempty"`
	// Required. The resource name (URI) of the source connection profile.
	Source *string `json:"source,omitempty"`
	// A message defining the database engine and provider.
	SourceDatabase *DatabaseType `json:"sourceDatabase,omitempty"`
	// The current migration job state.
	State *MigrationJobStateEnum `json:"state,omitempty"`
	// The source database will allow incoming connections from the destination database's public IP. You can retrieve the Cloud SQL instance's public IP from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
	StaticIPConnectivity map[string]interface{} `json:"staticIpConnectivity,omitempty"`
	// Required. The migration job type.
	Type *MigrationJobTypeEnum `json:"type,omitempty"`
	// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
	VpcPeeringConnectivity *VpcPeeringConnectivity `json:"vpcPeeringConnectivity,omitempty"`
}

// MigrationJobPhaseEnum - Output only. The current migration job phase.
type MigrationJobPhaseEnum string

const (
	MigrationJobPhaseEnumPhaseUnspecified             MigrationJobPhaseEnum = "PHASE_UNSPECIFIED"
	MigrationJobPhaseEnumFullDump                     MigrationJobPhaseEnum = "FULL_DUMP"
	MigrationJobPhaseEnumCdc                          MigrationJobPhaseEnum = "CDC"
	MigrationJobPhaseEnumPromoteInProgress            MigrationJobPhaseEnum = "PROMOTE_IN_PROGRESS"
	MigrationJobPhaseEnumWaitingForSourceWritesToStop MigrationJobPhaseEnum = "WAITING_FOR_SOURCE_WRITES_TO_STOP"
	MigrationJobPhaseEnumPreparingTheDump             MigrationJobPhaseEnum = "PREPARING_THE_DUMP"
)

func (e *MigrationJobPhaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PHASE_UNSPECIFIED":
		fallthrough
	case "FULL_DUMP":
		fallthrough
	case "CDC":
		fallthrough
	case "PROMOTE_IN_PROGRESS":
		fallthrough
	case "WAITING_FOR_SOURCE_WRITES_TO_STOP":
		fallthrough
	case "PREPARING_THE_DUMP":
		*e = MigrationJobPhaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MigrationJobPhaseEnum: %s", s)
	}
}

// MigrationJob - Represents a Database Migration Service migration job object.
type MigrationJob struct {
	// Output only. The timestamp when the migration job resource was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `json:"createTime,omitempty"`
	// Required. The resource name (URI) of the destination connection profile.
	Destination *string `json:"destination,omitempty"`
	// A message defining the database engine and provider.
	DestinationDatabase *DatabaseType `json:"destinationDatabase,omitempty"`
	// The migration job display name.
	DisplayName *string `json:"displayName,omitempty"`
	// The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
	DumpPath *string `json:"dumpPath,omitempty"`
	// Output only. The duration of the migration job (in seconds). A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Duration *string `json:"duration,omitempty"`
	// Output only. If the migration job is completed, the time when it was completed.
	EndTime *string `json:"endTime,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
	Labels map[string]string `json:"labels,omitempty"`
	// The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
	Name *string `json:"name,omitempty"`
	// Output only. The current migration job phase.
	Phase *MigrationJobPhaseEnum `json:"phase,omitempty"`
	// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1beta1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
	ReverseSSHConnectivity *ReverseSSHConnectivity `json:"reverseSshConnectivity,omitempty"`
	// Required. The resource name (URI) of the source connection profile.
	Source *string `json:"source,omitempty"`
	// A message defining the database engine and provider.
	SourceDatabase *DatabaseType `json:"sourceDatabase,omitempty"`
	// The current migration job state.
	State *MigrationJobStateEnum `json:"state,omitempty"`
	// The source database will allow incoming connections from the destination database's public IP. You can retrieve the Cloud SQL instance's public IP from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
	StaticIPConnectivity map[string]interface{} `json:"staticIpConnectivity,omitempty"`
	// Required. The migration job type.
	Type *MigrationJobTypeEnum `json:"type,omitempty"`
	// Output only. The timestamp when the migration job resource was last updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `json:"updateTime,omitempty"`
	// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
	VpcPeeringConnectivity *VpcPeeringConnectivity `json:"vpcPeeringConnectivity,omitempty"`
}
