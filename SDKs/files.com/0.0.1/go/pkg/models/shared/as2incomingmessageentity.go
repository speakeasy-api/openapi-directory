// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// As2IncomingMessageEntityProcessingResultEnum - Result of processing.
type As2IncomingMessageEntityProcessingResultEnum string

const (
	As2IncomingMessageEntityProcessingResultEnumNotStarted                As2IncomingMessageEntityProcessingResultEnum = "not_started"
	As2IncomingMessageEntityProcessingResultEnumUnableToFindStation       As2IncomingMessageEntityProcessingResultEnum = "unable_to_find_station"
	As2IncomingMessageEntityProcessingResultEnumUnableToFindPartner       As2IncomingMessageEntityProcessingResultEnum = "unable_to_find_partner"
	As2IncomingMessageEntityProcessingResultEnumUnableToValidateSignature As2IncomingMessageEntityProcessingResultEnum = "unable_to_validate_signature"
	As2IncomingMessageEntityProcessingResultEnumDecryptFail               As2IncomingMessageEntityProcessingResultEnum = "decrypt_fail"
	As2IncomingMessageEntityProcessingResultEnumFileSaveFail              As2IncomingMessageEntityProcessingResultEnum = "file_save_fail"
	As2IncomingMessageEntityProcessingResultEnumSuccess                   As2IncomingMessageEntityProcessingResultEnum = "success"
)

func (e *As2IncomingMessageEntityProcessingResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "not_started":
		fallthrough
	case "unable_to_find_station":
		fallthrough
	case "unable_to_find_partner":
		fallthrough
	case "unable_to_validate_signature":
		fallthrough
	case "decrypt_fail":
		fallthrough
	case "file_save_fail":
		fallthrough
	case "success":
		*e = As2IncomingMessageEntityProcessingResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for As2IncomingMessageEntityProcessingResultEnum: %s", s)
	}
}

// As2IncomingMessageEntity - List As2 Incoming Messages
type As2IncomingMessageEntity struct {
	// JSON Structure of the activity log.
	ActivityLog *string `json:"activity_log,omitempty"`
	// AS2 FROM header of message
	As2From *string `json:"as2_from,omitempty"`
	// Id of the AS2 Partner associated with this message.
	As2PartnerID *int `json:"as2_partner_id,omitempty"`
	// Id of the AS2 Station associated with this message.
	As2StationID *int `json:"as2_station_id,omitempty"`
	// AS2 TO header of message
	As2To *string `json:"as2_to,omitempty"`
	// Filename of the file being received.
	AttachmentFilename *string `json:"attachment_filename,omitempty"`
	// Encrypted Payload Body Size
	BodySize *string `json:"body_size,omitempty"`
	// Content Type header of the incoming message.
	ContentType *string `json:"content_type,omitempty"`
	// Message creation date/time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date Header
	Date *string `json:"date,omitempty"`
	// URL to download the encrypted signed smime that is to sent as AS2 body
	EncryptedURI *string `json:"encrypted_uri,omitempty"`
	// Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial in hex format.
	HexRecipientSerial *string `json:"hex_recipient_serial,omitempty"`
	// HTTP Headers sent with this message.
	HTTPHeaders map[string]interface{} `json:"http_headers,omitempty"`
	// HTTP Response Code sent for this message
	HTTPResponseCode *string `json:"http_response_code,omitempty"`
	// HTTP Headers sent for this message.
	HTTPResponseHeaders map[string]interface{} `json:"http_response_headers,omitempty"`
	// Id of the AS2 Partner.
	ID *int `json:"id,omitempty"`
	// IP Address of the Sender
	IP *string `json:"ip,omitempty"`
	// URL to download the http response body
	MdnResponseURI *string `json:"mdn_response_uri,omitempty"`
	// Message decrypted successfully?
	MessageDecrypted *bool `json:"message_decrypted,omitempty"`
	// AS2 Message Id
	MessageID *string `json:"message_id,omitempty"`
	// MDN returned?
	MessageMdnReturned *bool `json:"message_mdn_returned,omitempty"`
	// Message processed successfully?
	MessageProcessingSuccess *bool `json:"message_processing_success,omitempty"`
	// Message body received?
	MessageReceived *bool `json:"message_received,omitempty"`
	// Message signature verified?
	MessageSignatureVerified *bool `json:"message_signature_verified,omitempty"`
	// AS2 Message Integrity Check
	Mic *string `json:"mic,omitempty"`
	// AS2 Message Integrity Check Algorithm Used
	MicAlgo *string `json:"mic_algo,omitempty"`
	// Result of processing.
	ProcessingResult *As2IncomingMessageEntityProcessingResultEnum `json:"processing_result,omitempty"`
	// Result of processing description.
	ProcessingResultDescription *string `json:"processing_result_description,omitempty"`
	// URL to download the original file contents
	RawURI *string `json:"raw_uri,omitempty"`
	// Incoming Message Recipient(the Client Cert used to encrypt this message)'s issuer
	RecipientIssuer *string `json:"recipient_issuer,omitempty"`
	// Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial
	RecipientSerial *string `json:"recipient_serial,omitempty"`
	// URL to download the file contents as smime with signature
	SmimeSignedURI *string `json:"smime_signed_uri,omitempty"`
	// URL to download the file contents encoded as smime
	SmimeURI *string `json:"smime_uri,omitempty"`
	// AS2 Subject Header
	Subject *string `json:"subject,omitempty"`
	// UUID assigned to this message.
	UUID *string `json:"uuid,omitempty"`
}
