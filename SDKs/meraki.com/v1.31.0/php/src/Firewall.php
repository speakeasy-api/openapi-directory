<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Firewall 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return the cellular firewall rules for an MX network
     * 
     * Return the cellular firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesResponse
     */
	public function getNetworkApplianceFirewallCellularFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/cellularFirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallCellularFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * 
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceResponse
     */
	public function getNetworkApplianceFirewallFirewalledService(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallFirewalledService200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the appliance services and their accessibility rules
     * 
     * List the appliance services and their accessibility rules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesResponse
     */
	public function getNetworkApplianceFirewallFirewalledServices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/firewalledServices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallFirewalledServices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the inbound cellular firewall rules for an MX network
     * 
     * Return the inbound cellular firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse
     */
	public function getNetworkApplianceFirewallInboundCellularFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallInboundCellularFirewallRules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the inbound firewall rules for an MX network
     * 
     * Return the inbound firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesResponse
     */
	public function getNetworkApplianceFirewallInboundFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/inboundFirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallInboundFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L3 firewall rules for an MX network
     * 
     * Return the L3 firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesResponse
     */
	public function getNetworkApplianceFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the MX L7 firewall rules for an MX network
     * 
     * List the MX L7 firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesResponse
     */
	public function getNetworkApplianceFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * 
     * Return the L7 firewall application categories and their associated applications for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse
     */
	public function getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallL7FirewallRulesApplicationCategories200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * 
     * Return the 1:Many NAT mapping rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesResponse
     */
	public function getNetworkApplianceFirewallOneToManyNatRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/oneToManyNatRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * 
     * Return the 1:1 NAT mapping rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesResponse
     */
	public function getNetworkApplianceFirewallOneToOneNatRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/oneToOneNatRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the port forwarding rules for an MX network
     * 
     * Return the port forwarding rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesResponse
     */
	public function getNetworkApplianceFirewallPortForwardingRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/portForwardingRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the firewall settings for this network
     * 
     * Return the firewall settings for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse
     */
	public function getNetworkApplianceFirewallSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * 
     * Return the L3 firewall rules for an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse
     */
	public function getNetworkWirelessSsidFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * 
     * Return the L7 firewall rules for an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse
     */
	public function getNetworkWirelessSsidFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the cellular firewall rules of an MX network
     * 
     * Update the cellular firewall rules of an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallCellularFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/cellularFirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallCellularFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * 
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceResponse
     */
	public function updateNetworkApplianceFirewallFirewalledService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallFirewalledService200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the inbound cellular firewall rules of an MX network
     * 
     * Update the inbound cellular firewall rules of an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallInboundCellularFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallInboundCellularFirewallRules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the inbound firewall rules of an MX network
     * 
     * Update the inbound firewall rules of an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallInboundFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/inboundFirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallInboundFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the L3 firewall rules of an MX network
     * 
     * Update the L3 firewall rules of an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the MX L7 firewall rules for an MX network
     * 
     * Update the MX L7 firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * 
     * Set the 1:Many NAT mapping rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesResponse
     */
	public function updateNetworkApplianceFirewallOneToManyNatRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/oneToManyNatRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * 
     * Set the 1:1 NAT mapping rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesResponse
     */
	public function updateNetworkApplianceFirewallOneToOneNatRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/oneToOneNatRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the port forwarding rules for an MX network
     * 
     * Update the port forwarding rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesResponse
     */
	public function updateNetworkApplianceFirewallPortForwardingRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/portForwardingRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the firewall settings for this network
     * 
     * Update the firewall settings for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse
     */
	public function updateNetworkApplianceFirewallSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * 
     * Update the L3 firewall rules of an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse
     */
	public function updateNetworkWirelessSsidFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * 
     * Update the L7 firewall rules of an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse
     */
	public function updateNetworkWirelessSsidFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}