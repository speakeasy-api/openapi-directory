/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 *  The status of the control.
 */
export enum UpdateAssessmentControlRequestBodyControlStatusEnum {
  UnderReview = "UNDER_REVIEW",
  Reviewed = "REVIEWED",
  Inactive = "INACTIVE",
}

export class UpdateAssessmentControlRequestBody extends SpeakeasyBase {
  /**
   *  The comment body text for the control.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commentBody" })
  commentBody?: string;

  /**
   *  The status of the control.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "controlStatus" })
  controlStatus?: UpdateAssessmentControlRequestBodyControlStatusEnum;
}

export class UpdateAssessmentControlRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateAssessmentControlRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   *  The unique identifier for the assessment.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=assessmentId",
  })
  assessmentId: string;

  /**
   *  The unique identifier for the control.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=controlId",
  })
  controlId: string;

  /**
   *  The unique identifier for the control set.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=controlSetId",
  })
  controlSetId: string;
}

export class UpdateAssessmentControlResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateAssessmentControlResponse?: shared.UpdateAssessmentControlResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
