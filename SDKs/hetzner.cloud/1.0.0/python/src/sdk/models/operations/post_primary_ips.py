"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum(str, Enum):
    r"""Resource type the Primary IP can be assigned to"""
    SERVER = 'server'

class PostPrimaryIpsCreatePrimaryIPRequestTypeEnum(str, Enum):
    r"""Primary IP type"""
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPRequest:
    r"""The `type` argument is required while `datacenter` and `assignee_id` are mutually exclusive."""
    
    assignee_type: PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee_type') }})
    r"""Resource type the Primary IP can be assigned to"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    type: PostPrimaryIpsCreatePrimaryIPRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Primary IP type"""  
    assignee_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee_id'), 'exclude': lambda f: f is None }})
    r"""ID of the resource the Primary IP should be assigned to. Omitted if it should not be assigned."""  
    auto_delete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_delete'), 'exclude': lambda f: f is None }})
    r"""Delete the Primary IP when the Server it is assigned to is deleted. If omitted defaults to `false`."""  
    datacenter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datacenter'), 'exclude': lambda f: f is None }})
    r"""ID or name of Datacenter the Primary IP will be bound to. Needs to be omitted if `assignee_id` is passed."""  
    labels: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponseActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponseActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponseAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostPrimaryIpsCreatePrimaryIPResponseActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostPrimaryIpsCreatePrimaryIPResponseActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    
class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum(str, Enum):
    r"""Resource type the Primary IP can be assigned to"""
    SERVER = 'server'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterLocation:
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City the Location is closest to"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""ISO 3166-1 alpha-2 code of the country the Location resides in"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Location"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Location"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Latitude of the city closest to the Location"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Longitude of the city closest to the Location"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Location"""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of network zone this Location resides in"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterServerTypes:
    r"""The Server types the Datacenter can handle"""
    
    available: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available') }})
    r"""IDs of Server types that are supported and for which the Datacenter has enough resources left"""  
    available_for_migration: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_for_migration') }})
    r"""IDs of Server types that are supported and for which the Datacenter has enough resources left"""  
    supported: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supported') }})
    r"""IDs of Server types that are supported in the Datacenter"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenter:
    r"""Datacenter this Primary IP is located at"""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Datacenter"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    location: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Datacenter"""  
    server_types: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterServerTypes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server_types') }})
    r"""The Server types the Datacenter can handle"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDNSPtr:
    
    dns_ptr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_ptr') }})
    r"""DNS pointer for the specific IP address"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""Single IPv4 or IPv6 address"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPProtection:
    r"""Protection configuration for the Resource"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Resource from being deleted"""  
    
class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum(str, Enum):
    r"""Type of the Primary IP"""
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIP:
    
    assignee_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee_id') }})
    r"""ID of the resource the Primary IP is assigned to, null if it is not assigned at all"""  
    assignee_type: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee_type') }})
    r"""Resource type the Primary IP can be assigned to"""  
    auto_delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_delete') }})
    r"""Delete this Primary IP when the resource it is assigned to is deleted"""  
    blocked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocked') }})
    r"""Whether the IP is blocked"""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    datacenter: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenter = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datacenter') }})
    r"""Datacenter this Primary IP is located at"""  
    dns_ptr: list[PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDNSPtr] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_ptr') }})
    r"""Array of reverse DNS entries"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""IP address"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    protection: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Resource"""  
    type: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the Primary IP"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPrimaryIpsCreatePrimaryIPResponse:
    r"""The `primary_ip` key contains the Primary IP that was just created"""
    
    primary_ip: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIP = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip') }})  
    action: Optional[PostPrimaryIpsCreatePrimaryIPResponseAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostPrimaryIpsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_primary_ip_response: Optional[PostPrimaryIpsCreatePrimaryIPResponse] = dataclasses.field(default=None)
    r"""The `primary_ip` key contains the Primary IP that was just created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    