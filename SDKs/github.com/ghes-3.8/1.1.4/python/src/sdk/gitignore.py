"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Gitignore:
    r"""View gitignore templates"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def gitignore_get_all_templates(self) -> operations.GitignoreGetAllTemplatesResponse:
        r"""Get all gitignore templates
        List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.8/rest/reference/repos#create-a-repository-for-the-authenticated-user).
        https://docs.github.com/enterprise-server@3.8/rest/reference/gitignore#get-all-gitignore-templates - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/gitignore/templates'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GitignoreGetAllTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.gitignore_get_all_templates_200_application_json_strings = out
        elif http_res.status_code == 304:
            pass

        return res

    def gitignore_get_template(self, request: operations.GitignoreGetTemplateRequest) -> operations.GitignoreGetTemplateResponse:
        r"""Get a gitignore template
        The API also allows fetching the source of a single template.
        Use the raw [media type](https://docs.github.com/enterprise-server@3.8/rest/overview/media-types/) to get the raw contents.
        https://docs.github.com/enterprise-server@3.8/rest/reference/gitignore#get-a-gitignore-template - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GitignoreGetTemplateRequest, base_url, '/gitignore/templates/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GitignoreGetTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GitignoreTemplate])
                res.gitignore_template = out
        elif http_res.status_code == 304:
            pass

        return res

    