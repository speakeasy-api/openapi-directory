/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "//app.files.com/api/rest/v1",
	};
  	
    /**
     * Operations about action_notification_export_results
     */
    public ActionNotificationExportResults actionNotificationExportResults;
    /**
     * Operations about action_notification_exports
     */
    public ActionNotificationExports actionNotificationExports;
    /**
     * Operations about action_webhook_failures
     */
    public ActionWebhookFailures actionWebhookFailures;
    /**
     * Operations about api_keys
     */
    public ApiKey apiKey;
    /**
     * Operations about api_keys
     */
    public ApiKeys apiKeys;
    /**
     * Operations about apps
     */
    public Apps apps;
    /**
     * Operations about as2_incoming_messages
     */
    public As2IncomingMessages as2IncomingMessages;
    /**
     * Operations about as2_outgoing_messages
     */
    public As2OutgoingMessages as2OutgoingMessages;
    /**
     * Operations about as2_partners
     */
    public As2Partners as2Partners;
    /**
     * Operations about as2_stations
     */
    public As2Stations as2Stations;
    /**
     * Operations about automation_runs
     */
    public AutomationRuns automationRuns;
    /**
     * Operations about automations
     */
    public Automations automations;
    /**
     * Operations about bandwidth_snapshots
     */
    public BandwidthSnapshots bandwidthSnapshots;
    /**
     * Operations about behaviors
     */
    public Behaviors behaviors;
    /**
     * Operations about bundle_downloads
     */
    public BundleDownloads bundleDownloads;
    /**
     * Operations about bundle_notifications
     */
    public BundleNotifications bundleNotifications;
    /**
     * Operations about bundle_recipients
     */
    public BundleRecipients bundleRecipients;
    /**
     * Operations about bundle_registrations
     */
    public BundleRegistrations bundleRegistrations;
    /**
     * Operations about bundles
     */
    public Bundles bundles;
    /**
     * Operations about clickwraps
     */
    public Clickwraps clickwraps;
    /**
     * Operations about dns_records
     */
    public DnsRecords dnsRecords;
    /**
     * Operations about external_events
     */
    public ExternalEvents externalEvents;
    /**
     * Operations about file_actions
     */
    public FileActions fileActions;
    /**
     * Operations about file_comment_reactions
     */
    public FileCommentReactions fileCommentReactions;
    /**
     * Operations about file_comments
     */
    public FileComments fileComments;
    /**
     * Operations about file_migrations
     */
    public FileMigrations fileMigrations;
    /**
     * Operations about files
     */
    public Files files;
    /**
     * Operations about folders
     */
    public Folders folders;
    /**
     * Operations about form_field_sets
     */
    public FormFieldSets formFieldSets;
    /**
     * Operations about group_users
     */
    public GroupUsers groupUsers;
    /**
     * Operations about groups
     */
    public Groups groups;
    /**
     * Operations about histories
     */
    public History history;
    /**
     * Operations about history_export_results
     */
    public HistoryExportResults historyExportResults;
    /**
     * Operations about history_exports
     */
    public HistoryExports historyExports;
    /**
     * Operations about inbox_recipients
     */
    public InboxRecipients inboxRecipients;
    /**
     * Operations about inbox_registrations
     */
    public InboxRegistrations inboxRegistrations;
    /**
     * Operations about inbox_uploads
     */
    public InboxUploads inboxUploads;
    /**
     * Operations about invoices
     */
    public Invoices invoices;
    /**
     * Operations about ip_addresses
     */
    public IpAddresses ipAddresses;
    /**
     * Operations about locks
     */
    public Locks locks;
    /**
     * Operations about message_comment_reactions
     */
    public MessageCommentReactions messageCommentReactions;
    /**
     * Operations about message_comments
     */
    public MessageComments messageComments;
    /**
     * Operations about message_reactions
     */
    public MessageReactions messageReactions;
    /**
     * Operations about messages
     */
    public Messages messages;
    /**
     * Operations about notifications
     */
    public Notifications notifications;
    /**
     * Operations about payments
     */
    public Payments payments;
    /**
     * Operations about permissions
     */
    public Permissions permissions;
    /**
     * Operations about priorities
     */
    public Priorities priorities;
    /**
     * Operations about projects
     */
    public Projects projects;
    /**
     * Operations about public_keys
     */
    public PublicKeys publicKeys;
    /**
     * Operations about remote_bandwidth_snapshots
     */
    public RemoteBandwidthSnapshots remoteBandwidthSnapshots;
    /**
     * Operations about remote_servers
     */
    public RemoteServers remoteServers;
    /**
     * Operations about requests
     */
    public Requests requests;
    /**
     * Operations about sessions
     */
    public Sessions sessions;
    /**
     * Operations about settings_changes
     */
    public SettingsChanges settingsChanges;
    /**
     * Operations about sftp_host_keys
     */
    public SftpHostKeys sftpHostKeys;
    /**
     * Operations about sites
     */
    public Site site;
    /**
     * Operations about sso_strategies
     */
    public SsoStrategies ssoStrategies;
    /**
     * Operations about styles
     */
    public Styles styles;
    /**
     * Operations about usage_daily_snapshots
     */
    public UsageDailySnapshots usageDailySnapshots;
    /**
     * Operations about usage_snapshots
     */
    public UsageSnapshots usageSnapshots;
    /**
     * Operations about users
     */
    public User user;
    /**
     * Operations about user_cipher_uses
     */
    public UserCipherUses userCipherUses;
    /**
     * Operations about user_requests
     */
    public UserRequests userRequests;
    /**
     * Operations about users
     */
    public Users users;
    /**
     * Operations about webhook_tests
     */
    public WebhookTests webhookTests;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.actionNotificationExportResults = new ActionNotificationExportResults(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.actionNotificationExports = new ActionNotificationExports(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.actionWebhookFailures = new ActionWebhookFailures(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.apiKey = new ApiKey(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.apiKeys = new ApiKeys(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.apps = new Apps(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.as2IncomingMessages = new As2IncomingMessages(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.as2OutgoingMessages = new As2OutgoingMessages(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.as2Partners = new As2Partners(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.as2Stations = new As2Stations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.automationRuns = new AutomationRuns(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.automations = new Automations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bandwidthSnapshots = new BandwidthSnapshots(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.behaviors = new Behaviors(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bundleDownloads = new BundleDownloads(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bundleNotifications = new BundleNotifications(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bundleRecipients = new BundleRecipients(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bundleRegistrations = new BundleRegistrations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bundles = new Bundles(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.clickwraps = new Clickwraps(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.dnsRecords = new DnsRecords(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.externalEvents = new ExternalEvents(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.fileActions = new FileActions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.fileCommentReactions = new FileCommentReactions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.fileComments = new FileComments(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.fileMigrations = new FileMigrations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.files = new Files(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.folders = new Folders(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.formFieldSets = new FormFieldSets(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.groupUsers = new GroupUsers(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.groups = new Groups(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.history = new History(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.historyExportResults = new HistoryExportResults(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.historyExports = new HistoryExports(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.inboxRecipients = new InboxRecipients(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.inboxRegistrations = new InboxRegistrations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.inboxUploads = new InboxUploads(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.invoices = new Invoices(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.ipAddresses = new IpAddresses(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.locks = new Locks(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.messageCommentReactions = new MessageCommentReactions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.messageComments = new MessageComments(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.messageReactions = new MessageReactions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.messages = new Messages(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.notifications = new Notifications(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.payments = new Payments(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.permissions = new Permissions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.priorities = new Priorities(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.projects = new Projects(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.publicKeys = new PublicKeys(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.remoteBandwidthSnapshots = new RemoteBandwidthSnapshots(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.remoteServers = new RemoteServers(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.requests = new Requests(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.sessions = new Sessions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.settingsChanges = new SettingsChanges(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.sftpHostKeys = new SftpHostKeys(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.site = new Site(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.ssoStrategies = new SsoStrategies(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.styles = new Styles(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.usageDailySnapshots = new UsageDailySnapshots(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.usageSnapshots = new UsageSnapshots(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.user = new User(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.userCipherUses = new UserCipherUses(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.userRequests = new UserRequests(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.users = new Users(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.webhookTests = new WebhookTests(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}