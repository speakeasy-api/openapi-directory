// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConditionOperatorEnum string

const (
	ConditionOperatorEnumGreaterThan         ConditionOperatorEnum = "GreaterThan"
	ConditionOperatorEnumGreaterThanOrEquals ConditionOperatorEnum = "GreaterThanOrEquals"
	ConditionOperatorEnumLessThan            ConditionOperatorEnum = "LessThan"
	ConditionOperatorEnumLessThanOrEquals    ConditionOperatorEnum = "LessThanOrEquals"
	ConditionOperatorEnumEquals              ConditionOperatorEnum = "Equals"
	ConditionOperatorEnumNotEquals           ConditionOperatorEnum = "NotEquals"
	ConditionOperatorEnumContains            ConditionOperatorEnum = "Contains"
	ConditionOperatorEnumNotContains         ConditionOperatorEnum = "NotContains"
	ConditionOperatorEnumExists              ConditionOperatorEnum = "Exists"
	ConditionOperatorEnumNotExists           ConditionOperatorEnum = "NotExists"
	ConditionOperatorEnumBeginsWith          ConditionOperatorEnum = "BeginsWith"
)

func (e ConditionOperatorEnum) ToPointer() *ConditionOperatorEnum {
	return &e
}

func (e *ConditionOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GreaterThan":
		fallthrough
	case "GreaterThanOrEquals":
		fallthrough
	case "LessThan":
		fallthrough
	case "LessThanOrEquals":
		fallthrough
	case "Equals":
		fallthrough
	case "NotEquals":
		fallthrough
	case "Contains":
		fallthrough
	case "NotContains":
		fallthrough
	case "Exists":
		fallthrough
	case "NotExists":
		fallthrough
	case "BeginsWith":
		*e = ConditionOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionOperatorEnum: %v", v)
	}
}
