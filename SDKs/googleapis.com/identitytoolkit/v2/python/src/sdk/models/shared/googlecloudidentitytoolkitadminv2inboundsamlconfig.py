"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudidentitytoolkitadminv2idpconfig as shared_googlecloudidentitytoolkitadminv2idpconfig
from ..shared import googlecloudidentitytoolkitadminv2spconfig as shared_googlecloudidentitytoolkitadminv2spconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig:
    r"""A pair of SAML RP-IDP configurations when the project acts as the relying party."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The config's display name set by developers."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""True if allows the user to sign in with the provider."""  
    idp_config: Optional[shared_googlecloudidentitytoolkitadminv2idpconfig.GoogleCloudIdentitytoolkitAdminV2IdpConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idpConfig'), 'exclude': lambda f: f is None }})
    r"""The SAML IdP (Identity Provider) configuration when the project acts as the relying party."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the InboundSamlConfig resource, for example: 'projects/my-awesome-project/inboundSamlConfigs/my-config-id'. Ignored during create requests."""  
    sp_config: Optional[shared_googlecloudidentitytoolkitadminv2spconfig.GoogleCloudIdentitytoolkitAdminV2SpConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spConfig'), 'exclude': lambda f: f is None }})
    r"""The SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an authentication assertion issued by a SAML identity provider."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIdentitytoolkitAdminV2InboundSamlConfigInput:
    r"""A pair of SAML RP-IDP configurations when the project acts as the relying party."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The config's display name set by developers."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""True if allows the user to sign in with the provider."""  
    idp_config: Optional[shared_googlecloudidentitytoolkitadminv2idpconfig.GoogleCloudIdentitytoolkitAdminV2IdpConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idpConfig'), 'exclude': lambda f: f is None }})
    r"""The SAML IdP (Identity Provider) configuration when the project acts as the relying party."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the InboundSamlConfig resource, for example: 'projects/my-awesome-project/inboundSamlConfigs/my-config-id'. Ignored during create requests."""  
    sp_config: Optional[shared_googlecloudidentitytoolkitadminv2spconfig.GoogleCloudIdentitytoolkitAdminV2SpConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spConfig'), 'exclude': lambda f: f is None }})
    r"""The SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an authentication assertion issued by a SAML identity provider."""  
    