/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class ReposListCacheInfoRequest extends SpeakeasyBase {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export enum ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum {
  Offline = "offline",
  Inactive = "inactive",
  InSync = "in_sync",
  NotInSync = "not_in_sync",
}

export class ReposListCacheInfo200ApplicationJSONGit extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "last_sync" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastSync: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "sync_status" })
  syncStatus: ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum;
}

/**
 * Status for a cache replica
 */
export class ReposListCacheInfo200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "git" })
  @Type(() => ReposListCacheInfo200ApplicationJSONGit)
  git: ReposListCacheInfo200ApplicationJSONGit;

  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host: string;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;
}

export class ReposListCacheInfoResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Status information for cache replicas
   */
  @SpeakeasyMetadata({ elemType: ReposListCacheInfo200ApplicationJSON })
  reposListCacheInfo200ApplicationJSONObjects?: ReposListCacheInfo200ApplicationJSON[];
}
