/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Player } from "./player";
import { Expose, Type } from "class-transformer";

/**
 * The time span of this high score.
 */
export enum LeaderboardEntryTimeSpanEnum {
  ScoreTimeSpanUnspecified = "SCORE_TIME_SPAN_UNSPECIFIED",
  AllTime = "ALL_TIME",
  Weekly = "WEEKLY",
  Daily = "DAILY",
}

/**
 * The Leaderboard Entry resource.
 */
export class LeaderboardEntry extends SpeakeasyBase {
  /**
   * The localized string for the numerical value of this score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formattedScore" })
  formattedScore?: string;

  /**
   * The localized string for the rank of this score for this leaderboard.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formattedScoreRank" })
  formattedScoreRank?: string;

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardEntry`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * A Player resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "player" })
  @Type(() => Player)
  player?: Player;

  /**
   * The rank of this score for this leaderboard.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scoreRank" })
  scoreRank?: string;

  /**
   * Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scoreTag" })
  scoreTag?: string;

  /**
   * The numerical value of this score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scoreValue" })
  scoreValue?: string;

  /**
   * The time span of this high score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeSpan" })
  timeSpan?: LeaderboardEntryTimeSpanEnum;

  /**
   * The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "writeTimestampMillis" })
  writeTimestampMillis?: string;
}
