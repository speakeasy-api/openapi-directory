/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { StandardError } from "./standarderror";
import { SubscriptionResponse } from "./subscriptionresponse";
import { Expose, Transform, Type } from "class-transformer";

export enum BatchResponseSubscriptionResponseWithErrorsStatusEnum {
  Pending = "PENDING",
  Processing = "PROCESSING",
  Canceled = "CANCELED",
  Complete = "COMPLETE",
}

/**
 * multiple statuses
 */
export class BatchResponseSubscriptionResponseWithErrors extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "completedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completedAt: Date;

  @SpeakeasyMetadata({ elemType: StandardError })
  @Expose({ name: "errors" })
  @Type(() => StandardError)
  errors?: StandardError[];

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  links?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "numErrors" })
  numErrors?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "requestedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestedAt?: Date;

  @SpeakeasyMetadata({ elemType: SubscriptionResponse })
  @Expose({ name: "results" })
  @Type(() => SubscriptionResponse)
  results: SubscriptionResponse[];

  @SpeakeasyMetadata()
  @Expose({ name: "startedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: BatchResponseSubscriptionResponseWithErrorsStatusEnum;
}
