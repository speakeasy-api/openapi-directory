// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ContractualDocumentTypeEnum string

const (
	ContractualDocumentTypeEnumContract         ContractualDocumentTypeEnum = "contract"
	ContractualDocumentTypeEnumEngagementLetter ContractualDocumentTypeEnum = "engagement-letter"
	ContractualDocumentTypeEnumAmendment        ContractualDocumentTypeEnum = "amendment"
	ContractualDocumentTypeEnumPurchaseOrder    ContractualDocumentTypeEnum = "purchase-order"
	ContractualDocumentTypeEnumDeliveryOrder    ContractualDocumentTypeEnum = "delivery-order"
	ContractualDocumentTypeEnumQuotation        ContractualDocumentTypeEnum = "quotation"
	ContractualDocumentTypeEnumOther            ContractualDocumentTypeEnum = "other"
)

func (e *ContractualDocumentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "contract":
		fallthrough
	case "engagement-letter":
		fallthrough
	case "amendment":
		fallthrough
	case "purchase-order":
		fallthrough
	case "delivery-order":
		fallthrough
	case "quotation":
		fallthrough
	case "other":
		*e = ContractualDocumentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContractualDocumentTypeEnum: %s", s)
	}
}

type ContractualDocument struct {
	Amount      *string                      `json:"Amount,omitempty"`
	Author      *string                      `json:"Author,omitempty"`
	Class       []string                     `json:"Class,omitempty"`
	Code        *string                      `json:"Code,omitempty"`
	Comment     *string                      `json:"Comment,omitempty"`
	Date        *string                      `json:"Date,omitempty"`
	Designation *string                      `json:"Designation,omitempty"`
	Extension   *string                      `json:"Extension,omitempty"`
	FolderDate  *string                      `json:"FolderDate,omitempty"`
	ID          *string                      `json:"Id,omitempty"`
	Reference   *string                      `json:"Reference,omitempty"`
	StartDate   *string                      `json:"StartDate,omitempty"`
	Title       *string                      `json:"Title,omitempty"`
	Type        *ContractualDocumentTypeEnum `json:"Type,omitempty"`
}
