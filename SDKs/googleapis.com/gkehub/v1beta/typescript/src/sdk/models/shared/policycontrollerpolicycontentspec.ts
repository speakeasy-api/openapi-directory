/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { PolicyControllerBundleInstallSpec } from "./policycontrollerbundleinstallspec";
import { PolicyControllerTemplateLibraryConfig } from "./policycontrollertemplatelibraryconfig";
import { Expose, Transform, Type } from "class-transformer";

/**
 * PolicyContentSpec defines the user's desired content configuration on the cluster.
 */
export class PolicyControllerPolicyContentSpec extends SpeakeasyBase {
  /**
   * map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
   */
  @SpeakeasyMetadata({ elemType: PolicyControllerBundleInstallSpec })
  @Expose({ name: "bundles" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PolicyControllerBundleInstallSpec> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PolicyControllerBundleInstallSpec);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  bundles?: Record<string, PolicyControllerBundleInstallSpec>;

  /**
   * The config specifying which default library templates to install.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateLibrary" })
  @Type(() => PolicyControllerTemplateLibraryConfig)
  templateLibrary?: PolicyControllerTemplateLibraryConfig;
}
