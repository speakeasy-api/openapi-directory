"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import charlengthsemantics_enum as shared_charlengthsemantics_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OracleSettings:
    r"""Provides information that defines an Oracle endpoint."""
    
    access_alternate_directly: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessAlternateDirectly'), 'exclude': lambda f: f is None }})  
    additional_archived_log_dest_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalArchivedLogDestId'), 'exclude': lambda f: f is None }})  
    add_supplemental_logging: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddSupplementalLogging'), 'exclude': lambda f: f is None }})  
    allow_select_nested_tables: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowSelectNestedTables'), 'exclude': lambda f: f is None }})  
    archived_log_dest_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivedLogDestId'), 'exclude': lambda f: f is None }})  
    archived_logs_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivedLogsOnly'), 'exclude': lambda f: f is None }})  
    asm_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AsmPassword'), 'exclude': lambda f: f is None }})  
    asm_server: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AsmServer'), 'exclude': lambda f: f is None }})  
    asm_user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AsmUser'), 'exclude': lambda f: f is None }})  
    char_length_semantics: Optional[shared_charlengthsemantics_enum.CharLengthSemanticsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CharLengthSemantics'), 'exclude': lambda f: f is None }})  
    convert_timestamp_with_zone_to_utc: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConvertTimestampWithZoneToUTC'), 'exclude': lambda f: f is None }})  
    database_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseName'), 'exclude': lambda f: f is None }})  
    direct_path_no_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectPathNoLog'), 'exclude': lambda f: f is None }})  
    direct_path_parallel_load: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectPathParallelLoad'), 'exclude': lambda f: f is None }})  
    enable_homogenous_tablespace: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableHomogenousTablespace'), 'exclude': lambda f: f is None }})  
    extra_archived_log_dest_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraArchivedLogDestIds'), 'exclude': lambda f: f is None }})  
    fail_tasks_on_lob_truncation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailTasksOnLobTruncation'), 'exclude': lambda f: f is None }})  
    number_datatype_scale: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberDatatypeScale'), 'exclude': lambda f: f is None }})  
    oracle_path_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OraclePathPrefix'), 'exclude': lambda f: f is None }})  
    parallel_asm_read_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParallelAsmReadThreads'), 'exclude': lambda f: f is None }})  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Password'), 'exclude': lambda f: f is None }})  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Port'), 'exclude': lambda f: f is None }})  
    read_ahead_blocks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadAheadBlocks'), 'exclude': lambda f: f is None }})  
    read_table_space_name: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadTableSpaceName'), 'exclude': lambda f: f is None }})  
    replace_path_prefix: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplacePathPrefix'), 'exclude': lambda f: f is None }})  
    retry_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryInterval'), 'exclude': lambda f: f is None }})  
    secrets_manager_access_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretsManagerAccessRoleArn'), 'exclude': lambda f: f is None }})  
    secrets_manager_oracle_asm_access_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretsManagerOracleAsmAccessRoleArn'), 'exclude': lambda f: f is None }})  
    secrets_manager_oracle_asm_secret_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretsManagerOracleAsmSecretId'), 'exclude': lambda f: f is None }})  
    secrets_manager_secret_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretsManagerSecretId'), 'exclude': lambda f: f is None }})  
    security_db_encryption: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityDbEncryption'), 'exclude': lambda f: f is None }})  
    security_db_encryption_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityDbEncryptionName'), 'exclude': lambda f: f is None }})  
    server_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerName'), 'exclude': lambda f: f is None }})  
    spatial_data_option_to_geo_json_function_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpatialDataOptionToGeoJsonFunctionName'), 'exclude': lambda f: f is None }})  
    standby_delay_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StandbyDelayTime'), 'exclude': lambda f: f is None }})  
    trim_space_in_char: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrimSpaceInChar'), 'exclude': lambda f: f is None }})  
    use_alternate_folder_for_online: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseAlternateFolderForOnline'), 'exclude': lambda f: f is None }})  
    use_b_file: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseBFile'), 'exclude': lambda f: f is None }})  
    use_direct_path_full_load: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseDirectPathFullLoad'), 'exclude': lambda f: f is None }})  
    use_logminer_reader: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseLogminerReader'), 'exclude': lambda f: f is None }})  
    use_path_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsePathPrefix'), 'exclude': lambda f: f is None }})  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Username'), 'exclude': lambda f: f is None }})  
    