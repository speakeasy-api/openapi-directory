/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class AssetsCovarianceMatrix {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public AssetsCovarianceMatrix(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Covariance Matrix
     * Compute the covariance matrix of assets from either:  
     * * The asset correlation matrix and their volatilities (i.e., standard deviations)
     * * The asset correlation matrix and their variances
     * * The asset returns
     * 
     * References
     * * [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixResponse postAssetsCovarianceMatrix(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/covariance/matrix");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixResponse res = new org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixResponse() {{
            postAssetsCovarianceMatrix200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCovarianceMatrix200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCovarianceMatrix200ApplicationJSON.class);
                res.postAssetsCovarianceMatrix200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Covariance Matrix Effective Rank
     * Compute the effective rank of an asset covariance matrix.
     * 
     * References
     * * [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixEffectiveRankResponse postAssetsCovarianceMatrixEffectiveRank(org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixEffectiveRankRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/covariance/matrix/effective-rank");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixEffectiveRankResponse res = new org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixEffectiveRankResponse() {{
            postAssetsCovarianceMatrixEffectiveRank200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixEffectiveRank200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixEffectiveRank200ApplicationJSON.class);
                res.postAssetsCovarianceMatrixEffectiveRank200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Exponentially Weighted Covariance Matrix
     * Compute an exponentially weighted covariance matrix of assets returns.
     * 
     * References
     * * [RiskMetrics Group. Longerstaey, J. (1996). RiskMetrics technical document, Technical Report fourth edition](https://www.msci.com/documents/10199/5915b101-4206-4ba0-aee2-3449d5c7e95a)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixExponentiallyWeightedResponse postAssetsCovarianceMatrixExponentiallyWeighted(org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixExponentiallyWeightedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/covariance/matrix/exponentially-weighted");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixExponentiallyWeightedResponse res = new org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixExponentiallyWeightedResponse() {{
            postAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSON.class);
                res.postAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Covariance Matrix Validation
     * Validate whether a matrix is a covariance matrix.
     * 
     * References
     * * [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixValidationResponse postAssetsCovarianceMatrixValidation(org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixValidationRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/covariance/matrix/validation");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixValidationResponse res = new org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixValidationResponse() {{
            postAssetsCovarianceMatrixValidation200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixValidation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCovarianceMatrixValidation200ApplicationJSON.class);
                res.postAssetsCovarianceMatrixValidation200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}