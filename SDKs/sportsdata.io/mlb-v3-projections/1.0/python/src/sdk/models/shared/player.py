"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Player:
    
    bat_hand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BatHand'), 'exclude': lambda f: f is None }})  
    birth_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BirthCity'), 'exclude': lambda f: f is None }})  
    birth_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BirthCountry'), 'exclude': lambda f: f is None }})  
    birth_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BirthDate'), 'exclude': lambda f: f is None }})  
    birth_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BirthState'), 'exclude': lambda f: f is None }})  
    college: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('College'), 'exclude': lambda f: f is None }})  
    draft_kings_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsName'), 'exclude': lambda f: f is None }})  
    draft_kings_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsPlayerID'), 'exclude': lambda f: f is None }})  
    experience: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Experience'), 'exclude': lambda f: f is None }})  
    fan_duel_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelName'), 'exclude': lambda f: f is None }})  
    fan_duel_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelPlayerID'), 'exclude': lambda f: f is None }})  
    fantasy_alarm_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyAlarmPlayerID'), 'exclude': lambda f: f is None }})  
    fantasy_draft_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftName'), 'exclude': lambda f: f is None }})  
    fantasy_draft_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftPlayerID'), 'exclude': lambda f: f is None }})  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }})  
    global_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalTeamID'), 'exclude': lambda f: f is None }})  
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Height'), 'exclude': lambda f: f is None }})  
    high_school: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HighSchool'), 'exclude': lambda f: f is None }})  
    injury_body_part: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InjuryBodyPart'), 'exclude': lambda f: f is None }})  
    injury_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InjuryNotes'), 'exclude': lambda f: f is None }})  
    injury_start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InjuryStartDate'), 'exclude': lambda f: f is None }})  
    injury_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InjuryStatus'), 'exclude': lambda f: f is None }})  
    jersey: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Jersey'), 'exclude': lambda f: f is None }})  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName'), 'exclude': lambda f: f is None }})  
    mlbamid: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MLBAMID'), 'exclude': lambda f: f is None }})  
    photo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PhotoUrl'), 'exclude': lambda f: f is None }})  
    player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerID'), 'exclude': lambda f: f is None }})  
    position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Position'), 'exclude': lambda f: f is None }})  
    position_category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PositionCategory'), 'exclude': lambda f: f is None }})  
    pro_debut: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProDebut'), 'exclude': lambda f: f is None }})  
    roto_wire_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RotoWirePlayerID'), 'exclude': lambda f: f is None }})  
    rotoworld_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RotoworldPlayerID'), 'exclude': lambda f: f is None }})  
    salary: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Salary'), 'exclude': lambda f: f is None }})  
    sport_radar_player_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SportRadarPlayerID'), 'exclude': lambda f: f is None }})  
    sports_data_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SportsDataID'), 'exclude': lambda f: f is None }})  
    sports_direct_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SportsDirectPlayerID'), 'exclude': lambda f: f is None }})  
    stats_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatsPlayerID'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Team'), 'exclude': lambda f: f is None }})  
    team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamID'), 'exclude': lambda f: f is None }})  
    throw_hand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThrowHand'), 'exclude': lambda f: f is None }})  
    upcoming_game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpcomingGameID'), 'exclude': lambda f: f is None }})  
    usa_today_headshot_no_background_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsaTodayHeadshotNoBackgroundUpdated'), 'exclude': lambda f: f is None }})  
    usa_today_headshot_no_background_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsaTodayHeadshotNoBackgroundUrl'), 'exclude': lambda f: f is None }})  
    usa_today_headshot_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsaTodayHeadshotUpdated'), 'exclude': lambda f: f is None }})  
    usa_today_headshot_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsaTodayHeadshotUrl'), 'exclude': lambda f: f is None }})  
    usa_today_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsaTodayPlayerID'), 'exclude': lambda f: f is None }})  
    weight: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Weight'), 'exclude': lambda f: f is None }})  
    xml_team_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('XmlTeamPlayerID'), 'exclude': lambda f: f is None }})  
    yahoo_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YahooName'), 'exclude': lambda f: f is None }})  
    yahoo_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YahooPlayerID'), 'exclude': lambda f: f is None }})  
    