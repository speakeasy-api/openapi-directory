<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InstantSnapshots 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of instantSnapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListResponse
     */
	public function computeInstantSnapshotsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/instantSnapshots', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instantSnapshotAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstantSnapshotAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified InstantSnapshot resource. Keep in mind that deleting a single instantSnapshot might not necessarily delete all the data on that instantSnapshot. If any data on the instantSnapshot that is marked for deletion is needed for subsequent instantSnapshots, the data will be moved to the next corresponding instantSnapshot. For more information, see Deleting instantSnapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteResponse
     */
	public function computeInstantSnapshotsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export the changed blocks between two instant snapshots to a customer's bucket in the user specified format.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportResponse
     */
	public function computeInstantSnapshotsExport(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}/export', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instantSnapshotsExportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified InstantSnapshot resource in the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetResponse
     */
	public function computeInstantSnapshotsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instantSnapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstantSnapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicyResponse
     */
	public function computeInstantSnapshotsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an instant snapshot in the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertResponse
     */
	public function computeInstantSnapshotsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instantSnapshot", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of InstantSnapshot resources contained within the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListResponse
     */
	public function computeInstantSnapshotsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instantSnapshotList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstantSnapshotList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicyResponse
     */
	public function computeInstantSnapshotsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a instantSnapshot in the given zone. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsResponse
     */
	public function computeInstantSnapshotsSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsResponse
     */
	public function computeInstantSnapshotsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instantSnapshots/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstantSnapshotsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}