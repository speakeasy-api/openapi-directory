// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum string

const (
	EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnumUnspecified EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum = "UNSPECIFIED"
	EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnumOnHold      EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum = "ON_HOLD"
	EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnumInProcess   EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum = "IN_PROCESS"
	EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnumSucceeded   EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum = "SUCCEEDED"
	EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnumFailed      EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum = "FAILED"
	EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnumCanceled    EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum = "CANCELED"
	EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnumRetryOnHold EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum = "RETRY_ON_HOLD"
	EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnumSuspended   EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum = "SUSPENDED"
)

func (e *EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNSPECIFIED":
		fallthrough
	case "ON_HOLD":
		fallthrough
	case "IN_PROCESS":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "RETRY_ON_HOLD":
		fallthrough
	case "SUSPENDED":
		*e = EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum: %s", s)
	}
}

// EnterpriseCrmEventbusProtoEventExecutionDetails - Contains the details of the execution info of this event: this includes the tasks execution details plus the event execution statistics. Next available id: 10
type EnterpriseCrmEventbusProtoEventExecutionDetails struct {
	EventAttemptStats      []EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats      `json:"eventAttemptStats,omitempty"`
	EventExecutionSnapshot []EnterpriseCrmEventbusProtoEventExecutionSnapshot                      `json:"eventExecutionSnapshot,omitempty"`
	EventExecutionState    *EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum `json:"eventExecutionState,omitempty"`
	// Indicates the number of times the execution has restarted from the beginning.
	EventRetriesFromBeginningCount *int `json:"eventRetriesFromBeginningCount,omitempty"`
	// The log file path (aka. cns address) for this event.
	LogFilePath *string `json:"logFilePath,omitempty"`
	// The network address (aka. bns address) that indicates where the event executor is running.
	NetworkAddress *string `json:"networkAddress,omitempty"`
	// Next scheduled execution time in case the execution status was RETRY_ON_HOLD.
	NextExecutionTime *string `json:"nextExecutionTime,omitempty"`
	// Used internally and shouldn't be exposed to users. A counter for the cron job to record how many times this event is in in_process state but don't have a lock consecutively/
	RyeLockUnheldCount *int `json:"ryeLockUnheldCount,omitempty"`
}
