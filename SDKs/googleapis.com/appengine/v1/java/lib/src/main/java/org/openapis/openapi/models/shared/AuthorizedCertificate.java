/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AuthorizedCertificate - An SSL certificate that a user has been authorized to administer. A user is authorized to administer any certificate that applies to one of their authorized domains.
 */
public class AuthorizedCertificate {
    /**
     * An SSL certificate obtained from a certificate authority.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateRawData")
    public CertificateRawData certificateRawData;
    public AuthorizedCertificate withCertificateRawData(CertificateRawData certificateRawData) {
        this.certificateRawData = certificateRawData;
        return this;
    }
    
    /**
     * The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public AuthorizedCertificate withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainMappingsCount")
    public Integer domainMappingsCount;
    public AuthorizedCertificate withDomainMappingsCount(Integer domainMappingsCount) {
        this.domainMappingsCount = domainMappingsCount;
        return this;
    }
    
    /**
     * Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainNames")
    public String[] domainNames;
    public AuthorizedCertificate withDomainNames(String[] domainNames) {
        this.domainNames = domainNames;
        return this;
    }
    
    /**
     * The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expireTime")
    public String expireTime;
    public AuthorizedCertificate withExpireTime(String expireTime) {
        this.expireTime = expireTime;
        return this;
    }
    
    /**
     * Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public AuthorizedCertificate withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * A certificate managed by App Engine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managedCertificate")
    public ManagedCertificate managedCertificate;
    public AuthorizedCertificate withManagedCertificate(ManagedCertificate managedCertificate) {
        this.managedCertificate = managedCertificate;
        return this;
    }
    
    /**
     * Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public AuthorizedCertificate withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibleDomainMappings")
    public String[] visibleDomainMappings;
    public AuthorizedCertificate withVisibleDomainMappings(String[] visibleDomainMappings) {
        this.visibleDomainMappings = visibleDomainMappings;
        return this;
    }
    
}
