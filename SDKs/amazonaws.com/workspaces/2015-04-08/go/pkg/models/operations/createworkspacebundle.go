// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateWorkspaceBundleXAmzTargetEnum
type CreateWorkspaceBundleXAmzTargetEnum string

const (
	CreateWorkspaceBundleXAmzTargetEnumWorkspacesServiceCreateWorkspaceBundle CreateWorkspaceBundleXAmzTargetEnum = "WorkspacesService.CreateWorkspaceBundle"
)

func (e CreateWorkspaceBundleXAmzTargetEnum) ToPointer() *CreateWorkspaceBundleXAmzTargetEnum {
	return &e
}

func (e *CreateWorkspaceBundleXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WorkspacesService.CreateWorkspaceBundle":
		*e = CreateWorkspaceBundleXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWorkspaceBundleXAmzTargetEnum: %v", v)
	}
}

type CreateWorkspaceBundleRequest struct {
	CreateWorkspaceBundleRequest shared.CreateWorkspaceBundleRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256            *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential               *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                     *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken            *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders            *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                   CreateWorkspaceBundleXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateWorkspaceBundleResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	CreateWorkspaceBundleResult *shared.CreateWorkspaceBundleResult
	// InvalidParameterValuesException
	InvalidParameterValuesException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceLimitExceededException
	ResourceLimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ResourceUnavailableException
	ResourceUnavailableException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
