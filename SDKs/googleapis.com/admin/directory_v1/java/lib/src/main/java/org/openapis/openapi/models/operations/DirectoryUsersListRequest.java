/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class DirectoryUsersListRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;
    public DirectoryUsersListRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;
    public DirectoryUsersListRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public DirectoryUsersListRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public DirectoryUsersListRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=customFieldMask")
    public String customFieldMask;
    public DirectoryUsersListRequest withCustomFieldMask(String customFieldMask) {
        this.customFieldMask = customFieldMask;
        return this;
    }
    
    /**
     * The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=customer")
    public String customer;
    public DirectoryUsersListRequest withCustomer(String customer) {
        this.customer = customer;
        return this;
    }
    
    /**
     * The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=domain")
    public String domain;
    public DirectoryUsersListRequest withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Event on which subscription is intended (if subscribing)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=event")
    public DirectoryUsersListEventEnum event;
    public DirectoryUsersListRequest withEvent(DirectoryUsersListEventEnum event) {
        this.event = event;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public DirectoryUsersListRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public DirectoryUsersListRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Maximum number of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;
    public DirectoryUsersListRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public DirectoryUsersListRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Property to use for sorting results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orderBy")
    public DirectoryUsersListOrderByEnum orderBy;
    public DirectoryUsersListRequest withOrderBy(DirectoryUsersListOrderByEnum orderBy) {
        this.orderBy = orderBy;
        return this;
    }
    
    /**
     * Token to specify next page in the list
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;
    public DirectoryUsersListRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public DirectoryUsersListRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * What subset of fields to fetch for this user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=projection")
    public DirectoryUsersListProjectionEnum projection;
    public DirectoryUsersListRequest withProjection(DirectoryUsersListProjectionEnum projection) {
        this.projection = projection;
        return this;
    }
    
    /**
     * Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    public String query;
    public DirectoryUsersListRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public DirectoryUsersListRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * If set to `true`, retrieves the list of deleted users. (Default: `false`)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=showDeleted")
    public String showDeleted;
    public DirectoryUsersListRequest withShowDeleted(String showDeleted) {
        this.showDeleted = showDeleted;
        return this;
    }
    
    /**
     * Whether to return results in ascending or descending order, ignoring case.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortOrder")
    public DirectoryUsersListSortOrderEnum sortOrder;
    public DirectoryUsersListRequest withSortOrder(DirectoryUsersListSortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;
    public DirectoryUsersListRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;
    public DirectoryUsersListRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    /**
     * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=viewType")
    public DirectoryUsersListViewTypeEnum viewType;
    public DirectoryUsersListRequest withViewType(DirectoryUsersListViewTypeEnum viewType) {
        this.viewType = viewType;
        return this;
    }
    
}
