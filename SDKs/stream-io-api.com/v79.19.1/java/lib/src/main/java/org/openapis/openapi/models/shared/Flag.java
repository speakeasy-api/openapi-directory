/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Flag - Contains information about flagged user or message
 */
public class Flag {
    /**
     * Date of the approval
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("approved_at")
    public OffsetDateTime approvedAt;
    public Flag withApprovedAt(OffsetDateTime approvedAt) {
        this.approvedAt = approvedAt;
        return this;
    }
    
    /**
     * Date/time of creation
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Flag withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("created_by_automod")
    public Boolean createdByAutomod;
    public Flag withCreatedByAutomod(Boolean createdByAutomod) {
        this.createdByAutomod = createdByAutomod;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    public java.util.Map<String, Object> details;
    public Flag withDetails(java.util.Map<String, Object> details) {
        this.details = details;
        return this;
    }
    
    /**
     * Date of the rejection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("rejected_at")
    public OffsetDateTime rejectedAt;
    public Flag withRejectedAt(OffsetDateTime rejectedAt) {
        this.rejectedAt = rejectedAt;
        return this;
    }
    
    /**
     * Date of the review
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("reviewed_at")
    public OffsetDateTime reviewedAt;
    public Flag withReviewedAt(OffsetDateTime reviewedAt) {
        this.reviewedAt = reviewedAt;
        return this;
    }
    
    /**
     * Represents any chat message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_message")
    public java.util.Map<String, Object> targetMessage;
    public Flag withTargetMessage(java.util.Map<String, Object> targetMessage) {
        this.targetMessage = targetMessage;
        return this;
    }
    
    /**
     * ID of flagged message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_message_id")
    public String targetMessageId;
    public Flag withTargetMessageId(String targetMessageId) {
        this.targetMessageId = targetMessageId;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_user")
    public java.util.Map<String, Object> targetUser;
    public Flag withTargetUser(java.util.Map<String, Object> targetUser) {
        this.targetUser = targetUser;
        return this;
    }
    
    /**
     * Date/time of the last update
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public Flag withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public Flag withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
}
