/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ChannelConfig } from "./channelconfig";
import { Config } from "./config";
import { FileUploadConfig } from "./fileuploadconfig";
import { Policy } from "./policy";
import { PushNotificationFields } from "./pushnotificationfields";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Backend implementation used for search
 */
export enum AppSearchBackendEnum {
  Elasticsearch = "elasticsearch",
  Postgres = "postgres",
  Disabled = "disabled",
}

export class App extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "agora_options" })
  @Type(() => Config)
  agoraOptions?: Config;

  @SpeakeasyMetadata()
  @Expose({ name: "async_url_enrich_enabled" })
  asyncUrlEnrichEnabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_translation_enabled" })
  autoTranslationEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "before_message_send_hook_url" })
  beforeMessageSendHookUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "campaign_enabled" })
  campaignEnabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "cdn_expiration_seconds" })
  cdnExpirationSeconds: number;

  /**
   * Object with channel configs
   */
  @SpeakeasyMetadata({ elemType: ChannelConfig })
  @Expose({ name: "channel_configs" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ChannelConfig> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ChannelConfig);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  channelConfigs: Record<string, ChannelConfig>;

  @SpeakeasyMetadata()
  @Expose({ name: "custom_action_handler_url" })
  customActionHandlerUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "disable_auth_checks" })
  disableAuthChecks: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "disable_permissions_checks" })
  disablePermissionsChecks: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "enforce_unique_usernames" })
  enforceUniqueUsernames: string;

  @SpeakeasyMetadata()
  @Expose({ name: "file_upload_config" })
  @Type(() => FileUploadConfig)
  fileUploadConfig: FileUploadConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "grants" })
  grants: Record<string, string[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "hms_options" })
  @Type(() => Config)
  hmsOptions?: Config;

  @SpeakeasyMetadata()
  @Expose({ name: "image_moderation_enabled" })
  imageModerationEnabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "image_moderation_labels" })
  imageModerationLabels?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "image_upload_config" })
  @Type(() => FileUploadConfig)
  imageUploadConfig: FileUploadConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "multi_tenant_enabled" })
  multiTenantEnabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  organization: string;

  @SpeakeasyMetadata()
  @Expose({ name: "permission_version" })
  permissionVersion: string;

  @SpeakeasyMetadata({ elemType: Policy, elemDepth: 2 })
  @Expose({ name: "policies" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Policy[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Policy);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  policies: Record<string, Policy[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "push_notifications" })
  @Type(() => PushNotificationFields)
  pushNotifications: PushNotificationFields;

  @SpeakeasyMetadata()
  @Expose({ name: "reminders_interval" })
  remindersInterval: number;

  @SpeakeasyMetadata()
  @Expose({ name: "revoke_tokens_issued_before" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  revokeTokensIssuedBefore?: Date;

  /**
   * Backend implementation used for search
   */
  @SpeakeasyMetadata()
  @Expose({ name: "search_backend" })
  searchBackend: AppSearchBackendEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sqs_key" })
  sqsKey: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sqs_secret" })
  sqsSecret: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sqs_url" })
  sqsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "suspended" })
  suspended: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "suspended_explanation" })
  suspendedExplanation: string;

  @SpeakeasyMetadata()
  @Expose({ name: "user_search_disallowed_roles" })
  userSearchDisallowedRoles: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "video_provider" })
  videoProvider: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webhook_events" })
  webhookEvents: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "webhook_url" })
  webhookUrl: string;
}
