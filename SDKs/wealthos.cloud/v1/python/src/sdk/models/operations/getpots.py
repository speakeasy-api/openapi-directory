"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPotsSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclasses.dataclass
class GetPotsRequest:
    
    investor_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'investor_id', 'style': 'simple', 'explode': False }})
    r"""Investor Id"""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    financial_product_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'financial_product_id', 'style': 'form', 'explode': True }})
    r"""multiple financial product ids as comma seperated string"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPots500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPots429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPots404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPots403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPots401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPots400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class GetPots200ApplicationJSONPotsPotCurrencyEnum(str, Enum):
    r"""If not populated, will be defaulted to tenancy currency"""
    GBP = 'GBP'
    CAD = 'CAD'
    USD = 'USD'

class GetPots200ApplicationJSONPotsStatusEnum(str, Enum):
    ACTIVE = 'active'
    INACTIVE = 'inactive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPots200ApplicationJSONPots:
    
    financial_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financial_product_id') }})  
    investor_id: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investor_id') }})  
    pot_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_name') }})  
    status: GetPots200ApplicationJSONPotsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    custodian_account_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_account_reference'), 'exclude': lambda f: f is None }})  
    custodian_client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_client_ref'), 'exclude': lambda f: f is None }})  
    custodian_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_id'), 'exclude': lambda f: f is None }})  
    portfolio_template_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolio_template_id'), 'exclude': lambda f: f is None }})  
    pot_currency: Optional[GetPots200ApplicationJSONPotsPotCurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_currency'), 'exclude': lambda f: f is None }})
    r"""If not populated, will be defaulted to tenancy currency"""  
    pot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id'), 'exclude': lambda f: f is None }})
    r"""system generated id"""  
    reference_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_version'), 'exclude': lambda f: f is None }})  
    regulator_advisor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regulator_advisor_id'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPots200ApplicationJSON:
    r"""Array of all active investment pots created by the investor"""
    
    pots: list[GetPots200ApplicationJSONPots] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pots') }})  
    

@dataclasses.dataclass
class GetPotsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_pots_200_application_json_object: Optional[GetPots200ApplicationJSON] = dataclasses.field(default=None)
    r"""success"""  
    get_pots_400_application_json_object: Optional[GetPots400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    get_pots_401_application_json_object: Optional[GetPots401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_pots_403_application_json_object: Optional[GetPots403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_pots_404_application_json_object: Optional[GetPots404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_pots_429_application_json_object: Optional[GetPots429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_pots_500_application_json_object: Optional[GetPots500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    