"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatientVaccineRecordVaccinationStatusEnum(str, Enum):
    r"""Vaccination status, can be `CP`(Complete), `RE`(Refused), `NA`(Not administered), `PA`(Partially administered)"""
    CP = 'CP'
    RE = 'RE'
    NA = 'NA'
    PA = 'PA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientVaccineRecordVaccineDose:
    r"""Vaccine dose ID"""
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    max_age_months: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_age_months'), 'exclude': lambda f: f is None }})  
    min_age_months: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_age_months'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    
class PatientVaccineRecordFundingEligibilityEnum(str, Enum):
    r"""The funding program that should pay for a given immunization"""
    V01 = 'V01'
    V02 = 'V02'
    V03 = 'V03'
    V04 = 'V04'
    V05 = 'V05'
    V07 = 'V07'

class PatientVaccineRecordObservedImmunityEnum(str, Enum):
    THREE_HUNDRED_AND_NINETY_EIGHT_MILLION_ONE_HUNDRED_AND_TWO_THOUSAND_AND_NINE = '398102009'
    FOUR_HUNDRED_AND_NINE_MILLION_FOUR_HUNDRED_AND_NINETY_EIGHT_THOUSAND_AND_FOUR = '409498004'
    THREE_HUNDRED_AND_NINETY_SEVEN_MILLION_FOUR_HUNDRED_AND_TWENTY_EIGHT_THOUSAND = '397428000'
    EIGHTEEN_MILLION_SIX_HUNDRED_AND_TWENTY_FOUR_THOUSAND = '18624000'
    NINETY_ONE_MILLION_FOUR_HUNDRED_AND_TWENTY_EIGHT_THOUSAND_AND_FIVE = '91428005'
    TWO_HUNDRED_AND_SEVENTY_ONE_MILLION_FIVE_HUNDRED_AND_ELEVEN_THOUSAND = '271511000'
    TWO_HUNDRED_AND_FORTY_MILLION_FIVE_HUNDRED_AND_THIRTY_TWO_THOUSAND_AND_NINE = '240532009'
    SIX_MILLION_ONE_HUNDRED_AND_FORTY_TWO_THOUSAND_AND_FOUR = '6142004'
    FIFTY_TWO_MILLION_NINE_HUNDRED_AND_FORTY_SEVEN_THOUSAND_AND_SIX = '52947006'
    FOURTEEN_MILLION_ONE_HUNDRED_AND_EIGHTY_NINE_THOUSAND_AND_FOUR = '14189004'
    TWENTY_THREE_MILLION_FIVE_HUNDRED_AND_ELEVEN_THOUSAND_AND_SIX = '23511006'
    THIRTY_SIX_MILLION_NINE_HUNDRED_AND_EIGHTY_NINE_THOUSAND_AND_FIVE = '36989005'
    TWENTY_SEVEN_MILLION_EIGHT_HUNDRED_AND_THIRTY_SIX_THOUSAND_AND_SEVEN = '27836007'
    SIXTEEN_MILLION_EIGHT_HUNDRED_AND_FOURTEEN_THOUSAND_AND_FOUR = '16814004'
    FOURTEEN_MILLION_ONE_HUNDRED_AND_SIXTY_EIGHT_THOUSAND_AND_EIGHT = '14168008'
    THIRTY_SIX_MILLION_SIX_HUNDRED_AND_FIFTY_THREE_THOUSAND = '36653000'
    SEVENTY_SIX_MILLION_NINE_HUNDRED_AND_TWO_THOUSAND_AND_SIX = '76902006'
    SIXTY_SIX_MILLION_SEVENTY_ONE_THOUSAND_AND_TWO = '66071002'
    FOUR_MILLION_EIGHT_HUNDRED_AND_THIRTY_FOUR_THOUSAND = '4834000'
    ONE_HUNDRED_AND_ELEVEN_MILLION_EIGHT_HUNDRED_AND_FIFTY_TWO_THOUSAND_AND_THREE = '111852003'
    THIRTY_EIGHT_MILLION_NINE_HUNDRED_AND_SEVEN_THOUSAND_AND_THREE = '38907003'
    FORTY_MILLION_FOUR_HUNDRED_AND_SIXTY_EIGHT_THOUSAND_AND_THREE = '40468003'
    SIXTEEN_MILLION_FIVE_HUNDRED_AND_FORTY_ONE_THOUSAND_AND_ONE = '16541001'

class PatientVaccineRecordRecordTypeEnum(str, Enum):
    ZERO = '00'
    ONE = '01'
    TWO = '02'
    THREE = '03'
    FOUR = '04'
    FIVE = '05'
    SIX = '06'
    SEVEN = '07'
    EIGHT = '08'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientVaccineRecord:
    r"""Created"""
    
    cvx_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvx_code') }})
    r"""Vaccine cvx code"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    patient: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})  
    administered_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('administered_at'), 'exclude': lambda f: f is None }})
    r"""ID of `/api/offices` where the administration happened"""  
    administered_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('administered_by'), 'exclude': lambda f: f is None }})
    r"""ID of `/api/users` who performs the administration"""  
    administration_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('administration_start'), 'exclude': lambda f: f is None }})
    r"""Datetime when the administration starts"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Amount of vaccine administered"""  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    completion_status: Optional[PatientVaccineRecordVaccinationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completion_status'), 'exclude': lambda f: f is None }})
    r"""Vaccination status, can be `CP`(Complete), `RE`(Refused), `NA`(Not administered), `PA`(Partially administered)"""  
    consent_form: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consent_form'), 'exclude': lambda f: f is None }})
    r"""Consent form related with vaccine record"""  
    cpt_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpt_code'), 'exclude': lambda f: f is None }})
    r"""Vaccine cpt code"""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    doses: Optional[list[PatientVaccineRecordVaccineDose]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doses'), 'exclude': lambda f: f is None }})
    r"""Vaccine dose IDs received in consent form signed hook"""  
    entered_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entered_by'), 'exclude': lambda f: f is None }})
    r"""ID of user who created the record"""  
    funding_eligibility: Optional[PatientVaccineRecordFundingEligibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding_eligibility'), 'exclude': lambda f: f is None }})
    r"""The funding program that should pay for a given immunization"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    next_dose_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_dose_date'), 'exclude': lambda f: f is None }})
    r"""Date for next dose of vaccine"""  
    observed_immunity: Optional[PatientVaccineRecordObservedImmunityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observed_immunity'), 'exclude': lambda f: f is None }})  
    ordering_doctor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ordering_doctor'), 'exclude': lambda f: f is None }})  
    record_source: Optional[PatientVaccineRecordRecordTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record_source'), 'exclude': lambda f: f is None }})  
    route: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route'), 'exclude': lambda f: f is None }})  
    site: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})  
    units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    vaccine_inventory: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vaccine_inventory'), 'exclude': lambda f: f is None }})
    r"""ID of `/api/vaccine_inventories` the vaccine is from"""  
    vis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vis'), 'exclude': lambda f: f is None }})
    r"""Related vaccine information statement"""  
    