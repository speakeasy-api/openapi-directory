/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class RegistrationsContributorsReadRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the registration.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=registration_id",
  })
  registrationId: string;

  /**
   * The unique identifier of the user.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=user_id",
  })
  userId: string;
}

/**
 * The permission level of the contributor. The default value is 'write'.
 */
export enum RegistrationsContributorsReadContributorAttributesPermissionEnum {
  Read = "read",
  Write = "write",
  Admin = "admin",
}

/**
 * The properties of the contributor entity.
 */
export class RegistrationsContributorsReadContributorAttributes extends SpeakeasyBase {
  /**
   * Whether or not the contributor will be included in citations for the node. The default value is true.
   */
  @SpeakeasyMetadata()
  bibliographic?: boolean;

  /**
   * The position of this contributor in the list of project contributors and in project citations.
   */
  @SpeakeasyMetadata()
  index?: number;

  /**
   * The permission level of the contributor. The default value is 'write'.
   */
  @SpeakeasyMetadata()
  permission?: RegistrationsContributorsReadContributorAttributesPermissionEnum;

  /**
   * The assigned name of the contributor if the contributor has not yet claimed their account.
   */
  @SpeakeasyMetadata()
  unregisteredContributor?: string;
}

/**
 * URLs to alternative representations of the contributor entity.
 */
export class RegistrationsContributorsReadContributorLinks extends SpeakeasyBase {
  /**
   * A link to the the canonical API endpoint for the contributor.
   */
  @SpeakeasyMetadata()
  self?: string;
}

/**
 * URLs to other entities or entity collections that have a relationship to the contributor entity.
 */
export class RegistrationsContributorsReadContributorRelationships extends SpeakeasyBase {
  /**
   * A relationship to the node that was created for the preprint, or from which the preprint was created.
   */
  @SpeakeasyMetadata()
  node: string;

  /**
   * A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint.
   */
  @SpeakeasyMetadata()
  user: string;
}

export class RegistrationsContributorsReadContributor extends SpeakeasyBase {
  /**
   * The properties of the contributor entity.
   */
  @SpeakeasyMetadata()
  attributes?: RegistrationsContributorsReadContributorAttributes;

  /**
   * The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * URLs to alternative representations of the contributor entity.
   */
  @SpeakeasyMetadata()
  links?: RegistrationsContributorsReadContributorLinks;

  /**
   * URLs to other entities or entity collections that have a relationship to the contributor entity.
   */
  @SpeakeasyMetadata()
  relationships: RegistrationsContributorsReadContributorRelationships;

  /**
   * The type identifier of the contributor entity (`contributors`).
   */
  @SpeakeasyMetadata()
  type: string;
}

export class RegistrationsContributorsReadResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
