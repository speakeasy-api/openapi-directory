<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * IdentitytoolkitRelyingpartyUploadAccountRequest - Request to upload user account in batch.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class IdentitytoolkitRelyingpartyUploadAccountRequest
{
    /**
     * Whether allow overwrite existing account when user local_id exists.
     * 
     * @var ?bool $allowOverwrite
     */
	#[\JMS\Serializer\Annotation\SerializedName('allowOverwrite')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowOverwrite = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('blockSize')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $blockSize = null;
    
    /**
     * The following 4 fields are for standard scrypt algorithm.
     * 
     * @var ?int $cpuMemCost
     */
	#[\JMS\Serializer\Annotation\SerializedName('cpuMemCost')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $cpuMemCost = null;
    
    /**
     * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
     * 
     * @var ?string $delegatedProjectNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('delegatedProjectNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $delegatedProjectNumber = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('dkLen')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $dkLen = null;
    
    /**
     * The password hash algorithm.
     * 
     * @var ?string $hashAlgorithm
     */
	#[\JMS\Serializer\Annotation\SerializedName('hashAlgorithm')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $hashAlgorithm = null;
    
    /**
     * Memory cost for hash calculation. Used by scrypt similar algorithms.
     * 
     * @var ?int $memoryCost
     */
	#[\JMS\Serializer\Annotation\SerializedName('memoryCost')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $memoryCost = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('parallelization')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $parallelization = null;
    
    /**
     * Rounds for hash calculation. Used by scrypt and similar algorithms.
     * 
     * @var ?int $rounds
     */
	#[\JMS\Serializer\Annotation\SerializedName('rounds')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $rounds = null;
    
    /**
     * The salt separator.
     * 
     * @var ?string $saltSeparator
     */
	#[\JMS\Serializer\Annotation\SerializedName('saltSeparator')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $saltSeparator = null;
    
    /**
     * If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
     * 
     * @var ?bool $sanityCheck
     */
	#[\JMS\Serializer\Annotation\SerializedName('sanityCheck')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $sanityCheck = null;
    
    /**
     * The key for to hash the password.
     * 
     * @var ?string $signerKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('signerKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $signerKey = null;
    
    /**
     * Specify which project (field value is actually project id) to operate. Only used when provided credential.
     * 
     * @var ?string $targetProjectId
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetProjectId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetProjectId = null;
    
    /**
     * The account info to be stored.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\UserInfo> $users
     */
	#[\JMS\Serializer\Annotation\SerializedName('users')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\UserInfo>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $users = null;
    
	public function __construct()
	{
		$this->allowOverwrite = null;
		$this->blockSize = null;
		$this->cpuMemCost = null;
		$this->delegatedProjectNumber = null;
		$this->dkLen = null;
		$this->hashAlgorithm = null;
		$this->memoryCost = null;
		$this->parallelization = null;
		$this->rounds = null;
		$this->saltSeparator = null;
		$this->sanityCheck = null;
		$this->signerKey = null;
		$this->targetProjectId = null;
		$this->users = null;
	}
}
