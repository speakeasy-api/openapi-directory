"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class FilesUploadFiles:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_files(self, request: operations.GetFilesRequest) -> operations.GetFilesResponse:
        r"""Returns a paginated list of files"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files'
        
        query_params = utils.get_query_params(operations.GetFilesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_files_by_id_or_url(self, request: operations.GetFilesByIDOrURLRequest) -> operations.GetFilesByIDOrURLResponse:
        r"""Get the details for a file."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files/byIdOrUrl'
        
        query_params = utils.get_query_params(operations.GetFilesByIDOrURLRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilesByIDOrURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_files_download(self, request: operations.GetFilesDownloadRequest) -> operations.GetFilesDownloadResponse:
        r"""A signed URL for downloading a private file can be returned by providing the fileId."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files/download'
        
        query_params = utils.get_query_params(operations.GetFilesDownloadRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilesDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 404]:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_files(self, request: operations.PostFilesRequest) -> operations.PostFilesResponse:
        r"""Uploads a file.
        - WARNING: File URLs or fileIds must be stored somewhere within the customData field for an app, review, developer or user. Unused files will be removed after a few days. 
        - This method is called on behalf of a developer.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostFilesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_files_url(self, request: operations.PostFilesURLRequest) -> operations.PostFilesURLResponse:
        r"""Uploads a file from a URL
        - WARNING: File URLs or fileIds must be stored somewhere within the customData field for an app, review, developer or user. Unused files will be removed after a few days.
        - This method is called on behalf of a developer.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files/url'
        
        query_params = utils.get_query_params(operations.PostFilesURLRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFilesURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    