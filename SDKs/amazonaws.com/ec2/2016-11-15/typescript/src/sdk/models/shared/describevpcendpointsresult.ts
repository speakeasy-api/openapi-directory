/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes a DNS entry.
 */
export class DescribeVpcEndpointsResultVpcEndpointsDnsEntries extends SpeakeasyBase {
  @SpeakeasyMetadata()
  dnsName?: string;

  @SpeakeasyMetadata()
  hostedZoneId?: string;
}

/**
 * The DNS records created for the endpoint.
 */
export enum DescribeVpcEndpointsResultVpcEndpointsDnsOptionsDnsRecordIpTypeEnum {
  Ipv4 = "ipv4",
  Dualstack = "dualstack",
  Ipv6 = "ipv6",
  ServiceDefined = "service-defined",
}

/**
 * The DNS options for the endpoint.
 */
export class DescribeVpcEndpointsResultVpcEndpointsDnsOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  dnsRecordIpType?: DescribeVpcEndpointsResultVpcEndpointsDnsOptionsDnsRecordIpTypeEnum;

  @SpeakeasyMetadata()
  privateDnsOnlyForInboundResolverEndpoint?: boolean;
}

/**
 * Describes a security group.
 */
export class DescribeVpcEndpointsResultVpcEndpointsGroups extends SpeakeasyBase {
  @SpeakeasyMetadata()
  groupId?: string;

  @SpeakeasyMetadata()
  groupName?: string;
}

/**
 * The IP address type for the endpoint.
 */
export enum DescribeVpcEndpointsResultVpcEndpointsIpAddressTypeEnum {
  Ipv4 = "ipv4",
  Dualstack = "dualstack",
  Ipv6 = "ipv6",
}

/**
 * The last error that occurred for endpoint.
 */
export class DescribeVpcEndpointsResultVpcEndpointsLastError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: string;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * The state of the endpoint.
 */
export enum DescribeVpcEndpointsResultVpcEndpointsStateEnum {
  PendingAcceptance = "PendingAcceptance",
  Pending = "Pending",
  Available = "Available",
  Deleting = "Deleting",
  Deleted = "Deleted",
  Rejected = "Rejected",
  Failed = "Failed",
  Expired = "Expired",
}

/**
 * Describes a tag.
 */
export class DescribeVpcEndpointsResultVpcEndpointsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The type of endpoint.
 */
export enum DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum {
  Interface = "Interface",
  Gateway = "Gateway",
  GatewayLoadBalancer = "GatewayLoadBalancer",
}

/**
 * Describes a VPC endpoint.
 */
export class DescribeVpcEndpointsResultVpcEndpoints extends SpeakeasyBase {
  @SpeakeasyMetadata()
  creationTimestamp?: Date;

  @SpeakeasyMetadata({
    elemType: DescribeVpcEndpointsResultVpcEndpointsDnsEntries,
  })
  dnsEntries?: DescribeVpcEndpointsResultVpcEndpointsDnsEntries[];

  @SpeakeasyMetadata()
  dnsOptions?: DescribeVpcEndpointsResultVpcEndpointsDnsOptions;

  @SpeakeasyMetadata({ elemType: DescribeVpcEndpointsResultVpcEndpointsGroups })
  groups?: DescribeVpcEndpointsResultVpcEndpointsGroups[];

  @SpeakeasyMetadata()
  ipAddressType?: DescribeVpcEndpointsResultVpcEndpointsIpAddressTypeEnum;

  @SpeakeasyMetadata()
  lastError?: DescribeVpcEndpointsResultVpcEndpointsLastError;

  @SpeakeasyMetadata()
  networkInterfaceIds?: string[];

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  policyDocument?: string;

  @SpeakeasyMetadata()
  privateDnsEnabled?: boolean;

  @SpeakeasyMetadata()
  requesterManaged?: boolean;

  @SpeakeasyMetadata()
  routeTableIds?: string[];

  @SpeakeasyMetadata()
  serviceName?: string;

  @SpeakeasyMetadata()
  state?: DescribeVpcEndpointsResultVpcEndpointsStateEnum;

  @SpeakeasyMetadata()
  subnetIds?: string[];

  @SpeakeasyMetadata({ elemType: DescribeVpcEndpointsResultVpcEndpointsTags })
  tags?: DescribeVpcEndpointsResultVpcEndpointsTags[];

  @SpeakeasyMetadata()
  vpcEndpointId?: string;

  @SpeakeasyMetadata()
  vpcEndpointType?: DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum;

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * Success
 */
export class DescribeVpcEndpointsResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({ elemType: DescribeVpcEndpointsResultVpcEndpoints })
  vpcEndpoints?: DescribeVpcEndpointsResultVpcEndpoints[];
}
