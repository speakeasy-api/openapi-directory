/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class BuildsDistributeSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export enum BuildsDistributeRequestBodyDestinationsTypeEnum {
  Store = "store",
  Group = "group",
  Tester = "tester",
}

/**
 * Destination details for distributing build releases
 */
export class BuildsDistributeRequestBodyDestinations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: BuildsDistributeRequestBodyDestinationsTypeEnum;
}

/**
 * The distribution details
 */
export class BuildsDistributeRequestBody extends SpeakeasyBase {
  /**
   * Array of objects {id:string, type:string} with "id" being the distribution group ID, store ID, or tester email, and "type" being "group", "store", or "tester"
   */
  @SpeakeasyMetadata({ elemType: BuildsDistributeRequestBodyDestinations })
  @Expose({ name: "destinations" })
  @Type(() => BuildsDistributeRequestBodyDestinations)
  destinations?: BuildsDistributeRequestBodyDestinations[];

  @SpeakeasyMetadata()
  @Expose({ name: "mandatoryUpdate" })
  mandatoryUpdate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "notifyTesters" })
  notifyTesters?: boolean;

  /**
   * The release notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseNotes" })
  releaseNotes?: string;
}

export class BuildsDistributeRequest extends SpeakeasyBase {
  /**
   * The distribution details
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: BuildsDistributeRequestBody;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The build ID
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=build_id",
  })
  buildId: number;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;
}

/**
 * Success
 */
export class BuildsDistribute200ApplicationJSON extends SpeakeasyBase {
  /**
   * Status of the Request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * A unique ID of the upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_id" })
  uploadId?: string;
}

export class BuildsDistributeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  buildsDistribute200ApplicationJSONObject?: BuildsDistribute200ApplicationJSON;
}
