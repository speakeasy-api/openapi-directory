/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RankingMetrics - Evaluation metrics used by weighted-ALS models specified by feedback_type=implicit.
 */
public class RankingMetrics {
    /**
     * Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("averageRank")
    public Double averageRank;
    public RankingMetrics withAverageRank(Double averageRank) {
        this.averageRank = averageRank;
        return this;
    }
    
    /**
     * Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meanAveragePrecision")
    public Double meanAveragePrecision;
    public RankingMetrics withMeanAveragePrecision(Double meanAveragePrecision) {
        this.meanAveragePrecision = meanAveragePrecision;
        return this;
    }
    
    /**
     * Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meanSquaredError")
    public Double meanSquaredError;
    public RankingMetrics withMeanSquaredError(Double meanSquaredError) {
        this.meanSquaredError = meanSquaredError;
        return this;
    }
    
    /**
     * A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("normalizedDiscountedCumulativeGain")
    public Double normalizedDiscountedCumulativeGain;
    public RankingMetrics withNormalizedDiscountedCumulativeGain(Double normalizedDiscountedCumulativeGain) {
        this.normalizedDiscountedCumulativeGain = normalizedDiscountedCumulativeGain;
        return this;
    }
    
}
