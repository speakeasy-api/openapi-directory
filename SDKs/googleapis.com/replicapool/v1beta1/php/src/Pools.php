<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Pools 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a replica pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteResponse
     */
	public function replicapoolPoolsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{projectName}/zones/{zone}/pools/{poolName}', \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "poolsDeleteRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets information about a single replica pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetResponse
     */
	public function replicapoolPoolsGet(
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{projectName}/zones/{zone}/pools/{poolName}', \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new replica pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertResponse
     */
	public function replicapoolPoolsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{projectName}/zones/{zone}/pools', \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pool", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List all replica pools.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListResponse
     */
	public function replicapoolPoolsList(
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{projectName}/zones/{zone}/pools', \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeResponse
     */
	public function replicapoolPoolsResize(
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{projectName}/zones/{zone}/pools/{poolName}/resize', \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsResizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update the template used by the pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateResponse
     */
	public function replicapoolPoolsUpdatetemplate(
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{projectName}/zones/{zone}/pools/{poolName}/updateTemplate', \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "template", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplicapoolPoolsUpdatetemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}