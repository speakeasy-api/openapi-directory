/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TaskResponse - The *task* is the basic object around which many operations in Asana are centered.
 */
public class TaskResponse {
    /**
     * This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actual_time_minutes")
    public Double actualTimeMinutes;

    public TaskResponse withActualTimeMinutes(Double actualTimeMinutes) {
        this.actualTimeMinutes = actualTimeMinutes;
        return this;
    }
    
    /**
     * *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_status")
    public TaskResponseApprovalStatusEnum approvalStatus;

    public TaskResponse withApprovalStatus(TaskResponseApprovalStatusEnum approvalStatus) {
        this.approvalStatus = approvalStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee")
    public TaskResponseAssignee assignee;

    public TaskResponse withAssignee(TaskResponseAssignee assignee) {
        this.assignee = assignee;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee_section")
    public TaskResponseAssigneeSection assigneeSection;

    public TaskResponse withAssigneeSection(TaskResponseAssigneeSection assigneeSection) {
        this.assigneeSection = assigneeSection;
        return this;
    }
    
    /**
     * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee_status")
    public TaskResponseAssigneeStatusEnum assigneeStatus;

    public TaskResponse withAssigneeStatus(TaskResponseAssigneeStatusEnum assigneeStatus) {
        this.assigneeStatus = assigneeStatus;
        return this;
    }
    
    /**
     * True if the task is currently marked complete, false if not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed")
    public Boolean completed;

    public TaskResponse withCompleted(Boolean completed) {
        this.completed = completed;
        return this;
    }
    
    /**
     * The time at which this task was completed, or null if the task is incomplete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("completed_at")
    public OffsetDateTime completedAt;

    public TaskResponse withCompletedAt(OffsetDateTime completedAt) {
        this.completedAt = completedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed_by")
    public UserCompact completedBy;

    public TaskResponse withCompletedBy(UserCompact completedBy) {
        this.completedBy = completedBy;
        return this;
    }
    
    /**
     * The time at which this resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public TaskResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    public CustomFieldResponse[] customFields;

    public TaskResponse withCustomFields(CustomFieldResponse[] customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependencies")
    public AsanaResource[] dependencies;

    public TaskResponse withDependencies(AsanaResource[] dependencies) {
        this.dependencies = dependencies;
        return this;
    }
    
    /**
     * [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependents")
    public AsanaResource[] dependents;

    public TaskResponse withDependents(AsanaResource[] dependents) {
        this.dependents = dependents;
        return this;
    }
    
    /**
     * The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("due_at")
    public LocalDate dueAt;

    public TaskResponse withDueAt(LocalDate dueAt) {
        this.dueAt = dueAt;
        return this;
    }
    
    /**
     * The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("due_on")
    public LocalDate dueOn;

    public TaskResponse withDueOn(LocalDate dueOn) {
        this.dueOn = dueOn;
        return this;
    }
    
    /**
     * *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).
     * The external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external")
    public TaskResponseExternal external;

    public TaskResponse withExternal(TaskResponseExternal external) {
        this.external = external;
        return this;
    }
    
    /**
     * Array of users following this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    public UserCompact[] followers;

    public TaskResponse withFollowers(UserCompact[] followers) {
        this.followers = followers;
        return this;
    }
    
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gid")
    public String gid;

    public TaskResponse withGid(String gid) {
        this.gid = gid;
        return this;
    }
    
    /**
     * *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hearted")
    public Boolean hearted;

    public TaskResponse withHearted(Boolean hearted) {
        this.hearted = hearted;
        return this;
    }
    
    /**
     * *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hearts")
    public Like[] hearts;

    public TaskResponse withHearts(Like[] hearts) {
        this.hearts = hearts;
        return this;
    }
    
    /**
     * [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_notes")
    public String htmlNotes;

    public TaskResponse withHtmlNotes(String htmlNotes) {
        this.htmlNotes = htmlNotes;
        return this;
    }
    
    /**
     * [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_rendered_as_separator")
    public Boolean isRenderedAsSeparator;

    public TaskResponse withIsRenderedAsSeparator(Boolean isRenderedAsSeparator) {
        this.isRenderedAsSeparator = isRenderedAsSeparator;
        return this;
    }
    
    /**
     * True if the task is liked by the authorized user, false if not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liked")
    public Boolean liked;

    public TaskResponse withLiked(Boolean liked) {
        this.liked = liked;
        return this;
    }
    
    /**
     * Array of likes for users who have liked this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("likes")
    public Like[] likes;

    public TaskResponse withLikes(Like[] likes) {
        this.likes = likes;
        return this;
    }
    
    /**
     * *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memberships")
    public TaskResponseMemberships[] memberships;

    public TaskResponse withMemberships(TaskResponseMemberships[] memberships) {
        this.memberships = memberships;
        return this;
    }
    
    /**
     * The time at which this task was last modified.
     * 
     * *Note: This does not currently reflect any changes in
     * associations such as projects or comments that may have been
     * added or removed from the task.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modified_at")
    public OffsetDateTime modifiedAt;

    public TaskResponse withModifiedAt(OffsetDateTime modifiedAt) {
        this.modifiedAt = modifiedAt;
        return this;
    }
    
    /**
     * The name of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public TaskResponse withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Free-form textual information associated with the task (i.e. its description).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public TaskResponse withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * *Deprecated - please use likes instead* The number of users who have hearted this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_hearts")
    public Long numHearts;

    public TaskResponse withNumHearts(Long numHearts) {
        this.numHearts = numHearts;
        return this;
    }
    
    /**
     * The number of users who have liked this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_likes")
    public Long numLikes;

    public TaskResponse withNumLikes(Long numLikes) {
        this.numLikes = numLikes;
        return this;
    }
    
    /**
     * [Opt In](/docs/input-output-options). The number of subtasks on this task.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_subtasks")
    public Long numSubtasks;

    public TaskResponse withNumSubtasks(Long numSubtasks) {
        this.numSubtasks = numSubtasks;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent")
    public TaskResponseParent parent;

    public TaskResponse withParent(TaskResponseParent parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * A url that points directly to the object within Asana.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permalink_url")
    public String permalinkUrl;

    public TaskResponse withPermalinkUrl(String permalinkUrl) {
        this.permalinkUrl = permalinkUrl;
        return this;
    }
    
    /**
     * *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projects")
    public ProjectCompact[] projects;

    public TaskResponse withProjects(ProjectCompact[] projects) {
        this.projects = projects;
        return this;
    }
    
    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     * The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_subtype")
    public TaskResponseResourceSubtypeEnum resourceSubtype;

    public TaskResponse withResourceSubtype(TaskResponseResourceSubtypeEnum resourceSubtype) {
        this.resourceSubtype = resourceSubtype;
        return this;
    }
    
    /**
     * The base type of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_type")
    public String resourceType;

    public TaskResponse withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }
    
    /**
     * Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`.
     * *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_at")
    public LocalDate startAt;

    public TaskResponse withStartAt(LocalDate startAt) {
        this.startAt = startAt;
        return this;
    }
    
    /**
     * The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`.
     * *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_on")
    public LocalDate startOn;

    public TaskResponse withStartOn(LocalDate startOn) {
        this.startOn = startOn;
        return this;
    }
    
    /**
     * Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public TagCompact[] tags;

    public TaskResponse withTags(TagCompact[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace")
    public TaskResponseWorkspace workspace;

    public TaskResponse withWorkspace(TaskResponseWorkspace workspace) {
        this.workspace = workspace;
        return this;
    }
    
    public TaskResponse(){}
}
