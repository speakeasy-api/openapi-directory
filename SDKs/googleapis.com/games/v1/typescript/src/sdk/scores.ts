/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Scores {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'.
   */
  gamesScoresGet(
    req: operations.GamesScoresGetRequest,
    security: operations.GamesScoresGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesScoresGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesScoresGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesScoresGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesScoresGetResponse =
        new operations.GamesScoresGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerLeaderboardScoreListResponse = utils.objectToClass(
              httpRes?.data,
              shared.PlayerLeaderboardScoreListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the scores in a leaderboard, starting from the top.
   */
  gamesScoresList(
    req: operations.GamesScoresListRequest,
    security: operations.GamesScoresListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesScoresListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesScoresListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/leaderboards/{leaderboardId}/scores/{collection}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesScoresListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesScoresListResponse =
        new operations.GamesScoresListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaderboardScores = utils.objectToClass(
              httpRes?.data,
              shared.LeaderboardScores
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the scores in a leaderboard around (and including) a player's score.
   */
  gamesScoresListWindow(
    req: operations.GamesScoresListWindowRequest,
    security: operations.GamesScoresListWindowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesScoresListWindowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesScoresListWindowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/leaderboards/{leaderboardId}/window/{collection}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesScoresListWindowSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesScoresListWindowResponse =
        new operations.GamesScoresListWindowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaderboardScores = utils.objectToClass(
              httpRes?.data,
              shared.LeaderboardScores
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submits a score to the specified leaderboard.
   */
  gamesScoresSubmit(
    req: operations.GamesScoresSubmitRequest,
    security: operations.GamesScoresSubmitSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesScoresSubmitResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesScoresSubmitRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/leaderboards/{leaderboardId}/scores",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesScoresSubmitSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesScoresSubmitResponse =
        new operations.GamesScoresSubmitResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerScoreResponse = utils.objectToClass(
              httpRes?.data,
              shared.PlayerScoreResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submits multiple scores to leaderboards.
   */
  gamesScoresSubmitMultiple(
    req: operations.GamesScoresSubmitMultipleRequest,
    security: operations.GamesScoresSubmitMultipleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesScoresSubmitMultipleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesScoresSubmitMultipleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/games/v1/leaderboards/scores";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "playerScoreSubmissionList",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesScoresSubmitMultipleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesScoresSubmitMultipleResponse =
        new operations.GamesScoresSubmitMultipleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerScoreListResponse = utils.objectToClass(
              httpRes?.data,
              shared.PlayerScoreListResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
