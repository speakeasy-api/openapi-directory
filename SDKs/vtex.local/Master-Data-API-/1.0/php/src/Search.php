<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Search 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Search documents
     * 
     * Retrieves documents' information, while choosing which fields will be returned and filtering documents by specific fields.
     * 
     * > The response header `REST-Content-Range` indicates the total amount of results for that specific search. For example, it may return `resources 0-100/136108`, which indicates it has returned results from 0 to 100 of a total 136108.
     * 
     * Below you can see some query examples and learn more about each query parameter.
     * 
     * 
     * > Avoid sending too many requests with wildcards (`*`) in the search parameters or that use the `keyword` parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code `503`.
     * 
     * ## Query examples
     * 
     * ### Simple filter
     * 
     * ```
     * /dataentities/Client/search?email=my@email.com
     * ```
     * 
     * ### Complex filter
     * 
     * ```
     * /dataentities/Client/search?_where=(firstName=Jon OR lastName=Smith) OR (createdIn between 2001-01-01 AND 2016-01-01)
     * ```
     * 
     * ### Date Range
     * 
     * ```
     * /dataentities/Client/search?_where=createdIn between 2001-01-01 AND 2016-01-01
     * ```
     * 
     * ### Range numeric fields
     * 
     * ```
     * /dataentities/Client/search?_where=age between 18 AND 25
     * ```
     * 
     * ### Partial filter
     * 
     * ```
     * /dataentities/Client/search?firstName=*Maria*
     * ```
     * 
     * ### Filter for null values
     * 
     * ```
     * /dataentities/Client/search?_where=firstName is null
     * ```
     * 
     * ### Filter for non-null values
     * 
     * ```
     * /dataentities/Client/search?_where=firstName is not null
     * ```
     * 
     * ### Filter for difference
     * ```
     * /dataentities/Client/search?_where=firstName<>maria
     * ```
     * 
     * ### Filter greater than or less than
     * ```
     * /dataentities/Client/search?_where=number>5
     * /dataentities/Client/search?_where=date<2001-01-01
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchdocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchdocumentsResponse
     */
	public function searchdocuments(
        \OpenAPI\OpenAPI\Models\Operations\SearchdocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchdocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/search', \OpenAPI\OpenAPI\Models\Operations\SearchdocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchdocumentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchdocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchdocuments503ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
}