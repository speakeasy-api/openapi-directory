/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreatePullRequestApprovalRuleXAmzTargetEnum {
  CodeCommit20150413CreatePullRequestApprovalRule = "CodeCommit_20150413.CreatePullRequestApprovalRule",
}

export class CreatePullRequestApprovalRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createPullRequestApprovalRuleInput: shared.CreatePullRequestApprovalRuleInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreatePullRequestApprovalRuleXAmzTargetEnum;
}

export class CreatePullRequestApprovalRuleResponse extends SpeakeasyBase {
  /**
   * ApprovalRuleContentRequiredException
   */
  @SpeakeasyMetadata()
  approvalRuleContentRequiredException?: any;

  /**
   * ApprovalRuleNameAlreadyExistsException
   */
  @SpeakeasyMetadata()
  approvalRuleNameAlreadyExistsException?: any;

  /**
   * ApprovalRuleNameRequiredException
   */
  @SpeakeasyMetadata()
  approvalRuleNameRequiredException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createPullRequestApprovalRuleOutput?: shared.CreatePullRequestApprovalRuleOutput;

  /**
   * EncryptionIntegrityChecksFailedException
   */
  @SpeakeasyMetadata()
  encryptionIntegrityChecksFailedException?: any;

  /**
   * EncryptionKeyAccessDeniedException
   */
  @SpeakeasyMetadata()
  encryptionKeyAccessDeniedException?: any;

  /**
   * EncryptionKeyDisabledException
   */
  @SpeakeasyMetadata()
  encryptionKeyDisabledException?: any;

  /**
   * EncryptionKeyNotFoundException
   */
  @SpeakeasyMetadata()
  encryptionKeyNotFoundException?: any;

  /**
   * EncryptionKeyUnavailableException
   */
  @SpeakeasyMetadata()
  encryptionKeyUnavailableException?: any;

  /**
   * InvalidApprovalRuleContentException
   */
  @SpeakeasyMetadata()
  invalidApprovalRuleContentException?: any;

  /**
   * InvalidApprovalRuleNameException
   */
  @SpeakeasyMetadata()
  invalidApprovalRuleNameException?: any;

  /**
   * InvalidPullRequestIdException
   */
  @SpeakeasyMetadata()
  invalidPullRequestIdException?: any;

  /**
   * NumberOfRulesExceededException
   */
  @SpeakeasyMetadata()
  numberOfRulesExceededException?: any;

  /**
   * PullRequestAlreadyClosedException
   */
  @SpeakeasyMetadata()
  pullRequestAlreadyClosedException?: any;

  /**
   * PullRequestDoesNotExistException
   */
  @SpeakeasyMetadata()
  pullRequestDoesNotExistException?: any;

  /**
   * PullRequestIdRequiredException
   */
  @SpeakeasyMetadata()
  pullRequestIdRequiredException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
