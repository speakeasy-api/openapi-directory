"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Configuration:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def affiliation_by_id(self, request: operations.AffiliationByIDRequest) -> operations.AffiliationByIDResponse:
        r"""Affiliation By Id
        Returns associated data for the specified affiliation Id, like name and implementation, for example.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AffiliationByIDRequest, base_url, '/api/pvt/affiliations/{affiliationId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AffiliationByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def affiliations(self, request: operations.AffiliationsRequest) -> operations.AffiliationsResponse:
        r"""Affiliations
        Returns all affiliations that your provider can handle.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/pvt/affiliations'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AffiliationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def available_payment_methods(self, request: operations.AvailablePaymentMethodsRequest) -> operations.AvailablePaymentMethodsResponse:
        r"""Available Payment Methods
        Returns enabled payment methods, like visa, master, bankissueinvoice that are shown for the final user and enabled to receive payment.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/pvt/merchants/payment-systems'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AvailablePaymentMethodsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PaymentSystemsResponse]])
                res.payment_systems_responses = out

        return res

    def insert_affiliation(self, request: operations.InsertAffiliationRequest) -> operations.InsertAffiliationResponse:
        r"""Insert Affiliation
        Creates a new affiliation and returns a successful response.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/pvt/affiliations'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "insert_affiliation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InsertAffiliationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def insert_rule(self, request: operations.InsertRuleRequest) -> operations.InsertRuleResponse:
        r"""Insert Rule
        Creates a new rule and returns a successful response.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/pvt/rules'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "insert_rule_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InsertRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_rule_by_id(self, request: operations.PutRuleByIDRequest) -> operations.PutRuleByIDResponse:
        r"""Rule By Id
        Update Rule.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRuleByIDRequest, base_url, '/api/pvt/rules/{ruleId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "rule_by_id_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRuleByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def rule(self, request: operations.RuleRequest) -> operations.RuleResponse:
        r"""Delete Rule
        Deletes rules by specified Id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RuleRequest, base_url, '/api/pvt/rules/{ruleId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def rule_by_id(self, request: operations.RuleByIDRequest) -> operations.RuleByIDResponse:
        r"""Rule By Id
        Returns rule by specified RuleId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RuleByIDRequest, base_url, '/api/pvt/rules/{ruleId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RuleByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def rules(self, request: operations.RulesRequest) -> operations.RulesResponse:
        r"""Rules
        Returns all rules conditions your provider can handle.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/pvt/rules'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_affiliation(self, request: operations.UpdateAffiliationRequest) -> operations.UpdateAffiliationResponse:
        r"""Update Affiliation
        Returns all affiliations.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAffiliationRequest, base_url, '/api/pvt/affiliations/{affiliationId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_affiliation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAffiliationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    