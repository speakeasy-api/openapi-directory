"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import boundingpoly as shared_boundingpoly
from ..shared import textsegment as shared_textsegment
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LayoutTextSegmentTypeEnum(str, Enum):
    r"""The type of the text_segment in document."""
    TEXT_SEGMENT_TYPE_UNSPECIFIED = 'TEXT_SEGMENT_TYPE_UNSPECIFIED'
    TOKEN = 'TOKEN'
    PARAGRAPH = 'PARAGRAPH'
    FORM_FIELD = 'FORM_FIELD'
    FORM_FIELD_NAME = 'FORM_FIELD_NAME'
    FORM_FIELD_CONTENTS = 'FORM_FIELD_CONTENTS'
    TABLE = 'TABLE'
    TABLE_HEADER = 'TABLE_HEADER'
    TABLE_ROW = 'TABLE_ROW'
    TABLE_CELL = 'TABLE_CELL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Layout:
    r"""Describes the layout information of a text_segment in the document."""
    
    bounding_poly: Optional[shared_boundingpoly.BoundingPoly] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boundingPoly'), 'exclude': lambda f: f is None }})
    r"""A bounding polygon of a detected object on a plane. On output both vertices and normalized_vertices are provided. The polygon is formed by connecting vertices in the order they are listed."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageNumber'), 'exclude': lambda f: f is None }})
    r"""Page number of the text_segment in the original document, starts from 1."""  
    text_segment: Optional[shared_textsegment.TextSegment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textSegment'), 'exclude': lambda f: f is None }})
    r"""A contiguous part of a text (string), assuming it has an UTF-8 NFC encoding."""  
    text_segment_type: Optional[LayoutTextSegmentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textSegmentType'), 'exclude': lambda f: f is None }})
    r"""The type of the text_segment in document."""  
    