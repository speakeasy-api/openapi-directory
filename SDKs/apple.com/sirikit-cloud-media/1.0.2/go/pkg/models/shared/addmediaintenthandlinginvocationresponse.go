// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type AddMediaIntentHandlingInvocationResponseType string

const (
	AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingConfirm                 AddMediaIntentHandlingInvocationResponseType = "AddMediaIntentHandling.confirm"
	AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingHandle                  AddMediaIntentHandlingInvocationResponseType = "AddMediaIntentHandling.handle"
	AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingResolveMediaDestination AddMediaIntentHandlingInvocationResponseType = "AddMediaIntentHandling.resolveMediaDestination"
	AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingResolveMediaItems       AddMediaIntentHandlingInvocationResponseType = "AddMediaIntentHandling.resolveMediaItems"
	AddMediaIntentHandlingInvocationResponseTypeProtocolException                             AddMediaIntentHandlingInvocationResponseType = "ProtocolException"
)

type AddMediaIntentHandlingInvocationResponse struct {
	AddMediaIntentHandlingResolveMediaItemsInvocationResponse       *AddMediaIntentHandlingResolveMediaItemsInvocationResponse
	AddMediaIntentHandlingResolveMediaDestinationInvocationResponse *AddMediaIntentHandlingResolveMediaDestinationInvocationResponse
	AddMediaIntentHandlingConfirmInvocationResponse                 *AddMediaIntentHandlingConfirmInvocationResponse
	AddMediaIntentHandlingHandleInvocationResponse                  *AddMediaIntentHandlingHandleInvocationResponse
	ProtocolExceptionInvocationResponse                             *ProtocolExceptionInvocationResponse

	Type AddMediaIntentHandlingInvocationResponseType
}

func CreateAddMediaIntentHandlingInvocationResponseAddMediaIntentHandlingConfirm(addMediaIntentHandlingConfirm AddMediaIntentHandlingConfirmInvocationResponse) AddMediaIntentHandlingInvocationResponse {
	typ := AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingConfirm
	typStr := string(typ)
	addMediaIntentHandlingConfirm.Method = typStr

	return AddMediaIntentHandlingInvocationResponse{
		AddMediaIntentHandlingConfirmInvocationResponse: &addMediaIntentHandlingConfirm,
		Type: typ,
	}
}

func CreateAddMediaIntentHandlingInvocationResponseAddMediaIntentHandlingHandle(addMediaIntentHandlingHandle AddMediaIntentHandlingHandleInvocationResponse) AddMediaIntentHandlingInvocationResponse {
	typ := AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingHandle
	typStr := string(typ)
	addMediaIntentHandlingHandle.Method = typStr

	return AddMediaIntentHandlingInvocationResponse{
		AddMediaIntentHandlingHandleInvocationResponse: &addMediaIntentHandlingHandle,
		Type: typ,
	}
}

func CreateAddMediaIntentHandlingInvocationResponseAddMediaIntentHandlingResolveMediaDestination(addMediaIntentHandlingResolveMediaDestination AddMediaIntentHandlingResolveMediaDestinationInvocationResponse) AddMediaIntentHandlingInvocationResponse {
	typ := AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingResolveMediaDestination
	typStr := string(typ)
	addMediaIntentHandlingResolveMediaDestination.Method = typStr

	return AddMediaIntentHandlingInvocationResponse{
		AddMediaIntentHandlingResolveMediaDestinationInvocationResponse: &addMediaIntentHandlingResolveMediaDestination,
		Type: typ,
	}
}

func CreateAddMediaIntentHandlingInvocationResponseAddMediaIntentHandlingResolveMediaItems(addMediaIntentHandlingResolveMediaItems AddMediaIntentHandlingResolveMediaItemsInvocationResponse) AddMediaIntentHandlingInvocationResponse {
	typ := AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingResolveMediaItems
	typStr := string(typ)
	addMediaIntentHandlingResolveMediaItems.Method = typStr

	return AddMediaIntentHandlingInvocationResponse{
		AddMediaIntentHandlingResolveMediaItemsInvocationResponse: &addMediaIntentHandlingResolveMediaItems,
		Type: typ,
	}
}

func CreateAddMediaIntentHandlingInvocationResponseProtocolException(protocolException ProtocolExceptionInvocationResponse) AddMediaIntentHandlingInvocationResponse {
	typ := AddMediaIntentHandlingInvocationResponseTypeProtocolException
	typStr := string(typ)
	protocolException.Method = typStr

	return AddMediaIntentHandlingInvocationResponse{
		ProtocolExceptionInvocationResponse: &protocolException,
		Type:                                typ,
	}
}

func (u *AddMediaIntentHandlingInvocationResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Method string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Method {
	case "AddMediaIntentHandling.confirm":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		addMediaIntentHandlingConfirmInvocationResponse := new(AddMediaIntentHandlingConfirmInvocationResponse)
		if err := d.Decode(&addMediaIntentHandlingConfirmInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AddMediaIntentHandlingConfirmInvocationResponse = addMediaIntentHandlingConfirmInvocationResponse
		u.Type = AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingConfirm
		return nil
	case "AddMediaIntentHandling.handle":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		addMediaIntentHandlingHandleInvocationResponse := new(AddMediaIntentHandlingHandleInvocationResponse)
		if err := d.Decode(&addMediaIntentHandlingHandleInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AddMediaIntentHandlingHandleInvocationResponse = addMediaIntentHandlingHandleInvocationResponse
		u.Type = AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingHandle
		return nil
	case "AddMediaIntentHandling.resolveMediaDestination":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		addMediaIntentHandlingResolveMediaDestinationInvocationResponse := new(AddMediaIntentHandlingResolveMediaDestinationInvocationResponse)
		if err := d.Decode(&addMediaIntentHandlingResolveMediaDestinationInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AddMediaIntentHandlingResolveMediaDestinationInvocationResponse = addMediaIntentHandlingResolveMediaDestinationInvocationResponse
		u.Type = AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingResolveMediaDestination
		return nil
	case "AddMediaIntentHandling.resolveMediaItems":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		addMediaIntentHandlingResolveMediaItemsInvocationResponse := new(AddMediaIntentHandlingResolveMediaItemsInvocationResponse)
		if err := d.Decode(&addMediaIntentHandlingResolveMediaItemsInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AddMediaIntentHandlingResolveMediaItemsInvocationResponse = addMediaIntentHandlingResolveMediaItemsInvocationResponse
		u.Type = AddMediaIntentHandlingInvocationResponseTypeAddMediaIntentHandlingResolveMediaItems
		return nil
	case "ProtocolException":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		protocolExceptionInvocationResponse := new(ProtocolExceptionInvocationResponse)
		if err := d.Decode(&protocolExceptionInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ProtocolExceptionInvocationResponse = protocolExceptionInvocationResponse
		u.Type = AddMediaIntentHandlingInvocationResponseTypeProtocolException
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AddMediaIntentHandlingInvocationResponse) MarshalJSON() ([]byte, error) {
	if u.AddMediaIntentHandlingResolveMediaItemsInvocationResponse != nil {
		return json.Marshal(u.AddMediaIntentHandlingResolveMediaItemsInvocationResponse)
	}

	if u.AddMediaIntentHandlingResolveMediaDestinationInvocationResponse != nil {
		return json.Marshal(u.AddMediaIntentHandlingResolveMediaDestinationInvocationResponse)
	}

	if u.AddMediaIntentHandlingConfirmInvocationResponse != nil {
		return json.Marshal(u.AddMediaIntentHandlingConfirmInvocationResponse)
	}

	if u.AddMediaIntentHandlingHandleInvocationResponse != nil {
		return json.Marshal(u.AddMediaIntentHandlingHandleInvocationResponse)
	}

	if u.ProtocolExceptionInvocationResponse != nil {
		return json.Marshal(u.ProtocolExceptionInvocationResponse)
	}

	return nil, nil
}
