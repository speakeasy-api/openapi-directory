/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CustomDevice {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets all Custom Devices
   *
   * @remarks
   * Gets all Devices
   */
  customDeviceGet(
    config?: AxiosRequestConfig
  ): Promise<operations.CustomDeviceGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/CustomDevice";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CustomDeviceGetResponse =
        new operations.CustomDeviceGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDeviceToPosts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.customDeviceToPosts = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.customDeviceToPosts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.customDeviceToPosts = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates or updates a Custom Device or updates it's values.
   *
   * @remarks
   * Creates or updates a Custom Device or updates it's values.
   *             A Custom Device can be any device that like to add some measurement values to the smart-me Cloud.
   *             Only use a custom device for all non meters.
   *             For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.
   *             To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
   */
  customDevicePostForm(
    req: shared.CustomDeviceToPost,
    config?: AxiosRequestConfig
  ): Promise<operations.CustomDevicePostFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CustomDeviceToPost(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/CustomDevice";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CustomDevicePostFormResponse =
        new operations.CustomDevicePostFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDeviceToPost = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.customDeviceToPost = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Creates or updates a Custom Device or updates it's values.
   *
   * @remarks
   * Creates or updates a Custom Device or updates it's values.
   *             A Custom Device can be any device that like to add some measurement values to the smart-me Cloud.
   *             Only use a custom device for all non meters.
   *             For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.
   *             To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
   */
  customDevicePostJson(
    req: shared.CustomDeviceToPost,
    config?: AxiosRequestConfig
  ): Promise<operations.CustomDevicePostJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CustomDeviceToPost(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/CustomDevice";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CustomDevicePostJsonResponse =
        new operations.CustomDevicePostJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDeviceToPost = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.customDeviceToPost = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Creates or updates a Custom Device or updates it's values.
   *
   * @remarks
   * Creates or updates a Custom Device or updates it's values.
   *             A Custom Device can be any device that like to add some measurement values to the smart-me Cloud.
   *             Only use a custom device for all non meters.
   *             For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.
   *             To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
   */
  customDevicePostRaw(
    req: Uint8Array,
    config?: AxiosRequestConfig
  ): Promise<operations.CustomDevicePostRawResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/CustomDevice";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CustomDevicePostRawResponse =
        new operations.CustomDevicePostRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDeviceToPost = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.customDeviceToPost = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a Custom Device by it's ID
   *
   * @remarks
   * Gets a Device by it's ID
   */
  getApiCustomDeviceId(
    req: operations.GetApiCustomDeviceIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiCustomDeviceIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiCustomDeviceIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/CustomDevice/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiCustomDeviceIdResponse =
        new operations.GetApiCustomDeviceIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customDeviceToPost = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.customDeviceToPost = utils.objectToClass(
              httpRes?.data,
              shared.CustomDeviceToPost
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
