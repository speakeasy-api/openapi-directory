"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var aerodromes_1 = require("./aerodromes");
var airspace_1 = require("./airspace");
var flightrestrictions_1 = require("./flightrestrictions");
var restrictedpublicvenues_1 = require("./restrictedpublicvenues");
var specialsecurityareas_1 = require("./specialsecurityareas");
var surfaceobstacles_1 = require("./surfaceobstacles");
var uasoperatingareas_1 = require("./uasoperatingareas");
var weather_1 = require("./weather");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * DFlight API
     */
    "https://dflight-api.ljaero.com/",
];
/**
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories:
 *
 * @remarks
 * - Airspace
 * - Weather
 * - Temporary Flight Restrictions
 * - Special Security Areas
 * - Restricted Public Venues
 * - Surface Obstacles
 * - Aerodromes
 * - UAS Operating Areas
 *
 * You can define your geographic area of interest in one of three convenient ways:
 * - Providing a latitude/longitude point and distance around that point
 * - Providing a GeoJSON LineString defining your route
 * - Providing an arbitrary GeoJSON Polygon defining your area of interest
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.aerodromes = new aerodromes_1.Aerodromes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.airspace = new airspace_1.Airspace(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.flightRestrictions = new flightrestrictions_1.FlightRestrictions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.restrictedPublicVenues = new restrictedpublicvenues_1.RestrictedPublicVenues(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.specialSecurityAreas = new specialsecurityareas_1.SpecialSecurityAreas(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.surfaceObstacles = new surfaceobstacles_1.SurfaceObstacles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.uasOperatingAreas = new uasoperatingareas_1.UASOperatingAreas(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.weather = new weather_1.Weather(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
