/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DiagnosticsThreadFrames - a single frame of a stack trace
 */
public class DiagnosticsThreadFrames {
    /**
     * address of the frame
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public String address;

    public DiagnosticsThreadFrames withAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * this line isn't from any framework
     */
    @JsonProperty("app_code")
    public Boolean appCode;

    public DiagnosticsThreadFrames withAppCode(Boolean appCode) {
        this.appCode = appCode;
        return this;
    }
    
    /**
     * is a class method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("class_method")
    public Boolean classMethod;

    public DiagnosticsThreadFrames withClassMethod(Boolean classMethod) {
        this.classMethod = classMethod;
        return this;
    }
    
    /**
     * name of the class
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("class_name")
    public String className;

    public DiagnosticsThreadFrames withClassName(String className) {
        this.className = className;
        return this;
    }
    
    /**
     * Formatted frame string
     */
    @JsonProperty("code_formatted")
    public String codeFormatted;

    public DiagnosticsThreadFrames withCodeFormatted(String codeFormatted) {
        this.codeFormatted = codeFormatted;
        return this;
    }
    
    /**
     * Raw frame string
     */
    @JsonProperty("code_raw")
    public String codeRaw;

    public DiagnosticsThreadFrames withCodeRaw(String codeRaw) {
        this.codeRaw = codeRaw;
        return this;
    }
    
    /**
     * name of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file")
    public String file;

    public DiagnosticsThreadFrames withFile(String file) {
        this.file = file;
        return this;
    }
    
    /**
     * Name of the framework
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("framework_name")
    public String frameworkName;

    public DiagnosticsThreadFrames withFrameworkName(String frameworkName) {
        this.frameworkName = frameworkName;
        return this;
    }
    
    /**
     * programming language of the frame
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public DiagnosticsThreadFramesLanguageEnum language;

    public DiagnosticsThreadFrames withLanguage(DiagnosticsThreadFramesLanguageEnum language) {
        this.language = language;
        return this;
    }
    
    /**
     * line number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line")
    public Long line;

    public DiagnosticsThreadFrames withLine(Long line) {
        this.line = line;
        return this;
    }
    
    /**
     * name of the method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    public String method;

    public DiagnosticsThreadFrames withMethod(String method) {
        this.method = method;
        return this;
    }
    
    /**
     * parameters of the frames method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method_params")
    public String methodParams;

    public DiagnosticsThreadFrames withMethodParams(String methodParams) {
        this.methodParams = methodParams;
        return this;
    }
    
    /**
     * frame should be shown always
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relevant")
    public Boolean relevant;

    public DiagnosticsThreadFrames withRelevant(Boolean relevant) {
        this.relevant = relevant;
        return this;
    }
    
    public DiagnosticsThreadFrames(@JsonProperty("app_code") Boolean appCode, @JsonProperty("code_formatted") String codeFormatted, @JsonProperty("code_raw") String codeRaw) {
        this.appCode = appCode;
        this.codeFormatted = codeFormatted;
        this.codeRaw = codeRaw;
  }
}
