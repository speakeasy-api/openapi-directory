/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Determines whether client is a confidential or public client.
 */
export enum CreateOAuthClientRequestClientTypeEnum {
  Confidential = "confidential",
  Public = "public",
}

/**
 * Authorized grant types
 *
 * @remarks
 *
 * * `authorization_code`
 *
 * * `implicit`
 *
 * * `password`
 *
 * * `client_credentials`
 *
 * * `refresh_token`
 *
 *
 *
 * cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
 */
export enum CreateOAuthClientRequestGrantTypesEnum {
  AuthorizationCode = "authorization_code",
  ClientCredentials = "client_credentials",
  Implicit = "implicit",
  Password = "password",
  RefreshToken = "refresh_token",
}

/**
 * Request model for creating an OAuth client
 */
export class CreateOAuthClientRequest extends SpeakeasyBase {
  /**
   * Validity of the access token in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessTokenValidity" })
  accessTokenValidity?: number;

  /**
   * &#128640; Since v4.22.0
   *
   * @remarks
   *
   * Validity of the approval interval in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approvalValidity" })
  approvalValidity?: number;

  /**
   * ID of the OAuth client
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  /**
   * Name, which is shown at the client configuration and authorization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientName" })
  clientName: string;

  /**
   * Secret, which client uses at authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientSecret" })
  clientSecret?: string;

  /**
   * Determines whether client is a confidential or public client.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientType" })
  clientType?: CreateOAuthClientRequestClientTypeEnum;

  /**
   * Authorized grant types
   *
   * @remarks
   *
   * * `authorization_code`
   *
   * * `implicit`
   *
   * * `password`
   *
   * * `client_credentials`
   *
   * * `refresh_token`
   *
   *
   *
   * cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "grantTypes" })
  grantTypes: CreateOAuthClientRequestGrantTypesEnum;

  /**
   * URIs, to which a user is redirected after authorization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirectUris" })
  redirectUris: string[];

  /**
   * Validity of the refresh token in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refreshTokenValidity" })
  refreshTokenValidity?: number;
}
